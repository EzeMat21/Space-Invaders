
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009210  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0f4  0800a0f4  00020824  2**0
                  CONTENTS
  4 .ARM          00000000  0800a0f4  0800a0f4  00020824  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a0f4  0800a0f4  00020824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0f4  0800a0f4  0001a0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0f8  0800a0f8  0001a0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000824  20000000  0800a0fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c4  20000824  0800a920  00020824  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002de8  0800a920  00022de8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020824  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002084d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027d40  00000000  00000000  00020890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ec0  00000000  00000000  000485d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012ef0  00000000  00000000  0004d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a78  00000000  00000000  00060380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001735  00000000  00000000  00061df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001cb0f  00000000  00000000  0006352d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002afcd  00000000  00000000  0008003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e4b0  00000000  00000000  000ab009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000057c0  00000000  00000000  001494bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000824 	.word	0x20000824
 800012c:	00000000 	.word	0x00000000
 8000130:	08009308 	.word	0x08009308

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000828 	.word	0x20000828
 800014c:	08009308 	.word	0x08009308

08000150 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000150:	b508      	push	{r3, lr}
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */

	vTaskSetApplicationTaskTag( NULL, ( void * ) 0 );
 8000152:	2100      	movs	r1, #0
 8000154:	4608      	mov	r0, r1
 8000156:	f007 f9c1 	bl	80074dc <vTaskSetApplicationTaskTag>

}
 800015a:	bd08      	pop	{r3, pc}

0800015c <getPlayer>:


//----------------------------------------------------------------------------------------------------------------------------------------------


player_t getPlayer(){
 800015c:	4603      	mov	r3, r0

	return Player;
 800015e:	4a03      	ldr	r2, [pc, #12]	; (800016c <getPlayer+0x10>)
 8000160:	ca03      	ldmia	r2!, {r0, r1}
 8000162:	6018      	str	r0, [r3, #0]
 8000164:	6059      	str	r1, [r3, #4]
}
 8000166:	4618      	mov	r0, r3
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	200008b4 	.word	0x200008b4

08000170 <getDisparodisparo>:

uint8_t getDisparodisparo(){
	return Disparo.disparo;
}
 8000170:	4b01      	ldr	r3, [pc, #4]	; (8000178 <getDisparodisparo+0x8>)
 8000172:	7898      	ldrb	r0, [r3, #2]
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	200008ac 	.word	0x200008ac

0800017c <getCantidad_Aliens_Vivos>:

uint8_t getCantidad_Aliens_Vivos(){
	return movimiento_Aliens.cantidad_aliens_vivos;
}
 800017c:	4b01      	ldr	r3, [pc, #4]	; (8000184 <getCantidad_Aliens_Vivos+0x8>)
 800017e:	7998      	ldrb	r0, [r3, #6]
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	200008f4 	.word	0x200008f4

08000188 <actualizarPantalla>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void actualizarPantalla(){
 8000188:	b508      	push	{r3, lr}

    SSD1306_UpdateScreen(); // update screen
 800018a:	f002 fe25 	bl	8002dd8 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 800018e:	2000      	movs	r0, #0
 8000190:	f002 faf6 	bl	8002780 <SSD1306_Fill>
}
 8000194:	bd08      	pop	{r3, pc}
	...

08000198 <playerInit>:


void playerInit(){

	Player.posicion_X = 64;
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <playerInit+0x1c>)
 800019a:	2240      	movs	r2, #64	; 0x40
 800019c:	801a      	strh	r2, [r3, #0]
	Player.vivo = true;
 800019e:	2201      	movs	r2, #1
 80001a0:	709a      	strb	r2, [r3, #2]
	Player.puntaje = 2000;
 80001a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80001a6:	809a      	strh	r2, [r3, #4]
	Player.vidas = 3;
 80001a8:	2203      	movs	r2, #3
 80001aa:	70da      	strb	r2, [r3, #3]
	Player.nivel = 0;
 80001ac:	2200      	movs	r2, #0
 80001ae:	719a      	strb	r2, [r3, #6]

}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	200008b4 	.word	0x200008b4

080001b8 <plotPlayer>:

void plotPlayer(uint8_t direccion){
 80001b8:	b500      	push	{lr}
 80001ba:	b083      	sub	sp, #12

	if(Player.vivo == true){
 80001bc:	4b1c      	ldr	r3, [pc, #112]	; (8000230 <plotPlayer+0x78>)
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d128      	bne.n	8000216 <plotPlayer+0x5e>

		if(direccion == derecha){
 80001c4:	2802      	cmp	r0, #2
 80001c6:	d00f      	beq.n	80001e8 <plotPlayer+0x30>
			else{
				Player.posicion_X = Player.posicion_X + 4;
			}

		}
		else if(direccion == izquierda){
 80001c8:	2803      	cmp	r0, #3
 80001ca:	d019      	beq.n	8000200 <plotPlayer+0x48>
			else{
				Player.posicion_X = Player.posicion_X - 4;
			}
		}

		SSD1306_DrawBitmap(Player.posicion_X, 56, nave, 8,8,1);
 80001cc:	2301      	movs	r3, #1
 80001ce:	9301      	str	r3, [sp, #4]
 80001d0:	2308      	movs	r3, #8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	4a17      	ldr	r2, [pc, #92]	; (8000234 <plotPlayer+0x7c>)
 80001d6:	2138      	movs	r1, #56	; 0x38
 80001d8:	4815      	ldr	r0, [pc, #84]	; (8000230 <plotPlayer+0x78>)
 80001da:	f9b0 0000 	ldrsh.w	r0, [r0]
 80001de:	f002 fb07 	bl	80027f0 <SSD1306_DrawBitmap>

		SSD1306_DrawBitmap(Player.posicion_X, 56, nave_explotada, 8,8,1);
	}


}
 80001e2:	b003      	add	sp, #12
 80001e4:	f85d fb04 	ldr.w	pc, [sp], #4
			if(Player.posicion_X >= 120){
 80001e8:	4b11      	ldr	r3, [pc, #68]	; (8000230 <plotPlayer+0x78>)
 80001ea:	881b      	ldrh	r3, [r3, #0]
 80001ec:	2b77      	cmp	r3, #119	; 0x77
 80001ee:	d903      	bls.n	80001f8 <plotPlayer+0x40>
				Player.posicion_X = 120;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <plotPlayer+0x78>)
 80001f2:	2278      	movs	r2, #120	; 0x78
 80001f4:	801a      	strh	r2, [r3, #0]
 80001f6:	e7e9      	b.n	80001cc <plotPlayer+0x14>
				Player.posicion_X = Player.posicion_X + 4;
 80001f8:	3304      	adds	r3, #4
 80001fa:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <plotPlayer+0x78>)
 80001fc:	8013      	strh	r3, [r2, #0]
 80001fe:	e7e5      	b.n	80001cc <plotPlayer+0x14>
			if(Player.posicion_X <= 0){
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <plotPlayer+0x78>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	b91b      	cbnz	r3, 800020e <plotPlayer+0x56>
				Player.posicion_X = 0;
 8000206:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <plotPlayer+0x78>)
 8000208:	2200      	movs	r2, #0
 800020a:	801a      	strh	r2, [r3, #0]
 800020c:	e7de      	b.n	80001cc <plotPlayer+0x14>
				Player.posicion_X = Player.posicion_X - 4;
 800020e:	3b04      	subs	r3, #4
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <plotPlayer+0x78>)
 8000212:	8013      	strh	r3, [r2, #0]
 8000214:	e7da      	b.n	80001cc <plotPlayer+0x14>
		SSD1306_DrawBitmap(Player.posicion_X, 56, nave_explotada, 8,8,1);
 8000216:	2301      	movs	r3, #1
 8000218:	9301      	str	r3, [sp, #4]
 800021a:	2308      	movs	r3, #8
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	4a06      	ldr	r2, [pc, #24]	; (8000238 <plotPlayer+0x80>)
 8000220:	2138      	movs	r1, #56	; 0x38
 8000222:	4803      	ldr	r0, [pc, #12]	; (8000230 <plotPlayer+0x78>)
 8000224:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000228:	f002 fae2 	bl	80027f0 <SSD1306_DrawBitmap>
}
 800022c:	e7d9      	b.n	80001e2 <plotPlayer+0x2a>
 800022e:	bf00      	nop
 8000230:	200008b4 	.word	0x200008b4
 8000234:	08009b08 	.word	0x08009b08
 8000238:	08009b10 	.word	0x08009b10

0800023c <InvaderInit>:



void InvaderInit(){

	movimiento_Aliens.orientacion = mov_derecha;
 800023c:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <InvaderInit+0x98>)
 800023e:	f04f 0c00 	mov.w	ip, #0
 8000242:	f883 c000 	strb.w	ip, [r3]
	movimiento_Aliens.alien_columna_derecha = NUM_ALIEN_COLUMNA - 1;
 8000246:	2206      	movs	r2, #6
 8000248:	715a      	strb	r2, [r3, #5]
	movimiento_Aliens.alien_columna_izquierda = 0;
 800024a:	f883 c004 	strb.w	ip, [r3, #4]

	//Inicializacion cantidad aliens vivos.
	movimiento_Aliens.cantidad_aliens_vivos = 21;
 800024e:	2215      	movs	r2, #21
 8000250:	719a      	strb	r2, [r3, #6]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000252:	f1bc 0f02 	cmp.w	ip, #2
 8000256:	d836      	bhi.n	80002c6 <InvaderInit+0x8a>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000258:	2300      	movs	r3, #0
 800025a:	2b06      	cmp	r3, #6
 800025c:	d82e      	bhi.n	80002bc <InvaderInit+0x80>
void InvaderInit(){
 800025e:	b410      	push	{r4}
			Alien[y][x].posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 8000260:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000264:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000268:	320b      	adds	r2, #11
 800026a:	4c1b      	ldr	r4, [pc, #108]	; (80002d8 <InvaderInit+0x9c>)
 800026c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000270:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8000274:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000278:	4408      	add	r0, r1
 800027a:	1821      	adds	r1, r4, r0
 800027c:	5422      	strb	r2, [r4, r0]
			Alien[y][x].posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 800027e:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8000282:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8000286:	704a      	strb	r2, [r1, #1]
			Alien[y][x].vivo = true;
 8000288:	2201      	movs	r2, #1
 800028a:	708a      	strb	r2, [r1, #2]
			Alien[y][x].explosion = false;
 800028c:	2200      	movs	r2, #0
 800028e:	70ca      	strb	r2, [r1, #3]
			Alien[y][x].conteo_explosion = 2;
 8000290:	2202      	movs	r2, #2
 8000292:	710a      	strb	r2, [r1, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000294:	3301      	adds	r3, #1
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b06      	cmp	r3, #6
 800029a:	d9e1      	bls.n	8000260 <InvaderInit+0x24>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800029c:	f10c 0c01 	add.w	ip, ip, #1
 80002a0:	fa5f fc8c 	uxtb.w	ip, ip
 80002a4:	f1bc 0f02 	cmp.w	ip, #2
 80002a8:	d801      	bhi.n	80002ae <InvaderInit+0x72>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002aa:	2300      	movs	r3, #0
 80002ac:	e7f4      	b.n	8000298 <InvaderInit+0x5c>
		}
	}


	//Reinicio velocidad horizontal de los aliens
	dificultad.velocidad_horizontal = 8;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <InvaderInit+0xa0>)
 80002b0:	2208      	movs	r2, #8
 80002b2:	701a      	strb	r2, [r3, #0]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 80002b4:	2202      	movs	r2, #2
 80002b6:	711a      	strb	r2, [r3, #4]


}
 80002b8:	bc10      	pop	{r4}
 80002ba:	4770      	bx	lr
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002bc:	f10c 0c01 	add.w	ip, ip, #1
 80002c0:	fa5f fc8c 	uxtb.w	ip, ip
 80002c4:	e7c5      	b.n	8000252 <InvaderInit+0x16>
	dificultad.velocidad_horizontal = 8;
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <InvaderInit+0xa0>)
 80002c8:	2208      	movs	r2, #8
 80002ca:	701a      	strb	r2, [r3, #0]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 80002cc:	2202      	movs	r2, #2
 80002ce:	711a      	strb	r2, [r3, #4]
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	200008f4 	.word	0x200008f4
 80002d8:	20000840 	.word	0x20000840
 80002dc:	200008ec 	.word	0x200008ec

080002e0 <disparoInit>:


void disparoInit(){

	//Inicializacion del disparo del Player
	Disparo.posicion_x = 0;
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <disparoInit+0x10>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80002e6:	2132      	movs	r1, #50	; 0x32
 80002e8:	7059      	strb	r1, [r3, #1]
	Disparo.disparo = false;
 80002ea:	709a      	strb	r2, [r3, #2]

}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	200008ac 	.word	0x200008ac

080002f4 <disparar>:


void disparar(){
 80002f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002f8:	b083      	sub	sp, #12

			if(Disparo.disparo == true){
 80002fa:	4b65      	ldr	r3, [pc, #404]	; (8000490 <disparar+0x19c>)
 80002fc:	789b      	ldrb	r3, [r3, #2]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d001      	beq.n	8000306 <disparar+0x12>
					tamano_alien = TAMANO_ALIEN_BOTTOM_ANCHURA;
					break;

				}

				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000302:	2700      	movs	r7, #0
 8000304:	e0b4      	b.n	8000470 <disparar+0x17c>
				SSD1306_DrawLine(Disparo.posicion_x + 4, Disparo.posicion_y, Disparo.posicion_x + 4, Disparo.posicion_y + 2, 1);
 8000306:	4c62      	ldr	r4, [pc, #392]	; (8000490 <disparar+0x19c>)
 8000308:	7820      	ldrb	r0, [r4, #0]
 800030a:	3004      	adds	r0, #4
 800030c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8000310:	b289      	uxth	r1, r1
 8000312:	1c8b      	adds	r3, r1, #2
 8000314:	2201      	movs	r2, #1
 8000316:	9200      	str	r2, [sp, #0]
 8000318:	b29b      	uxth	r3, r3
 800031a:	4602      	mov	r2, r0
 800031c:	f002 fb17 	bl	800294e <SSD1306_DrawLine>
				Disparo.posicion_y = Disparo.posicion_y - VELOCIDAD_DISPARO_PLAYER;
 8000320:	7863      	ldrb	r3, [r4, #1]
 8000322:	3b04      	subs	r3, #4
 8000324:	b25b      	sxtb	r3, r3
 8000326:	7063      	strb	r3, [r4, #1]
				if(Disparo.posicion_y <= 0){
 8000328:	2b00      	cmp	r3, #0
 800032a:	dcea      	bgt.n	8000302 <disparar+0xe>
					Disparo.disparo = false;
 800032c:	2200      	movs	r2, #0
 800032e:	70a2      	strb	r2, [r4, #2]
					Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 8000330:	2232      	movs	r2, #50	; 0x32
 8000332:	7062      	strb	r2, [r4, #1]
 8000334:	e7e5      	b.n	8000302 <disparar+0xe>
					tamano_alien = TAMANO_ALIEN_MIDDLE_ANCHURA;
 8000336:	f04f 080b 	mov.w	r8, #11
 800033a:	e0a4      	b.n	8000486 <disparar+0x192>
				switch(y){
 800033c:	f04f 0808 	mov.w	r8, #8
 8000340:	e0a1      	b.n	8000486 <disparar+0x192>
									switch(y){
									case 0:
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_TOP + Player.nivel);
										break;
									case 1:
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_MIDDLE + Player.nivel);
 8000342:	4a54      	ldr	r2, [pc, #336]	; (8000494 <disparar+0x1a0>)
 8000344:	8893      	ldrh	r3, [r2, #4]
 8000346:	f892 c006 	ldrb.w	ip, [r2, #6]
 800034a:	4463      	add	r3, ip
 800034c:	3314      	adds	r3, #20
 800034e:	8093      	strh	r3, [r2, #4]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(Alien[y][x].explosion == true){
 8000350:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000354:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000358:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800035c:	4413      	add	r3, r2
 800035e:	4a4e      	ldr	r2, [pc, #312]	; (8000498 <disparar+0x1a4>)
 8000360:	4413      	add	r3, r2
 8000362:	78db      	ldrb	r3, [r3, #3]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d067      	beq.n	8000438 <disparar+0x144>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000368:	3401      	adds	r4, #1
 800036a:	b2e4      	uxtb	r4, r4
 800036c:	2c06      	cmp	r4, #6
 800036e:	d87d      	bhi.n	800046c <disparar+0x178>
					if( (Disparo.posicion_x + 1 >= Alien[y][x].posicion_X) &  (Disparo.posicion_x + 1 <= (Alien[y][x].posicion_X + tamano_alien))
 8000370:	4947      	ldr	r1, [pc, #284]	; (8000490 <disparar+0x19c>)
 8000372:	f891 c000 	ldrb.w	ip, [r1]
 8000376:	f10c 0e01 	add.w	lr, ip, #1
 800037a:	4626      	mov	r6, r4
 800037c:	4846      	ldr	r0, [pc, #280]	; (8000498 <disparar+0x1a4>)
 800037e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000382:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000386:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800038a:	4413      	add	r3, r2
 800038c:	18c2      	adds	r2, r0, r3
 800038e:	56c0      	ldrsb	r0, [r0, r3]
 8000390:	eb08 0900 	add.w	r9, r8, r0
 8000394:	4586      	cmp	lr, r0
 8000396:	bfb4      	ite	lt
 8000398:	2300      	movlt	r3, #0
 800039a:	2301      	movge	r3, #1
 800039c:	45cc      	cmp	ip, r9
 800039e:	bfa8      	it	ge
 80003a0:	2300      	movge	r3, #0
							& ((Disparo.posicion_y) >= Alien[y][x].posicion_Y) & (Disparo.posicion_y <= Alien[y][x].posicion_Y + TAMANO_ALIEN_ALTURA)){
 80003a2:	f991 c001 	ldrsb.w	ip, [r1, #1]
 80003a6:	7851      	ldrb	r1, [r2, #1]
 80003a8:	f101 0208 	add.w	r2, r1, #8
 80003ac:	4594      	cmp	ip, r2
 80003ae:	bfcc      	ite	gt
 80003b0:	2200      	movgt	r2, #0
 80003b2:	2201      	movle	r2, #1
					if( (Disparo.posicion_x + 1 >= Alien[y][x].posicion_X) &  (Disparo.posicion_x + 1 <= (Alien[y][x].posicion_X + tamano_alien))
 80003b4:	458c      	cmp	ip, r1
 80003b6:	bfb4      	ite	lt
 80003b8:	2300      	movlt	r3, #0
 80003ba:	f003 0301 	andge.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0c6      	beq.n	8000350 <disparar+0x5c>
 80003c2:	2a00      	cmp	r2, #0
 80003c4:	d0c4      	beq.n	8000350 <disparar+0x5c>
								if(Alien[y][x].vivo == true){
 80003c6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80003ca:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80003ce:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80003d2:	4413      	add	r3, r2
 80003d4:	4a30      	ldr	r2, [pc, #192]	; (8000498 <disparar+0x1a4>)
 80003d6:	4413      	add	r3, r2
 80003d8:	789b      	ldrb	r3, [r3, #2]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d1b8      	bne.n	8000350 <disparar+0x5c>
									Alien[y][x].vivo = false;
 80003de:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80003e2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80003e6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80003ea:	4413      	add	r3, r2
 80003ec:	4a2a      	ldr	r2, [pc, #168]	; (8000498 <disparar+0x1a4>)
 80003ee:	4413      	add	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	709a      	strb	r2, [r3, #2]
									Alien[y][x].explosion = true;
 80003f4:	f04f 0c01 	mov.w	ip, #1
 80003f8:	f883 c003 	strb.w	ip, [r3, #3]
									Disparo.disparo = false;
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <disparar+0x19c>)
 80003fe:	709a      	strb	r2, [r3, #2]
									Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 8000400:	2232      	movs	r2, #50	; 0x32
 8000402:	705a      	strb	r2, [r3, #1]
									movimiento_Aliens.cantidad_aliens_vivos -=1;
 8000404:	4a25      	ldr	r2, [pc, #148]	; (800049c <disparar+0x1a8>)
 8000406:	7993      	ldrb	r3, [r2, #6]
 8000408:	3b01      	subs	r3, #1
 800040a:	7193      	strb	r3, [r2, #6]
									switch(y){
 800040c:	4567      	cmp	r7, ip
 800040e:	d098      	beq.n	8000342 <disparar+0x4e>
 8000410:	2f02      	cmp	r7, #2
 8000412:	d009      	beq.n	8000428 <disparar+0x134>
 8000414:	2f00      	cmp	r7, #0
 8000416:	d19b      	bne.n	8000350 <disparar+0x5c>
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_TOP + Player.nivel);
 8000418:	4a1e      	ldr	r2, [pc, #120]	; (8000494 <disparar+0x1a0>)
 800041a:	8893      	ldrh	r3, [r2, #4]
 800041c:	f892 c006 	ldrb.w	ip, [r2, #6]
 8000420:	4463      	add	r3, ip
 8000422:	331e      	adds	r3, #30
 8000424:	8093      	strh	r3, [r2, #4]
										break;
 8000426:	e793      	b.n	8000350 <disparar+0x5c>
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_BOTTOM + Player.nivel);
 8000428:	4a1a      	ldr	r2, [pc, #104]	; (8000494 <disparar+0x1a0>)
 800042a:	8893      	ldrh	r3, [r2, #4]
 800042c:	f892 c006 	ldrb.w	ip, [r2, #6]
 8000430:	4463      	add	r3, ip
 8000432:	330a      	adds	r3, #10
 8000434:	8093      	strh	r3, [r2, #4]
										break;
 8000436:	e78b      	b.n	8000350 <disparar+0x5c>
						SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,explosion,16,8,1);
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	2308      	movs	r3, #8
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	2310      	movs	r3, #16
 8000440:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <disparar+0x1ac>)
 8000442:	f002 f9d5 	bl	80027f0 <SSD1306_DrawBitmap>
						Alien[y][x].conteo_explosion--;
 8000446:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800044a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800044e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000452:	4413      	add	r3, r2
 8000454:	4a10      	ldr	r2, [pc, #64]	; (8000498 <disparar+0x1a4>)
 8000456:	441a      	add	r2, r3
 8000458:	7913      	ldrb	r3, [r2, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	b2db      	uxtb	r3, r3
 800045e:	7113      	strb	r3, [r2, #4]

						if(Alien[y][x].conteo_explosion == 0){
 8000460:	2b00      	cmp	r3, #0
 8000462:	d181      	bne.n	8000368 <disparar+0x74>
							Alien[y][x].explosion = false;
 8000464:	4613      	mov	r3, r2
 8000466:	2200      	movs	r2, #0
 8000468:	70da      	strb	r2, [r3, #3]
 800046a:	e77d      	b.n	8000368 <disparar+0x74>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800046c:	3701      	adds	r7, #1
 800046e:	b2ff      	uxtb	r7, r7
 8000470:	2f02      	cmp	r7, #2
 8000472:	d80a      	bhi.n	800048a <disparar+0x196>
				switch(y){
 8000474:	463d      	mov	r5, r7
 8000476:	2f01      	cmp	r7, #1
 8000478:	f43f af5d 	beq.w	8000336 <disparar+0x42>
 800047c:	2f02      	cmp	r7, #2
 800047e:	f47f af5d 	bne.w	800033c <disparar+0x48>
					tamano_alien = TAMANO_ALIEN_BOTTOM_ANCHURA;
 8000482:	f04f 080c 	mov.w	r8, #12
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000486:	2400      	movs	r4, #0
 8000488:	e770      	b.n	800036c <disparar+0x78>



				}
			}
}
 800048a:	b003      	add	sp, #12
 800048c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000490:	200008ac 	.word	0x200008ac
 8000494:	200008b4 	.word	0x200008b4
 8000498:	20000840 	.word	0x20000840
 800049c:	200008f4 	.word	0x200008f4
 80004a0:	08009af0 	.word	0x08009af0

080004a4 <disparoAliens>:


void disparoAliens(){


	if(movimiento_Aliens.cantidad_aliens_vivos != 0){	//Si no hay aliens vivos.
 80004a4:	4b41      	ldr	r3, [pc, #260]	; (80005ac <disparoAliens+0x108>)
 80004a6:	799b      	ldrb	r3, [r3, #6]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d07e      	beq.n	80005aa <disparoAliens+0x106>
void disparoAliens(){
 80004ac:	b510      	push	{r4, lr}
 80004ae:	b082      	sub	sp, #8

				if(Disparo_Aliens.disparo == true){
 80004b0:	4b3f      	ldr	r3, [pc, #252]	; (80005b0 <disparoAliens+0x10c>)
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d043      	beq.n	8000540 <disparoAliens+0x9c>
					uint8_t flag = false;

					while(flag != true){


						uint8_t fila = rand() % NUM_ALIEN_FILA;
 80004b8:	f007 fee0 	bl	800827c <rand>
 80004bc:	4c3d      	ldr	r4, [pc, #244]	; (80005b4 <disparoAliens+0x110>)
 80004be:	fb84 3400 	smull	r3, r4, r4, r0
 80004c2:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 80004c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80004ca:	1b04      	subs	r4, r0, r4
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 80004cc:	f007 fed6 	bl	800827c <rand>
 80004d0:	4a39      	ldr	r2, [pc, #228]	; (80005b8 <disparoAliens+0x114>)
 80004d2:	fb82 3200 	smull	r3, r2, r2, r0
 80004d6:	4402      	add	r2, r0
 80004d8:	17c3      	asrs	r3, r0, #31
 80004da:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80004de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80004e2:	1ac3      	subs	r3, r0, r3

						if(Alien[fila][columna].vivo == true){
 80004e4:	b2e4      	uxtb	r4, r4
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80004ec:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80004f0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80004f4:	4411      	add	r1, r2
 80004f6:	4a31      	ldr	r2, [pc, #196]	; (80005bc <disparoAliens+0x118>)
 80004f8:	440a      	add	r2, r1
 80004fa:	7892      	ldrb	r2, [r2, #2]
 80004fc:	2a01      	cmp	r2, #1
 80004fe:	d1db      	bne.n	80004b8 <disparoAliens+0x14>
							flag = true;
							Disparo_Aliens.disparo = true;
 8000500:	4a2b      	ldr	r2, [pc, #172]	; (80005b0 <disparoAliens+0x10c>)
 8000502:	2101      	movs	r1, #1
 8000504:	7091      	strb	r1, [r2, #2]

							Disparo_Aliens.posicion_x = Alien[fila][columna].posicion_X + (TAMANO_ALIEN/2);
 8000506:	492d      	ldr	r1, [pc, #180]	; (80005bc <disparoAliens+0x118>)
 8000508:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800050c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000510:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8000514:	4423      	add	r3, r4
 8000516:	18c8      	adds	r0, r1, r3
 8000518:	5ccb      	ldrb	r3, [r1, r3]
 800051a:	3304      	adds	r3, #4
 800051c:	7013      	strb	r3, [r2, #0]
							Disparo_Aliens.posicion_y = Alien[fila][columna].posicion_Y + (TAMANO_ALIEN/2);
 800051e:	7843      	ldrb	r3, [r0, #1]
 8000520:	3304      	adds	r3, #4
 8000522:	7053      	strb	r3, [r2, #1]
						}

					}
				}

				SSD1306_DrawBitmap(Disparo_Aliens.posicion_x, Disparo_Aliens.posicion_y, AlienBombGfx, 2, 4, 1);
 8000524:	4822      	ldr	r0, [pc, #136]	; (80005b0 <disparoAliens+0x10c>)
 8000526:	2301      	movs	r3, #1
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2304      	movs	r3, #4
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2302      	movs	r3, #2
 8000530:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <disparoAliens+0x11c>)
 8000532:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8000536:	7800      	ldrb	r0, [r0, #0]
 8000538:	f002 f95a 	bl	80027f0 <SSD1306_DrawBitmap>

	}

}
 800053c:	b002      	add	sp, #8
 800053e:	bd10      	pop	{r4, pc}
					Disparo_Aliens.posicion_y = Disparo_Aliens.posicion_y + dificultad.velocidad_disparo_aliens;
 8000540:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <disparoAliens+0x10c>)
 8000542:	7853      	ldrb	r3, [r2, #1]
 8000544:	491f      	ldr	r1, [pc, #124]	; (80005c4 <disparoAliens+0x120>)
 8000546:	7889      	ldrb	r1, [r1, #2]
 8000548:	440b      	add	r3, r1
 800054a:	b25b      	sxtb	r3, r3
 800054c:	7053      	strb	r3, [r2, #1]
					if( (Disparo_Aliens.posicion_x + 1 >= Player.posicion_X) &  (Disparo_Aliens.posicion_x + 1 <= Player.posicion_X + TAMANO_PLAYER_ANCHURA)
 800054e:	7811      	ldrb	r1, [r2, #0]
 8000550:	1c4a      	adds	r2, r1, #1
 8000552:	481d      	ldr	r0, [pc, #116]	; (80005c8 <disparoAliens+0x124>)
 8000554:	8800      	ldrh	r0, [r0, #0]
 8000556:	1d44      	adds	r4, r0, #5
 8000558:	4282      	cmp	r2, r0
 800055a:	bfb4      	ite	lt
 800055c:	2200      	movlt	r2, #0
 800055e:	2201      	movge	r2, #1
 8000560:	42a1      	cmp	r1, r4
 8000562:	bfc8      	it	gt
 8000564:	2200      	movgt	r2, #0
							& ((Disparo_Aliens.posicion_y) >= TOTAL_PIXELES_Y-TAMANO_NAVE_Y) & (Disparo.posicion_y <= TOTAL_PIXELES_Y)){
 8000566:	4919      	ldr	r1, [pc, #100]	; (80005cc <disparoAliens+0x128>)
 8000568:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800056c:	2940      	cmp	r1, #64	; 0x40
 800056e:	bfcc      	ite	gt
 8000570:	2100      	movgt	r1, #0
 8000572:	2101      	movle	r1, #1
					if( (Disparo_Aliens.posicion_x + 1 >= Player.posicion_X) &  (Disparo_Aliens.posicion_x + 1 <= Player.posicion_X + TAMANO_PLAYER_ANCHURA)
 8000574:	2b37      	cmp	r3, #55	; 0x37
 8000576:	bfd4      	ite	le
 8000578:	2200      	movle	r2, #0
 800057a:	f002 0201 	andgt.w	r2, r2, #1
 800057e:	b172      	cbz	r2, 800059e <disparoAliens+0xfa>
 8000580:	b169      	cbz	r1, 800059e <disparoAliens+0xfa>
						Disparo_Aliens.disparo = false;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <disparoAliens+0x10c>)
 8000584:	2200      	movs	r2, #0
 8000586:	709a      	strb	r2, [r3, #2]
						Player.vidas = Player.vidas - 1;
 8000588:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <disparoAliens+0x124>)
 800058a:	78d3      	ldrb	r3, [r2, #3]
 800058c:	3b01      	subs	r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	70d3      	strb	r3, [r2, #3]
						if(Player.vidas == 0){
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1c6      	bne.n	8000524 <disparoAliens+0x80>
							Player.vivo = false;
 8000596:	4613      	mov	r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	709a      	strb	r2, [r3, #2]
 800059c:	e7c2      	b.n	8000524 <disparoAliens+0x80>
					else if(Disparo_Aliens.posicion_y >= 60){
 800059e:	2b3b      	cmp	r3, #59	; 0x3b
 80005a0:	ddc0      	ble.n	8000524 <disparoAliens+0x80>
						Disparo_Aliens.disparo = false;
 80005a2:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <disparoAliens+0x10c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	709a      	strb	r2, [r3, #2]
 80005a8:	e7bc      	b.n	8000524 <disparoAliens+0x80>
 80005aa:	4770      	bx	lr
 80005ac:	200008f4 	.word	0x200008f4
 80005b0:	200008b0 	.word	0x200008b0
 80005b4:	55555556 	.word	0x55555556
 80005b8:	92492493 	.word	0x92492493
 80005bc:	20000840 	.word	0x20000840
 80005c0:	08009a8c 	.word	0x08009a8c
 80005c4:	200008ec 	.word	0x200008ec
 80005c8:	200008b4 	.word	0x200008b4
 80005cc:	200008ac 	.word	0x200008ac

080005d0 <BasesProcesarDisparo>:


}


void BasesProcesarDisparo(disparo_t *disparo, uint8_t condicion){
 80005d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	4604      	mov	r4, r0
 80005d8:	460d      	mov	r5, r1

	uint16_t resultado_or[3] = {0x00, 0x00, 0x00};
 80005da:	2100      	movs	r1, #0
 80005dc:	f8ad 1000 	strh.w	r1, [sp]
 80005e0:	f8ad 1002 	strh.w	r1, [sp, #2]
 80005e4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint16_t bases_16bits;
	uint8_t k = 0, conteo = 0;

	for(uint8_t i=0;i<3;i++){
 80005e8:	e024      	b.n	8000634 <BasesProcesarDisparo+0x64>
	    for(uint8_t j=0; j<16;j++){
	        resultado_or[i] |= (j % 2 == 0) ? (bases[i][j] << 8) : bases[i][j];
 80005ea:	486d      	ldr	r0, [pc, #436]	; (80007a0 <BasesProcesarDisparo+0x1d0>)
 80005ec:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80005f0:	f810 e003 	ldrb.w	lr, [r0, r3]
 80005f4:	a802      	add	r0, sp, #8
 80005f6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80005fa:	ea4c 0c0e 	orr.w	ip, ip, lr
 80005fe:	f822 cc08 	strh.w	ip, [r2, #-8]
	    for(uint8_t j=0; j<16;j++){
 8000602:	3301      	adds	r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b0f      	cmp	r3, #15
 8000608:	d812      	bhi.n	8000630 <BasesProcesarDisparo+0x60>
	        resultado_or[i] |= (j % 2 == 0) ? (bases[i][j] << 8) : bases[i][j];
 800060a:	460a      	mov	r2, r1
 800060c:	a802      	add	r0, sp, #8
 800060e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8000612:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8000616:	f013 0f01 	tst.w	r3, #1
 800061a:	d1e6      	bne.n	80005ea <BasesProcesarDisparo+0x1a>
 800061c:	4860      	ldr	r0, [pc, #384]	; (80007a0 <BasesProcesarDisparo+0x1d0>)
 800061e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8000622:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000626:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800062a:	fa0f fe8e 	sxth.w	lr, lr
 800062e:	e7e1      	b.n	80005f4 <BasesProcesarDisparo+0x24>
	for(uint8_t i=0;i<3;i++){
 8000630:	3101      	adds	r1, #1
 8000632:	b2c9      	uxtb	r1, r1
 8000634:	2902      	cmp	r1, #2
 8000636:	d801      	bhi.n	800063c <BasesProcesarDisparo+0x6c>
	    for(uint8_t j=0; j<16;j++){
 8000638:	2300      	movs	r3, #0
 800063a:	e7e4      	b.n	8000606 <BasesProcesarDisparo+0x36>

	    }
	}

	if (disparo->posicion_y >= LIMITE_ARRIBA_BASE && disparo->posicion_y < LIMITE_ABAJO_BASE) {
 800063c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000640:	3b26      	subs	r3, #38	; 0x26
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b06      	cmp	r3, #6
 8000646:	f200 80a7 	bhi.w	8000798 <BasesProcesarDisparo+0x1c8>

		uint8_t pos_x = disparo->posicion_x;
 800064a:	7823      	ldrb	r3, [r4, #0]
	    if (condicion == 1) pos_x += POS_OFF_DISPARO_PLAYER;
 800064c:	2d01      	cmp	r5, #1
 800064e:	d001      	beq.n	8000654 <BasesProcesarDisparo+0x84>

	    for (int i = 0; i < 3; ++i) {
 8000650:	2600      	movs	r6, #0
 8000652:	e076      	b.n	8000742 <BasesProcesarDisparo+0x172>
	    if (condicion == 1) pos_x += POS_OFF_DISPARO_PLAYER;
 8000654:	3304      	adds	r3, #4
 8000656:	b2db      	uxtb	r3, r3
 8000658:	e7fa      	b.n	8000650 <BasesProcesarDisparo+0x80>
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO - 1 - desplazamiento));
	            }

	            if ((resultado & resultado_or[i]) != 0) {

	            	disparo->disparo = false;
 800065a:	2300      	movs	r3, #0
 800065c:	70a3      	strb	r3, [r4, #2]


	            	uint8_t desplazamiento_horiz = (rand() % RANDOM_MAX_3) + DESPLAZAMIENTO_MINIMO;
 800065e:	f007 fe0d 	bl	800827c <rand>
 8000662:	4b50      	ldr	r3, [pc, #320]	; (80007a4 <BasesProcesarDisparo+0x1d4>)
 8000664:	fb83 1300 	smull	r1, r3, r3, r0
 8000668:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800066c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000670:	1ac3      	subs	r3, r0, r3
 8000672:	b2d9      	uxtb	r1, r3
 8000674:	3102      	adds	r1, #2
 8000676:	b2c9      	uxtb	r1, r1
	            	uint8_t jmin = 2;

	            	if (condicion != 0) {
 8000678:	b11d      	cbz	r5, 8000682 <BasesProcesarDisparo+0xb2>
	                    disparo->posicion_y = POSICION_INICIAL_DISPARO;
 800067a:	2332      	movs	r3, #50	; 0x32
 800067c:	7063      	strb	r3, [r4, #1]
	                    //disparo->numero_disparos = 0;
	                    jmin = 1;
 800067e:	2201      	movs	r2, #1
 8000680:	e012      	b.n	80006a8 <BasesProcesarDisparo+0xd8>
	            	uint8_t jmin = 2;
 8000682:	2202      	movs	r2, #2
	                }


	                for (uint8_t j=jmin; j<desplazamiento_horiz; j++) {
 8000684:	e010      	b.n	80006a8 <BasesProcesarDisparo+0xd8>
	                    resultado += (1 << (OFFSET_DESPLAZAMIENTO + j - desplazamiento));
 8000686:	f102 030f 	add.w	r3, r2, #15
 800068a:	1bdb      	subs	r3, r3, r7
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f303 	lsl.w	r3, r0, r3
 8000692:	4443      	add	r3, r8
 8000694:	b29b      	uxth	r3, r3
	                    resultado += (1 << (OFFSET_DESPLAZAMIENTO - j - desplazamiento));
 8000696:	f1c2 040f 	rsb	r4, r2, #15
 800069a:	1be4      	subs	r4, r4, r7
 800069c:	40a0      	lsls	r0, r4
 800069e:	4403      	add	r3, r0
 80006a0:	fa1f f883 	uxth.w	r8, r3
	                for (uint8_t j=jmin; j<desplazamiento_horiz; j++) {
 80006a4:	3201      	adds	r2, #1
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	428a      	cmp	r2, r1
 80006aa:	d3ec      	bcc.n	8000686 <BasesProcesarDisparo+0xb6>
	                }


	                for (uint8_t j=0; j<16; j++) {
 80006ac:	2300      	movs	r3, #0
	uint8_t k = 0, conteo = 0;
 80006ae:	461a      	mov	r2, r3
 80006b0:	e023      	b.n	80006fa <BasesProcesarDisparo+0x12a>
	                                bases[i][j-1] &= ~(resultado>>8);
	                                bases[i][j] &= ~resultado;
	                                conteo++;
	                            }
	                        } else {
	                            bases_16bits = (bases[i][15-j]<<8) + (bases[i][15-j+1] & 0xff);
 80006b2:	f1c3 0c0f 	rsb	ip, r3, #15
 80006b6:	493a      	ldr	r1, [pc, #232]	; (80007a0 <BasesProcesarDisparo+0x1d0>)
 80006b8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80006bc:	f811 000c 	ldrb.w	r0, [r1, ip]
 80006c0:	f1c3 0410 	rsb	r4, r3, #16
 80006c4:	5d09      	ldrb	r1, [r1, r4]
 80006c6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	                            k++;
	                            if ((bases_16bits & resultado) != 0) {
 80006ca:	ea11 0f08 	tst.w	r1, r8
 80006ce:	d010      	beq.n	80006f2 <BasesProcesarDisparo+0x122>
	                                bases[i][15-j] &= ~(resultado>>8);
 80006d0:	ea6f 2718 	mvn.w	r7, r8, lsr #8
 80006d4:	b27f      	sxtb	r7, r7
 80006d6:	4932      	ldr	r1, [pc, #200]	; (80007a0 <BasesProcesarDisparo+0x1d0>)
 80006d8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80006dc:	4038      	ands	r0, r7
 80006de:	f801 000c 	strb.w	r0, [r1, ip]
	                                bases[i][15-j+1] &= ~resultado;
 80006e2:	ea6f 0708 	mvn.w	r7, r8
 80006e6:	b27f      	sxtb	r7, r7
 80006e8:	5d08      	ldrb	r0, [r1, r4]
 80006ea:	4038      	ands	r0, r7
 80006ec:	5508      	strb	r0, [r1, r4]
	                                conteo++;
 80006ee:	3201      	adds	r2, #1
 80006f0:	b2d2      	uxtb	r2, r2
	                            }
	                        }
	                        if (conteo == DESTRUCCION_MAXIMA_VERTICAL) break;
 80006f2:	2a02      	cmp	r2, #2
 80006f4:	d050      	beq.n	8000798 <BasesProcesarDisparo+0x1c8>
	                for (uint8_t j=0; j<16; j++) {
 80006f6:	3301      	adds	r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d84c      	bhi.n	8000798 <BasesProcesarDisparo+0x1c8>
	                    if (j % 2 != 0) {
 80006fe:	f013 0f01 	tst.w	r3, #1
 8000702:	d0f8      	beq.n	80006f6 <BasesProcesarDisparo+0x126>
	                        if (condicion == 0) {
 8000704:	2d00      	cmp	r5, #0
 8000706:	d1d4      	bne.n	80006b2 <BasesProcesarDisparo+0xe2>
	                            bases_16bits = (bases[i][j-1]<<8) + (bases[i][j] & 0xff);
 8000708:	1e5f      	subs	r7, r3, #1
 800070a:	4925      	ldr	r1, [pc, #148]	; (80007a0 <BasesProcesarDisparo+0x1d0>)
 800070c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8000710:	5dc8      	ldrb	r0, [r1, r7]
 8000712:	5cc9      	ldrb	r1, [r1, r3]
 8000714:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	                            if ((bases_16bits & resultado) != 0) {
 8000718:	ea11 0f08 	tst.w	r1, r8
 800071c:	d0e9      	beq.n	80006f2 <BasesProcesarDisparo+0x122>
	                                bases[i][j-1] &= ~(resultado>>8);
 800071e:	ea6f 2418 	mvn.w	r4, r8, lsr #8
 8000722:	b264      	sxtb	r4, r4
 8000724:	491e      	ldr	r1, [pc, #120]	; (80007a0 <BasesProcesarDisparo+0x1d0>)
 8000726:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800072a:	4020      	ands	r0, r4
 800072c:	55c8      	strb	r0, [r1, r7]
	                                bases[i][j] &= ~resultado;
 800072e:	ea6f 0408 	mvn.w	r4, r8
 8000732:	b264      	sxtb	r4, r4
 8000734:	5cc8      	ldrb	r0, [r1, r3]
 8000736:	4020      	ands	r0, r4
 8000738:	54c8      	strb	r0, [r1, r3]
	                                conteo++;
 800073a:	3201      	adds	r2, #1
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	e7d8      	b.n	80006f2 <BasesProcesarDisparo+0x122>
	    for (int i = 0; i < 3; ++i) {
 8000740:	3601      	adds	r6, #1
 8000742:	2e02      	cmp	r6, #2
 8000744:	dc28      	bgt.n	8000798 <BasesProcesarDisparo+0x1c8>
	        if (pos_x >= limites_izquierda[i] && pos_x <= limites_derecha[i]) {
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <BasesProcesarDisparo+0x1d8>)
 8000748:	5d92      	ldrb	r2, [r2, r6]
 800074a:	429a      	cmp	r2, r3
 800074c:	d8f8      	bhi.n	8000740 <BasesProcesarDisparo+0x170>
 800074e:	4917      	ldr	r1, [pc, #92]	; (80007ac <BasesProcesarDisparo+0x1dc>)
 8000750:	5d89      	ldrb	r1, [r1, r6]
 8000752:	4299      	cmp	r1, r3
 8000754:	d3f4      	bcc.n	8000740 <BasesProcesarDisparo+0x170>
	        	uint8_t desplazamiento = pos_x - limites_izquierda[i];
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	b2df      	uxtb	r7, r3
	            uint16_t resultado = (1 << (OFFSET_DESPLAZAMIENTO - desplazamiento));
 800075a:	f1c7 030f 	rsb	r3, r7, #15
 800075e:	f04f 0801 	mov.w	r8, #1
 8000762:	fa08 f803 	lsl.w	r8, r8, r3
 8000766:	fa1f f888 	uxth.w	r8, r8
	            if (condicion == 0){
 800076a:	b965      	cbnz	r5, 8000786 <BasesProcesarDisparo+0x1b6>
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO + 1 - desplazamiento));
 800076c:	f1c7 0310 	rsb	r3, r7, #16
 8000770:	2201      	movs	r2, #1
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	4443      	add	r3, r8
 8000778:	b29b      	uxth	r3, r3
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO - 1 - desplazamiento));
 800077a:	f1c7 010e 	rsb	r1, r7, #14
 800077e:	408a      	lsls	r2, r1
 8000780:	4413      	add	r3, r2
 8000782:	fa1f f883 	uxth.w	r8, r3
	            if ((resultado & resultado_or[i]) != 0) {
 8000786:	ab02      	add	r3, sp, #8
 8000788:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800078c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000790:	ea13 0f08 	tst.w	r3, r8
 8000794:	f47f af61 	bne.w	800065a <BasesProcesarDisparo+0x8a>
	            break;
	        }
	    }
	}

}
 8000798:	b002      	add	sp, #8
 800079a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800079e:	bf00      	nop
 80007a0:	200008bc 	.word	0x200008bc
 80007a4:	55555556 	.word	0x55555556
 80007a8:	08009b04 	.word	0x08009b04
 80007ac:	08009b00 	.word	0x08009b00

080007b0 <plotBases>:
void plotBases(){
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	b082      	sub	sp, #8
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE1, LIMITE_ABAJO_BASE, bases[0], 16, 8, 1);
 80007b4:	4d12      	ldr	r5, [pc, #72]	; (8000800 <plotBases+0x50>)
 80007b6:	2401      	movs	r4, #1
 80007b8:	9401      	str	r4, [sp, #4]
 80007ba:	2608      	movs	r6, #8
 80007bc:	9600      	str	r6, [sp, #0]
 80007be:	2310      	movs	r3, #16
 80007c0:	462a      	mov	r2, r5
 80007c2:	212d      	movs	r1, #45	; 0x2d
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 f813 	bl	80027f0 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE2, LIMITE_ABAJO_BASE, bases[1], 16, 8, 1);
 80007ca:	9401      	str	r4, [sp, #4]
 80007cc:	9600      	str	r6, [sp, #0]
 80007ce:	2310      	movs	r3, #16
 80007d0:	18ea      	adds	r2, r5, r3
 80007d2:	212d      	movs	r1, #45	; 0x2d
 80007d4:	2038      	movs	r0, #56	; 0x38
 80007d6:	f002 f80b 	bl	80027f0 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE3, LIMITE_ABAJO_BASE, bases[2], 16, 8, 1);
 80007da:	9401      	str	r4, [sp, #4]
 80007dc:	9600      	str	r6, [sp, #0]
 80007de:	2310      	movs	r3, #16
 80007e0:	f105 0220 	add.w	r2, r5, #32
 80007e4:	212d      	movs	r1, #45	; 0x2d
 80007e6:	2060      	movs	r0, #96	; 0x60
 80007e8:	f002 f802 	bl	80027f0 <SSD1306_DrawBitmap>
	BasesProcesarDisparo(&Disparo_Aliens, 0);
 80007ec:	2100      	movs	r1, #0
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <plotBases+0x54>)
 80007f0:	f7ff feee 	bl	80005d0 <BasesProcesarDisparo>
	BasesProcesarDisparo(&Disparo, 1);
 80007f4:	4621      	mov	r1, r4
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <plotBases+0x58>)
 80007f8:	f7ff feea 	bl	80005d0 <BasesProcesarDisparo>
}
 80007fc:	b002      	add	sp, #8
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	200008bc 	.word	0x200008bc
 8000804:	200008b0 	.word	0x200008b0
 8000808:	200008ac 	.word	0x200008ac

0800080c <BasesInit>:



void BasesInit(){

	for(uint8_t i=0;i<3;i++){
 800080c:	2000      	movs	r0, #0
 800080e:	e00b      	b.n	8000828 <BasesInit+0x1c>
		for(uint8_t j=0; j<16; j++){

			bases[i][j] = BaseGfx[j];
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <BasesInit+0x28>)
 8000812:	5cd1      	ldrb	r1, [r2, r3]
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <BasesInit+0x2c>)
 8000816:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800081a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j=0; j<16; j++){
 800081c:	3301      	adds	r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d9f5      	bls.n	8000810 <BasesInit+0x4>
	for(uint8_t i=0;i<3;i++){
 8000824:	3001      	adds	r0, #1
 8000826:	b2c0      	uxtb	r0, r0
 8000828:	2802      	cmp	r0, #2
 800082a:	d801      	bhi.n	8000830 <BasesInit+0x24>
		for(uint8_t j=0; j<16; j++){
 800082c:	2300      	movs	r3, #0
 800082e:	e7f7      	b.n	8000820 <BasesInit+0x14>
		}
	}

}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	08009a90 	.word	0x08009a90
 8000838:	200008bc 	.word	0x200008bc

0800083c <Dificultad_Init>:


void Dificultad_Init(){

	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 8;
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <Dificultad_Init+0x14>)
 800083e:	2208      	movs	r2, #8
 8000840:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 4;
 8000842:	2204      	movs	r2, #4
 8000844:	705a      	strb	r2, [r3, #1]
	dificultad.velocidad_disparo_aliens = 3;
 8000846:	2203      	movs	r2, #3
 8000848:	709a      	strb	r2, [r3, #2]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 800084a:	2202      	movs	r2, #2
 800084c:	711a      	strb	r2, [r3, #4]
}
 800084e:	4770      	bx	lr
 8000850:	200008ec 	.word	0x200008ec

08000854 <AumentoNivel>:

void AumentoNivel(){

	//Incremento de la dificultad (Aumento de la velocidad de los aliens y la velocidad de disparo)
	//Se aumenta la dificultad.
	dificultad.velocidad_bajada += 1;
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <AumentoNivel+0x3c>)
 8000856:	7853      	ldrb	r3, [r2, #1]
 8000858:	3301      	adds	r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	7053      	strb	r3, [r2, #1]
	if(dificultad.velocidad_bajada > 10){
 800085e:	2b0a      	cmp	r3, #10
 8000860:	d902      	bls.n	8000868 <AumentoNivel+0x14>
		dificultad.velocidad_bajada = 10;
 8000862:	4613      	mov	r3, r2
 8000864:	220a      	movs	r2, #10
 8000866:	705a      	strb	r2, [r3, #1]
	}


	dificultad.velocidad_disparo_aliens = 3;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <AumentoNivel+0x3c>)
 800086a:	2203      	movs	r2, #3
 800086c:	709a      	strb	r2, [r3, #2]


	//Se Reinicializa el Player.
	Player.posicion_X = 64;
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <AumentoNivel+0x40>)
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	8013      	strh	r3, [r2, #0]
	Player.vivo = true;
 8000874:	2301      	movs	r3, #1
 8000876:	7093      	strb	r3, [r2, #2]
	Player.nivel += 1;
 8000878:	7993      	ldrb	r3, [r2, #6]
 800087a:	3301      	adds	r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	7193      	strb	r3, [r2, #6]
	if(Player.nivel > 254){
 8000880:	2bff      	cmp	r3, #255	; 0xff
 8000882:	d000      	beq.n	8000886 <AumentoNivel+0x32>
		Player.nivel = 254;
	}

}
 8000884:	4770      	bx	lr
		Player.nivel = 254;
 8000886:	4613      	mov	r3, r2
 8000888:	22fe      	movs	r2, #254	; 0xfe
 800088a:	719a      	strb	r2, [r3, #6]
}
 800088c:	e7fa      	b.n	8000884 <AumentoNivel+0x30>
 800088e:	bf00      	nop
 8000890:	200008ec 	.word	0x200008ec
 8000894:	200008b4 	.word	0x200008b4

08000898 <AumentoVelocidadAliens>:

void AumentoVelocidadAliens(){


	//Cuando queden menos de 3 aliens (por ejemplo) que los aliens comiencen a moverse mas rapido.
	switch(movimiento_Aliens.cantidad_aliens_vivos){
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <AumentoVelocidadAliens+0x30>)
 800089a:	799b      	ldrb	r3, [r3, #6]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d00a      	beq.n	80008b6 <AumentoVelocidadAliens+0x1e>
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d002      	beq.n	80008aa <AumentoVelocidadAliens+0x12>
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d00a      	beq.n	80008be <AumentoVelocidadAliens+0x26>
		break;
	default:
		break;
	}

}
 80008a8:	4770      	bx	lr
		dificultad.velocidad_horizontal = 2;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <AumentoVelocidadAliens+0x34>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	701a      	strb	r2, [r3, #0]
		dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_4;
 80008b0:	2204      	movs	r2, #4
 80008b2:	711a      	strb	r2, [r3, #4]
		break;
 80008b4:	4770      	bx	lr
		dificultad.velocidad_horizontal = 1;
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <AumentoVelocidadAliens+0x34>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
		break;
 80008bc:	4770      	bx	lr
		dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_6;
 80008be:	4b03      	ldr	r3, [pc, #12]	; (80008cc <AumentoVelocidadAliens+0x34>)
 80008c0:	2206      	movs	r2, #6
 80008c2:	711a      	strb	r2, [r3, #4]
}
 80008c4:	e7f0      	b.n	80008a8 <AumentoVelocidadAliens+0x10>
 80008c6:	bf00      	nop
 80008c8:	200008f4 	.word	0x200008f4
 80008cc:	200008ec 	.word	0x200008ec

080008d0 <plotAliens>:
void plotAliens(){
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	b083      	sub	sp, #12
	AumentoVelocidadAliens();
 80008d4:	f7ff ffe0 	bl	8000898 <AumentoVelocidadAliens>
	if(movimiento_Aliens.conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80008d8:	4b82      	ldr	r3, [pc, #520]	; (8000ae4 <plotAliens+0x214>)
 80008da:	785c      	ldrb	r4, [r3, #1]
 80008dc:	4b82      	ldr	r3, [pc, #520]	; (8000ae8 <plotAliens+0x218>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	fbb4 f0f3 	udiv	r0, r4, r3
 80008e4:	fb03 4010 	mls	r0, r3, r0, r4
 80008e8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80008ec:	d124      	bne.n	8000938 <plotAliens+0x68>
		movimiento_Aliens.animacion = !movimiento_Aliens.animacion;
 80008ee:	4a7d      	ldr	r2, [pc, #500]	; (8000ae4 <plotAliens+0x214>)
 80008f0:	78d3      	ldrb	r3, [r2, #3]
 80008f2:	fab3 f383 	clz	r3, r3
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	70d3      	strb	r3, [r2, #3]
			switch(movimiento_Aliens.orientacion){
 80008fa:	f892 c000 	ldrb.w	ip, [r2]
 80008fe:	f1bc 0f00 	cmp.w	ip, #0
 8000902:	d037      	beq.n	8000974 <plotAliens+0xa4>
 8000904:	f1bc 0f01 	cmp.w	ip, #1
 8000908:	d04d      	beq.n	80009a6 <plotAliens+0xd6>
			if( (Alien[0][movimiento_Aliens.alien_columna_derecha].posicion_X + TAMANO_ALIEN_BOTTOM_ANCHURA) >= LIMITE_PANTALLA_DER){
 800090a:	4b76      	ldr	r3, [pc, #472]	; (8000ae4 <plotAliens+0x214>)
 800090c:	795b      	ldrb	r3, [r3, #5]
 800090e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000912:	4a76      	ldr	r2, [pc, #472]	; (8000aec <plotAliens+0x21c>)
 8000914:	56d3      	ldrsb	r3, [r2, r3]
 8000916:	2b72      	cmp	r3, #114	; 0x72
 8000918:	dd02      	ble.n	8000920 <plotAliens+0x50>
				movimiento_Aliens.orientacion = mov_izquierda;
 800091a:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <plotAliens+0x214>)
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
			if( (Alien[0][movimiento_Aliens.alien_columna_izquierda].posicion_X) <= LIMITE_PANTALLA_IZQ){
 8000920:	4b70      	ldr	r3, [pc, #448]	; (8000ae4 <plotAliens+0x214>)
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000928:	4a70      	ldr	r2, [pc, #448]	; (8000aec <plotAliens+0x21c>)
 800092a:	56d3      	ldrsb	r3, [r2, r3]
 800092c:	2b01      	cmp	r3, #1
 800092e:	dd3c      	ble.n	80009aa <plotAliens+0xda>
			if(movimiento_Aliens.conteo_bajada == 10){
 8000930:	4b6c      	ldr	r3, [pc, #432]	; (8000ae4 <plotAliens+0x214>)
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	2b0a      	cmp	r3, #10
 8000936:	d05a      	beq.n	80009ee <plotAliens+0x11e>
	movimiento_Aliens.conteo_horizontal++;
 8000938:	3401      	adds	r4, #1
 800093a:	4b6a      	ldr	r3, [pc, #424]	; (8000ae4 <plotAliens+0x214>)
 800093c:	705c      	strb	r4, [r3, #1]
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800093e:	2500      	movs	r5, #0
	uint8_t conteo_columna_izquierda = 0;
 8000940:	462e      	mov	r6, r5
	uint8_t conteo_columna_derecha = 0;
 8000942:	462f      	mov	r7, r5
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000944:	e09a      	b.n	8000a7c <plotAliens+0x1ac>
								Alien[y][x].posicion_X  = Alien[y][x].posicion_X + dificultad.aumento_posicion_pixeles;
 8000946:	4d69      	ldr	r5, [pc, #420]	; (8000aec <plotAliens+0x21c>)
 8000948:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800094c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000950:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000954:	440a      	add	r2, r1
 8000956:	5ca9      	ldrb	r1, [r5, r2]
 8000958:	4f63      	ldr	r7, [pc, #396]	; (8000ae8 <plotAliens+0x218>)
 800095a:	793f      	ldrb	r7, [r7, #4]
 800095c:	4439      	add	r1, r7
 800095e:	54a9      	strb	r1, [r5, r2]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000960:	3301      	adds	r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b06      	cmp	r3, #6
 8000966:	d9ee      	bls.n	8000946 <plotAliens+0x76>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000968:	3601      	adds	r6, #1
 800096a:	b2f6      	uxtb	r6, r6
 800096c:	2e02      	cmp	r6, #2
 800096e:	d8cc      	bhi.n	800090a <plotAliens+0x3a>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000970:	4663      	mov	r3, ip
 8000972:	e7f7      	b.n	8000964 <plotAliens+0x94>
			switch(movimiento_Aliens.orientacion){
 8000974:	4666      	mov	r6, ip
 8000976:	e7f9      	b.n	800096c <plotAliens+0x9c>
								Alien[y][x].posicion_X  -= dificultad.aumento_posicion_pixeles;
 8000978:	4a5b      	ldr	r2, [pc, #364]	; (8000ae8 <plotAliens+0x218>)
 800097a:	7917      	ldrb	r7, [r2, #4]
 800097c:	4d5b      	ldr	r5, [pc, #364]	; (8000aec <plotAliens+0x21c>)
 800097e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000982:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000986:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800098a:	440a      	add	r2, r1
 800098c:	5ca9      	ldrb	r1, [r5, r2]
 800098e:	1bc9      	subs	r1, r1, r7
 8000990:	54a9      	strb	r1, [r5, r2]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000992:	3301      	adds	r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b06      	cmp	r3, #6
 8000998:	d9ee      	bls.n	8000978 <plotAliens+0xa8>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800099a:	3601      	adds	r6, #1
 800099c:	b2f6      	uxtb	r6, r6
 800099e:	2e02      	cmp	r6, #2
 80009a0:	d8b3      	bhi.n	800090a <plotAliens+0x3a>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80009a2:	4603      	mov	r3, r0
 80009a4:	e7f7      	b.n	8000996 <plotAliens+0xc6>
			switch(movimiento_Aliens.orientacion){
 80009a6:	4606      	mov	r6, r0
 80009a8:	e7f9      	b.n	800099e <plotAliens+0xce>
				movimiento_Aliens.orientacion = mov_derecha;
 80009aa:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <plotAliens+0x214>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
				movimiento_Aliens.conteo_bajada++;
 80009b0:	789a      	ldrb	r2, [r3, #2]
 80009b2:	3201      	adds	r2, #1
 80009b4:	709a      	strb	r2, [r3, #2]
 80009b6:	e7bb      	b.n	8000930 <plotAliens+0x60>
						Alien[y][x].posicion_Y  = Alien[y][x].posicion_Y + dificultad.velocidad_bajada;
 80009b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80009bc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80009c0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80009c4:	4411      	add	r1, r2
 80009c6:	4a49      	ldr	r2, [pc, #292]	; (8000aec <plotAliens+0x21c>)
 80009c8:	440a      	add	r2, r1
 80009ca:	7851      	ldrb	r1, [r2, #1]
 80009cc:	4e46      	ldr	r6, [pc, #280]	; (8000ae8 <plotAliens+0x218>)
 80009ce:	7876      	ldrb	r6, [r6, #1]
 80009d0:	4431      	add	r1, r6
 80009d2:	7051      	strb	r1, [r2, #1]
						movimiento_Aliens.conteo_bajada = 0;
 80009d4:	4a43      	ldr	r2, [pc, #268]	; (8000ae4 <plotAliens+0x214>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	7091      	strb	r1, [r2, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80009da:	3301      	adds	r3, #1
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d9ea      	bls.n	80009b8 <plotAliens+0xe8>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80009e2:	3501      	adds	r5, #1
 80009e4:	b2ed      	uxtb	r5, r5
 80009e6:	2d02      	cmp	r5, #2
 80009e8:	d8a6      	bhi.n	8000938 <plotAliens+0x68>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80009ea:	4603      	mov	r3, r0
 80009ec:	e7f7      	b.n	80009de <plotAliens+0x10e>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80009ee:	4605      	mov	r5, r0
 80009f0:	e7f9      	b.n	80009e6 <plotAliens+0x116>
			            gfx = (y == 0) ? InvaderTopGfx : (y == 1) ? InvaderMiddleGfx : InvaderBottomGfx;
 80009f2:	b13d      	cbz	r5, 8000a04 <plotAliens+0x134>
 80009f4:	2d01      	cmp	r5, #1
 80009f6:	d001      	beq.n	80009fc <plotAliens+0x12c>
 80009f8:	4a3d      	ldr	r2, [pc, #244]	; (8000af0 <plotAliens+0x220>)
 80009fa:	e006      	b.n	8000a0a <plotAliens+0x13a>
 80009fc:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <plotAliens+0x224>)
 80009fe:	e004      	b.n	8000a0a <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 8000a00:	4a3d      	ldr	r2, [pc, #244]	; (8000af8 <plotAliens+0x228>)
 8000a02:	e002      	b.n	8000a0a <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx : (y == 1) ? InvaderMiddleGfx : InvaderBottomGfx;
 8000a04:	4a3d      	ldr	r2, [pc, #244]	; (8000afc <plotAliens+0x22c>)
 8000a06:	e000      	b.n	8000a0a <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 8000a08:	4a3d      	ldr	r2, [pc, #244]	; (8000b00 <plotAliens+0x230>)
			        SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y, gfx, (y == 0) ? 8 : 16, 8, 1);
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <plotAliens+0x21c>)
 8000a0c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000a10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000a14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000a18:	4401      	add	r1, r0
 8000a1a:	eb03 0c01 	add.w	ip, r3, r1
 8000a1e:	5658      	ldrsb	r0, [r3, r1]
 8000a20:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8000a24:	b335      	cbz	r5, 8000a74 <plotAliens+0x1a4>
 8000a26:	2310      	movs	r3, #16
 8000a28:	f04f 0c01 	mov.w	ip, #1
 8000a2c:	f8cd c004 	str.w	ip, [sp, #4]
 8000a30:	f04f 0c08 	mov.w	ip, #8
 8000a34:	f8cd c000 	str.w	ip, [sp]
 8000a38:	f001 feda 	bl	80027f0 <SSD1306_DrawBitmap>
			for(uint8_t x = 0; x < NUM_ALIEN_COLUMNA; x++) {
 8000a3c:	3401      	adds	r4, #1
 8000a3e:	b2e4      	uxtb	r4, r4
 8000a40:	2c06      	cmp	r4, #6
 8000a42:	d819      	bhi.n	8000a78 <plotAliens+0x1a8>
			    if(Alien[y][x].vivo == true) {
 8000a44:	4628      	mov	r0, r5
 8000a46:	4621      	mov	r1, r4
 8000a48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a4c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000a50:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000a54:	4413      	add	r3, r2
 8000a56:	4a25      	ldr	r2, [pc, #148]	; (8000aec <plotAliens+0x21c>)
 8000a58:	4413      	add	r3, r2
 8000a5a:	789b      	ldrb	r3, [r3, #2]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d1ed      	bne.n	8000a3c <plotAliens+0x16c>
			        if(movimiento_Aliens.animacion == true) {
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <plotAliens+0x214>)
 8000a62:	78db      	ldrb	r3, [r3, #3]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d0c4      	beq.n	80009f2 <plotAliens+0x122>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d0cd      	beq.n	8000a08 <plotAliens+0x138>
 8000a6c:	2d01      	cmp	r5, #1
 8000a6e:	d0c7      	beq.n	8000a00 <plotAliens+0x130>
 8000a70:	4a24      	ldr	r2, [pc, #144]	; (8000b04 <plotAliens+0x234>)
 8000a72:	e7ca      	b.n	8000a0a <plotAliens+0x13a>
			        SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y, gfx, (y == 0) ? 8 : 16, 8, 1);
 8000a74:	2308      	movs	r3, #8
 8000a76:	e7d7      	b.n	8000a28 <plotAliens+0x158>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000a78:	3501      	adds	r5, #1
 8000a7a:	b2ed      	uxtb	r5, r5
 8000a7c:	2d02      	cmp	r5, #2
 8000a7e:	d821      	bhi.n	8000ac4 <plotAliens+0x1f4>
			if(movimiento_Aliens.alien_columna_derecha != movimiento_Aliens.alien_columna_izquierda){
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <plotAliens+0x214>)
 8000a82:	795a      	ldrb	r2, [r3, #5]
 8000a84:	791b      	ldrb	r3, [r3, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d01a      	beq.n	8000ac0 <plotAliens+0x1f0>
				if(Alien[y][movimiento_Aliens.alien_columna_derecha].vivo == false){
 8000a8a:	4629      	mov	r1, r5
 8000a8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000a90:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8000a94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000a98:	4402      	add	r2, r0
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <plotAliens+0x21c>)
 8000a9c:	4402      	add	r2, r0
 8000a9e:	7892      	ldrb	r2, [r2, #2]
 8000aa0:	b90a      	cbnz	r2, 8000aa6 <plotAliens+0x1d6>
					conteo_columna_derecha++;
 8000aa2:	3701      	adds	r7, #1
 8000aa4:	b2ff      	uxtb	r7, r7
				if(Alien[y][movimiento_Aliens.alien_columna_izquierda].vivo == false){
 8000aa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aaa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000aae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <plotAliens+0x21c>)
 8000ab6:	4413      	add	r3, r2
 8000ab8:	789b      	ldrb	r3, [r3, #2]
 8000aba:	b90b      	cbnz	r3, 8000ac0 <plotAliens+0x1f0>
					conteo_columna_izquierda++;
 8000abc:	3601      	adds	r6, #1
 8000abe:	b2f6      	uxtb	r6, r6
			for(uint8_t x = 0; x < NUM_ALIEN_COLUMNA; x++) {
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	e7bd      	b.n	8000a40 <plotAliens+0x170>
		if(conteo_columna_derecha == NUM_ALIEN_FILA){
 8000ac4:	2f03      	cmp	r7, #3
 8000ac6:	d003      	beq.n	8000ad0 <plotAliens+0x200>
		if(conteo_columna_izquierda == NUM_ALIEN_FILA){
 8000ac8:	2e03      	cmp	r6, #3
 8000aca:	d006      	beq.n	8000ada <plotAliens+0x20a>
}
 8000acc:	b003      	add	sp, #12
 8000ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
			movimiento_Aliens.alien_columna_derecha--;
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <plotAliens+0x214>)
 8000ad2:	7953      	ldrb	r3, [r2, #5]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	7153      	strb	r3, [r2, #5]
 8000ad8:	e7f6      	b.n	8000ac8 <plotAliens+0x1f8>
			movimiento_Aliens.alien_columna_izquierda++;
 8000ada:	4a02      	ldr	r2, [pc, #8]	; (8000ae4 <plotAliens+0x214>)
 8000adc:	7913      	ldrb	r3, [r2, #4]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	7113      	strb	r3, [r2, #4]
}
 8000ae2:	e7f3      	b.n	8000acc <plotAliens+0x1fc>
 8000ae4:	200008f4 	.word	0x200008f4
 8000ae8:	200008ec 	.word	0x200008ec
 8000aec:	20000840 	.word	0x20000840
 8000af0:	08009aa0 	.word	0x08009aa0
 8000af4:	08009ac0 	.word	0x08009ac0
 8000af8:	08009ad0 	.word	0x08009ad0
 8000afc:	08009ae0 	.word	0x08009ae0
 8000b00:	08009ae8 	.word	0x08009ae8
 8000b04:	08009ab0 	.word	0x08009ab0

08000b08 <disparoTrue>:


void disparoTrue(){

	Disparo.disparo = true;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <disparoTrue+0x10>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	709a      	strb	r2, [r3, #2]
	Disparo.posicion_x = Player.posicion_X;
 8000b0e:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <disparoTrue+0x14>)
 8000b10:	8812      	ldrh	r2, [r2, #0]
 8000b12:	701a      	strb	r2, [r3, #0]

}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200008ac 	.word	0x200008ac
 8000b1c:	200008b4 	.word	0x200008b4

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b24:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	2400      	movs	r4, #0
 8000b28:	9404      	str	r4, [sp, #16]
 8000b2a:	9405      	str	r4, [sp, #20]
 8000b2c:	9406      	str	r4, [sp, #24]
 8000b2e:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b30:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <MX_GPIO_Init+0xe0>)
 8000b32:	699a      	ldr	r2, [r3, #24]
 8000b34:	f042 0210 	orr.w	r2, r2, #16
 8000b38:	619a      	str	r2, [r3, #24]
 8000b3a:	699a      	ldr	r2, [r3, #24]
 8000b3c:	f002 0210 	and.w	r2, r2, #16
 8000b40:	9200      	str	r2, [sp, #0]
 8000b42:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b44:	699a      	ldr	r2, [r3, #24]
 8000b46:	f042 0220 	orr.w	r2, r2, #32
 8000b4a:	619a      	str	r2, [r3, #24]
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	f002 0220 	and.w	r2, r2, #32
 8000b52:	9201      	str	r2, [sp, #4]
 8000b54:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	699a      	ldr	r2, [r3, #24]
 8000b58:	f042 0204 	orr.w	r2, r2, #4
 8000b5c:	619a      	str	r2, [r3, #24]
 8000b5e:	699a      	ldr	r2, [r3, #24]
 8000b60:	f002 0204 	and.w	r2, r2, #4
 8000b64:	9202      	str	r2, [sp, #8]
 8000b66:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	699a      	ldr	r2, [r3, #24]
 8000b6a:	f042 0208 	orr.w	r2, r2, #8
 8000b6e:	619a      	str	r2, [r3, #24]
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	9303      	str	r3, [sp, #12]
 8000b78:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b7a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000c04 <MX_GPIO_Init+0xe4>
 8000b7e:	4622      	mov	r2, r4
 8000b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b84:	4648      	mov	r0, r9
 8000b86:	f003 f8c8 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b8a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000c08 <MX_GPIO_Init+0xe8>
 8000b8e:	4622      	mov	r2, r4
 8000b90:	f24e 0120 	movw	r1, #57376	; 0xe020
 8000b94:	4640      	mov	r0, r8
 8000b96:	f003 f8c0 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b9a:	4e1c      	ldr	r6, [pc, #112]	; (8000c0c <MX_GPIO_Init+0xec>)
 8000b9c:	4622      	mov	r2, r4
 8000b9e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	f003 f8b9 	bl	8003d1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2501      	movs	r5, #1
 8000bb0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2702      	movs	r7, #2
 8000bb6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	a904      	add	r1, sp, #16
 8000bba:	4648      	mov	r0, r9
 8000bbc:	f002 ff94 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc6:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	a904      	add	r1, sp, #16
 8000bca:	4630      	mov	r0, r6
 8000bcc:	f002 ff8c 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8000bd0:	f24e 0320 	movw	r3, #57376	; 0xe020
 8000bd4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	a904      	add	r1, sp, #16
 8000bde:	4640      	mov	r0, r8
 8000be0:	f002 ff82 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000be4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000be8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	a904      	add	r1, sp, #16
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	f002 ff78 	bl	8003ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	b009      	add	sp, #36	; 0x24
 8000bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40010800 	.word	0x40010800

08000c10 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	b082      	sub	sp, #8
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
 8000c14:	2101      	movs	r1, #1
 8000c16:	2000      	movs	r0, #0
 8000c18:	f006 fc60 	bl	80074dc <vTaskSetApplicationTaskTag>

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000c1c:	f006 fafe 	bl	800721c <xTaskGetTickCount>
 8000c20:	9000      	str	r0, [sp, #0]
 8000c22:	e02b      	b.n	8000c7c <entryJoystick+0x6c>
	  HAL_ADC_Stop(&hadc2);

	  if(val_x > UMBRAL_DERECHA){
		  joystick.x_value = derecha;
	  }
	  else if(val_x < UMBRAL_IZQUIERDA){
 8000c24:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8000c28:	d203      	bcs.n	8000c32 <entryJoystick+0x22>
		  joystick.x_value = izquierda;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c30:	e049      	b.n	8000cc6 <entryJoystick+0xb6>
	  }
	  else{
		  joystick.x_value = nulo;
 8000c32:	2304      	movs	r3, #4
 8000c34:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c38:	e045      	b.n	8000cc6 <entryJoystick+0xb6>


	  if(val_y > UMBRAL_ABAJO){
		  joystick.y_value = abajo;
	  }
	  else if(val_y < UMBRAL_ARRIBA){
 8000c3a:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8000c3e:	d24a      	bcs.n	8000cd6 <entryJoystick+0xc6>
		  joystick.y_value = arriba;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f88d 3005 	strb.w	r3, [sp, #5]
		  joystick.y_value = nulo;
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000c46:	2104      	movs	r1, #4
 8000c48:	4827      	ldr	r0, [pc, #156]	; (8000ce8 <entryJoystick+0xd8>)
 8000c4a:	f003 f85f 	bl	8003d0c <HAL_GPIO_ReadPin>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d145      	bne.n	8000cde <entryJoystick+0xce>
		  joystick.boton = true;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f88d 3006 	strb.w	r3, [sp, #6]
	  else{
		  joystick.boton = false;
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	a901      	add	r1, sp, #4
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <entryJoystick+0xdc>)
 8000c60:	6800      	ldr	r0, [r0, #0]
 8000c62:	f005 faad 	bl	80061c0 <osMessageQueuePut>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c66:	b128      	cbz	r0, 8000c74 <entryJoystick+0x64>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6e:	4820      	ldr	r0, [pc, #128]	; (8000cf0 <entryJoystick+0xe0>)
 8000c70:	f003 f853 	bl	8003d1a <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000c74:	2132      	movs	r1, #50	; 0x32
 8000c76:	4668      	mov	r0, sp
 8000c78:	f006 fbde 	bl	8007438 <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc1);
 8000c7c:	4c1d      	ldr	r4, [pc, #116]	; (8000cf4 <entryJoystick+0xe4>)
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f002 fd9c 	bl	80037bc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c84:	210a      	movs	r1, #10
 8000c86:	4620      	mov	r0, r4
 8000c88:	f002 fbee 	bl	8003468 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f002 fcad 	bl	80035ec <HAL_ADC_GetValue>
 8000c92:	b286      	uxth	r6, r0
	  HAL_ADC_Stop(&hadc1);
 8000c94:	4620      	mov	r0, r4
 8000c96:	f002 feb5 	bl	8003a04 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 8000c9a:	4c17      	ldr	r4, [pc, #92]	; (8000cf8 <entryJoystick+0xe8>)
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f002 fd8d 	bl	80037bc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000ca2:	210a      	movs	r1, #10
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f002 fbdf 	bl	8003468 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000caa:	4620      	mov	r0, r4
 8000cac:	f002 fc9e 	bl	80035ec <HAL_ADC_GetValue>
 8000cb0:	b285      	uxth	r5, r0
	  HAL_ADC_Stop(&hadc2);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f002 fea6 	bl	8003a04 <HAL_ADC_Stop>
	  if(val_x > UMBRAL_DERECHA){
 8000cb8:	f640 0398 	movw	r3, #2200	; 0x898
 8000cbc:	429e      	cmp	r6, r3
 8000cbe:	d9b1      	bls.n	8000c24 <entryJoystick+0x14>
		  joystick.x_value = derecha;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	f88d 3004 	strb.w	r3, [sp, #4]
	  if(val_y > UMBRAL_ABAJO){
 8000cc6:	f640 0398 	movw	r3, #2200	; 0x898
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	d9b5      	bls.n	8000c3a <entryJoystick+0x2a>
		  joystick.y_value = abajo;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cd4:	e7b7      	b.n	8000c46 <entryJoystick+0x36>
		  joystick.y_value = nulo;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cdc:	e7b3      	b.n	8000c46 <entryJoystick+0x36>
		  joystick.boton = false;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f88d 3006 	strb.w	r3, [sp, #6]
 8000ce4:	e7b8      	b.n	8000c58 <entryJoystick+0x48>
 8000ce6:	bf00      	nop
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	20000ab8 	.word	0x20000ab8
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	20000910 	.word	0x20000910
 8000cf8:	20000940 	.word	0x20000940

08000cfc <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000cfc:	b500      	push	{lr}
 8000cfe:	b083      	sub	sp, #12
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */


	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
 8000d00:	2102      	movs	r1, #2
 8000d02:	2000      	movs	r0, #0
 8000d04:	f006 fbea 	bl	80074dc <vTaskSetApplicationTaskTag>

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000d08:	f001 f90e 	bl	8001f28 <menuInit>
 8000d0c:	e005      	b.n	8000d1a <entryPantalla+0x1e>

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d14:	480e      	ldr	r0, [pc, #56]	; (8000d50 <entryPantalla+0x54>)
 8000d16:	f003 f800 	bl	8003d1a <HAL_GPIO_WritePin>
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	2200      	movs	r2, #0
 8000d20:	a901      	add	r1, sp, #4
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <entryPantalla+0x58>)
 8000d24:	6800      	ldr	r0, [r0, #0]
 8000d26:	f005 fa9b 	bl	8006260 <osMessageQueueGet>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d1ef      	bne.n	8000d0e <entryPantalla+0x12>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <entryPantalla+0x54>)
 8000d36:	f002 fff0 	bl	8003d1a <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000d3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000d3e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000d42:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000d46:	f001 f937 	bl	8001fb8 <menuActualizar>
		actualizarPantalla();
 8000d4a:	f7ff fa1d 	bl	8000188 <actualizarPantalla>
 8000d4e:	e7e4      	b.n	8000d1a <entryPantalla+0x1e>
 8000d50:	40011000 	.word	0x40011000
 8000d54:	20000ab8 	.word	0x20000ab8

08000d58 <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000d58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN entryMemoria */

	vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f006 fbbd 	bl	80074dc <vTaskSetApplicationTaskTag>
	//Se leen los datos desde la memoria.

	//Write_PuntajesEjemplos();

	memoriaInit();
 8000d62:	f000 fc1b 	bl	800159c <memoriaInit>

  /* Infinite loop */
  for(;;)
  {
	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <entryMemoria+0x38>)
 8000d70:	6800      	ldr	r0, [r0, #0]
 8000d72:	f005 f979 	bl	8006068 <osEventFlagsWait>

	      // Realiza acciones basadas en la notificación recibida
	      if (flags == NOTIFICATION_VALUE)
 8000d76:	2801      	cmp	r0, #1
 8000d78:	d1f5      	bne.n	8000d66 <entryMemoria+0xe>
	      {

	    	  uint8_t permutaciones = Ordenamiento_Puntajes();
 8000d7a:	f001 f843 	bl	8001e04 <Ordenamiento_Puntajes>

	    	  writeNuevosPuntajes(permutaciones);
 8000d7e:	f000 fdbf 	bl	8001900 <writeNuevosPuntajes>

				//Se reinician los valores de todos los menues
				//(se reinician las posiciones del player, flags en el juego - las posiciones de los cursores, etc.
				menuReset();
 8000d82:	f001 f8f1 	bl	8001f68 <menuReset>
				*getMenuActual() = puntajes;
 8000d86:	f001 f8cb 	bl	8001f20 <getMenuActual>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	7003      	strb	r3, [r0, #0]
 8000d8e:	e7ea      	b.n	8000d66 <entryMemoria+0xe>
 8000d90:	20000ab0 	.word	0x20000ab0

08000d94 <entrySonido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySonido */
void entrySonido(void *argument)
{
 8000d94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN entrySonido */

	vTaskSetApplicationTaskTag( NULL, ( void * ) 4 );
 8000d96:	2104      	movs	r1, #4
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f006 fb9f 	bl	80074dc <vTaskSetApplicationTaskTag>
 8000d9e:	e005      	b.n	8000dac <entrySonido+0x18>
  /* Infinite loop */
  for(;;)
  {
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick

	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da6:	481d      	ldr	r0, [pc, #116]	; (8000e1c <entrySonido+0x88>)
 8000da8:	f002 ffb7 	bl	8003d1a <HAL_GPIO_WritePin>
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	2200      	movs	r2, #0
 8000db2:	491b      	ldr	r1, [pc, #108]	; (8000e20 <entrySonido+0x8c>)
 8000db4:	481b      	ldr	r0, [pc, #108]	; (8000e24 <entrySonido+0x90>)
 8000db6:	6800      	ldr	r0, [r0, #0]
 8000db8:	f005 fa52 	bl	8006260 <osMessageQueueGet>
	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d1ef      	bne.n	8000da0 <entrySonido+0xc>

	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc6:	4815      	ldr	r0, [pc, #84]	; (8000e1c <entrySonido+0x88>)
 8000dc8:	f002 ffa7 	bl	8003d1a <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4816      	ldr	r0, [pc, #88]	; (8000e28 <entrySonido+0x94>)
 8000dd0:	f004 ffa0 	bl	8005d14 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <entrySonido+0x98>)
 8000dd6:	f004 fc87 	bl	80056e8 <HAL_TIM_Base_Stop_IT>

		  switch(musica){
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <entrySonido+0x8c>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d018      	beq.n	8000e14 <entrySonido+0x80>
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d008      	beq.n	8000df8 <entrySonido+0x64>
 8000de6:	b18b      	cbz	r3, 8000e0c <entrySonido+0x78>
		  default:
			  break;

		  }

		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000de8:	2100      	movs	r1, #0
 8000dea:	480f      	ldr	r0, [pc, #60]	; (8000e28 <entrySonido+0x94>)
 8000dec:	f004 ff24 	bl	8005c38 <HAL_TIM_PWM_Start>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000df0:	480e      	ldr	r0, [pc, #56]	; (8000e2c <entrySonido+0x98>)
 8000df2:	f004 fc45 	bl	8005680 <HAL_TIM_Base_Start_IT>
 8000df6:	e7d9      	b.n	8000dac <entrySonido+0x18>
				tonos = f622;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <entrySonido+0x9c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
				conteo_musica = VECES_622HZ;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <entrySonido+0xa0>)
 8000e00:	22aa      	movs	r2, #170	; 0xaa
 8000e02:	701a      	strb	r2, [r3, #0]
				puntero_musica = tono_622hz;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <entrySonido+0xa4>)
 8000e06:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <entrySonido+0xa8>)
 8000e08:	601a      	str	r2, [r3, #0]
			  break;
 8000e0a:	e7ed      	b.n	8000de8 <entrySonido+0x54>
			  puntero_musica = audio_disparo;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <entrySonido+0xa4>)
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <entrySonido+0xac>)
 8000e10:	601a      	str	r2, [r3, #0]
			  break;
 8000e12:	e7e9      	b.n	8000de8 <entrySonido+0x54>
			  puntero_musica = audio_explosion;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <entrySonido+0xa4>)
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <entrySonido+0xb0>)
 8000e18:	601a      	str	r2, [r3, #0]
			  break;
 8000e1a:	e7e5      	b.n	8000de8 <entrySonido+0x54>
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	20000aac 	.word	0x20000aac
 8000e24:	20000abc 	.word	0x20000abc
 8000e28:	20000a1c 	.word	0x20000a1c
 8000e2c:	20000a64 	.word	0x20000a64
 8000e30:	20000ac0 	.word	0x20000ac0
 8000e34:	2000090c 	.word	0x2000090c
 8000e38:	20000ab4 	.word	0x20000ab4
 8000e3c:	20000450 	.word	0x20000450
 8000e40:	20000024 	.word	0x20000024
 8000e44:	200002a0 	.word	0x200002a0

08000e48 <callback_in>:
void callback_in(int tag){
 8000e48:	b508      	push	{r3, lr}
	switch(tag){
 8000e4a:	2804      	cmp	r0, #4
 8000e4c:	d80a      	bhi.n	8000e64 <callback_in+0x1c>
 8000e4e:	e8df f000 	tbb	[pc, r0]
 8000e52:	0a03      	.short	0x0a03
 8000e54:	1811      	.short	0x1811
 8000e56:	1f          	.byte	0x1f
 8000e57:	00          	.byte	0x00
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <callback_in+0x58>)
 8000e60:	f002 ff5b 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8000e64:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <callback_in+0x58>)
 8000e6e:	f002 ff54 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000e72:	e7f7      	b.n	8000e64 <callback_in+0x1c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7a:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <callback_in+0x58>)
 8000e7c:	f002 ff4d 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000e80:	e7f0      	b.n	8000e64 <callback_in+0x1c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <callback_in+0x5c>)
 8000e8a:	f002 ff46 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000e8e:	e7e9      	b.n	8000e64 <callback_in+0x1c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <callback_in+0x5c>)
 8000e98:	f002 ff3f 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8000e9c:	e7e2      	b.n	8000e64 <callback_in+0x1c>
 8000e9e:	bf00      	nop
 8000ea0:	40010800 	.word	0x40010800
 8000ea4:	40010c00 	.word	0x40010c00

08000ea8 <callback_out>:
void callback_out(int tag){
 8000ea8:	b508      	push	{r3, lr}
	switch(tag){
 8000eaa:	2804      	cmp	r0, #4
 8000eac:	d80a      	bhi.n	8000ec4 <callback_out+0x1c>
 8000eae:	e8df f000 	tbb	[pc, r0]
 8000eb2:	0a03      	.short	0x0a03
 8000eb4:	1811      	.short	0x1811
 8000eb6:	1f          	.byte	0x1f
 8000eb7:	00          	.byte	0x00
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebe:	4810      	ldr	r0, [pc, #64]	; (8000f00 <callback_out+0x58>)
 8000ec0:	f002 ff2b 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8000ec4:	bd08      	pop	{r3, pc}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <callback_out+0x58>)
 8000ece:	f002 ff24 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000ed2:	e7f7      	b.n	8000ec4 <callback_out+0x1c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	4809      	ldr	r0, [pc, #36]	; (8000f00 <callback_out+0x58>)
 8000edc:	f002 ff1d 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000ee0:	e7f0      	b.n	8000ec4 <callback_out+0x1c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <callback_out+0x5c>)
 8000eea:	f002 ff16 	bl	8003d1a <HAL_GPIO_WritePin>
		break;
 8000eee:	e7e9      	b.n	8000ec4 <callback_out+0x1c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <callback_out+0x5c>)
 8000ef8:	f002 ff0f 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8000efc:	e7e2      	b.n	8000ec4 <callback_out+0x1c>
 8000efe:	bf00      	nop
 8000f00:	40010800 	.word	0x40010800
 8000f04:	40010c00 	.word	0x40010c00

08000f08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f08:	b510      	push	{r4, lr}
 8000f0a:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f0c:	6802      	ldr	r2, [r0, #0]
 8000f0e:	4b60      	ldr	r3, [pc, #384]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d004      	beq.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */


  if (htim->Instance == TIM3) {
 8000f14:	6822      	ldr	r2, [r4, #0]
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d003      	beq.n	8000f24 <HAL_TIM_PeriodElapsedCallback+0x1c>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
  }

  /* USER CODE END Callback 1 */
}
 8000f1c:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000f1e:	f002 fa7d 	bl	800341c <HAL_IncTick>
 8000f22:	e7f7      	b.n	8000f14 <HAL_TIM_PeriodElapsedCallback+0xc>
		TIM2->CCR1 = *puntero_musica >> 1;
 8000f24:	495c      	ldr	r1, [pc, #368]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f26:	680b      	ldr	r3, [r1, #0]
 8000f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f2c:	0852      	lsrs	r2, r2, #1
 8000f2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f32:	6342      	str	r2, [r0, #52]	; 0x34
		puntero_musica++;
 8000f34:	600b      	str	r3, [r1, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3c:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
 8000f40:	f002 feeb 	bl	8003d1a <HAL_GPIO_WritePin>
		switch(musica){
 8000f44:	4b55      	ldr	r3, [pc, #340]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	f000 8091 	beq.w	8001070 <HAL_TIM_PeriodElapsedCallback+0x168>
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d008      	beq.n	8000f64 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d07d      	beq.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x14a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5c:	4850      	ldr	r0, [pc, #320]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f5e:	f002 fedc 	bl	8003d1a <HAL_GPIO_WritePin>
}
 8000f62:	e7db      	b.n	8000f1c <HAL_TIM_PeriodElapsedCallback+0x14>
								switch(tonos){
 8000f64:	4b4f      	ldr	r3, [pc, #316]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d02d      	beq.n	8000fca <HAL_TIM_PeriodElapsedCallback+0xc2>
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d03a      	beq.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8000f72:	b173      	cbz	r3, 8000f92 <HAL_TIM_PeriodElapsedCallback+0x8a>
									if(puntero_musica == puntero_musica_final_tonos){
 8000f74:	4b48      	ldr	r3, [pc, #288]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d10e      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x96>
											puntero_musica = tonos_variables;
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f82:	4a4a      	ldr	r2, [pc, #296]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f84:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f86:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f88:	7813      	ldrb	r3, [r2, #0]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	7013      	strb	r3, [r2, #0]
 8000f90:	e005      	b.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x96>
									if(puntero_musica == puntero_musica_final_f622){
 8000f92:	4b41      	ldr	r3, [pc, #260]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d00c      	beq.n	8000fb8 <HAL_TIM_PeriodElapsedCallback+0xb0>
									if(conteo_musica == 0){
 8000f9e:	4b44      	ldr	r3, [pc, #272]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1d7      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
										switch(tonos){
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d8d2      	bhi.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000fb0:	e8df f003 	tbb	[pc, r3]
 8000fb4:	473d3329 	.word	0x473d3329
											puntero_musica = tono_622hz;
 8000fb8:	4b37      	ldr	r3, [pc, #220]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fba:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000fbc:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000fbe:	4a3c      	ldr	r2, [pc, #240]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fc0:	7813      	ldrb	r3, [r2, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	7013      	strb	r3, [r2, #0]
 8000fc8:	e7e9      	b.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x96>
									if(puntero_musica == puntero_musica_final_f587){
 8000fca:	4b33      	ldr	r3, [pc, #204]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d1e3      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x96>
											puntero_musica = tono_587hz;
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fd8:	4a39      	ldr	r2, [pc, #228]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fda:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000fdc:	4a34      	ldr	r2, [pc, #208]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fde:	7813      	ldrb	r3, [r2, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	7013      	strb	r3, [r2, #0]
 8000fe6:	e7da      	b.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x96>
									if(puntero_musica == puntero_musica_final_f554){
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d1d4      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x96>
											puntero_musica = tono_554hz;
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ff6:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000ff8:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000ffa:	4a2d      	ldr	r2, [pc, #180]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000ffc:	7813      	ldrb	r3, [r2, #0]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	7013      	strb	r3, [r2, #0]
 8001004:	e7cb      	b.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x96>
											puntero_musica = tono_587hz;
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001008:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800100a:	601a      	str	r2, [r3, #0]
											tonos = f587;
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_587HZ;
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001014:	22a0      	movs	r2, #160	; 0xa0
 8001016:	701a      	strb	r2, [r3, #0]
											break;
 8001018:	e79d      	b.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
											puntero_musica = tono_554hz;
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800101c:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800101e:	601a      	str	r2, [r3, #0]
											tonos = f554;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001022:	2202      	movs	r2, #2
 8001024:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_554HZ;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001028:	2296      	movs	r2, #150	; 0x96
 800102a:	701a      	strb	r2, [r3, #0]
											break;
 800102c:	e793      	b.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
											puntero_musica = tonos_variables;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001032:	601a      	str	r2, [r3, #0]
											tonos = variables;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001036:	2203      	movs	r2, #3
 8001038:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_TONOS_VARIABLES;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800103c:	220a      	movs	r2, #10
 800103e:	701a      	strb	r2, [r3, #0]
											break;
 8001040:	e789      	b.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
											HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001042:	2100      	movs	r1, #0
 8001044:	4821      	ldr	r0, [pc, #132]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001046:	f004 fe65 	bl	8005d14 <HAL_TIM_PWM_Stop>
											HAL_TIM_Base_Stop_IT(&htim3);
 800104a:	4821      	ldr	r0, [pc, #132]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800104c:	f004 fb4c 	bl	80056e8 <HAL_TIM_Base_Stop_IT>
											break;
 8001050:	e781      	b.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
						 if(puntero_musica == puntero_final_disparo){
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	f47f af7b 	bne.w	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001060:	2100      	movs	r1, #0
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001064:	f004 fe56 	bl	8005d14 <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8001068:	4819      	ldr	r0, [pc, #100]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800106a:	f004 fb3d 	bl	80056e8 <HAL_TIM_Base_Stop_IT>
 800106e:	e772      	b.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
						 if(puntero_musica == puntero_final_explosion){
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	f47f af6c 	bne.w	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800107e:	2100      	movs	r1, #0
 8001080:	4812      	ldr	r0, [pc, #72]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001082:	f004 fe47 	bl	8005d14 <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8001086:	4812      	ldr	r0, [pc, #72]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001088:	f004 fb2e 	bl	80056e8 <HAL_TIM_Base_Stop_IT>
 800108c:	e763      	b.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x4e>
 800108e:	bf00      	nop
 8001090:	40000800 	.word	0x40000800
 8001094:	40000400 	.word	0x40000400
 8001098:	20000ab4 	.word	0x20000ab4
 800109c:	20000aac 	.word	0x20000aac
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	20000ac0 	.word	0x20000ac0
 80010a8:	2000001c 	.word	0x2000001c
 80010ac:	20000460 	.word	0x20000460
 80010b0:	2000090c 	.word	0x2000090c
 80010b4:	20000018 	.word	0x20000018
 80010b8:	20000450 	.word	0x20000450
 80010bc:	20000014 	.word	0x20000014
 80010c0:	20000440 	.word	0x20000440
 80010c4:	20000010 	.word	0x20000010
 80010c8:	20000430 	.word	0x20000430
 80010cc:	20000a1c 	.word	0x20000a1c
 80010d0:	20000a64 	.word	0x20000a64
 80010d4:	20000008 	.word	0x20000008
 80010d8:	2000000c 	.word	0x2000000c

080010dc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010de:	e7fe      	b.n	80010de <Error_Handler+0x2>

080010e0 <MX_ADC1_Init>:
{
 80010e0:	b500      	push	{lr}
 80010e2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e4:	2300      	movs	r3, #0
 80010e6:	9301      	str	r3, [sp, #4]
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80010ec:	4810      	ldr	r0, [pc, #64]	; (8001130 <MX_ADC1_Init+0x50>)
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <MX_ADC1_Init+0x54>)
 80010f0:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f4:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010fc:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fe:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001100:	2301      	movs	r3, #1
 8001102:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001104:	f002 fbfa 	bl	80038fc <HAL_ADC_Init>
 8001108:	b968      	cbnz	r0, 8001126 <MX_ADC1_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_3;
 800110a:	2303      	movs	r3, #3
 800110c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2301      	movs	r3, #1
 8001110:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001112:	2300      	movs	r3, #0
 8001114:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	a901      	add	r1, sp, #4
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_ADC1_Init+0x50>)
 800111a:	f002 fa6b 	bl	80035f4 <HAL_ADC_ConfigChannel>
 800111e:	b920      	cbnz	r0, 800112a <MX_ADC1_Init+0x4a>
}
 8001120:	b005      	add	sp, #20
 8001122:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001126:	f7ff ffd9 	bl	80010dc <Error_Handler>
    Error_Handler();
 800112a:	f7ff ffd7 	bl	80010dc <Error_Handler>
 800112e:	bf00      	nop
 8001130:	20000910 	.word	0x20000910
 8001134:	40012400 	.word	0x40012400

08001138 <MX_I2C1_Init>:
{
 8001138:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <MX_I2C1_Init+0x2c>)
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_I2C1_Init+0x30>)
 800113e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_I2C1_Init+0x34>)
 8001142:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001144:	2300      	movs	r3, #0
 8001146:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001148:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001156:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001158:	f002 ff76 	bl	8004048 <HAL_I2C_Init>
 800115c:	b900      	cbnz	r0, 8001160 <MX_I2C1_Init+0x28>
}
 800115e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001160:	f7ff ffbc 	bl	80010dc <Error_Handler>
 8001164:	20000970 	.word	0x20000970
 8001168:	40005400 	.word	0x40005400
 800116c:	00061a80 	.word	0x00061a80

08001170 <MX_SPI1_Init>:
{
 8001170:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_SPI1_Init+0x38>)
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MX_SPI1_Init+0x3c>)
 8001176:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001178:	f44f 7382 	mov.w	r3, #260	; 0x104
 800117c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	2300      	movs	r3, #0
 8001180:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001182:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001184:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001186:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800118e:	2228      	movs	r2, #40	; 0x28
 8001190:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001192:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001194:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001196:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001198:	230a      	movs	r3, #10
 800119a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800119c:	f003 fea6 	bl	8004eec <HAL_SPI_Init>
 80011a0:	b900      	cbnz	r0, 80011a4 <MX_SPI1_Init+0x34>
}
 80011a2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011a4:	f7ff ff9a 	bl	80010dc <Error_Handler>
 80011a8:	200009c4 	.word	0x200009c4
 80011ac:	40013000 	.word	0x40013000

080011b0 <MX_ADC2_Init>:
{
 80011b0:	b500      	push	{lr}
 80011b2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b4:	2300      	movs	r3, #0
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	9303      	str	r3, [sp, #12]
  hadc2.Instance = ADC2;
 80011bc:	480f      	ldr	r0, [pc, #60]	; (80011fc <MX_ADC2_Init+0x4c>)
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <MX_ADC2_Init+0x50>)
 80011c0:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c2:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011c4:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011cc:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d4:	f002 fb92 	bl	80038fc <HAL_ADC_Init>
 80011d8:	b960      	cbnz	r0, 80011f4 <MX_ADC2_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_1;
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011de:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011e0:	2300      	movs	r3, #0
 80011e2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e4:	a901      	add	r1, sp, #4
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_ADC2_Init+0x4c>)
 80011e8:	f002 fa04 	bl	80035f4 <HAL_ADC_ConfigChannel>
 80011ec:	b920      	cbnz	r0, 80011f8 <MX_ADC2_Init+0x48>
}
 80011ee:	b005      	add	sp, #20
 80011f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011f4:	f7ff ff72 	bl	80010dc <Error_Handler>
    Error_Handler();
 80011f8:	f7ff ff70 	bl	80010dc <Error_Handler>
 80011fc:	20000940 	.word	0x20000940
 8001200:	40012800 	.word	0x40012800

08001204 <MX_TIM2_Init>:
{
 8001204:	b500      	push	{lr}
 8001206:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001208:	2300      	movs	r3, #0
 800120a:	930a      	str	r3, [sp, #40]	; 0x28
 800120c:	930b      	str	r3, [sp, #44]	; 0x2c
 800120e:	930c      	str	r3, [sp, #48]	; 0x30
 8001210:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	9308      	str	r3, [sp, #32]
 8001214:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	9303      	str	r3, [sp, #12]
 800121c:	9304      	str	r3, [sp, #16]
 800121e:	9305      	str	r3, [sp, #20]
 8001220:	9306      	str	r3, [sp, #24]
 8001222:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8001224:	481d      	ldr	r0, [pc, #116]	; (800129c <MX_TIM2_Init+0x98>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1-1;
 800122c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 255-1;
 8001230:	22fe      	movs	r2, #254	; 0xfe
 8001232:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001234:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001238:	f004 fb6c 	bl	8005914 <HAL_TIM_Base_Init>
 800123c:	bb20      	cbnz	r0, 8001288 <MX_TIM2_Init+0x84>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001244:	a90a      	add	r1, sp, #40	; 0x28
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <MX_TIM2_Init+0x98>)
 8001248:	f004 fc68 	bl	8005b1c <HAL_TIM_ConfigClockSource>
 800124c:	b9f0      	cbnz	r0, 800128c <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800124e:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_TIM2_Init+0x98>)
 8001250:	f004 fb8c 	bl	800596c <HAL_TIM_PWM_Init>
 8001254:	b9e0      	cbnz	r0, 8001290 <MX_TIM2_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800125c:	a908      	add	r1, sp, #32
 800125e:	480f      	ldr	r0, [pc, #60]	; (800129c <MX_TIM2_Init+0x98>)
 8001260:	f004 fd9a 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	b9b0      	cbnz	r0, 8001294 <MX_TIM2_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001266:	2360      	movs	r3, #96	; 0x60
 8001268:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800126a:	2200      	movs	r2, #0
 800126c:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001270:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001272:	a901      	add	r1, sp, #4
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <MX_TIM2_Init+0x98>)
 8001276:	f004 fbd7 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 800127a:	b968      	cbnz	r0, 8001298 <MX_TIM2_Init+0x94>
  HAL_TIM_MspPostInit(&htim2);
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM2_Init+0x98>)
 800127e:	f001 ffa3 	bl	80031c8 <HAL_TIM_MspPostInit>
}
 8001282:	b00f      	add	sp, #60	; 0x3c
 8001284:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001288:	f7ff ff28 	bl	80010dc <Error_Handler>
    Error_Handler();
 800128c:	f7ff ff26 	bl	80010dc <Error_Handler>
    Error_Handler();
 8001290:	f7ff ff24 	bl	80010dc <Error_Handler>
    Error_Handler();
 8001294:	f7ff ff22 	bl	80010dc <Error_Handler>
    Error_Handler();
 8001298:	f7ff ff20 	bl	80010dc <Error_Handler>
 800129c:	20000a1c 	.word	0x20000a1c

080012a0 <MX_TIM3_Init>:
{
 80012a0:	b500      	push	{lr}
 80012a2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a4:	2300      	movs	r3, #0
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	9303      	str	r3, [sp, #12]
 80012aa:	9304      	str	r3, [sp, #16]
 80012ac:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 80012b2:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_TIM3_Init+0x60>)
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MX_TIM3_Init+0x64>)
 80012b6:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 80012b8:	2247      	movs	r2, #71	; 0x47
 80012ba:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 125-1;
 80012be:	227c      	movs	r2, #124	; 0x7c
 80012c0:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c6:	f004 fb25 	bl	8005914 <HAL_TIM_Base_Init>
 80012ca:	b990      	cbnz	r0, 80012f2 <MX_TIM3_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012d2:	a902      	add	r1, sp, #8
 80012d4:	480a      	ldr	r0, [pc, #40]	; (8001300 <MX_TIM3_Init+0x60>)
 80012d6:	f004 fc21 	bl	8005b1c <HAL_TIM_ConfigClockSource>
 80012da:	b960      	cbnz	r0, 80012f6 <MX_TIM3_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e2:	4669      	mov	r1, sp
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_TIM3_Init+0x60>)
 80012e6:	f004 fd57 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	b930      	cbnz	r0, 80012fa <MX_TIM3_Init+0x5a>
}
 80012ec:	b007      	add	sp, #28
 80012ee:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012f2:	f7ff fef3 	bl	80010dc <Error_Handler>
    Error_Handler();
 80012f6:	f7ff fef1 	bl	80010dc <Error_Handler>
    Error_Handler();
 80012fa:	f7ff feef 	bl	80010dc <Error_Handler>
 80012fe:	bf00      	nop
 8001300:	20000a64 	.word	0x20000a64
 8001304:	40000400 	.word	0x40000400

08001308 <SystemClock_Config>:
{
 8001308:	b500      	push	{lr}
 800130a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130c:	2228      	movs	r2, #40	; 0x28
 800130e:	2100      	movs	r1, #0
 8001310:	eb0d 0002 	add.w	r0, sp, r2
 8001314:	f007 f937 	bl	8008586 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	2300      	movs	r3, #0
 800131a:	9305      	str	r3, [sp, #20]
 800131c:	9306      	str	r3, [sp, #24]
 800131e:	9307      	str	r3, [sp, #28]
 8001320:	9308      	str	r3, [sp, #32]
 8001322:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	9303      	str	r3, [sp, #12]
 800132a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2201      	movs	r2, #1
 800132e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001334:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001336:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2202      	movs	r2, #2
 800133a:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800133e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001342:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	a80a      	add	r0, sp, #40	; 0x28
 8001346:	f003 f8f9 	bl	800453c <HAL_RCC_OscConfig>
 800134a:	b9c8      	cbnz	r0, 8001380 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134c:	230f      	movs	r3, #15
 800134e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	2102      	movs	r1, #2
 8001352:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001360:	a805      	add	r0, sp, #20
 8001362:	f003 fb1d 	bl	80049a0 <HAL_RCC_ClockConfig>
 8001366:	b968      	cbnz	r0, 8001384 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001368:	2302      	movs	r3, #2
 800136a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800136c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001370:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001372:	a801      	add	r0, sp, #4
 8001374:	f003 fc0e 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	b930      	cbnz	r0, 8001388 <SystemClock_Config+0x80>
}
 800137a:	b015      	add	sp, #84	; 0x54
 800137c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001380:	f7ff feac 	bl	80010dc <Error_Handler>
    Error_Handler();
 8001384:	f7ff feaa 	bl	80010dc <Error_Handler>
    Error_Handler();
 8001388:	f7ff fea8 	bl	80010dc <Error_Handler>

0800138c <main>:
{
 800138c:	b508      	push	{r3, lr}
  HAL_Init();
 800138e:	f002 f833 	bl	80033f8 <HAL_Init>
  SystemClock_Config();
 8001392:	f7ff ffb9 	bl	8001308 <SystemClock_Config>
  MX_GPIO_Init();
 8001396:	f7ff fbc3 	bl	8000b20 <MX_GPIO_Init>
  MX_ADC1_Init();
 800139a:	f7ff fea1 	bl	80010e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 800139e:	f7ff fecb 	bl	8001138 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013a2:	f7ff fee5 	bl	8001170 <MX_SPI1_Init>
  MX_ADC2_Init();
 80013a6:	f7ff ff03 	bl	80011b0 <MX_ADC2_Init>
  MX_TIM2_Init();
 80013aa:	f7ff ff2b 	bl	8001204 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013ae:	f7ff ff77 	bl	80012a0 <MX_TIM3_Init>
  osKernelInitialize();
 80013b2:	f004 fd29 	bl	8005e08 <osKernelInitialize>
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 80013b6:	4a19      	ldr	r2, [pc, #100]	; (800141c <main+0x90>)
 80013b8:	2103      	movs	r1, #3
 80013ba:	200a      	movs	r0, #10
 80013bc:	f004 fea2 	bl	8006104 <osMessageQueueNew>
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <main+0x94>)
 80013c2:	6018      	str	r0, [r3, #0]
  queueSonidoMenuHandle = osMessageQueueNew (10, sizeof(musica_t), &queueSonidoMenu_attributes);
 80013c4:	4a17      	ldr	r2, [pc, #92]	; (8001424 <main+0x98>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	200a      	movs	r0, #10
 80013ca:	f004 fe9b 	bl	8006104 <osMessageQueueNew>
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <main+0x9c>)
 80013d0:	6018      	str	r0, [r3, #0]
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 80013d2:	4a16      	ldr	r2, [pc, #88]	; (800142c <main+0xa0>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	4816      	ldr	r0, [pc, #88]	; (8001430 <main+0xa4>)
 80013d8:	f004 fd5e 	bl	8005e98 <osThreadNew>
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <main+0xa8>)
 80013de:	6018      	str	r0, [r3, #0]
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <main+0xac>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	4815      	ldr	r0, [pc, #84]	; (800143c <main+0xb0>)
 80013e6:	f004 fd57 	bl	8005e98 <osThreadNew>
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <main+0xb4>)
 80013ec:	6018      	str	r0, [r3, #0]
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <main+0xb8>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	4815      	ldr	r0, [pc, #84]	; (8001448 <main+0xbc>)
 80013f4:	f004 fd50 	bl	8005e98 <osThreadNew>
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <main+0xc0>)
 80013fa:	6018      	str	r0, [r3, #0]
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <main+0xc4>)
 80013fe:	2100      	movs	r1, #0
 8001400:	4814      	ldr	r0, [pc, #80]	; (8001454 <main+0xc8>)
 8001402:	f004 fd49 	bl	8005e98 <osThreadNew>
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <main+0xcc>)
 8001408:	6018      	str	r0, [r3, #0]
  notificationFlag = osEventFlagsNew(NULL);
 800140a:	2000      	movs	r0, #0
 800140c:	f004 fdba 	bl	8005f84 <osEventFlagsNew>
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <main+0xd0>)
 8001412:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001414:	f004 fd1a 	bl	8005e4c <osKernelStart>
  while (1)
 8001418:	e7fe      	b.n	8001418 <main+0x8c>
 800141a:	bf00      	nop
 800141c:	08009c00 	.word	0x08009c00
 8001420:	20000ab8 	.word	0x20000ab8
 8001424:	08009c18 	.word	0x08009c18
 8001428:	20000abc 	.word	0x20000abc
 800142c:	08009b70 	.word	0x08009b70
 8001430:	08000c11 	.word	0x08000c11
 8001434:	200008fc 	.word	0x200008fc
 8001438:	08009bb8 	.word	0x08009bb8
 800143c:	08000cfd 	.word	0x08000cfd
 8001440:	20000904 	.word	0x20000904
 8001444:	08009b94 	.word	0x08009b94
 8001448:	08000d59 	.word	0x08000d59
 800144c:	20000900 	.word	0x20000900
 8001450:	08009bdc 	.word	0x08009bdc
 8001454:	08000d95 	.word	0x08000d95
 8001458:	20000908 	.word	0x20000908
 800145c:	20000ab0 	.word	0x20000ab0

08001460 <getPuntajes>:
puntajes_t Puntajes[10];

puntajes_t *getPuntajes(uint8_t indice){

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
 8001460:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 8001464:	4b01      	ldr	r3, [pc, #4]	; (800146c <getPuntajes+0xc>)
 8001466:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800146a:	4770      	bx	lr
 800146c:	20000ac4 	.word	0x20000ac4

08001470 <Write_Enable>:


void Write_Enable(){
 8001470:	b530      	push	{r4, r5, lr}
 8001472:	b083      	sub	sp, #12


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 8001474:	4c10      	ldr	r4, [pc, #64]	; (80014b8 <Write_Enable+0x48>)
 8001476:	2201      	movs	r2, #1
 8001478:	2120      	movs	r1, #32
 800147a:	4620      	mov	r0, r4
 800147c:	f002 fc4d 	bl	8003d1a <HAL_GPIO_WritePin>

	uint8_t comando[2] = { 0x27 , 0xFF};
 8001480:	f64f 7327 	movw	r3, #65319	; 0xff27
 8001484:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&hspi1, &comando[0], 1, HAL_MAX_DELAY);
 8001488:	4d0c      	ldr	r5, [pc, #48]	; (80014bc <Write_Enable+0x4c>)
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	2201      	movs	r2, #1
 8001490:	a901      	add	r1, sp, #4
 8001492:	4628      	mov	r0, r5
 8001494:	f003 fd85 	bl	8004fa2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &comando[1], 1, HAL_MAX_DELAY);
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	2201      	movs	r2, #1
 800149e:	f10d 0105 	add.w	r1, sp, #5
 80014a2:	4628      	mov	r0, r5
 80014a4:	f003 fd7d 	bl	8004fa2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2120      	movs	r1, #32
 80014ac:	4620      	mov	r0, r4
 80014ae:	f002 fc34 	bl	8003d1a <HAL_GPIO_WritePin>


}
 80014b2:	b003      	add	sp, #12
 80014b4:	bd30      	pop	{r4, r5, pc}
 80014b6:	bf00      	nop
 80014b8:	40010c00 	.word	0x40010c00
 80014bc:	200009c4 	.word	0x200009c4

080014c0 <Write_Memoria>:

void Write_Memoria(uint16_t address, uint8_t dato){
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	4604      	mov	r4, r0
 80014c6:	460d      	mov	r5, r1

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 80014c8:	4e0d      	ldr	r6, [pc, #52]	; (8001500 <Write_Memoria+0x40>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	2120      	movs	r1, #32
 80014ce:	4630      	mov	r0, r6
 80014d0:	f002 fc23 	bl	8003d1a <HAL_GPIO_WritePin>

	uint8_t comando[3] = { ((uint8_t)WRITE<<3) + (address>>8  & 0xFF), address & 0xFF, dato};
 80014d4:	0a23      	lsrs	r3, r4, #8
 80014d6:	3328      	adds	r3, #40	; 0x28
 80014d8:	f88d 3004 	strb.w	r3, [sp, #4]
 80014dc:	f88d 4005 	strb.w	r4, [sp, #5]
 80014e0:	f88d 5006 	strb.w	r5, [sp, #6]
	HAL_SPI_Transmit(&hspi1, comando, 3, HAL_MAX_DELAY);
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	2203      	movs	r2, #3
 80014ea:	a901      	add	r1, sp, #4
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <Write_Memoria+0x44>)
 80014ee:	f003 fd58 	bl	8004fa2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2120      	movs	r1, #32
 80014f6:	4630      	mov	r0, r6
 80014f8:	f002 fc0f 	bl	8003d1a <HAL_GPIO_WritePin>
}
 80014fc:	b002      	add	sp, #8
 80014fe:	bd70      	pop	{r4, r5, r6, pc}
 8001500:	40010c00 	.word	0x40010c00
 8001504:	200009c4 	.word	0x200009c4

08001508 <Read_all>:


	return ((dato_leido[0]<<1) + (dato_leido[1]>>7));
}

void Read_all(uint16_t address, uint16_t tamano, uint8_t *buffer){
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	4604      	mov	r4, r0
 800150e:	460e      	mov	r6, r1
 8001510:	4615      	mov	r5, r2


	uint8_t dato_actual, dato_anterior;


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2120      	movs	r1, #32
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <Read_all+0x8c>)
 8001518:	f002 fbff 	bl	8003d1a <HAL_GPIO_WritePin>

	uint8_t comando[2] = { ((uint16_t)READ<<3) + (address>>8 & 0xFF), address & 0xFF};
 800151c:	0a23      	lsrs	r3, r4, #8
 800151e:	3330      	adds	r3, #48	; 0x30
 8001520:	f88d 3004 	strb.w	r3, [sp, #4]
 8001524:	f88d 4005 	strb.w	r4, [sp, #5]
	HAL_SPI_Transmit(&hspi1, comando, 2, 100);
 8001528:	4c1b      	ldr	r4, [pc, #108]	; (8001598 <Read_all+0x90>)
 800152a:	2364      	movs	r3, #100	; 0x64
 800152c:	2202      	movs	r2, #2
 800152e:	a901      	add	r1, sp, #4
 8001530:	4620      	mov	r0, r4
 8001532:	f003 fd36 	bl	8004fa2 <HAL_SPI_Transmit>

	HAL_Delay(10);
 8001536:	200a      	movs	r0, #10
 8001538:	f001 ff82 	bl	8003440 <HAL_Delay>

	HAL_SPI_Receive(&hspi1, &dato_anterior, 1, HAL_MAX_DELAY);
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	2201      	movs	r2, #1
 8001542:	f10d 0106 	add.w	r1, sp, #6
 8001546:	4620      	mov	r0, r4
 8001548:	f003 ff29 	bl	800539e <HAL_SPI_Receive>


	for(uint16_t i=0; i< tamano; i++){
 800154c:	2400      	movs	r4, #0
 800154e:	e015      	b.n	800157c <Read_all+0x74>

		HAL_SPI_Receive(&hspi1, &dato_actual, 1, HAL_MAX_DELAY);
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2201      	movs	r2, #1
 8001556:	f10d 0107 	add.w	r1, sp, #7
 800155a:	480f      	ldr	r0, [pc, #60]	; (8001598 <Read_all+0x90>)
 800155c:	f003 ff1f 	bl	800539e <HAL_SPI_Receive>
		*buffer = (dato_anterior<<1) + (dato_actual>>7);
 8001560:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800156c:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8001570:	f805 3b01 	strb.w	r3, [r5], #1
		buffer++;
		dato_anterior = dato_actual;
 8001574:	f88d 2006 	strb.w	r2, [sp, #6]
	for(uint16_t i=0; i< tamano; i++){
 8001578:	3401      	adds	r4, #1
 800157a:	b2a4      	uxth	r4, r4
 800157c:	42b4      	cmp	r4, r6
 800157e:	d3e7      	bcc.n	8001550 <Read_all+0x48>
		//HAL_Delay(1);
	}

	HAL_Delay(10);
 8001580:	200a      	movs	r0, #10
 8001582:	f001 ff5d 	bl	8003440 <HAL_Delay>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2120      	movs	r1, #32
 800158a:	4802      	ldr	r0, [pc, #8]	; (8001594 <Read_all+0x8c>)
 800158c:	f002 fbc5 	bl	8003d1a <HAL_GPIO_WritePin>

}
 8001590:	b002      	add	sp, #8
 8001592:	bd70      	pop	{r4, r5, r6, pc}
 8001594:	40010c00 	.word	0x40010c00
 8001598:	200009c4 	.word	0x200009c4

0800159c <memoriaInit>:



void memoriaInit(){
 800159c:	b570      	push	{r4, r5, r6, lr}
 800159e:	b09a      	sub	sp, #104	; 0x68


		char buff_nombre[NUM_MAX_POR_NOMBRE+1];
		strcpy(buff_nombre, "      ");
 80015a0:	4b74      	ldr	r3, [pc, #464]	; (8001774 <memoriaInit+0x1d8>)
 80015a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015a6:	9018      	str	r0, [sp, #96]	; 0x60
 80015a8:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
 80015ac:	0c09      	lsrs	r1, r1, #16
 80015ae:	f88d 1066 	strb.w	r1, [sp, #102]	; 0x66
		uint8_t puntaje_msb = 0;

		uint8_t buffer[TAMANO_TOTAL_PUNTAJES];


		Read_all(address, TAMANO_TOTAL_PUNTAJES, buffer);
 80015b2:	aa01      	add	r2, sp, #4
 80015b4:	215a      	movs	r1, #90	; 0x5a
 80015b6:	2000      	movs	r0, #0
 80015b8:	f7ff ffa6 	bl	8001508 <Read_all>
		uint8_t puntaje_msb = 0;
 80015bc:	2500      	movs	r5, #0
		uint8_t i=0;
 80015be:	462c      	mov	r4, r5
		uint8_t permiso = true;
 80015c0:	2101      	movs	r1, #1
		uint8_t j = 0;
 80015c2:	4628      	mov	r0, r5
 80015c4:	e026      	b.n	8001614 <memoriaInit+0x78>
 80015c6:	f1a4 0219 	sub.w	r2, r4, #25
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	2301      	movs	r3, #1
 80015ce:	4093      	lsls	r3, r2
 80015d0:	4a69      	ldr	r2, [pc, #420]	; (8001778 <memoriaInit+0x1dc>)
 80015d2:	4213      	tst	r3, r2
 80015d4:	f040 809e 	bne.w	8001714 <memoriaInit+0x178>
 80015d8:	4a68      	ldr	r2, [pc, #416]	; (800177c <memoriaInit+0x1e0>)
 80015da:	4213      	tst	r3, r2
 80015dc:	d026      	beq.n	800162c <memoriaInit+0x90>
 80015de:	e00f      	b.n	8001600 <memoriaInit+0x64>
 80015e0:	2c59      	cmp	r4, #89	; 0x59
 80015e2:	d823      	bhi.n	800162c <memoriaInit+0x90>
 80015e4:	2c3d      	cmp	r4, #61	; 0x3d
 80015e6:	d321      	bcc.n	800162c <memoriaInit+0x90>
 80015e8:	f1a4 023d 	sub.w	r2, r4, #61	; 0x3d
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	2301      	movs	r3, #1
 80015f0:	4093      	lsls	r3, r2
 80015f2:	4a61      	ldr	r2, [pc, #388]	; (8001778 <memoriaInit+0x1dc>)
 80015f4:	4213      	tst	r3, r2
 80015f6:	f040 808d 	bne.w	8001714 <memoriaInit+0x178>
 80015fa:	4a60      	ldr	r2, [pc, #384]	; (800177c <memoriaInit+0x1e0>)
 80015fc:	4213      	tst	r3, r2
 80015fe:	d015      	beq.n	800162c <memoriaInit+0x90>

		do{

			if( (i==7) || (i==16) || (i==25) || (i==34) || (i==43) || (i==52) || (i==61) || (i==70) || (i==79) || (i==88) ){

				puntaje_msb = buffer[i];
 8001600:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8001604:	446b      	add	r3, sp
 8001606:	f813 5c64 	ldrb.w	r5, [r3, #-100]
					else{
						j++;
					}
				}
			}
			i++;
 800160a:	3401      	adds	r4, #1
 800160c:	b2e4      	uxtb	r4, r4

		}while(i != TAMANO_TOTAL_PUNTAJES);
 800160e:	2c5a      	cmp	r4, #90	; 0x5a
 8001610:	f000 815e 	beq.w	80018d0 <memoriaInit+0x334>
			if( (i==7) || (i==16) || (i==25) || (i==34) || (i==43) || (i==52) || (i==61) || (i==70) || (i==79) || (i==88) ){
 8001614:	2c07      	cmp	r4, #7
 8001616:	d0f3      	beq.n	8001600 <memoriaInit+0x64>
 8001618:	2c35      	cmp	r4, #53	; 0x35
 800161a:	d8e1      	bhi.n	80015e0 <memoriaInit+0x44>
 800161c:	2c19      	cmp	r4, #25
 800161e:	d2d2      	bcs.n	80015c6 <memoriaInit+0x2a>
 8001620:	2c10      	cmp	r4, #16
 8001622:	d0ed      	beq.n	8001600 <memoriaInit+0x64>
 8001624:	2c11      	cmp	r4, #17
 8001626:	d075      	beq.n	8001714 <memoriaInit+0x178>
 8001628:	2c08      	cmp	r4, #8
 800162a:	d073      	beq.n	8001714 <memoriaInit+0x178>
				if( (buff_nombre[j] != '\0') && permiso==true){
 800162c:	f100 0368 	add.w	r3, r0, #104	; 0x68
 8001630:	446b      	add	r3, sp
 8001632:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0e7      	beq.n	800160a <memoriaInit+0x6e>
 800163a:	2901      	cmp	r1, #1
 800163c:	d1e5      	bne.n	800160a <memoriaInit+0x6e>
					buff_nombre[j]  = buffer[i];;
 800163e:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8001642:	446b      	add	r3, sp
 8001644:	f813 6c64 	ldrb.w	r6, [r3, #-100]
 8001648:	f100 0368 	add.w	r3, r0, #104	; 0x68
 800164c:	eb0d 0203 	add.w	r2, sp, r3
 8001650:	f802 6c08 	strb.w	r6, [r2, #-8]
					if(buff_nombre[j] == '\0'){
 8001654:	2e00      	cmp	r6, #0
 8001656:	f040 812f 	bne.w	80018b8 <memoriaInit+0x31c>
						if((i>=0 && i<7)){
 800165a:	2c57      	cmp	r4, #87	; 0x57
 800165c:	f200 80f6 	bhi.w	800184c <memoriaInit+0x2b0>
 8001660:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001664:	00f000f0 	.word	0x00f000f0
 8001668:	00f000f0 	.word	0x00f000f0
 800166c:	00f000f0 	.word	0x00f000f0
 8001670:	00f400f0 	.word	0x00f400f0
 8001674:	00fd00f4 	.word	0x00fd00f4
 8001678:	00fd00fd 	.word	0x00fd00fd
 800167c:	00fd00fd 	.word	0x00fd00fd
 8001680:	00fd00fd 	.word	0x00fd00fd
 8001684:	00f400f4 	.word	0x00f400f4
 8001688:	01020102 	.word	0x01020102
 800168c:	01020102 	.word	0x01020102
 8001690:	01020102 	.word	0x01020102
 8001694:	00f40102 	.word	0x00f40102
 8001698:	010700f4 	.word	0x010700f4
 800169c:	01070107 	.word	0x01070107
 80016a0:	01070107 	.word	0x01070107
 80016a4:	01070107 	.word	0x01070107
 80016a8:	00f400f4 	.word	0x00f400f4
 80016ac:	010c010c 	.word	0x010c010c
 80016b0:	010c010c 	.word	0x010c010c
 80016b4:	010c010c 	.word	0x010c010c
 80016b8:	00f4010c 	.word	0x00f4010c
 80016bc:	011100f4 	.word	0x011100f4
 80016c0:	01110111 	.word	0x01110111
 80016c4:	01110111 	.word	0x01110111
 80016c8:	01110111 	.word	0x01110111
 80016cc:	00f400f4 	.word	0x00f400f4
 80016d0:	01160116 	.word	0x01160116
 80016d4:	01160116 	.word	0x01160116
 80016d8:	01160116 	.word	0x01160116
 80016dc:	00f40116 	.word	0x00f40116
 80016e0:	011b00f4 	.word	0x011b00f4
 80016e4:	011b011b 	.word	0x011b011b
 80016e8:	011b011b 	.word	0x011b011b
 80016ec:	011b011b 	.word	0x011b011b
 80016f0:	00f400f4 	.word	0x00f400f4
 80016f4:	01200120 	.word	0x01200120
 80016f8:	01200120 	.word	0x01200120
 80016fc:	01200120 	.word	0x01200120
 8001700:	00f40120 	.word	0x00f40120
 8001704:	012500f4 	.word	0x012500f4
 8001708:	01250125 	.word	0x01250125
 800170c:	01250125 	.word	0x01250125
 8001710:	01250125 	.word	0x01250125
				puntaje_lsb = buffer[i];
 8001714:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8001718:	446b      	add	r3, sp
 800171a:	f813 3c64 	ldrb.w	r3, [r3, #-100]
				switch(i){
 800171e:	2c23      	cmp	r4, #35	; 0x23
 8001720:	d922      	bls.n	8001768 <memoriaInit+0x1cc>
 8001722:	2c59      	cmp	r4, #89	; 0x59
 8001724:	f200 80d1 	bhi.w	80018ca <memoriaInit+0x32e>
 8001728:	2c2c      	cmp	r4, #44	; 0x2c
 800172a:	d33e      	bcc.n	80017aa <memoriaInit+0x20e>
 800172c:	f1a4 022c 	sub.w	r2, r4, #44	; 0x2c
 8001730:	2a2d      	cmp	r2, #45	; 0x2d
 8001732:	f200 80c4 	bhi.w	80018be <memoriaInit+0x322>
 8001736:	e8df f002 	tbb	[pc, r2]
 800173a:	c257      	.short	0xc257
 800173c:	c2c2c2c2 	.word	0xc2c2c2c2
 8001740:	5ec2c2c2 	.word	0x5ec2c2c2
 8001744:	c2c2c2c2 	.word	0xc2c2c2c2
 8001748:	c2c2c2c2 	.word	0xc2c2c2c2
 800174c:	c2c2c265 	.word	0xc2c2c265
 8001750:	c2c2c2c2 	.word	0xc2c2c2c2
 8001754:	c2c26dc2 	.word	0xc2c26dc2
 8001758:	c2c2c2c2 	.word	0xc2c2c2c2
 800175c:	c275c2c2 	.word	0xc275c2c2
 8001760:	c2c2c2c2 	.word	0xc2c2c2c2
 8001764:	7dc2c2c2 	.word	0x7dc2c2c2
 8001768:	2c08      	cmp	r4, #8
 800176a:	d209      	bcs.n	8001780 <memoriaInit+0x1e4>
 800176c:	2500      	movs	r5, #0
 800176e:	2101      	movs	r1, #1
 8001770:	e74b      	b.n	800160a <memoriaInit+0x6e>
 8001772:	bf00      	nop
 8001774:	08009c30 	.word	0x08009c30
 8001778:	10080402 	.word	0x10080402
 800177c:	08040201 	.word	0x08040201
 8001780:	f1a4 0208 	sub.w	r2, r4, #8
 8001784:	2a1b      	cmp	r2, #27
 8001786:	f200 809d 	bhi.w	80018c4 <memoriaInit+0x328>
 800178a:	e8df f002 	tbb	[pc, r2]
 800178e:	9b11      	.short	0x9b11
 8001790:	9b9b9b9b 	.word	0x9b9b9b9b
 8001794:	189b9b9b 	.word	0x189b9b9b
 8001798:	9b9b9b9b 	.word	0x9b9b9b9b
 800179c:	9b9b9b9b 	.word	0x9b9b9b9b
 80017a0:	9b9b9b1f 	.word	0x9b9b9b1f
 80017a4:	9b9b9b9b 	.word	0x9b9b9b9b
 80017a8:	269b      	.short	0x269b
 80017aa:	2500      	movs	r5, #0
 80017ac:	2101      	movs	r1, #1
 80017ae:	e72c      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[0].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80017b0:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80017b4:	4a47      	ldr	r2, [pc, #284]	; (80018d4 <memoriaInit+0x338>)
 80017b6:	8113      	strh	r3, [r2, #8]
				puntaje_msb = 0;
 80017b8:	2500      	movs	r5, #0
				permiso = true;
 80017ba:	2101      	movs	r1, #1
					break;
 80017bc:	e725      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[1].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80017be:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80017c2:	4a44      	ldr	r2, [pc, #272]	; (80018d4 <memoriaInit+0x338>)
 80017c4:	8253      	strh	r3, [r2, #18]
				puntaje_msb = 0;
 80017c6:	2500      	movs	r5, #0
				permiso = true;
 80017c8:	2101      	movs	r1, #1
					break;
 80017ca:	e71e      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[2].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80017cc:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80017d0:	4a40      	ldr	r2, [pc, #256]	; (80018d4 <memoriaInit+0x338>)
 80017d2:	8393      	strh	r3, [r2, #28]
				puntaje_msb = 0;
 80017d4:	2500      	movs	r5, #0
				permiso = true;
 80017d6:	2101      	movs	r1, #1
					break;
 80017d8:	e717      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[3].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80017da:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80017de:	4a3d      	ldr	r2, [pc, #244]	; (80018d4 <memoriaInit+0x338>)
 80017e0:	84d3      	strh	r3, [r2, #38]	; 0x26
				puntaje_msb = 0;
 80017e2:	2500      	movs	r5, #0
				permiso = true;
 80017e4:	2101      	movs	r1, #1
					break;
 80017e6:	e710      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[4].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80017e8:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80017ec:	4a39      	ldr	r2, [pc, #228]	; (80018d4 <memoriaInit+0x338>)
 80017ee:	8613      	strh	r3, [r2, #48]	; 0x30
				puntaje_msb = 0;
 80017f0:	2500      	movs	r5, #0
				permiso = true;
 80017f2:	2101      	movs	r1, #1
					break;
 80017f4:	e709      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[5].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80017f6:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80017fa:	4a36      	ldr	r2, [pc, #216]	; (80018d4 <memoriaInit+0x338>)
 80017fc:	8753      	strh	r3, [r2, #58]	; 0x3a
				puntaje_msb = 0;
 80017fe:	2500      	movs	r5, #0
				permiso = true;
 8001800:	2101      	movs	r1, #1
					break;
 8001802:	e702      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[6].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001804:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001808:	4a32      	ldr	r2, [pc, #200]	; (80018d4 <memoriaInit+0x338>)
 800180a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				puntaje_msb = 0;
 800180e:	2500      	movs	r5, #0
				permiso = true;
 8001810:	2101      	movs	r1, #1
					break;
 8001812:	e6fa      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[7].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001814:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <memoriaInit+0x338>)
 800181a:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				puntaje_msb = 0;
 800181e:	2500      	movs	r5, #0
				permiso = true;
 8001820:	2101      	movs	r1, #1
					break;
 8001822:	e6f2      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[8].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001824:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001828:	4a2a      	ldr	r2, [pc, #168]	; (80018d4 <memoriaInit+0x338>)
 800182a:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				puntaje_msb = 0;
 800182e:	2500      	movs	r5, #0
				permiso = true;
 8001830:	2101      	movs	r1, #1
					break;
 8001832:	e6ea      	b.n	800160a <memoriaInit+0x6e>
					Puntajes[9].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001834:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001838:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <memoriaInit+0x338>)
 800183a:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
				puntaje_msb = 0;
 800183e:	2500      	movs	r5, #0
				permiso = true;
 8001840:	2101      	movs	r1, #1
					break;
 8001842:	e6e2      	b.n	800160a <memoriaInit+0x6e>
							strcpy(Puntajes[0].nombre, buff_nombre);
 8001844:	a918      	add	r1, sp, #96	; 0x60
 8001846:	4823      	ldr	r0, [pc, #140]	; (80018d4 <memoriaInit+0x338>)
 8001848:	f006 ff19 	bl	800867e <strcpy>
						strcpy(buff_nombre, "       ");
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <memoriaInit+0x33c>)
 800184e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001852:	ab1a      	add	r3, sp, #104	; 0x68
 8001854:	e903 0003 	stmdb	r3, {r0, r1}
						permiso = false;
 8001858:	4631      	mov	r1, r6
						j = 0;
 800185a:	4630      	mov	r0, r6
 800185c:	e6d5      	b.n	800160a <memoriaInit+0x6e>
							strcpy(Puntajes[1].nombre, buff_nombre);
 800185e:	a918      	add	r1, sp, #96	; 0x60
 8001860:	481e      	ldr	r0, [pc, #120]	; (80018dc <memoriaInit+0x340>)
 8001862:	f006 ff0c 	bl	800867e <strcpy>
 8001866:	e7f1      	b.n	800184c <memoriaInit+0x2b0>
							strcpy(Puntajes[2].nombre, buff_nombre);
 8001868:	a918      	add	r1, sp, #96	; 0x60
 800186a:	481d      	ldr	r0, [pc, #116]	; (80018e0 <memoriaInit+0x344>)
 800186c:	f006 ff07 	bl	800867e <strcpy>
 8001870:	e7ec      	b.n	800184c <memoriaInit+0x2b0>
							strcpy(Puntajes[3].nombre, buff_nombre);
 8001872:	a918      	add	r1, sp, #96	; 0x60
 8001874:	481b      	ldr	r0, [pc, #108]	; (80018e4 <memoriaInit+0x348>)
 8001876:	f006 ff02 	bl	800867e <strcpy>
 800187a:	e7e7      	b.n	800184c <memoriaInit+0x2b0>
							strcpy(Puntajes[4].nombre, buff_nombre);
 800187c:	a918      	add	r1, sp, #96	; 0x60
 800187e:	481a      	ldr	r0, [pc, #104]	; (80018e8 <memoriaInit+0x34c>)
 8001880:	f006 fefd 	bl	800867e <strcpy>
 8001884:	e7e2      	b.n	800184c <memoriaInit+0x2b0>
							strcpy(Puntajes[5].nombre, buff_nombre);
 8001886:	a918      	add	r1, sp, #96	; 0x60
 8001888:	4818      	ldr	r0, [pc, #96]	; (80018ec <memoriaInit+0x350>)
 800188a:	f006 fef8 	bl	800867e <strcpy>
 800188e:	e7dd      	b.n	800184c <memoriaInit+0x2b0>
							strcpy(Puntajes[6].nombre, buff_nombre);
 8001890:	a918      	add	r1, sp, #96	; 0x60
 8001892:	4817      	ldr	r0, [pc, #92]	; (80018f0 <memoriaInit+0x354>)
 8001894:	f006 fef3 	bl	800867e <strcpy>
 8001898:	e7d8      	b.n	800184c <memoriaInit+0x2b0>
							strcpy(Puntajes[7].nombre, buff_nombre);
 800189a:	a918      	add	r1, sp, #96	; 0x60
 800189c:	4815      	ldr	r0, [pc, #84]	; (80018f4 <memoriaInit+0x358>)
 800189e:	f006 feee 	bl	800867e <strcpy>
 80018a2:	e7d3      	b.n	800184c <memoriaInit+0x2b0>
							strcpy(Puntajes[8].nombre, buff_nombre);
 80018a4:	a918      	add	r1, sp, #96	; 0x60
 80018a6:	4814      	ldr	r0, [pc, #80]	; (80018f8 <memoriaInit+0x35c>)
 80018a8:	f006 fee9 	bl	800867e <strcpy>
 80018ac:	e7ce      	b.n	800184c <memoriaInit+0x2b0>
							strcpy(Puntajes[9].nombre, buff_nombre);
 80018ae:	a918      	add	r1, sp, #96	; 0x60
 80018b0:	4812      	ldr	r0, [pc, #72]	; (80018fc <memoriaInit+0x360>)
 80018b2:	f006 fee4 	bl	800867e <strcpy>
 80018b6:	e7c9      	b.n	800184c <memoriaInit+0x2b0>
						j++;
 80018b8:	3001      	adds	r0, #1
 80018ba:	b2c0      	uxtb	r0, r0
 80018bc:	e6a5      	b.n	800160a <memoriaInit+0x6e>
				switch(i){
 80018be:	2500      	movs	r5, #0
 80018c0:	2101      	movs	r1, #1
 80018c2:	e6a2      	b.n	800160a <memoriaInit+0x6e>
 80018c4:	2500      	movs	r5, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	e69f      	b.n	800160a <memoriaInit+0x6e>
 80018ca:	2500      	movs	r5, #0
 80018cc:	2101      	movs	r1, #1
 80018ce:	e69c      	b.n	800160a <memoriaInit+0x6e>


}
 80018d0:	b01a      	add	sp, #104	; 0x68
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	20000ac4 	.word	0x20000ac4
 80018d8:	08009c38 	.word	0x08009c38
 80018dc:	20000ace 	.word	0x20000ace
 80018e0:	20000ad8 	.word	0x20000ad8
 80018e4:	20000ae2 	.word	0x20000ae2
 80018e8:	20000aec 	.word	0x20000aec
 80018ec:	20000af6 	.word	0x20000af6
 80018f0:	20000b00 	.word	0x20000b00
 80018f4:	20000b0a 	.word	0x20000b0a
 80018f8:	20000b14 	.word	0x20000b14
 80018fc:	20000b1e 	.word	0x20000b1e

08001900 <writeNuevosPuntajes>:



void writeNuevosPuntajes(uint8_t permutaciones){
 8001900:	b530      	push	{r4, r5, lr}
 8001902:	b099      	sub	sp, #100	; 0x64
 8001904:	4605      	mov	r5, r0

	uint8_t k=0;
	uint16_t address;


	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 8001906:	2300      	movs	r3, #0
	uint8_t k=0;
 8001908:	4619      	mov	r1, r3
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 800190a:	e0d8      	b.n	8001abe <writeNuevosPuntajes+0x1be>

		if(i>=0 && i<7){

			buff_nuevosPuntajes[i] = Puntajes[0].nombre[k];
 800190c:	4a65      	ldr	r2, [pc, #404]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 800190e:	5c50      	ldrb	r0, [r2, r1]
 8001910:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001914:	446a      	add	r2, sp
 8001916:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 800191a:	3101      	adds	r1, #1
 800191c:	b2c9      	uxtb	r1, r1
			buff_nuevosPuntajes[i] = Puntajes[9].nombre[k];
			k++;
		}


		switch(i){
 800191e:	1fda      	subs	r2, r3, #7
 8001920:	2a52      	cmp	r2, #82	; 0x52
 8001922:	f200 80ca 	bhi.w	8001aba <writeNuevosPuntajes+0x1ba>
 8001926:	e8df f012 	tbh	[pc, r2, lsl #1]
 800192a:	00bf      	.short	0x00bf
 800192c:	00c80183 	.word	0x00c80183
 8001930:	00c800c8 	.word	0x00c800c8
 8001934:	00c800c8 	.word	0x00c800c8
 8001938:	00c800c8 	.word	0x00c800c8
 800193c:	0195018b 	.word	0x0195018b
 8001940:	00c800c8 	.word	0x00c800c8
 8001944:	00c800c8 	.word	0x00c800c8
 8001948:	00c800c8 	.word	0x00c800c8
 800194c:	019d00c8 	.word	0x019d00c8
 8001950:	00c801a7 	.word	0x00c801a7
 8001954:	00c800c8 	.word	0x00c800c8
 8001958:	00c800c8 	.word	0x00c800c8
 800195c:	00c800c8 	.word	0x00c800c8
 8001960:	01b901af 	.word	0x01b901af
 8001964:	00c800c8 	.word	0x00c800c8
 8001968:	00c800c8 	.word	0x00c800c8
 800196c:	00c800c8 	.word	0x00c800c8
 8001970:	01c100c8 	.word	0x01c100c8
 8001974:	00c801cb 	.word	0x00c801cb
 8001978:	00c800c8 	.word	0x00c800c8
 800197c:	00c800c8 	.word	0x00c800c8
 8001980:	00c800c8 	.word	0x00c800c8
 8001984:	01dd01d3 	.word	0x01dd01d3
 8001988:	00c800c8 	.word	0x00c800c8
 800198c:	00c800c8 	.word	0x00c800c8
 8001990:	00c800c8 	.word	0x00c800c8
 8001994:	01e500c8 	.word	0x01e500c8
 8001998:	00c801f0 	.word	0x00c801f0
 800199c:	00c800c8 	.word	0x00c800c8
 80019a0:	00c800c8 	.word	0x00c800c8
 80019a4:	00c800c8 	.word	0x00c800c8
 80019a8:	020401f9 	.word	0x020401f9
 80019ac:	00c800c8 	.word	0x00c800c8
 80019b0:	00c800c8 	.word	0x00c800c8
 80019b4:	00c800c8 	.word	0x00c800c8
 80019b8:	020d00c8 	.word	0x020d00c8
 80019bc:	00c80218 	.word	0x00c80218
 80019c0:	00c800c8 	.word	0x00c800c8
 80019c4:	00c800c8 	.word	0x00c800c8
 80019c8:	00c800c8 	.word	0x00c800c8
 80019cc:	022c0221 	.word	0x022c0221
			buff_nuevosPuntajes[i] = Puntajes[1].nombre[k];
 80019d0:	4a34      	ldr	r2, [pc, #208]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 80019d2:	440a      	add	r2, r1
 80019d4:	7a90      	ldrb	r0, [r2, #10]
 80019d6:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80019da:	446a      	add	r2, sp
 80019dc:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 80019e0:	3101      	adds	r1, #1
 80019e2:	b2c9      	uxtb	r1, r1
 80019e4:	e79b      	b.n	800191e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[2].nombre[k];
 80019e6:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 80019e8:	440a      	add	r2, r1
 80019ea:	7d10      	ldrb	r0, [r2, #20]
 80019ec:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80019f0:	446a      	add	r2, sp
 80019f2:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 80019f6:	3101      	adds	r1, #1
 80019f8:	b2c9      	uxtb	r1, r1
 80019fa:	e790      	b.n	800191e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[3].nombre[k];
 80019fc:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 80019fe:	440a      	add	r2, r1
 8001a00:	7f90      	ldrb	r0, [r2, #30]
 8001a02:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001a06:	446a      	add	r2, sp
 8001a08:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001a0c:	3101      	adds	r1, #1
 8001a0e:	b2c9      	uxtb	r1, r1
 8001a10:	e785      	b.n	800191e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[4].nombre[k];
 8001a12:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 8001a14:	440a      	add	r2, r1
 8001a16:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8001a1a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001a1e:	446a      	add	r2, sp
 8001a20:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001a24:	3101      	adds	r1, #1
 8001a26:	b2c9      	uxtb	r1, r1
 8001a28:	e779      	b.n	800191e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[5].nombre[k];
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 8001a2c:	440a      	add	r2, r1
 8001a2e:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
 8001a32:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001a36:	446a      	add	r2, sp
 8001a38:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001a3c:	3101      	adds	r1, #1
 8001a3e:	b2c9      	uxtb	r1, r1
 8001a40:	e76d      	b.n	800191e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[6].nombre[k];
 8001a42:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 8001a44:	440a      	add	r2, r1
 8001a46:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
 8001a4a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001a4e:	446a      	add	r2, sp
 8001a50:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001a54:	3101      	adds	r1, #1
 8001a56:	b2c9      	uxtb	r1, r1
 8001a58:	e761      	b.n	800191e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[7].nombre[k];
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 8001a5c:	440a      	add	r2, r1
 8001a5e:	f892 0046 	ldrb.w	r0, [r2, #70]	; 0x46
 8001a62:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001a66:	446a      	add	r2, sp
 8001a68:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001a6c:	3101      	adds	r1, #1
 8001a6e:	b2c9      	uxtb	r1, r1
 8001a70:	e755      	b.n	800191e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[8].nombre[k];
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 8001a74:	440a      	add	r2, r1
 8001a76:	f892 0050 	ldrb.w	r0, [r2, #80]	; 0x50
 8001a7a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001a7e:	446a      	add	r2, sp
 8001a80:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001a84:	3101      	adds	r1, #1
 8001a86:	b2c9      	uxtb	r1, r1
 8001a88:	e749      	b.n	800191e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[9].nombre[k];
 8001a8a:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <writeNuevosPuntajes+0x1a4>)
 8001a8c:	440a      	add	r2, r1
 8001a8e:	f892 005a 	ldrb.w	r0, [r2, #90]	; 0x5a
 8001a92:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001a96:	446a      	add	r2, sp
 8001a98:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001a9c:	3101      	adds	r1, #1
 8001a9e:	b2c9      	uxtb	r1, r1
 8001aa0:	e73d      	b.n	800191e <writeNuevosPuntajes+0x1e>
 8001aa2:	bf00      	nop
 8001aa4:	20000ac4 	.word	0x20000ac4


		case 7:
			buff_nuevosPuntajes[i] = Puntajes[0].puntaje >>8;
 8001aa8:	4acc      	ldr	r2, [pc, #816]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001aaa:	8911      	ldrh	r1, [r2, #8]
 8001aac:	0a09      	lsrs	r1, r1, #8
 8001aae:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001ab2:	446a      	add	r2, sp
 8001ab4:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001ab8:	2100      	movs	r1, #0
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 8001aba:	3301      	adds	r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b59      	cmp	r3, #89	; 0x59
 8001ac0:	f200 8168 	bhi.w	8001d94 <writeNuevosPuntajes+0x494>
		if(i>=0 && i<7){
 8001ac4:	2b57      	cmp	r3, #87	; 0x57
 8001ac6:	f63f af2a 	bhi.w	800191e <writeNuevosPuntajes+0x1e>
 8001aca:	a201      	add	r2, pc, #4	; (adr r2, 8001ad0 <writeNuevosPuntajes+0x1d0>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	0800190d 	.word	0x0800190d
 8001ad4:	0800190d 	.word	0x0800190d
 8001ad8:	0800190d 	.word	0x0800190d
 8001adc:	0800190d 	.word	0x0800190d
 8001ae0:	0800190d 	.word	0x0800190d
 8001ae4:	0800190d 	.word	0x0800190d
 8001ae8:	0800190d 	.word	0x0800190d
 8001aec:	0800191f 	.word	0x0800191f
 8001af0:	0800191f 	.word	0x0800191f
 8001af4:	080019d1 	.word	0x080019d1
 8001af8:	080019d1 	.word	0x080019d1
 8001afc:	080019d1 	.word	0x080019d1
 8001b00:	080019d1 	.word	0x080019d1
 8001b04:	080019d1 	.word	0x080019d1
 8001b08:	080019d1 	.word	0x080019d1
 8001b0c:	080019d1 	.word	0x080019d1
 8001b10:	0800191f 	.word	0x0800191f
 8001b14:	0800191f 	.word	0x0800191f
 8001b18:	080019e7 	.word	0x080019e7
 8001b1c:	080019e7 	.word	0x080019e7
 8001b20:	080019e7 	.word	0x080019e7
 8001b24:	080019e7 	.word	0x080019e7
 8001b28:	080019e7 	.word	0x080019e7
 8001b2c:	080019e7 	.word	0x080019e7
 8001b30:	080019e7 	.word	0x080019e7
 8001b34:	0800191f 	.word	0x0800191f
 8001b38:	0800191f 	.word	0x0800191f
 8001b3c:	080019fd 	.word	0x080019fd
 8001b40:	080019fd 	.word	0x080019fd
 8001b44:	080019fd 	.word	0x080019fd
 8001b48:	080019fd 	.word	0x080019fd
 8001b4c:	080019fd 	.word	0x080019fd
 8001b50:	080019fd 	.word	0x080019fd
 8001b54:	080019fd 	.word	0x080019fd
 8001b58:	0800191f 	.word	0x0800191f
 8001b5c:	0800191f 	.word	0x0800191f
 8001b60:	08001a13 	.word	0x08001a13
 8001b64:	08001a13 	.word	0x08001a13
 8001b68:	08001a13 	.word	0x08001a13
 8001b6c:	08001a13 	.word	0x08001a13
 8001b70:	08001a13 	.word	0x08001a13
 8001b74:	08001a13 	.word	0x08001a13
 8001b78:	08001a13 	.word	0x08001a13
 8001b7c:	0800191f 	.word	0x0800191f
 8001b80:	0800191f 	.word	0x0800191f
 8001b84:	08001a2b 	.word	0x08001a2b
 8001b88:	08001a2b 	.word	0x08001a2b
 8001b8c:	08001a2b 	.word	0x08001a2b
 8001b90:	08001a2b 	.word	0x08001a2b
 8001b94:	08001a2b 	.word	0x08001a2b
 8001b98:	08001a2b 	.word	0x08001a2b
 8001b9c:	08001a2b 	.word	0x08001a2b
 8001ba0:	0800191f 	.word	0x0800191f
 8001ba4:	0800191f 	.word	0x0800191f
 8001ba8:	08001a43 	.word	0x08001a43
 8001bac:	08001a43 	.word	0x08001a43
 8001bb0:	08001a43 	.word	0x08001a43
 8001bb4:	08001a43 	.word	0x08001a43
 8001bb8:	08001a43 	.word	0x08001a43
 8001bbc:	08001a43 	.word	0x08001a43
 8001bc0:	08001a43 	.word	0x08001a43
 8001bc4:	0800191f 	.word	0x0800191f
 8001bc8:	0800191f 	.word	0x0800191f
 8001bcc:	08001a5b 	.word	0x08001a5b
 8001bd0:	08001a5b 	.word	0x08001a5b
 8001bd4:	08001a5b 	.word	0x08001a5b
 8001bd8:	08001a5b 	.word	0x08001a5b
 8001bdc:	08001a5b 	.word	0x08001a5b
 8001be0:	08001a5b 	.word	0x08001a5b
 8001be4:	08001a5b 	.word	0x08001a5b
 8001be8:	0800191f 	.word	0x0800191f
 8001bec:	0800191f 	.word	0x0800191f
 8001bf0:	08001a73 	.word	0x08001a73
 8001bf4:	08001a73 	.word	0x08001a73
 8001bf8:	08001a73 	.word	0x08001a73
 8001bfc:	08001a73 	.word	0x08001a73
 8001c00:	08001a73 	.word	0x08001a73
 8001c04:	08001a73 	.word	0x08001a73
 8001c08:	08001a73 	.word	0x08001a73
 8001c0c:	0800191f 	.word	0x0800191f
 8001c10:	0800191f 	.word	0x0800191f
 8001c14:	08001a8b 	.word	0x08001a8b
 8001c18:	08001a8b 	.word	0x08001a8b
 8001c1c:	08001a8b 	.word	0x08001a8b
 8001c20:	08001a8b 	.word	0x08001a8b
 8001c24:	08001a8b 	.word	0x08001a8b
 8001c28:	08001a8b 	.word	0x08001a8b
 8001c2c:	08001a8b 	.word	0x08001a8b
			break;
		case 8:
			buff_nuevosPuntajes[i] = Puntajes[0].puntaje & 0xFF;
 8001c30:	4a6a      	ldr	r2, [pc, #424]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001c32:	8910      	ldrh	r0, [r2, #8]
 8001c34:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c38:	446a      	add	r2, sp
 8001c3a:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001c3e:	e73c      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 16:
			buff_nuevosPuntajes[i] = Puntajes[1].puntaje >>8;
 8001c40:	4a66      	ldr	r2, [pc, #408]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001c42:	8a51      	ldrh	r1, [r2, #18]
 8001c44:	0a09      	lsrs	r1, r1, #8
 8001c46:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c4a:	446a      	add	r2, sp
 8001c4c:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001c50:	2100      	movs	r1, #0
			break;
 8001c52:	e732      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 17:
			buff_nuevosPuntajes[i] = Puntajes[1].puntaje & 0xFF;
 8001c54:	4a61      	ldr	r2, [pc, #388]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001c56:	8a50      	ldrh	r0, [r2, #18]
 8001c58:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c5c:	446a      	add	r2, sp
 8001c5e:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001c62:	e72a      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 25:
			buff_nuevosPuntajes[i] = Puntajes[2].puntaje >>8;
 8001c64:	4a5d      	ldr	r2, [pc, #372]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001c66:	8b91      	ldrh	r1, [r2, #28]
 8001c68:	0a09      	lsrs	r1, r1, #8
 8001c6a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c6e:	446a      	add	r2, sp
 8001c70:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001c74:	2100      	movs	r1, #0
			break;
 8001c76:	e720      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 26:
			buff_nuevosPuntajes[i] = Puntajes[2].puntaje & 0xFF;
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001c7a:	8b90      	ldrh	r0, [r2, #28]
 8001c7c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c80:	446a      	add	r2, sp
 8001c82:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001c86:	e718      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 34:
			buff_nuevosPuntajes[i] = Puntajes[3].puntaje >>8;
 8001c88:	4a54      	ldr	r2, [pc, #336]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001c8a:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8001c8c:	0a09      	lsrs	r1, r1, #8
 8001c8e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c92:	446a      	add	r2, sp
 8001c94:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001c98:	2100      	movs	r1, #0
			break;
 8001c9a:	e70e      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 35:
			buff_nuevosPuntajes[i] = Puntajes[3].puntaje & 0xFF;
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001c9e:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8001ca0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001ca4:	446a      	add	r2, sp
 8001ca6:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001caa:	e706      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 43:
			buff_nuevosPuntajes[i] = Puntajes[4].puntaje >>8;
 8001cac:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001cae:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 8001cb0:	0a09      	lsrs	r1, r1, #8
 8001cb2:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001cb6:	446a      	add	r2, sp
 8001cb8:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001cbc:	2100      	movs	r1, #0
			break;
 8001cbe:	e6fc      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 44:
			buff_nuevosPuntajes[i] = Puntajes[4].puntaje & 0xFF;
 8001cc0:	4a46      	ldr	r2, [pc, #280]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001cc2:	8e10      	ldrh	r0, [r2, #48]	; 0x30
 8001cc4:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001cc8:	446a      	add	r2, sp
 8001cca:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001cce:	e6f4      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 52:
			buff_nuevosPuntajes[i] = Puntajes[5].puntaje >>8;
 8001cd0:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001cd2:	8f51      	ldrh	r1, [r2, #58]	; 0x3a
 8001cd4:	0a09      	lsrs	r1, r1, #8
 8001cd6:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001cda:	446a      	add	r2, sp
 8001cdc:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001ce0:	2100      	movs	r1, #0
			break;
 8001ce2:	e6ea      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 53:
			buff_nuevosPuntajes[i] = Puntajes[5].puntaje & 0xFF;
 8001ce4:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001ce6:	8f50      	ldrh	r0, [r2, #58]	; 0x3a
 8001ce8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001cec:	446a      	add	r2, sp
 8001cee:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001cf2:	e6e2      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 61:
			buff_nuevosPuntajes[i] = Puntajes[6].puntaje >>8;
 8001cf4:	4a39      	ldr	r2, [pc, #228]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001cf6:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8001cfa:	0a09      	lsrs	r1, r1, #8
 8001cfc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d00:	446a      	add	r2, sp
 8001d02:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001d06:	2100      	movs	r1, #0
			break;
 8001d08:	e6d7      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 62:
			buff_nuevosPuntajes[i] = Puntajes[6].puntaje & 0xFF;
 8001d0a:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001d0c:	f8b2 0044 	ldrh.w	r0, [r2, #68]	; 0x44
 8001d10:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d14:	446a      	add	r2, sp
 8001d16:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001d1a:	e6ce      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 70:
			buff_nuevosPuntajes[i] = Puntajes[7].puntaje >>8;
 8001d1c:	4a2f      	ldr	r2, [pc, #188]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001d1e:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e
 8001d22:	0a09      	lsrs	r1, r1, #8
 8001d24:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d28:	446a      	add	r2, sp
 8001d2a:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001d2e:	2100      	movs	r1, #0
			break;
 8001d30:	e6c3      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 71:
			buff_nuevosPuntajes[i] = Puntajes[7].puntaje & 0xFF;
 8001d32:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001d34:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 8001d38:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d3c:	446a      	add	r2, sp
 8001d3e:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001d42:	e6ba      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 79:
			buff_nuevosPuntajes[i] = Puntajes[8].puntaje >>8;
 8001d44:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001d46:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8001d4a:	0a09      	lsrs	r1, r1, #8
 8001d4c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d50:	446a      	add	r2, sp
 8001d52:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001d56:	2100      	movs	r1, #0
			break;
 8001d58:	e6af      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 80:
			buff_nuevosPuntajes[i] = Puntajes[8].puntaje & 0xFF;
 8001d5a:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001d5c:	f8b2 0058 	ldrh.w	r0, [r2, #88]	; 0x58
 8001d60:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d64:	446a      	add	r2, sp
 8001d66:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001d6a:	e6a6      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 88:
			buff_nuevosPuntajes[i] = Puntajes[9].puntaje >>8;
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001d6e:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8001d72:	0a09      	lsrs	r1, r1, #8
 8001d74:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d78:	446a      	add	r2, sp
 8001d7a:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001d7e:	2100      	movs	r1, #0
			break;
 8001d80:	e69b      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
		case 89:
			buff_nuevosPuntajes[i] = Puntajes[9].puntaje & 0xFF;
 8001d82:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <writeNuevosPuntajes+0x4dc>)
 8001d84:	f8b2 0062 	ldrh.w	r0, [r2, #98]	; 0x62
 8001d88:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d8c:	446a      	add	r2, sp
 8001d8e:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001d92:	e692      	b.n	8001aba <writeNuevosPuntajes+0x1ba>
	//Ahora sí se realiza la escritura.
	//La escritura se realizará siempre que se realice mas de un cambio en las posiciones de los puntajes.
	//La reescritura de la posicion 5 (getPuntajes(4)) siempre se realizará.


	Write_Enable();
 8001d94:	f7ff fb6c 	bl	8001470 <Write_Enable>
	HAL_Delay(1);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f001 fb51 	bl	8003440 <HAL_Delay>


		if(permutaciones > 0){
 8001d9e:	b1ad      	cbz	r5, 8001dcc <writeNuevosPuntajes+0x4cc>

			address = MEMORIA_ADDRESS;

			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001da0:	2400      	movs	r4, #0
			address = MEMORIA_ADDRESS;
 8001da2:	4625      	mov	r5, r4
 8001da4:	e00e      	b.n	8001dc4 <writeNuevosPuntajes+0x4c4>
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 8001da6:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8001daa:	446b      	add	r3, sp
 8001dac:	f813 1c5c 	ldrb.w	r1, [r3, #-92]
 8001db0:	4628      	mov	r0, r5
 8001db2:	f7ff fb85 	bl	80014c0 <Write_Memoria>
				HAL_Delay(2);
 8001db6:	2002      	movs	r0, #2
 8001db8:	f001 fb42 	bl	8003440 <HAL_Delay>
				address++;
 8001dbc:	3501      	adds	r5, #1
 8001dbe:	b2ad      	uxth	r5, r5
			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001dc0:	3401      	adds	r4, #1
 8001dc2:	b2e4      	uxtb	r4, r4
 8001dc4:	2c59      	cmp	r4, #89	; 0x59
 8001dc6:	d9ee      	bls.n	8001da6 <writeNuevosPuntajes+0x4a6>

			}

		}

}
 8001dc8:	b019      	add	sp, #100	; 0x64
 8001dca:	bd30      	pop	{r4, r5, pc}
			Write_Memoria(address, buff_nuevosPuntajes[OFFSET_ULTIMO_PUNTAJE]);
 8001dcc:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
 8001dd0:	2051      	movs	r0, #81	; 0x51
 8001dd2:	f7ff fb75 	bl	80014c0 <Write_Memoria>
			for(uint8_t i=OFFSET_ULTIMO_PUNTAJE; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001dd6:	2451      	movs	r4, #81	; 0x51
			address = MEMORIA_ADDRESS + OFFSET_ULTIMO_PUNTAJE;
 8001dd8:	4625      	mov	r5, r4
			for(uint8_t i=OFFSET_ULTIMO_PUNTAJE; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001dda:	e010      	b.n	8001dfe <writeNuevosPuntajes+0x4fe>
 8001ddc:	20000ac4 	.word	0x20000ac4
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 8001de0:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8001de4:	446b      	add	r3, sp
 8001de6:	f813 1c5c 	ldrb.w	r1, [r3, #-92]
 8001dea:	4628      	mov	r0, r5
 8001dec:	f7ff fb68 	bl	80014c0 <Write_Memoria>
				HAL_Delay(2);
 8001df0:	2002      	movs	r0, #2
 8001df2:	f001 fb25 	bl	8003440 <HAL_Delay>
				address++;
 8001df6:	3501      	adds	r5, #1
 8001df8:	b2ad      	uxth	r5, r5
			for(uint8_t i=OFFSET_ULTIMO_PUNTAJE; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001dfa:	3401      	adds	r4, #1
 8001dfc:	b2e4      	uxtb	r4, r4
 8001dfe:	2c59      	cmp	r4, #89	; 0x59
 8001e00:	d9ee      	bls.n	8001de0 <writeNuevosPuntajes+0x4e0>
 8001e02:	e7e1      	b.n	8001dc8 <writeNuevosPuntajes+0x4c8>

08001e04 <Ordenamiento_Puntajes>:


//Hay que corregir el ordenamiento de puntajes.

uint8_t Ordenamiento_Puntajes(){
 8001e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e08:	b09f      	sub	sp, #124	; 0x7c
	uint8_t indice_subvector = 1;
	uint16_t auxiliar;


	//Copio los nombres y los puntajes porque voy a reescribir getPuntajes()
	for(uint8_t i=0;i<NUM_MAX_PUNTAJES;i++){
 8001e0a:	2400      	movs	r4, #0
 8001e0c:	e016      	b.n	8001e3c <Ordenamiento_Puntajes+0x38>

		vector[i] = Puntajes[i].puntaje;
 8001e0e:	4943      	ldr	r1, [pc, #268]	; (8001f1c <Ordenamiento_Puntajes+0x118>)
 8001e10:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001e14:	0053      	lsls	r3, r2, #1
 8001e16:	440b      	add	r3, r1
 8001e18:	891a      	ldrh	r2, [r3, #8]
 8001e1a:	ab1e      	add	r3, sp, #120	; 0x78
 8001e1c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001e20:	f823 2c14 	strh.w	r2, [r3, #-20]
		strcpy(buff_nombre[i], Puntajes[i].nombre);
 8001e24:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8001e28:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001e2c:	0053      	lsls	r3, r2, #1
 8001e2e:	4419      	add	r1, r3
 8001e30:	ab07      	add	r3, sp, #28
 8001e32:	4418      	add	r0, r3
 8001e34:	f006 fc23 	bl	800867e <strcpy>
	for(uint8_t i=0;i<NUM_MAX_PUNTAJES;i++){
 8001e38:	3401      	adds	r4, #1
 8001e3a:	b2e4      	uxtb	r4, r4
 8001e3c:	2c09      	cmp	r4, #9
 8001e3e:	d9e6      	bls.n	8001e0e <Ordenamiento_Puntajes+0xa>
	uint8_t indice_subvector = 1;
 8001e40:	2001      	movs	r0, #1
	uint8_t permutaciones = 0;
 8001e42:	f04f 0900 	mov.w	r9, #0
 8001e46:	e021      	b.n	8001e8c <Ordenamiento_Puntajes+0x88>
	}

	//Ordenamiento de mayor a menor xd.
	do{

			for(uint8_t j=indice_subvector; j > 0; j--){
 8001e48:	3c01      	subs	r4, #1
 8001e4a:	b2e4      	uxtb	r4, r4
 8001e4c:	b1d4      	cbz	r4, 8001e84 <Ordenamiento_Puntajes+0x80>

					if(vector[j] > vector[j-1]){
 8001e4e:	ab1e      	add	r3, sp, #120	; 0x78
 8001e50:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001e54:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8001e58:	1e63      	subs	r3, r4, #1
 8001e5a:	aa1e      	add	r2, sp, #120	; 0x78
 8001e5c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001e60:	f832 2c14 	ldrh.w	r2, [r2, #-20]
 8001e64:	4291      	cmp	r1, r2
 8001e66:	d9ef      	bls.n	8001e48 <Ordenamiento_Puntajes+0x44>

						auxiliar = vector[j-1];
						vector[j-1] = vector[j];
 8001e68:	ad1e      	add	r5, sp, #120	; 0x78
 8001e6a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001e6e:	f823 1c14 	strh.w	r1, [r3, #-20]
						vector[j] = auxiliar;
 8001e72:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8001e76:	f823 2c14 	strh.w	r2, [r3, #-20]

						permutaciones++;
 8001e7a:	f109 0901 	add.w	r9, r9, #1
 8001e7e:	fa5f f989 	uxtb.w	r9, r9
 8001e82:	e7e1      	b.n	8001e48 <Ordenamiento_Puntajes+0x44>

					}

			}

		indice_subvector++;
 8001e84:	3001      	adds	r0, #1
 8001e86:	b2c0      	uxtb	r0, r0

	}while(indice_subvector != NUM_MAX_PUNTAJES);
 8001e88:	280a      	cmp	r0, #10
 8001e8a:	d001      	beq.n	8001e90 <Ordenamiento_Puntajes+0x8c>
			for(uint8_t j=indice_subvector; j > 0; j--){
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	e7dd      	b.n	8001e4c <Ordenamiento_Puntajes+0x48>

	uint8_t finalizado;
	char buff_aux[NUM_MAX_POR_NOMBRE];


	for(uint8_t k=0;k<NUM_MAX_PUNTAJES;k++){
 8001e90:	4625      	mov	r5, r4
 8001e92:	9402      	str	r4, [sp, #8]
 8001e94:	f8cd 900c 	str.w	r9, [sp, #12]
 8001e98:	e025      	b.n	8001ee6 <Ordenamiento_Puntajes+0xe2>
			uint8_t j=0;
			do{

				if(Puntajes[j].puntaje == vector[k]){

					strcpy(buff_aux, Puntajes[k].nombre);
 8001e9a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001f1c <Ordenamiento_Puntajes+0x118>
 8001e9e:	00ab      	lsls	r3, r5, #2
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001ea6:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8001eaa:	44c1      	add	r9, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	a805      	add	r0, sp, #20
 8001eb0:	f006 fbe5 	bl	800867e <strcpy>
					strcpy(Puntajes[k].nombre, Puntajes[j].nombre);
 8001eb4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8001eb8:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8001ebc:	44c2      	add	sl, r8
 8001ebe:	4651      	mov	r1, sl
 8001ec0:	4648      	mov	r0, r9
 8001ec2:	f006 fbdc 	bl	800867e <strcpy>
					strcpy(Puntajes[j].nombre, buff_aux);
 8001ec6:	a905      	add	r1, sp, #20
 8001ec8:	4650      	mov	r0, sl
 8001eca:	f006 fbd8 	bl	800867e <strcpy>

					Puntajes[j].puntaje = Puntajes[k].puntaje;
 8001ece:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8001ed2:	f8aa 2008 	strh.w	r2, [sl, #8]
					Puntajes[k].puntaje = vector[k];
 8001ed6:	9b01      	ldr	r3, [sp, #4]
 8001ed8:	442b      	add	r3, r5
 8001eda:	005a      	lsls	r2, r3, #1
 8001edc:	4490      	add	r8, r2
 8001ede:	f8a8 4008 	strh.w	r4, [r8, #8]
	for(uint8_t k=0;k<NUM_MAX_PUNTAJES;k++){
 8001ee2:	3501      	adds	r5, #1
 8001ee4:	b2ed      	uxtb	r5, r5
 8001ee6:	2d09      	cmp	r5, #9
 8001ee8:	d811      	bhi.n	8001f0e <Ordenamiento_Puntajes+0x10a>
			uint8_t j=0;
 8001eea:	9b02      	ldr	r3, [sp, #8]
				if(Puntajes[j].puntaje == vector[k]){
 8001eec:	461f      	mov	r7, r3
 8001eee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001ef2:	0051      	lsls	r1, r2, #1
 8001ef4:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <Ordenamiento_Puntajes+0x118>)
 8001ef6:	440a      	add	r2, r1
 8001ef8:	8912      	ldrh	r2, [r2, #8]
 8001efa:	a91e      	add	r1, sp, #120	; 0x78
 8001efc:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8001f00:	f831 4c14 	ldrh.w	r4, [r1, #-20]
 8001f04:	42a2      	cmp	r2, r4
 8001f06:	d0c8      	beq.n	8001e9a <Ordenamiento_Puntajes+0x96>
					finalizado = false;
				}
				j++;
 8001f08:	3301      	adds	r3, #1
 8001f0a:	b2db      	uxtb	r3, r3

			}while(finalizado);
 8001f0c:	e7ee      	b.n	8001eec <Ordenamiento_Puntajes+0xe8>
	}


	return permutaciones;

}
 8001f0e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001f12:	4648      	mov	r0, r9
 8001f14:	b01f      	add	sp, #124	; 0x7c
 8001f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000ac4 	.word	0x20000ac4

08001f20 <getMenuActual>:

extern musica_t musica;

uint8_t *getMenuActual(){
	return &menu.menuActual;
}
 8001f20:	4800      	ldr	r0, [pc, #0]	; (8001f24 <getMenuActual+0x4>)
 8001f22:	4770      	bx	lr
 8001f24:	20000b28 	.word	0x20000b28

08001f28 <menuInit>:

void menuInit(){
 8001f28:	b508      	push	{r3, lr}

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8001f2a:	f000 ff81 	bl	8002e30 <SSD1306_Init>
	SSD1306_Clear();
 8001f2e:	f000 ff77 	bl	8002e20 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8001f32:	f000 ff51 	bl	8002dd8 <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8001f36:	f7fe f92f 	bl	8000198 <playerInit>
	InvaderInit();
 8001f3a:	f7fe f97f 	bl	800023c <InvaderInit>
	disparoInit();
 8001f3e:	f7fe f9cf 	bl	80002e0 <disparoInit>
	BasesInit();
 8001f42:	f7fe fc63 	bl	800080c <BasesInit>

	//Se inicializan las dificultades
	Dificultad_Init();
 8001f46:	f7fe fc79 	bl	800083c <Dificultad_Init>


	//Se inicializa el cursor de la pantalla principal.
	//menu.menuActual =  guardar_nombre;
	menu.menuActual = menu_principal;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <menuInit+0x3c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
	//menu.menuActual = juego;
	menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001f50:	2126      	movs	r1, #38	; 0x26
 8001f52:	7059      	strb	r1, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001f54:	2109      	movs	r1, #9
 8001f56:	7119      	strb	r1, [r3, #4]
	menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001f58:	211b      	movs	r1, #27
 8001f5a:	7159      	strb	r1, [r3, #5]
	menu.GuardarNombre.indice = 0;
 8001f5c:	735a      	strb	r2, [r3, #13]



	//Para las variables de juego
	menu.juego.flag = 0;
 8001f5e:	f883 2020 	strb.w	r2, [r3, #32]


}
 8001f62:	bd08      	pop	{r3, pc}
 8001f64:	20000b28 	.word	0x20000b28

08001f68 <menuReset>:
	}

}


void menuReset(){
 8001f68:	b508      	push	{r3, lr}

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8001f6a:	f7fe f915 	bl	8000198 <playerInit>
	InvaderInit();
 8001f6e:	f7fe f965 	bl	800023c <InvaderInit>
	disparoInit();
 8001f72:	f7fe f9b5 	bl	80002e0 <disparoInit>
	BasesInit();
 8001f76:	f7fe fc49 	bl	800080c <BasesInit>

	//Se reinician las dificultades al nivel 1
	Dificultad_Init();
 8001f7a:	f7fe fc5f 	bl	800083c <Dificultad_Init>


	//Para las variables de juego
	menu.juego.flag = 0;
 8001f7e:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <menuReset+0x24>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2020 	strb.w	r2, [r3, #32]

	//Se inicializa el cursor de la pantalla principal.
	menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001f86:	2226      	movs	r2, #38	; 0x26
 8001f88:	705a      	strb	r2, [r3, #1]

}
 8001f8a:	bd08      	pop	{r3, pc}
 8001f8c:	20000b28 	.word	0x20000b28

08001f90 <GuardarNombreReset>:


void GuardarNombreReset(){

	//Se inicializa el cursor de la pantalla Guardado de nombre
	menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <GuardarNombreReset+0x20>)
 8001f92:	2209      	movs	r2, #9
 8001f94:	711a      	strb	r2, [r3, #4]
	menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001f96:	221b      	movs	r2, #27
 8001f98:	715a      	strb	r2, [r3, #5]
	menu.GuardarNombre.indice = 0;
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	735a      	strb	r2, [r3, #13]
	strcpy(menu.GuardarNombre.nombre,"      ");
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <GuardarNombreReset+0x24>)
 8001fa0:	6810      	ldr	r0, [r2, #0]
 8001fa2:	f8c3 0006 	str.w	r0, [r3, #6]
 8001fa6:	8891      	ldrh	r1, [r2, #4]
 8001fa8:	7992      	ldrb	r2, [r2, #6]
 8001faa:	8159      	strh	r1, [r3, #10]
 8001fac:	731a      	strb	r2, [r3, #12]

}
 8001fae:	4770      	bx	lr
 8001fb0:	20000b28 	.word	0x20000b28
 8001fb4:	08009c30 	.word	0x08009c30

08001fb8 <menuActualizar>:
void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8001fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fbc:	b096      	sub	sp, #88	; 0x58
 8001fbe:	4607      	mov	r7, r0
 8001fc0:	460e      	mov	r6, r1
 8001fc2:	4690      	mov	r8, r2
	switch(menu.menuActual){
 8001fc4:	4bba      	ldr	r3, [pc, #744]	; (80022b0 <menuActualizar+0x2f8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	f200 827f 	bhi.w	80024cc <menuActualizar+0x514>
 8001fce:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001fd2:	0007      	.short	0x0007
 8001fd4:	00d10048 	.word	0x00d10048
 8001fd8:	01830128 	.word	0x01830128
 8001fdc:	03ba01cb 	.word	0x03ba01cb
		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 8001fe0:	2401      	movs	r4, #1
 8001fe2:	9401      	str	r4, [sp, #4]
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2340      	movs	r3, #64	; 0x40
 8001fea:	4ab2      	ldr	r2, [pc, #712]	; (80022b4 <menuActualizar+0x2fc>)
 8001fec:	2100      	movs	r1, #0
 8001fee:	2023      	movs	r0, #35	; 0x23
 8001ff0:	f000 fbfe 	bl	80027f0 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(45, 35);
 8001ff4:	2123      	movs	r1, #35	; 0x23
 8001ff6:	202d      	movs	r0, #45	; 0x2d
 8001ff8:	f000 fc44 	bl	8002884 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8001ffc:	4dae      	ldr	r5, [pc, #696]	; (80022b8 <menuActualizar+0x300>)
 8001ffe:	4622      	mov	r2, r4
 8002000:	4629      	mov	r1, r5
 8002002:	48ae      	ldr	r0, [pc, #696]	; (80022bc <menuActualizar+0x304>)
 8002004:	f000 fc92 	bl	800292c <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 8002008:	212d      	movs	r1, #45	; 0x2d
 800200a:	4608      	mov	r0, r1
 800200c:	f000 fc3a 	bl	8002884 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8002010:	4622      	mov	r2, r4
 8002012:	4629      	mov	r1, r5
 8002014:	48aa      	ldr	r0, [pc, #680]	; (80022c0 <menuActualizar+0x308>)
 8002016:	f000 fc89 	bl	800292c <SSD1306_Puts>
		if(y == arriba){
 800201a:	b9c6      	cbnz	r6, 800204e <menuActualizar+0x96>
			menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 800201c:	4ba4      	ldr	r3, [pc, #656]	; (80022b0 <menuActualizar+0x2f8>)
 800201e:	2226      	movs	r2, #38	; 0x26
 8002020:	705a      	strb	r2, [r3, #1]
		SSD1306_DrawCircle(POSICION_CURSOR_X, menu.posicion_MenuPrincipal, 3, 1);
 8002022:	2301      	movs	r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	49a2      	ldr	r1, [pc, #648]	; (80022b0 <menuActualizar+0x2f8>)
 8002028:	7849      	ldrb	r1, [r1, #1]
 800202a:	2027      	movs	r0, #39	; 0x27
 800202c:	f000 fd6e 	bl	8002b0c <SSD1306_DrawCircle>
		switch(boton){
 8002030:	f1b8 0f01 	cmp.w	r8, #1
 8002034:	f040 824a 	bne.w	80024cc <menuActualizar+0x514>
			if(menu.posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 8002038:	4b9d      	ldr	r3, [pc, #628]	; (80022b0 <menuActualizar+0x2f8>)
 800203a:	785b      	ldrb	r3, [r3, #1]
 800203c:	2b26      	cmp	r3, #38	; 0x26
 800203e:	d00c      	beq.n	800205a <menuActualizar+0xa2>
			else if(menu.posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8002040:	2b30      	cmp	r3, #48	; 0x30
 8002042:	f040 8243 	bne.w	80024cc <menuActualizar+0x514>
			    menu.menuActual = puntajes;
 8002046:	4b9a      	ldr	r3, [pc, #616]	; (80022b0 <menuActualizar+0x2f8>)
 8002048:	2203      	movs	r2, #3
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e23e      	b.n	80024cc <menuActualizar+0x514>
		else if(y == abajo){
 800204e:	2e01      	cmp	r6, #1
 8002050:	d1e7      	bne.n	8002022 <menuActualizar+0x6a>
			menu.posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 8002052:	4b97      	ldr	r3, [pc, #604]	; (80022b0 <menuActualizar+0x2f8>)
 8002054:	2230      	movs	r2, #48	; 0x30
 8002056:	705a      	strb	r2, [r3, #1]
 8002058:	e7e3      	b.n	8002022 <menuActualizar+0x6a>
				menu.menuActual = juego;
 800205a:	4b95      	ldr	r3, [pc, #596]	; (80022b0 <menuActualizar+0x2f8>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e234      	b.n	80024cc <menuActualizar+0x514>
		uint8_t numero_aliens = getCantidad_Aliens_Vivos();
 8002062:	f7fe f88b 	bl	800017c <getCantidad_Aliens_Vivos>
 8002066:	4605      	mov	r5, r0
		plotBases();
 8002068:	f7fe fba2 	bl	80007b0 <plotBases>
		plotPlayer(x);
 800206c:	4638      	mov	r0, r7
 800206e:	f7fe f8a3 	bl	80001b8 <plotPlayer>
		plotAliens();
 8002072:	f7fe fc2d 	bl	80008d0 <plotAliens>
		disparoAliens();
 8002076:	f7fe fa15 	bl	80004a4 <disparoAliens>
		TickType_t Tiempo_Actual = xTaskGetTickCount();
 800207a:	f005 f8cf 	bl	800721c <xTaskGetTickCount>
 800207e:	4604      	mov	r4, r0
		if(menu.juego.flag == 0){
 8002080:	4b8b      	ldr	r3, [pc, #556]	; (80022b0 <menuActualizar+0x2f8>)
 8002082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002086:	b1d3      	cbz	r3, 80020be <menuActualizar+0x106>
		if(Tiempo_Actual - menu.juego.retrasoJuego_GameOver > pdMS_TO_TICKS(500)){
 8002088:	4b89      	ldr	r3, [pc, #548]	; (80022b0 <menuActualizar+0x2f8>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	1ae4      	subs	r4, r4, r3
 800208e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8002092:	d902      	bls.n	800209a <menuActualizar+0xe2>
			menu.menuActual = game_over;
 8002094:	4b86      	ldr	r3, [pc, #536]	; (80022b0 <menuActualizar+0x2f8>)
 8002096:	2206      	movs	r2, #6
 8002098:	701a      	strb	r2, [r3, #0]
		if( (boton == true) && (getPlayer().vivo == true) && (getDisparodisparo() == false)){
 800209a:	f1b8 0f01 	cmp.w	r8, #1
 800209e:	d031      	beq.n	8002104 <menuActualizar+0x14c>
		disparar();
 80020a0:	f7fe f928 	bl	80002f4 <disparar>
		if(getCantidad_Aliens_Vivos() != numero_aliens && getPlayer().vivo == true){
 80020a4:	f7fe f86a 	bl	800017c <getCantidad_Aliens_Vivos>
 80020a8:	42a8      	cmp	r0, r5
 80020aa:	d14a      	bne.n	8002142 <menuActualizar+0x18a>
		if(getCantidad_Aliens_Vivos() == 0){
 80020ac:	f7fe f866 	bl	800017c <getCantidad_Aliens_Vivos>
 80020b0:	2800      	cmp	r0, #0
 80020b2:	f040 820b 	bne.w	80024cc <menuActualizar+0x514>
			menu.menuActual = progresion_niveles;
 80020b6:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <menuActualizar+0x2f8>)
 80020b8:	2202      	movs	r2, #2
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e206      	b.n	80024cc <menuActualizar+0x514>
			if(getPlayer().vivo == false){
 80020be:	a80a      	add	r0, sp, #40	; 0x28
 80020c0:	f7fe f84c 	bl	800015c <getPlayer>
 80020c4:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80020c8:	b113      	cbz	r3, 80020d0 <menuActualizar+0x118>
				menu.juego.retrasoJuego_GameOver = Tiempo_Actual;
 80020ca:	4b79      	ldr	r3, [pc, #484]	; (80022b0 <menuActualizar+0x2f8>)
 80020cc:	61dc      	str	r4, [r3, #28]
 80020ce:	e7db      	b.n	8002088 <menuActualizar+0xd0>
				menu.juego.retrasoJuego_GameOver = xTaskGetTickCount();
 80020d0:	f005 f8a4 	bl	800721c <xTaskGetTickCount>
 80020d4:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <menuActualizar+0x2f8>)
 80020d6:	61d8      	str	r0, [r3, #28]
				menu.juego.flag = 1;
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2020 	strb.w	r2, [r3, #32]
				musica_t musica_ = gameover_;
 80020de:	2302      	movs	r3, #2
 80020e0:	f88d 301c 	strb.w	r3, [sp, #28]
				osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 80020e4:	2300      	movs	r3, #0
 80020e6:	461a      	mov	r2, r3
 80020e8:	a907      	add	r1, sp, #28
 80020ea:	4876      	ldr	r0, [pc, #472]	; (80022c4 <menuActualizar+0x30c>)
 80020ec:	6800      	ldr	r0, [r0, #0]
 80020ee:	f004 f867 	bl	80061c0 <osMessageQueuePut>
				if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d0c8      	beq.n	8002088 <menuActualizar+0xd0>
 80020f6:	2200      	movs	r2, #0
 80020f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fc:	4872      	ldr	r0, [pc, #456]	; (80022c8 <menuActualizar+0x310>)
 80020fe:	f001 fe0c 	bl	8003d1a <HAL_GPIO_WritePin>
 8002102:	e7c1      	b.n	8002088 <menuActualizar+0xd0>
		if( (boton == true) && (getPlayer().vivo == true) && (getDisparodisparo() == false)){
 8002104:	a80c      	add	r0, sp, #48	; 0x30
 8002106:	f7fe f829 	bl	800015c <getPlayer>
 800210a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800210e:	2b01      	cmp	r3, #1
 8002110:	d1c6      	bne.n	80020a0 <menuActualizar+0xe8>
 8002112:	f7fe f82d 	bl	8000170 <getDisparodisparo>
 8002116:	2800      	cmp	r0, #0
 8002118:	d1c2      	bne.n	80020a0 <menuActualizar+0xe8>
			disparoTrue();
 800211a:	f7fe fcf5 	bl	8000b08 <disparoTrue>
			musica_t musica_ = disparo_;
 800211e:	2200      	movs	r2, #0
 8002120:	f88d 201c 	strb.w	r2, [sp, #28]
			osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8002124:	4613      	mov	r3, r2
 8002126:	a907      	add	r1, sp, #28
 8002128:	4866      	ldr	r0, [pc, #408]	; (80022c4 <menuActualizar+0x30c>)
 800212a:	6800      	ldr	r0, [r0, #0]
 800212c:	f004 f848 	bl	80061c0 <osMessageQueuePut>
			if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002130:	2800      	cmp	r0, #0
 8002132:	d0b5      	beq.n	80020a0 <menuActualizar+0xe8>
 8002134:	2200      	movs	r2, #0
 8002136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213a:	4863      	ldr	r0, [pc, #396]	; (80022c8 <menuActualizar+0x310>)
 800213c:	f001 fded 	bl	8003d1a <HAL_GPIO_WritePin>
 8002140:	e7ae      	b.n	80020a0 <menuActualizar+0xe8>
		if(getCantidad_Aliens_Vivos() != numero_aliens && getPlayer().vivo == true){
 8002142:	a80e      	add	r0, sp, #56	; 0x38
 8002144:	f7fe f80a 	bl	800015c <getPlayer>
 8002148:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800214c:	2b01      	cmp	r3, #1
 800214e:	d1ad      	bne.n	80020ac <menuActualizar+0xf4>
			musica_t musica_ = explosion_;
 8002150:	f88d 301c 	strb.w	r3, [sp, #28]
			osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8002154:	2300      	movs	r3, #0
 8002156:	461a      	mov	r2, r3
 8002158:	a907      	add	r1, sp, #28
 800215a:	485a      	ldr	r0, [pc, #360]	; (80022c4 <menuActualizar+0x30c>)
 800215c:	6800      	ldr	r0, [r0, #0]
 800215e:	f004 f82f 	bl	80061c0 <osMessageQueuePut>
			if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002162:	2800      	cmp	r0, #0
 8002164:	d0a2      	beq.n	80020ac <menuActualizar+0xf4>
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216c:	4856      	ldr	r0, [pc, #344]	; (80022c8 <menuActualizar+0x310>)
 800216e:	f001 fdd4 	bl	8003d1a <HAL_GPIO_WritePin>
 8002172:	e79b      	b.n	80020ac <menuActualizar+0xf4>
		SSD1306_GotoXY(25, 15);
 8002174:	210f      	movs	r1, #15
 8002176:	2019      	movs	r0, #25
 8002178:	f000 fb84 	bl	8002884 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJE: ", &Font_7x10, 1);
 800217c:	4c4e      	ldr	r4, [pc, #312]	; (80022b8 <menuActualizar+0x300>)
 800217e:	2201      	movs	r2, #1
 8002180:	4621      	mov	r1, r4
 8002182:	4852      	ldr	r0, [pc, #328]	; (80022cc <menuActualizar+0x314>)
 8002184:	f000 fbd2 	bl	800292c <SSD1306_Puts>
		SSD1306_GotoXY(25, 35);
 8002188:	2123      	movs	r1, #35	; 0x23
 800218a:	2019      	movs	r0, #25
 800218c:	f000 fb7a 	bl	8002884 <SSD1306_GotoXY>
		SSD1306_Puts("VIDAS", &Font_7x10, 1);
 8002190:	2201      	movs	r2, #1
 8002192:	4621      	mov	r1, r4
 8002194:	484e      	ldr	r0, [pc, #312]	; (80022d0 <menuActualizar+0x318>)
 8002196:	f000 fbc9 	bl	800292c <SSD1306_Puts>
		SSD1306_DrawBitmap(65, 34, vida, 8, 8, 1);
 800219a:	2501      	movs	r5, #1
 800219c:	9501      	str	r5, [sp, #4]
 800219e:	2308      	movs	r3, #8
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <menuActualizar+0x31c>)
 80021a4:	2122      	movs	r1, #34	; 0x22
 80021a6:	2041      	movs	r0, #65	; 0x41
 80021a8:	f000 fb22 	bl	80027f0 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(74, 34);
 80021ac:	2122      	movs	r1, #34	; 0x22
 80021ae:	204a      	movs	r0, #74	; 0x4a
 80021b0:	f000 fb68 	bl	8002884 <SSD1306_GotoXY>
		SSD1306_Putc(':', &Font_7x10, 1);
 80021b4:	462a      	mov	r2, r5
 80021b6:	4621      	mov	r1, r4
 80021b8:	203a      	movs	r0, #58	; 0x3a
 80021ba:	f000 fb69 	bl	8002890 <SSD1306_Putc>
		SSD1306_GotoXY(90, 15);
 80021be:	210f      	movs	r1, #15
 80021c0:	205a      	movs	r0, #90	; 0x5a
 80021c2:	f000 fb5f 	bl	8002884 <SSD1306_GotoXY>
		itoa(getPlayer().puntaje,(char*)buffer_puntaje,10);
 80021c6:	a810      	add	r0, sp, #64	; 0x40
 80021c8:	f7fd ffc8 	bl	800015c <getPlayer>
 80021cc:	220a      	movs	r2, #10
 80021ce:	a907      	add	r1, sp, #28
 80021d0:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 80021d4:	f006 f850 	bl	8008278 <itoa>
		SSD1306_Puts((char *)buffer_puntaje, &Font_7x10, 1);
 80021d8:	462a      	mov	r2, r5
 80021da:	4621      	mov	r1, r4
 80021dc:	a807      	add	r0, sp, #28
 80021de:	f000 fba5 	bl	800292c <SSD1306_Puts>
		SSD1306_GotoXY(90, 34);
 80021e2:	2122      	movs	r1, #34	; 0x22
 80021e4:	205a      	movs	r0, #90	; 0x5a
 80021e6:	f000 fb4d 	bl	8002884 <SSD1306_GotoXY>
		itoa(getPlayer().vidas, &cantidad_vidas,10);
 80021ea:	a812      	add	r0, sp, #72	; 0x48
 80021ec:	f7fd ffb6 	bl	800015c <getPlayer>
 80021f0:	220a      	movs	r2, #10
 80021f2:	a904      	add	r1, sp, #16
 80021f4:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 80021f8:	f006 f83e 	bl	8008278 <itoa>
		SSD1306_Puts(&cantidad_vidas, &Font_7x10, 1);
 80021fc:	462a      	mov	r2, r5
 80021fe:	4621      	mov	r1, r4
 8002200:	a804      	add	r0, sp, #16
 8002202:	f000 fb93 	bl	800292c <SSD1306_Puts>
		if(y == arriba){
 8002206:	2e00      	cmp	r6, #0
 8002208:	f040 8160 	bne.w	80024cc <menuActualizar+0x514>
			AumentoNivel();		//Aqui se reinicializa el player y se aumenta la dificultad del nivel.
 800220c:	f7fe fb22 	bl	8000854 <AumentoNivel>
			InvaderInit();
 8002210:	f7fe f814 	bl	800023c <InvaderInit>
			disparoInit();
 8002214:	f7fe f864 	bl	80002e0 <disparoInit>
			BasesInit();
 8002218:	f7fe faf8 	bl	800080c <BasesInit>
			menu.menuActual = juego;
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <menuActualizar+0x2f8>)
 800221e:	701d      	strb	r5, [r3, #0]
 8002220:	e154      	b.n	80024cc <menuActualizar+0x514>
		SSD1306_GotoXY(35, 0);
 8002222:	2100      	movs	r1, #0
 8002224:	2023      	movs	r0, #35	; 0x23
 8002226:	f000 fb2d 	bl	8002884 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 800222a:	2201      	movs	r2, #1
 800222c:	4922      	ldr	r1, [pc, #136]	; (80022b8 <menuActualizar+0x300>)
 800222e:	4824      	ldr	r0, [pc, #144]	; (80022c0 <menuActualizar+0x308>)
 8002230:	f000 fb7c 	bl	800292c <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8002234:	2400      	movs	r4, #0
 8002236:	e011      	b.n	800225c <menuActualizar+0x2a4>
			posicion = j*10 + 13;
 8002238:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800223c:	0049      	lsls	r1, r1, #1
 800223e:	b2c9      	uxtb	r1, r1
 8002240:	310d      	adds	r1, #13
			SSD1306_GotoXY(15, posicion);
 8002242:	b2c9      	uxtb	r1, r1
 8002244:	200f      	movs	r0, #15
 8002246:	f000 fb1d 	bl	8002884 <SSD1306_GotoXY>
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 800224a:	4620      	mov	r0, r4
 800224c:	f7ff f908 	bl	8001460 <getPuntajes>
 8002250:	2201      	movs	r2, #1
 8002252:	4919      	ldr	r1, [pc, #100]	; (80022b8 <menuActualizar+0x300>)
 8002254:	f000 fb6a 	bl	800292c <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8002258:	3401      	adds	r4, #1
 800225a:	b2e4      	uxtb	r4, r4
 800225c:	2c04      	cmp	r4, #4
 800225e:	d9eb      	bls.n	8002238 <menuActualizar+0x280>
		for(uint8_t j=0; j<5;j++){
 8002260:	2400      	movs	r4, #0
 8002262:	e017      	b.n	8002294 <menuActualizar+0x2dc>
			posicion = j*10 + 13;
 8002264:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002268:	0049      	lsls	r1, r1, #1
 800226a:	b2c9      	uxtb	r1, r1
 800226c:	310d      	adds	r1, #13
			SSD1306_GotoXY(90, posicion);
 800226e:	b2c9      	uxtb	r1, r1
 8002270:	205a      	movs	r0, #90	; 0x5a
 8002272:	f000 fb07 	bl	8002884 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 8002276:	4620      	mov	r0, r4
 8002278:	f7ff f8f2 	bl	8001460 <getPuntajes>
 800227c:	220a      	movs	r2, #10
 800227e:	a907      	add	r1, sp, #28
 8002280:	8900      	ldrh	r0, [r0, #8]
 8002282:	f005 fff9 	bl	8008278 <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 8002286:	2201      	movs	r2, #1
 8002288:	490b      	ldr	r1, [pc, #44]	; (80022b8 <menuActualizar+0x300>)
 800228a:	a807      	add	r0, sp, #28
 800228c:	f000 fb4e 	bl	800292c <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8002290:	3401      	adds	r4, #1
 8002292:	b2e4      	uxtb	r4, r4
 8002294:	2c04      	cmp	r4, #4
 8002296:	d9e5      	bls.n	8002264 <menuActualizar+0x2ac>
		if(y == arriba){
 8002298:	b916      	cbnz	r6, 80022a0 <menuActualizar+0x2e8>
			menu.menuActual = menu_principal;
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <menuActualizar+0x2f8>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
		if(x == derecha){
 80022a0:	2f02      	cmp	r7, #2
 80022a2:	f040 8113 	bne.w	80024cc <menuActualizar+0x514>
			menu.menuActual = puntajes2;
 80022a6:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <menuActualizar+0x2f8>)
 80022a8:	2204      	movs	r2, #4
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e10e      	b.n	80024cc <menuActualizar+0x514>
 80022ae:	bf00      	nop
 80022b0:	20000b28 	.word	0x20000b28
 80022b4:	08009c88 	.word	0x08009c88
 80022b8:	20000000 	.word	0x20000000
 80022bc:	08009c40 	.word	0x08009c40
 80022c0:	08009c48 	.word	0x08009c48
 80022c4:	20000abc 	.word	0x20000abc
 80022c8:	40011000 	.word	0x40011000
 80022cc:	08009c54 	.word	0x08009c54
 80022d0:	08009c60 	.word	0x08009c60
 80022d4:	08009f90 	.word	0x08009f90
	SSD1306_GotoXY(35, 0);
 80022d8:	2100      	movs	r1, #0
 80022da:	2023      	movs	r0, #35	; 0x23
 80022dc:	f000 fad2 	bl	8002884 <SSD1306_GotoXY>
	SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80022e0:	2201      	movs	r2, #1
 80022e2:	49ad      	ldr	r1, [pc, #692]	; (8002598 <menuActualizar+0x5e0>)
 80022e4:	48ad      	ldr	r0, [pc, #692]	; (800259c <menuActualizar+0x5e4>)
 80022e6:	f000 fb21 	bl	800292c <SSD1306_Puts>
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 80022ea:	2405      	movs	r4, #5
	uint8_t k = 0;
 80022ec:	2500      	movs	r5, #0
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 80022ee:	e013      	b.n	8002318 <menuActualizar+0x360>
		posicion_2 = k*10 + 13;
 80022f0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80022f4:	0049      	lsls	r1, r1, #1
 80022f6:	b2c9      	uxtb	r1, r1
 80022f8:	310d      	adds	r1, #13
		SSD1306_GotoXY(15, posicion_2);
 80022fa:	b2c9      	uxtb	r1, r1
 80022fc:	200f      	movs	r0, #15
 80022fe:	f000 fac1 	bl	8002884 <SSD1306_GotoXY>
		SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff f8ac 	bl	8001460 <getPuntajes>
 8002308:	2201      	movs	r2, #1
 800230a:	49a3      	ldr	r1, [pc, #652]	; (8002598 <menuActualizar+0x5e0>)
 800230c:	f000 fb0e 	bl	800292c <SSD1306_Puts>
		k++;
 8002310:	3501      	adds	r5, #1
 8002312:	b2ed      	uxtb	r5, r5
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 8002314:	3401      	adds	r4, #1
 8002316:	b2e4      	uxtb	r4, r4
 8002318:	2c09      	cmp	r4, #9
 800231a:	d9e9      	bls.n	80022f0 <menuActualizar+0x338>
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 800231c:	2405      	movs	r4, #5
	k = 0;
 800231e:	2500      	movs	r5, #0
 8002320:	e019      	b.n	8002356 <menuActualizar+0x39e>
		posicion_2 = k*10 + 13;
 8002322:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002326:	0049      	lsls	r1, r1, #1
 8002328:	b2c9      	uxtb	r1, r1
 800232a:	310d      	adds	r1, #13
		SSD1306_GotoXY(90, posicion_2);
 800232c:	b2c9      	uxtb	r1, r1
 800232e:	205a      	movs	r0, #90	; 0x5a
 8002330:	f000 faa8 	bl	8002884 <SSD1306_GotoXY>
		itoa(getPuntajes(j)->puntaje,(char*)buffer_2,10);
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff f893 	bl	8001460 <getPuntajes>
 800233a:	220a      	movs	r2, #10
 800233c:	a907      	add	r1, sp, #28
 800233e:	8900      	ldrh	r0, [r0, #8]
 8002340:	f005 ff9a 	bl	8008278 <itoa>
		SSD1306_Puts((char *)buffer_2, &Font_7x10, 1);
 8002344:	2201      	movs	r2, #1
 8002346:	4994      	ldr	r1, [pc, #592]	; (8002598 <menuActualizar+0x5e0>)
 8002348:	a807      	add	r0, sp, #28
 800234a:	f000 faef 	bl	800292c <SSD1306_Puts>
		k++;
 800234e:	3501      	adds	r5, #1
 8002350:	b2ed      	uxtb	r5, r5
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 8002352:	3401      	adds	r4, #1
 8002354:	b2e4      	uxtb	r4, r4
 8002356:	2c09      	cmp	r4, #9
 8002358:	d9e3      	bls.n	8002322 <menuActualizar+0x36a>
	if(x == izquierda){
 800235a:	2f03      	cmp	r7, #3
 800235c:	f040 80b6 	bne.w	80024cc <menuActualizar+0x514>
		menu.menuActual = puntajes;
 8002360:	4b8f      	ldr	r3, [pc, #572]	; (80025a0 <menuActualizar+0x5e8>)
 8002362:	2203      	movs	r2, #3
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e0b1      	b.n	80024cc <menuActualizar+0x514>
		char buff_qwerty[] = "qwertyuiop";
 8002368:	4a8e      	ldr	r2, [pc, #568]	; (80025a4 <menuActualizar+0x5ec>)
 800236a:	ab04      	add	r3, sp, #16
 800236c:	ca07      	ldmia	r2, {r0, r1, r2}
 800236e:	c303      	stmia	r3!, {r0, r1}
 8002370:	f823 2b02 	strh.w	r2, [r3], #2
 8002374:	0c12      	lsrs	r2, r2, #16
 8002376:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 8002378:	4a8b      	ldr	r2, [pc, #556]	; (80025a8 <menuActualizar+0x5f0>)
 800237a:	ab07      	add	r3, sp, #28
 800237c:	ca07      	ldmia	r2, {r0, r1, r2}
 800237e:	c303      	stmia	r3!, {r0, r1}
 8002380:	f823 2b02 	strh.w	r2, [r3], #2
 8002384:	0c12      	lsrs	r2, r2, #16
 8002386:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 8002388:	4a88      	ldr	r2, [pc, #544]	; (80025ac <menuActualizar+0x5f4>)
 800238a:	ab02      	add	r3, sp, #8
 800238c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002390:	e883 0003 	stmia.w	r3, {r0, r1}
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8002394:	2301      	movs	r3, #1
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	230f      	movs	r3, #15
 800239a:	223c      	movs	r2, #60	; 0x3c
 800239c:	2100      	movs	r1, #0
 800239e:	201e      	movs	r0, #30
 80023a0:	f000 fb75 	bl	8002a8e <SSD1306_DrawRectangle>
			for(uint8_t i=0;i<10;i++){
 80023a4:	2500      	movs	r5, #0
 80023a6:	e022      	b.n	80023ee <menuActualizar+0x436>
				posicion_x = i*(12) + 6;
 80023a8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80023ac:	00a4      	lsls	r4, r4, #2
 80023ae:	b2e4      	uxtb	r4, r4
 80023b0:	3406      	adds	r4, #6
				SSD1306_GotoXY(posicion_x, 23);
 80023b2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
 80023b6:	2117      	movs	r1, #23
 80023b8:	4620      	mov	r0, r4
 80023ba:	f000 fa63 	bl	8002884 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 80023be:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8002598 <menuActualizar+0x5e0>
 80023c2:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80023c6:	eb0d 0903 	add.w	r9, sp, r3
 80023ca:	2201      	movs	r2, #1
 80023cc:	4651      	mov	r1, sl
 80023ce:	f819 0c48 	ldrb.w	r0, [r9, #-72]
 80023d2:	f000 fa5d 	bl	8002890 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 80023d6:	2126      	movs	r1, #38	; 0x26
 80023d8:	4620      	mov	r0, r4
 80023da:	f000 fa53 	bl	8002884 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 80023de:	2201      	movs	r2, #1
 80023e0:	4651      	mov	r1, sl
 80023e2:	f819 0c3c 	ldrb.w	r0, [r9, #-60]
 80023e6:	f000 fa53 	bl	8002890 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 80023ea:	3501      	adds	r5, #1
 80023ec:	b2ed      	uxtb	r5, r5
 80023ee:	2d09      	cmp	r5, #9
 80023f0:	d9da      	bls.n	80023a8 <menuActualizar+0x3f0>
			for(uint8_t i=0;i<7;i++){
 80023f2:	2400      	movs	r4, #0
 80023f4:	e014      	b.n	8002420 <menuActualizar+0x468>
				posicion_x = i*(12) + 26;
 80023f6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80023fa:	0080      	lsls	r0, r0, #2
 80023fc:	b2c0      	uxtb	r0, r0
 80023fe:	301a      	adds	r0, #26
				SSD1306_GotoXY(posicion_x, 53);
 8002400:	2135      	movs	r1, #53	; 0x35
 8002402:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8002406:	f000 fa3d 	bl	8002884 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 800240a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 800240e:	446b      	add	r3, sp
 8002410:	2201      	movs	r2, #1
 8002412:	4961      	ldr	r1, [pc, #388]	; (8002598 <menuActualizar+0x5e0>)
 8002414:	f813 0c50 	ldrb.w	r0, [r3, #-80]
 8002418:	f000 fa3a 	bl	8002890 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 800241c:	3401      	adds	r4, #1
 800241e:	b2e4      	uxtb	r4, r4
 8002420:	2c06      	cmp	r4, #6
 8002422:	d9e8      	bls.n	80023f6 <menuActualizar+0x43e>
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 8002424:	2401      	movs	r4, #1
 8002426:	9400      	str	r4, [sp, #0]
 8002428:	2310      	movs	r3, #16
 800242a:	461a      	mov	r2, r3
 800242c:	2132      	movs	r1, #50	; 0x32
 800242e:	2003      	movs	r0, #3
 8002430:	f000 fb2d 	bl	8002a8e <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 8002434:	2135      	movs	r1, #53	; 0x35
 8002436:	2008      	movs	r0, #8
 8002438:	f000 fa24 	bl	8002884 <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 800243c:	4d56      	ldr	r5, [pc, #344]	; (8002598 <menuActualizar+0x5e0>)
 800243e:	4622      	mov	r2, r4
 8002440:	4629      	mov	r1, r5
 8002442:	2078      	movs	r0, #120	; 0x78
 8002444:	f000 fa24 	bl	8002890 <SSD1306_Putc>
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 8002448:	9400      	str	r4, [sp, #0]
 800244a:	2310      	movs	r3, #16
 800244c:	461a      	mov	r2, r3
 800244e:	2132      	movs	r1, #50	; 0x32
 8002450:	206c      	movs	r0, #108	; 0x6c
 8002452:	f000 fb1c 	bl	8002a8e <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 8002456:	2135      	movs	r1, #53	; 0x35
 8002458:	2071      	movs	r0, #113	; 0x71
 800245a:	f000 fa13 	bl	8002884 <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 800245e:	4622      	mov	r2, r4
 8002460:	4629      	mov	r1, r5
 8002462:	203c      	movs	r0, #60	; 0x3c
 8002464:	f000 fa14 	bl	8002890 <SSD1306_Putc>
			switch(y){
 8002468:	b39e      	cbz	r6, 80024d2 <menuActualizar+0x51a>
 800246a:	42a6      	cmp	r6, r4
 800246c:	d133      	bne.n	80024d6 <menuActualizar+0x51e>
					mov = abajo;
 800246e:	4634      	mov	r4, r6
			Timenow = xTaskGetTickCount();
 8002470:	f004 fed4 	bl	800721c <xTaskGetTickCount>
			if((Timenow - menu.GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8002474:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <menuActualizar+0x5e8>)
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	1ac0      	subs	r0, r0, r3
 800247a:	2896      	cmp	r0, #150	; 0x96
 800247c:	d901      	bls.n	8002482 <menuActualizar+0x4ca>
 800247e:	2e04      	cmp	r6, #4
 8002480:	d12b      	bne.n	80024da <menuActualizar+0x522>
			Timenow = xTaskGetTickCount();
 8002482:	f004 fecb 	bl	800721c <xTaskGetTickCount>
		if((Timenow - menu.GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 8002486:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <menuActualizar+0x5e8>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	1ac0      	subs	r0, r0, r3
 800248c:	2864      	cmp	r0, #100	; 0x64
 800248e:	d902      	bls.n	8002496 <menuActualizar+0x4de>
 8002490:	2f04      	cmp	r7, #4
 8002492:	f040 808f 	bne.w	80025b4 <menuActualizar+0x5fc>
			Timenow = xTaskGetTickCount();
 8002496:	f004 fec1 	bl	800721c <xTaskGetTickCount>
		if((Timenow - menu.GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <menuActualizar+0x5e8>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	1ac0      	subs	r0, r0, r3
 80024a0:	2864      	cmp	r0, #100	; 0x64
 80024a2:	d903      	bls.n	80024ac <menuActualizar+0x4f4>
 80024a4:	f1b8 0f00 	cmp.w	r8, #0
 80024a8:	f040 80cd 	bne.w	8002646 <menuActualizar+0x68e>
				SSD1306_DrawFilledCircle(menu.GuardarNombre.posicion_x,  menu.GuardarNombre.posicion_y, 5, 1);
 80024ac:	4c3c      	ldr	r4, [pc, #240]	; (80025a0 <menuActualizar+0x5e8>)
 80024ae:	2301      	movs	r3, #1
 80024b0:	2205      	movs	r2, #5
 80024b2:	7961      	ldrb	r1, [r4, #5]
 80024b4:	7920      	ldrb	r0, [r4, #4]
 80024b6:	f000 fbc7 	bl	8002c48 <SSD1306_DrawFilledCircle>
				SSD1306_GotoXY(39, 5);
 80024ba:	2105      	movs	r1, #5
 80024bc:	2027      	movs	r0, #39	; 0x27
 80024be:	f000 f9e1 	bl	8002884 <SSD1306_GotoXY>
				SSD1306_Puts(menu.GuardarNombre.nombre, &Font_7x10, 1);
 80024c2:	2201      	movs	r2, #1
 80024c4:	4934      	ldr	r1, [pc, #208]	; (8002598 <menuActualizar+0x5e0>)
 80024c6:	1da0      	adds	r0, r4, #6
 80024c8:	f000 fa30 	bl	800292c <SSD1306_Puts>
}
 80024cc:	b016      	add	sp, #88	; 0x58
 80024ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d2:	4634      	mov	r4, r6
 80024d4:	e7cc      	b.n	8002470 <menuActualizar+0x4b8>
					mov = x;
 80024d6:	463c      	mov	r4, r7
 80024d8:	e7ca      	b.n	8002470 <menuActualizar+0x4b8>
				menu.GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 80024da:	f004 fe9f 	bl	800721c <xTaskGetTickCount>
 80024de:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <menuActualizar+0x5e8>)
 80024e0:	6158      	str	r0, [r3, #20]
			switch(mov){
 80024e2:	b1cc      	cbz	r4, 8002518 <menuActualizar+0x560>
 80024e4:	2c01      	cmp	r4, #1
 80024e6:	d1cc      	bne.n	8002482 <menuActualizar+0x4ca>
					switch(menu.GuardarNombre.posicion_y){
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <menuActualizar+0x5e8>)
 80024ea:	795b      	ldrb	r3, [r3, #5]
 80024ec:	2b1b      	cmp	r3, #27
 80024ee:	d03e      	beq.n	800256e <menuActualizar+0x5b6>
 80024f0:	2b2a      	cmp	r3, #42	; 0x2a
 80024f2:	d1c6      	bne.n	8002482 <menuActualizar+0x4ca>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 80024f4:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <menuActualizar+0x5e8>)
 80024f6:	2239      	movs	r2, #57	; 0x39
 80024f8:	715a      	strb	r2, [r3, #5]
							div = menu.GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 80024fa:	791b      	ldrb	r3, [r3, #4]
 80024fc:	3b09      	subs	r3, #9
 80024fe:	b25b      	sxtb	r3, r3
							div = div/GUARDADO_OFFSET_X_CURSOR;
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <menuActualizar+0x5f8>)
 8002502:	fb82 1203 	smull	r1, r2, r2, r3
 8002506:	17db      	asrs	r3, r3, #31
 8002508:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 800250c:	b25b      	sxtb	r3, r3
							if(div == 0){
 800250e:	bb93      	cbnz	r3, 8002576 <menuActualizar+0x5be>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <menuActualizar+0x5e8>)
 8002512:	220b      	movs	r2, #11
 8002514:	711a      	strb	r2, [r3, #4]
 8002516:	e7b4      	b.n	8002482 <menuActualizar+0x4ca>
					switch(menu.GuardarNombre.posicion_y){
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <menuActualizar+0x5e8>)
 800251a:	795b      	ldrb	r3, [r3, #5]
 800251c:	2b2a      	cmp	r3, #42	; 0x2a
 800251e:	d01a      	beq.n	8002556 <menuActualizar+0x59e>
 8002520:	2b39      	cmp	r3, #57	; 0x39
 8002522:	d1ae      	bne.n	8002482 <menuActualizar+0x4ca>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <menuActualizar+0x5e8>)
 8002526:	222a      	movs	r2, #42	; 0x2a
 8002528:	715a      	strb	r2, [r3, #5]
							if(menu.GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	2b1b      	cmp	r3, #27
 800252e:	d91a      	bls.n	8002566 <menuActualizar+0x5ae>
								div = menu.GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 8002530:	3b1c      	subs	r3, #28
 8002532:	b25b      	sxtb	r3, r3
								if(div < 0) menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8002534:	2b00      	cmp	r3, #0
 8002536:	db12      	blt.n	800255e <menuActualizar+0x5a6>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <menuActualizar+0x5f8>)
 800253a:	fb82 1203 	smull	r1, r2, r2, r3
 800253e:	17db      	asrs	r3, r3, #31
 8002540:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8002544:	b25b      	sxtb	r3, r3
									 menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 8002546:	3301      	adds	r3, #1
 8002548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	3309      	adds	r3, #9
 8002550:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <menuActualizar+0x5e8>)
 8002552:	7113      	strb	r3, [r2, #4]
 8002554:	e795      	b.n	8002482 <menuActualizar+0x4ca>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <menuActualizar+0x5e8>)
 8002558:	221b      	movs	r2, #27
 800255a:	715a      	strb	r2, [r3, #5]
							break;
 800255c:	e791      	b.n	8002482 <menuActualizar+0x4ca>
								if(div < 0) menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <menuActualizar+0x5e8>)
 8002560:	2209      	movs	r2, #9
 8002562:	711a      	strb	r2, [r3, #4]
 8002564:	e78d      	b.n	8002482 <menuActualizar+0x4ca>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <menuActualizar+0x5e8>)
 8002568:	2209      	movs	r2, #9
 800256a:	711a      	strb	r2, [r3, #4]
 800256c:	e789      	b.n	8002482 <menuActualizar+0x4ca>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <menuActualizar+0x5e8>)
 8002570:	222a      	movs	r2, #42	; 0x2a
 8002572:	715a      	strb	r2, [r3, #5]
							break;
 8002574:	e785      	b.n	8002482 <menuActualizar+0x4ca>
							else if(div == 8 || div == 9){
 8002576:	f1a3 0208 	sub.w	r2, r3, #8
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	2a01      	cmp	r2, #1
 800257e:	d907      	bls.n	8002590 <menuActualizar+0x5d8>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 8002580:	3b01      	subs	r3, #1
 8002582:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	331c      	adds	r3, #28
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <menuActualizar+0x5e8>)
 800258c:	7113      	strb	r3, [r2, #4]
 800258e:	e778      	b.n	8002482 <menuActualizar+0x4ca>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <menuActualizar+0x5e8>)
 8002592:	2274      	movs	r2, #116	; 0x74
 8002594:	711a      	strb	r2, [r3, #4]
 8002596:	e774      	b.n	8002482 <menuActualizar+0x4ca>
 8002598:	20000000 	.word	0x20000000
 800259c:	08009c48 	.word	0x08009c48
 80025a0:	20000b28 	.word	0x20000b28
 80025a4:	08009c68 	.word	0x08009c68
 80025a8:	08009c74 	.word	0x08009c74
 80025ac:	08009c80 	.word	0x08009c80
 80025b0:	2aaaaaab 	.word	0x2aaaaaab
			menu.GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 80025b4:	f004 fe32 	bl	800721c <xTaskGetTickCount>
 80025b8:	4b6c      	ldr	r3, [pc, #432]	; (800276c <menuActualizar+0x7b4>)
 80025ba:	6118      	str	r0, [r3, #16]
			switch(mov){
 80025bc:	2c02      	cmp	r4, #2
 80025be:	d020      	beq.n	8002602 <menuActualizar+0x64a>
 80025c0:	2c03      	cmp	r4, #3
 80025c2:	f47f af68 	bne.w	8002496 <menuActualizar+0x4de>
					menu.GuardarNombre.posicion_x = menu.GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 80025c6:	461a      	mov	r2, r3
 80025c8:	791b      	ldrb	r3, [r3, #4]
 80025ca:	3b0c      	subs	r3, #12
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	7113      	strb	r3, [r2, #4]
					if(menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 80025d0:	7952      	ldrb	r2, [r2, #5]
 80025d2:	2a39      	cmp	r2, #57	; 0x39
 80025d4:	d006      	beq.n	80025e4 <menuActualizar+0x62c>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 80025d6:	2bfd      	cmp	r3, #253	; 0xfd
 80025d8:	f47f af5d 	bne.w	8002496 <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 80025dc:	4b63      	ldr	r3, [pc, #396]	; (800276c <menuActualizar+0x7b4>)
 80025de:	2275      	movs	r2, #117	; 0x75
 80025e0:	711a      	strb	r2, [r3, #4]
 80025e2:	e758      	b.n	8002496 <menuActualizar+0x4de>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR)
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d008      	beq.n	80025fa <menuActualizar+0x642>
								|| menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 80025e8:	2bff      	cmp	r3, #255	; 0xff
 80025ea:	d006      	beq.n	80025fa <menuActualizar+0x642>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 80025ec:	2b68      	cmp	r3, #104	; 0x68
 80025ee:	f47f af52 	bne.w	8002496 <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 80025f2:	4b5e      	ldr	r3, [pc, #376]	; (800276c <menuActualizar+0x7b4>)
 80025f4:	2264      	movs	r2, #100	; 0x64
 80025f6:	711a      	strb	r2, [r3, #4]
 80025f8:	e74d      	b.n	8002496 <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <menuActualizar+0x7b4>)
 80025fc:	220b      	movs	r2, #11
 80025fe:	711a      	strb	r2, [r3, #4]
 8002600:	e749      	b.n	8002496 <menuActualizar+0x4de>
					menu.GuardarNombre.posicion_x = menu.GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 8002602:	4a5a      	ldr	r2, [pc, #360]	; (800276c <menuActualizar+0x7b4>)
 8002604:	7913      	ldrb	r3, [r2, #4]
 8002606:	330c      	adds	r3, #12
 8002608:	b2db      	uxtb	r3, r3
 800260a:	7113      	strb	r3, [r2, #4]
					if(menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 800260c:	7952      	ldrb	r2, [r2, #5]
 800260e:	2a39      	cmp	r2, #57	; 0x39
 8002610:	d006      	beq.n	8002620 <menuActualizar+0x668>
						if(menu.GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 8002612:	2b75      	cmp	r3, #117	; 0x75
 8002614:	f67f af3f 	bls.w	8002496 <menuActualizar+0x4de>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8002618:	4b54      	ldr	r3, [pc, #336]	; (800276c <menuActualizar+0x7b4>)
 800261a:	2209      	movs	r2, #9
 800261c:	711a      	strb	r2, [r3, #4]
 800261e:	e73a      	b.n	8002496 <menuActualizar+0x4de>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 8002620:	2b70      	cmp	r3, #112	; 0x70
 8002622:	d008      	beq.n	8002636 <menuActualizar+0x67e>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d00a      	beq.n	800263e <menuActualizar+0x686>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 8002628:	2b17      	cmp	r3, #23
 800262a:	f47f af34 	bne.w	8002496 <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 800262e:	4b4f      	ldr	r3, [pc, #316]	; (800276c <menuActualizar+0x7b4>)
 8002630:	221c      	movs	r2, #28
 8002632:	711a      	strb	r2, [r3, #4]
 8002634:	e72f      	b.n	8002496 <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8002636:	4b4d      	ldr	r3, [pc, #308]	; (800276c <menuActualizar+0x7b4>)
 8002638:	2274      	movs	r2, #116	; 0x74
 800263a:	711a      	strb	r2, [r3, #4]
 800263c:	e72b      	b.n	8002496 <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 800263e:	4b4b      	ldr	r3, [pc, #300]	; (800276c <menuActualizar+0x7b4>)
 8002640:	220b      	movs	r2, #11
 8002642:	711a      	strb	r2, [r3, #4]
 8002644:	e727      	b.n	8002496 <menuActualizar+0x4de>
			menu.GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 8002646:	f004 fde9 	bl	800721c <xTaskGetTickCount>
 800264a:	4b48      	ldr	r3, [pc, #288]	; (800276c <menuActualizar+0x7b4>)
 800264c:	6198      	str	r0, [r3, #24]
			if((boton == true) && (menu.GuardarNombre.indice <= 6)){
 800264e:	f1b8 0f01 	cmp.w	r8, #1
 8002652:	f47f af2b 	bne.w	80024ac <menuActualizar+0x4f4>
 8002656:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800265a:	2b06      	cmp	r3, #6
 800265c:	f73f af26 	bgt.w	80024ac <menuActualizar+0x4f4>
						if((menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 8002660:	4a42      	ldr	r2, [pc, #264]	; (800276c <menuActualizar+0x7b4>)
 8002662:	7951      	ldrb	r1, [r2, #5]
 8002664:	2939      	cmp	r1, #57	; 0x39
 8002666:	d02f      	beq.n	80026c8 <menuActualizar+0x710>
							div = menu.GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 8002668:	7912      	ldrb	r2, [r2, #4]
 800266a:	3a09      	subs	r2, #9
 800266c:	b252      	sxtb	r2, r2
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 800266e:	4840      	ldr	r0, [pc, #256]	; (8002770 <menuActualizar+0x7b8>)
 8002670:	fb80 4002 	smull	r4, r0, r0, r2
 8002674:	17d2      	asrs	r2, r2, #31
 8002676:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 800267a:	b252      	sxtb	r2, r2
							if((menu.GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 800267c:	291b      	cmp	r1, #27
 800267e:	d00d      	beq.n	800269c <menuActualizar+0x6e4>
							else if((menu.GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 8002680:	292a      	cmp	r1, #42	; 0x2a
 8002682:	d016      	beq.n	80026b2 <menuActualizar+0x6fa>
						if(menu.GuardarNombre.indice > 6){
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <menuActualizar+0x7b4>)
 8002686:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800268a:	2b06      	cmp	r3, #6
 800268c:	f77f af0e 	ble.w	80024ac <menuActualizar+0x4f4>
							menu.GuardarNombre.indice = 6;
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <menuActualizar+0x7b4>)
 8002692:	2206      	movs	r2, #6
 8002694:	735a      	strb	r2, [r3, #13]
							menu.GuardarNombre.nombre[6] = '\0';
 8002696:	2200      	movs	r2, #0
 8002698:	731a      	strb	r2, [r3, #12]
 800269a:	e707      	b.n	80024ac <menuActualizar+0x4f4>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_qwerty[div];
 800269c:	3258      	adds	r2, #88	; 0x58
 800269e:	446a      	add	r2, sp
 80026a0:	f812 0c48 	ldrb.w	r0, [r2, #-72]
 80026a4:	4a31      	ldr	r2, [pc, #196]	; (800276c <menuActualizar+0x7b4>)
 80026a6:	18d1      	adds	r1, r2, r3
 80026a8:	7188      	strb	r0, [r1, #6]
								menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	7353      	strb	r3, [r2, #13]
 80026b0:	e7e8      	b.n	8002684 <menuActualizar+0x6cc>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_asdf[div];
 80026b2:	3258      	adds	r2, #88	; 0x58
 80026b4:	446a      	add	r2, sp
 80026b6:	f812 0c3c 	ldrb.w	r0, [r2, #-60]
 80026ba:	4a2c      	ldr	r2, [pc, #176]	; (800276c <menuActualizar+0x7b4>)
 80026bc:	18d1      	adds	r1, r2, r3
 80026be:	7188      	strb	r0, [r1, #6]
								menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	7353      	strb	r3, [r2, #13]
 80026c6:	e7dd      	b.n	8002684 <menuActualizar+0x6cc>
							div = menu.GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 80026c8:	4a28      	ldr	r2, [pc, #160]	; (800276c <menuActualizar+0x7b4>)
 80026ca:	7912      	ldrb	r2, [r2, #4]
 80026cc:	3a1c      	subs	r2, #28
 80026ce:	b252      	sxtb	r2, r2
							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	db0f      	blt.n	80026f4 <menuActualizar+0x73c>
								div = div / GUARDADO_OFFSET_X_CURSOR;
 80026d4:	210c      	movs	r1, #12
 80026d6:	fb92 f2f1 	sdiv	r2, r2, r1
									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 80026da:	2a07      	cmp	r2, #7
 80026dc:	d01c      	beq.n	8002718 <menuActualizar+0x760>
										menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_zxc[div];
 80026de:	3258      	adds	r2, #88	; 0x58
 80026e0:	446a      	add	r2, sp
 80026e2:	f812 0c50 	ldrb.w	r0, [r2, #-80]
 80026e6:	4a21      	ldr	r2, [pc, #132]	; (800276c <menuActualizar+0x7b4>)
 80026e8:	18d1      	adds	r1, r2, r3
 80026ea:	7188      	strb	r0, [r1, #6]
										menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	7353      	strb	r3, [r2, #13]
 80026f2:	e7c7      	b.n	8002684 <menuActualizar+0x6cc>
								menu.GuardarNombre.indice = menu.GuardarNombre.indice - 1;
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <menuActualizar+0x7b4>)
 80026fc:	7353      	strb	r3, [r2, #13]
								if(menu.GuardarNombre.indice < 0){
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db06      	blt.n	8002710 <menuActualizar+0x758>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = '\0';
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <menuActualizar+0x7b4>)
 8002704:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8002708:	4413      	add	r3, r2
 800270a:	2200      	movs	r2, #0
 800270c:	719a      	strb	r2, [r3, #6]
 800270e:	e7b9      	b.n	8002684 <menuActualizar+0x6cc>
										menu.GuardarNombre.indice = 0;
 8002710:	4613      	mov	r3, r2
 8002712:	2200      	movs	r2, #0
 8002714:	735a      	strb	r2, [r3, #13]
 8002716:	e7f4      	b.n	8002702 <menuActualizar+0x74a>
										if((menu.GuardarNombre.indice != 0 )){
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0b3      	beq.n	8002684 <menuActualizar+0x6cc>
											getPuntajes(9)->puntaje  = getPlayer().puntaje;
 800271c:	a814      	add	r0, sp, #80	; 0x50
 800271e:	f7fd fd1d 	bl	800015c <getPlayer>
 8002722:	2009      	movs	r0, #9
 8002724:	f7fe fe9c 	bl	8001460 <getPuntajes>
 8002728:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800272c:	8103      	strh	r3, [r0, #8]
											strcpy(getPuntajes(9)->nombre,menu.GuardarNombre.nombre);
 800272e:	2009      	movs	r0, #9
 8002730:	f7fe fe96 	bl	8001460 <getPuntajes>
 8002734:	490f      	ldr	r1, [pc, #60]	; (8002774 <menuActualizar+0x7bc>)
 8002736:	f005 ffa2 	bl	800867e <strcpy>
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 800273a:	2101      	movs	r1, #1
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <menuActualizar+0x7c0>)
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	f003 fc54 	bl	8005fec <osEventFlagsSet>
 8002744:	e79e      	b.n	8002684 <menuActualizar+0x6cc>
		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 8002746:	2301      	movs	r3, #1
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2328      	movs	r3, #40	; 0x28
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2364      	movs	r3, #100	; 0x64
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <menuActualizar+0x7c4>)
 8002752:	210a      	movs	r1, #10
 8002754:	200f      	movs	r0, #15
 8002756:	f000 f84b 	bl	80027f0 <SSD1306_DrawBitmap>
		if(y == arriba){
 800275a:	2e00      	cmp	r6, #0
 800275c:	f47f aeb6 	bne.w	80024cc <menuActualizar+0x514>
			GuardarNombreReset();
 8002760:	f7ff fc16 	bl	8001f90 <GuardarNombreReset>
			menu.menuActual = guardar_nombre;
 8002764:	4b01      	ldr	r3, [pc, #4]	; (800276c <menuActualizar+0x7b4>)
 8002766:	2205      	movs	r2, #5
 8002768:	701a      	strb	r2, [r3, #0]
}
 800276a:	e6af      	b.n	80024cc <menuActualizar+0x514>
 800276c:	20000b28 	.word	0x20000b28
 8002770:	2aaaaaab 	.word	0x2aaaaaab
 8002774:	20000b2e 	.word	0x20000b2e
 8002778:	20000ab0 	.word	0x20000ab0
 800277c:	08009d88 	.word	0x08009d88

08002780 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002780:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002782:	b930      	cbnz	r0, 8002792 <SSD1306_Fill+0x12>
 8002784:	2100      	movs	r1, #0
 8002786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800278a:	4803      	ldr	r0, [pc, #12]	; (8002798 <SSD1306_Fill+0x18>)
 800278c:	f005 fefb 	bl	8008586 <memset>
}
 8002790:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002792:	21ff      	movs	r1, #255	; 0xff
 8002794:	e7f7      	b.n	8002786 <SSD1306_Fill+0x6>
 8002796:	bf00      	nop
 8002798:	20000b54 	.word	0x20000b54

0800279c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 800279c:	287f      	cmp	r0, #127	; 0x7f
 800279e:	d816      	bhi.n	80027ce <SSD1306_DrawPixel+0x32>
		x >= SSD1306_WIDTH ||
 80027a0:	293f      	cmp	r1, #63	; 0x3f
 80027a2:	d814      	bhi.n	80027ce <SSD1306_DrawPixel+0x32>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <SSD1306_DrawPixel+0x4c>)
 80027a6:	791b      	ldrb	r3, [r3, #4]
 80027a8:	b113      	cbz	r3, 80027b0 <SSD1306_DrawPixel+0x14>
		color = (SSD1306_COLOR_t)!color;
 80027aa:	fab2 f282 	clz	r2, r2
 80027ae:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80027b0:	2a01      	cmp	r2, #1
 80027b2:	d00d      	beq.n	80027d0 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027b4:	08cb      	lsrs	r3, r1, #3
 80027b6:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80027ba:	f001 0107 	and.w	r1, r1, #7
 80027be:	2301      	movs	r3, #1
 80027c0:	408b      	lsls	r3, r1
 80027c2:	43db      	mvns	r3, r3
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	4909      	ldr	r1, [pc, #36]	; (80027ec <SSD1306_DrawPixel+0x50>)
 80027c8:	5c0a      	ldrb	r2, [r1, r0]
 80027ca:	4013      	ands	r3, r2
 80027cc:	540b      	strb	r3, [r1, r0]
	}
}
 80027ce:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027d0:	08cb      	lsrs	r3, r1, #3
 80027d2:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80027d6:	f001 0107 	and.w	r1, r1, #7
 80027da:	408a      	lsls	r2, r1
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <SSD1306_DrawPixel+0x50>)
 80027de:	5c0b      	ldrb	r3, [r1, r0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	540b      	strb	r3, [r1, r0]
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000b4c 	.word	0x20000b4c
 80027ec:	20000b54 	.word	0x20000b54

080027f0 <SSD1306_DrawBitmap>:
{
 80027f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f4:	b083      	sub	sp, #12
 80027f6:	4683      	mov	fp, r0
 80027f8:	4688      	mov	r8, r1
 80027fa:	4692      	mov	sl, r2
 80027fc:	461e      	mov	r6, r3
 80027fe:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8002808:	9300      	str	r3, [sp, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800280a:	f116 0907 	adds.w	r9, r6, #7
 800280e:	d404      	bmi.n	800281a <SSD1306_DrawBitmap+0x2a>
 8002810:	ea4f 09e9 	mov.w	r9, r9, asr #3
    for(int16_t j=0; j<h; j++, y++)
 8002814:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8002816:	463d      	mov	r5, r7
    for(int16_t j=0; j<h; j++, y++)
 8002818:	e02c      	b.n	8002874 <SSD1306_DrawBitmap+0x84>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800281a:	f109 0907 	add.w	r9, r9, #7
 800281e:	e7f7      	b.n	8002810 <SSD1306_DrawBitmap+0x20>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002820:	fb09 f107 	mul.w	r1, r9, r7
 8002824:	461a      	mov	r2, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	db12      	blt.n	8002850 <SSD1306_DrawBitmap+0x60>
 800282a:	f342 02cf 	sbfx	r2, r2, #3, #16
 800282e:	188b      	adds	r3, r1, r2
 8002830:	f81a 5003 	ldrb.w	r5, [sl, r3]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002834:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002838:	d10c      	bne.n	8002854 <SSD1306_DrawBitmap+0x64>
        for(int16_t i=0; i<w; i++)
 800283a:	3401      	adds	r4, #1
 800283c:	b223      	sxth	r3, r4
 800283e:	42b3      	cmp	r3, r6
 8002840:	da12      	bge.n	8002868 <SSD1306_DrawBitmap+0x78>
            if(i & 7)
 8002842:	b29c      	uxth	r4, r3
 8002844:	f013 0f07 	tst.w	r3, #7
 8002848:	d0ea      	beq.n	8002820 <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 800284a:	006d      	lsls	r5, r5, #1
 800284c:	b2ed      	uxtb	r5, r5
 800284e:	e7f1      	b.n	8002834 <SSD1306_DrawBitmap+0x44>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002850:	1dda      	adds	r2, r3, #7
 8002852:	e7ea      	b.n	800282a <SSD1306_DrawBitmap+0x3a>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002854:	eb04 000b 	add.w	r0, r4, fp
 8002858:	f89d 2000 	ldrb.w	r2, [sp]
 800285c:	fa1f f188 	uxth.w	r1, r8
 8002860:	b280      	uxth	r0, r0
 8002862:	f7ff ff9b 	bl	800279c <SSD1306_DrawPixel>
 8002866:	e7e8      	b.n	800283a <SSD1306_DrawBitmap+0x4a>
    for(int16_t j=0; j<h; j++, y++)
 8002868:	3701      	adds	r7, #1
 800286a:	b23f      	sxth	r7, r7
 800286c:	f108 0801 	add.w	r8, r8, #1
 8002870:	fa0f f888 	sxth.w	r8, r8
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	429f      	cmp	r7, r3
 8002878:	da01      	bge.n	800287e <SSD1306_DrawBitmap+0x8e>
        for(int16_t i=0; i<w; i++)
 800287a:	2300      	movs	r3, #0
 800287c:	e7df      	b.n	800283e <SSD1306_DrawBitmap+0x4e>
}
 800287e:	b003      	add	sp, #12
 8002880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002884 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002884:	4b01      	ldr	r3, [pc, #4]	; (800288c <SSD1306_GotoXY+0x8>)
 8002886:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002888:	8059      	strh	r1, [r3, #2]
}
 800288a:	4770      	bx	lr
 800288c:	20000b4c 	.word	0x20000b4c

08002890 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002894:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <SSD1306_Putc+0x98>)
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	780a      	ldrb	r2, [r1, #0]
 800289c:	4413      	add	r3, r2
	if (
 800289e:	2b7f      	cmp	r3, #127	; 0x7f
 80028a0:	dc3e      	bgt.n	8002920 <SSD1306_Putc+0x90>
 80028a2:	4681      	mov	r9, r0
 80028a4:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <SSD1306_Putc+0x98>)
 80028a8:	885b      	ldrh	r3, [r3, #2]
 80028aa:	784a      	ldrb	r2, [r1, #1]
 80028ac:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80028ae:	2b3f      	cmp	r3, #63	; 0x3f
 80028b0:	dc38      	bgt.n	8002924 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80028b2:	2600      	movs	r6, #0
 80028b4:	e020      	b.n	80028f8 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <SSD1306_Putc+0x98>)
 80028b8:	8818      	ldrh	r0, [r3, #0]
 80028ba:	8859      	ldrh	r1, [r3, #2]
 80028bc:	4431      	add	r1, r6
 80028be:	4420      	add	r0, r4
 80028c0:	fab8 f288 	clz	r2, r8
 80028c4:	0952      	lsrs	r2, r2, #5
 80028c6:	b289      	uxth	r1, r1
 80028c8:	b280      	uxth	r0, r0
 80028ca:	f7ff ff67 	bl	800279c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80028ce:	3401      	adds	r4, #1
 80028d0:	782b      	ldrb	r3, [r5, #0]
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	d90f      	bls.n	80028f6 <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 80028d6:	fa07 f304 	lsl.w	r3, r7, r4
 80028da:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80028de:	d0ea      	beq.n	80028b6 <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <SSD1306_Putc+0x98>)
 80028e2:	8818      	ldrh	r0, [r3, #0]
 80028e4:	8859      	ldrh	r1, [r3, #2]
 80028e6:	4431      	add	r1, r6
 80028e8:	4420      	add	r0, r4
 80028ea:	4642      	mov	r2, r8
 80028ec:	b289      	uxth	r1, r1
 80028ee:	b280      	uxth	r0, r0
 80028f0:	f7ff ff54 	bl	800279c <SSD1306_DrawPixel>
 80028f4:	e7eb      	b.n	80028ce <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80028f6:	3601      	adds	r6, #1
 80028f8:	786a      	ldrb	r2, [r5, #1]
 80028fa:	42b2      	cmp	r2, r6
 80028fc:	d908      	bls.n	8002910 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80028fe:	6869      	ldr	r1, [r5, #4]
 8002900:	f1a9 0320 	sub.w	r3, r9, #32
 8002904:	fb02 6303 	mla	r3, r2, r3, r6
 8002908:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 800290c:	2400      	movs	r4, #0
 800290e:	e7df      	b.n	80028d0 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002910:	782b      	ldrb	r3, [r5, #0]
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <SSD1306_Putc+0x98>)
 8002914:	8811      	ldrh	r1, [r2, #0]
 8002916:	440b      	add	r3, r1
 8002918:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 800291a:	4648      	mov	r0, r9
}
 800291c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8002920:	2000      	movs	r0, #0
 8002922:	e7fb      	b.n	800291c <SSD1306_Putc+0x8c>
 8002924:	2000      	movs	r0, #0
 8002926:	e7f9      	b.n	800291c <SSD1306_Putc+0x8c>
 8002928:	20000b4c 	.word	0x20000b4c

0800292c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	4604      	mov	r4, r0
 8002930:	460e      	mov	r6, r1
 8002932:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8002934:	e000      	b.n	8002938 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8002936:	3401      	adds	r4, #1
	while (*str) {
 8002938:	7820      	ldrb	r0, [r4, #0]
 800293a:	b138      	cbz	r0, 800294c <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800293c:	462a      	mov	r2, r5
 800293e:	4631      	mov	r1, r6
 8002940:	f7ff ffa6 	bl	8002890 <SSD1306_Putc>
 8002944:	4603      	mov	r3, r0
 8002946:	7820      	ldrb	r0, [r4, #0]
 8002948:	4283      	cmp	r3, r0
 800294a:	d0f4      	beq.n	8002936 <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 800294c:	bd70      	pop	{r4, r5, r6, pc}

0800294e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800294e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002952:	b083      	sub	sp, #12
 8002954:	4604      	mov	r4, r0
 8002956:	460e      	mov	r6, r1
 8002958:	4617      	mov	r7, r2
 800295a:	4698      	mov	r8, r3
 800295c:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002960:	287f      	cmp	r0, #127	; 0x7f
 8002962:	d900      	bls.n	8002966 <SSD1306_DrawLine+0x18>
		x0 = SSD1306_WIDTH - 1;
 8002964:	247f      	movs	r4, #127	; 0x7f
	}
	if (x1 >= SSD1306_WIDTH) {
 8002966:	2f7f      	cmp	r7, #127	; 0x7f
 8002968:	d900      	bls.n	800296c <SSD1306_DrawLine+0x1e>
		x1 = SSD1306_WIDTH - 1;
 800296a:	277f      	movs	r7, #127	; 0x7f
	}
	if (y0 >= SSD1306_HEIGHT) {
 800296c:	2e3f      	cmp	r6, #63	; 0x3f
 800296e:	d900      	bls.n	8002972 <SSD1306_DrawLine+0x24>
		y0 = SSD1306_HEIGHT - 1;
 8002970:	263f      	movs	r6, #63	; 0x3f
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002972:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8002976:	d901      	bls.n	800297c <SSD1306_DrawLine+0x2e>
		y1 = SSD1306_HEIGHT - 1;
 8002978:	f04f 083f 	mov.w	r8, #63	; 0x3f
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800297c:	42bc      	cmp	r4, r7
 800297e:	d220      	bcs.n	80029c2 <SSD1306_DrawLine+0x74>
 8002980:	eba7 0904 	sub.w	r9, r7, r4
 8002984:	fa0f f989 	sxth.w	r9, r9
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002988:	4546      	cmp	r6, r8
 800298a:	d21f      	bcs.n	80029cc <SSD1306_DrawLine+0x7e>
 800298c:	eba8 0a06 	sub.w	sl, r8, r6
 8002990:	fa0f fa8a 	sxth.w	sl, sl
	sx = (x0 < x1) ? 1 : -1; 
 8002994:	42bc      	cmp	r4, r7
 8002996:	d21e      	bcs.n	80029d6 <SSD1306_DrawLine+0x88>
 8002998:	2301      	movs	r3, #1
 800299a:	461a      	mov	r2, r3
	sy = (y0 < y1) ? 1 : -1; 
 800299c:	4546      	cmp	r6, r8
 800299e:	d21e      	bcs.n	80029de <SSD1306_DrawLine+0x90>
 80029a0:	2301      	movs	r3, #1
 80029a2:	9300      	str	r3, [sp, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80029a4:	45d1      	cmp	r9, sl
 80029a6:	dd1e      	ble.n	80029e6 <SSD1306_DrawLine+0x98>
 80029a8:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 80029ac:	106d      	asrs	r5, r5, #1

	if (dx == 0) {
 80029ae:	f1b9 0f00 	cmp.w	r9, #0
 80029b2:	d01e      	beq.n	80029f2 <SSD1306_DrawLine+0xa4>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 80029b4:	f1ba 0f00 	cmp.w	sl, #0
 80029b8:	d034      	beq.n	8002a24 <SSD1306_DrawLine+0xd6>
 80029ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80029be:	4690      	mov	r8, r2
 80029c0:	e054      	b.n	8002a6c <SSD1306_DrawLine+0x11e>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80029c2:	eba4 0907 	sub.w	r9, r4, r7
 80029c6:	fa0f f989 	sxth.w	r9, r9
 80029ca:	e7dd      	b.n	8002988 <SSD1306_DrawLine+0x3a>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80029cc:	eba6 0a08 	sub.w	sl, r6, r8
 80029d0:	fa0f fa8a 	sxth.w	sl, sl
 80029d4:	e7de      	b.n	8002994 <SSD1306_DrawLine+0x46>
	sx = (x0 < x1) ? 1 : -1; 
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	461a      	mov	r2, r3
 80029dc:	e7de      	b.n	800299c <SSD1306_DrawLine+0x4e>
	sy = (y0 < y1) ? 1 : -1; 
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	e7de      	b.n	80029a4 <SSD1306_DrawLine+0x56>
	err = ((dx > dy) ? dx : -dy) / 2; 
 80029e6:	eb0a 75da 	add.w	r5, sl, sl, lsr #31
 80029ea:	106d      	asrs	r5, r5, #1
 80029ec:	426d      	negs	r5, r5
 80029ee:	b22d      	sxth	r5, r5
 80029f0:	e7dd      	b.n	80029ae <SSD1306_DrawLine+0x60>
		if (y1 < y0) {
 80029f2:	4546      	cmp	r6, r8
 80029f4:	d802      	bhi.n	80029fc <SSD1306_DrawLine+0xae>
 80029f6:	4643      	mov	r3, r8
 80029f8:	46b0      	mov	r8, r6
 80029fa:	461e      	mov	r6, r3
		if (x1 < x0) {
 80029fc:	42bc      	cmp	r4, r7
 80029fe:	d800      	bhi.n	8002a02 <SSD1306_DrawLine+0xb4>
 8002a00:	4627      	mov	r7, r4
		for (i = y0; i <= y1; i++) {
 8002a02:	fa0f f888 	sxth.w	r8, r8
 8002a06:	e00a      	b.n	8002a1e <SSD1306_DrawLine+0xd0>
			SSD1306_DrawPixel(x0, i, c);
 8002a08:	fa1f f888 	uxth.w	r8, r8
 8002a0c:	465a      	mov	r2, fp
 8002a0e:	4641      	mov	r1, r8
 8002a10:	4638      	mov	r0, r7
 8002a12:	f7ff fec3 	bl	800279c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002a16:	f108 0801 	add.w	r8, r8, #1
 8002a1a:	fa0f f888 	sxth.w	r8, r8
 8002a1e:	45b0      	cmp	r8, r6
 8002a20:	ddf2      	ble.n	8002a08 <SSD1306_DrawLine+0xba>
 8002a22:	e017      	b.n	8002a54 <SSD1306_DrawLine+0x106>
		if (y1 < y0) {
 8002a24:	4546      	cmp	r6, r8
 8002a26:	d800      	bhi.n	8002a2a <SSD1306_DrawLine+0xdc>
 8002a28:	46b0      	mov	r8, r6
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}
		
		if (x1 < x0) {
 8002a2a:	42bc      	cmp	r4, r7
 8002a2c:	d802      	bhi.n	8002a34 <SSD1306_DrawLine+0xe6>
 8002a2e:	463b      	mov	r3, r7
 8002a30:	4627      	mov	r7, r4
 8002a32:	461c      	mov	r4, r3
			x1 = x0;
			x0 = tmp;
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002a34:	b23f      	sxth	r7, r7
 8002a36:	e007      	b.n	8002a48 <SSD1306_DrawLine+0xfa>
			SSD1306_DrawPixel(i, y0, c);
 8002a38:	b2bf      	uxth	r7, r7
 8002a3a:	465a      	mov	r2, fp
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	4638      	mov	r0, r7
 8002a40:	f7ff feac 	bl	800279c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002a44:	3701      	adds	r7, #1
 8002a46:	b23f      	sxth	r7, r7
 8002a48:	42a7      	cmp	r7, r4
 8002a4a:	ddf5      	ble.n	8002a38 <SSD1306_DrawLine+0xea>
 8002a4c:	e002      	b.n	8002a54 <SSD1306_DrawLine+0x106>
		return;
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
 8002a4e:	9b01      	ldr	r3, [sp, #4]
 8002a50:	429e      	cmp	r6, r3
 8002a52:	d112      	bne.n	8002a7a <SSD1306_DrawLine+0x12c>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8002a54:	b003      	add	sp, #12
 8002a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5a:	462b      	mov	r3, r5
		if (e2 < dy) {
 8002a5c:	4555      	cmp	r5, sl
 8002a5e:	da04      	bge.n	8002a6a <SSD1306_DrawLine+0x11c>
			err += dx;
 8002a60:	444b      	add	r3, r9
 8002a62:	b21b      	sxth	r3, r3
			y0 += sy;
 8002a64:	9a00      	ldr	r2, [sp, #0]
 8002a66:	4416      	add	r6, r2
 8002a68:	b2b6      	uxth	r6, r6
		if (x1 < x0) {
 8002a6a:	461d      	mov	r5, r3
		SSD1306_DrawPixel(x0, y0, c);
 8002a6c:	465a      	mov	r2, fp
 8002a6e:	4631      	mov	r1, r6
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7ff fe93 	bl	800279c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002a76:	42bc      	cmp	r4, r7
 8002a78:	d0e9      	beq.n	8002a4e <SSD1306_DrawLine+0x100>
		if (e2 > -dx) {
 8002a7a:	f1c9 0300 	rsb	r3, r9, #0
 8002a7e:	429d      	cmp	r5, r3
 8002a80:	ddeb      	ble.n	8002a5a <SSD1306_DrawLine+0x10c>
			err -= dy;
 8002a82:	eba5 030a 	sub.w	r3, r5, sl
 8002a86:	b21b      	sxth	r3, r3
			x0 += sx;
 8002a88:	4444      	add	r4, r8
 8002a8a:	b2a4      	uxth	r4, r4
 8002a8c:	e7e6      	b.n	8002a5c <SSD1306_DrawLine+0x10e>

08002a8e <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* Check input parameters */
	if (
 8002a98:	287f      	cmp	r0, #127	; 0x7f
 8002a9a:	d834      	bhi.n	8002b06 <SSD1306_DrawRectangle+0x78>
 8002a9c:	4606      	mov	r6, r0
 8002a9e:	460f      	mov	r7, r1
 8002aa0:	461d      	mov	r5, r3
		x >= SSD1306_WIDTH ||
 8002aa2:	293f      	cmp	r1, #63	; 0x3f
 8002aa4:	d82f      	bhi.n	8002b06 <SSD1306_DrawRectangle+0x78>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002aa6:	1883      	adds	r3, r0, r2
 8002aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8002aaa:	dd02      	ble.n	8002ab2 <SSD1306_DrawRectangle+0x24>
		w = SSD1306_WIDTH - x;
 8002aac:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 8002ab0:	b292      	uxth	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002ab2:	197b      	adds	r3, r7, r5
 8002ab4:	2b3f      	cmp	r3, #63	; 0x3f
 8002ab6:	dd02      	ble.n	8002abe <SSD1306_DrawRectangle+0x30>
		h = SSD1306_HEIGHT - y;
 8002ab8:	f1c7 0540 	rsb	r5, r7, #64	; 0x40
 8002abc:	b2ad      	uxth	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8002abe:	1994      	adds	r4, r2, r6
 8002ac0:	b2a4      	uxth	r4, r4
 8002ac2:	f8cd 8000 	str.w	r8, [sp]
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	4622      	mov	r2, r4
 8002aca:	4639      	mov	r1, r7
 8002acc:	4630      	mov	r0, r6
 8002ace:	f7ff ff3e 	bl	800294e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8002ad2:	443d      	add	r5, r7
 8002ad4:	b2ad      	uxth	r5, r5
 8002ad6:	f8cd 8000 	str.w	r8, [sp]
 8002ada:	462b      	mov	r3, r5
 8002adc:	4622      	mov	r2, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	4630      	mov	r0, r6
 8002ae2:	f7ff ff34 	bl	800294e <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8002ae6:	f8cd 8000 	str.w	r8, [sp]
 8002aea:	462b      	mov	r3, r5
 8002aec:	4632      	mov	r2, r6
 8002aee:	4639      	mov	r1, r7
 8002af0:	4630      	mov	r0, r6
 8002af2:	f7ff ff2c 	bl	800294e <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8002af6:	f8cd 8000 	str.w	r8, [sp]
 8002afa:	462b      	mov	r3, r5
 8002afc:	4622      	mov	r2, r4
 8002afe:	4639      	mov	r1, r7
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff ff24 	bl	800294e <SSD1306_DrawLine>
}
 8002b06:	b002      	add	sp, #8
 8002b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b0c <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b10:	b087      	sub	sp, #28
 8002b12:	9201      	str	r2, [sp, #4]
 8002b14:	461e      	mov	r6, r3
	int16_t f = 1 - r;
 8002b16:	b294      	uxth	r4, r2
 8002b18:	f1c4 0301 	rsb	r3, r4, #1
 8002b1c:	fa0f f983 	sxth.w	r9, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8002b20:	ebc4 33c4 	rsb	r3, r4, r4, lsl #15
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002b2a:	fa1f fb80 	uxth.w	fp, r0
 8002b2e:	fa1f fa81 	uxth.w	sl, r1
 8002b32:	eb04 010a 	add.w	r1, r4, sl
 8002b36:	4632      	mov	r2, r6
 8002b38:	b289      	uxth	r1, r1
 8002b3a:	4658      	mov	r0, fp
 8002b3c:	f7ff fe2e 	bl	800279c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002b40:	ebaa 0104 	sub.w	r1, sl, r4
 8002b44:	4632      	mov	r2, r6
 8002b46:	b289      	uxth	r1, r1
 8002b48:	4658      	mov	r0, fp
 8002b4a:	f7ff fe27 	bl	800279c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002b4e:	eb04 000b 	add.w	r0, r4, fp
 8002b52:	4632      	mov	r2, r6
 8002b54:	4651      	mov	r1, sl
 8002b56:	b280      	uxth	r0, r0
 8002b58:	f7ff fe20 	bl	800279c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002b5c:	ebab 0004 	sub.w	r0, fp, r4
 8002b60:	4632      	mov	r2, r6
 8002b62:	4651      	mov	r1, sl
 8002b64:	b280      	uxth	r0, r0
 8002b66:	f7ff fe19 	bl	800279c <SSD1306_DrawPixel>
	int16_t x = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9302      	str	r3, [sp, #8]
	int16_t ddF_x = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	9303      	str	r3, [sp, #12]

    while (x < y) {
 8002b72:	e05e      	b.n	8002c32 <SSD1306_DrawCircle+0x126>
        if (f >= 0) {
            y--;
 8002b74:	9b01      	ldr	r3, [sp, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b21b      	sxth	r3, r3
 8002b7a:	9301      	str	r3, [sp, #4]
            ddF_y += 2;
 8002b7c:	9a05      	ldr	r2, [sp, #20]
 8002b7e:	3202      	adds	r2, #2
 8002b80:	b293      	uxth	r3, r2
 8002b82:	b212      	sxth	r2, r2
 8002b84:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8002b86:	444b      	add	r3, r9
 8002b88:	fa0f f983 	sxth.w	r9, r3
        }
        x++;
 8002b8c:	9b02      	ldr	r3, [sp, #8]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b29d      	uxth	r5, r3
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	9302      	str	r3, [sp, #8]
        ddF_x += 2;
 8002b96:	9a03      	ldr	r2, [sp, #12]
 8002b98:	3202      	adds	r2, #2
 8002b9a:	b293      	uxth	r3, r2
 8002b9c:	b212      	sxth	r2, r2
 8002b9e:	9203      	str	r2, [sp, #12]
        f += ddF_x;
 8002ba0:	444b      	add	r3, r9
 8002ba2:	fa0f f983 	sxth.w	r9, r3

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8002ba6:	eb0b 0305 	add.w	r3, fp, r5
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8002bb0:	eb0a 0804 	add.w	r8, sl, r4
 8002bb4:	fa1f f888 	uxth.w	r8, r8
 8002bb8:	4632      	mov	r2, r6
 8002bba:	4641      	mov	r1, r8
 8002bbc:	9304      	str	r3, [sp, #16]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fdec 	bl	800279c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002bc4:	ebab 0705 	sub.w	r7, fp, r5
 8002bc8:	b2bf      	uxth	r7, r7
 8002bca:	4632      	mov	r2, r6
 8002bcc:	4641      	mov	r1, r8
 8002bce:	4638      	mov	r0, r7
 8002bd0:	f7ff fde4 	bl	800279c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002bd4:	ebaa 0804 	sub.w	r8, sl, r4
 8002bd8:	fa1f f888 	uxth.w	r8, r8
 8002bdc:	4632      	mov	r2, r6
 8002bde:	4641      	mov	r1, r8
 8002be0:	9804      	ldr	r0, [sp, #16]
 8002be2:	f7ff fddb 	bl	800279c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002be6:	4632      	mov	r2, r6
 8002be8:	4641      	mov	r1, r8
 8002bea:	4638      	mov	r0, r7
 8002bec:	f7ff fdd6 	bl	800279c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002bf0:	eb0b 0704 	add.w	r7, fp, r4
 8002bf4:	b2bf      	uxth	r7, r7
 8002bf6:	eb0a 0805 	add.w	r8, sl, r5
 8002bfa:	fa1f f888 	uxth.w	r8, r8
 8002bfe:	4632      	mov	r2, r6
 8002c00:	4641      	mov	r1, r8
 8002c02:	4638      	mov	r0, r7
 8002c04:	f7ff fdca 	bl	800279c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002c08:	ebab 0404 	sub.w	r4, fp, r4
 8002c0c:	b2a4      	uxth	r4, r4
 8002c0e:	4632      	mov	r2, r6
 8002c10:	4641      	mov	r1, r8
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff fdc2 	bl	800279c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002c18:	ebaa 0505 	sub.w	r5, sl, r5
 8002c1c:	b2ad      	uxth	r5, r5
 8002c1e:	4632      	mov	r2, r6
 8002c20:	4629      	mov	r1, r5
 8002c22:	4638      	mov	r0, r7
 8002c24:	f7ff fdba 	bl	800279c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8002c28:	4632      	mov	r2, r6
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff fdb5 	bl	800279c <SSD1306_DrawPixel>
    while (x < y) {
 8002c32:	9b02      	ldr	r3, [sp, #8]
 8002c34:	9a01      	ldr	r2, [sp, #4]
 8002c36:	4293      	cmp	r3, r2
 8002c38:	da03      	bge.n	8002c42 <SSD1306_DrawCircle+0x136>
        if (f >= 0) {
 8002c3a:	f1b9 0f00 	cmp.w	r9, #0
 8002c3e:	da99      	bge.n	8002b74 <SSD1306_DrawCircle+0x68>
 8002c40:	e7a4      	b.n	8002b8c <SSD1306_DrawCircle+0x80>
    }
}
 8002c42:	b007      	add	sp, #28
 8002c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002c48 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	b087      	sub	sp, #28
 8002c4e:	9202      	str	r2, [sp, #8]
 8002c50:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 8002c52:	b295      	uxth	r5, r2
 8002c54:	f1c5 0401 	rsb	r4, r5, #1
 8002c58:	b224      	sxth	r4, r4
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8002c5a:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002c64:	fa1f fb80 	uxth.w	fp, r0
 8002c68:	b28f      	uxth	r7, r1
 8002c6a:	19e9      	adds	r1, r5, r7
 8002c6c:	4652      	mov	r2, sl
 8002c6e:	b289      	uxth	r1, r1
 8002c70:	4658      	mov	r0, fp
 8002c72:	f7ff fd93 	bl	800279c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002c76:	1b79      	subs	r1, r7, r5
 8002c78:	4652      	mov	r2, sl
 8002c7a:	b289      	uxth	r1, r1
 8002c7c:	4658      	mov	r0, fp
 8002c7e:	f7ff fd8d 	bl	800279c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002c82:	eb05 060b 	add.w	r6, r5, fp
 8002c86:	b2b6      	uxth	r6, r6
 8002c88:	4652      	mov	r2, sl
 8002c8a:	4639      	mov	r1, r7
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f7ff fd85 	bl	800279c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002c92:	ebab 0505 	sub.w	r5, fp, r5
 8002c96:	b2ad      	uxth	r5, r5
 8002c98:	4652      	mov	r2, sl
 8002c9a:	4639      	mov	r1, r7
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f7ff fd7d 	bl	800279c <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002ca2:	f8cd a000 	str.w	sl, [sp]
 8002ca6:	463b      	mov	r3, r7
 8002ca8:	4632      	mov	r2, r6
 8002caa:	4639      	mov	r1, r7
 8002cac:	4628      	mov	r0, r5
 8002cae:	f7ff fe4e 	bl	800294e <SSD1306_DrawLine>
	int16_t x = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9303      	str	r3, [sp, #12]
	int16_t ddF_x = 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	9304      	str	r3, [sp, #16]

    while (x < y) {
 8002cba:	e04b      	b.n	8002d54 <SSD1306_DrawFilledCircle+0x10c>
        if (f >= 0) {
            y--;
 8002cbc:	9b02      	ldr	r3, [sp, #8]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	9302      	str	r3, [sp, #8]
            ddF_y += 2;
 8002cc4:	9a05      	ldr	r2, [sp, #20]
 8002cc6:	3202      	adds	r2, #2
 8002cc8:	b293      	uxth	r3, r2
 8002cca:	b212      	sxth	r2, r2
 8002ccc:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8002cce:	4423      	add	r3, r4
 8002cd0:	b21c      	sxth	r4, r3
        }
        x++;
 8002cd2:	9b03      	ldr	r3, [sp, #12]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b29d      	uxth	r5, r3
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	9303      	str	r3, [sp, #12]
        ddF_x += 2;
 8002cdc:	9a04      	ldr	r2, [sp, #16]
 8002cde:	3202      	adds	r2, #2
 8002ce0:	b293      	uxth	r3, r2
 8002ce2:	b212      	sxth	r2, r2
 8002ce4:	9204      	str	r2, [sp, #16]
        f += ddF_x;
 8002ce6:	4423      	add	r3, r4
 8002ce8:	b21c      	sxth	r4, r3

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002cea:	ebab 0905 	sub.w	r9, fp, r5
 8002cee:	fa1f f989 	uxth.w	r9, r9
 8002cf2:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8002cf6:	19b9      	adds	r1, r7, r6
 8002cf8:	b289      	uxth	r1, r1
 8002cfa:	eb0b 0805 	add.w	r8, fp, r5
 8002cfe:	fa1f f888 	uxth.w	r8, r8
 8002d02:	f8cd a000 	str.w	sl, [sp]
 8002d06:	460b      	mov	r3, r1
 8002d08:	4642      	mov	r2, r8
 8002d0a:	4648      	mov	r0, r9
 8002d0c:	f7ff fe1f 	bl	800294e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002d10:	1bb9      	subs	r1, r7, r6
 8002d12:	b289      	uxth	r1, r1
 8002d14:	f8cd a000 	str.w	sl, [sp]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	464a      	mov	r2, r9
 8002d1c:	4640      	mov	r0, r8
 8002d1e:	f7ff fe16 	bl	800294e <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002d22:	eb0b 0806 	add.w	r8, fp, r6
 8002d26:	fa1f f888 	uxth.w	r8, r8
 8002d2a:	1979      	adds	r1, r7, r5
 8002d2c:	b289      	uxth	r1, r1
 8002d2e:	ebab 0606 	sub.w	r6, fp, r6
 8002d32:	b2b6      	uxth	r6, r6
 8002d34:	f8cd a000 	str.w	sl, [sp]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4632      	mov	r2, r6
 8002d3c:	4640      	mov	r0, r8
 8002d3e:	f7ff fe06 	bl	800294e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002d42:	1b79      	subs	r1, r7, r5
 8002d44:	b289      	uxth	r1, r1
 8002d46:	f8cd a000 	str.w	sl, [sp]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4632      	mov	r2, r6
 8002d4e:	4640      	mov	r0, r8
 8002d50:	f7ff fdfd 	bl	800294e <SSD1306_DrawLine>
    while (x < y) {
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	9a02      	ldr	r2, [sp, #8]
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	da02      	bge.n	8002d62 <SSD1306_DrawFilledCircle+0x11a>
        if (f >= 0) {
 8002d5c:	2c00      	cmp	r4, #0
 8002d5e:	daad      	bge.n	8002cbc <SSD1306_DrawFilledCircle+0x74>
 8002d60:	e7b7      	b.n	8002cd2 <SSD1306_DrawFilledCircle+0x8a>
    }
}
 8002d62:	b007      	add	sp, #28
 8002d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d68 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002d68:	b500      	push	{lr}
 8002d6a:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8002d6c:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8002d70:	f04f 0c00 	mov.w	ip, #0
 8002d74:	e009      	b.n	8002d8a <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8002d76:	f10c 0e01 	add.w	lr, ip, #1
 8002d7a:	f812 100c 	ldrb.w	r1, [r2, ip]
 8002d7e:	f10d 0c08 	add.w	ip, sp, #8
 8002d82:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8002d86:	fa5f fc8e 	uxtb.w	ip, lr
 8002d8a:	fa1f fe8c 	uxth.w	lr, ip
 8002d8e:	459e      	cmp	lr, r3
 8002d90:	d3f1      	bcc.n	8002d76 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002d92:	3301      	adds	r3, #1
 8002d94:	220a      	movs	r2, #10
 8002d96:	9200      	str	r2, [sp, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	aa02      	add	r2, sp, #8
 8002d9c:	4601      	mov	r1, r0
 8002d9e:	4803      	ldr	r0, [pc, #12]	; (8002dac <ssd1306_I2C_WriteMulti+0x44>)
 8002da0:	f001 fa30 	bl	8004204 <HAL_I2C_Master_Transmit>
}
 8002da4:	b043      	add	sp, #268	; 0x10c
 8002da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002daa:	bf00      	nop
 8002dac:	20000970 	.word	0x20000970

08002db0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002db0:	b500      	push	{lr}
 8002db2:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8002db4:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8002db8:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002dbc:	230a      	movs	r3, #10
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	aa03      	add	r2, sp, #12
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <ssd1306_I2C_Write+0x24>)
 8002dc8:	f001 fa1c 	bl	8004204 <HAL_I2C_Master_Transmit>
}
 8002dcc:	b005      	add	sp, #20
 8002dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd2:	bf00      	nop
 8002dd4:	20000970 	.word	0x20000970

08002dd8 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8002dd8:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8002dda:	2400      	movs	r4, #0
 8002ddc:	e01a      	b.n	8002e14 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002dde:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	2100      	movs	r1, #0
 8002de6:	2078      	movs	r0, #120	; 0x78
 8002de8:	f7ff ffe2 	bl	8002db0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002dec:	2200      	movs	r2, #0
 8002dee:	4611      	mov	r1, r2
 8002df0:	2078      	movs	r0, #120	; 0x78
 8002df2:	f7ff ffdd 	bl	8002db0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002df6:	2210      	movs	r2, #16
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2078      	movs	r0, #120	; 0x78
 8002dfc:	f7ff ffd8 	bl	8002db0 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <SSD1306_UpdateScreen+0x44>)
 8002e04:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8002e08:	2140      	movs	r1, #64	; 0x40
 8002e0a:	2078      	movs	r0, #120	; 0x78
 8002e0c:	f7ff ffac 	bl	8002d68 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002e10:	3401      	adds	r4, #1
 8002e12:	b2e4      	uxtb	r4, r4
 8002e14:	2c07      	cmp	r4, #7
 8002e16:	d9e2      	bls.n	8002dde <SSD1306_UpdateScreen+0x6>
}
 8002e18:	bd10      	pop	{r4, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000b54 	.word	0x20000b54

08002e20 <SSD1306_Clear>:
{
 8002e20:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff fcac 	bl	8002780 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002e28:	f7ff ffd6 	bl	8002dd8 <SSD1306_UpdateScreen>
}
 8002e2c:	bd08      	pop	{r3, pc}
	...

08002e30 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002e30:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002e32:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002e36:	2201      	movs	r2, #1
 8002e38:	2178      	movs	r1, #120	; 0x78
 8002e3a:	4855      	ldr	r0, [pc, #340]	; (8002f90 <SSD1306_Init+0x160>)
 8002e3c:	f001 fa9e 	bl	800437c <HAL_I2C_IsDeviceReady>
 8002e40:	2800      	cmp	r0, #0
 8002e42:	f040 80a3 	bne.w	8002f8c <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 8002e46:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002e4a:	e000      	b.n	8002e4e <SSD1306_Init+0x1e>
		p--;
 8002e4c:	3b01      	subs	r3, #1
	while(p>0)
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1fc      	bne.n	8002e4c <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002e52:	22ae      	movs	r2, #174	; 0xae
 8002e54:	2100      	movs	r1, #0
 8002e56:	2078      	movs	r0, #120	; 0x78
 8002e58:	f7ff ffaa 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2078      	movs	r0, #120	; 0x78
 8002e62:	f7ff ffa5 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002e66:	2210      	movs	r2, #16
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2078      	movs	r0, #120	; 0x78
 8002e6c:	f7ff ffa0 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e70:	22b0      	movs	r2, #176	; 0xb0
 8002e72:	2100      	movs	r1, #0
 8002e74:	2078      	movs	r0, #120	; 0x78
 8002e76:	f7ff ff9b 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002e7a:	22c8      	movs	r2, #200	; 0xc8
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2078      	movs	r0, #120	; 0x78
 8002e80:	f7ff ff96 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002e84:	2200      	movs	r2, #0
 8002e86:	4611      	mov	r1, r2
 8002e88:	2078      	movs	r0, #120	; 0x78
 8002e8a:	f7ff ff91 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002e8e:	2210      	movs	r2, #16
 8002e90:	2100      	movs	r1, #0
 8002e92:	2078      	movs	r0, #120	; 0x78
 8002e94:	f7ff ff8c 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002e98:	2240      	movs	r2, #64	; 0x40
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2078      	movs	r0, #120	; 0x78
 8002e9e:	f7ff ff87 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002ea2:	2281      	movs	r2, #129	; 0x81
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2078      	movs	r0, #120	; 0x78
 8002ea8:	f7ff ff82 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002eac:	22ff      	movs	r2, #255	; 0xff
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2078      	movs	r0, #120	; 0x78
 8002eb2:	f7ff ff7d 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002eb6:	22a1      	movs	r2, #161	; 0xa1
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2078      	movs	r0, #120	; 0x78
 8002ebc:	f7ff ff78 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002ec0:	22a6      	movs	r2, #166	; 0xa6
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	2078      	movs	r0, #120	; 0x78
 8002ec6:	f7ff ff73 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002eca:	22a8      	movs	r2, #168	; 0xa8
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2078      	movs	r0, #120	; 0x78
 8002ed0:	f7ff ff6e 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002ed4:	223f      	movs	r2, #63	; 0x3f
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	2078      	movs	r0, #120	; 0x78
 8002eda:	f7ff ff69 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ede:	22a4      	movs	r2, #164	; 0xa4
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2078      	movs	r0, #120	; 0x78
 8002ee4:	f7ff ff64 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002ee8:	22d3      	movs	r2, #211	; 0xd3
 8002eea:	2100      	movs	r1, #0
 8002eec:	2078      	movs	r0, #120	; 0x78
 8002eee:	f7ff ff5f 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	2078      	movs	r0, #120	; 0x78
 8002ef8:	f7ff ff5a 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002efc:	22d5      	movs	r2, #213	; 0xd5
 8002efe:	2100      	movs	r1, #0
 8002f00:	2078      	movs	r0, #120	; 0x78
 8002f02:	f7ff ff55 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002f06:	22f0      	movs	r2, #240	; 0xf0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2078      	movs	r0, #120	; 0x78
 8002f0c:	f7ff ff50 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002f10:	22d9      	movs	r2, #217	; 0xd9
 8002f12:	2100      	movs	r1, #0
 8002f14:	2078      	movs	r0, #120	; 0x78
 8002f16:	f7ff ff4b 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002f1a:	2222      	movs	r2, #34	; 0x22
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2078      	movs	r0, #120	; 0x78
 8002f20:	f7ff ff46 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002f24:	22da      	movs	r2, #218	; 0xda
 8002f26:	2100      	movs	r1, #0
 8002f28:	2078      	movs	r0, #120	; 0x78
 8002f2a:	f7ff ff41 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002f2e:	2212      	movs	r2, #18
 8002f30:	2100      	movs	r1, #0
 8002f32:	2078      	movs	r0, #120	; 0x78
 8002f34:	f7ff ff3c 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002f38:	22db      	movs	r2, #219	; 0xdb
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	2078      	movs	r0, #120	; 0x78
 8002f3e:	f7ff ff37 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002f42:	2220      	movs	r2, #32
 8002f44:	2100      	movs	r1, #0
 8002f46:	2078      	movs	r0, #120	; 0x78
 8002f48:	f7ff ff32 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002f4c:	228d      	movs	r2, #141	; 0x8d
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2078      	movs	r0, #120	; 0x78
 8002f52:	f7ff ff2d 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002f56:	2214      	movs	r2, #20
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2078      	movs	r0, #120	; 0x78
 8002f5c:	f7ff ff28 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002f60:	22af      	movs	r2, #175	; 0xaf
 8002f62:	2100      	movs	r1, #0
 8002f64:	2078      	movs	r0, #120	; 0x78
 8002f66:	f7ff ff23 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002f6a:	222e      	movs	r2, #46	; 0x2e
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2078      	movs	r0, #120	; 0x78
 8002f70:	f7ff ff1e 	bl	8002db0 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff fc03 	bl	8002780 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002f7a:	f7ff ff2d 	bl	8002dd8 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8002f7e:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <SSD1306_Init+0x164>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002f84:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8002f86:	2001      	movs	r0, #1
 8002f88:	7158      	strb	r0, [r3, #5]
}
 8002f8a:	bd08      	pop	{r3, pc}
		return 0;
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	e7fc      	b.n	8002f8a <SSD1306_Init+0x15a>
 8002f90:	20000970 	.word	0x20000970
 8002f94:	20000b4c 	.word	0x20000b4c

08002f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f98:	b500      	push	{lr}
 8002f9a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_MspInit+0x4c>)
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	619a      	str	r2, [r3, #24]
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	f002 0201 	and.w	r2, r2, #1
 8002fac:	9200      	str	r2, [sp, #0]
 8002fae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fb6:	61da      	str	r2, [r3, #28]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	f06f 0001 	mvn.w	r0, #1
 8002fca:	f000 fd47 	bl	8003a5c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fce:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <HAL_MspInit+0x50>)
 8002fd0:	6853      	ldr	r3, [r2, #4]
 8002fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fda:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fdc:	b003      	add	sp, #12
 8002fde:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010000 	.word	0x40010000

08002fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fec:	b500      	push	{lr}
 8002fee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	9305      	str	r3, [sp, #20]
 8002ff6:	9306      	str	r3, [sp, #24]
 8002ff8:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002ffa:	6803      	ldr	r3, [r0, #0]
 8002ffc:	4a20      	ldr	r2, [pc, #128]	; (8003080 <HAL_ADC_MspInit+0x94>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d005      	beq.n	800300e <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003002:	4a20      	ldr	r2, [pc, #128]	; (8003084 <HAL_ADC_MspInit+0x98>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d01e      	beq.n	8003046 <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003008:	b009      	add	sp, #36	; 0x24
 800300a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_ADC_MspInit+0x9c>)
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	619a      	str	r2, [r3, #24]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800301e:	9200      	str	r2, [sp, #0]
 8003020:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	f042 0204 	orr.w	r2, r2, #4
 8003028:	619a      	str	r2, [r3, #24]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003034:	2308      	movs	r3, #8
 8003036:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003038:	2303      	movs	r3, #3
 800303a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303c:	a904      	add	r1, sp, #16
 800303e:	4813      	ldr	r0, [pc, #76]	; (800308c <HAL_ADC_MspInit+0xa0>)
 8003040:	f000 fd52 	bl	8003ae8 <HAL_GPIO_Init>
 8003044:	e7e0      	b.n	8003008 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_ADC_MspInit+0x9c>)
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800304e:	619a      	str	r2, [r3, #24]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003056:	9202      	str	r2, [sp, #8]
 8003058:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	f042 0204 	orr.w	r2, r2, #4
 8003060:	619a      	str	r2, [r3, #24]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	9303      	str	r3, [sp, #12]
 800306a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800306c:	2302      	movs	r3, #2
 800306e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003070:	2303      	movs	r3, #3
 8003072:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003074:	a904      	add	r1, sp, #16
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <HAL_ADC_MspInit+0xa0>)
 8003078:	f000 fd36 	bl	8003ae8 <HAL_GPIO_Init>
}
 800307c:	e7c4      	b.n	8003008 <HAL_ADC_MspInit+0x1c>
 800307e:	bf00      	nop
 8003080:	40012400 	.word	0x40012400
 8003084:	40012800 	.word	0x40012800
 8003088:	40021000 	.word	0x40021000
 800308c:	40010800 	.word	0x40010800

08003090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003090:	b510      	push	{r4, lr}
 8003092:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	2300      	movs	r3, #0
 8003096:	9302      	str	r3, [sp, #8]
 8003098:	9303      	str	r3, [sp, #12]
 800309a:	9304      	str	r3, [sp, #16]
 800309c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800309e:	6802      	ldr	r2, [r0, #0]
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_I2C_MspInit+0x58>)
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030a6:	b006      	add	sp, #24
 80030a8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030aa:	4c10      	ldr	r4, [pc, #64]	; (80030ec <HAL_I2C_MspInit+0x5c>)
 80030ac:	69a3      	ldr	r3, [r4, #24]
 80030ae:	f043 0308 	orr.w	r3, r3, #8
 80030b2:	61a3      	str	r3, [r4, #24]
 80030b4:	69a3      	ldr	r3, [r4, #24]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030be:	23c0      	movs	r3, #192	; 0xc0
 80030c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030c2:	2312      	movs	r3, #18
 80030c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c6:	2303      	movs	r3, #3
 80030c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ca:	a902      	add	r1, sp, #8
 80030cc:	4808      	ldr	r0, [pc, #32]	; (80030f0 <HAL_I2C_MspInit+0x60>)
 80030ce:	f000 fd0b 	bl	8003ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030d2:	69e3      	ldr	r3, [r4, #28]
 80030d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030d8:	61e3      	str	r3, [r4, #28]
 80030da:	69e3      	ldr	r3, [r4, #28]
 80030dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	9b01      	ldr	r3, [sp, #4]
}
 80030e4:	e7df      	b.n	80030a6 <HAL_I2C_MspInit+0x16>
 80030e6:	bf00      	nop
 80030e8:	40005400 	.word	0x40005400
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010c00 	.word	0x40010c00

080030f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030f4:	b510      	push	{r4, lr}
 80030f6:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	2300      	movs	r3, #0
 80030fa:	9302      	str	r3, [sp, #8]
 80030fc:	9303      	str	r3, [sp, #12]
 80030fe:	9304      	str	r3, [sp, #16]
 8003100:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8003102:	6802      	ldr	r2, [r0, #0]
 8003104:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_SPI_MspInit+0x6c>)
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800310a:	b006      	add	sp, #24
 800310c:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800310e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003118:	619a      	str	r2, [r3, #24]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003120:	9200      	str	r2, [sp, #0]
 8003122:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	f042 0204 	orr.w	r2, r2, #4
 800312a:	619a      	str	r2, [r3, #24]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003136:	23a0      	movs	r3, #160	; 0xa0
 8003138:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313e:	2303      	movs	r3, #3
 8003140:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	4c08      	ldr	r4, [pc, #32]	; (8003164 <HAL_SPI_MspInit+0x70>)
 8003144:	a902      	add	r1, sp, #8
 8003146:	4620      	mov	r0, r4
 8003148:	f000 fcce 	bl	8003ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800314c:	2340      	movs	r3, #64	; 0x40
 800314e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003150:	2300      	movs	r3, #0
 8003152:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	a902      	add	r1, sp, #8
 8003158:	4620      	mov	r0, r4
 800315a:	f000 fcc5 	bl	8003ae8 <HAL_GPIO_Init>
}
 800315e:	e7d4      	b.n	800310a <HAL_SPI_MspInit+0x16>
 8003160:	40013000 	.word	0x40013000
 8003164:	40010800 	.word	0x40010800

08003168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003168:	b500      	push	{lr}
 800316a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 800316c:	6803      	ldr	r3, [r0, #0]
 800316e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003172:	d005      	beq.n	8003180 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003174:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <HAL_TIM_Base_MspInit+0x58>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800317a:	b003      	add	sp, #12
 800317c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003180:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	61da      	str	r2, [r3, #28]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	9b00      	ldr	r3, [sp, #0]
 8003196:	e7f0      	b.n	800317a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_TIM_Base_MspInit+0x5c>)
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	f042 0202 	orr.w	r2, r2, #2
 80031a0:	61da      	str	r2, [r3, #28]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2104      	movs	r1, #4
 80031b0:	201d      	movs	r0, #29
 80031b2:	f000 fc53 	bl	8003a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031b6:	201d      	movs	r0, #29
 80031b8:	f000 fc88 	bl	8003acc <HAL_NVIC_EnableIRQ>
}
 80031bc:	e7dd      	b.n	800317a <HAL_TIM_Base_MspInit+0x12>
 80031be:	bf00      	nop
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40021000 	.word	0x40021000

080031c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031c8:	b500      	push	{lr}
 80031ca:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	2300      	movs	r3, #0
 80031ce:	9302      	str	r3, [sp, #8]
 80031d0:	9303      	str	r3, [sp, #12]
 80031d2:	9304      	str	r3, [sp, #16]
 80031d4:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 80031d6:	6803      	ldr	r3, [r0, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d002      	beq.n	80031e4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80031de:	b007      	add	sp, #28
 80031e0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	f042 0204 	orr.w	r2, r2, #4
 80031ee:	619a      	str	r2, [r3, #24]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031fa:	2301      	movs	r3, #1
 80031fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003204:	a902      	add	r1, sp, #8
 8003206:	4802      	ldr	r0, [pc, #8]	; (8003210 <HAL_TIM_MspPostInit+0x48>)
 8003208:	f000 fc6e 	bl	8003ae8 <HAL_GPIO_Init>
}
 800320c:	e7e7      	b.n	80031de <HAL_TIM_MspPostInit+0x16>
 800320e:	bf00      	nop
 8003210:	40010800 	.word	0x40010800

08003214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b530      	push	{r4, r5, lr}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_InitTick+0x8c>)
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	f042 0204 	orr.w	r2, r2, #4
 8003222:	61da      	str	r2, [r3, #28]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800322e:	a902      	add	r1, sp, #8
 8003230:	a803      	add	r0, sp, #12
 8003232:	f001 fc91 	bl	8004b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003236:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003238:	b9cb      	cbnz	r3, 800326e <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800323a:	f001 fc6d 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 800323e:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_InitTick+0x90>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0c9b      	lsrs	r3, r3, #18
 8003248:	3b01      	subs	r3, #1

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800324a:	4817      	ldr	r0, [pc, #92]	; (80032a8 <HAL_InitTick+0x94>)
 800324c:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_InitTick+0x98>)
 800324e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003250:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003254:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003256:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325c:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325e:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003260:	f002 fb58 	bl	8005914 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003264:	4605      	mov	r5, r0
 8003266:	b130      	cbz	r0, 8003276 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8003268:	4628      	mov	r0, r5
 800326a:	b009      	add	sp, #36	; 0x24
 800326c:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800326e:	f001 fc53 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
 8003272:	0043      	lsls	r3, r0, #1
 8003274:	e7e4      	b.n	8003240 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003276:	480c      	ldr	r0, [pc, #48]	; (80032a8 <HAL_InitTick+0x94>)
 8003278:	f002 fa02 	bl	8005680 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800327c:	4605      	mov	r5, r0
 800327e:	2800      	cmp	r0, #0
 8003280:	d1f2      	bne.n	8003268 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003282:	201e      	movs	r0, #30
 8003284:	f000 fc22 	bl	8003acc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003288:	2c0f      	cmp	r4, #15
 800328a:	d901      	bls.n	8003290 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 800328c:	2501      	movs	r5, #1
 800328e:	e7eb      	b.n	8003268 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003290:	2200      	movs	r2, #0
 8003292:	4621      	mov	r1, r4
 8003294:	201e      	movs	r0, #30
 8003296:	f000 fbe1 	bl	8003a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_InitTick+0x9c>)
 800329c:	601c      	str	r4, [r3, #0]
 800329e:	e7e3      	b.n	8003268 <HAL_InitTick+0x54>
 80032a0:	40021000 	.word	0x40021000
 80032a4:	431bde83 	.word	0x431bde83
 80032a8:	20000f54 	.word	0x20000f54
 80032ac:	40000800 	.word	0x40000800
 80032b0:	200007c0 	.word	0x200007c0

080032b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <NMI_Handler>
	...

080032b8 <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    // Leer el registro CFSR para obtener información sobre el fallo
    uint32_t cfsr = SCB->CFSR;
 80032b8:	4b01      	ldr	r3, [pc, #4]	; (80032c0 <HardFault_Handler+0x8>)
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <HardFault_Handler+0x4>
 80032be:	bf00      	nop
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <MemManage_Handler>

080032c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032c6:	e7fe      	b.n	80032c6 <BusFault_Handler>

080032c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <UsageFault_Handler>

080032ca <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ca:	4770      	bx	lr

080032cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032ce:	4802      	ldr	r0, [pc, #8]	; (80032d8 <TIM3_IRQHandler+0xc>)
 80032d0:	f002 fa28 	bl	8005724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032d4:	bd08      	pop	{r3, pc}
 80032d6:	bf00      	nop
 80032d8:	20000a64 	.word	0x20000a64

080032dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80032dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80032de:	4802      	ldr	r0, [pc, #8]	; (80032e8 <TIM4_IRQHandler+0xc>)
 80032e0:	f002 fa20 	bl	8005724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80032e4:	bd08      	pop	{r3, pc}
 80032e6:	bf00      	nop
 80032e8:	20000f54 	.word	0x20000f54

080032ec <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80032ec:	2001      	movs	r0, #1
 80032ee:	4770      	bx	lr

080032f0 <_kill>:

int _kill(int pid, int sig)
{
 80032f0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032f2:	f005 f997 	bl	8008624 <__errno>
 80032f6:	2316      	movs	r3, #22
 80032f8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295
 80032fe:	bd08      	pop	{r3, pc}

08003300 <_exit>:

void _exit (int status)
{
 8003300:	b508      	push	{r3, lr}
  _kill(status, -1);
 8003302:	f04f 31ff 	mov.w	r1, #4294967295
 8003306:	f7ff fff3 	bl	80032f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800330a:	e7fe      	b.n	800330a <_exit+0xa>

0800330c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	460c      	mov	r4, r1
 8003310:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003312:	2500      	movs	r5, #0
 8003314:	e006      	b.n	8003324 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8003316:	f3af 8000 	nop.w
 800331a:	4621      	mov	r1, r4
 800331c:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003320:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8003322:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003324:	42b5      	cmp	r5, r6
 8003326:	dbf6      	blt.n	8003316 <_read+0xa>
  }

  return len;
}
 8003328:	4630      	mov	r0, r6
 800332a:	bd70      	pop	{r4, r5, r6, pc}

0800332c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	460c      	mov	r4, r1
 8003330:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003332:	2500      	movs	r5, #0
 8003334:	e004      	b.n	8003340 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8003336:	f814 0b01 	ldrb.w	r0, [r4], #1
 800333a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333e:	3501      	adds	r5, #1
 8003340:	42b5      	cmp	r5, r6
 8003342:	dbf8      	blt.n	8003336 <_write+0xa>
  }
  return len;
}
 8003344:	4630      	mov	r0, r6
 8003346:	bd70      	pop	{r4, r5, r6, pc}

08003348 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	4770      	bx	lr

0800334e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800334e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003352:	604b      	str	r3, [r1, #4]
  return 0;
}
 8003354:	2000      	movs	r0, #0
 8003356:	4770      	bx	lr

08003358 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003358:	2001      	movs	r0, #1
 800335a:	4770      	bx	lr

0800335c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800335c:	2000      	movs	r0, #0
 800335e:	4770      	bx	lr

08003360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003360:	b510      	push	{r4, lr}
 8003362:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003364:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <_sbrk+0x38>)
 8003366:	490d      	ldr	r1, [pc, #52]	; (800339c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003368:	480d      	ldr	r0, [pc, #52]	; (80033a0 <_sbrk+0x40>)
 800336a:	6800      	ldr	r0, [r0, #0]
 800336c:	b140      	cbz	r0, 8003380 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800336e:	480c      	ldr	r0, [pc, #48]	; (80033a0 <_sbrk+0x40>)
 8003370:	6800      	ldr	r0, [r0, #0]
 8003372:	4403      	add	r3, r0
 8003374:	1a52      	subs	r2, r2, r1
 8003376:	4293      	cmp	r3, r2
 8003378:	d806      	bhi.n	8003388 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <_sbrk+0x40>)
 800337c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800337e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003380:	4807      	ldr	r0, [pc, #28]	; (80033a0 <_sbrk+0x40>)
 8003382:	4c08      	ldr	r4, [pc, #32]	; (80033a4 <_sbrk+0x44>)
 8003384:	6004      	str	r4, [r0, #0]
 8003386:	e7f2      	b.n	800336e <_sbrk+0xe>
    errno = ENOMEM;
 8003388:	f005 f94c 	bl	8008624 <__errno>
 800338c:	230c      	movs	r3, #12
 800338e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	e7f3      	b.n	800337e <_sbrk+0x1e>
 8003396:	bf00      	nop
 8003398:	20005000 	.word	0x20005000
 800339c:	00000400 	.word	0x00000400
 80033a0:	20000f9c 	.word	0x20000f9c
 80033a4:	20002de8 	.word	0x20002de8

080033a8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033a8:	4770      	bx	lr
	...

080033ac <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80033ac:	f7ff fffc 	bl	80033a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033b0:	480b      	ldr	r0, [pc, #44]	; (80033e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033b2:	490c      	ldr	r1, [pc, #48]	; (80033e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033b4:	4a0c      	ldr	r2, [pc, #48]	; (80033e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80033b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b8:	e002      	b.n	80033c0 <LoopCopyDataInit>

080033ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033be:	3304      	adds	r3, #4

080033c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c4:	d3f9      	bcc.n	80033ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80033c8:	4c09      	ldr	r4, [pc, #36]	; (80033f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033cc:	e001      	b.n	80033d2 <LoopFillZerobss>

080033ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033d0:	3204      	adds	r2, #4

080033d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d4:	d3fb      	bcc.n	80033ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033d6:	f005 f92b 	bl	8008630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033da:	f7fd ffd7 	bl	800138c <main>
  bx lr
 80033de:	4770      	bx	lr
  ldr r0, =_sdata
 80033e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e4:	20000824 	.word	0x20000824
  ldr r2, =_sidata
 80033e8:	0800a0fc 	.word	0x0800a0fc
  ldr r2, =_sbss
 80033ec:	20000824 	.word	0x20000824
  ldr r4, =_ebss
 80033f0:	20002de8 	.word	0x20002de8

080033f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033f4:	e7fe      	b.n	80033f4 <ADC1_2_IRQHandler>
	...

080033f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f8:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <HAL_Init+0x20>)
 80033fc:	6813      	ldr	r3, [r2, #0]
 80033fe:	f043 0310 	orr.w	r3, r3, #16
 8003402:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f000 fb17 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	200f      	movs	r0, #15
 800340c:	f7ff ff02 	bl	8003214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7ff fdc2 	bl	8002f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003414:	2000      	movs	r0, #0
 8003416:	bd08      	pop	{r3, pc}
 8003418:	40022000 	.word	0x40022000

0800341c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800341c:	4a03      	ldr	r2, [pc, #12]	; (800342c <HAL_IncTick+0x10>)
 800341e:	6811      	ldr	r1, [r2, #0]
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_IncTick+0x14>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	440b      	add	r3, r1
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000fa0 	.word	0x20000fa0
 8003430:	200007bd 	.word	0x200007bd

08003434 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003434:	4b01      	ldr	r3, [pc, #4]	; (800343c <HAL_GetTick+0x8>)
 8003436:	6818      	ldr	r0, [r3, #0]
}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000fa0 	.word	0x20000fa0

08003440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff fff6 	bl	8003434 <HAL_GetTick>
 8003448:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800344e:	d002      	beq.n	8003456 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_Delay+0x24>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003456:	f7ff ffed 	bl	8003434 <HAL_GetTick>
 800345a:	1b40      	subs	r0, r0, r5
 800345c:	42a0      	cmp	r0, r4
 800345e:	d3fa      	bcc.n	8003456 <HAL_Delay+0x16>
  {
  }
}
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	bf00      	nop
 8003464:	200007bd 	.word	0x200007bd

08003468 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346a:	b083      	sub	sp, #12
 800346c:	4605      	mov	r5, r0
 800346e:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003474:	f7ff ffde 	bl	8003434 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003480:	d123      	bne.n	80034ca <HAL_ADC_PollForConversion+0x62>
 8003482:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	f412 7f80 	tst.w	r2, #256	; 0x100
 800348a:	d103      	bne.n	8003494 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800348e:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8003492:	d029      	beq.n	80034e8 <HAL_ADC_PollForConversion+0x80>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_ADC_PollForConversion+0x170>)
 8003496:	681e      	ldr	r6, [r3, #0]
 8003498:	2002      	movs	r0, #2
 800349a:	f001 fc07 	bl	8004cac <HAL_RCCEx_GetPeriphCLKFreq>
 800349e:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80034a2:	682b      	ldr	r3, [r5, #0]
 80034a4:	6919      	ldr	r1, [r3, #16]
 80034a6:	4a4d      	ldr	r2, [pc, #308]	; (80035dc <HAL_ADC_PollForConversion+0x174>)
 80034a8:	4211      	tst	r1, r2
 80034aa:	d136      	bne.n	800351a <HAL_ADC_PollForConversion+0xb2>
 80034ac:	68d9      	ldr	r1, [r3, #12]
 80034ae:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80034b2:	4211      	tst	r1, r2
 80034b4:	d131      	bne.n	800351a <HAL_ADC_PollForConversion+0xb2>
 80034b6:	6919      	ldr	r1, [r3, #16]
 80034b8:	4a49      	ldr	r2, [pc, #292]	; (80035e0 <HAL_ADC_PollForConversion+0x178>)
 80034ba:	4211      	tst	r1, r2
 80034bc:	d140      	bne.n	8003540 <HAL_ADC_PollForConversion+0xd8>
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	4b48      	ldr	r3, [pc, #288]	; (80035e4 <HAL_ADC_PollForConversion+0x17c>)
 80034c2:	421a      	tst	r2, r3
 80034c4:	d03e      	beq.n	8003544 <HAL_ADC_PollForConversion+0xdc>
 80034c6:	2329      	movs	r3, #41	; 0x29
 80034c8:	e041      	b.n	800354e <HAL_ADC_PollForConversion+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80034cc:	f043 0320 	orr.w	r3, r3, #32
 80034d0:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80034d2:	2300      	movs	r3, #0
 80034d4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80034da:	b003      	add	sp, #12
 80034dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f013 0f02 	tst.w	r3, #2
 80034e6:	d00f      	beq.n	8003508 <HAL_ADC_PollForConversion+0xa0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f013 0f02 	tst.w	r3, #2
 80034f0:	d14f      	bne.n	8003592 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 80034f2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80034f6:	d0f7      	beq.n	80034e8 <HAL_ADC_PollForConversion+0x80>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034f8:	2c00      	cmp	r4, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_ADC_PollForConversion+0x76>
 80034fc:	f7ff ff9a 	bl	8003434 <HAL_GetTick>
 8003500:	1bc3      	subs	r3, r0, r7
 8003502:	42a3      	cmp	r3, r4
 8003504:	d9f0      	bls.n	80034e8 <HAL_ADC_PollForConversion+0x80>
 8003506:	e7ea      	b.n	80034de <HAL_ADC_PollForConversion+0x76>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003508:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800350a:	f043 0304 	orr.w	r3, r3, #4
 800350e:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8003510:	2300      	movs	r3, #0
 8003512:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 8003516:	2003      	movs	r0, #3
 8003518:	e7df      	b.n	80034da <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800351a:	6919      	ldr	r1, [r3, #16]
 800351c:	4a30      	ldr	r2, [pc, #192]	; (80035e0 <HAL_ADC_PollForConversion+0x178>)
 800351e:	4211      	tst	r1, r2
 8003520:	d104      	bne.n	800352c <HAL_ADC_PollForConversion+0xc4>
 8003522:	68d9      	ldr	r1, [r3, #12]
 8003524:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8003528:	4211      	tst	r1, r2
 800352a:	d00d      	beq.n	8003548 <HAL_ADC_PollForConversion+0xe0>
 800352c:	6919      	ldr	r1, [r3, #16]
 800352e:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <HAL_ADC_PollForConversion+0x180>)
 8003530:	400a      	ands	r2, r1
 8003532:	b95a      	cbnz	r2, 800354c <HAL_ADC_PollForConversion+0xe4>
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <HAL_ADC_PollForConversion+0x180>)
 8003538:	4013      	ands	r3, r2
 800353a:	b15b      	cbz	r3, 8003554 <HAL_ADC_PollForConversion+0xec>
 800353c:	23fc      	movs	r3, #252	; 0xfc
 800353e:	e006      	b.n	800354e <HAL_ADC_PollForConversion+0xe6>
 8003540:	2329      	movs	r3, #41	; 0x29
 8003542:	e004      	b.n	800354e <HAL_ADC_PollForConversion+0xe6>
 8003544:	2314      	movs	r3, #20
 8003546:	e002      	b.n	800354e <HAL_ADC_PollForConversion+0xe6>
 8003548:	2354      	movs	r3, #84	; 0x54
 800354a:	e000      	b.n	800354e <HAL_ADC_PollForConversion+0xe6>
 800354c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800354e:	fb03 f606 	mul.w	r6, r3, r6
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003552:	e007      	b.n	8003564 <HAL_ADC_PollForConversion+0xfc>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003554:	2354      	movs	r3, #84	; 0x54
 8003556:	e7fa      	b.n	800354e <HAL_ADC_PollForConversion+0xe6>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003558:	9b01      	ldr	r3, [sp, #4]
 800355a:	42b3      	cmp	r3, r6
 800355c:	d310      	bcc.n	8003580 <HAL_ADC_PollForConversion+0x118>
      Conversion_Timeout_CPU_cycles ++;
 800355e:	9b01      	ldr	r3, [sp, #4]
 8003560:	3301      	adds	r3, #1
 8003562:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003564:	9b01      	ldr	r3, [sp, #4]
 8003566:	42b3      	cmp	r3, r6
 8003568:	d213      	bcs.n	8003592 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 800356a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800356e:	d0f6      	beq.n	800355e <HAL_ADC_PollForConversion+0xf6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003570:	2c00      	cmp	r4, #0
 8003572:	d0f1      	beq.n	8003558 <HAL_ADC_PollForConversion+0xf0>
 8003574:	f7ff ff5e 	bl	8003434 <HAL_GetTick>
 8003578:	1bc0      	subs	r0, r0, r7
 800357a:	42a0      	cmp	r0, r4
 800357c:	d9ef      	bls.n	800355e <HAL_ADC_PollForConversion+0xf6>
 800357e:	e7eb      	b.n	8003558 <HAL_ADC_PollForConversion+0xf0>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003580:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8003588:	2300      	movs	r3, #0
 800358a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 800358e:	2003      	movs	r0, #3
 8003590:	e7a3      	b.n	80034da <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003592:	682b      	ldr	r3, [r5, #0]
 8003594:	f06f 0212 	mvn.w	r2, #18
 8003598:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800359a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800359c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a0:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035a2:	682b      	ldr	r3, [r5, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80035aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80035ae:	d001      	beq.n	80035b4 <HAL_ADC_PollForConversion+0x14c>
  return HAL_OK;
 80035b0:	2000      	movs	r0, #0
 80035b2:	e792      	b.n	80034da <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035b4:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035b6:	b960      	cbnz	r0, 80035d2 <HAL_ADC_PollForConversion+0x16a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80035ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035be:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80035c2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80035c6:	d188      	bne.n	80034da <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80035d0:	e783      	b.n	80034da <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80035d2:	2000      	movs	r0, #0
 80035d4:	e781      	b.n	80034da <HAL_ADC_PollForConversion+0x72>
 80035d6:	bf00      	nop
 80035d8:	20000020 	.word	0x20000020
 80035dc:	24924924 	.word	0x24924924
 80035e0:	12492492 	.word	0x12492492
 80035e4:	00492492 	.word	0x00492492
 80035e8:	00249249 	.word	0x00249249

080035ec <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80035ec:	6803      	ldr	r3, [r0, #0]
 80035ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80035f4:	b430      	push	{r4, r5}
 80035f6:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80035f8:	2200      	movs	r2, #0
 80035fa:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035fc:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8003600:	2a01      	cmp	r2, #1
 8003602:	f000 808f 	beq.w	8003724 <HAL_ADC_ConfigChannel+0x130>
 8003606:	4603      	mov	r3, r0
 8003608:	2201      	movs	r2, #1
 800360a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800360e:	684a      	ldr	r2, [r1, #4]
 8003610:	2a06      	cmp	r2, #6
 8003612:	d82d      	bhi.n	8003670 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003614:	6804      	ldr	r4, [r0, #0]
 8003616:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003618:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800361c:	3a05      	subs	r2, #5
 800361e:	f04f 0c1f 	mov.w	ip, #31
 8003622:	fa0c fc02 	lsl.w	ip, ip, r2
 8003626:	ea20 000c 	bic.w	r0, r0, ip
 800362a:	680d      	ldr	r5, [r1, #0]
 800362c:	fa05 f202 	lsl.w	r2, r5, r2
 8003630:	4302      	orrs	r2, r0
 8003632:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003634:	680a      	ldr	r2, [r1, #0]
 8003636:	2a09      	cmp	r2, #9
 8003638:	d938      	bls.n	80036ac <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800363a:	681c      	ldr	r4, [r3, #0]
 800363c:	68e0      	ldr	r0, [r4, #12]
 800363e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003642:	3a1e      	subs	r2, #30
 8003644:	f04f 0c07 	mov.w	ip, #7
 8003648:	fa0c fc02 	lsl.w	ip, ip, r2
 800364c:	ea20 000c 	bic.w	r0, r0, ip
 8003650:	688d      	ldr	r5, [r1, #8]
 8003652:	fa05 f202 	lsl.w	r2, r5, r2
 8003656:	4302      	orrs	r2, r0
 8003658:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800365a:	680a      	ldr	r2, [r1, #0]
 800365c:	3a10      	subs	r2, #16
 800365e:	2a01      	cmp	r2, #1
 8003660:	d934      	bls.n	80036cc <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003662:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800366a:	b002      	add	sp, #8
 800366c:	bc30      	pop	{r4, r5}
 800366e:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8003670:	2a0c      	cmp	r2, #12
 8003672:	d80d      	bhi.n	8003690 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003674:	6805      	ldr	r5, [r0, #0]
 8003676:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003678:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800367c:	3a23      	subs	r2, #35	; 0x23
 800367e:	241f      	movs	r4, #31
 8003680:	4094      	lsls	r4, r2
 8003682:	ea20 0004 	bic.w	r0, r0, r4
 8003686:	680c      	ldr	r4, [r1, #0]
 8003688:	4094      	lsls	r4, r2
 800368a:	4320      	orrs	r0, r4
 800368c:	6328      	str	r0, [r5, #48]	; 0x30
 800368e:	e7d1      	b.n	8003634 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003690:	6805      	ldr	r5, [r0, #0]
 8003692:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003694:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003698:	3a41      	subs	r2, #65	; 0x41
 800369a:	241f      	movs	r4, #31
 800369c:	4094      	lsls	r4, r2
 800369e:	ea20 0004 	bic.w	r0, r0, r4
 80036a2:	680c      	ldr	r4, [r1, #0]
 80036a4:	4094      	lsls	r4, r2
 80036a6:	4320      	orrs	r0, r4
 80036a8:	62e8      	str	r0, [r5, #44]	; 0x2c
 80036aa:	e7c3      	b.n	8003634 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036ac:	681c      	ldr	r4, [r3, #0]
 80036ae:	6920      	ldr	r0, [r4, #16]
 80036b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80036b4:	f04f 0c07 	mov.w	ip, #7
 80036b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80036bc:	ea20 000c 	bic.w	r0, r0, ip
 80036c0:	688d      	ldr	r5, [r1, #8]
 80036c2:	fa05 f202 	lsl.w	r2, r5, r2
 80036c6:	4302      	orrs	r2, r0
 80036c8:	6122      	str	r2, [r4, #16]
 80036ca:	e7c6      	b.n	800365a <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4816      	ldr	r0, [pc, #88]	; (8003728 <HAL_ADC_ConfigChannel+0x134>)
 80036d0:	4282      	cmp	r2, r0
 80036d2:	d005      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d6:	f042 0220 	orr.w	r2, r2, #32
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80036dc:	2001      	movs	r0, #1
 80036de:	e7c1      	b.n	8003664 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80036e0:	6890      	ldr	r0, [r2, #8]
 80036e2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80036e6:	d11b      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80036e8:	6890      	ldr	r0, [r2, #8]
 80036ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80036ee:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036f0:	680a      	ldr	r2, [r1, #0]
 80036f2:	2a10      	cmp	r2, #16
 80036f4:	d001      	beq.n	80036fa <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f6:	2000      	movs	r0, #0
 80036f8:	e7b4      	b.n	8003664 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036fa:	4a0c      	ldr	r2, [pc, #48]	; (800372c <HAL_ADC_ConfigChannel+0x138>)
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	490c      	ldr	r1, [pc, #48]	; (8003730 <HAL_ADC_ConfigChannel+0x13c>)
 8003700:	fba1 1202 	umull	r1, r2, r1, r2
 8003704:	0c92      	lsrs	r2, r2, #18
 8003706:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800370a:	0052      	lsls	r2, r2, #1
 800370c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800370e:	e002      	b.n	8003716 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8003710:	9a01      	ldr	r2, [sp, #4]
 8003712:	3a01      	subs	r2, #1
 8003714:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003716:	9a01      	ldr	r2, [sp, #4]
 8003718:	2a00      	cmp	r2, #0
 800371a:	d1f9      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371c:	2000      	movs	r0, #0
 800371e:	e7a1      	b.n	8003664 <HAL_ADC_ConfigChannel+0x70>
 8003720:	2000      	movs	r0, #0
 8003722:	e79f      	b.n	8003664 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003724:	2002      	movs	r0, #2
 8003726:	e7a0      	b.n	800366a <HAL_ADC_ConfigChannel+0x76>
 8003728:	40012400 	.word	0x40012400
 800372c:	20000020 	.word	0x20000020
 8003730:	431bde83 	.word	0x431bde83

08003734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003734:	b530      	push	{r4, r5, lr}
 8003736:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800373c:	6803      	ldr	r3, [r0, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	f012 0f01 	tst.w	r2, #1
 8003744:	d133      	bne.n	80037ae <ADC_Enable+0x7a>
 8003746:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003750:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <ADC_Enable+0x80>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <ADC_Enable+0x84>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	0c9b      	lsrs	r3, r3, #18
 800375c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800375e:	e002      	b.n	8003766 <ADC_Enable+0x32>
    {
      wait_loop_index--;
 8003760:	9b01      	ldr	r3, [sp, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8003766:	9b01      	ldr	r3, [sp, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f9      	bne.n	8003760 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800376c:	f7ff fe62 	bl	8003434 <HAL_GetTick>
 8003770:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f013 0f01 	tst.w	r3, #1
 800377a:	d116      	bne.n	80037aa <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800377c:	f7ff fe5a 	bl	8003434 <HAL_GetTick>
 8003780:	1b43      	subs	r3, r0, r5
 8003782:	2b02      	cmp	r3, #2
 8003784:	d9f5      	bls.n	8003772 <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f013 0f01 	tst.w	r3, #1
 800378e:	d1f0      	bne.n	8003772 <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003792:	f043 0310 	orr.w	r3, r3, #16
 8003796:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	62e3      	str	r3, [r4, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037a0:	2300      	movs	r3, #0
 80037a2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

          return HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
 80037a8:	e002      	b.n	80037b0 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80037aa:	2000      	movs	r0, #0
 80037ac:	e000      	b.n	80037b0 <ADC_Enable+0x7c>
 80037ae:	2000      	movs	r0, #0
}
 80037b0:	b003      	add	sp, #12
 80037b2:	bd30      	pop	{r4, r5, pc}
 80037b4:	20000020 	.word	0x20000020
 80037b8:	431bde83 	.word	0x431bde83

080037bc <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80037bc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d068      	beq.n	8003896 <HAL_ADC_Start+0xda>
{
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80037c8:	2301      	movs	r3, #1
 80037ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80037ce:	f7ff ffb1 	bl	8003734 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d15b      	bne.n	800388e <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 80037d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	4a2c      	ldr	r2, [pc, #176]	; (800389c <HAL_ADC_Start+0xe0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d027      	beq.n	800383e <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037f0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80037f4:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80037fc:	d005      	beq.n	800380a <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003800:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003808:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800380a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800380c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003810:	d02b      	beq.n	800386a <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003812:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003814:	f022 0206 	bic.w	r2, r2, #6
 8003818:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800381a:	2200      	movs	r2, #0
 800381c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003820:	f06f 0202 	mvn.w	r2, #2
 8003824:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800382e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003832:	d01d      	beq.n	8003870 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	e02a      	b.n	8003894 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800383e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003842:	6852      	ldr	r2, [r2, #4]
 8003844:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8003848:	d0d1      	beq.n	80037ee <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800384a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800384c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003850:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003852:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <HAL_ADC_Start+0xe4>)
 8003854:	6852      	ldr	r2, [r2, #4]
 8003856:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800385a:	d0d6      	beq.n	800380a <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800385c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800385e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003862:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003866:	62a2      	str	r2, [r4, #40]	; 0x28
 8003868:	e7cf      	b.n	800380a <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 800386a:	2200      	movs	r2, #0
 800386c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800386e:	e7d4      	b.n	800381a <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_ADC_Start+0xe0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800387c:	609a      	str	r2, [r3, #8]
 800387e:	e009      	b.n	8003894 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003880:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003884:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003886:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800388a:	d1d3      	bne.n	8003834 <HAL_ADC_Start+0x78>
 800388c:	e7f3      	b.n	8003876 <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 800388e:	2300      	movs	r3, #0
 8003890:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003894:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003896:	2002      	movs	r0, #2
}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012800 	.word	0x40012800
 80038a0:	40012400 	.word	0x40012400

080038a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80038a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038a6:	6803      	ldr	r3, [r0, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	f012 0f01 	tst.w	r2, #1
 80038ae:	d101      	bne.n	80038b4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038b0:	2000      	movs	r0, #0
}
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
 80038b4:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80038be:	f7ff fdb9 	bl	8003434 <HAL_GetTick>
 80038c2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f013 0f01 	tst.w	r3, #1
 80038cc:	d013      	beq.n	80038f6 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ce:	f7ff fdb1 	bl	8003434 <HAL_GetTick>
 80038d2:	1b43      	subs	r3, r0, r5
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d9f5      	bls.n	80038c4 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f013 0f01 	tst.w	r3, #1
 80038e0:	d0f0      	beq.n	80038c4 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038e4:	f043 0310 	orr.w	r3, r3, #16
 80038e8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80038f2:	2001      	movs	r0, #1
 80038f4:	e7dd      	b.n	80038b2 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80038f6:	2000      	movs	r0, #0
 80038f8:	e7db      	b.n	80038b2 <ADC_ConversionStop_Disable+0xe>
	...

080038fc <HAL_ADC_Init>:
  if(hadc == NULL)
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d07b      	beq.n	80039f8 <HAL_ADC_Init+0xfc>
{
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003904:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	d04d      	beq.n	80039a6 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff ffca 	bl	80038a4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003910:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003912:	f013 0310 	ands.w	r3, r3, #16
 8003916:	d169      	bne.n	80039ec <HAL_ADC_Init+0xf0>
 8003918:	2800      	cmp	r0, #0
 800391a:	d167      	bne.n	80039ec <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 800391c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800391e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003922:	f022 0202 	bic.w	r2, r2, #2
 8003926:	f042 0202 	orr.w	r2, r2, #2
 800392a:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800392c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800392e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003930:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003932:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003934:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003938:	68a5      	ldr	r5, [r4, #8]
 800393a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800393e:	d002      	beq.n	8003946 <HAL_ADC_Init+0x4a>
 8003940:	2d01      	cmp	r5, #1
 8003942:	d036      	beq.n	80039b2 <HAL_ADC_Init+0xb6>
 8003944:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003946:	7d26      	ldrb	r6, [r4, #20]
 8003948:	2e01      	cmp	r6, #1
 800394a:	d035      	beq.n	80039b8 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 800394c:	6826      	ldr	r6, [r4, #0]
 800394e:	6871      	ldr	r1, [r6, #4]
 8003950:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8003954:	4329      	orrs	r1, r5
 8003956:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8003958:	6825      	ldr	r5, [r4, #0]
 800395a:	68ae      	ldr	r6, [r5, #8]
 800395c:	4927      	ldr	r1, [pc, #156]	; (80039fc <HAL_ADC_Init+0x100>)
 800395e:	4031      	ands	r1, r6
 8003960:	4311      	orrs	r1, r2
 8003962:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003964:	68a1      	ldr	r1, [r4, #8]
 8003966:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800396a:	d001      	beq.n	8003970 <HAL_ADC_Init+0x74>
 800396c:	2901      	cmp	r1, #1
 800396e:	d102      	bne.n	8003976 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003970:	6923      	ldr	r3, [r4, #16]
 8003972:	3b01      	subs	r3, #1
 8003974:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8003976:	6825      	ldr	r5, [r4, #0]
 8003978:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800397a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800397e:	430b      	orrs	r3, r1
 8003980:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
 8003986:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <HAL_ADC_Init+0x104>)
 8003988:	400b      	ands	r3, r1
 800398a:	429a      	cmp	r2, r3
 800398c:	d025      	beq.n	80039da <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 800398e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003990:	f023 0312 	bic.w	r3, r3, #18
 8003994:	f043 0310 	orr.w	r3, r3, #16
 8003998:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80039a2:	2001      	movs	r0, #1
 80039a4:	e027      	b.n	80039f6 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 80039a6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80039a8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80039ac:	f7ff fb1e 	bl	8002fec <HAL_ADC_MspInit>
 80039b0:	e7ab      	b.n	800390a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80039b2:	f44f 7580 	mov.w	r5, #256	; 0x100
 80039b6:	e7c6      	b.n	8003946 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039b8:	b931      	cbnz	r1, 80039c8 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80039ba:	69a1      	ldr	r1, [r4, #24]
 80039bc:	3901      	subs	r1, #1
 80039be:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 80039c2:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 80039c6:	e7c1      	b.n	800394c <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80039ca:	f041 0120 	orr.w	r1, r1, #32
 80039ce:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80039d2:	f041 0101 	orr.w	r1, r1, #1
 80039d6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80039d8:	e7b8      	b.n	800394c <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 80039da:	2300      	movs	r3, #0
 80039dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80039de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039e0:	f023 0303 	bic.w	r3, r3, #3
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80039ea:	e004      	b.n	80039f6 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039ee:	f043 0310 	orr.w	r3, r3, #16
 80039f2:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80039f4:	2001      	movs	r0, #1
}
 80039f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80039f8:	2001      	movs	r0, #1
}
 80039fa:	4770      	bx	lr
 80039fc:	ffe1f7fd 	.word	0xffe1f7fd
 8003a00:	ff1f0efe 	.word	0xff1f0efe

08003a04 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003a04:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d013      	beq.n	8003a34 <HAL_ADC_Stop+0x30>
{
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003a10:	2301      	movs	r3, #1
 8003a12:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a16:	f7ff ff45 	bl	80038a4 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8003a1a:	b938      	cbnz	r0, 8003a2c <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8003a1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003a1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003a32:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003a34:	2002      	movs	r0, #2
}
 8003a36:	4770      	bx	lr

08003a38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a38:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003a3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a44:	0200      	lsls	r0, r0, #8
 8003a46:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a4a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003a54:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a5c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_NVIC_SetPriority+0x68>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a66:	f1c3 0c07 	rsb	ip, r3, #7
 8003a6a:	f1bc 0f04 	cmp.w	ip, #4
 8003a6e:	bf28      	it	cs
 8003a70:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a74:	f103 0e04 	add.w	lr, r3, #4
 8003a78:	f1be 0f06 	cmp.w	lr, #6
 8003a7c:	d918      	bls.n	8003ab0 <HAL_NVIC_SetPriority+0x54>
 8003a7e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 3eff 	mov.w	lr, #4294967295
 8003a84:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003a88:	ea21 010c 	bic.w	r1, r1, ip
 8003a8c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a8e:	fa0e fe03 	lsl.w	lr, lr, r3
 8003a92:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a96:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	db0b      	blt.n	8003ab4 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	0112      	lsls	r2, r2, #4
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003aa4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003aa8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003aac:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e7e5      	b.n	8003a80 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab4:	f000 000f 	and.w	r0, r0, #15
 8003ab8:	0112      	lsls	r2, r2, #4
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <HAL_NVIC_SetPriority+0x6c>)
 8003abe:	541a      	strb	r2, [r3, r0]
 8003ac0:	e7f4      	b.n	8003aac <HAL_NVIC_SetPriority+0x50>
 8003ac2:	bf00      	nop
 8003ac4:	e000ed00 	.word	0xe000ed00
 8003ac8:	e000ed14 	.word	0xe000ed14

08003acc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003acc:	2800      	cmp	r0, #0
 8003ace:	db07      	blt.n	8003ae0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad0:	f000 021f 	and.w	r2, r0, #31
 8003ad4:	0940      	lsrs	r0, r0, #5
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	4093      	lsls	r3, r2
 8003ada:	4a02      	ldr	r2, [pc, #8]	; (8003ae4 <HAL_NVIC_EnableIRQ+0x18>)
 8003adc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	e000e100 	.word	0xe000e100

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003aec:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8003aee:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af0:	e0a6      	b.n	8003c40 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003af2:	4d80      	ldr	r5, [pc, #512]	; (8003cf4 <HAL_GPIO_Init+0x20c>)
 8003af4:	42ab      	cmp	r3, r5
 8003af6:	d010      	beq.n	8003b1a <HAL_GPIO_Init+0x32>
 8003af8:	d907      	bls.n	8003b0a <HAL_GPIO_Init+0x22>
 8003afa:	4d7f      	ldr	r5, [pc, #508]	; (8003cf8 <HAL_GPIO_Init+0x210>)
 8003afc:	42ab      	cmp	r3, r5
 8003afe:	d00c      	beq.n	8003b1a <HAL_GPIO_Init+0x32>
 8003b00:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8003b04:	42ab      	cmp	r3, r5
 8003b06:	d008      	beq.n	8003b1a <HAL_GPIO_Init+0x32>
 8003b08:	e013      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
 8003b0a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003b0e:	42ab      	cmp	r3, r5
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x32>
 8003b12:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8003b16:	42ab      	cmp	r3, r5
 8003b18:	d107      	bne.n	8003b2a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b1a:	688b      	ldr	r3, [r1, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d058      	beq.n	8003bd2 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d051      	beq.n	8003bc8 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8003b24:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b26:	2408      	movs	r4, #8
 8003b28:	e003      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8003b2a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003b2e:	42ab      	cmp	r3, r5
 8003b30:	d0f3      	beq.n	8003b1a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b32:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8003b36:	d84e      	bhi.n	8003bd6 <HAL_GPIO_Init+0xee>
 8003b38:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b3a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8003b3e:	d84c      	bhi.n	8003bda <HAL_GPIO_Init+0xf2>
 8003b40:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	250f      	movs	r5, #15
 8003b48:	4095      	lsls	r5, r2
 8003b4a:	ea23 0305 	bic.w	r3, r3, r5
 8003b4e:	fa04 f202 	lsl.w	r2, r4, r2
 8003b52:	4313      	orrs	r3, r2
 8003b54:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b56:	684b      	ldr	r3, [r1, #4]
 8003b58:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003b5c:	d06e      	beq.n	8003c3c <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b5e:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <HAL_GPIO_Init+0x214>)
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	619a      	str	r2, [r3, #24]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003b72:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8003b76:	1c95      	adds	r5, r2, #2
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <HAL_GPIO_Init+0x218>)
 8003b7a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b7e:	f00c 0503 	and.w	r5, ip, #3
 8003b82:	00ad      	lsls	r5, r5, #2
 8003b84:	230f      	movs	r3, #15
 8003b86:	40ab      	lsls	r3, r5
 8003b88:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b8c:	4b5d      	ldr	r3, [pc, #372]	; (8003d04 <HAL_GPIO_Init+0x21c>)
 8003b8e:	4298      	cmp	r0, r3
 8003b90:	d029      	beq.n	8003be6 <HAL_GPIO_Init+0xfe>
 8003b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b96:	4298      	cmp	r0, r3
 8003b98:	f000 808e 	beq.w	8003cb8 <HAL_GPIO_Init+0x1d0>
 8003b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ba0:	4298      	cmp	r0, r3
 8003ba2:	f000 808b 	beq.w	8003cbc <HAL_GPIO_Init+0x1d4>
 8003ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003baa:	4298      	cmp	r0, r3
 8003bac:	d019      	beq.n	8003be2 <HAL_GPIO_Init+0xfa>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	e01a      	b.n	8003be8 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bb2:	68cc      	ldr	r4, [r1, #12]
          break;
 8003bb4:	e7bd      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bb6:	68cc      	ldr	r4, [r1, #12]
 8003bb8:	3404      	adds	r4, #4
          break;
 8003bba:	e7ba      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bbc:	68cc      	ldr	r4, [r1, #12]
 8003bbe:	3408      	adds	r4, #8
          break;
 8003bc0:	e7b7      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bc2:	68cc      	ldr	r4, [r1, #12]
 8003bc4:	340c      	adds	r4, #12
          break;
 8003bc6:	e7b4      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8003bc8:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bca:	2408      	movs	r4, #8
 8003bcc:	e7b1      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bce:	2400      	movs	r4, #0
 8003bd0:	e7af      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bd2:	2404      	movs	r4, #4
 8003bd4:	e7ad      	b.n	8003b32 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003bd6:	1d06      	adds	r6, r0, #4
 8003bd8:	e7af      	b.n	8003b3a <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bda:	f1ac 0208 	sub.w	r2, ip, #8
 8003bde:	0092      	lsls	r2, r2, #2
 8003be0:	e7b0      	b.n	8003b44 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003be2:	2303      	movs	r3, #3
 8003be4:	e000      	b.n	8003be8 <HAL_GPIO_Init+0x100>
 8003be6:	2300      	movs	r3, #0
 8003be8:	40ab      	lsls	r3, r5
 8003bea:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8003bec:	3202      	adds	r2, #2
 8003bee:	4d44      	ldr	r5, [pc, #272]	; (8003d00 <HAL_GPIO_Init+0x218>)
 8003bf0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf4:	684b      	ldr	r3, [r1, #4]
 8003bf6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003bfa:	d061      	beq.n	8003cc0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bfc:	4a42      	ldr	r2, [pc, #264]	; (8003d08 <HAL_GPIO_Init+0x220>)
 8003bfe:	6893      	ldr	r3, [r2, #8]
 8003c00:	ea43 030e 	orr.w	r3, r3, lr
 8003c04:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c06:	684b      	ldr	r3, [r1, #4]
 8003c08:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003c0c:	d05e      	beq.n	8003ccc <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c0e:	4a3e      	ldr	r2, [pc, #248]	; (8003d08 <HAL_GPIO_Init+0x220>)
 8003c10:	68d3      	ldr	r3, [r2, #12]
 8003c12:	ea43 030e 	orr.w	r3, r3, lr
 8003c16:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c18:	684b      	ldr	r3, [r1, #4]
 8003c1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003c1e:	d05b      	beq.n	8003cd8 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c20:	4a39      	ldr	r2, [pc, #228]	; (8003d08 <HAL_GPIO_Init+0x220>)
 8003c22:	6853      	ldr	r3, [r2, #4]
 8003c24:	ea43 030e 	orr.w	r3, r3, lr
 8003c28:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c2a:	684b      	ldr	r3, [r1, #4]
 8003c2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c30:	d058      	beq.n	8003ce4 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c32:	4a35      	ldr	r2, [pc, #212]	; (8003d08 <HAL_GPIO_Init+0x220>)
 8003c34:	6813      	ldr	r3, [r2, #0]
 8003c36:	ea43 030e 	orr.w	r3, r3, lr
 8003c3a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8003c3c:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c40:	680b      	ldr	r3, [r1, #0]
 8003c42:	fa33 f20c 	lsrs.w	r2, r3, ip
 8003c46:	d053      	beq.n	8003cf0 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8003c48:	2201      	movs	r2, #1
 8003c4a:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8003c52:	ea32 0303 	bics.w	r3, r2, r3
 8003c56:	d1f1      	bne.n	8003c3c <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8003c58:	684b      	ldr	r3, [r1, #4]
 8003c5a:	2b12      	cmp	r3, #18
 8003c5c:	f63f af49 	bhi.w	8003af2 <HAL_GPIO_Init+0xa>
 8003c60:	2b12      	cmp	r3, #18
 8003c62:	f63f af66 	bhi.w	8003b32 <HAL_GPIO_Init+0x4a>
 8003c66:	a501      	add	r5, pc, #4	; (adr r5, 8003c6c <HAL_GPIO_Init+0x184>)
 8003c68:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8003c6c:	08003b1b 	.word	0x08003b1b
 8003c70:	08003bb3 	.word	0x08003bb3
 8003c74:	08003bbd 	.word	0x08003bbd
 8003c78:	08003bcf 	.word	0x08003bcf
 8003c7c:	08003b33 	.word	0x08003b33
 8003c80:	08003b33 	.word	0x08003b33
 8003c84:	08003b33 	.word	0x08003b33
 8003c88:	08003b33 	.word	0x08003b33
 8003c8c:	08003b33 	.word	0x08003b33
 8003c90:	08003b33 	.word	0x08003b33
 8003c94:	08003b33 	.word	0x08003b33
 8003c98:	08003b33 	.word	0x08003b33
 8003c9c:	08003b33 	.word	0x08003b33
 8003ca0:	08003b33 	.word	0x08003b33
 8003ca4:	08003b33 	.word	0x08003b33
 8003ca8:	08003b33 	.word	0x08003b33
 8003cac:	08003b33 	.word	0x08003b33
 8003cb0:	08003bb7 	.word	0x08003bb7
 8003cb4:	08003bc3 	.word	0x08003bc3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e795      	b.n	8003be8 <HAL_GPIO_Init+0x100>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e793      	b.n	8003be8 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cc0:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <HAL_GPIO_Init+0x220>)
 8003cc2:	6893      	ldr	r3, [r2, #8]
 8003cc4:	ea23 030e 	bic.w	r3, r3, lr
 8003cc8:	6093      	str	r3, [r2, #8]
 8003cca:	e79c      	b.n	8003c06 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ccc:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <HAL_GPIO_Init+0x220>)
 8003cce:	68d3      	ldr	r3, [r2, #12]
 8003cd0:	ea23 030e 	bic.w	r3, r3, lr
 8003cd4:	60d3      	str	r3, [r2, #12]
 8003cd6:	e79f      	b.n	8003c18 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <HAL_GPIO_Init+0x220>)
 8003cda:	6853      	ldr	r3, [r2, #4]
 8003cdc:	ea23 030e 	bic.w	r3, r3, lr
 8003ce0:	6053      	str	r3, [r2, #4]
 8003ce2:	e7a2      	b.n	8003c2a <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <HAL_GPIO_Init+0x220>)
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	ea23 030e 	bic.w	r3, r3, lr
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e7a5      	b.n	8003c3c <HAL_GPIO_Init+0x154>
  }
}
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	10220000 	.word	0x10220000
 8003cf8:	10310000 	.word	0x10310000
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40010800 	.word	0x40010800
 8003d08:	40010400 	.word	0x40010400

08003d0c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d0c:	6883      	ldr	r3, [r0, #8]
 8003d0e:	4219      	tst	r1, r3
 8003d10:	d001      	beq.n	8003d16 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003d12:	2001      	movs	r0, #1
 8003d14:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d16:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003d18:	4770      	bx	lr

08003d1a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d1a:	b10a      	cbz	r2, 8003d20 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1c:	6101      	str	r1, [r0, #16]
 8003d1e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d20:	0409      	lsls	r1, r1, #16
 8003d22:	6101      	str	r1, [r0, #16]
  }
}
 8003d24:	4770      	bx	lr

08003d26 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d26:	6803      	ldr	r3, [r0, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003d2e:	d101      	bne.n	8003d34 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003d30:	2000      	movs	r0, #0
}
 8003d32:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d38:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d44:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d48:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d4a:	f042 0204 	orr.w	r2, r2, #4
 8003d4e:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003d50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003d54:	2001      	movs	r0, #1
 8003d56:	4770      	bx	lr

08003d58 <I2C_WaitOnFlagUntilTimeout>:
{
 8003d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	4617      	mov	r7, r2
 8003d62:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d64:	e03b      	b.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7ff fb65 	bl	8003434 <HAL_GetTick>
 8003d6a:	9b06      	ldr	r3, [sp, #24]
 8003d6c:	1ac0      	subs	r0, r0, r3
 8003d6e:	4540      	cmp	r0, r8
 8003d70:	d802      	bhi.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x20>
 8003d72:	f1b8 0f00 	cmp.w	r8, #0
 8003d76:	d132      	bne.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d78:	2d01      	cmp	r5, #1
 8003d7a:	d018      	beq.n	8003dae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d7c:	6833      	ldr	r3, [r6, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	ea24 0303 	bic.w	r3, r4, r3
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	429f      	cmp	r7, r3
 8003d8e:	d126      	bne.n	8003dde <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d94:	2220      	movs	r2, #32
 8003d96:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d9a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d9e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003da0:	f042 0220 	orr.w	r2, r2, #32
 8003da4:	6432      	str	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003da6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_ERROR;
 8003daa:	2001      	movs	r0, #1
 8003dac:	e027      	b.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dae:	6833      	ldr	r3, [r6, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	ea24 0303 	bic.w	r3, r4, r3
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	e7e5      	b.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	ea24 0c03 	bic.w	ip, r4, r3
 8003dc8:	fa1f fc8c 	uxth.w	ip, ip
 8003dcc:	fabc fc8c 	clz	ip, ip
 8003dd0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003dd4:	4567      	cmp	r7, ip
 8003dd6:	d111      	bne.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003ddc:	d1c3      	bne.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dde:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8003de2:	2d01      	cmp	r5, #1
 8003de4:	d0ec      	beq.n	8003dc0 <I2C_WaitOnFlagUntilTimeout+0x68>
 8003de6:	6833      	ldr	r3, [r6, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	ea24 0c03 	bic.w	ip, r4, r3
 8003dee:	fa1f fc8c 	uxth.w	ip, ip
 8003df2:	fabc fc8c 	clz	ip, ip
 8003df6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003dfa:	e7eb      	b.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8003dfc:	2000      	movs	r0, #0
}
 8003dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003e02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e06:	4605      	mov	r5, r0
 8003e08:	460e      	mov	r6, r1
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e0e:	e053      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e16:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e1e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e24:	2220      	movs	r2, #32
 8003e26:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e2a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e2e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003e30:	f042 0204 	orr.w	r2, r2, #4
 8003e34:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003e36:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	e04a      	b.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3e:	f7ff faf9 	bl	8003434 <HAL_GetTick>
 8003e42:	eba0 0009 	sub.w	r0, r0, r9
 8003e46:	4540      	cmp	r0, r8
 8003e48:	d802      	bhi.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8003e4a:	f1b8 0f00 	cmp.w	r8, #0
 8003e4e:	d133      	bne.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e50:	2f01      	cmp	r7, #1
 8003e52:	d017      	beq.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	ea26 0303 	bic.w	r3, r6, r3
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b00      	subs	r3, #0
 8003e60:	bf18      	it	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	b343      	cbz	r3, 8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e74:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003e76:	f042 0220 	orr.w	r2, r2, #32
 8003e7a:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003e7c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003e80:	2001      	movs	r0, #1
 8003e82:	e027      	b.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	ea26 0303 	bic.w	r3, r6, r3
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	3b00      	subs	r3, #0
 8003e90:	bf18      	it	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	e7e6      	b.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e96:	682b      	ldr	r3, [r5, #0]
 8003e98:	699c      	ldr	r4, [r3, #24]
 8003e9a:	ea26 0404 	bic.w	r4, r6, r4
 8003e9e:	b2a4      	uxth	r4, r4
 8003ea0:	3c00      	subs	r4, #0
 8003ea2:	bf18      	it	ne
 8003ea4:	2401      	movne	r4, #1
 8003ea6:	b1a4      	cbz	r4, 8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003eb0:	d1ae      	bne.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003eb6:	d1c2      	bne.n	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eb8:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8003ebc:	2f01      	cmp	r7, #1
 8003ebe:	d1ea      	bne.n	8003e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	695c      	ldr	r4, [r3, #20]
 8003ec4:	ea26 0404 	bic.w	r4, r6, r4
 8003ec8:	b2a4      	uxth	r4, r4
 8003eca:	3c00      	subs	r4, #0
 8003ecc:	bf18      	it	ne
 8003ece:	2401      	movne	r4, #1
 8003ed0:	e7e9      	b.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8003ed2:	2000      	movs	r0, #0
}
 8003ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003ed8 <I2C_MasterRequestWrite>:
{
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	b083      	sub	sp, #12
 8003edc:	4604      	mov	r4, r0
 8003ede:	460d      	mov	r5, r1
 8003ee0:	4616      	mov	r6, r2
 8003ee2:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ee4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d00d      	beq.n	8003f06 <I2C_MasterRequestWrite+0x2e>
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d00b      	beq.n	8003f06 <I2C_MasterRequestWrite+0x2e>
 8003eee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ef2:	d008      	beq.n	8003f06 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ef4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ef6:	2b12      	cmp	r3, #18
 8003ef8:	d10a      	bne.n	8003f10 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efa:	6802      	ldr	r2, [r0, #0]
 8003efc:	6813      	ldr	r3, [r2, #0]
 8003efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e004      	b.n	8003f10 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	6813      	ldr	r3, [r2, #0]
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f10:	9700      	str	r7, [sp, #0]
 8003f12:	4633      	mov	r3, r6
 8003f14:	2200      	movs	r2, #0
 8003f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff ff1c 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	b980      	cbnz	r0, 8003f44 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f28:	d116      	bne.n	8003f58 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003f30:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f32:	463b      	mov	r3, r7
 8003f34:	4632      	mov	r2, r6
 8003f36:	4913      	ldr	r1, [pc, #76]	; (8003f84 <I2C_MasterRequestWrite+0xac>)
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f7ff ff62 	bl	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f3e:	b9f8      	cbnz	r0, 8003f80 <I2C_MasterRequestWrite+0xa8>
}
 8003f40:	b003      	add	sp, #12
 8003f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f4c:	d002      	beq.n	8003f54 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f52:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003f54:	2003      	movs	r0, #3
 8003f56:	e7f3      	b.n	8003f40 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f58:	11eb      	asrs	r3, r5, #7
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	f003 0306 	and.w	r3, r3, #6
 8003f60:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003f64:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f66:	463b      	mov	r3, r7
 8003f68:	4632      	mov	r2, r6
 8003f6a:	4907      	ldr	r1, [pc, #28]	; (8003f88 <I2C_MasterRequestWrite+0xb0>)
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff ff48 	bl	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f72:	b918      	cbnz	r0, 8003f7c <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	b2ed      	uxtb	r5, r5
 8003f78:	611d      	str	r5, [r3, #16]
 8003f7a:	e7da      	b.n	8003f32 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	e7df      	b.n	8003f40 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8003f80:	2001      	movs	r0, #1
 8003f82:	e7dd      	b.n	8003f40 <I2C_MasterRequestWrite+0x68>
 8003f84:	00010002 	.word	0x00010002
 8003f88:	00010008 	.word	0x00010008

08003f8c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	4604      	mov	r4, r0
 8003f90:	460d      	mov	r5, r1
 8003f92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f9c:	d121      	bne.n	8003fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f7ff fec1 	bl	8003d26 <I2C_IsAcknowledgeFailed>
 8003fa4:	b9f8      	cbnz	r0, 8003fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003faa:	d0f3      	beq.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fac:	f7ff fa42 	bl	8003434 <HAL_GetTick>
 8003fb0:	1b80      	subs	r0, r0, r6
 8003fb2:	42a8      	cmp	r0, r5
 8003fb4:	d801      	bhi.n	8003fba <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003fb6:	2d00      	cmp	r5, #0
 8003fb8:	d1ec      	bne.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003fc2:	d1e7      	bne.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003fd4:	f042 0220 	orr.w	r2, r2, #32
 8003fd8:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003fda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003fde:	2001      	movs	r0, #1
 8003fe0:	e000      	b.n	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8003fe2:	2000      	movs	r0, #0
}
 8003fe4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	e7fc      	b.n	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08003fea <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003fea:	b570      	push	{r4, r5, r6, lr}
 8003fec:	4604      	mov	r4, r0
 8003fee:	460d      	mov	r5, r1
 8003ff0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f013 0f04 	tst.w	r3, #4
 8003ffa:	d121      	bne.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff fe92 	bl	8003d26 <I2C_IsAcknowledgeFailed>
 8004002:	b9f8      	cbnz	r0, 8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8004004:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004008:	d0f3      	beq.n	8003ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7ff fa13 	bl	8003434 <HAL_GetTick>
 800400e:	1b80      	subs	r0, r0, r6
 8004010:	42a8      	cmp	r0, r5
 8004012:	d801      	bhi.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004014:	2d00      	cmp	r5, #0
 8004016:	d1ec      	bne.n	8003ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f013 0f04 	tst.w	r3, #4
 8004020:	d1e7      	bne.n	8003ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	2300      	movs	r3, #0
 8004024:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	2220      	movs	r2, #32
 8004028:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004032:	f042 0220 	orr.w	r2, r2, #32
 8004036:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8004038:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800403c:	2001      	movs	r0, #1
 800403e:	e000      	b.n	8004042 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8004040:	2000      	movs	r0, #0
}
 8004042:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004044:	2001      	movs	r0, #1
 8004046:	e7fc      	b.n	8004042 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08004048 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004048:	2800      	cmp	r0, #0
 800404a:	f000 80cc 	beq.w	80041e6 <HAL_I2C_Init+0x19e>
{
 800404e:	b570      	push	{r4, r5, r6, lr}
 8004050:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004052:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004056:	2b00      	cmp	r3, #0
 8004058:	d077      	beq.n	800414a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800405a:	2324      	movs	r3, #36	; 0x24
 800405c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	6813      	ldr	r3, [r2, #0]
 800406e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004072:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004074:	6822      	ldr	r2, [r4, #0]
 8004076:	6813      	ldr	r3, [r2, #0]
 8004078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800407c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800407e:	f000 fd4b 	bl	8004b18 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004082:	6862      	ldr	r2, [r4, #4]
 8004084:	4b5a      	ldr	r3, [pc, #360]	; (80041f0 <HAL_I2C_Init+0x1a8>)
 8004086:	429a      	cmp	r2, r3
 8004088:	d864      	bhi.n	8004154 <HAL_I2C_Init+0x10c>
 800408a:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_I2C_Init+0x1ac>)
 800408c:	4298      	cmp	r0, r3
 800408e:	bf8c      	ite	hi
 8004090:	2300      	movhi	r3, #0
 8004092:	2301      	movls	r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	f040 80a8 	bne.w	80041ea <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800409a:	4957      	ldr	r1, [pc, #348]	; (80041f8 <HAL_I2C_Init+0x1b0>)
 800409c:	fba1 3100 	umull	r3, r1, r1, r0
 80040a0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040a2:	6825      	ldr	r5, [r4, #0]
 80040a4:	686a      	ldr	r2, [r5, #4]
 80040a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80040aa:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80040ae:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040b0:	6821      	ldr	r1, [r4, #0]
 80040b2:	6a0a      	ldr	r2, [r1, #32]
 80040b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80040b8:	6866      	ldr	r6, [r4, #4]
 80040ba:	4d4d      	ldr	r5, [pc, #308]	; (80041f0 <HAL_I2C_Init+0x1a8>)
 80040bc:	42ae      	cmp	r6, r5
 80040be:	d84f      	bhi.n	8004160 <HAL_I2C_Init+0x118>
 80040c0:	3301      	adds	r3, #1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	69ca      	ldr	r2, [r1, #28]
 80040ca:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80040ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040d2:	6865      	ldr	r5, [r4, #4]
 80040d4:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <HAL_I2C_Init+0x1a8>)
 80040d6:	429d      	cmp	r5, r3
 80040d8:	d84c      	bhi.n	8004174 <HAL_I2C_Init+0x12c>
 80040da:	1e43      	subs	r3, r0, #1
 80040dc:	006d      	lsls	r5, r5, #1
 80040de:	fbb3 f3f5 	udiv	r3, r3, r5
 80040e2:	3301      	adds	r3, #1
 80040e4:	f640 70fc 	movw	r0, #4092	; 0xffc
 80040e8:	4203      	tst	r3, r0
 80040ea:	d078      	beq.n	80041de <HAL_I2C_Init+0x196>
 80040ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f0:	431a      	orrs	r2, r3
 80040f2:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040f4:	6821      	ldr	r1, [r4, #0]
 80040f6:	680b      	ldr	r3, [r1, #0]
 80040f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040fc:	69e2      	ldr	r2, [r4, #28]
 80040fe:	6a20      	ldr	r0, [r4, #32]
 8004100:	4302      	orrs	r2, r0
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	688b      	ldr	r3, [r1, #8]
 800410a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800410e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004112:	6922      	ldr	r2, [r4, #16]
 8004114:	68e0      	ldr	r0, [r4, #12]
 8004116:	4302      	orrs	r2, r0
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800411c:	6821      	ldr	r1, [r4, #0]
 800411e:	68cb      	ldr	r3, [r1, #12]
 8004120:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004124:	6962      	ldr	r2, [r4, #20]
 8004126:	69a0      	ldr	r0, [r4, #24]
 8004128:	4302      	orrs	r2, r0
 800412a:	4313      	orrs	r3, r2
 800412c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	6813      	ldr	r3, [r2, #0]
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004138:	2000      	movs	r0, #0
 800413a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800413c:	2320      	movs	r3, #32
 800413e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004142:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004144:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8004148:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800414a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800414e:	f7fe ff9f 	bl	8003090 <HAL_I2C_MspInit>
 8004152:	e782      	b.n	800405a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <HAL_I2C_Init+0x1b4>)
 8004156:	4298      	cmp	r0, r3
 8004158:	bf8c      	ite	hi
 800415a:	2300      	movhi	r3, #0
 800415c:	2301      	movls	r3, #1
 800415e:	e799      	b.n	8004094 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004160:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8004164:	fb05 f303 	mul.w	r3, r5, r3
 8004168:	4d25      	ldr	r5, [pc, #148]	; (8004200 <HAL_I2C_Init+0x1b8>)
 800416a:	fba5 5303 	umull	r5, r3, r5, r3
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	3301      	adds	r3, #1
 8004172:	e7a6      	b.n	80040c2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004174:	68a6      	ldr	r6, [r4, #8]
 8004176:	b9be      	cbnz	r6, 80041a8 <HAL_I2C_Init+0x160>
 8004178:	1e43      	subs	r3, r0, #1
 800417a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800417e:	fbb3 f3fc 	udiv	r3, r3, ip
 8004182:	3301      	adds	r3, #1
 8004184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	bb43      	cbnz	r3, 80041e2 <HAL_I2C_Init+0x19a>
 8004190:	b9c6      	cbnz	r6, 80041c4 <HAL_I2C_Init+0x17c>
 8004192:	1e43      	subs	r3, r0, #1
 8004194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004198:	fbb3 f3f5 	udiv	r3, r3, r5
 800419c:	3301      	adds	r3, #1
 800419e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	e7a3      	b.n	80040f0 <HAL_I2C_Init+0xa8>
 80041a8:	1e43      	subs	r3, r0, #1
 80041aa:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80041ae:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80041b2:	fbb3 f3fc 	udiv	r3, r3, ip
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	e7e4      	b.n	800418e <HAL_I2C_Init+0x146>
 80041c4:	1e43      	subs	r3, r0, #1
 80041c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80041ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80041ce:	fbb3 f3f5 	udiv	r3, r3, r5
 80041d2:	3301      	adds	r3, #1
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041dc:	e788      	b.n	80040f0 <HAL_I2C_Init+0xa8>
 80041de:	2304      	movs	r3, #4
 80041e0:	e786      	b.n	80040f0 <HAL_I2C_Init+0xa8>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e784      	b.n	80040f0 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80041e6:	2001      	movs	r0, #1
}
 80041e8:	4770      	bx	lr
    return HAL_ERROR;
 80041ea:	2001      	movs	r0, #1
 80041ec:	e7ac      	b.n	8004148 <HAL_I2C_Init+0x100>
 80041ee:	bf00      	nop
 80041f0:	000186a0 	.word	0x000186a0
 80041f4:	001e847f 	.word	0x001e847f
 80041f8:	431bde83 	.word	0x431bde83
 80041fc:	003d08ff 	.word	0x003d08ff
 8004200:	10624dd3 	.word	0x10624dd3

08004204 <HAL_I2C_Master_Transmit>:
{
 8004204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004208:	b085      	sub	sp, #20
 800420a:	4604      	mov	r4, r0
 800420c:	460f      	mov	r7, r1
 800420e:	4691      	mov	r9, r2
 8004210:	4698      	mov	r8, r3
 8004212:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004214:	f7ff f90e 	bl	8003434 <HAL_GetTick>
 8004218:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800421a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800421e:	b2c0      	uxtb	r0, r0
 8004220:	2820      	cmp	r0, #32
 8004222:	d004      	beq.n	800422e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8004224:	2702      	movs	r7, #2
}
 8004226:	4638      	mov	r0, r7
 8004228:	b005      	add	sp, #20
 800422a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800422e:	9500      	str	r5, [sp, #0]
 8004230:	2319      	movs	r3, #25
 8004232:	2201      	movs	r2, #1
 8004234:	494f      	ldr	r1, [pc, #316]	; (8004374 <HAL_I2C_Master_Transmit+0x170>)
 8004236:	4620      	mov	r0, r4
 8004238:	f7ff fd8e 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 800423c:	2800      	cmp	r0, #0
 800423e:	f040 8092 	bne.w	8004366 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8004242:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004246:	2b01      	cmp	r3, #1
 8004248:	f000 808f 	beq.w	800436a <HAL_I2C_Master_Transmit+0x166>
 800424c:	2301      	movs	r3, #1
 800424e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	f012 0f01 	tst.w	r2, #1
 800425a:	d103      	bne.n	8004264 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800426c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800426e:	2321      	movs	r3, #33	; 0x21
 8004270:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004274:	2310      	movs	r3, #16
 8004276:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800427a:	2300      	movs	r3, #0
 800427c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800427e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004282:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004286:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004288:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800428a:	4b3b      	ldr	r3, [pc, #236]	; (8004378 <HAL_I2C_Master_Transmit+0x174>)
 800428c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800428e:	462b      	mov	r3, r5
 8004290:	4632      	mov	r2, r6
 8004292:	4639      	mov	r1, r7
 8004294:	4620      	mov	r0, r4
 8004296:	f7ff fe1f 	bl	8003ed8 <I2C_MasterRequestWrite>
 800429a:	4607      	mov	r7, r0
 800429c:	2800      	cmp	r0, #0
 800429e:	d166      	bne.n	800436e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a0:	2300      	movs	r3, #0
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	6823      	ldr	r3, [r4, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	9203      	str	r2, [sp, #12]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	9303      	str	r3, [sp, #12]
 80042ae:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80042b0:	e011      	b.n	80042d6 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d001      	beq.n	80042bc <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 80042b8:	2701      	movs	r7, #1
 80042ba:	e7b4      	b.n	8004226 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042bc:	6822      	ldr	r2, [r4, #0]
 80042be:	6813      	ldr	r3, [r2, #0]
 80042c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e7f7      	b.n	80042b8 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c8:	462a      	mov	r2, r5
 80042ca:	4631      	mov	r1, r6
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7ff fe8c 	bl	8003fea <I2C_WaitOnBTFFlagUntilTimeout>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d12e      	bne.n	8004334 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 80042d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d036      	beq.n	800434a <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042dc:	462a      	mov	r2, r5
 80042de:	4631      	mov	r1, r6
 80042e0:	4620      	mov	r0, r4
 80042e2:	f7ff fe53 	bl	8003f8c <I2C_WaitOnTXEFlagUntilTimeout>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d1e3      	bne.n	80042b2 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	7812      	ldrb	r2, [r2, #0]
 80042f0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80042f8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80042fa:	b289      	uxth	r1, r1
 80042fc:	3901      	subs	r1, #1
 80042fe:	b289      	uxth	r1, r1
 8004300:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004302:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	b29b      	uxth	r3, r3
 8004308:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	6951      	ldr	r1, [r2, #20]
 800430e:	f011 0f04 	tst.w	r1, #4
 8004312:	d0d9      	beq.n	80042c8 <HAL_I2C_Master_Transmit+0xc4>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0d7      	beq.n	80042c8 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004318:	7843      	ldrb	r3, [r0, #1]
 800431a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800431c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800431e:	3301      	adds	r3, #1
 8004320:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004322:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29b      	uxth	r3, r3
 800432a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800432c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800432e:	3b01      	subs	r3, #1
 8004330:	8523      	strh	r3, [r4, #40]	; 0x28
 8004332:	e7c9      	b.n	80042c8 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004336:	2b04      	cmp	r3, #4
 8004338:	d001      	beq.n	800433e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 800433a:	2701      	movs	r7, #1
 800433c:	e773      	b.n	8004226 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	6813      	ldr	r3, [r2, #0]
 8004342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	e7f7      	b.n	800433a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	6813      	ldr	r3, [r2, #0]
 800434e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004352:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004354:	2320      	movs	r3, #32
 8004356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800435a:	2300      	movs	r3, #0
 800435c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004360:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004364:	e75f      	b.n	8004226 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8004366:	2702      	movs	r7, #2
 8004368:	e75d      	b.n	8004226 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800436a:	2702      	movs	r7, #2
 800436c:	e75b      	b.n	8004226 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 800436e:	2701      	movs	r7, #1
 8004370:	e759      	b.n	8004226 <HAL_I2C_Master_Transmit+0x22>
 8004372:	bf00      	nop
 8004374:	00100002 	.word	0x00100002
 8004378:	ffff0000 	.word	0xffff0000

0800437c <HAL_I2C_IsDeviceReady>:
{
 800437c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004380:	b085      	sub	sp, #20
 8004382:	4604      	mov	r4, r0
 8004384:	4688      	mov	r8, r1
 8004386:	4691      	mov	r9, r2
 8004388:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800438a:	f7ff f853 	bl	8003434 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800438e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b20      	cmp	r3, #32
 8004396:	d003      	beq.n	80043a0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8004398:	2002      	movs	r0, #2
}
 800439a:	b005      	add	sp, #20
 800439c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043a0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a2:	9000      	str	r0, [sp, #0]
 80043a4:	2319      	movs	r3, #25
 80043a6:	2201      	movs	r2, #1
 80043a8:	4957      	ldr	r1, [pc, #348]	; (8004508 <HAL_I2C_IsDeviceReady+0x18c>)
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff fcd4 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	f040 80a0 	bne.w	80044f6 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80043b6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	f000 809d 	beq.w	80044fa <HAL_I2C_IsDeviceReady+0x17e>
 80043c0:	2301      	movs	r3, #1
 80043c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f012 0f01 	tst.w	r2, #1
 80043ce:	d103      	bne.n	80043d8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d8:	6822      	ldr	r2, [r4, #0]
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043e0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043e2:	2324      	movs	r3, #36	; 0x24
 80043e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e8:	2700      	movs	r7, #0
 80043ea:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ec:	4b47      	ldr	r3, [pc, #284]	; (800450c <HAL_I2C_IsDeviceReady+0x190>)
 80043ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043f0:	e040      	b.n	8004474 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043fa:	d002      	beq.n	8004402 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004400:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8004402:	2003      	movs	r0, #3
 8004404:	e7c9      	b.n	800439a <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004406:	23a0      	movs	r3, #160	; 0xa0
 8004408:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800440c:	6822      	ldr	r2, [r4, #0]
 800440e:	6953      	ldr	r3, [r2, #20]
 8004410:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	6952      	ldr	r2, [r2, #20]
 8004416:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800441a:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 800441e:	fa5f fc8c 	uxtb.w	ip, ip
 8004422:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8004426:	d009      	beq.n	800443c <HAL_I2C_IsDeviceReady+0xc0>
 8004428:	b943      	cbnz	r3, 800443c <HAL_I2C_IsDeviceReady+0xc0>
 800442a:	b93a      	cbnz	r2, 800443c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800442c:	f7ff f802 	bl	8003434 <HAL_GetTick>
 8004430:	1b80      	subs	r0, r0, r6
 8004432:	42a8      	cmp	r0, r5
 8004434:	d8e7      	bhi.n	8004406 <HAL_I2C_IsDeviceReady+0x8a>
 8004436:	2d00      	cmp	r5, #0
 8004438:	d1e8      	bne.n	800440c <HAL_I2C_IsDeviceReady+0x90>
 800443a:	e7e4      	b.n	8004406 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 800443c:	2320      	movs	r3, #32
 800443e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	f012 0f02 	tst.w	r2, #2
 800444a:	d131      	bne.n	80044b0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004452:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800445a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800445c:	9600      	str	r6, [sp, #0]
 800445e:	2319      	movs	r3, #25
 8004460:	2201      	movs	r2, #1
 8004462:	4929      	ldr	r1, [pc, #164]	; (8004508 <HAL_I2C_IsDeviceReady+0x18c>)
 8004464:	4620      	mov	r0, r4
 8004466:	f7ff fc77 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 800446a:	2800      	cmp	r0, #0
 800446c:	d149      	bne.n	8004502 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 800446e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8004470:	454f      	cmp	r7, r9
 8004472:	d238      	bcs.n	80044e6 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800447e:	9600      	str	r6, [sp, #0]
 8004480:	462b      	mov	r3, r5
 8004482:	2200      	movs	r2, #0
 8004484:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004488:	4620      	mov	r0, r4
 800448a:	f7ff fc65 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 800448e:	2800      	cmp	r0, #0
 8004490:	d1af      	bne.n	80043f2 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8004498:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800449a:	f7fe ffcb 	bl	8003434 <HAL_GetTick>
 800449e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80044a0:	6822      	ldr	r2, [r4, #0]
 80044a2:	6953      	ldr	r3, [r2, #20]
 80044a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044a8:	6952      	ldr	r2, [r2, #20]
 80044aa:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044ae:	e7b4      	b.n	800441a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b8:	2300      	movs	r3, #0
 80044ba:	9303      	str	r3, [sp, #12]
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	9203      	str	r2, [sp, #12]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	9303      	str	r3, [sp, #12]
 80044c6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c8:	9600      	str	r6, [sp, #0]
 80044ca:	2319      	movs	r3, #25
 80044cc:	2201      	movs	r2, #1
 80044ce:	490e      	ldr	r1, [pc, #56]	; (8004508 <HAL_I2C_IsDeviceReady+0x18c>)
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7ff fc41 	bl	8003d58 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	b990      	cbnz	r0, 80044fe <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	2320      	movs	r3, #32
 80044da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80044de:	2300      	movs	r3, #0
 80044e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 80044e4:	e759      	b.n	800439a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	2320      	movs	r3, #32
 80044e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80044ec:	2300      	movs	r3, #0
 80044ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80044f2:	2001      	movs	r0, #1
 80044f4:	e751      	b.n	800439a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80044f6:	2002      	movs	r0, #2
 80044f8:	e74f      	b.n	800439a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80044fa:	2002      	movs	r0, #2
 80044fc:	e74d      	b.n	800439a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80044fe:	2001      	movs	r0, #1
 8004500:	e74b      	b.n	800439a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8004502:	2001      	movs	r0, #1
 8004504:	e749      	b.n	800439a <HAL_I2C_IsDeviceReady+0x1e>
 8004506:	bf00      	nop
 8004508:	00100002 	.word	0x00100002
 800450c:	ffff0000 	.word	0xffff0000

08004510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004510:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <RCC_Delay+0x24>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <RCC_Delay+0x28>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	0a5b      	lsrs	r3, r3, #9
 800451e:	fb00 f303 	mul.w	r3, r0, r3
 8004522:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004524:	bf00      	nop
  }
  while (Delay --);
 8004526:	9b01      	ldr	r3, [sp, #4]
 8004528:	1e5a      	subs	r2, r3, #1
 800452a:	9201      	str	r2, [sp, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f9      	bne.n	8004524 <RCC_Delay+0x14>
}
 8004530:	b002      	add	sp, #8
 8004532:	4770      	bx	lr
 8004534:	20000020 	.word	0x20000020
 8004538:	10624dd3 	.word	0x10624dd3

0800453c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800453c:	2800      	cmp	r0, #0
 800453e:	f000 81f1 	beq.w	8004924 <HAL_RCC_OscConfig+0x3e8>
{
 8004542:	b570      	push	{r4, r5, r6, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004548:	6803      	ldr	r3, [r0, #0]
 800454a:	f013 0f01 	tst.w	r3, #1
 800454e:	d02c      	beq.n	80045aa <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004550:	4b99      	ldr	r3, [pc, #612]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b04      	cmp	r3, #4
 800455a:	d01d      	beq.n	8004598 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800455c:	4b96      	ldr	r3, [pc, #600]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b08      	cmp	r3, #8
 8004566:	d012      	beq.n	800458e <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004568:	6863      	ldr	r3, [r4, #4]
 800456a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456e:	d041      	beq.n	80045f4 <HAL_RCC_OscConfig+0xb8>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d155      	bne.n	8004620 <HAL_RCC_OscConfig+0xe4>
 8004574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004578:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e037      	b.n	80045fe <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800458e:	4b8a      	ldr	r3, [pc, #552]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004596:	d0e7      	beq.n	8004568 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	4b87      	ldr	r3, [pc, #540]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045a0:	d003      	beq.n	80045aa <HAL_RCC_OscConfig+0x6e>
 80045a2:	6863      	ldr	r3, [r4, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 81bf 	beq.w	8004928 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	f013 0f02 	tst.w	r3, #2
 80045b0:	d075      	beq.n	800469e <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b2:	4b81      	ldr	r3, [pc, #516]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f013 0f0c 	tst.w	r3, #12
 80045ba:	d05f      	beq.n	800467c <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045bc:	4b7e      	ldr	r3, [pc, #504]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d054      	beq.n	8004672 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c8:	6923      	ldr	r3, [r4, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 808a 	beq.w	80046e4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80045d0:	4b7a      	ldr	r3, [pc, #488]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045d6:	f7fe ff2d 	bl	8003434 <HAL_GetTick>
 80045da:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045dc:	4b76      	ldr	r3, [pc, #472]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f013 0f02 	tst.w	r3, #2
 80045e4:	d175      	bne.n	80046d2 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e6:	f7fe ff25 	bl	8003434 <HAL_GetTick>
 80045ea:	1b40      	subs	r0, r0, r5
 80045ec:	2802      	cmp	r0, #2
 80045ee:	d9f5      	bls.n	80045dc <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80045f0:	2003      	movs	r0, #3
 80045f2:	e19e      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f4:	4a70      	ldr	r2, [pc, #448]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	b343      	cbz	r3, 8004654 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8004602:	f7fe ff17 	bl	8003434 <HAL_GetTick>
 8004606:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004608:	4b6b      	ldr	r3, [pc, #428]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004610:	d1cb      	bne.n	80045aa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004612:	f7fe ff0f 	bl	8003434 <HAL_GetTick>
 8004616:	1b40      	subs	r0, r0, r5
 8004618:	2864      	cmp	r0, #100	; 0x64
 800461a:	d9f5      	bls.n	8004608 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800461c:	2003      	movs	r0, #3
 800461e:	e188      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004624:	d009      	beq.n	800463a <HAL_RCC_OscConfig+0xfe>
 8004626:	4b64      	ldr	r3, [pc, #400]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e7e1      	b.n	80045fe <HAL_RCC_OscConfig+0xc2>
 800463a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800463e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e7d4      	b.n	80045fe <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8004654:	f7fe feee 	bl	8003434 <HAL_GetTick>
 8004658:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	4b57      	ldr	r3, [pc, #348]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004662:	d0a2      	beq.n	80045aa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fe fee6 	bl	8003434 <HAL_GetTick>
 8004668:	1b40      	subs	r0, r0, r5
 800466a:	2864      	cmp	r0, #100	; 0x64
 800466c:	d9f5      	bls.n	800465a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 800466e:	2003      	movs	r0, #3
 8004670:	e15f      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004672:	4b51      	ldr	r3, [pc, #324]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800467a:	d1a5      	bne.n	80045c8 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467c:	4b4e      	ldr	r3, [pc, #312]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f013 0f02 	tst.w	r3, #2
 8004684:	d003      	beq.n	800468e <HAL_RCC_OscConfig+0x152>
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	2b01      	cmp	r3, #1
 800468a:	f040 814f 	bne.w	800492c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468e:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004696:	6961      	ldr	r1, [r4, #20]
 8004698:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800469c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	f013 0f08 	tst.w	r3, #8
 80046a4:	d033      	beq.n	800470e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046a6:	69a3      	ldr	r3, [r4, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d05c      	beq.n	8004766 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80046ac:	4b43      	ldr	r3, [pc, #268]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80046b4:	f7fe febe 	bl	8003434 <HAL_GetTick>
 80046b8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ba:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f013 0f02 	tst.w	r3, #2
 80046c2:	d121      	bne.n	8004708 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fe feb6 	bl	8003434 <HAL_GetTick>
 80046c8:	1b40      	subs	r0, r0, r5
 80046ca:	2802      	cmp	r0, #2
 80046cc:	d9f5      	bls.n	80046ba <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80046ce:	2003      	movs	r0, #3
 80046d0:	e12f      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d2:	4a39      	ldr	r2, [pc, #228]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 80046d4:	6813      	ldr	r3, [r2, #0]
 80046d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80046da:	6961      	ldr	r1, [r4, #20]
 80046dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e7dc      	b.n	800469e <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80046e4:	4b35      	ldr	r3, [pc, #212]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80046ea:	f7fe fea3 	bl	8003434 <HAL_GetTick>
 80046ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f0:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f013 0f02 	tst.w	r3, #2
 80046f8:	d0d1      	beq.n	800469e <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046fa:	f7fe fe9b 	bl	8003434 <HAL_GetTick>
 80046fe:	1b40      	subs	r0, r0, r5
 8004700:	2802      	cmp	r0, #2
 8004702:	d9f5      	bls.n	80046f0 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8004704:	2003      	movs	r0, #3
 8004706:	e114      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8004708:	2001      	movs	r0, #1
 800470a:	f7ff ff01 	bl	8004510 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	f013 0f04 	tst.w	r3, #4
 8004714:	f000 8096 	beq.w	8004844 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004720:	d134      	bne.n	800478c <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004722:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800472a:	61da      	str	r2, [r3, #28]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004736:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <HAL_RCC_OscConfig+0x284>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004740:	d026      	beq.n	8004790 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004742:	68e3      	ldr	r3, [r4, #12]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d03d      	beq.n	80047c4 <HAL_RCC_OscConfig+0x288>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d153      	bne.n	80047f4 <HAL_RCC_OscConfig+0x2b8>
 800474c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004750:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	621a      	str	r2, [r3, #32]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	f022 0204 	bic.w	r2, r2, #4
 8004762:	621a      	str	r2, [r3, #32]
 8004764:	e033      	b.n	80047ce <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <HAL_RCC_OscConfig+0x280>)
 8004768:	2200      	movs	r2, #0
 800476a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800476e:	f7fe fe61 	bl	8003434 <HAL_GetTick>
 8004772:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HAL_RCC_OscConfig+0x27c>)
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	f013 0f02 	tst.w	r3, #2
 800477c:	d0c7      	beq.n	800470e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477e:	f7fe fe59 	bl	8003434 <HAL_GetTick>
 8004782:	1b40      	subs	r0, r0, r5
 8004784:	2802      	cmp	r0, #2
 8004786:	d9f5      	bls.n	8004774 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8004788:	2003      	movs	r0, #3
 800478a:	e0d2      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 800478c:	2500      	movs	r5, #0
 800478e:	e7d3      	b.n	8004738 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004790:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x284>)
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004798:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800479a:	f7fe fe4b 	bl	8003434 <HAL_GetTick>
 800479e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <HAL_RCC_OscConfig+0x284>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047a8:	d1cb      	bne.n	8004742 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047aa:	f7fe fe43 	bl	8003434 <HAL_GetTick>
 80047ae:	1b80      	subs	r0, r0, r6
 80047b0:	2864      	cmp	r0, #100	; 0x64
 80047b2:	d9f5      	bls.n	80047a0 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80047b4:	2003      	movs	r0, #3
 80047b6:	e0bc      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
 80047b8:	40021000 	.word	0x40021000
 80047bc:	42420000 	.word	0x42420000
 80047c0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c4:	4a5f      	ldr	r2, [pc, #380]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 80047c6:	6a13      	ldr	r3, [r2, #32]
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	b333      	cbz	r3, 8004820 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80047d2:	f7fe fe2f 	bl	8003434 <HAL_GetTick>
 80047d6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d8:	4b5a      	ldr	r3, [pc, #360]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f013 0f02 	tst.w	r3, #2
 80047e0:	d12f      	bne.n	8004842 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fe fe27 	bl	8003434 <HAL_GetTick>
 80047e6:	1b80      	subs	r0, r0, r6
 80047e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80047ec:	4298      	cmp	r0, r3
 80047ee:	d9f3      	bls.n	80047d8 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 80047f0:	2003      	movs	r0, #3
 80047f2:	e09e      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d009      	beq.n	800480c <HAL_RCC_OscConfig+0x2d0>
 80047f8:	4b52      	ldr	r3, [pc, #328]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	621a      	str	r2, [r3, #32]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	f022 0204 	bic.w	r2, r2, #4
 8004808:	621a      	str	r2, [r3, #32]
 800480a:	e7e0      	b.n	80047ce <HAL_RCC_OscConfig+0x292>
 800480c:	4b4d      	ldr	r3, [pc, #308]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	f042 0204 	orr.w	r2, r2, #4
 8004814:	621a      	str	r2, [r3, #32]
 8004816:	6a1a      	ldr	r2, [r3, #32]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	621a      	str	r2, [r3, #32]
 800481e:	e7d6      	b.n	80047ce <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8004820:	f7fe fe08 	bl	8003434 <HAL_GetTick>
 8004824:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f013 0f02 	tst.w	r3, #2
 800482e:	d008      	beq.n	8004842 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004830:	f7fe fe00 	bl	8003434 <HAL_GetTick>
 8004834:	1b80      	subs	r0, r0, r6
 8004836:	f241 3388 	movw	r3, #5000	; 0x1388
 800483a:	4298      	cmp	r0, r3
 800483c:	d9f3      	bls.n	8004826 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800483e:	2003      	movs	r0, #3
 8004840:	e077      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8004842:	b9e5      	cbnz	r5, 800487e <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004844:	69e3      	ldr	r3, [r4, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d072      	beq.n	8004930 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484a:	4a3e      	ldr	r2, [pc, #248]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 800484c:	6852      	ldr	r2, [r2, #4]
 800484e:	f002 020c 	and.w	r2, r2, #12
 8004852:	2a08      	cmp	r2, #8
 8004854:	d056      	beq.n	8004904 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004856:	2b02      	cmp	r3, #2
 8004858:	d017      	beq.n	800488a <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <HAL_RCC_OscConfig+0x40c>)
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004860:	f7fe fde8 	bl	8003434 <HAL_GetTick>
 8004864:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004866:	4b37      	ldr	r3, [pc, #220]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800486e:	d047      	beq.n	8004900 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004870:	f7fe fde0 	bl	8003434 <HAL_GetTick>
 8004874:	1b00      	subs	r0, r0, r4
 8004876:	2802      	cmp	r0, #2
 8004878:	d9f5      	bls.n	8004866 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800487a:	2003      	movs	r0, #3
 800487c:	e059      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4a31      	ldr	r2, [pc, #196]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 8004880:	69d3      	ldr	r3, [r2, #28]
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004886:	61d3      	str	r3, [r2, #28]
 8004888:	e7dc      	b.n	8004844 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <HAL_RCC_OscConfig+0x40c>)
 800488c:	2200      	movs	r2, #0
 800488e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004890:	f7fe fdd0 	bl	8003434 <HAL_GetTick>
 8004894:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004896:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800489e:	d006      	beq.n	80048ae <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fe fdc8 	bl	8003434 <HAL_GetTick>
 80048a4:	1b40      	subs	r0, r0, r5
 80048a6:	2802      	cmp	r0, #2
 80048a8:	d9f5      	bls.n	8004896 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80048aa:	2003      	movs	r0, #3
 80048ac:	e041      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048ae:	6a23      	ldr	r3, [r4, #32]
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d01a      	beq.n	80048ec <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b6:	4923      	ldr	r1, [pc, #140]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 80048b8:	684b      	ldr	r3, [r1, #4]
 80048ba:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80048be:	6a22      	ldr	r2, [r4, #32]
 80048c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80048c2:	4302      	orrs	r2, r0
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <HAL_RCC_OscConfig+0x40c>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80048ce:	f7fe fdb1 	bl	8003434 <HAL_GetTick>
 80048d2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80048dc:	d10e      	bne.n	80048fc <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048de:	f7fe fda9 	bl	8003434 <HAL_GetTick>
 80048e2:	1b00      	subs	r0, r0, r4
 80048e4:	2802      	cmp	r0, #2
 80048e6:	d9f5      	bls.n	80048d4 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80048e8:	2003      	movs	r0, #3
 80048ea:	e022      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 80048ee:	6853      	ldr	r3, [r2, #4]
 80048f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048f4:	68a1      	ldr	r1, [r4, #8]
 80048f6:	430b      	orrs	r3, r1
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	e7dc      	b.n	80048b6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80048fc:	2000      	movs	r0, #0
 80048fe:	e018      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
 8004900:	2000      	movs	r0, #0
 8004902:	e016      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004904:	2b01      	cmp	r3, #1
 8004906:	d016      	beq.n	8004936 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <HAL_RCC_OscConfig+0x408>)
 800490a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004910:	6a22      	ldr	r2, [r4, #32]
 8004912:	4291      	cmp	r1, r2
 8004914:	d111      	bne.n	800493a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004916:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800491a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491c:	4293      	cmp	r3, r2
 800491e:	d10e      	bne.n	800493e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8004920:	2000      	movs	r0, #0
 8004922:	e006      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8004924:	2001      	movs	r0, #1
}
 8004926:	4770      	bx	lr
        return HAL_ERROR;
 8004928:	2001      	movs	r0, #1
 800492a:	e002      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800492c:	2001      	movs	r0, #1
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8004930:	2000      	movs	r0, #0
}
 8004932:	b002      	add	sp, #8
 8004934:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004936:	2001      	movs	r0, #1
 8004938:	e7fb      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800493a:	2001      	movs	r0, #1
 800493c:	e7f9      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
 800493e:	2001      	movs	r0, #1
 8004940:	e7f7      	b.n	8004932 <HAL_RCC_OscConfig+0x3f6>
 8004942:	bf00      	nop
 8004944:	40021000 	.word	0x40021000
 8004948:	42420000 	.word	0x42420000

0800494c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800494c:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_RCC_GetSysClockFreq+0x40>)
 800494e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004950:	f003 020c 	and.w	r2, r3, #12
 8004954:	2a08      	cmp	r2, #8
 8004956:	d001      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004958:	480d      	ldr	r0, [pc, #52]	; (8004990 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800495a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800495c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004960:	490c      	ldr	r1, [pc, #48]	; (8004994 <HAL_RCC_GetSysClockFreq+0x48>)
 8004962:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004964:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004968:	d00b      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800496a:	4b08      	ldr	r3, [pc, #32]	; (800498c <HAL_RCC_GetSysClockFreq+0x40>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004972:	4a09      	ldr	r2, [pc, #36]	; (8004998 <HAL_RCC_GetSysClockFreq+0x4c>)
 8004974:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004976:	4a06      	ldr	r2, [pc, #24]	; (8004990 <HAL_RCC_GetSysClockFreq+0x44>)
 8004978:	fb02 f000 	mul.w	r0, r2, r0
 800497c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004980:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <HAL_RCC_GetSysClockFreq+0x50>)
 8004984:	fb03 f000 	mul.w	r0, r3, r0
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	007a1200 	.word	0x007a1200
 8004994:	08009fb0 	.word	0x08009fb0
 8004998:	08009fc0 	.word	0x08009fc0
 800499c:	003d0900 	.word	0x003d0900

080049a0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80049a0:	2800      	cmp	r0, #0
 80049a2:	f000 80a0 	beq.w	8004ae6 <HAL_RCC_ClockConfig+0x146>
{
 80049a6:	b570      	push	{r4, r5, r6, lr}
 80049a8:	460d      	mov	r5, r1
 80049aa:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b52      	ldr	r3, [pc, #328]	; (8004af8 <HAL_RCC_ClockConfig+0x158>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	428b      	cmp	r3, r1
 80049b6:	d20b      	bcs.n	80049d0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b8:	4a4f      	ldr	r2, [pc, #316]	; (8004af8 <HAL_RCC_ClockConfig+0x158>)
 80049ba:	6813      	ldr	r3, [r2, #0]
 80049bc:	f023 0307 	bic.w	r3, r3, #7
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c4:	6813      	ldr	r3, [r2, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	428b      	cmp	r3, r1
 80049cc:	f040 808d 	bne.w	8004aea <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	f013 0f02 	tst.w	r3, #2
 80049d6:	d017      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	f013 0f04 	tst.w	r3, #4
 80049dc:	d004      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049de:	4a47      	ldr	r2, [pc, #284]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 80049e0:	6853      	ldr	r3, [r2, #4]
 80049e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049e6:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	f013 0f08 	tst.w	r3, #8
 80049ee:	d004      	beq.n	80049fa <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f0:	4a42      	ldr	r2, [pc, #264]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 80049f2:	6853      	ldr	r3, [r2, #4]
 80049f4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049f8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049fa:	4a40      	ldr	r2, [pc, #256]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 80049fc:	6853      	ldr	r3, [r2, #4]
 80049fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a02:	68a1      	ldr	r1, [r4, #8]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	f013 0f01 	tst.w	r3, #1
 8004a0e:	d031      	beq.n	8004a74 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a10:	6863      	ldr	r3, [r4, #4]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d020      	beq.n	8004a58 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d025      	beq.n	8004a66 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1a:	4a38      	ldr	r2, [pc, #224]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	f012 0f02 	tst.w	r2, #2
 8004a22:	d064      	beq.n	8004aee <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a24:	4935      	ldr	r1, [pc, #212]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 8004a26:	684a      	ldr	r2, [r1, #4]
 8004a28:	f022 0203 	bic.w	r2, r2, #3
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004a30:	f7fe fd00 	bl	8003434 <HAL_GetTick>
 8004a34:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	4b31      	ldr	r3, [pc, #196]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	6862      	ldr	r2, [r4, #4]
 8004a40:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a44:	d016      	beq.n	8004a74 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a46:	f7fe fcf5 	bl	8003434 <HAL_GetTick>
 8004a4a:	1b80      	subs	r0, r0, r6
 8004a4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a50:	4298      	cmp	r0, r3
 8004a52:	d9f0      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004a54:	2003      	movs	r0, #3
 8004a56:	e045      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a58:	4a28      	ldr	r2, [pc, #160]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004a60:	d1e0      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004a62:	2001      	movs	r0, #1
 8004a64:	e03e      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	4a25      	ldr	r2, [pc, #148]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004a6e:	d1d9      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004a70:	2001      	movs	r0, #1
 8004a72:	e037      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a74:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <HAL_RCC_ClockConfig+0x158>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	42ab      	cmp	r3, r5
 8004a7e:	d90a      	bls.n	8004a96 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a80:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <HAL_RCC_ClockConfig+0x158>)
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f023 0307 	bic.w	r3, r3, #7
 8004a88:	432b      	orrs	r3, r5
 8004a8a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8c:	6813      	ldr	r3, [r2, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	42ab      	cmp	r3, r5
 8004a94:	d12d      	bne.n	8004af2 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	f013 0f04 	tst.w	r3, #4
 8004a9c:	d006      	beq.n	8004aac <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 8004aa0:	6853      	ldr	r3, [r2, #4]
 8004aa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004aa6:	68e1      	ldr	r1, [r4, #12]
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	f013 0f08 	tst.w	r3, #8
 8004ab2:	d007      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ab4:	4a11      	ldr	r2, [pc, #68]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 8004ab6:	6853      	ldr	r3, [r2, #4]
 8004ab8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004abc:	6921      	ldr	r1, [r4, #16]
 8004abe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ac2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ac4:	f7ff ff42 	bl	800494c <HAL_RCC_GetSysClockFreq>
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <HAL_RCC_ClockConfig+0x15c>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ad0:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <HAL_RCC_ClockConfig+0x160>)
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	40d8      	lsrs	r0, r3
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_ClockConfig+0x164>)
 8004ad8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_RCC_ClockConfig+0x168>)
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f7fe fb99 	bl	8003214 <HAL_InitTick>
  return HAL_OK;
 8004ae2:	2000      	movs	r0, #0
}
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004ae6:	2001      	movs	r0, #1
}
 8004ae8:	4770      	bx	lr
    return HAL_ERROR;
 8004aea:	2001      	movs	r0, #1
 8004aec:	e7fa      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004aee:	2001      	movs	r0, #1
 8004af0:	e7f8      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004af2:	2001      	movs	r0, #1
 8004af4:	e7f6      	b.n	8004ae4 <HAL_RCC_ClockConfig+0x144>
 8004af6:	bf00      	nop
 8004af8:	40022000 	.word	0x40022000
 8004afc:	40021000 	.word	0x40021000
 8004b00:	08009f98 	.word	0x08009f98
 8004b04:	20000020 	.word	0x20000020
 8004b08:	200007c0 	.word	0x200007c0

08004b0c <HAL_RCC_GetHCLKFreq>:
}
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <HAL_RCC_GetHCLKFreq+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000020 	.word	0x20000020

08004b18 <HAL_RCC_GetPCLK1Freq>:
{
 8004b18:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b1a:	f7ff fff7 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b1e:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b26:	4a03      	ldr	r2, [pc, #12]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b28:	5cd3      	ldrb	r3, [r2, r3]
}
 8004b2a:	40d8      	lsrs	r0, r3
 8004b2c:	bd08      	pop	{r3, pc}
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000
 8004b34:	08009fa8 	.word	0x08009fa8

08004b38 <HAL_RCC_GetPCLK2Freq>:
{
 8004b38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b3a:	f7ff ffe7 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b3e:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004b46:	4a03      	ldr	r2, [pc, #12]	; (8004b54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b48:	5cd3      	ldrb	r3, [r2, r3]
}
 8004b4a:	40d8      	lsrs	r0, r3
 8004b4c:	bd08      	pop	{r3, pc}
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
 8004b54:	08009fa8 	.word	0x08009fa8

08004b58 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b58:	230f      	movs	r3, #15
 8004b5a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_GetClockConfig+0x34>)
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	f002 0203 	and.w	r2, r2, #3
 8004b64:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004b6c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004b74:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	08db      	lsrs	r3, r3, #3
 8004b7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b7e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <HAL_RCC_GetClockConfig+0x38>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	600b      	str	r3, [r1, #0]
}
 8004b8a:	4770      	bx	lr
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40022000 	.word	0x40022000

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b9a:	6803      	ldr	r3, [r0, #0]
 8004b9c:	f013 0f01 	tst.w	r3, #1
 8004ba0:	d036      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba2:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004baa:	d149      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bac:	4b3c      	ldr	r3, [pc, #240]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bb4:	61da      	str	r2, [r3, #28]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004bc0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004bca:	d03b      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bcc:	4b34      	ldr	r3, [pc, #208]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bd0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004bd4:	d013      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004bd6:	6862      	ldr	r2, [r4, #4]
 8004bd8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d00e      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004be0:	4a2f      	ldr	r2, [pc, #188]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004be2:	6a13      	ldr	r3, [r2, #32]
 8004be4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004be8:	492f      	ldr	r1, [pc, #188]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004bea:	2601      	movs	r6, #1
 8004bec:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf0:	2600      	movs	r6, #0
 8004bf2:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bf6:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bf8:	f013 0f01 	tst.w	r3, #1
 8004bfc:	d136      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bfe:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004c00:	6a13      	ldr	r3, [r2, #32]
 8004c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c06:	6861      	ldr	r1, [r4, #4]
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	d13e      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	f013 0f02 	tst.w	r3, #2
 8004c16:	d006      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c18:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004c1a:	6853      	ldr	r3, [r2, #4]
 8004c1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c20:	68a1      	ldr	r1, [r4, #8]
 8004c22:	430b      	orrs	r3, r1
 8004c24:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	f013 0f10 	tst.w	r3, #16
 8004c2c:	d034      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004c30:	6853      	ldr	r3, [r2, #4]
 8004c32:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004c36:	68e1      	ldr	r1, [r4, #12]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e02c      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004c40:	2500      	movs	r5, #0
 8004c42:	e7be      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c44:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004c46:	6813      	ldr	r3, [r2, #0]
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004c4e:	f7fe fbf1 	bl	8003434 <HAL_GetTick>
 8004c52:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c5c:	d1b6      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5e:	f7fe fbe9 	bl	8003434 <HAL_GetTick>
 8004c62:	1b80      	subs	r0, r0, r6
 8004c64:	2864      	cmp	r0, #100	; 0x64
 8004c66:	d9f5      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004c68:	2003      	movs	r0, #3
 8004c6a:	e016      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fbe2 	bl	8003434 <HAL_GetTick>
 8004c70:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c72:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f013 0f02 	tst.w	r3, #2
 8004c7a:	d1c0      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f7fe fbda 	bl	8003434 <HAL_GetTick>
 8004c80:	1b80      	subs	r0, r0, r6
 8004c82:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c86:	4298      	cmp	r0, r3
 8004c88:	d9f3      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8004c8a:	2003      	movs	r0, #3
 8004c8c:	e005      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8e:	69d3      	ldr	r3, [r2, #28]
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c94:	61d3      	str	r3, [r2, #28]
 8004c96:	e7bb      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8004c98:	2000      	movs	r0, #0
}
 8004c9a:	b002      	add	sp, #8
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	42420000 	.word	0x42420000

08004cac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cac:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004cae:	2802      	cmp	r0, #2
 8004cb0:	d04e      	beq.n	8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8004cb2:	2810      	cmp	r0, #16
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8004cb6:	2801      	cmp	r0, #1
 8004cb8:	d028      	beq.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8004cba:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004cbc:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004cc0:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004cc8:	d0f8      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cca:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004cce:	4928      	ldr	r1, [pc, #160]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004cd0:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cd2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cd8:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004ce0:	4a24      	ldr	r2, [pc, #144]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8004ce2:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8004ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cea:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004cee:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004cf6:	d1e1      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8004cf8:	0040      	lsls	r0, r0, #1
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8004cfc:	fba3 3000 	umull	r3, r0, r3, r0
 8004d00:	0840      	lsrs	r0, r0, #1
 8004d02:	e7db      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d04:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8004d06:	fb03 f000 	mul.w	r0, r3, r0
 8004d0a:	e7f0      	b.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8004d0c:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004d10:	f240 3202 	movw	r2, #770	; 0x302
 8004d14:	401a      	ands	r2, r3
 8004d16:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004d1a:	d024      	beq.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d004      	beq.n	8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2a:	d009      	beq.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	e7c5      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004d30:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d34:	f012 0f02 	tst.w	r2, #2
 8004d38:	d0f5      	beq.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8004d3a:	f649 4040 	movw	r0, #40000	; 0x9c40
 8004d3e:	e7bd      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004d48:	d0b8      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 8004d4a:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 8004d4e:	e7b5      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004d50:	f7ff fef2 	bl	8004b38 <HAL_RCC_GetPCLK2Freq>
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004d64:	e7aa      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 8004d66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d6a:	e7a7      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	08009fc4 	.word	0x08009fc4
 8004d74:	08009fd4 	.word	0x08009fd4
 8004d78:	007a1200 	.word	0x007a1200
 8004d7c:	aaaaaaab 	.word	0xaaaaaaab
 8004d80:	003d0900 	.word	0x003d0900

08004d84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	4688      	mov	r8, r1
 8004d8e:	4617      	mov	r7, r2
 8004d90:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d92:	f7fe fb4f 	bl	8003434 <HAL_GetTick>
 8004d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d98:	1a1b      	subs	r3, r3, r0
 8004d9a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8004d9e:	f7fe fb49 	bl	8003434 <HAL_GetTick>
 8004da2:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004da4:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004dac:	fb09 f303 	mul.w	r3, r9, r3
 8004db0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	689c      	ldr	r4, [r3, #8]
 8004db6:	ea38 0404 	bics.w	r4, r8, r4
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	42bb      	cmp	r3, r7
 8004dc2:	d040      	beq.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004dc8:	d0f3      	beq.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dca:	f7fe fb33 	bl	8003434 <HAL_GetTick>
 8004dce:	eba0 000a 	sub.w	r0, r0, sl
 8004dd2:	4548      	cmp	r0, r9
 8004dd4:	d20a      	bcs.n	8004dec <SPI_WaitFlagStateUntilTimeout+0x68>
 8004dd6:	f1b9 0f00 	cmp.w	r9, #0
 8004dda:	d007      	beq.n	8004dec <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ddc:	9a01      	ldr	r2, [sp, #4]
 8004dde:	b102      	cbz	r2, 8004de2 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8004de0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8004de2:	9b01      	ldr	r3, [sp, #4]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	4691      	mov	r9, r2
 8004dea:	e7e2      	b.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dec:	682a      	ldr	r2, [r5, #0]
 8004dee:	6853      	ldr	r3, [r2, #4]
 8004df0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004df4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df6:	686b      	ldr	r3, [r5, #4]
 8004df8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfc:	d00b      	beq.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e04:	d014      	beq.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8004e12:	2003      	movs	r0, #3
 8004e14:	e018      	b.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e16:	68ab      	ldr	r3, [r5, #8]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	d002      	beq.n	8004e24 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e22:	d1ec      	bne.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004e24:	682a      	ldr	r2, [r5, #0]
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	e7e6      	b.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004e30:	682a      	ldr	r2, [r5, #0]
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	682a      	ldr	r2, [r5, #0]
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e7df      	b.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8004e46:	2000      	movs	r0, #0
}
 8004e48:	b002      	add	sp, #8
 8004e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000020 	.word	0x20000020

08004e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b510      	push	{r4, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	4604      	mov	r4, r0
 8004e5a:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5c:	9200      	str	r2, [sp, #0]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2180      	movs	r1, #128	; 0x80
 8004e62:	f7ff ff8f 	bl	8004d84 <SPI_WaitFlagStateUntilTimeout>
 8004e66:	b908      	cbnz	r0, 8004e6c <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e6e:	f043 0320 	orr.w	r3, r3, #32
 8004e72:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8004e74:	2003      	movs	r0, #3
 8004e76:	e7f7      	b.n	8004e68 <SPI_EndRxTxTransaction+0x14>

08004e78 <SPI_EndRxTransaction>:
{
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e80:	6841      	ldr	r1, [r0, #4]
 8004e82:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004e86:	d010      	beq.n	8004eaa <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004e88:	6861      	ldr	r1, [r4, #4]
 8004e8a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004e8e:	d103      	bne.n	8004e98 <SPI_EndRxTransaction+0x20>
 8004e90:	68a1      	ldr	r1, [r4, #8]
 8004e92:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e96:	d015      	beq.n	8004ec4 <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e98:	9200      	str	r2, [sp, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f7ff ff70 	bl	8004d84 <SPI_WaitFlagStateUntilTimeout>
 8004ea4:	b9e0      	cbnz	r0, 8004ee0 <SPI_EndRxTransaction+0x68>
}
 8004ea6:	b002      	add	sp, #8
 8004ea8:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eaa:	6881      	ldr	r1, [r0, #8]
 8004eac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004eb0:	d002      	beq.n	8004eb8 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004eb2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004eb6:	d1e7      	bne.n	8004e88 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	6801      	ldr	r1, [r0, #0]
 8004ebc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004ec0:	6001      	str	r1, [r0, #0]
 8004ec2:	e7e1      	b.n	8004e88 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec4:	9200      	str	r2, [sp, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2101      	movs	r1, #1
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7ff ff5a 	bl	8004d84 <SPI_WaitFlagStateUntilTimeout>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d0e8      	beq.n	8004ea6 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ed4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ed6:	f043 0320 	orr.w	r3, r3, #32
 8004eda:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004edc:	2003      	movs	r0, #3
 8004ede:	e7e2      	b.n	8004ea6 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ee2:	f043 0320 	orr.w	r3, r3, #32
 8004ee6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ee8:	2003      	movs	r0, #3
 8004eea:	e7dc      	b.n	8004ea6 <SPI_EndRxTransaction+0x2e>

08004eec <HAL_SPI_Init>:
  if (hspi == NULL)
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d056      	beq.n	8004f9e <HAL_SPI_Init+0xb2>
{
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ef6:	b933      	cbnz	r3, 8004f06 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef8:	6843      	ldr	r3, [r0, #4]
 8004efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efe:	d005      	beq.n	8004f0c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61c3      	str	r3, [r0, #28]
 8004f04:	e002      	b.n	8004f0c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f06:	2300      	movs	r3, #0
 8004f08:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f0a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f10:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d03c      	beq.n	8004f92 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f26:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004f2e:	68a2      	ldr	r2, [r4, #8]
 8004f30:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8004f34:	4313      	orrs	r3, r2
 8004f36:	68e2      	ldr	r2, [r4, #12]
 8004f38:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	6922      	ldr	r2, [r4, #16]
 8004f40:	f002 0202 	and.w	r2, r2, #2
 8004f44:	4313      	orrs	r3, r2
 8004f46:	6962      	ldr	r2, [r4, #20]
 8004f48:	f002 0201 	and.w	r2, r2, #1
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	69a2      	ldr	r2, [r4, #24]
 8004f50:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004f54:	4313      	orrs	r3, r2
 8004f56:	69e2      	ldr	r2, [r4, #28]
 8004f58:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	6a22      	ldr	r2, [r4, #32]
 8004f60:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004f64:	4313      	orrs	r3, r2
 8004f66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004f6c:	6821      	ldr	r1, [r4, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004f72:	8b63      	ldrh	r3, [r4, #26]
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	69d3      	ldr	r3, [r2, #28]
 8004f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f84:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f86:	2000      	movs	r0, #0
 8004f88:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004f90:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004f92:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7fe f8ac 	bl	80030f4 <HAL_SPI_MspInit>
 8004f9c:	e7bc      	b.n	8004f18 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004f9e:	2001      	movs	r0, #1
}
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_SPI_Transmit>:
{
 8004fa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004faa:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	f000 80d1 	beq.w	8005156 <HAL_SPI_Transmit+0x1b4>
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	4688      	mov	r8, r1
 8004fb8:	4691      	mov	r9, r2
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004fc0:	f7fe fa38 	bl	8003434 <HAL_GetTick>
 8004fc4:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004fc6:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8004fca:	b2f6      	uxtb	r6, r6
 8004fcc:	2e01      	cmp	r6, #1
 8004fce:	f040 80ba 	bne.w	8005146 <HAL_SPI_Transmit+0x1a4>
  if ((pData == NULL) || (Size == 0U))
 8004fd2:	f1b8 0f00 	cmp.w	r8, #0
 8004fd6:	f000 80b7 	beq.w	8005148 <HAL_SPI_Transmit+0x1a6>
 8004fda:	f1b9 0f00 	cmp.w	r9, #0
 8004fde:	f000 80b3 	beq.w	8005148 <HAL_SPI_Transmit+0x1a6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fec:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ff0:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ff4:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ff8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ffa:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ffc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ffe:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005000:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005008:	d01e      	beq.n	8005048 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005012:	d103      	bne.n	800501c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800501c:	68e3      	ldr	r3, [r4, #12]
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d01c      	beq.n	800505e <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	b113      	cbz	r3, 800502e <HAL_SPI_Transmit+0x8c>
 8005028:	f1b9 0f01 	cmp.w	r9, #1
 800502c:	d155      	bne.n	80050da <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800502e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005036:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005038:	3301      	adds	r3, #1
 800503a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800503c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29b      	uxth	r3, r3
 8005044:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005046:	e048      	b.n	80050da <HAL_SPI_Transmit+0x138>
    __HAL_SPI_DISABLE(hspi);
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005050:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e7d5      	b.n	800500a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	b113      	cbz	r3, 8005068 <HAL_SPI_Transmit+0xc6>
 8005062:	f1b9 0f01 	cmp.w	r9, #1
 8005066:	d115      	bne.n	8005094 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005068:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	8812      	ldrh	r2, [r2, #0]
 800506e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005070:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005072:	3302      	adds	r3, #2
 8005074:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005076:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005080:	e008      	b.n	8005094 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005082:	f7fe f9d7 	bl	8003434 <HAL_GetTick>
 8005086:	1bc0      	subs	r0, r0, r7
 8005088:	42a8      	cmp	r0, r5
 800508a:	d302      	bcc.n	8005092 <HAL_SPI_Transmit+0xf0>
 800508c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005090:	d115      	bne.n	80050be <HAL_SPI_Transmit+0x11c>
 8005092:	b1a5      	cbz	r5, 80050be <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8005094:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d03c      	beq.n	8005116 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	f012 0f02 	tst.w	r2, #2
 80050a4:	d0ed      	beq.n	8005082 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050ae:	3302      	adds	r3, #2
 80050b0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80050b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	86e3      	strh	r3, [r4, #54]	; 0x36
 80050bc:	e7ea      	b.n	8005094 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 80050be:	2301      	movs	r3, #1
 80050c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80050c4:	2603      	movs	r6, #3
          goto error;
 80050c6:	e03f      	b.n	8005148 <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050c8:	f7fe f9b4 	bl	8003434 <HAL_GetTick>
 80050cc:	1bc0      	subs	r0, r0, r7
 80050ce:	42a8      	cmp	r0, r5
 80050d0:	d302      	bcc.n	80050d8 <HAL_SPI_Transmit+0x136>
 80050d2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80050d6:	d119      	bne.n	800510c <HAL_SPI_Transmit+0x16a>
 80050d8:	b1c5      	cbz	r5, 800510c <HAL_SPI_Transmit+0x16a>
    while (hspi->TxXferCount > 0U)
 80050da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050dc:	b29b      	uxth	r3, r3
 80050de:	b1d3      	cbz	r3, 8005116 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	f012 0f02 	tst.w	r2, #2
 80050e8:	d0ee      	beq.n	80050c8 <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050f2:	3301      	adds	r3, #1
 80050f4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80050f6:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 80050fa:	fa1f fc8c 	uxth.w	ip, ip
 80050fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005102:	fa1f fc8c 	uxth.w	ip, ip
 8005106:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 800510a:	e7e6      	b.n	80050da <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 800510c:	2301      	movs	r3, #1
 800510e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8005112:	2603      	movs	r6, #3
          goto error;
 8005114:	e018      	b.n	8005148 <HAL_SPI_Transmit+0x1a6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005116:	463a      	mov	r2, r7
 8005118:	4629      	mov	r1, r5
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff fe9a 	bl	8004e54 <SPI_EndRxTxTransaction>
 8005120:	b108      	cbz	r0, 8005126 <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005122:	2320      	movs	r3, #32
 8005124:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005126:	68a3      	ldr	r3, [r4, #8]
 8005128:	b933      	cbnz	r3, 8005138 <HAL_SPI_Transmit+0x196>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	9201      	str	r2, [sp, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005138:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800513a:	b92b      	cbnz	r3, 8005148 <HAL_SPI_Transmit+0x1a6>
    hspi->State = HAL_SPI_STATE_READY;
 800513c:	2301      	movs	r3, #1
 800513e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005142:	2600      	movs	r6, #0
 8005144:	e000      	b.n	8005148 <HAL_SPI_Transmit+0x1a6>
    errorcode = HAL_BUSY;
 8005146:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8005148:	2300      	movs	r3, #0
 800514a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800514e:	4630      	mov	r0, r6
 8005150:	b003      	add	sp, #12
 8005152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005156:	2602      	movs	r6, #2
 8005158:	e7f9      	b.n	800514e <HAL_SPI_Transmit+0x1ac>

0800515a <HAL_SPI_TransmitReceive>:
{
 800515a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800515e:	b083      	sub	sp, #12
 8005160:	461f      	mov	r7, r3
 8005162:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8005164:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005168:	2b01      	cmp	r3, #1
 800516a:	f000 8116 	beq.w	800539a <HAL_SPI_TransmitReceive+0x240>
 800516e:	4604      	mov	r4, r0
 8005170:	4688      	mov	r8, r1
 8005172:	4691      	mov	r9, r2
 8005174:	2301      	movs	r3, #1
 8005176:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800517a:	f7fe f95b 	bl	8003434 <HAL_GetTick>
 800517e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8005180:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005184:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8005186:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005188:	2b01      	cmp	r3, #1
 800518a:	d00a      	beq.n	80051a2 <HAL_SPI_TransmitReceive+0x48>
 800518c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005190:	f040 80f0 	bne.w	8005374 <HAL_SPI_TransmitReceive+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005194:	68a2      	ldr	r2, [r4, #8]
 8005196:	2a00      	cmp	r2, #0
 8005198:	f040 80f3 	bne.w	8005382 <HAL_SPI_TransmitReceive+0x228>
 800519c:	2b04      	cmp	r3, #4
 800519e:	f040 80f2 	bne.w	8005386 <HAL_SPI_TransmitReceive+0x22c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051a2:	f1b8 0f00 	cmp.w	r8, #0
 80051a6:	f000 80f0 	beq.w	800538a <HAL_SPI_TransmitReceive+0x230>
 80051aa:	f1b9 0f00 	cmp.w	r9, #0
 80051ae:	f000 80ee 	beq.w	800538e <HAL_SPI_TransmitReceive+0x234>
 80051b2:	2f00      	cmp	r7, #0
 80051b4:	f000 80ed 	beq.w	8005392 <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051b8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d002      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051c2:	2305      	movs	r3, #5
 80051c4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051cc:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051d0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051d2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051d4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051d8:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051da:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80051dc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051de:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80051e8:	d103      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051f2:	68e3      	ldr	r3, [r4, #12]
 80051f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f8:	d011      	beq.n	800521e <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051fa:	6863      	ldr	r3, [r4, #4]
 80051fc:	b10b      	cbz	r3, 8005202 <HAL_SPI_TransmitReceive+0xa8>
 80051fe:	2f01      	cmp	r7, #1
 8005200:	d10b      	bne.n	800521a <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005202:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	7812      	ldrb	r2, [r2, #0]
 8005208:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800520a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800520c:	3301      	adds	r3, #1
 800520e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005210:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29b      	uxth	r3, r3
 8005218:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800521a:	2701      	movs	r7, #1
 800521c:	e06e      	b.n	80052fc <HAL_SPI_TransmitReceive+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800521e:	6863      	ldr	r3, [r4, #4]
 8005220:	b10b      	cbz	r3, 8005226 <HAL_SPI_TransmitReceive+0xcc>
 8005222:	2f01      	cmp	r7, #1
 8005224:	d10b      	bne.n	800523e <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	8812      	ldrh	r2, [r2, #0]
 800522c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800522e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005230:	3302      	adds	r3, #2
 8005232:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005234:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29b      	uxth	r3, r3
 800523c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800523e:	2701      	movs	r7, #1
 8005240:	e01b      	b.n	800527a <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	f012 0f01 	tst.w	r2, #1
 800524a:	d00e      	beq.n	800526a <HAL_SPI_TransmitReceive+0x110>
 800524c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800524e:	b292      	uxth	r2, r2
 8005250:	b15a      	cbz	r2, 800526a <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005256:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800525a:	3302      	adds	r3, #2
 800525c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800525e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005268:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800526a:	f7fe f8e3 	bl	8003434 <HAL_GetTick>
 800526e:	1b80      	subs	r0, r0, r6
 8005270:	42a8      	cmp	r0, r5
 8005272:	d302      	bcc.n	800527a <HAL_SPI_TransmitReceive+0x120>
 8005274:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005278:	d11e      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800527a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800527c:	b29b      	uxth	r3, r3
 800527e:	b91b      	cbnz	r3, 8005288 <HAL_SPI_TransmitReceive+0x12e>
 8005280:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05c      	beq.n	8005342 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	f012 0f02 	tst.w	r2, #2
 8005290:	d0d7      	beq.n	8005242 <HAL_SPI_TransmitReceive+0xe8>
 8005292:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005294:	b292      	uxth	r2, r2
 8005296:	2a00      	cmp	r2, #0
 8005298:	d0d3      	beq.n	8005242 <HAL_SPI_TransmitReceive+0xe8>
 800529a:	2f00      	cmp	r7, #0
 800529c:	d0d1      	beq.n	8005242 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800529e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80052a0:	8812      	ldrh	r2, [r2, #0]
 80052a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052a6:	3302      	adds	r3, #2
 80052a8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80052aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80052b4:	2700      	movs	r7, #0
 80052b6:	e7c4      	b.n	8005242 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 80052be:	2003      	movs	r0, #3
        goto error;
 80052c0:	e059      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	f012 0f01 	tst.w	r2, #1
 80052ca:	d00e      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x190>
 80052cc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80052ce:	b292      	uxth	r2, r2
 80052d0:	b15a      	cbz	r2, 80052ea <HAL_SPI_TransmitReceive+0x190>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052da:	3301      	adds	r3, #1
 80052dc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80052de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80052e8:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052ea:	f7fe f8a3 	bl	8003434 <HAL_GetTick>
 80052ee:	1b83      	subs	r3, r0, r6
 80052f0:	42ab      	cmp	r3, r5
 80052f2:	d302      	bcc.n	80052fa <HAL_SPI_TransmitReceive+0x1a0>
 80052f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80052f8:	d11e      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x1de>
 80052fa:	b1ed      	cbz	r5, 8005338 <HAL_SPI_TransmitReceive+0x1de>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80052fe:	b29b      	uxth	r3, r3
 8005300:	b913      	cbnz	r3, 8005308 <HAL_SPI_TransmitReceive+0x1ae>
 8005302:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005304:	b29b      	uxth	r3, r3
 8005306:	b1e3      	cbz	r3, 8005342 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	f012 0f02 	tst.w	r2, #2
 8005310:	d0d7      	beq.n	80052c2 <HAL_SPI_TransmitReceive+0x168>
 8005312:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005314:	b292      	uxth	r2, r2
 8005316:	2a00      	cmp	r2, #0
 8005318:	d0d3      	beq.n	80052c2 <HAL_SPI_TransmitReceive+0x168>
 800531a:	2f00      	cmp	r7, #0
 800531c:	d0d1      	beq.n	80052c2 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800531e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005320:	7812      	ldrb	r2, [r2, #0]
 8005322:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005326:	3301      	adds	r3, #1
 8005328:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800532a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29b      	uxth	r3, r3
 8005332:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005334:	2700      	movs	r7, #0
 8005336:	e7c4      	b.n	80052c2 <HAL_SPI_TransmitReceive+0x168>
        hspi->State = HAL_SPI_STATE_READY;
 8005338:	2301      	movs	r3, #1
 800533a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 800533e:	2003      	movs	r0, #3
        goto error;
 8005340:	e019      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005342:	4632      	mov	r2, r6
 8005344:	4629      	mov	r1, r5
 8005346:	4620      	mov	r0, r4
 8005348:	f7ff fd84 	bl	8004e54 <SPI_EndRxTxTransaction>
 800534c:	b970      	cbnz	r0, 800536c <HAL_SPI_TransmitReceive+0x212>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	b933      	cbnz	r3, 8005360 <HAL_SPI_TransmitReceive+0x206>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	9201      	str	r2, [sp, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005360:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005362:	b9c3      	cbnz	r3, 8005396 <HAL_SPI_TransmitReceive+0x23c>
    hspi->State = HAL_SPI_STATE_READY;
 8005364:	2301      	movs	r3, #1
 8005366:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 800536a:	e004      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800536c:	2320      	movs	r3, #32
 800536e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005370:	2001      	movs	r0, #1
    goto error;
 8005372:	e000      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_BUSY;
 8005374:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005376:	2300      	movs	r3, #0
 8005378:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800537c:	b003      	add	sp, #12
 800537e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8005382:	2002      	movs	r0, #2
 8005384:	e7f7      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
 8005386:	2002      	movs	r0, #2
 8005388:	e7f5      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 800538a:	2001      	movs	r0, #1
 800538c:	e7f3      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
 800538e:	2001      	movs	r0, #1
 8005390:	e7f1      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
 8005392:	2001      	movs	r0, #1
 8005394:	e7ef      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8005396:	2001      	movs	r0, #1
 8005398:	e7ed      	b.n	8005376 <HAL_SPI_TransmitReceive+0x21c>
  __HAL_LOCK(hspi);
 800539a:	2002      	movs	r0, #2
 800539c:	e7ee      	b.n	800537c <HAL_SPI_TransmitReceive+0x222>

0800539e <HAL_SPI_Receive>:
{
 800539e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053a2:	b083      	sub	sp, #12
 80053a4:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80053a6:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
 80053aa:	b2f6      	uxtb	r6, r6
 80053ac:	2e01      	cmp	r6, #1
 80053ae:	f040 80ab 	bne.w	8005508 <HAL_SPI_Receive+0x16a>
 80053b2:	4688      	mov	r8, r1
 80053b4:	4691      	mov	r9, r2
 80053b6:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80053b8:	6843      	ldr	r3, [r0, #4]
 80053ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053be:	d032      	beq.n	8005426 <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 80053c0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	f000 80a7 	beq.w	8005518 <HAL_SPI_Receive+0x17a>
 80053ca:	2301      	movs	r3, #1
 80053cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80053d0:	f7fe f830 	bl	8003434 <HAL_GetTick>
 80053d4:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 80053d6:	f1b8 0f00 	cmp.w	r8, #0
 80053da:	f000 8096 	beq.w	800550a <HAL_SPI_Receive+0x16c>
 80053de:	f1b9 0f00 	cmp.w	r9, #0
 80053e2:	f000 8092 	beq.w	800550a <HAL_SPI_Receive+0x16c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053e6:	2304      	movs	r3, #4
 80053e8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053f0:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053f4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053f8:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053fc:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80053fe:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005400:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005402:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005404:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005406:	68a3      	ldr	r3, [r4, #8]
 8005408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540c:	d018      	beq.n	8005440 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005416:	d103      	bne.n	8005420 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005420:	68e3      	ldr	r3, [r4, #12]
 8005422:	b30b      	cbz	r3, 8005468 <HAL_SPI_Receive+0xca>
 8005424:	e043      	b.n	80054ae <HAL_SPI_Receive+0x110>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005426:	6883      	ldr	r3, [r0, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1c9      	bne.n	80053c0 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800542c:	2304      	movs	r3, #4
 800542e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005432:	9500      	str	r5, [sp, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	460a      	mov	r2, r1
 8005438:	f7ff fe8f 	bl	800515a <HAL_SPI_TransmitReceive>
 800543c:	4606      	mov	r6, r0
 800543e:	e067      	b.n	8005510 <HAL_SPI_Receive+0x172>
    __HAL_SPI_DISABLE(hspi);
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005448:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	6813      	ldr	r3, [r2, #0]
 800544e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	e7db      	b.n	800540e <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005456:	f7fd ffed 	bl	8003434 <HAL_GetTick>
 800545a:	1bc0      	subs	r0, r0, r7
 800545c:	42a8      	cmp	r0, r5
 800545e:	d302      	bcc.n	8005466 <HAL_SPI_Receive+0xc8>
 8005460:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005464:	d115      	bne.n	8005492 <HAL_SPI_Receive+0xf4>
 8005466:	b1a5      	cbz	r5, 8005492 <HAL_SPI_Receive+0xf4>
    while (hspi->RxXferCount > 0U)
 8005468:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d03c      	beq.n	80054ea <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	f012 0f01 	tst.w	r2, #1
 8005478:	d0ed      	beq.n	8005456 <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800547a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800547c:	7b1b      	ldrb	r3, [r3, #12]
 800547e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005482:	3301      	adds	r3, #1
 8005484:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005486:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29b      	uxth	r3, r3
 800548e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005490:	e7ea      	b.n	8005468 <HAL_SPI_Receive+0xca>
          hspi->State = HAL_SPI_STATE_READY;
 8005492:	2301      	movs	r3, #1
 8005494:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8005498:	2603      	movs	r6, #3
          goto error;
 800549a:	e036      	b.n	800550a <HAL_SPI_Receive+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800549c:	f7fd ffca 	bl	8003434 <HAL_GetTick>
 80054a0:	1bc0      	subs	r0, r0, r7
 80054a2:	42a8      	cmp	r0, r5
 80054a4:	d302      	bcc.n	80054ac <HAL_SPI_Receive+0x10e>
 80054a6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80054aa:	d119      	bne.n	80054e0 <HAL_SPI_Receive+0x142>
 80054ac:	b1c5      	cbz	r5, 80054e0 <HAL_SPI_Receive+0x142>
    while (hspi->RxXferCount > 0U)
 80054ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	b1d3      	cbz	r3, 80054ea <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	f012 0f01 	tst.w	r2, #1
 80054bc:	d0ee      	beq.n	800549c <HAL_SPI_Receive+0xfe>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054c6:	3302      	adds	r3, #2
 80054c8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80054ca:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80054ce:	fa1f fc8c 	uxth.w	ip, ip
 80054d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80054d6:	fa1f fc8c 	uxth.w	ip, ip
 80054da:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 80054de:	e7e6      	b.n	80054ae <HAL_SPI_Receive+0x110>
          hspi->State = HAL_SPI_STATE_READY;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80054e6:	2603      	movs	r6, #3
          goto error;
 80054e8:	e00f      	b.n	800550a <HAL_SPI_Receive+0x16c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054ea:	463a      	mov	r2, r7
 80054ec:	4629      	mov	r1, r5
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7ff fcc2 	bl	8004e78 <SPI_EndRxTransaction>
 80054f4:	b108      	cbz	r0, 80054fa <HAL_SPI_Receive+0x15c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054f6:	2320      	movs	r3, #32
 80054f8:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054fc:	b92b      	cbnz	r3, 800550a <HAL_SPI_Receive+0x16c>
    hspi->State = HAL_SPI_STATE_READY;
 80054fe:	2301      	movs	r3, #1
 8005500:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005504:	2600      	movs	r6, #0
 8005506:	e000      	b.n	800550a <HAL_SPI_Receive+0x16c>
    errorcode = HAL_BUSY;
 8005508:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 800550a:	2300      	movs	r3, #0
 800550c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005510:	4630      	mov	r0, r6
 8005512:	b003      	add	sp, #12
 8005514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005518:	2602      	movs	r6, #2
 800551a:	e7f9      	b.n	8005510 <HAL_SPI_Receive+0x172>

0800551c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005520:	6a03      	ldr	r3, [r0, #32]
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800552a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800552c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005530:	680c      	ldr	r4, [r1, #0]
 8005532:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005534:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005538:	688b      	ldr	r3, [r1, #8]
 800553a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800553c:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <TIM_OC1_SetConfig+0x58>)
 800553e:	4290      	cmp	r0, r2
 8005540:	d009      	beq.n	8005556 <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005542:	4a0c      	ldr	r2, [pc, #48]	; (8005574 <TIM_OC1_SetConfig+0x58>)
 8005544:	4290      	cmp	r0, r2
 8005546:	d00d      	beq.n	8005564 <TIM_OC1_SetConfig+0x48>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005548:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800554a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800554c:	684a      	ldr	r2, [r1, #4]
 800554e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005550:	6203      	str	r3, [r0, #32]
}
 8005552:	bc30      	pop	{r4, r5}
 8005554:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8005556:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800555a:	68ca      	ldr	r2, [r1, #12]
 800555c:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800555e:	f022 0304 	bic.w	r3, r2, #4
 8005562:	e7ee      	b.n	8005542 <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005564:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8005568:	694a      	ldr	r2, [r1, #20]
 800556a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800556c:	698d      	ldr	r5, [r1, #24]
 800556e:	4315      	orrs	r5, r2
 8005570:	e7ea      	b.n	8005548 <TIM_OC1_SetConfig+0x2c>
 8005572:	bf00      	nop
 8005574:	40012c00 	.word	0x40012c00

08005578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800557c:	6a02      	ldr	r2, [r0, #32]
 800557e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005582:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005586:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005588:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800558c:	680d      	ldr	r5, [r1, #0]
 800558e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005594:	688a      	ldr	r2, [r1, #8]
 8005596:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800559a:	4a0f      	ldr	r2, [pc, #60]	; (80055d8 <TIM_OC3_SetConfig+0x60>)
 800559c:	4290      	cmp	r0, r2
 800559e:	d009      	beq.n	80055b4 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a0:	4a0d      	ldr	r2, [pc, #52]	; (80055d8 <TIM_OC3_SetConfig+0x60>)
 80055a2:	4290      	cmp	r0, r2
 80055a4:	d00e      	beq.n	80055c4 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a8:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055aa:	684a      	ldr	r2, [r1, #4]
 80055ac:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	6203      	str	r3, [r0, #32]
}
 80055b0:	bc30      	pop	{r4, r5}
 80055b2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80055b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055b8:	68ca      	ldr	r2, [r1, #12]
 80055ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80055be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c2:	e7ed      	b.n	80055a0 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055c4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055c8:	694a      	ldr	r2, [r1, #20]
 80055ca:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ce:	698a      	ldr	r2, [r1, #24]
 80055d0:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 80055d4:	e7e7      	b.n	80055a6 <TIM_OC3_SetConfig+0x2e>
 80055d6:	bf00      	nop
 80055d8:	40012c00 	.word	0x40012c00

080055dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055e0:	6a02      	ldr	r2, [r0, #32]
 80055e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055e6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055ec:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f0:	680d      	ldr	r5, [r1, #0]
 80055f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055fa:	688d      	ldr	r5, [r1, #8]
 80055fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005600:	4d07      	ldr	r5, [pc, #28]	; (8005620 <TIM_OC4_SetConfig+0x44>)
 8005602:	42a8      	cmp	r0, r5
 8005604:	d006      	beq.n	8005614 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005608:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800560a:	684a      	ldr	r2, [r1, #4]
 800560c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	6203      	str	r3, [r0, #32]
}
 8005610:	bc30      	pop	{r4, r5}
 8005612:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005614:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005618:	694d      	ldr	r5, [r1, #20]
 800561a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800561e:	e7f2      	b.n	8005606 <TIM_OC4_SetConfig+0x2a>
 8005620:	40012c00 	.word	0x40012c00

08005624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005624:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005626:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005628:	6a04      	ldr	r4, [r0, #32]
 800562a:	f024 0401 	bic.w	r4, r4, #1
 800562e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005630:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005632:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005636:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800563e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005640:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005642:	6203      	str	r3, [r0, #32]
}
 8005644:	bc10      	pop	{r4}
 8005646:	4770      	bx	lr

08005648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005648:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564c:	6a04      	ldr	r4, [r0, #32]
 800564e:	f024 0410 	bic.w	r4, r4, #16
 8005652:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005654:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005656:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800565a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800565e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005662:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005666:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005668:	6203      	str	r3, [r0, #32]
}
 800566a:	bc10      	pop	{r4}
 800566c:	4770      	bx	lr

0800566e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800566e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005674:	430b      	orrs	r3, r1
 8005676:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567a:	6083      	str	r3, [r0, #8]
}
 800567c:	4770      	bx	lr
	...

08005680 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005680:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b01      	cmp	r3, #1
 8005688:	d127      	bne.n	80056da <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800568a:	2302      	movs	r3, #2
 800568c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005690:	6802      	ldr	r2, [r0, #0]
 8005692:	68d3      	ldr	r3, [r2, #12]
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569a:	6803      	ldr	r3, [r0, #0]
 800569c:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <HAL_TIM_Base_Start_IT+0x64>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d010      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x44>
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d00d      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x44>
 80056a8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x44>
 80056b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d005      	beq.n	80056c4 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80056c0:	2000      	movs	r0, #0
 80056c2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ca:	2a06      	cmp	r2, #6
 80056cc:	d007      	beq.n	80056de <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	f042 0201 	orr.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80056d6:	2000      	movs	r0, #0
 80056d8:	4770      	bx	lr
    return HAL_ERROR;
 80056da:	2001      	movs	r0, #1
 80056dc:	4770      	bx	lr
  return HAL_OK;
 80056de:	2000      	movs	r0, #0
}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40012c00 	.word	0x40012c00

080056e8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056e8:	6802      	ldr	r2, [r0, #0]
 80056ea:	68d3      	ldr	r3, [r2, #12]
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80056f2:	6803      	ldr	r3, [r0, #0]
 80056f4:	6a19      	ldr	r1, [r3, #32]
 80056f6:	f241 1211 	movw	r2, #4369	; 0x1111
 80056fa:	4211      	tst	r1, r2
 80056fc:	d108      	bne.n	8005710 <HAL_TIM_Base_Stop_IT+0x28>
 80056fe:	6a19      	ldr	r1, [r3, #32]
 8005700:	f240 4244 	movw	r2, #1092	; 0x444
 8005704:	4211      	tst	r1, r2
 8005706:	d103      	bne.n	8005710 <HAL_TIM_Base_Stop_IT+0x28>
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005710:	2301      	movs	r3, #1
 8005712:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005716:	2000      	movs	r0, #0
 8005718:	4770      	bx	lr

0800571a <HAL_TIM_PWM_MspInit>:
}
 800571a:	4770      	bx	lr

0800571c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800571c:	4770      	bx	lr

0800571e <HAL_TIM_IC_CaptureCallback>:
}
 800571e:	4770      	bx	lr

08005720 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005720:	4770      	bx	lr

08005722 <HAL_TIM_TriggerCallback>:
}
 8005722:	4770      	bx	lr

08005724 <HAL_TIM_IRQHandler>:
{
 8005724:	b510      	push	{r4, lr}
 8005726:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005728:	6803      	ldr	r3, [r0, #0]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	f012 0f02 	tst.w	r2, #2
 8005730:	d011      	beq.n	8005756 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	f012 0f02 	tst.w	r2, #2
 8005738:	d00d      	beq.n	8005756 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800573a:	f06f 0202 	mvn.w	r2, #2
 800573e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005740:	2301      	movs	r3, #1
 8005742:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005744:	6803      	ldr	r3, [r0, #0]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f013 0f03 	tst.w	r3, #3
 800574c:	d070      	beq.n	8005830 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800574e:	f7ff ffe6 	bl	800571e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	2300      	movs	r3, #0
 8005754:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	f012 0f04 	tst.w	r2, #4
 800575e:	d012      	beq.n	8005786 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	f012 0f04 	tst.w	r2, #4
 8005766:	d00e      	beq.n	8005786 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005768:	f06f 0204 	mvn.w	r2, #4
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800576e:	2302      	movs	r3, #2
 8005770:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f413 7f40 	tst.w	r3, #768	; 0x300
 800577a:	d05f      	beq.n	800583c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800577c:	4620      	mov	r0, r4
 800577e:	f7ff ffce 	bl	800571e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	2300      	movs	r3, #0
 8005784:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	f012 0f08 	tst.w	r2, #8
 800578e:	d012      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	f012 0f08 	tst.w	r2, #8
 8005796:	d00e      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005798:	f06f 0208 	mvn.w	r2, #8
 800579c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800579e:	2304      	movs	r3, #4
 80057a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f013 0f03 	tst.w	r3, #3
 80057aa:	d04e      	beq.n	800584a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80057ac:	4620      	mov	r0, r4
 80057ae:	f7ff ffb6 	bl	800571e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	2300      	movs	r3, #0
 80057b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	f012 0f10 	tst.w	r2, #16
 80057be:	d012      	beq.n	80057e6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	f012 0f10 	tst.w	r2, #16
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057c8:	f06f 0210 	mvn.w	r2, #16
 80057cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ce:	2308      	movs	r3, #8
 80057d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80057da:	d03d      	beq.n	8005858 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80057dc:	4620      	mov	r0, r4
 80057de:	f7ff ff9e 	bl	800571e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	2300      	movs	r3, #0
 80057e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	f012 0f01 	tst.w	r2, #1
 80057ee:	d003      	beq.n	80057f8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	f012 0f01 	tst.w	r2, #1
 80057f6:	d136      	bne.n	8005866 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005808:	d134      	bne.n	8005874 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005812:	d003      	beq.n	800581c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	f012 0f40 	tst.w	r2, #64	; 0x40
 800581a:	d132      	bne.n	8005882 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	f012 0f20 	tst.w	r2, #32
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	f012 0f20 	tst.w	r2, #32
 800582c:	d130      	bne.n	8005890 <HAL_TIM_IRQHandler+0x16c>
}
 800582e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005830:	f7ff ff74 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	4620      	mov	r0, r4
 8005836:	f7ff ff73 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
 800583a:	e78a      	b.n	8005752 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583c:	4620      	mov	r0, r4
 800583e:	f7ff ff6d 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff ff6c 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
 8005848:	e79b      	b.n	8005782 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	4620      	mov	r0, r4
 800584c:	f7ff ff66 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	4620      	mov	r0, r4
 8005852:	f7ff ff65 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
 8005856:	e7ac      	b.n	80057b2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005858:	4620      	mov	r0, r4
 800585a:	f7ff ff5f 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585e:	4620      	mov	r0, r4
 8005860:	f7ff ff5e 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
 8005864:	e7bd      	b.n	80057e2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005866:	f06f 0201 	mvn.w	r2, #1
 800586a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800586c:	4620      	mov	r0, r4
 800586e:	f7fb fb4b 	bl	8000f08 <HAL_TIM_PeriodElapsedCallback>
 8005872:	e7c1      	b.n	80057f8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005878:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800587a:	4620      	mov	r0, r4
 800587c:	f000 fac3 	bl	8005e06 <HAL_TIMEx_BreakCallback>
 8005880:	e7c3      	b.n	800580a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005886:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005888:	4620      	mov	r0, r4
 800588a:	f7ff ff4a 	bl	8005722 <HAL_TIM_TriggerCallback>
 800588e:	e7c5      	b.n	800581c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005890:	f06f 0220 	mvn.w	r2, #32
 8005894:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005896:	4620      	mov	r0, r4
 8005898:	f000 fab4 	bl	8005e04 <HAL_TIMEx_CommutCallback>
}
 800589c:	e7c7      	b.n	800582e <HAL_TIM_IRQHandler+0x10a>
	...

080058a0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80058a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a2:	4a1b      	ldr	r2, [pc, #108]	; (8005910 <TIM_Base_SetConfig+0x70>)
 80058a4:	4290      	cmp	r0, r2
 80058a6:	d00a      	beq.n	80058be <TIM_Base_SetConfig+0x1e>
 80058a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80058ac:	d007      	beq.n	80058be <TIM_Base_SetConfig+0x1e>
 80058ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80058b2:	4290      	cmp	r0, r2
 80058b4:	d003      	beq.n	80058be <TIM_Base_SetConfig+0x1e>
 80058b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058ba:	4290      	cmp	r0, r2
 80058bc:	d103      	bne.n	80058c6 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80058c2:	684a      	ldr	r2, [r1, #4]
 80058c4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c6:	4a12      	ldr	r2, [pc, #72]	; (8005910 <TIM_Base_SetConfig+0x70>)
 80058c8:	4290      	cmp	r0, r2
 80058ca:	d00a      	beq.n	80058e2 <TIM_Base_SetConfig+0x42>
 80058cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0x42>
 80058d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80058d6:	4290      	cmp	r0, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0x42>
 80058da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058de:	4290      	cmp	r0, r2
 80058e0:	d103      	bne.n	80058ea <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e6:	68ca      	ldr	r2, [r1, #12]
 80058e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ee:	694a      	ldr	r2, [r1, #20]
 80058f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80058f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f4:	688b      	ldr	r3, [r1, #8]
 80058f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058f8:	680b      	ldr	r3, [r1, #0]
 80058fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <TIM_Base_SetConfig+0x70>)
 80058fe:	4298      	cmp	r0, r3
 8005900:	d002      	beq.n	8005908 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8005902:	2301      	movs	r3, #1
 8005904:	6143      	str	r3, [r0, #20]
}
 8005906:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005908:	690b      	ldr	r3, [r1, #16]
 800590a:	6303      	str	r3, [r0, #48]	; 0x30
 800590c:	e7f9      	b.n	8005902 <TIM_Base_SetConfig+0x62>
 800590e:	bf00      	nop
 8005910:	40012c00 	.word	0x40012c00

08005914 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005914:	b340      	cbz	r0, 8005968 <HAL_TIM_Base_Init+0x54>
{
 8005916:	b510      	push	{r4, lr}
 8005918:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800591a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800591e:	b1f3      	cbz	r3, 800595e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	2302      	movs	r3, #2
 8005922:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005926:	4621      	mov	r1, r4
 8005928:	f851 0b04 	ldr.w	r0, [r1], #4
 800592c:	f7ff ffb8 	bl	80058a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005930:	2301      	movs	r3, #1
 8005932:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005936:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800593a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800593e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005942:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005946:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800594a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005952:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005956:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800595a:	2000      	movs	r0, #0
}
 800595c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800595e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005962:	f7fd fc01 	bl	8003168 <HAL_TIM_Base_MspInit>
 8005966:	e7db      	b.n	8005920 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005968:	2001      	movs	r0, #1
}
 800596a:	4770      	bx	lr

0800596c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800596c:	b340      	cbz	r0, 80059c0 <HAL_TIM_PWM_Init+0x54>
{
 800596e:	b510      	push	{r4, lr}
 8005970:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005972:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005976:	b1f3      	cbz	r3, 80059b6 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	2302      	movs	r3, #2
 800597a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800597e:	4621      	mov	r1, r4
 8005980:	f851 0b04 	ldr.w	r0, [r1], #4
 8005984:	f7ff ff8c 	bl	80058a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005988:	2301      	movs	r3, #1
 800598a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005992:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005996:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800599a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80059aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80059ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80059b2:	2000      	movs	r0, #0
}
 80059b4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80059b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80059ba:	f7ff feae 	bl	800571a <HAL_TIM_PWM_MspInit>
 80059be:	e7db      	b.n	8005978 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80059c0:	2001      	movs	r0, #1
}
 80059c2:	4770      	bx	lr

080059c4 <TIM_OC2_SetConfig>:
{
 80059c4:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80059c6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c8:	6a02      	ldr	r2, [r0, #32]
 80059ca:	f022 0210 	bic.w	r2, r2, #16
 80059ce:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80059d0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80059d2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d8:	680d      	ldr	r5, [r1, #0]
 80059da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80059de:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059e2:	688d      	ldr	r5, [r1, #8]
 80059e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059e8:	4d0e      	ldr	r5, [pc, #56]	; (8005a24 <TIM_OC2_SetConfig+0x60>)
 80059ea:	42a8      	cmp	r0, r5
 80059ec:	d009      	beq.n	8005a02 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ee:	4d0d      	ldr	r5, [pc, #52]	; (8005a24 <TIM_OC2_SetConfig+0x60>)
 80059f0:	42a8      	cmp	r0, r5
 80059f2:	d00e      	beq.n	8005a12 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80059f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80059f6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80059f8:	684a      	ldr	r2, [r1, #4]
 80059fa:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80059fc:	6203      	str	r3, [r0, #32]
}
 80059fe:	bc30      	pop	{r4, r5}
 8005a00:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a06:	68cd      	ldr	r5, [r1, #12]
 8005a08:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a10:	e7ed      	b.n	80059ee <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a12:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a16:	694d      	ldr	r5, [r1, #20]
 8005a18:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a1c:	698d      	ldr	r5, [r1, #24]
 8005a1e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005a22:	e7e7      	b.n	80059f4 <TIM_OC2_SetConfig+0x30>
 8005a24:	40012c00 	.word	0x40012c00

08005a28 <HAL_TIM_PWM_ConfigChannel>:
{
 8005a28:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005a2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d066      	beq.n	8005b00 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005a32:	4604      	mov	r4, r0
 8005a34:	460d      	mov	r5, r1
 8005a36:	2301      	movs	r3, #1
 8005a38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005a3c:	2a0c      	cmp	r2, #12
 8005a3e:	d85a      	bhi.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8005a40:	e8df f002 	tbb	[pc, r2]
 8005a44:	59595907 	.word	0x59595907
 8005a48:	5959591b 	.word	0x5959591b
 8005a4c:	59595930 	.word	0x59595930
 8005a50:	44          	.byte	0x44
 8005a51:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	f7ff fd62 	bl	800551c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	6993      	ldr	r3, [r2, #24]
 8005a5c:	f043 0308 	orr.w	r3, r3, #8
 8005a60:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	6993      	ldr	r3, [r2, #24]
 8005a66:	f023 0304 	bic.w	r3, r3, #4
 8005a6a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	6993      	ldr	r3, [r2, #24]
 8005a70:	6929      	ldr	r1, [r5, #16]
 8005a72:	430b      	orrs	r3, r1
 8005a74:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	2000      	movs	r0, #0
      break;
 8005a78:	e03e      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	f7ff ffa2 	bl	80059c4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	6993      	ldr	r3, [r2, #24]
 8005a84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a88:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a8a:	6822      	ldr	r2, [r4, #0]
 8005a8c:	6993      	ldr	r3, [r2, #24]
 8005a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a92:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	6993      	ldr	r3, [r2, #24]
 8005a98:	6929      	ldr	r1, [r5, #16]
 8005a9a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a9e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa0:	2000      	movs	r0, #0
      break;
 8005aa2:	e029      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aa4:	6800      	ldr	r0, [r0, #0]
 8005aa6:	f7ff fd67 	bl	8005578 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	69d3      	ldr	r3, [r2, #28]
 8005aae:	f043 0308 	orr.w	r3, r3, #8
 8005ab2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	69d3      	ldr	r3, [r2, #28]
 8005ab8:	f023 0304 	bic.w	r3, r3, #4
 8005abc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	69d3      	ldr	r3, [r2, #28]
 8005ac2:	6929      	ldr	r1, [r5, #16]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac8:	2000      	movs	r0, #0
      break;
 8005aca:	e015      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005acc:	6800      	ldr	r0, [r0, #0]
 8005ace:	f7ff fd85 	bl	80055dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ad2:	6822      	ldr	r2, [r4, #0]
 8005ad4:	69d3      	ldr	r3, [r2, #28]
 8005ad6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ada:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	69d3      	ldr	r3, [r2, #28]
 8005ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	69d3      	ldr	r3, [r2, #28]
 8005aea:	6929      	ldr	r1, [r5, #16]
 8005aec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005af0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	2000      	movs	r0, #0
      break;
 8005af4:	e000      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8005af6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005af8:	2300      	movs	r3, #0
 8005afa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005b00:	2002      	movs	r0, #2
 8005b02:	e7fc      	b.n	8005afe <HAL_TIM_PWM_ConfigChannel+0xd6>

08005b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b04:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b06:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b08:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b0c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005b10:	430a      	orrs	r2, r1
 8005b12:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b16:	6082      	str	r2, [r0, #8]
}
 8005b18:	bc10      	pop	{r4}
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005b1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d078      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0xfa>
{
 8005b24:	b510      	push	{r4, lr}
 8005b26:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2e:	2302      	movs	r3, #2
 8005b30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	6802      	ldr	r2, [r0, #0]
 8005b36:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005b40:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005b42:	680b      	ldr	r3, [r1, #0]
 8005b44:	2b60      	cmp	r3, #96	; 0x60
 8005b46:	d04c      	beq.n	8005be2 <HAL_TIM_ConfigClockSource+0xc6>
 8005b48:	d829      	bhi.n	8005b9e <HAL_TIM_ConfigClockSource+0x82>
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d054      	beq.n	8005bf8 <HAL_TIM_ConfigClockSource+0xdc>
 8005b4e:	d90c      	bls.n	8005b6a <HAL_TIM_ConfigClockSource+0x4e>
 8005b50:	2b50      	cmp	r3, #80	; 0x50
 8005b52:	d122      	bne.n	8005b9a <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b54:	68ca      	ldr	r2, [r1, #12]
 8005b56:	6849      	ldr	r1, [r1, #4]
 8005b58:	6800      	ldr	r0, [r0, #0]
 8005b5a:	f7ff fd63 	bl	8005624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b5e:	2150      	movs	r1, #80	; 0x50
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	f7ff fd84 	bl	800566e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005b66:	2000      	movs	r0, #0
      break;
 8005b68:	e005      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d00d      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x6e>
 8005b6e:	d909      	bls.n	8005b84 <HAL_TIM_ConfigClockSource+0x68>
 8005b70:	2b30      	cmp	r3, #48	; 0x30
 8005b72:	d00a      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8005b74:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005b82:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8005b84:	b10b      	cbz	r3, 8005b8a <HAL_TIM_ConfigClockSource+0x6e>
 8005b86:	2b10      	cmp	r3, #16
 8005b88:	d105      	bne.n	8005b96 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6820      	ldr	r0, [r4, #0]
 8005b8e:	f7ff fd6e 	bl	800566e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2000      	movs	r0, #0
      break;
 8005b94:	e7ef      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005b96:	2001      	movs	r0, #1
 8005b98:	e7ed      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
 8005b9a:	2001      	movs	r0, #1
 8005b9c:	e7eb      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba2:	d034      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0xf2>
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005baa:	68cb      	ldr	r3, [r1, #12]
 8005bac:	684a      	ldr	r2, [r1, #4]
 8005bae:	6889      	ldr	r1, [r1, #8]
 8005bb0:	6800      	ldr	r0, [r0, #0]
 8005bb2:	f7ff ffa7 	bl	8005b04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bb6:	6822      	ldr	r2, [r4, #0]
 8005bb8:	6893      	ldr	r3, [r2, #8]
 8005bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bbe:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc0:	2000      	movs	r0, #0
      break;
 8005bc2:	e7d8      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005bc4:	2b70      	cmp	r3, #112	; 0x70
 8005bc6:	d124      	bne.n	8005c12 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005bc8:	68cb      	ldr	r3, [r1, #12]
 8005bca:	684a      	ldr	r2, [r1, #4]
 8005bcc:	6889      	ldr	r1, [r1, #8]
 8005bce:	6800      	ldr	r0, [r0, #0]
 8005bd0:	f7ff ff98 	bl	8005b04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bd4:	6822      	ldr	r2, [r4, #0]
 8005bd6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005bdc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2000      	movs	r0, #0
      break;
 8005be0:	e7c9      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be2:	68ca      	ldr	r2, [r1, #12]
 8005be4:	6849      	ldr	r1, [r1, #4]
 8005be6:	6800      	ldr	r0, [r0, #0]
 8005be8:	f7ff fd2e 	bl	8005648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bec:	2160      	movs	r1, #96	; 0x60
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	f7ff fd3d 	bl	800566e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005bf4:	2000      	movs	r0, #0
      break;
 8005bf6:	e7be      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf8:	68ca      	ldr	r2, [r1, #12]
 8005bfa:	6849      	ldr	r1, [r1, #4]
 8005bfc:	6800      	ldr	r0, [r0, #0]
 8005bfe:	f7ff fd11 	bl	8005624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c02:	2140      	movs	r1, #64	; 0x40
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	f7ff fd32 	bl	800566e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2000      	movs	r0, #0
      break;
 8005c0c:	e7b3      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e7b1      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005c12:	2001      	movs	r0, #1
 8005c14:	e7af      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8005c16:	2002      	movs	r0, #2
}
 8005c18:	4770      	bx	lr

08005c1a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c1a:	f001 011f 	and.w	r1, r1, #31
 8005c1e:	f04f 0c01 	mov.w	ip, #1
 8005c22:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c26:	6a03      	ldr	r3, [r0, #32]
 8005c28:	ea23 030c 	bic.w	r3, r3, ip
 8005c2c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c2e:	6a03      	ldr	r3, [r0, #32]
 8005c30:	408a      	lsls	r2, r1
 8005c32:	4313      	orrs	r3, r2
 8005c34:	6203      	str	r3, [r0, #32]
}
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIM_PWM_Start>:
{
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	bb51      	cbnz	r1, 8005c96 <HAL_TIM_PWM_Start+0x5e>
 8005c40:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	bf18      	it	ne
 8005c4a:	2301      	movne	r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d15b      	bne.n	8005d08 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d139      	bne.n	8005cc8 <HAL_TIM_PWM_Start+0x90>
 8005c54:	2302      	movs	r3, #2
 8005c56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4601      	mov	r1, r0
 8005c5e:	6820      	ldr	r0, [r4, #0]
 8005c60:	f7ff ffdb 	bl	8005c1a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <HAL_TIM_PWM_Start+0xd8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d03d      	beq.n	8005ce8 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <HAL_TIM_PWM_Start+0xd8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d03e      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0xba>
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d03b      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0xba>
 8005c7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d037      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0xba>
 8005c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d033      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005c92:	2000      	movs	r0, #0
 8005c94:	e039      	b.n	8005d0a <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c96:	2904      	cmp	r1, #4
 8005c98:	d008      	beq.n	8005cac <HAL_TIM_PWM_Start+0x74>
 8005c9a:	2908      	cmp	r1, #8
 8005c9c:	d00d      	beq.n	8005cba <HAL_TIM_PWM_Start+0x82>
 8005c9e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	bf18      	it	ne
 8005ca8:	2301      	movne	r3, #1
 8005caa:	e7cf      	b.n	8005c4c <HAL_TIM_PWM_Start+0x14>
 8005cac:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	bf18      	it	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	e7c8      	b.n	8005c4c <HAL_TIM_PWM_Start+0x14>
 8005cba:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	bf18      	it	ne
 8005cc4:	2301      	movne	r3, #1
 8005cc6:	e7c1      	b.n	8005c4c <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cc8:	2804      	cmp	r0, #4
 8005cca:	d005      	beq.n	8005cd8 <HAL_TIM_PWM_Start+0xa0>
 8005ccc:	2808      	cmp	r0, #8
 8005cce:	d007      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0xa8>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005cd6:	e7c0      	b.n	8005c5a <HAL_TIM_PWM_Start+0x22>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cde:	e7bc      	b.n	8005c5a <HAL_TIM_PWM_Start+0x22>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005ce6:	e7b8      	b.n	8005c5a <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8005ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cee:	645a      	str	r2, [r3, #68]	; 0x44
 8005cf0:	e7bc      	b.n	8005c6c <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf8:	2a06      	cmp	r2, #6
 8005cfa:	d007      	beq.n	8005d0c <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005d04:	2000      	movs	r0, #0
 8005d06:	e000      	b.n	8005d0a <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8005d08:	2001      	movs	r0, #1
}
 8005d0a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e7fc      	b.n	8005d0a <HAL_TIM_PWM_Start+0xd2>
 8005d10:	40012c00 	.word	0x40012c00

08005d14 <HAL_TIM_PWM_Stop>:
{
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4604      	mov	r4, r0
 8005d18:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	6800      	ldr	r0, [r0, #0]
 8005d1e:	f7ff ff7c 	bl	8005c1a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <HAL_TIM_PWM_Stop+0x80>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d014      	beq.n	8005d54 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	6a19      	ldr	r1, [r3, #32]
 8005d2e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005d32:	4211      	tst	r1, r2
 8005d34:	d108      	bne.n	8005d48 <HAL_TIM_PWM_Stop+0x34>
 8005d36:	6a19      	ldr	r1, [r3, #32]
 8005d38:	f240 4244 	movw	r2, #1092	; 0x444
 8005d3c:	4211      	tst	r1, r2
 8005d3e:	d103      	bne.n	8005d48 <HAL_TIM_PWM_Stop+0x34>
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	b99d      	cbnz	r5, 8005d72 <HAL_TIM_PWM_Stop+0x5e>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005d50:	2000      	movs	r0, #0
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005d54:	6a19      	ldr	r1, [r3, #32]
 8005d56:	f241 1211 	movw	r2, #4369	; 0x1111
 8005d5a:	4211      	tst	r1, r2
 8005d5c:	d1e5      	bne.n	8005d2a <HAL_TIM_PWM_Stop+0x16>
 8005d5e:	6a19      	ldr	r1, [r3, #32]
 8005d60:	f240 4244 	movw	r2, #1092	; 0x444
 8005d64:	4211      	tst	r1, r2
 8005d66:	d1e0      	bne.n	8005d2a <HAL_TIM_PWM_Stop+0x16>
 8005d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d6e:	645a      	str	r2, [r3, #68]	; 0x44
 8005d70:	e7db      	b.n	8005d2a <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d72:	2d04      	cmp	r5, #4
 8005d74:	d005      	beq.n	8005d82 <HAL_TIM_PWM_Stop+0x6e>
 8005d76:	2d08      	cmp	r5, #8
 8005d78:	d007      	beq.n	8005d8a <HAL_TIM_PWM_Stop+0x76>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005d80:	e7e6      	b.n	8005d50 <HAL_TIM_PWM_Stop+0x3c>
 8005d82:	2301      	movs	r3, #1
 8005d84:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d88:	e7e2      	b.n	8005d50 <HAL_TIM_PWM_Stop+0x3c>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d90:	e7de      	b.n	8005d50 <HAL_TIM_PWM_Stop+0x3c>
 8005d92:	bf00      	nop
 8005d94:	40012c00 	.word	0x40012c00

08005d98 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d98:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005d9c:	2a01      	cmp	r2, #1
 8005d9e:	d02c      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8005da0:	b410      	push	{r4}
 8005da2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005da4:	2201      	movs	r2, #1
 8005da6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005daa:	2202      	movs	r2, #2
 8005dac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005db0:	6802      	ldr	r2, [r0, #0]
 8005db2:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005db4:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005db6:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dba:	6808      	ldr	r0, [r1, #0]
 8005dbc:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dc0:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	480e      	ldr	r0, [pc, #56]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8005dc6:	4282      	cmp	r2, r0
 8005dc8:	d00a      	beq.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005dca:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005dce:	d007      	beq.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005dd0:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8005dd4:	4282      	cmp	r2, r0
 8005dd6:	d003      	beq.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005dd8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005ddc:	4282      	cmp	r2, r0
 8005dde:	d104      	bne.n	8005dea <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005de4:	6849      	ldr	r1, [r1, #4]
 8005de6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df0:	2000      	movs	r0, #0
 8005df2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8005df6:	bc10      	pop	{r4}
 8005df8:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005dfa:	2002      	movs	r0, #2
}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40012c00 	.word	0x40012c00

08005e04 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e04:	4770      	bx	lr

08005e06 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e06:	4770      	bx	lr

08005e08 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e08:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e0c:	b993      	cbnz	r3, 8005e34 <osKernelInitialize+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e12:	b993      	cbnz	r3, 8005e3a <osKernelInitialize+0x32>
 8005e14:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <osKernelInitialize+0x40>)
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	2802      	cmp	r0, #2
 8005e1a:	d004      	beq.n	8005e26 <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e1c:	b980      	cbnz	r0, 8005e40 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <osKernelInitialize+0x40>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e24:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e26:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f6      	beq.n	8005e1c <osKernelInitialize+0x14>
    stat = osErrorISR;
 8005e2e:	f06f 0005 	mvn.w	r0, #5
 8005e32:	4770      	bx	lr
 8005e34:	f06f 0005 	mvn.w	r0, #5
 8005e38:	4770      	bx	lr
 8005e3a:	f06f 0005 	mvn.w	r0, #5
 8005e3e:	4770      	bx	lr
    } else {
      stat = osError;
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	20001208 	.word	0x20001208

08005e4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e4c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e4e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e52:	b9b3      	cbnz	r3, 8005e82 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e54:	f3ef 8310 	mrs	r3, PRIMASK
 8005e58:	b9b3      	cbnz	r3, 8005e88 <osKernelStart+0x3c>
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <osKernelStart+0x48>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d008      	beq.n	8005e74 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d113      	bne.n	8005e8e <osKernelStart+0x42>
      KernelState = osKernelRunning;
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <osKernelStart+0x48>)
 8005e68:	2202      	movs	r2, #2
 8005e6a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005e6c:	f001 f980 	bl	8007170 <vTaskStartScheduler>
      stat = osOK;
 8005e70:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8005e72:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e74:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005e78:	2a00      	cmp	r2, #0
 8005e7a:	d0f2      	beq.n	8005e62 <osKernelStart+0x16>
    stat = osErrorISR;
 8005e7c:	f06f 0005 	mvn.w	r0, #5
 8005e80:	e7f7      	b.n	8005e72 <osKernelStart+0x26>
 8005e82:	f06f 0005 	mvn.w	r0, #5
 8005e86:	e7f4      	b.n	8005e72 <osKernelStart+0x26>
 8005e88:	f06f 0005 	mvn.w	r0, #5
 8005e8c:	e7f1      	b.n	8005e72 <osKernelStart+0x26>
      stat = osError;
 8005e8e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005e92:	e7ee      	b.n	8005e72 <osKernelStart+0x26>
 8005e94:	20001208 	.word	0x20001208

08005e98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e9c:	2400      	movs	r4, #0
 8005e9e:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005ea4:	2c00      	cmp	r4, #0
 8005ea6:	d143      	bne.n	8005f30 <osThreadNew+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d13f      	bne.n	8005f30 <osThreadNew+0x98>
 8005eb0:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <osThreadNew+0xe8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d016      	beq.n	8005ee6 <osThreadNew+0x4e>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d039      	beq.n	8005f30 <osThreadNew+0x98>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005ec2:	b362      	cbz	r2, 8005f1e <osThreadNew+0x86>
      if (attr->name != NULL) {
 8005ec4:	6815      	ldr	r5, [r2, #0]
 8005ec6:	b195      	cbz	r5, 8005eee <osThreadNew+0x56>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005ec8:	6993      	ldr	r3, [r2, #24]
 8005eca:	b903      	cbnz	r3, 8005ece <osThreadNew+0x36>
    prio  = (UBaseType_t)osPriorityNormal;
 8005ecc:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ece:	1e5c      	subs	r4, r3, #1
 8005ed0:	2c37      	cmp	r4, #55	; 0x37
 8005ed2:	d851      	bhi.n	8005f78 <osThreadNew+0xe0>
 8005ed4:	6854      	ldr	r4, [r2, #4]
 8005ed6:	f014 0f01 	tst.w	r4, #1
 8005eda:	d14f      	bne.n	8005f7c <osThreadNew+0xe4>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005edc:	6956      	ldr	r6, [r2, #20]
 8005ede:	b14e      	cbz	r6, 8005ef4 <osThreadNew+0x5c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ee0:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 8005ee4:	e008      	b.n	8005ef8 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ee6:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005eea:	bb0b      	cbnz	r3, 8005f30 <osThreadNew+0x98>
 8005eec:	e7e4      	b.n	8005eb8 <osThreadNew+0x20>
    name  = &empty;
 8005eee:	f10d 0517 	add.w	r5, sp, #23
 8005ef2:	e7e9      	b.n	8005ec8 <osThreadNew+0x30>
    stack = configMINIMAL_STACK_SIZE;
 8005ef4:	f04f 0c80 	mov.w	ip, #128	; 0x80
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ef8:	6894      	ldr	r4, [r2, #8]
 8005efa:	b12c      	cbz	r4, 8005f08 <osThreadNew+0x70>
 8005efc:	68d7      	ldr	r7, [r2, #12]
 8005efe:	2f63      	cmp	r7, #99	; 0x63
 8005f00:	d902      	bls.n	8005f08 <osThreadNew+0x70>
 8005f02:	6917      	ldr	r7, [r2, #16]
 8005f04:	b107      	cbz	r7, 8005f08 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f06:	b9b6      	cbnz	r6, 8005f36 <osThreadNew+0x9e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f08:	b114      	cbz	r4, 8005f10 <osThreadNew+0x78>
    mem   = -1;
 8005f0a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f0e:	e00c      	b.n	8005f2a <osThreadNew+0x92>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f10:	68d4      	ldr	r4, [r2, #12]
 8005f12:	b994      	cbnz	r4, 8005f3a <osThreadNew+0xa2>
 8005f14:	6914      	ldr	r4, [r2, #16]
 8005f16:	b19c      	cbz	r4, 8005f40 <osThreadNew+0xa8>
    mem   = -1;
 8005f18:	f04f 34ff 	mov.w	r4, #4294967295
 8005f1c:	e005      	b.n	8005f2a <osThreadNew+0x92>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8005f1e:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8005f20:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8005f22:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8005f26:	f10d 0517 	add.w	r5, sp, #23
    }

    if (mem == 1) {
 8005f2a:	2c01      	cmp	r4, #1
 8005f2c:	d00a      	beq.n	8005f44 <osThreadNew+0xac>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005f2e:	b1ac      	cbz	r4, 8005f5c <osThreadNew+0xc4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f30:	9804      	ldr	r0, [sp, #16]
}
 8005f32:	b007      	add	sp, #28
 8005f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8005f36:	2401      	movs	r4, #1
 8005f38:	e7f7      	b.n	8005f2a <osThreadNew+0x92>
    mem   = -1;
 8005f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f3e:	e7f4      	b.n	8005f2a <osThreadNew+0x92>
          mem = 0;
 8005f40:	2400      	movs	r4, #0
 8005f42:	e7f2      	b.n	8005f2a <osThreadNew+0x92>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f44:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f46:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f48:	9202      	str	r2, [sp, #8]
 8005f4a:	9401      	str	r4, [sp, #4]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4662      	mov	r2, ip
 8005f52:	4629      	mov	r1, r5
 8005f54:	f001 f89e 	bl	8007094 <xTaskCreateStatic>
 8005f58:	9004      	str	r0, [sp, #16]
 8005f5a:	e7e9      	b.n	8005f30 <osThreadNew+0x98>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f5c:	aa04      	add	r2, sp, #16
 8005f5e:	9201      	str	r2, [sp, #4]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	460b      	mov	r3, r1
 8005f64:	fa1f f28c 	uxth.w	r2, ip
 8005f68:	4629      	mov	r1, r5
 8005f6a:	f001 f8cd 	bl	8007108 <xTaskCreate>
 8005f6e:	2801      	cmp	r0, #1
 8005f70:	d0de      	beq.n	8005f30 <osThreadNew+0x98>
          hTask = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	e7db      	b.n	8005f30 <osThreadNew+0x98>
        return (NULL);
 8005f78:	2000      	movs	r0, #0
 8005f7a:	e7da      	b.n	8005f32 <osThreadNew+0x9a>
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e7d8      	b.n	8005f32 <osThreadNew+0x9a>
 8005f80:	20001208 	.word	0x20001208

08005f84 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005f84:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f86:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8005f8a:	bb33      	cbnz	r3, 8005fda <osEventFlagsNew+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f90:	bb2b      	cbnz	r3, 8005fde <osEventFlagsNew+0x5a>
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <osEventFlagsNew+0x64>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d00c      	beq.n	8005fb4 <osEventFlagsNew+0x30>
    mem = -1;

    if (attr != NULL) {
 8005f9a:	b1d0      	cbz	r0, 8005fd2 <osEventFlagsNew+0x4e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005f9c:	6883      	ldr	r3, [r0, #8]
 8005f9e:	b113      	cbz	r3, 8005fa6 <osEventFlagsNew+0x22>
 8005fa0:	68c2      	ldr	r2, [r0, #12]
 8005fa2:	2a1f      	cmp	r2, #31
 8005fa4:	d811      	bhi.n	8005fca <osEventFlagsNew+0x46>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005fa6:	b15b      	cbz	r3, 8005fc0 <osEventFlagsNew+0x3c>
    mem = -1;
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005fac:	b9cb      	cbnz	r3, 8005fe2 <osEventFlagsNew+0x5e>
        hEventGroup = xEventGroupCreate();
 8005fae:	f000 f9ef 	bl	8006390 <xEventGroupCreate>
 8005fb2:	e013      	b.n	8005fdc <osEventFlagsNew+0x58>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fb4:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0ee      	beq.n	8005f9a <osEventFlagsNew+0x16>
  hEventGroup = NULL;
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e00d      	b.n	8005fdc <osEventFlagsNew+0x58>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005fc0:	68c3      	ldr	r3, [r0, #12]
 8005fc2:	b143      	cbz	r3, 8005fd6 <osEventFlagsNew+0x52>
    mem = -1;
 8005fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc8:	e7f0      	b.n	8005fac <osEventFlagsNew+0x28>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f9bb 	bl	8006346 <xEventGroupCreateStatic>
 8005fd0:	e004      	b.n	8005fdc <osEventFlagsNew+0x58>
      mem = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e7ea      	b.n	8005fac <osEventFlagsNew+0x28>
          mem = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e7e8      	b.n	8005fac <osEventFlagsNew+0x28>
  hEventGroup = NULL;
 8005fda:	2000      	movs	r0, #0
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 8005fdc:	bd08      	pop	{r3, pc}
  hEventGroup = NULL;
 8005fde:	2000      	movs	r0, #0
 8005fe0:	e7fc      	b.n	8005fdc <osEventFlagsNew+0x58>
 8005fe2:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 8005fe4:	e7fa      	b.n	8005fdc <osEventFlagsNew+0x58>
 8005fe6:	bf00      	nop
 8005fe8:	20001208 	.word	0x20001208

08005fec <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005fec:	b370      	cbz	r0, 800604c <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005ff6:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005ffa:	d12a      	bne.n	8006052 <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ffc:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006000:	b94a      	cbnz	r2, 8006016 <osEventFlagsSet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006002:	f3ef 8210 	mrs	r2, PRIMASK
 8006006:	b932      	cbnz	r2, 8006016 <osEventFlagsSet+0x2a>
 8006008:	4a16      	ldr	r2, [pc, #88]	; (8006064 <osEventFlagsSet+0x78>)
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	2a02      	cmp	r2, #2
 800600e:	d118      	bne.n	8006042 <osEventFlagsSet+0x56>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006010:	f3ef 8211 	mrs	r2, BASEPRI
 8006014:	b1aa      	cbz	r2, 8006042 <osEventFlagsSet+0x56>
    yield = pdFALSE;
 8006016:	2200      	movs	r2, #0
 8006018:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800601a:	aa01      	add	r2, sp, #4
 800601c:	4621      	mov	r1, r4
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fa92 	bl	8006548 <xEventGroupSetBitsFromISR>
 8006024:	b9c8      	cbnz	r0, 800605a <osEventFlagsSet+0x6e>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	b1d3      	cbz	r3, 8006060 <osEventFlagsSet+0x74>
 800602a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800602e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006032:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	f3bf 8f6f 	isb	sy
      rflags = flags;
 800603e:	4620      	mov	r0, r4
 8006040:	e009      	b.n	8006056 <osEventFlagsSet+0x6a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006042:	4621      	mov	r1, r4
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fa35 	bl	80064b4 <xEventGroupSetBits>
 800604a:	e004      	b.n	8006056 <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 800604c:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 8006050:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 8006052:	f06f 0003 	mvn.w	r0, #3
}
 8006056:	b002      	add	sp, #8
 8006058:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 800605a:	f06f 0002 	mvn.w	r0, #2
 800605e:	e7fa      	b.n	8006056 <osEventFlagsSet+0x6a>
      rflags = flags;
 8006060:	4620      	mov	r0, r4
  return (rflags);
 8006062:	e7f8      	b.n	8006056 <osEventFlagsSet+0x6a>
 8006064:	20001208 	.word	0x20001208

08006068 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006068:	b3b0      	cbz	r0, 80060d8 <osEventFlagsWait+0x70>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800606a:	b570      	push	{r4, r5, r6, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	460c      	mov	r4, r1
 8006070:	461d      	mov	r5, r3
 8006072:	4684      	mov	ip, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006074:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8006078:	d131      	bne.n	80060de <osEventFlagsWait+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800607a:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 800607e:	bb93      	cbnz	r3, 80060e6 <osEventFlagsWait+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006080:	f3ef 8310 	mrs	r3, PRIMASK
 8006084:	bb93      	cbnz	r3, 80060ec <osEventFlagsWait+0x84>
 8006086:	4b1e      	ldr	r3, [pc, #120]	; (8006100 <osEventFlagsWait+0x98>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d013      	beq.n	80060b6 <osEventFlagsWait+0x4e>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 800608e:	f012 0601 	ands.w	r6, r2, #1
 8006092:	d017      	beq.n	80060c4 <osEventFlagsWait+0x5c>
      wait_all = pdTRUE;
 8006094:	2301      	movs	r3, #1
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 8006096:	f012 0f02 	tst.w	r2, #2
 800609a:	d015      	beq.n	80060c8 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800609c:	2200      	movs	r2, #0
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800609e:	9500      	str	r5, [sp, #0]
 80060a0:	4621      	mov	r1, r4
 80060a2:	4660      	mov	r0, ip
 80060a4:	f000 f982 	bl	80063ac <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 80060a8:	b186      	cbz	r6, 80060cc <osEventFlagsWait+0x64>
      if (flags != rflags) {
 80060aa:	4284      	cmp	r4, r0
 80060ac:	d019      	beq.n	80060e2 <osEventFlagsWait+0x7a>
        if (timeout > 0U) {
 80060ae:	b305      	cbz	r5, 80060f2 <osEventFlagsWait+0x8a>
          rflags = (uint32_t)osErrorTimeout;
 80060b0:	f06f 0001 	mvn.w	r0, #1
 80060b4:	e015      	b.n	80060e2 <osEventFlagsWait+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060b6:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0e7      	beq.n	800608e <osEventFlagsWait+0x26>
    rflags = (uint32_t)osErrorISR;
 80060be:	f06f 0005 	mvn.w	r0, #5
 80060c2:	e00e      	b.n	80060e2 <osEventFlagsWait+0x7a>
      wait_all = pdFAIL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e7e6      	b.n	8006096 <osEventFlagsWait+0x2e>
      exit_clr = pdTRUE;
 80060c8:	2201      	movs	r2, #1
 80060ca:	e7e8      	b.n	800609e <osEventFlagsWait+0x36>
          rflags = (uint32_t)osErrorResource;
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80060cc:	4204      	tst	r4, r0
 80060ce:	d108      	bne.n	80060e2 <osEventFlagsWait+0x7a>
        if (timeout > 0U) {
 80060d0:	b195      	cbz	r5, 80060f8 <osEventFlagsWait+0x90>
          rflags = (uint32_t)osErrorTimeout;
 80060d2:	f06f 0001 	mvn.w	r0, #1
 80060d6:	e004      	b.n	80060e2 <osEventFlagsWait+0x7a>
    rflags = (uint32_t)osErrorParameter;
 80060d8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 80060dc:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80060de:	f06f 0003 	mvn.w	r0, #3
}
 80060e2:	b002      	add	sp, #8
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 80060e6:	f06f 0005 	mvn.w	r0, #5
 80060ea:	e7fa      	b.n	80060e2 <osEventFlagsWait+0x7a>
 80060ec:	f06f 0005 	mvn.w	r0, #5
 80060f0:	e7f7      	b.n	80060e2 <osEventFlagsWait+0x7a>
          rflags = (uint32_t)osErrorResource;
 80060f2:	f06f 0002 	mvn.w	r0, #2
 80060f6:	e7f4      	b.n	80060e2 <osEventFlagsWait+0x7a>
          rflags = (uint32_t)osErrorResource;
 80060f8:	f06f 0002 	mvn.w	r0, #2
  return (rflags);
 80060fc:	e7f1      	b.n	80060e2 <osEventFlagsWait+0x7a>
 80060fe:	bf00      	nop
 8006100:	20001208 	.word	0x20001208

08006104 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006104:	b530      	push	{r4, r5, lr}
 8006106:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006108:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800610c:	2b00      	cmp	r3, #0
 800610e:	d149      	bne.n	80061a4 <osMessageQueueNew+0xa0>
 8006110:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006112:	f3ef 8310 	mrs	r3, PRIMASK
 8006116:	2b00      	cmp	r3, #0
 8006118:	d148      	bne.n	80061ac <osMessageQueueNew+0xa8>
 800611a:	4b28      	ldr	r3, [pc, #160]	; (80061bc <osMessageQueueNew+0xb8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b02      	cmp	r3, #2
 8006120:	d021      	beq.n	8006166 <osMessageQueueNew+0x62>
 8006122:	2800      	cmp	r0, #0
 8006124:	d044      	beq.n	80061b0 <osMessageQueueNew+0xac>
 8006126:	2900      	cmp	r1, #0
 8006128:	d044      	beq.n	80061b4 <osMessageQueueNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800612a:	b3a5      	cbz	r5, 8006196 <osMessageQueueNew+0x92>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800612c:	68ab      	ldr	r3, [r5, #8]
 800612e:	b153      	cbz	r3, 8006146 <osMessageQueueNew+0x42>
 8006130:	68ea      	ldr	r2, [r5, #12]
 8006132:	2a4f      	cmp	r2, #79	; 0x4f
 8006134:	d907      	bls.n	8006146 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006136:	692a      	ldr	r2, [r5, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006138:	b12a      	cbz	r2, 8006146 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800613a:	fb01 f400 	mul.w	r4, r1, r0
 800613e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8006142:	45a4      	cmp	ip, r4
 8006144:	d221      	bcs.n	800618a <osMessageQueueNew+0x86>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006146:	b1a3      	cbz	r3, 8006172 <osMessageQueueNew+0x6e>
    mem = -1;
 8006148:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800614c:	bba3      	cbnz	r3, 80061b8 <osMessageQueueNew+0xb4>
        hQueue = xQueueCreate (msg_count, msg_size);
 800614e:	2200      	movs	r2, #0
 8006150:	f000 fb85 	bl	800685e <xQueueGenericCreate>
 8006154:	4604      	mov	r4, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006156:	b334      	cbz	r4, 80061a6 <osMessageQueueNew+0xa2>
      if (attr != NULL) {
 8006158:	b105      	cbz	r5, 800615c <osMessageQueueNew+0x58>
        name = attr->name;
 800615a:	682d      	ldr	r5, [r5, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800615c:	4629      	mov	r1, r5
 800615e:	4620      	mov	r0, r4
 8006160:	f000 fdd4 	bl	8006d0c <vQueueAddToRegistry>
 8006164:	e01f      	b.n	80061a6 <osMessageQueueNew+0xa2>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006166:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800616a:	2b00      	cmp	r3, #0
 800616c:	d0d9      	beq.n	8006122 <osMessageQueueNew+0x1e>
  hQueue = NULL;
 800616e:	2400      	movs	r4, #0
 8006170:	e019      	b.n	80061a6 <osMessageQueueNew+0xa2>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006172:	68eb      	ldr	r3, [r5, #12]
 8006174:	b98b      	cbnz	r3, 800619a <osMessageQueueNew+0x96>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006176:	692b      	ldr	r3, [r5, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006178:	b113      	cbz	r3, 8006180 <osMessageQueueNew+0x7c>
    mem = -1;
 800617a:	f04f 33ff 	mov.w	r3, #4294967295
 800617e:	e7e5      	b.n	800614c <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006180:	696b      	ldr	r3, [r5, #20]
 8006182:	b16b      	cbz	r3, 80061a0 <osMessageQueueNew+0x9c>
    mem = -1;
 8006184:	f04f 33ff 	mov.w	r3, #4294967295
 8006188:	e7e0      	b.n	800614c <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800618a:	2400      	movs	r4, #0
 800618c:	9400      	str	r4, [sp, #0]
 800618e:	f000 fb1d 	bl	80067cc <xQueueGenericCreateStatic>
 8006192:	4604      	mov	r4, r0
 8006194:	e7df      	b.n	8006156 <osMessageQueueNew+0x52>
      mem = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	e7d8      	b.n	800614c <osMessageQueueNew+0x48>
    mem = -1;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	e7d5      	b.n	800614c <osMessageQueueNew+0x48>
          mem = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	e7d3      	b.n	800614c <osMessageQueueNew+0x48>
  hQueue = NULL;
 80061a4:	2400      	movs	r4, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80061a6:	4620      	mov	r0, r4
 80061a8:	b003      	add	sp, #12
 80061aa:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 80061ac:	2400      	movs	r4, #0
 80061ae:	e7fa      	b.n	80061a6 <osMessageQueueNew+0xa2>
 80061b0:	2400      	movs	r4, #0
 80061b2:	e7f8      	b.n	80061a6 <osMessageQueueNew+0xa2>
 80061b4:	2400      	movs	r4, #0
 80061b6:	e7f6      	b.n	80061a6 <osMessageQueueNew+0xa2>
 80061b8:	2400      	movs	r4, #0
  return ((osMessageQueueId_t)hQueue);
 80061ba:	e7f4      	b.n	80061a6 <osMessageQueueNew+0xa2>
 80061bc:	20001208 	.word	0x20001208

080061c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80061c0:	b510      	push	{r4, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80061ca:	b9b3      	cbnz	r3, 80061fa <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061cc:	f3ef 8310 	mrs	r3, PRIMASK
 80061d0:	b99b      	cbnz	r3, 80061fa <osMessageQueuePut+0x3a>
 80061d2:	4b22      	ldr	r3, [pc, #136]	; (800625c <osMessageQueuePut+0x9c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d00b      	beq.n	80061f2 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061da:	b398      	cbz	r0, 8006244 <osMessageQueuePut+0x84>
 80061dc:	b3a9      	cbz	r1, 800624a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80061de:	2300      	movs	r3, #0
 80061e0:	4622      	mov	r2, r4
 80061e2:	f000 fb63 	bl	80068ac <xQueueGenericSend>
 80061e6:	2801      	cmp	r0, #1
 80061e8:	d032      	beq.n	8006250 <osMessageQueuePut+0x90>
        if (timeout != 0U) {
 80061ea:	b39c      	cbz	r4, 8006254 <osMessageQueuePut+0x94>
          stat = osErrorTimeout;
 80061ec:	f06f 0001 	mvn.w	r0, #1
 80061f0:	e01a      	b.n	8006228 <osMessageQueuePut+0x68>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061f2:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0ef      	beq.n	80061da <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061fa:	b1b8      	cbz	r0, 800622c <osMessageQueuePut+0x6c>
 80061fc:	b1c9      	cbz	r1, 8006232 <osMessageQueuePut+0x72>
 80061fe:	b9dc      	cbnz	r4, 8006238 <osMessageQueuePut+0x78>
      yield = pdFALSE;
 8006200:	2300      	movs	r3, #0
 8006202:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006204:	aa01      	add	r2, sp, #4
 8006206:	f000 fc15 	bl	8006a34 <xQueueGenericSendFromISR>
 800620a:	2801      	cmp	r0, #1
 800620c:	d117      	bne.n	800623e <osMessageQueuePut+0x7e>
        portYIELD_FROM_ISR (yield);
 800620e:	9801      	ldr	r0, [sp, #4]
 8006210:	b150      	cbz	r0, 8006228 <osMessageQueuePut+0x68>
 8006212:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006226:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006228:	b002      	add	sp, #8
 800622a:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 800622c:	f06f 0003 	mvn.w	r0, #3
 8006230:	e7fa      	b.n	8006228 <osMessageQueuePut+0x68>
 8006232:	f06f 0003 	mvn.w	r0, #3
 8006236:	e7f7      	b.n	8006228 <osMessageQueuePut+0x68>
 8006238:	f06f 0003 	mvn.w	r0, #3
 800623c:	e7f4      	b.n	8006228 <osMessageQueuePut+0x68>
        stat = osErrorResource;
 800623e:	f06f 0002 	mvn.w	r0, #2
 8006242:	e7f1      	b.n	8006228 <osMessageQueuePut+0x68>
      stat = osErrorParameter;
 8006244:	f06f 0003 	mvn.w	r0, #3
 8006248:	e7ee      	b.n	8006228 <osMessageQueuePut+0x68>
 800624a:	f06f 0003 	mvn.w	r0, #3
 800624e:	e7eb      	b.n	8006228 <osMessageQueuePut+0x68>
  stat = osOK;
 8006250:	2000      	movs	r0, #0
 8006252:	e7e9      	b.n	8006228 <osMessageQueuePut+0x68>
          stat = osErrorResource;
 8006254:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8006258:	e7e6      	b.n	8006228 <osMessageQueuePut+0x68>
 800625a:	bf00      	nop
 800625c:	20001208 	.word	0x20001208

08006260 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006260:	b510      	push	{r4, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006266:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800626a:	b9ab      	cbnz	r3, 8006298 <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800626c:	f3ef 8310 	mrs	r3, PRIMASK
 8006270:	b993      	cbnz	r3, 8006298 <osMessageQueueGet+0x38>
 8006272:	4b21      	ldr	r3, [pc, #132]	; (80062f8 <osMessageQueueGet+0x98>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d00a      	beq.n	8006290 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800627a:	b390      	cbz	r0, 80062e2 <osMessageQueueGet+0x82>
 800627c:	b3a1      	cbz	r1, 80062e8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800627e:	4622      	mov	r2, r4
 8006280:	f000 fc3e 	bl	8006b00 <xQueueReceive>
 8006284:	2801      	cmp	r0, #1
 8006286:	d032      	beq.n	80062ee <osMessageQueueGet+0x8e>
        if (timeout != 0U) {
 8006288:	b39c      	cbz	r4, 80062f2 <osMessageQueueGet+0x92>
          stat = osErrorTimeout;
 800628a:	f06f 0001 	mvn.w	r0, #1
 800628e:	e01a      	b.n	80062c6 <osMessageQueueGet+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006290:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006298:	b1b8      	cbz	r0, 80062ca <osMessageQueueGet+0x6a>
 800629a:	b1c9      	cbz	r1, 80062d0 <osMessageQueueGet+0x70>
 800629c:	b9dc      	cbnz	r4, 80062d6 <osMessageQueueGet+0x76>
      yield = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80062a2:	aa01      	add	r2, sp, #4
 80062a4:	f000 fcdb 	bl	8006c5e <xQueueReceiveFromISR>
 80062a8:	2801      	cmp	r0, #1
 80062aa:	d117      	bne.n	80062dc <osMessageQueueGet+0x7c>
        portYIELD_FROM_ISR (yield);
 80062ac:	9801      	ldr	r0, [sp, #4]
 80062ae:	b150      	cbz	r0, 80062c6 <osMessageQueueGet+0x66>
 80062b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80062c4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80062c6:	b002      	add	sp, #8
 80062c8:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 80062ca:	f06f 0003 	mvn.w	r0, #3
 80062ce:	e7fa      	b.n	80062c6 <osMessageQueueGet+0x66>
 80062d0:	f06f 0003 	mvn.w	r0, #3
 80062d4:	e7f7      	b.n	80062c6 <osMessageQueueGet+0x66>
 80062d6:	f06f 0003 	mvn.w	r0, #3
 80062da:	e7f4      	b.n	80062c6 <osMessageQueueGet+0x66>
        stat = osErrorResource;
 80062dc:	f06f 0002 	mvn.w	r0, #2
 80062e0:	e7f1      	b.n	80062c6 <osMessageQueueGet+0x66>
      stat = osErrorParameter;
 80062e2:	f06f 0003 	mvn.w	r0, #3
 80062e6:	e7ee      	b.n	80062c6 <osMessageQueueGet+0x66>
 80062e8:	f06f 0003 	mvn.w	r0, #3
 80062ec:	e7eb      	b.n	80062c6 <osMessageQueueGet+0x66>
  stat = osOK;
 80062ee:	2000      	movs	r0, #0
 80062f0:	e7e9      	b.n	80062c6 <osMessageQueueGet+0x66>
          stat = osErrorResource;
 80062f2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80062f6:	e7e6      	b.n	80062c6 <osMessageQueueGet+0x66>
 80062f8:	20001208 	.word	0x20001208

080062fc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062fc:	4b03      	ldr	r3, [pc, #12]	; (800630c <vApplicationGetIdleTaskMemory+0x10>)
 80062fe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <vApplicationGetIdleTaskMemory+0x14>)
 8006302:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	6013      	str	r3, [r2, #0]
}
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	200011a4 	.word	0x200011a4
 8006310:	20000fa4 	.word	0x20000fa4

08006314 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006314:	4b03      	ldr	r3, [pc, #12]	; (8006324 <vApplicationGetTimerTaskMemory+0x10>)
 8006316:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006318:	4b03      	ldr	r3, [pc, #12]	; (8006328 <vApplicationGetTimerTaskMemory+0x14>)
 800631a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800631c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006320:	6013      	str	r3, [r2, #0]
}
 8006322:	4770      	bx	lr
 8006324:	2000160c 	.word	0x2000160c
 8006328:	2000120c 	.word	0x2000120c

0800632c <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 800632c:	b91a      	cbnz	r2, 8006336 <prvTestWaitCondition+0xa>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800632e:	4208      	tst	r0, r1
 8006330:	d105      	bne.n	800633e <prvTestWaitCondition+0x12>
BaseType_t xWaitConditionMet = pdFALSE;
 8006332:	4610      	mov	r0, r2
 8006334:	4770      	bx	lr
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006336:	4381      	bics	r1, r0
 8006338:	d003      	beq.n	8006342 <prvTestWaitCondition+0x16>
BaseType_t xWaitConditionMet = pdFALSE;
 800633a:	2000      	movs	r0, #0
 800633c:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
 800633e:	2001      	movs	r0, #1
 8006340:	4770      	bx	lr
		{
			xWaitConditionMet = pdTRUE;
 8006342:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
 8006344:	4770      	bx	lr

08006346 <xEventGroupCreateStatic>:
		configASSERT( pxEventGroupBuffer );
 8006346:	b180      	cbz	r0, 800636a <xEventGroupCreateStatic+0x24>
	{
 8006348:	b510      	push	{r4, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	4604      	mov	r4, r0
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800634e:	2320      	movs	r3, #32
 8006350:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006352:	9b01      	ldr	r3, [sp, #4]
 8006354:	2b20      	cmp	r3, #32
 8006356:	d011      	beq.n	800637c <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	e7fe      	b.n	8006368 <xEventGroupCreateStatic+0x22>
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 800637a:	e7fe      	b.n	800637a <xEventGroupCreateStatic+0x34>
			pxEventBits->uxEventBits = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006382:	f000 f8eb 	bl	800655c <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006386:	2301      	movs	r3, #1
 8006388:	7723      	strb	r3, [r4, #28]
	}
 800638a:	4620      	mov	r0, r4
 800638c:	b002      	add	sp, #8
 800638e:	bd10      	pop	{r4, pc}

08006390 <xEventGroupCreate>:
	{
 8006390:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8006392:	2020      	movs	r0, #32
 8006394:	f001 fea8 	bl	80080e8 <pvPortMalloc>
		if( pxEventBits != NULL )
 8006398:	4604      	mov	r4, r0
 800639a:	b128      	cbz	r0, 80063a8 <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 800639c:	2500      	movs	r5, #0
 800639e:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80063a2:	f000 f8db 	bl	800655c <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80063a6:	7725      	strb	r5, [r4, #28]
	}
 80063a8:	4620      	mov	r0, r4
 80063aa:	bd38      	pop	{r3, r4, r5, pc}

080063ac <xEventGroupWaitBits>:
{
 80063ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 80063b0:	b178      	cbz	r0, 80063d2 <xEventGroupWaitBits+0x26>
 80063b2:	460c      	mov	r4, r1
 80063b4:	4616      	mov	r6, r2
 80063b6:	461d      	mov	r5, r3
 80063b8:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80063ba:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80063be:	d011      	beq.n	80063e4 <xEventGroupWaitBits+0x38>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	e7fe      	b.n	80063d0 <xEventGroupWaitBits+0x24>
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80063e2:	e7fe      	b.n	80063e2 <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 80063e4:	b941      	cbnz	r1, 80063f8 <xEventGroupWaitBits+0x4c>
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	e7fe      	b.n	80063f6 <xEventGroupWaitBits+0x4a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063f8:	f001 fa12 	bl	8007820 <xTaskGetSchedulerState>
 80063fc:	b950      	cbnz	r0, 8006414 <xEventGroupWaitBits+0x68>
 80063fe:	9b08      	ldr	r3, [sp, #32]
 8006400:	b143      	cbz	r3, 8006414 <xEventGroupWaitBits+0x68>
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	e7fe      	b.n	8006412 <xEventGroupWaitBits+0x66>
	vTaskSuspendAll();
 8006414:	f000 fefa 	bl	800720c <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006418:	f8d7 9000 	ldr.w	r9, [r7]
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800641c:	462a      	mov	r2, r5
 800641e:	4621      	mov	r1, r4
 8006420:	4648      	mov	r0, r9
 8006422:	f7ff ff83 	bl	800632c <prvTestWaitCondition>
		if( xWaitConditionMet != pdFALSE )
 8006426:	b1f0      	cbz	r0, 8006466 <xEventGroupWaitBits+0xba>
			if( xClearOnExit != pdFALSE )
 8006428:	b116      	cbz	r6, 8006430 <xEventGroupWaitBits+0x84>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800642a:	ea29 0304 	bic.w	r3, r9, r4
 800642e:	603b      	str	r3, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8006430:	f000 ff86 	bl	8007340 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8006434:	f1b8 0f00 	cmp.w	r8, #0
 8006438:	d012      	beq.n	8006460 <xEventGroupWaitBits+0xb4>
		if( xAlreadyYielded == pdFALSE )
 800643a:	b948      	cbnz	r0, 8006450 <xEventGroupWaitBits+0xa4>
			portYIELD_WITHIN_API();
 800643c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006444:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8006450:	f001 fa3e 	bl	80078d0 <uxTaskResetEventItemValue>
 8006454:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006456:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800645a:	d01a      	beq.n	8006492 <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800645c:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 8006460:	4648      	mov	r0, r9
 8006462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006466:	9b08      	ldr	r3, [sp, #32]
 8006468:	b183      	cbz	r3, 800648c <xEventGroupWaitBits+0xe0>
			if( xClearOnExit != pdFALSE )
 800646a:	b966      	cbnz	r6, 8006486 <xEventGroupWaitBits+0xda>
EventBits_t uxReturn, uxControlBits = 0;
 800646c:	4641      	mov	r1, r8
			if( xWaitForAllBits != pdFALSE )
 800646e:	b10d      	cbz	r5, 8006474 <xEventGroupWaitBits+0xc8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006470:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006474:	9a08      	ldr	r2, [sp, #32]
 8006476:	4321      	orrs	r1, r4
 8006478:	1d38      	adds	r0, r7, #4
 800647a:	f001 f8ab 	bl	80075d4 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;
 800647e:	46c1      	mov	r9, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006484:	e7d4      	b.n	8006430 <xEventGroupWaitBits+0x84>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006486:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800648a:	e7f0      	b.n	800646e <xEventGroupWaitBits+0xc2>
 800648c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006490:	e7ce      	b.n	8006430 <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
 8006492:	f001 fcaf 	bl	8007df4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8006496:	f8d7 9000 	ldr.w	r9, [r7]
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800649a:	462a      	mov	r2, r5
 800649c:	4621      	mov	r1, r4
 800649e:	4648      	mov	r0, r9
 80064a0:	f7ff ff44 	bl	800632c <prvTestWaitCondition>
 80064a4:	b118      	cbz	r0, 80064ae <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80064a6:	b116      	cbz	r6, 80064ae <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80064a8:	ea29 0404 	bic.w	r4, r9, r4
 80064ac:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 80064ae:	f001 fcc3 	bl	8007e38 <vPortExitCritical>
 80064b2:	e7d3      	b.n	800645c <xEventGroupWaitBits+0xb0>

080064b4 <xEventGroupSetBits>:
{
 80064b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 80064b6:	b168      	cbz	r0, 80064d4 <xEventGroupSetBits+0x20>
 80064b8:	460d      	mov	r5, r1
 80064ba:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80064bc:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 80064c0:	d011      	beq.n	80064e6 <xEventGroupSetBits+0x32>
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	e7fe      	b.n	80064d2 <xEventGroupSetBits+0x1e>
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80064e4:	e7fe      	b.n	80064e4 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e6:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 80064ea:	f000 fe8f 	bl	800720c <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80064ee:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	432b      	orrs	r3, r5
 80064f4:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 80064f6:	e00a      	b.n	800650e <xEventGroupSetBits+0x5a>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80064f8:	6821      	ldr	r1, [r4, #0]
 80064fa:	ea32 0101 	bics.w	r1, r2, r1
 80064fe:	d105      	bne.n	800650c <xEventGroupSetBits+0x58>
 8006500:	e011      	b.n	8006526 <xEventGroupSetBits+0x72>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006502:	6821      	ldr	r1, [r4, #0]
 8006504:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8006508:	f001 f8f2 	bl	80076f0 <vTaskRemoveFromUnorderedEventList>
{
 800650c:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 800650e:	42b0      	cmp	r0, r6
 8006510:	d00e      	beq.n	8006530 <xEventGroupSetBits+0x7c>
			pxNext = listGET_NEXT( pxListItem );
 8006512:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006514:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006516:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800651a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800651e:	d1eb      	bne.n	80064f8 <xEventGroupSetBits+0x44>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006520:	6821      	ldr	r1, [r4, #0]
 8006522:	4211      	tst	r1, r2
 8006524:	d0f2      	beq.n	800650c <xEventGroupSetBits+0x58>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006526:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800652a:	d0ea      	beq.n	8006502 <xEventGroupSetBits+0x4e>
					uxBitsToClear |= uxBitsWaitedFor;
 800652c:	4317      	orrs	r7, r2
 800652e:	e7e8      	b.n	8006502 <xEventGroupSetBits+0x4e>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	ea23 0307 	bic.w	r3, r3, r7
 8006536:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8006538:	f000 ff02 	bl	8007340 <xTaskResumeAll>
}
 800653c:	6820      	ldr	r0, [r4, #0]
 800653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006540 <vEventGroupSetBitsCallback>:
{
 8006540:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8006542:	f7ff ffb7 	bl	80064b4 <xEventGroupSetBits>
}
 8006546:	bd08      	pop	{r3, pc}

08006548 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006548:	b508      	push	{r3, lr}
 800654a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 800654c:	460a      	mov	r2, r1
 800654e:	4601      	mov	r1, r0
 8006550:	4801      	ldr	r0, [pc, #4]	; (8006558 <xEventGroupSetBitsFromISR+0x10>)
 8006552:	f001 fbe1 	bl	8007d18 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8006556:	bd08      	pop	{r3, pc}
 8006558:	08006541 	.word	0x08006541

0800655c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800655c:	f100 0308 	add.w	r3, r0, #8
 8006560:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006568:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800656a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006570:	4770      	bx	lr

08006572 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006576:	4770      	bx	lr

08006578 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006578:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800657a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006580:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006582:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006584:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006586:	6803      	ldr	r3, [r0, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	6003      	str	r3, [r0, #0]
}
 800658c:	4770      	bx	lr

0800658e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800658e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006590:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006592:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006596:	d011      	beq.n	80065bc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006598:	f100 0308 	add.w	r3, r0, #8
 800659c:	461c      	mov	r4, r3
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	42aa      	cmp	r2, r5
 80065a4:	d9fa      	bls.n	800659c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065aa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065ac:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80065ae:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065b0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80065b2:	6803      	ldr	r3, [r0, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	6003      	str	r3, [r0, #0]
}
 80065b8:	bc30      	pop	{r4, r5}
 80065ba:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80065bc:	6904      	ldr	r4, [r0, #16]
 80065be:	e7f2      	b.n	80065a6 <vListInsert+0x18>

080065c0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80065c0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065c2:	6841      	ldr	r1, [r0, #4]
 80065c4:	6882      	ldr	r2, [r0, #8]
 80065c6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065c8:	6841      	ldr	r1, [r0, #4]
 80065ca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	4282      	cmp	r2, r0
 80065d0:	d006      	beq.n	80065e0 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80065d2:	2200      	movs	r2, #0
 80065d4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	3a01      	subs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065dc:	6818      	ldr	r0, [r3, #0]
}
 80065de:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065e0:	6882      	ldr	r2, [r0, #8]
 80065e2:	605a      	str	r2, [r3, #4]
 80065e4:	e7f5      	b.n	80065d2 <uxListRemove+0x12>

080065e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065e6:	b510      	push	{r4, lr}
 80065e8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065ea:	f001 fc03 	bl	8007df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80065f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d004      	beq.n	8006600 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80065f6:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80065f8:	f001 fc1e 	bl	8007e38 <vPortExitCritical>

	return xReturn;
}
 80065fc:	4620      	mov	r0, r4
 80065fe:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8006600:	2401      	movs	r4, #1
 8006602:	e7f9      	b.n	80065f8 <prvIsQueueFull+0x12>

08006604 <prvIsQueueEmpty>:
{
 8006604:	b510      	push	{r4, lr}
 8006606:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006608:	f001 fbf4 	bl	8007df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800660c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800660e:	b923      	cbnz	r3, 800661a <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8006610:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8006612:	f001 fc11 	bl	8007e38 <vPortExitCritical>
}
 8006616:	4620      	mov	r0, r4
 8006618:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800661a:	2400      	movs	r4, #0
 800661c:	e7f9      	b.n	8006612 <prvIsQueueEmpty+0xe>

0800661e <prvCopyDataToQueue>:
{
 800661e:	b570      	push	{r4, r5, r6, lr}
 8006620:	4604      	mov	r4, r0
 8006622:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006624:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006626:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006628:	b95a      	cbnz	r2, 8006642 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800662a:	6803      	ldr	r3, [r0, #0]
 800662c:	b11b      	cbz	r3, 8006636 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800662e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006630:	3601      	adds	r6, #1
 8006632:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8006634:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006636:	6840      	ldr	r0, [r0, #4]
 8006638:	f001 f902 	bl	8007840 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	6063      	str	r3, [r4, #4]
 8006640:	e7f6      	b.n	8006630 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8006642:	b96d      	cbnz	r5, 8006660 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006644:	6880      	ldr	r0, [r0, #8]
 8006646:	f002 f822 	bl	800868e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800664a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800664c:	68a3      	ldr	r3, [r4, #8]
 800664e:	4413      	add	r3, r2
 8006650:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	4293      	cmp	r3, r2
 8006656:	d319      	bcc.n	800668c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800665c:	4628      	mov	r0, r5
 800665e:	e7e7      	b.n	8006630 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006660:	68c0      	ldr	r0, [r0, #12]
 8006662:	f002 f814 	bl	800868e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006666:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006668:	4251      	negs	r1, r2
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	4293      	cmp	r3, r2
 8006674:	d202      	bcs.n	800667c <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	440b      	add	r3, r1
 800667a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800667c:	2d02      	cmp	r5, #2
 800667e:	d001      	beq.n	8006684 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8006680:	2000      	movs	r0, #0
 8006682:	e7d5      	b.n	8006630 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006684:	b126      	cbz	r6, 8006690 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8006686:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8006688:	2000      	movs	r0, #0
 800668a:	e7d1      	b.n	8006630 <prvCopyDataToQueue+0x12>
 800668c:	4628      	mov	r0, r5
 800668e:	e7cf      	b.n	8006630 <prvCopyDataToQueue+0x12>
 8006690:	2000      	movs	r0, #0
 8006692:	e7cd      	b.n	8006630 <prvCopyDataToQueue+0x12>

08006694 <prvCopyDataFromQueue>:
{
 8006694:	b508      	push	{r3, lr}
 8006696:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006698:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800669a:	b162      	cbz	r2, 80066b6 <prvCopyDataFromQueue+0x22>
 800669c:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800669e:	68d9      	ldr	r1, [r3, #12]
 80066a0:	4411      	add	r1, r2
 80066a2:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066a4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80066a8:	4561      	cmp	r1, ip
 80066aa:	d301      	bcc.n	80066b0 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80066ac:	6819      	ldr	r1, [r3, #0]
 80066ae:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80066b0:	68d9      	ldr	r1, [r3, #12]
 80066b2:	f001 ffec 	bl	800868e <memcpy>
}
 80066b6:	bd08      	pop	{r3, pc}

080066b8 <prvUnlockQueue>:
{
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80066bc:	f001 fb9a 	bl	8007df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80066c0:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80066c4:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066c6:	e001      	b.n	80066cc <prvUnlockQueue+0x14>
			--cTxLock;
 80066c8:	3c01      	subs	r4, #1
 80066ca:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066cc:	2c00      	cmp	r4, #0
 80066ce:	dd0a      	ble.n	80066e6 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066d2:	b143      	cbz	r3, 80066e6 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066d4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80066d8:	f000 ffc4 	bl	8007664 <xTaskRemoveFromEventList>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d0f3      	beq.n	80066c8 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80066e0:	f001 f898 	bl	8007814 <vTaskMissedYield>
 80066e4:	e7f0      	b.n	80066c8 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80066e6:	23ff      	movs	r3, #255	; 0xff
 80066e8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80066ec:	f001 fba4 	bl	8007e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 80066f0:	f001 fb80 	bl	8007df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80066f4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80066f8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066fa:	e001      	b.n	8006700 <prvUnlockQueue+0x48>
				--cRxLock;
 80066fc:	3c01      	subs	r4, #1
 80066fe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006700:	2c00      	cmp	r4, #0
 8006702:	dd0a      	ble.n	800671a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006704:	692b      	ldr	r3, [r5, #16]
 8006706:	b143      	cbz	r3, 800671a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006708:	f105 0010 	add.w	r0, r5, #16
 800670c:	f000 ffaa 	bl	8007664 <xTaskRemoveFromEventList>
 8006710:	2800      	cmp	r0, #0
 8006712:	d0f3      	beq.n	80066fc <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8006714:	f001 f87e 	bl	8007814 <vTaskMissedYield>
 8006718:	e7f0      	b.n	80066fc <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800671a:	23ff      	movs	r3, #255	; 0xff
 800671c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006720:	f001 fb8a 	bl	8007e38 <vPortExitCritical>
}
 8006724:	bd38      	pop	{r3, r4, r5, pc}

08006726 <xQueueGenericReset>:
{
 8006726:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8006728:	b1e0      	cbz	r0, 8006764 <xQueueGenericReset+0x3e>
 800672a:	460d      	mov	r5, r1
 800672c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800672e:	f001 fb61 	bl	8007df4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006736:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006738:	fb01 3002 	mla	r0, r1, r2, r3
 800673c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800673e:	2000      	movs	r0, #0
 8006740:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006742:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006744:	3a01      	subs	r2, #1
 8006746:	fb02 3301 	mla	r3, r2, r1, r3
 800674a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800674c:	23ff      	movs	r3, #255	; 0xff
 800674e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006756:	b9fd      	cbnz	r5, 8006798 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	b963      	cbnz	r3, 8006776 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800675c:	f001 fb6c 	bl	8007e38 <vPortExitCritical>
}
 8006760:	2001      	movs	r0, #1
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006774:	e7fe      	b.n	8006774 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006776:	f104 0010 	add.w	r0, r4, #16
 800677a:	f000 ff73 	bl	8007664 <xTaskRemoveFromEventList>
 800677e:	2800      	cmp	r0, #0
 8006780:	d0ec      	beq.n	800675c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8006782:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	e7e1      	b.n	800675c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006798:	f104 0010 	add.w	r0, r4, #16
 800679c:	f7ff fede 	bl	800655c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067a4:	f7ff feda 	bl	800655c <vListInitialise>
 80067a8:	e7d8      	b.n	800675c <xQueueGenericReset+0x36>

080067aa <prvInitialiseNewQueue>:
{
 80067aa:	b538      	push	{r3, r4, r5, lr}
 80067ac:	461d      	mov	r5, r3
 80067ae:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80067b0:	460b      	mov	r3, r1
 80067b2:	b949      	cbnz	r1, 80067c8 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067b4:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80067b6:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067b8:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067ba:	2101      	movs	r1, #1
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff ffb2 	bl	8006726 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80067c2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	e7f4      	b.n	80067b6 <prvInitialiseNewQueue+0xc>

080067cc <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067cc:	b940      	cbnz	r0, 80067e0 <xQueueGenericCreateStatic+0x14>
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	e7fe      	b.n	80067de <xQueueGenericCreateStatic+0x12>
	{
 80067e0:	b510      	push	{r4, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	461c      	mov	r4, r3
 80067e6:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 80067e8:	b153      	cbz	r3, 8006800 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067ea:	b192      	cbz	r2, 8006812 <xQueueGenericCreateStatic+0x46>
 80067ec:	b989      	cbnz	r1, 8006812 <xQueueGenericCreateStatic+0x46>
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	e7fe      	b.n	80067fe <xQueueGenericCreateStatic+0x32>
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006810:	e7fe      	b.n	8006810 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006812:	b16a      	cbz	r2, 8006830 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006814:	2350      	movs	r3, #80	; 0x50
 8006816:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	2b50      	cmp	r3, #80	; 0x50
 800681c:	d013      	beq.n	8006846 <xQueueGenericCreateStatic+0x7a>
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	e7fe      	b.n	800682e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006830:	2900      	cmp	r1, #0
 8006832:	d0ef      	beq.n	8006814 <xQueueGenericCreateStatic+0x48>
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	e7fe      	b.n	8006844 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006846:	2301      	movs	r3, #1
 8006848:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800684c:	9400      	str	r4, [sp, #0]
 800684e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006852:	4660      	mov	r0, ip
 8006854:	f7ff ffa9 	bl	80067aa <prvInitialiseNewQueue>
	}
 8006858:	4620      	mov	r0, r4
 800685a:	b004      	add	sp, #16
 800685c:	bd10      	pop	{r4, pc}

0800685e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800685e:	b940      	cbnz	r0, 8006872 <xQueueGenericCreate+0x14>
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	e7fe      	b.n	8006870 <xQueueGenericCreate+0x12>
	{
 8006872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006874:	b083      	sub	sp, #12
 8006876:	460c      	mov	r4, r1
 8006878:	4615      	mov	r5, r2
 800687a:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800687c:	b1a1      	cbz	r1, 80068a8 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800687e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006882:	3050      	adds	r0, #80	; 0x50
 8006884:	f001 fc30 	bl	80080e8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006888:	4606      	mov	r6, r0
 800688a:	b150      	cbz	r0, 80068a2 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800688c:	2300      	movs	r3, #0
 800688e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006892:	9000      	str	r0, [sp, #0]
 8006894:	462b      	mov	r3, r5
 8006896:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800689a:	4621      	mov	r1, r4
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff ff84 	bl	80067aa <prvInitialiseNewQueue>
	}
 80068a2:	4630      	mov	r0, r6
 80068a4:	b003      	add	sp, #12
 80068a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 80068a8:	4608      	mov	r0, r1
 80068aa:	e7ea      	b.n	8006882 <xQueueGenericCreate+0x24>

080068ac <xQueueGenericSend>:
{
 80068ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ae:	b085      	sub	sp, #20
 80068b0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80068b2:	b188      	cbz	r0, 80068d8 <xQueueGenericSend+0x2c>
 80068b4:	460f      	mov	r7, r1
 80068b6:	461d      	mov	r5, r3
 80068b8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ba:	b1b1      	cbz	r1, 80068ea <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068bc:	2d02      	cmp	r5, #2
 80068be:	d120      	bne.n	8006902 <xQueueGenericSend+0x56>
 80068c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d01d      	beq.n	8006902 <xQueueGenericSend+0x56>
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	e7fe      	b.n	80068d6 <xQueueGenericSend+0x2a>
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80068e8:	e7fe      	b.n	80068e8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0e5      	beq.n	80068bc <xQueueGenericSend+0x10>
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	e7fe      	b.n	8006900 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006902:	f000 ff8d 	bl	8007820 <xTaskGetSchedulerState>
 8006906:	4606      	mov	r6, r0
 8006908:	b958      	cbnz	r0, 8006922 <xQueueGenericSend+0x76>
 800690a:	9b01      	ldr	r3, [sp, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d048      	beq.n	80069a2 <xQueueGenericSend+0xf6>
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	e7fe      	b.n	8006920 <xQueueGenericSend+0x74>
 8006922:	2600      	movs	r6, #0
 8006924:	e03d      	b.n	80069a2 <xQueueGenericSend+0xf6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006926:	462a      	mov	r2, r5
 8006928:	4639      	mov	r1, r7
 800692a:	4620      	mov	r0, r4
 800692c:	f7ff fe77 	bl	800661e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006932:	b97b      	cbnz	r3, 8006954 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8006934:	b148      	cbz	r0, 800694a <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8006936:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800694a:	f001 fa75 	bl	8007e38 <vPortExitCritical>
				return pdPASS;
 800694e:	2001      	movs	r0, #1
}
 8006950:	b005      	add	sp, #20
 8006952:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006954:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006958:	f000 fe84 	bl	8007664 <xTaskRemoveFromEventList>
 800695c:	2800      	cmp	r0, #0
 800695e:	d0f4      	beq.n	800694a <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8006960:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006968:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	e7e9      	b.n	800694a <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8006976:	f001 fa5f 	bl	8007e38 <vPortExitCritical>
					return errQUEUE_FULL;
 800697a:	2000      	movs	r0, #0
 800697c:	e7e8      	b.n	8006950 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800697e:	a802      	add	r0, sp, #8
 8006980:	f000 fefa 	bl	8007778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006984:	2601      	movs	r6, #1
 8006986:	e019      	b.n	80069bc <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8006988:	2300      	movs	r3, #0
 800698a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800698e:	e021      	b.n	80069d4 <xQueueGenericSend+0x128>
 8006990:	2300      	movs	r3, #0
 8006992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006996:	e023      	b.n	80069e0 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8006998:	4620      	mov	r0, r4
 800699a:	f7ff fe8d 	bl	80066b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800699e:	f000 fccf 	bl	8007340 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80069a2:	f001 fa27 	bl	8007df4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d3bb      	bcc.n	8006926 <xQueueGenericSend+0x7a>
 80069ae:	2d02      	cmp	r5, #2
 80069b0:	d0b9      	beq.n	8006926 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80069b2:	9b01      	ldr	r3, [sp, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0de      	beq.n	8006976 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	d0e0      	beq.n	800697e <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80069bc:	f001 fa3c 	bl	8007e38 <vPortExitCritical>
		vTaskSuspendAll();
 80069c0:	f000 fc24 	bl	800720c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069c4:	f001 fa16 	bl	8007df4 <vPortEnterCritical>
 80069c8:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80069cc:	b252      	sxtb	r2, r2
 80069ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80069d2:	d0d9      	beq.n	8006988 <xQueueGenericSend+0xdc>
 80069d4:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80069d8:	b252      	sxtb	r2, r2
 80069da:	f1b2 3fff 	cmp.w	r2, #4294967295
 80069de:	d0d7      	beq.n	8006990 <xQueueGenericSend+0xe4>
 80069e0:	f001 fa2a 	bl	8007e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069e4:	a901      	add	r1, sp, #4
 80069e6:	a802      	add	r0, sp, #8
 80069e8:	f000 fed2 	bl	8007790 <xTaskCheckForTimeOut>
 80069ec:	b9d8      	cbnz	r0, 8006a26 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069ee:	4620      	mov	r0, r4
 80069f0:	f7ff fdf9 	bl	80065e6 <prvIsQueueFull>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d0cf      	beq.n	8006998 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069f8:	9901      	ldr	r1, [sp, #4]
 80069fa:	f104 0010 	add.w	r0, r4, #16
 80069fe:	f000 fdd1 	bl	80075a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a02:	4620      	mov	r0, r4
 8006a04:	f7ff fe58 	bl	80066b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a08:	f000 fc9a 	bl	8007340 <xTaskResumeAll>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d1c8      	bne.n	80069a2 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8006a10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	e7bd      	b.n	80069a2 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7ff fe46 	bl	80066b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a2c:	f000 fc88 	bl	8007340 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006a30:	2000      	movs	r0, #0
 8006a32:	e78d      	b.n	8006950 <xQueueGenericSend+0xa4>

08006a34 <xQueueGenericSendFromISR>:
{
 8006a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006a38:	b190      	cbz	r0, 8006a60 <xQueueGenericSendFromISR+0x2c>
 8006a3a:	460f      	mov	r7, r1
 8006a3c:	4616      	mov	r6, r2
 8006a3e:	461c      	mov	r4, r3
 8006a40:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a42:	b1b1      	cbz	r1, 8006a72 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a44:	2c02      	cmp	r4, #2
 8006a46:	d120      	bne.n	8006a8a <xQueueGenericSendFromISR+0x56>
 8006a48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d01d      	beq.n	8006a8a <xQueueGenericSendFromISR+0x56>
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	e7fe      	b.n	8006a5e <xQueueGenericSendFromISR+0x2a>
 8006a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0e5      	beq.n	8006a44 <xQueueGenericSendFromISR+0x10>
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	e7fe      	b.n	8006a88 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a8a:	f001 fa9d 	bl	8007fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a8e:	f3ef 8811 	mrs	r8, BASEPRI
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	f383 8811 	msr	BASEPRI, r3
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aa2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006aa4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d306      	bcc.n	8006ab8 <xQueueGenericSendFromISR+0x84>
 8006aaa:	2c02      	cmp	r4, #2
 8006aac:	d004      	beq.n	8006ab8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8006aae:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ab0:	f388 8811 	msr	BASEPRI, r8
}
 8006ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ab8:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8006abc:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	f7ff fdaa 	bl	800661e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006aca:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006ace:	d006      	beq.n	8006ade <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ad0:	f109 0301 	add.w	r3, r9, #1
 8006ad4:	b25b      	sxtb	r3, r3
 8006ad6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8006ada:	2001      	movs	r0, #1
 8006adc:	e7e8      	b.n	8006ab0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ae0:	b90b      	cbnz	r3, 8006ae6 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	e7e4      	b.n	8006ab0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ae6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006aea:	f000 fdbb 	bl	8007664 <xTaskRemoveFromEventList>
 8006aee:	b118      	cbz	r0, 8006af8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006af0:	b126      	cbz	r6, 8006afc <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006af2:	2001      	movs	r0, #1
 8006af4:	6030      	str	r0, [r6, #0]
 8006af6:	e7db      	b.n	8006ab0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8006af8:	2001      	movs	r0, #1
 8006afa:	e7d9      	b.n	8006ab0 <xQueueGenericSendFromISR+0x7c>
 8006afc:	2001      	movs	r0, #1
 8006afe:	e7d7      	b.n	8006ab0 <xQueueGenericSendFromISR+0x7c>

08006b00 <xQueueReceive>:
{
 8006b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b02:	b085      	sub	sp, #20
 8006b04:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006b06:	b190      	cbz	r0, 8006b2e <xQueueReceive+0x2e>
 8006b08:	460f      	mov	r7, r1
 8006b0a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b0c:	b1c1      	cbz	r1, 8006b40 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b0e:	f000 fe87 	bl	8007820 <xTaskGetSchedulerState>
 8006b12:	4606      	mov	r6, r0
 8006b14:	bb00      	cbnz	r0, 8006b58 <xQueueReceive+0x58>
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d05e      	beq.n	8006bda <xQueueReceive+0xda>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	e7fe      	b.n	8006b2c <xQueueReceive+0x2c>
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006b3e:	e7fe      	b.n	8006b3e <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0e3      	beq.n	8006b0e <xQueueReceive+0xe>
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	e7fe      	b.n	8006b56 <xQueueReceive+0x56>
 8006b58:	2600      	movs	r6, #0
 8006b5a:	e03e      	b.n	8006bda <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7ff fd98 	bl	8006694 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b64:	3d01      	subs	r5, #1
 8006b66:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	b923      	cbnz	r3, 8006b76 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8006b6c:	f001 f964 	bl	8007e38 <vPortExitCritical>
				return pdPASS;
 8006b70:	2001      	movs	r0, #1
}
 8006b72:	b005      	add	sp, #20
 8006b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b76:	f104 0010 	add.w	r0, r4, #16
 8006b7a:	f000 fd73 	bl	8007664 <xTaskRemoveFromEventList>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d0f4      	beq.n	8006b6c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8006b82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	e7e9      	b.n	8006b6c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8006b98:	f001 f94e 	bl	8007e38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e7e8      	b.n	8006b72 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ba0:	a802      	add	r0, sp, #8
 8006ba2:	f000 fde9 	bl	8007778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba6:	2601      	movs	r6, #1
 8006ba8:	e021      	b.n	8006bee <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8006baa:	2300      	movs	r3, #0
 8006bac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006bb0:	e029      	b.n	8006c06 <xQueueReceive+0x106>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bb8:	e02b      	b.n	8006c12 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f7ff fd7c 	bl	80066b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bc0:	f000 fbbe 	bl	8007340 <xTaskResumeAll>
 8006bc4:	e009      	b.n	8006bda <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f7ff fd76 	bl	80066b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bcc:	f000 fbb8 	bl	8007340 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f7ff fd17 	bl	8006604 <prvIsQueueEmpty>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d13f      	bne.n	8006c5a <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8006bda:	f001 f90b 	bl	8007df4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bde:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	d1bb      	bne.n	8006b5c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0d6      	beq.n	8006b98 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8006bea:	2e00      	cmp	r6, #0
 8006bec:	d0d8      	beq.n	8006ba0 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8006bee:	f001 f923 	bl	8007e38 <vPortExitCritical>
		vTaskSuspendAll();
 8006bf2:	f000 fb0b 	bl	800720c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bf6:	f001 f8fd 	bl	8007df4 <vPortEnterCritical>
 8006bfa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d0d1      	beq.n	8006baa <xQueueReceive+0xaa>
 8006c06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006c0a:	b25b      	sxtb	r3, r3
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d0cf      	beq.n	8006bb2 <xQueueReceive+0xb2>
 8006c12:	f001 f911 	bl	8007e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c16:	a901      	add	r1, sp, #4
 8006c18:	a802      	add	r0, sp, #8
 8006c1a:	f000 fdb9 	bl	8007790 <xTaskCheckForTimeOut>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d1d1      	bne.n	8006bc6 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff fcee 	bl	8006604 <prvIsQueueEmpty>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	d0c6      	beq.n	8006bba <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c2c:	9901      	ldr	r1, [sp, #4]
 8006c2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c32:	f000 fcb7 	bl	80075a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c36:	4620      	mov	r0, r4
 8006c38:	f7ff fd3e 	bl	80066b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c3c:	f000 fb80 	bl	8007340 <xTaskResumeAll>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d1ca      	bne.n	8006bda <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8006c44:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	e7bf      	b.n	8006bda <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	e789      	b.n	8006b72 <xQueueReceive+0x72>

08006c5e <xQueueReceiveFromISR>:
{
 8006c5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006c62:	b1b0      	cbz	r0, 8006c92 <xQueueReceiveFromISR+0x34>
 8006c64:	460d      	mov	r5, r1
 8006c66:	4690      	mov	r8, r2
 8006c68:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c6a:	b1d9      	cbz	r1, 8006ca4 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c6c:	f001 f9ac 	bl	8007fc8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c70:	f3ef 8711 	mrs	r7, BASEPRI
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c84:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c86:	b9ce      	cbnz	r6, 8006cbc <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8006c88:	2000      	movs	r0, #0
	__asm volatile
 8006c8a:	f387 8811 	msr	BASEPRI, r7
}
 8006c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006ca2:	e7fe      	b.n	8006ca2 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ca4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0e0      	beq.n	8006c6c <xQueueReceiveFromISR+0xe>
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	e7fe      	b.n	8006cba <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006cbc:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8006cc0:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7ff fce4 	bl	8006694 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ccc:	1e73      	subs	r3, r6, #1
 8006cce:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8006cd0:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006cd4:	d006      	beq.n	8006ce4 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cd6:	f109 0301 	add.w	r3, r9, #1
 8006cda:	b25b      	sxtb	r3, r3
 8006cdc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	e7d2      	b.n	8006c8a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	b90b      	cbnz	r3, 8006cec <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8006ce8:	2001      	movs	r0, #1
 8006cea:	e7ce      	b.n	8006c8a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cec:	f104 0010 	add.w	r0, r4, #16
 8006cf0:	f000 fcb8 	bl	8007664 <xTaskRemoveFromEventList>
 8006cf4:	b130      	cbz	r0, 8006d04 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8006cf6:	f1b8 0f00 	cmp.w	r8, #0
 8006cfa:	d005      	beq.n	8006d08 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	f8c8 0000 	str.w	r0, [r8]
 8006d02:	e7c2      	b.n	8006c8a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8006d04:	2001      	movs	r0, #1
 8006d06:	e7c0      	b.n	8006c8a <xQueueReceiveFromISR+0x2c>
 8006d08:	2001      	movs	r0, #1
 8006d0a:	e7be      	b.n	8006c8a <xQueueReceiveFromISR+0x2c>

08006d0c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b07      	cmp	r3, #7
 8006d10:	d80c      	bhi.n	8006d2c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d12:	4a07      	ldr	r2, [pc, #28]	; (8006d30 <vQueueAddToRegistry+0x24>)
 8006d14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006d18:	b10a      	cbz	r2, 8006d1e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	e7f7      	b.n	8006d0e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d1e:	4a04      	ldr	r2, [pc, #16]	; (8006d30 <vQueueAddToRegistry+0x24>)
 8006d20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d24:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006d28:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d2a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20001670 	.word	0x20001670

08006d34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4604      	mov	r4, r0
 8006d38:	460d      	mov	r5, r1
 8006d3a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d3c:	f001 f85a 	bl	8007df4 <vPortEnterCritical>
 8006d40:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d00d      	beq.n	8006d68 <vQueueWaitForMessageRestricted+0x34>
 8006d4c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d50:	b25b      	sxtb	r3, r3
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d00b      	beq.n	8006d70 <vQueueWaitForMessageRestricted+0x3c>
 8006d58:	f001 f86e 	bl	8007e38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d5e:	b15b      	cbz	r3, 8006d78 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d60:	4620      	mov	r0, r4
 8006d62:	f7ff fca9 	bl	80066b8 <prvUnlockQueue>
	}
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006d6e:	e7ed      	b.n	8006d4c <vQueueWaitForMessageRestricted+0x18>
 8006d70:	2300      	movs	r3, #0
 8006d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d76:	e7ef      	b.n	8006d58 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d78:	4632      	mov	r2, r6
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006d80:	f000 fc54 	bl	800762c <vTaskPlaceOnEventListRestricted>
 8006d84:	e7ec      	b.n	8006d60 <vQueueWaitForMessageRestricted+0x2c>
	...

08006d88 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d88:	4b08      	ldr	r3, [pc, #32]	; (8006dac <prvResetNextTaskUnblockTime+0x24>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	b923      	cbnz	r3, 8006d9a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <prvResetNextTaskUnblockTime+0x28>)
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d9a:	4b04      	ldr	r3, [pc, #16]	; (8006dac <prvResetNextTaskUnblockTime+0x24>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <prvResetNextTaskUnblockTime+0x28>)
 8006da6:	601a      	str	r2, [r3, #0]
	}
}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	200016b4 	.word	0x200016b4
 8006db0:	20001b60 	.word	0x20001b60

08006db4 <prvInitialiseNewTask>:
{
 8006db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db8:	4680      	mov	r8, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	4617      	mov	r7, r2
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	9e08      	ldr	r6, [sp, #32]
 8006dc2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006dc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006dc8:	0092      	lsls	r2, r2, #2
 8006dca:	21a5      	movs	r1, #165	; 0xa5
 8006dcc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006dce:	f001 fbda 	bl	8008586 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006dd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006dd4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8006dd8:	3a01      	subs	r2, #1
 8006dda:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006dde:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8006de2:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006de4:	f04f 0c00 	mov.w	ip, #0
 8006de8:	f1bc 0f0f 	cmp.w	ip, #15
 8006dec:	d809      	bhi.n	8006e02 <prvInitialiseNewTask+0x4e>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dee:	f815 300c 	ldrb.w	r3, [r5, ip]
 8006df2:	eb04 020c 	add.w	r2, r4, ip
 8006df6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8006dfa:	b113      	cbz	r3, 8006e02 <prvInitialiseNewTask+0x4e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dfc:	f10c 0c01 	add.w	ip, ip, #1
 8006e00:	e7f2      	b.n	8006de8 <prvInitialiseNewTask+0x34>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e02:	2300      	movs	r3, #0
 8006e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e08:	2e37      	cmp	r6, #55	; 0x37
 8006e0a:	d900      	bls.n	8006e0e <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e0c:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8006e0e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006e10:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006e12:	2500      	movs	r5, #0
 8006e14:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e16:	1d20      	adds	r0, r4, #4
 8006e18:	f7ff fbab 	bl	8006572 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e1c:	f104 0018 	add.w	r0, r4, #24
 8006e20:	f7ff fba7 	bl	8006572 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e24:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e26:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8006e2a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e2c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8006e2e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 8006e30:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e32:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e36:	464a      	mov	r2, r9
 8006e38:	4641      	mov	r1, r8
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	f000 ffb0 	bl	8007da0 <pxPortInitialiseStack>
 8006e40:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006e42:	f1ba 0f00 	cmp.w	sl, #0
 8006e46:	d001      	beq.n	8006e4c <prvInitialiseNewTask+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e48:	f8ca 4000 	str.w	r4, [sl]
}
 8006e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e50 <prvInitialiseTaskLists>:
{
 8006e50:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e52:	2400      	movs	r4, #0
 8006e54:	e007      	b.n	8006e66 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e56:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006e5a:	0093      	lsls	r3, r2, #2
 8006e5c:	480e      	ldr	r0, [pc, #56]	; (8006e98 <prvInitialiseTaskLists+0x48>)
 8006e5e:	4418      	add	r0, r3
 8006e60:	f7ff fb7c 	bl	800655c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e64:	3401      	adds	r4, #1
 8006e66:	2c37      	cmp	r4, #55	; 0x37
 8006e68:	d9f5      	bls.n	8006e56 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006e6a:	4d0c      	ldr	r5, [pc, #48]	; (8006e9c <prvInitialiseTaskLists+0x4c>)
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f7ff fb75 	bl	800655c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e72:	4c0b      	ldr	r4, [pc, #44]	; (8006ea0 <prvInitialiseTaskLists+0x50>)
 8006e74:	4620      	mov	r0, r4
 8006e76:	f7ff fb71 	bl	800655c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e7a:	480a      	ldr	r0, [pc, #40]	; (8006ea4 <prvInitialiseTaskLists+0x54>)
 8006e7c:	f7ff fb6e 	bl	800655c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006e80:	4809      	ldr	r0, [pc, #36]	; (8006ea8 <prvInitialiseTaskLists+0x58>)
 8006e82:	f7ff fb6b 	bl	800655c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006e86:	4809      	ldr	r0, [pc, #36]	; (8006eac <prvInitialiseTaskLists+0x5c>)
 8006e88:	f7ff fb68 	bl	800655c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e8c:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <prvInitialiseTaskLists+0x60>)
 8006e8e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e90:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <prvInitialiseTaskLists+0x64>)
 8006e92:	601c      	str	r4, [r3, #0]
}
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
 8006e96:	bf00      	nop
 8006e98:	200016bc 	.word	0x200016bc
 8006e9c:	20001b34 	.word	0x20001b34
 8006ea0:	20001b48 	.word	0x20001b48
 8006ea4:	20001b68 	.word	0x20001b68
 8006ea8:	20001b94 	.word	0x20001b94
 8006eac:	20001b80 	.word	0x20001b80
 8006eb0:	200016b4 	.word	0x200016b4
 8006eb4:	200016b8 	.word	0x200016b8

08006eb8 <prvAddNewTaskToReadyList>:
{
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006ebc:	f000 ff9a 	bl	8007df4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006ec0:	4a22      	ldr	r2, [pc, #136]	; (8006f4c <prvAddNewTaskToReadyList+0x94>)
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ec8:	4b21      	ldr	r3, [pc, #132]	; (8006f50 <prvAddNewTaskToReadyList+0x98>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	b15b      	cbz	r3, 8006ee6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8006ece:	4b21      	ldr	r3, [pc, #132]	; (8006f54 <prvAddNewTaskToReadyList+0x9c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	b96b      	cbnz	r3, 8006ef0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ed4:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <prvAddNewTaskToReadyList+0x98>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d807      	bhi.n	8006ef0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006ee0:	4b1b      	ldr	r3, [pc, #108]	; (8006f50 <prvAddNewTaskToReadyList+0x98>)
 8006ee2:	601c      	str	r4, [r3, #0]
 8006ee4:	e004      	b.n	8006ef0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006ee6:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <prvAddNewTaskToReadyList+0x98>)
 8006ee8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006eea:	6813      	ldr	r3, [r2, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d029      	beq.n	8006f44 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8006ef0:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <prvAddNewTaskToReadyList+0xa0>)
 8006ef2:	6813      	ldr	r3, [r2, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ef8:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8006efa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006efc:	4b17      	ldr	r3, [pc, #92]	; (8006f5c <prvAddNewTaskToReadyList+0xa4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4298      	cmp	r0, r3
 8006f02:	d901      	bls.n	8006f08 <prvAddNewTaskToReadyList+0x50>
 8006f04:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <prvAddNewTaskToReadyList+0xa4>)
 8006f06:	6018      	str	r0, [r3, #0]
 8006f08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f0c:	1d21      	adds	r1, r4, #4
 8006f0e:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <prvAddNewTaskToReadyList+0xa8>)
 8006f10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f14:	f7ff fb30 	bl	8006578 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006f18:	f000 ff8e 	bl	8007e38 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <prvAddNewTaskToReadyList+0x9c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	b17b      	cbz	r3, 8006f42 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvAddNewTaskToReadyList+0x98>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d209      	bcs.n	8006f42 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8006f2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f36:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	f3bf 8f6f 	isb	sy
}
 8006f42:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006f44:	f7ff ff84 	bl	8006e50 <prvInitialiseTaskLists>
 8006f48:	e7d2      	b.n	8006ef0 <prvAddNewTaskToReadyList+0x38>
 8006f4a:	bf00      	nop
 8006f4c:	20001b1c 	.word	0x20001b1c
 8006f50:	200016b0 	.word	0x200016b0
 8006f54:	20001b7c 	.word	0x20001b7c
 8006f58:	20001b2c 	.word	0x20001b2c
 8006f5c:	20001b30 	.word	0x20001b30
 8006f60:	200016bc 	.word	0x200016bc

08006f64 <prvDeleteTCB>:
	{
 8006f64:	b510      	push	{r4, lr}
 8006f66:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f68:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006f6c:	b163      	cbz	r3, 8006f88 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d011      	beq.n	8006f96 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d00e      	beq.n	8006f94 <prvDeleteTCB+0x30>
 8006f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	e7fe      	b.n	8006f86 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006f88:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006f8a:	f001 f925 	bl	80081d8 <vPortFree>
				vPortFree( pxTCB );
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f001 f922 	bl	80081d8 <vPortFree>
	}
 8006f94:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006f96:	f001 f91f 	bl	80081d8 <vPortFree>
 8006f9a:	e7fb      	b.n	8006f94 <prvDeleteTCB+0x30>

08006f9c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <prvCheckTasksWaitingTermination+0x40>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	b1d3      	cbz	r3, 8006fd8 <prvCheckTasksWaitingTermination+0x3c>
{
 8006fa2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006fa4:	f000 ff26 	bl	8007df4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006fa8:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <prvCheckTasksWaitingTermination+0x44>)
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fae:	1d20      	adds	r0, r4, #4
 8006fb0:	f7ff fb06 	bl	80065c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fb4:	4a0b      	ldr	r2, [pc, #44]	; (8006fe4 <prvCheckTasksWaitingTermination+0x48>)
 8006fb6:	6813      	ldr	r3, [r2, #0]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fbc:	4a07      	ldr	r2, [pc, #28]	; (8006fdc <prvCheckTasksWaitingTermination+0x40>)
 8006fbe:	6813      	ldr	r3, [r2, #0]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006fc4:	f000 ff38 	bl	8007e38 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7ff ffcb 	bl	8006f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fce:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <prvCheckTasksWaitingTermination+0x40>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e6      	bne.n	8006fa4 <prvCheckTasksWaitingTermination+0x8>
}
 8006fd6:	bd10      	pop	{r4, pc}
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20001b20 	.word	0x20001b20
 8006fe0:	20001b94 	.word	0x20001b94
 8006fe4:	20001b1c 	.word	0x20001b1c

08006fe8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4604      	mov	r4, r0
 8006fec:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006fee:	4b17      	ldr	r3, [pc, #92]	; (800704c <prvAddCurrentTaskToDelayedList+0x64>)
 8006ff0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <prvAddCurrentTaskToDelayedList+0x68>)
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	3004      	adds	r0, #4
 8006ff8:	f7ff fae2 	bl	80065c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ffc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007000:	d00d      	beq.n	800701e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007002:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007004:	4b12      	ldr	r3, [pc, #72]	; (8007050 <prvAddCurrentTaskToDelayedList+0x68>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800700a:	42a6      	cmp	r6, r4
 800700c:	d910      	bls.n	8007030 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800700e:	4b11      	ldr	r3, [pc, #68]	; (8007054 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <prvAddCurrentTaskToDelayedList+0x68>)
 8007014:	6819      	ldr	r1, [r3, #0]
 8007016:	3104      	adds	r1, #4
 8007018:	f7ff fab9 	bl	800658e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800701c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800701e:	2d00      	cmp	r5, #0
 8007020:	d0ef      	beq.n	8007002 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007022:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <prvAddCurrentTaskToDelayedList+0x68>)
 8007024:	6819      	ldr	r1, [r3, #0]
 8007026:	3104      	adds	r1, #4
 8007028:	480b      	ldr	r0, [pc, #44]	; (8007058 <prvAddCurrentTaskToDelayedList+0x70>)
 800702a:	f7ff faa5 	bl	8006578 <vListInsertEnd>
 800702e:	e7f5      	b.n	800701c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <prvAddCurrentTaskToDelayedList+0x74>)
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <prvAddCurrentTaskToDelayedList+0x68>)
 8007036:	6819      	ldr	r1, [r3, #0]
 8007038:	3104      	adds	r1, #4
 800703a:	f7ff faa8 	bl	800658e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800703e:	4b08      	ldr	r3, [pc, #32]	; (8007060 <prvAddCurrentTaskToDelayedList+0x78>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	42a3      	cmp	r3, r4
 8007044:	d9ea      	bls.n	800701c <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8007046:	4b06      	ldr	r3, [pc, #24]	; (8007060 <prvAddCurrentTaskToDelayedList+0x78>)
 8007048:	601c      	str	r4, [r3, #0]
}
 800704a:	e7e7      	b.n	800701c <prvAddCurrentTaskToDelayedList+0x34>
 800704c:	20001ba8 	.word	0x20001ba8
 8007050:	200016b0 	.word	0x200016b0
 8007054:	200016b8 	.word	0x200016b8
 8007058:	20001b80 	.word	0x20001b80
 800705c:	200016b4 	.word	0x200016b4
 8007060:	20001b60 	.word	0x20001b60

08007064 <prvIdleTask>:
{
 8007064:	b508      	push	{r3, lr}
 8007066:	e00b      	b.n	8007080 <prvIdleTask+0x1c>
				taskYIELD();
 8007068:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800706c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007070:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800707c:	f7f9 f868 	bl	8000150 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007080:	f7ff ff8c 	bl	8006f9c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <prvIdleTask+0x2c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d8ed      	bhi.n	8007068 <prvIdleTask+0x4>
 800708c:	e7f6      	b.n	800707c <prvIdleTask+0x18>
 800708e:	bf00      	nop
 8007090:	200016bc 	.word	0x200016bc

08007094 <xTaskCreateStatic>:
	{
 8007094:	b530      	push	{r4, r5, lr}
 8007096:	b087      	sub	sp, #28
 8007098:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800709a:	b17c      	cbz	r4, 80070bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800709c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800709e:	b1b5      	cbz	r5, 80070ce <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80070a0:	2564      	movs	r5, #100	; 0x64
 80070a2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070a4:	9d04      	ldr	r5, [sp, #16]
 80070a6:	2d64      	cmp	r5, #100	; 0x64
 80070a8:	d01a      	beq.n	80070e0 <xTaskCreateStatic+0x4c>
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	e7fe      	b.n	80070ba <xTaskCreateStatic+0x26>
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80070cc:	e7fe      	b.n	80070cc <xTaskCreateStatic+0x38>
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80070de:	e7fe      	b.n	80070de <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070e2:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070e4:	2402      	movs	r4, #2
 80070e6:	f885 4061 	strb.w	r4, [r5, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070ea:	2400      	movs	r4, #0
 80070ec:	9403      	str	r4, [sp, #12]
 80070ee:	9502      	str	r5, [sp, #8]
 80070f0:	ac05      	add	r4, sp, #20
 80070f2:	9401      	str	r4, [sp, #4]
 80070f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070f6:	9400      	str	r4, [sp, #0]
 80070f8:	f7ff fe5c 	bl	8006db4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80070fe:	f7ff fedb 	bl	8006eb8 <prvAddNewTaskToReadyList>
	}
 8007102:	9805      	ldr	r0, [sp, #20]
 8007104:	b007      	add	sp, #28
 8007106:	bd30      	pop	{r4, r5, pc}

08007108 <xTaskCreate>:
	{
 8007108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800710c:	b085      	sub	sp, #20
 800710e:	4607      	mov	r7, r0
 8007110:	4688      	mov	r8, r1
 8007112:	4614      	mov	r4, r2
 8007114:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007116:	0090      	lsls	r0, r2, #2
 8007118:	f000 ffe6 	bl	80080e8 <pvPortMalloc>
			if( pxStack != NULL )
 800711c:	b300      	cbz	r0, 8007160 <xTaskCreate+0x58>
 800711e:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007120:	2064      	movs	r0, #100	; 0x64
 8007122:	f000 ffe1 	bl	80080e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007126:	4605      	mov	r5, r0
 8007128:	b1b0      	cbz	r0, 8007158 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800712a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800712e:	b1e5      	cbz	r5, 800716a <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007130:	2300      	movs	r3, #0
 8007132:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007136:	9303      	str	r3, [sp, #12]
 8007138:	9502      	str	r5, [sp, #8]
 800713a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	4633      	mov	r3, r6
 8007144:	4622      	mov	r2, r4
 8007146:	4641      	mov	r1, r8
 8007148:	4638      	mov	r0, r7
 800714a:	f7ff fe33 	bl	8006db4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800714e:	4628      	mov	r0, r5
 8007150:	f7ff feb2 	bl	8006eb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007154:	2001      	movs	r0, #1
 8007156:	e005      	b.n	8007164 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8007158:	4648      	mov	r0, r9
 800715a:	f001 f83d 	bl	80081d8 <vPortFree>
 800715e:	e7e6      	b.n	800712e <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007160:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8007164:	b005      	add	sp, #20
 8007166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800716a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800716e:	e7f9      	b.n	8007164 <xTaskCreate+0x5c>

08007170 <vTaskStartScheduler>:
{
 8007170:	b510      	push	{r4, lr}
 8007172:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007174:	2400      	movs	r4, #0
 8007176:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007178:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800717a:	aa07      	add	r2, sp, #28
 800717c:	a906      	add	r1, sp, #24
 800717e:	a805      	add	r0, sp, #20
 8007180:	f7ff f8bc 	bl	80062fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007184:	9b05      	ldr	r3, [sp, #20]
 8007186:	9302      	str	r3, [sp, #8]
 8007188:	9b06      	ldr	r3, [sp, #24]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	9400      	str	r4, [sp, #0]
 800718e:	4623      	mov	r3, r4
 8007190:	9a07      	ldr	r2, [sp, #28]
 8007192:	4918      	ldr	r1, [pc, #96]	; (80071f4 <vTaskStartScheduler+0x84>)
 8007194:	4818      	ldr	r0, [pc, #96]	; (80071f8 <vTaskStartScheduler+0x88>)
 8007196:	f7ff ff7d 	bl	8007094 <xTaskCreateStatic>
 800719a:	4b18      	ldr	r3, [pc, #96]	; (80071fc <vTaskStartScheduler+0x8c>)
 800719c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800719e:	b140      	cbz	r0, 80071b2 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 80071a0:	f000 fc0e 	bl	80079c0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80071a4:	2801      	cmp	r0, #1
 80071a6:	d006      	beq.n	80071b6 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071ac:	d018      	beq.n	80071e0 <vTaskStartScheduler+0x70>
}
 80071ae:	b008      	add	sp, #32
 80071b0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80071b2:	2000      	movs	r0, #0
 80071b4:	e7f6      	b.n	80071a4 <vTaskStartScheduler+0x34>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80071c6:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <vTaskStartScheduler+0x90>)
 80071c8:	f04f 32ff 	mov.w	r2, #4294967295
 80071cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071ce:	4b0d      	ldr	r3, [pc, #52]	; (8007204 <vTaskStartScheduler+0x94>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80071d4:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <vTaskStartScheduler+0x98>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80071da:	f000 fe95 	bl	8007f08 <xPortStartScheduler>
 80071de:	e7e6      	b.n	80071ae <vTaskStartScheduler+0x3e>
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071f0:	e7fe      	b.n	80071f0 <vTaskStartScheduler+0x80>
 80071f2:	bf00      	nop
 80071f4:	08009fd8 	.word	0x08009fd8
 80071f8:	08007065 	.word	0x08007065
 80071fc:	20001b5c 	.word	0x20001b5c
 8007200:	20001b60 	.word	0x20001b60
 8007204:	20001b7c 	.word	0x20001b7c
 8007208:	20001ba8 	.word	0x20001ba8

0800720c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800720c:	4a02      	ldr	r2, [pc, #8]	; (8007218 <vTaskSuspendAll+0xc>)
 800720e:	6813      	ldr	r3, [r2, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	6013      	str	r3, [r2, #0]
}
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20001b28 	.word	0x20001b28

0800721c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800721c:	4b01      	ldr	r3, [pc, #4]	; (8007224 <xTaskGetTickCount+0x8>)
 800721e:	6818      	ldr	r0, [r3, #0]
}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20001ba8 	.word	0x20001ba8

08007228 <xTaskIncrementTick>:
{
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800722a:	4b3a      	ldr	r3, [pc, #232]	; (8007314 <xTaskIncrementTick+0xec>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d164      	bne.n	80072fc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007232:	4b39      	ldr	r3, [pc, #228]	; (8007318 <xTaskIncrementTick+0xf0>)
 8007234:	681d      	ldr	r5, [r3, #0]
 8007236:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8007238:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800723a:	b9c5      	cbnz	r5, 800726e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800723c:	4b37      	ldr	r3, [pc, #220]	; (800731c <xTaskIncrementTick+0xf4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	b143      	cbz	r3, 8007256 <xTaskIncrementTick+0x2e>
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	e7fe      	b.n	8007254 <xTaskIncrementTick+0x2c>
 8007256:	4a31      	ldr	r2, [pc, #196]	; (800731c <xTaskIncrementTick+0xf4>)
 8007258:	6811      	ldr	r1, [r2, #0]
 800725a:	4b31      	ldr	r3, [pc, #196]	; (8007320 <xTaskIncrementTick+0xf8>)
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	6010      	str	r0, [r2, #0]
 8007260:	6019      	str	r1, [r3, #0]
 8007262:	4a30      	ldr	r2, [pc, #192]	; (8007324 <xTaskIncrementTick+0xfc>)
 8007264:	6813      	ldr	r3, [r2, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	f7ff fd8d 	bl	8006d88 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800726e:	4b2e      	ldr	r3, [pc, #184]	; (8007328 <xTaskIncrementTick+0x100>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	42ab      	cmp	r3, r5
 8007274:	d938      	bls.n	80072e8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8007276:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007278:	4b2c      	ldr	r3, [pc, #176]	; (800732c <xTaskIncrementTick+0x104>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007282:	009a      	lsls	r2, r3, #2
 8007284:	4b2a      	ldr	r3, [pc, #168]	; (8007330 <xTaskIncrementTick+0x108>)
 8007286:	589b      	ldr	r3, [r3, r2]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d93c      	bls.n	8007306 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800728c:	2701      	movs	r7, #1
 800728e:	e03a      	b.n	8007306 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8007290:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007292:	4b22      	ldr	r3, [pc, #136]	; (800731c <xTaskIncrementTick+0xf4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	b343      	cbz	r3, 80072ec <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800729a:	4b20      	ldr	r3, [pc, #128]	; (800731c <xTaskIncrementTick+0xf4>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072a2:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80072a4:	429d      	cmp	r5, r3
 80072a6:	d326      	bcc.n	80072f6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072a8:	1d26      	adds	r6, r4, #4
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff f988 	bl	80065c0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072b2:	b11b      	cbz	r3, 80072bc <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072b4:	f104 0018 	add.w	r0, r4, #24
 80072b8:	f7ff f982 	bl	80065c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072be:	4a1d      	ldr	r2, [pc, #116]	; (8007334 <xTaskIncrementTick+0x10c>)
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d901      	bls.n	80072ca <xTaskIncrementTick+0xa2>
 80072c6:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <xTaskIncrementTick+0x10c>)
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80072ce:	009a      	lsls	r2, r3, #2
 80072d0:	4631      	mov	r1, r6
 80072d2:	4817      	ldr	r0, [pc, #92]	; (8007330 <xTaskIncrementTick+0x108>)
 80072d4:	4410      	add	r0, r2
 80072d6:	f7ff f94f 	bl	8006578 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80072dc:	4b13      	ldr	r3, [pc, #76]	; (800732c <xTaskIncrementTick+0x104>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d2d4      	bcs.n	8007290 <xTaskIncrementTick+0x68>
 80072e6:	e7d4      	b.n	8007292 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 80072e8:	2700      	movs	r7, #0
 80072ea:	e7d2      	b.n	8007292 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ec:	4b0e      	ldr	r3, [pc, #56]	; (8007328 <xTaskIncrementTick+0x100>)
 80072ee:	f04f 32ff 	mov.w	r2, #4294967295
 80072f2:	601a      	str	r2, [r3, #0]
					break;
 80072f4:	e7c0      	b.n	8007278 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80072f6:	4a0c      	ldr	r2, [pc, #48]	; (8007328 <xTaskIncrementTick+0x100>)
 80072f8:	6013      	str	r3, [r2, #0]
						break;
 80072fa:	e7bd      	b.n	8007278 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80072fc:	4a0e      	ldr	r2, [pc, #56]	; (8007338 <xTaskIncrementTick+0x110>)
 80072fe:	6813      	ldr	r3, [r2, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007304:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8007306:	4b0d      	ldr	r3, [pc, #52]	; (800733c <xTaskIncrementTick+0x114>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	b103      	cbz	r3, 800730e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800730c:	2701      	movs	r7, #1
}
 800730e:	4638      	mov	r0, r7
 8007310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007312:	bf00      	nop
 8007314:	20001b28 	.word	0x20001b28
 8007318:	20001ba8 	.word	0x20001ba8
 800731c:	200016b4 	.word	0x200016b4
 8007320:	200016b8 	.word	0x200016b8
 8007324:	20001b64 	.word	0x20001b64
 8007328:	20001b60 	.word	0x20001b60
 800732c:	200016b0 	.word	0x200016b0
 8007330:	200016bc 	.word	0x200016bc
 8007334:	20001b30 	.word	0x20001b30
 8007338:	20001b24 	.word	0x20001b24
 800733c:	20001bac 	.word	0x20001bac

08007340 <xTaskResumeAll>:
{
 8007340:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8007342:	4b35      	ldr	r3, [pc, #212]	; (8007418 <xTaskResumeAll+0xd8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	b943      	cbnz	r3, 800735a <xTaskResumeAll+0x1a>
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	e7fe      	b.n	8007358 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800735a:	f000 fd4b 	bl	8007df4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800735e:	4b2e      	ldr	r3, [pc, #184]	; (8007418 <xTaskResumeAll+0xd8>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	3a01      	subs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d14f      	bne.n	800740c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800736c:	4b2b      	ldr	r3, [pc, #172]	; (800741c <xTaskResumeAll+0xdc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	b90b      	cbnz	r3, 8007376 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8007372:	2400      	movs	r4, #0
 8007374:	e04b      	b.n	800740e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8007376:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007378:	4b29      	ldr	r3, [pc, #164]	; (8007420 <xTaskResumeAll+0xe0>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	b31b      	cbz	r3, 80073c6 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800737e:	4b28      	ldr	r3, [pc, #160]	; (8007420 <xTaskResumeAll+0xe0>)
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007384:	f104 0018 	add.w	r0, r4, #24
 8007388:	f7ff f91a 	bl	80065c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800738c:	1d25      	adds	r5, r4, #4
 800738e:	4628      	mov	r0, r5
 8007390:	f7ff f916 	bl	80065c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007394:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007396:	4b23      	ldr	r3, [pc, #140]	; (8007424 <xTaskResumeAll+0xe4>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4298      	cmp	r0, r3
 800739c:	d901      	bls.n	80073a2 <xTaskResumeAll+0x62>
 800739e:	4b21      	ldr	r3, [pc, #132]	; (8007424 <xTaskResumeAll+0xe4>)
 80073a0:	6018      	str	r0, [r3, #0]
 80073a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80073a6:	4629      	mov	r1, r5
 80073a8:	4b1f      	ldr	r3, [pc, #124]	; (8007428 <xTaskResumeAll+0xe8>)
 80073aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073ae:	f7ff f8e3 	bl	8006578 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073b4:	4b1d      	ldr	r3, [pc, #116]	; (800742c <xTaskResumeAll+0xec>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d3dc      	bcc.n	8007378 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 80073be:	4b1c      	ldr	r3, [pc, #112]	; (8007430 <xTaskResumeAll+0xf0>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	e7d8      	b.n	8007378 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 80073c6:	b10c      	cbz	r4, 80073cc <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80073c8:	f7ff fcde 	bl	8006d88 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80073cc:	4b19      	ldr	r3, [pc, #100]	; (8007434 <xTaskResumeAll+0xf4>)
 80073ce:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80073d0:	b984      	cbnz	r4, 80073f4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <xTaskResumeAll+0xf0>)
 80073d4:	681c      	ldr	r4, [r3, #0]
 80073d6:	b1d4      	cbz	r4, 800740e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80073d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80073dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80073ec:	2401      	movs	r4, #1
 80073ee:	e00e      	b.n	800740e <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80073f0:	3c01      	subs	r4, #1
 80073f2:	d007      	beq.n	8007404 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80073f4:	f7ff ff18 	bl	8007228 <xTaskIncrementTick>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	d0f9      	beq.n	80073f0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80073fc:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <xTaskResumeAll+0xf0>)
 80073fe:	2201      	movs	r2, #1
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	e7f5      	b.n	80073f0 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8007404:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <xTaskResumeAll+0xf4>)
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	e7e2      	b.n	80073d2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800740c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800740e:	f000 fd13 	bl	8007e38 <vPortExitCritical>
}
 8007412:	4620      	mov	r0, r4
 8007414:	bd38      	pop	{r3, r4, r5, pc}
 8007416:	bf00      	nop
 8007418:	20001b28 	.word	0x20001b28
 800741c:	20001b1c 	.word	0x20001b1c
 8007420:	20001b68 	.word	0x20001b68
 8007424:	20001b30 	.word	0x20001b30
 8007428:	200016bc 	.word	0x200016bc
 800742c:	200016b0 	.word	0x200016b0
 8007430:	20001bac 	.word	0x20001bac
 8007434:	20001b24 	.word	0x20001b24

08007438 <vTaskDelayUntil>:
	{
 8007438:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 800743a:	b158      	cbz	r0, 8007454 <vTaskDelayUntil+0x1c>
 800743c:	460c      	mov	r4, r1
 800743e:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8007440:	b989      	cbnz	r1, 8007466 <vTaskDelayUntil+0x2e>
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	e7fe      	b.n	8007452 <vTaskDelayUntil+0x1a>
 8007454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8007464:	e7fe      	b.n	8007464 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 8007466:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <vTaskDelayUntil+0x9c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	b143      	cbz	r3, 800747e <vTaskDelayUntil+0x46>
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	e7fe      	b.n	800747c <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 800747e:	f7ff fec5 	bl	800720c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8007482:	4b15      	ldr	r3, [pc, #84]	; (80074d8 <vTaskDelayUntil+0xa0>)
 8007484:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007486:	682b      	ldr	r3, [r5, #0]
 8007488:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 800748a:	4283      	cmp	r3, r0
 800748c:	d909      	bls.n	80074a2 <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800748e:	42a3      	cmp	r3, r4
 8007490:	d801      	bhi.n	8007496 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 8007492:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8007494:	e00e      	b.n	80074b4 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007496:	42a0      	cmp	r0, r4
 8007498:	d301      	bcc.n	800749e <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
 800749a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800749c:	e00a      	b.n	80074b4 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 800749e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 80074a0:	e004      	b.n	80074ac <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80074a2:	42a3      	cmp	r3, r4
 80074a4:	d801      	bhi.n	80074aa <vTaskDelayUntil+0x72>
 80074a6:	42a0      	cmp	r0, r4
 80074a8:	d212      	bcs.n	80074d0 <vTaskDelayUntil+0x98>
			*pxPreviousWakeTime = xTimeToWake;
 80074aa:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80074ac:	2100      	movs	r1, #0
 80074ae:	1a20      	subs	r0, r4, r0
 80074b0:	f7ff fd9a 	bl	8006fe8 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 80074b4:	f7ff ff44 	bl	8007340 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80074b8:	b948      	cbnz	r0, 80074ce <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 80074ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80074be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	f3bf 8f6f 	isb	sy
	}
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 80074d0:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 80074d2:	e7ef      	b.n	80074b4 <vTaskDelayUntil+0x7c>
 80074d4:	20001b28 	.word	0x20001b28
 80074d8:	20001ba8 	.word	0x20001ba8

080074dc <vTaskSetApplicationTaskTag>:
	{
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	460c      	mov	r4, r1
		if( xTask == NULL )
 80074e0:	4605      	mov	r5, r0
 80074e2:	b128      	cbz	r0, 80074f0 <vTaskSetApplicationTaskTag+0x14>
		taskENTER_CRITICAL();
 80074e4:	f000 fc86 	bl	8007df4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80074e8:	65ac      	str	r4, [r5, #88]	; 0x58
		taskEXIT_CRITICAL();
 80074ea:	f000 fca5 	bl	8007e38 <vPortExitCritical>
	}
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80074f0:	4b01      	ldr	r3, [pc, #4]	; (80074f8 <vTaskSetApplicationTaskTag+0x1c>)
 80074f2:	681d      	ldr	r5, [r3, #0]
 80074f4:	e7f6      	b.n	80074e4 <vTaskSetApplicationTaskTag+0x8>
 80074f6:	bf00      	nop
 80074f8:	200016b0 	.word	0x200016b0

080074fc <vTaskSwitchContext>:
{
 80074fc:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074fe:	4b24      	ldr	r3, [pc, #144]	; (8007590 <vTaskSwitchContext+0x94>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	b11b      	cbz	r3, 800750c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007504:	4b23      	ldr	r3, [pc, #140]	; (8007594 <vTaskSwitchContext+0x98>)
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]
}
 800750a:	bd08      	pop	{r3, pc}
		xYieldPending = pdFALSE;
 800750c:	4b21      	ldr	r3, [pc, #132]	; (8007594 <vTaskSwitchContext+0x98>)
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8007512:	4b21      	ldr	r3, [pc, #132]	; (8007598 <vTaskSwitchContext+0x9c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007518:	f7f9 fcc6 	bl	8000ea8 <callback_out>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800751c:	4b1f      	ldr	r3, [pc, #124]	; (800759c <vTaskSwitchContext+0xa0>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007524:	008a      	lsls	r2, r1, #2
 8007526:	491e      	ldr	r1, [pc, #120]	; (80075a0 <vTaskSwitchContext+0xa4>)
 8007528:	588a      	ldr	r2, [r1, r2]
 800752a:	b95a      	cbnz	r2, 8007544 <vTaskSwitchContext+0x48>
 800752c:	b10b      	cbz	r3, 8007532 <vTaskSwitchContext+0x36>
 800752e:	3b01      	subs	r3, #1
 8007530:	e7f6      	b.n	8007520 <vTaskSwitchContext+0x24>
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	e7fe      	b.n	8007542 <vTaskSwitchContext+0x46>
 8007544:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007548:	0082      	lsls	r2, r0, #2
 800754a:	440a      	add	r2, r1
 800754c:	6850      	ldr	r0, [r2, #4]
 800754e:	6840      	ldr	r0, [r0, #4]
 8007550:	6050      	str	r0, [r2, #4]
 8007552:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8007556:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800755a:	3208      	adds	r2, #8
 800755c:	4411      	add	r1, r2
 800755e:	4288      	cmp	r0, r1
 8007560:	d00f      	beq.n	8007582 <vTaskSwitchContext+0x86>
 8007562:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007566:	0091      	lsls	r1, r2, #2
 8007568:	4a0d      	ldr	r2, [pc, #52]	; (80075a0 <vTaskSwitchContext+0xa4>)
 800756a:	440a      	add	r2, r1
 800756c:	6852      	ldr	r2, [r2, #4]
 800756e:	68d1      	ldr	r1, [r2, #12]
 8007570:	4a09      	ldr	r2, [pc, #36]	; (8007598 <vTaskSwitchContext+0x9c>)
 8007572:	6011      	str	r1, [r2, #0]
 8007574:	4909      	ldr	r1, [pc, #36]	; (800759c <vTaskSwitchContext+0xa0>)
 8007576:	600b      	str	r3, [r1, #0]
		traceTASK_SWITCHED_IN();
 8007578:	6813      	ldr	r3, [r2, #0]
 800757a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800757c:	f7f9 fc64 	bl	8000e48 <callback_in>
}
 8007580:	e7c3      	b.n	800750a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007582:	6840      	ldr	r0, [r0, #4]
 8007584:	4662      	mov	r2, ip
 8007586:	0091      	lsls	r1, r2, #2
 8007588:	4a05      	ldr	r2, [pc, #20]	; (80075a0 <vTaskSwitchContext+0xa4>)
 800758a:	440a      	add	r2, r1
 800758c:	6050      	str	r0, [r2, #4]
 800758e:	e7e8      	b.n	8007562 <vTaskSwitchContext+0x66>
 8007590:	20001b28 	.word	0x20001b28
 8007594:	20001bac 	.word	0x20001bac
 8007598:	200016b0 	.word	0x200016b0
 800759c:	20001b30 	.word	0x20001b30
 80075a0:	200016bc 	.word	0x200016bc

080075a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80075a4:	b158      	cbz	r0, 80075be <vTaskPlaceOnEventList+0x1a>
{
 80075a6:	b510      	push	{r4, lr}
 80075a8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075aa:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <vTaskPlaceOnEventList+0x2c>)
 80075ac:	6811      	ldr	r1, [r2, #0]
 80075ae:	3118      	adds	r1, #24
 80075b0:	f7fe ffed 	bl	800658e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075b4:	2101      	movs	r1, #1
 80075b6:	4620      	mov	r0, r4
 80075b8:	f7ff fd16 	bl	8006fe8 <prvAddCurrentTaskToDelayedList>
}
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80075ce:	e7fe      	b.n	80075ce <vTaskPlaceOnEventList+0x2a>
 80075d0:	200016b0 	.word	0x200016b0

080075d4 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 80075d4:	b170      	cbz	r0, 80075f4 <vTaskPlaceOnUnorderedEventList+0x20>
{
 80075d6:	b510      	push	{r4, lr}
 80075d8:	4614      	mov	r4, r2
 80075da:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 80075dc:	4b11      	ldr	r3, [pc, #68]	; (8007624 <vTaskPlaceOnUnorderedEventList+0x50>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	b98b      	cbnz	r3, 8007606 <vTaskPlaceOnUnorderedEventList+0x32>
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	e7fe      	b.n	80075f2 <vTaskPlaceOnUnorderedEventList+0x1e>
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007604:	e7fe      	b.n	8007604 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007606:	4b08      	ldr	r3, [pc, #32]	; (8007628 <vTaskPlaceOnUnorderedEventList+0x54>)
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800760e:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007610:	6819      	ldr	r1, [r3, #0]
 8007612:	3118      	adds	r1, #24
 8007614:	4610      	mov	r0, r2
 8007616:	f7fe ffaf 	bl	8006578 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800761a:	2101      	movs	r1, #1
 800761c:	4620      	mov	r0, r4
 800761e:	f7ff fce3 	bl	8006fe8 <prvAddCurrentTaskToDelayedList>
}
 8007622:	bd10      	pop	{r4, pc}
 8007624:	20001b28 	.word	0x20001b28
 8007628:	200016b0 	.word	0x200016b0

0800762c <vTaskPlaceOnEventListRestricted>:
	{
 800762c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800762e:	b170      	cbz	r0, 800764e <vTaskPlaceOnEventListRestricted+0x22>
 8007630:	460d      	mov	r5, r1
 8007632:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007634:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <vTaskPlaceOnEventListRestricted+0x34>)
 8007636:	6811      	ldr	r1, [r2, #0]
 8007638:	3118      	adds	r1, #24
 800763a:	f7fe ff9d 	bl	8006578 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800763e:	b10c      	cbz	r4, 8007644 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8007640:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007644:	4621      	mov	r1, r4
 8007646:	4628      	mov	r0, r5
 8007648:	f7ff fcce 	bl	8006fe8 <prvAddCurrentTaskToDelayedList>
	}
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800765e:	e7fe      	b.n	800765e <vTaskPlaceOnEventListRestricted+0x32>
 8007660:	200016b0 	.word	0x200016b0

08007664 <xTaskRemoveFromEventList>:
{
 8007664:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007666:	68c3      	ldr	r3, [r0, #12]
 8007668:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800766a:	b324      	cbz	r4, 80076b6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800766c:	f104 0518 	add.w	r5, r4, #24
 8007670:	4628      	mov	r0, r5
 8007672:	f7fe ffa5 	bl	80065c0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007676:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <xTaskRemoveFromEventList+0x74>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	bb2b      	cbnz	r3, 80076c8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800767c:	1d25      	adds	r5, r4, #4
 800767e:	4628      	mov	r0, r5
 8007680:	f7fe ff9e 	bl	80065c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007684:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <xTaskRemoveFromEventList+0x78>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4298      	cmp	r0, r3
 800768c:	d901      	bls.n	8007692 <xTaskRemoveFromEventList+0x2e>
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <xTaskRemoveFromEventList+0x78>)
 8007690:	6018      	str	r0, [r3, #0]
 8007692:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007696:	4629      	mov	r1, r5
 8007698:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <xTaskRemoveFromEventList+0x7c>)
 800769a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800769e:	f7fe ff6b 	bl	8006578 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80076a4:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <xTaskRemoveFromEventList+0x80>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d911      	bls.n	80076d2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 80076ae:	2001      	movs	r0, #1
 80076b0:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <xTaskRemoveFromEventList+0x84>)
 80076b2:	6018      	str	r0, [r3, #0]
}
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80076c6:	e7fe      	b.n	80076c6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076c8:	4629      	mov	r1, r5
 80076ca:	4808      	ldr	r0, [pc, #32]	; (80076ec <xTaskRemoveFromEventList+0x88>)
 80076cc:	f7fe ff54 	bl	8006578 <vListInsertEnd>
 80076d0:	e7e7      	b.n	80076a2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80076d2:	2000      	movs	r0, #0
	return xReturn;
 80076d4:	e7ee      	b.n	80076b4 <xTaskRemoveFromEventList+0x50>
 80076d6:	bf00      	nop
 80076d8:	20001b28 	.word	0x20001b28
 80076dc:	20001b30 	.word	0x20001b30
 80076e0:	200016bc 	.word	0x200016bc
 80076e4:	200016b0 	.word	0x200016b0
 80076e8:	20001bac 	.word	0x20001bac
 80076ec:	20001b68 	.word	0x20001b68

080076f0 <vTaskRemoveFromUnorderedEventList>:
{
 80076f0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80076f2:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <vTaskRemoveFromUnorderedEventList+0x74>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	b943      	cbnz	r3, 800770a <vTaskRemoveFromUnorderedEventList+0x1a>
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	e7fe      	b.n	8007708 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800770a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800770e:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007710:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8007712:	b1f4      	cbz	r4, 8007752 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8007714:	f7fe ff54 	bl	80065c0 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007718:	1d25      	adds	r5, r4, #4
 800771a:	4628      	mov	r0, r5
 800771c:	f7fe ff50 	bl	80065c0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007720:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007722:	4b11      	ldr	r3, [pc, #68]	; (8007768 <vTaskRemoveFromUnorderedEventList+0x78>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4298      	cmp	r0, r3
 8007728:	d901      	bls.n	800772e <vTaskRemoveFromUnorderedEventList+0x3e>
 800772a:	4b0f      	ldr	r3, [pc, #60]	; (8007768 <vTaskRemoveFromUnorderedEventList+0x78>)
 800772c:	6018      	str	r0, [r3, #0]
 800772e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007732:	4629      	mov	r1, r5
 8007734:	4b0d      	ldr	r3, [pc, #52]	; (800776c <vTaskRemoveFromUnorderedEventList+0x7c>)
 8007736:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800773a:	f7fe ff1d 	bl	8006578 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800773e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <vTaskRemoveFromUnorderedEventList+0x80>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	429a      	cmp	r2, r3
 8007748:	d902      	bls.n	8007750 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 800774a:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <vTaskRemoveFromUnorderedEventList+0x84>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
}
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007762:	e7fe      	b.n	8007762 <vTaskRemoveFromUnorderedEventList+0x72>
 8007764:	20001b28 	.word	0x20001b28
 8007768:	20001b30 	.word	0x20001b30
 800776c:	200016bc 	.word	0x200016bc
 8007770:	200016b0 	.word	0x200016b0
 8007774:	20001bac 	.word	0x20001bac

08007778 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007778:	4b03      	ldr	r3, [pc, #12]	; (8007788 <vTaskInternalSetTimeOutState+0x10>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800777e:	4b03      	ldr	r3, [pc, #12]	; (800778c <vTaskInternalSetTimeOutState+0x14>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6043      	str	r3, [r0, #4]
}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	20001b64 	.word	0x20001b64
 800778c:	20001ba8 	.word	0x20001ba8

08007790 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8007790:	b1d8      	cbz	r0, 80077ca <xTaskCheckForTimeOut+0x3a>
{
 8007792:	b570      	push	{r4, r5, r6, lr}
 8007794:	460c      	mov	r4, r1
 8007796:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8007798:	b301      	cbz	r1, 80077dc <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800779a:	f000 fb2b 	bl	8007df4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800779e:	4b1b      	ldr	r3, [pc, #108]	; (800780c <xTaskCheckForTimeOut+0x7c>)
 80077a0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077a2:	686b      	ldr	r3, [r5, #4]
 80077a4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80077ac:	d027      	beq.n	80077fe <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077ae:	4e18      	ldr	r6, [pc, #96]	; (8007810 <xTaskCheckForTimeOut+0x80>)
 80077b0:	6836      	ldr	r6, [r6, #0]
 80077b2:	f8d5 c000 	ldr.w	ip, [r5]
 80077b6:	45b4      	cmp	ip, r6
 80077b8:	d001      	beq.n	80077be <xTaskCheckForTimeOut+0x2e>
 80077ba:	428b      	cmp	r3, r1
 80077bc:	d924      	bls.n	8007808 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077be:	4282      	cmp	r2, r0
 80077c0:	d815      	bhi.n	80077ee <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80077c6:	2401      	movs	r4, #1
 80077c8:	e01a      	b.n	8007800 <xTaskCheckForTimeOut+0x70>
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80077da:	e7fe      	b.n	80077da <xTaskCheckForTimeOut+0x4a>
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80077ec:	e7fe      	b.n	80077ec <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 80077ee:	1a5b      	subs	r3, r3, r1
 80077f0:	4413      	add	r3, r2
 80077f2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077f4:	4628      	mov	r0, r5
 80077f6:	f7ff ffbf 	bl	8007778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077fa:	2400      	movs	r4, #0
 80077fc:	e000      	b.n	8007800 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 80077fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007800:	f000 fb1a 	bl	8007e38 <vPortExitCritical>
}
 8007804:	4620      	mov	r0, r4
 8007806:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8007808:	2401      	movs	r4, #1
 800780a:	e7f9      	b.n	8007800 <xTaskCheckForTimeOut+0x70>
 800780c:	20001ba8 	.word	0x20001ba8
 8007810:	20001b64 	.word	0x20001b64

08007814 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007814:	4b01      	ldr	r3, [pc, #4]	; (800781c <vTaskMissedYield+0x8>)
 8007816:	2201      	movs	r2, #1
 8007818:	601a      	str	r2, [r3, #0]
}
 800781a:	4770      	bx	lr
 800781c:	20001bac 	.word	0x20001bac

08007820 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <xTaskGetSchedulerState+0x18>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	b133      	cbz	r3, 8007834 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <xTaskGetSchedulerState+0x1c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	b10b      	cbz	r3, 8007830 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800782c:	2000      	movs	r0, #0
	}
 800782e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8007830:	2002      	movs	r0, #2
 8007832:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007834:	2001      	movs	r0, #1
 8007836:	4770      	bx	lr
 8007838:	20001b7c 	.word	0x20001b7c
 800783c:	20001b28 	.word	0x20001b28

08007840 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007840:	2800      	cmp	r0, #0
 8007842:	d03b      	beq.n	80078bc <xTaskPriorityDisinherit+0x7c>
	{
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007848:	4b1e      	ldr	r3, [pc, #120]	; (80078c4 <xTaskPriorityDisinherit+0x84>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4283      	cmp	r3, r0
 800784e:	d008      	beq.n	8007862 <xTaskPriorityDisinherit+0x22>
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	e7fe      	b.n	8007860 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007862:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007864:	b943      	cbnz	r3, 8007878 <xTaskPriorityDisinherit+0x38>
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	e7fe      	b.n	8007876 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007878:	3b01      	subs	r3, #1
 800787a:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800787c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800787e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007880:	4291      	cmp	r1, r2
 8007882:	d01d      	beq.n	80078c0 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007884:	b10b      	cbz	r3, 800788a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8007886:	2000      	movs	r0, #0
	}
 8007888:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800788a:	1d05      	adds	r5, r0, #4
 800788c:	4628      	mov	r0, r5
 800788e:	f7fe fe97 	bl	80065c0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007892:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007894:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007896:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800789a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800789c:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <xTaskPriorityDisinherit+0x88>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4298      	cmp	r0, r3
 80078a2:	d901      	bls.n	80078a8 <xTaskPriorityDisinherit+0x68>
 80078a4:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <xTaskPriorityDisinherit+0x88>)
 80078a6:	6018      	str	r0, [r3, #0]
 80078a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80078ac:	4629      	mov	r1, r5
 80078ae:	4b07      	ldr	r3, [pc, #28]	; (80078cc <xTaskPriorityDisinherit+0x8c>)
 80078b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80078b4:	f7fe fe60 	bl	8006578 <vListInsertEnd>
					xReturn = pdTRUE;
 80078b8:	2001      	movs	r0, #1
 80078ba:	e7e5      	b.n	8007888 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80078bc:	2000      	movs	r0, #0
	}
 80078be:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80078c0:	2000      	movs	r0, #0
 80078c2:	e7e1      	b.n	8007888 <xTaskPriorityDisinherit+0x48>
 80078c4:	200016b0 	.word	0x200016b0
 80078c8:	20001b30 	.word	0x20001b30
 80078cc:	200016bc 	.word	0x200016bc

080078d0 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80078d0:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <uxTaskResetEventItemValue+0x14>)
 80078d2:	6813      	ldr	r3, [r2, #0]
 80078d4:	6998      	ldr	r0, [r3, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	6812      	ldr	r2, [r2, #0]
 80078dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80078e0:	6193      	str	r3, [r2, #24]
}
 80078e2:	4770      	bx	lr
 80078e4:	200016b0 	.word	0x200016b0

080078e8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <prvGetNextExpireTime+0x1c>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	6813      	ldr	r3, [r2, #0]
 80078ee:	fab3 f383 	clz	r3, r3
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078f6:	b913      	cbnz	r3, 80078fe <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078f8:	68d3      	ldr	r3, [r2, #12]
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078fe:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20001bb0 	.word	0x20001bb0

08007908 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007908:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800790a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800790c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800790e:	4291      	cmp	r1, r2
 8007910:	d80c      	bhi.n	800792c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	6983      	ldr	r3, [r0, #24]
 8007916:	429a      	cmp	r2, r3
 8007918:	d301      	bcc.n	800791e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800791a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800791c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800791e:	1d01      	adds	r1, r0, #4
 8007920:	4b09      	ldr	r3, [pc, #36]	; (8007948 <prvInsertTimerInActiveList+0x40>)
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	f7fe fe33 	bl	800658e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007928:	2000      	movs	r0, #0
 800792a:	e7f7      	b.n	800791c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800792c:	429a      	cmp	r2, r3
 800792e:	d201      	bcs.n	8007934 <prvInsertTimerInActiveList+0x2c>
 8007930:	4299      	cmp	r1, r3
 8007932:	d206      	bcs.n	8007942 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007934:	1d01      	adds	r1, r0, #4
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <prvInsertTimerInActiveList+0x44>)
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	f7fe fe28 	bl	800658e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800793e:	2000      	movs	r0, #0
 8007940:	e7ec      	b.n	800791c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8007942:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007944:	e7ea      	b.n	800791c <prvInsertTimerInActiveList+0x14>
 8007946:	bf00      	nop
 8007948:	20001bb4 	.word	0x20001bb4
 800794c:	20001bb0 	.word	0x20001bb0

08007950 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007950:	b530      	push	{r4, r5, lr}
 8007952:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007954:	f000 fa4e 	bl	8007df4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007958:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <prvCheckForValidListAndQueue+0x50>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	b11b      	cbz	r3, 8007966 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800795e:	f000 fa6b 	bl	8007e38 <vPortExitCritical>
}
 8007962:	b003      	add	sp, #12
 8007964:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8007966:	4d0f      	ldr	r5, [pc, #60]	; (80079a4 <prvCheckForValidListAndQueue+0x54>)
 8007968:	4628      	mov	r0, r5
 800796a:	f7fe fdf7 	bl	800655c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800796e:	4c0e      	ldr	r4, [pc, #56]	; (80079a8 <prvCheckForValidListAndQueue+0x58>)
 8007970:	4620      	mov	r0, r4
 8007972:	f7fe fdf3 	bl	800655c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <prvCheckForValidListAndQueue+0x5c>)
 8007978:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <prvCheckForValidListAndQueue+0x60>)
 800797c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800797e:	2300      	movs	r3, #0
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <prvCheckForValidListAndQueue+0x64>)
 8007984:	4a0c      	ldr	r2, [pc, #48]	; (80079b8 <prvCheckForValidListAndQueue+0x68>)
 8007986:	2110      	movs	r1, #16
 8007988:	200a      	movs	r0, #10
 800798a:	f7fe ff1f 	bl	80067cc <xQueueGenericCreateStatic>
 800798e:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <prvCheckForValidListAndQueue+0x50>)
 8007990:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8007992:	2800      	cmp	r0, #0
 8007994:	d0e3      	beq.n	800795e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007996:	4909      	ldr	r1, [pc, #36]	; (80079bc <prvCheckForValidListAndQueue+0x6c>)
 8007998:	f7ff f9b8 	bl	8006d0c <vQueueAddToRegistry>
 800799c:	e7df      	b.n	800795e <prvCheckForValidListAndQueue+0xe>
 800799e:	bf00      	nop
 80079a0:	20001cd4 	.word	0x20001cd4
 80079a4:	20001c58 	.word	0x20001c58
 80079a8:	20001c6c 	.word	0x20001c6c
 80079ac:	20001bb0 	.word	0x20001bb0
 80079b0:	20001bb4 	.word	0x20001bb4
 80079b4:	20001c84 	.word	0x20001c84
 80079b8:	20001bb8 	.word	0x20001bb8
 80079bc:	08009fe0 	.word	0x08009fe0

080079c0 <xTimerCreateTimerTask>:
{
 80079c0:	b510      	push	{r4, lr}
 80079c2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80079c4:	f7ff ffc4 	bl	8007950 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80079c8:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <xTimerCreateTimerTask+0x54>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	b1cb      	cbz	r3, 8007a02 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80079ce:	2400      	movs	r4, #0
 80079d0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80079d2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80079d4:	aa07      	add	r2, sp, #28
 80079d6:	a906      	add	r1, sp, #24
 80079d8:	a805      	add	r0, sp, #20
 80079da:	f7fe fc9b 	bl	8006314 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80079de:	9b05      	ldr	r3, [sp, #20]
 80079e0:	9302      	str	r3, [sp, #8]
 80079e2:	9b06      	ldr	r3, [sp, #24]
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	2302      	movs	r3, #2
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	4623      	mov	r3, r4
 80079ec:	9a07      	ldr	r2, [sp, #28]
 80079ee:	490a      	ldr	r1, [pc, #40]	; (8007a18 <xTimerCreateTimerTask+0x58>)
 80079f0:	480a      	ldr	r0, [pc, #40]	; (8007a1c <xTimerCreateTimerTask+0x5c>)
 80079f2:	f7ff fb4f 	bl	8007094 <xTaskCreateStatic>
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <xTimerCreateTimerTask+0x60>)
 80079f8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80079fa:	b110      	cbz	r0, 8007a02 <xTimerCreateTimerTask+0x42>
}
 80079fc:	2001      	movs	r0, #1
 80079fe:	b008      	add	sp, #32
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007a12:	e7fe      	b.n	8007a12 <xTimerCreateTimerTask+0x52>
 8007a14:	20001cd4 	.word	0x20001cd4
 8007a18:	08009fe8 	.word	0x08009fe8
 8007a1c:	08007d01 	.word	0x08007d01
 8007a20:	20001cd8 	.word	0x20001cd8

08007a24 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007a24:	b1b8      	cbz	r0, 8007a56 <xTimerGenericCommand+0x32>
 8007a26:	469c      	mov	ip, r3
 8007a28:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8007a2a:	4818      	ldr	r0, [pc, #96]	; (8007a8c <xTimerGenericCommand+0x68>)
 8007a2c:	6800      	ldr	r0, [r0, #0]
 8007a2e:	b358      	cbz	r0, 8007a88 <xTimerGenericCommand+0x64>
{
 8007a30:	b500      	push	{lr}
 8007a32:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8007a34:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a36:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007a38:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a3a:	2905      	cmp	r1, #5
 8007a3c:	dc1c      	bgt.n	8007a78 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a3e:	f7ff feef 	bl	8007820 <xTaskGetSchedulerState>
 8007a42:	2802      	cmp	r0, #2
 8007a44:	d010      	beq.n	8007a68 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a46:	2300      	movs	r3, #0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4669      	mov	r1, sp
 8007a4c:	480f      	ldr	r0, [pc, #60]	; (8007a8c <xTimerGenericCommand+0x68>)
 8007a4e:	6800      	ldr	r0, [r0, #0]
 8007a50:	f7fe ff2c 	bl	80068ac <xQueueGenericSend>
 8007a54:	e015      	b.n	8007a82 <xTimerGenericCommand+0x5e>
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007a66:	e7fe      	b.n	8007a66 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9a06      	ldr	r2, [sp, #24]
 8007a6c:	4669      	mov	r1, sp
 8007a6e:	4807      	ldr	r0, [pc, #28]	; (8007a8c <xTimerGenericCommand+0x68>)
 8007a70:	6800      	ldr	r0, [r0, #0]
 8007a72:	f7fe ff1b 	bl	80068ac <xQueueGenericSend>
 8007a76:	e004      	b.n	8007a82 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4662      	mov	r2, ip
 8007a7c:	4669      	mov	r1, sp
 8007a7e:	f7fe ffd9 	bl	8006a34 <xQueueGenericSendFromISR>
}
 8007a82:	b005      	add	sp, #20
 8007a84:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8007a88:	2000      	movs	r0, #0
}
 8007a8a:	4770      	bx	lr
 8007a8c:	20001cd4 	.word	0x20001cd4

08007a90 <prvSwitchTimerLists>:
{
 8007a90:	b570      	push	{r4, r5, r6, lr}
 8007a92:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <prvSwitchTimerLists+0x70>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	b352      	cbz	r2, 8007af2 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007aa0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aa2:	1d25      	adds	r5, r4, #4
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f7fe fd8b 	bl	80065c0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aac:	4620      	mov	r0, r4
 8007aae:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ab0:	69e3      	ldr	r3, [r4, #28]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d1ee      	bne.n	8007a94 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ab6:	69a3      	ldr	r3, [r4, #24]
 8007ab8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8007aba:	429e      	cmp	r6, r3
 8007abc:	d207      	bcs.n	8007ace <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007abe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ac0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <prvSwitchTimerLists+0x70>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	f7fe fd61 	bl	800658e <vListInsert>
 8007acc:	e7e2      	b.n	8007a94 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ace:	2100      	movs	r1, #0
 8007ad0:	9100      	str	r1, [sp, #0]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7ff ffa4 	bl	8007a24 <xTimerGenericCommand>
				configASSERT( xResult );
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d1d9      	bne.n	8007a94 <prvSwitchTimerLists+0x4>
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	e7fe      	b.n	8007af0 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8007af2:	4a04      	ldr	r2, [pc, #16]	; (8007b04 <prvSwitchTimerLists+0x74>)
 8007af4:	6810      	ldr	r0, [r2, #0]
 8007af6:	4902      	ldr	r1, [pc, #8]	; (8007b00 <prvSwitchTimerLists+0x70>)
 8007af8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8007afa:	6013      	str	r3, [r2, #0]
}
 8007afc:	b002      	add	sp, #8
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	20001bb0 	.word	0x20001bb0
 8007b04:	20001bb4 	.word	0x20001bb4

08007b08 <prvSampleTimeNow>:
{
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8007b0c:	f7ff fb86 	bl	800721c <xTaskGetTickCount>
 8007b10:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <prvSampleTimeNow+0x28>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4283      	cmp	r3, r0
 8007b18:	d805      	bhi.n	8007b26 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8007b1e:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <prvSampleTimeNow+0x28>)
 8007b20:	601c      	str	r4, [r3, #0]
}
 8007b22:	4620      	mov	r0, r4
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8007b26:	f7ff ffb3 	bl	8007a90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	602b      	str	r3, [r5, #0]
 8007b2e:	e7f6      	b.n	8007b1e <prvSampleTimeNow+0x16>
 8007b30:	20001c80 	.word	0x20001c80

08007b34 <prvProcessExpiredTimer>:
{
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	4606      	mov	r6, r0
 8007b3a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b3c:	4914      	ldr	r1, [pc, #80]	; (8007b90 <prvProcessExpiredTimer+0x5c>)
 8007b3e:	6809      	ldr	r1, [r1, #0]
 8007b40:	68c9      	ldr	r1, [r1, #12]
 8007b42:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b44:	1d20      	adds	r0, r4, #4
 8007b46:	f7fe fd3b 	bl	80065c0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b4a:	69e1      	ldr	r1, [r4, #28]
 8007b4c:	2901      	cmp	r1, #1
 8007b4e:	d004      	beq.n	8007b5a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b52:	4620      	mov	r0, r4
 8007b54:	4798      	blx	r3
}
 8007b56:	b002      	add	sp, #8
 8007b58:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b5a:	69a1      	ldr	r1, [r4, #24]
 8007b5c:	4633      	mov	r3, r6
 8007b5e:	462a      	mov	r2, r5
 8007b60:	4431      	add	r1, r6
 8007b62:	4620      	mov	r0, r4
 8007b64:	f7ff fed0 	bl	8007908 <prvInsertTimerInActiveList>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d0f1      	beq.n	8007b50 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	9100      	str	r1, [sp, #0]
 8007b70:	460b      	mov	r3, r1
 8007b72:	4632      	mov	r2, r6
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7ff ff55 	bl	8007a24 <xTimerGenericCommand>
			configASSERT( xResult );
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d1e8      	bne.n	8007b50 <prvProcessExpiredTimer+0x1c>
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	e7fe      	b.n	8007b8e <prvProcessExpiredTimer+0x5a>
 8007b90:	20001bb0 	.word	0x20001bb0

08007b94 <prvProcessTimerOrBlockTask>:
{
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	4606      	mov	r6, r0
 8007b9a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8007b9c:	f7ff fb36 	bl	800720c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ba0:	a801      	add	r0, sp, #4
 8007ba2:	f7ff ffb1 	bl	8007b08 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	bb2b      	cbnz	r3, 8007bf6 <prvProcessTimerOrBlockTask+0x62>
 8007baa:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bac:	b90c      	cbnz	r4, 8007bb2 <prvProcessTimerOrBlockTask+0x1e>
 8007bae:	42b0      	cmp	r0, r6
 8007bb0:	d21a      	bcs.n	8007be8 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 8007bb2:	b12c      	cbz	r4, 8007bc0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007bb4:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <prvProcessTimerOrBlockTask+0x6c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681c      	ldr	r4, [r3, #0]
 8007bba:	fab4 f484 	clz	r4, r4
 8007bbe:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	1b71      	subs	r1, r6, r5
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <prvProcessTimerOrBlockTask+0x70>)
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	f7ff f8b4 	bl	8006d34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007bcc:	f7ff fbb8 	bl	8007340 <xTaskResumeAll>
 8007bd0:	b998      	cbnz	r0, 8007bfa <prvProcessTimerOrBlockTask+0x66>
					portYIELD_WITHIN_API();
 8007bd2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	e008      	b.n	8007bfa <prvProcessTimerOrBlockTask+0x66>
				( void ) xTaskResumeAll();
 8007be8:	f7ff fbaa 	bl	8007340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bec:	4629      	mov	r1, r5
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7ff ffa0 	bl	8007b34 <prvProcessExpiredTimer>
 8007bf4:	e001      	b.n	8007bfa <prvProcessTimerOrBlockTask+0x66>
			( void ) xTaskResumeAll();
 8007bf6:	f7ff fba3 	bl	8007340 <xTaskResumeAll>
}
 8007bfa:	b002      	add	sp, #8
 8007bfc:	bd70      	pop	{r4, r5, r6, pc}
 8007bfe:	bf00      	nop
 8007c00:	20001bb4 	.word	0x20001bb4
 8007c04:	20001cd4 	.word	0x20001cd4

08007c08 <prvProcessReceivedCommands>:
{
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c0c:	e002      	b.n	8007c14 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	da0f      	bge.n	8007c34 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c14:	2200      	movs	r2, #0
 8007c16:	a904      	add	r1, sp, #16
 8007c18:	4b38      	ldr	r3, [pc, #224]	; (8007cfc <prvProcessReceivedCommands+0xf4>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	f7fe ff70 	bl	8006b00 <xQueueReceive>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d069      	beq.n	8007cf8 <prvProcessReceivedCommands+0xf0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	daf1      	bge.n	8007c0e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c2a:	9907      	ldr	r1, [sp, #28]
 8007c2c:	9806      	ldr	r0, [sp, #24]
 8007c2e:	9b05      	ldr	r3, [sp, #20]
 8007c30:	4798      	blx	r3
 8007c32:	e7ec      	b.n	8007c0e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c34:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c36:	6963      	ldr	r3, [r4, #20]
 8007c38:	b113      	cbz	r3, 8007c40 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c3a:	1d20      	adds	r0, r4, #4
 8007c3c:	f7fe fcc0 	bl	80065c0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c40:	a803      	add	r0, sp, #12
 8007c42:	f7ff ff61 	bl	8007b08 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007c46:	9b04      	ldr	r3, [sp, #16]
 8007c48:	2b09      	cmp	r3, #9
 8007c4a:	d8e3      	bhi.n	8007c14 <prvProcessReceivedCommands+0xc>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <prvProcessReceivedCommands+0x4c>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c7d 	.word	0x08007c7d
 8007c58:	08007c7d 	.word	0x08007c7d
 8007c5c:	08007c7d 	.word	0x08007c7d
 8007c60:	08007c15 	.word	0x08007c15
 8007c64:	08007cc3 	.word	0x08007cc3
 8007c68:	08007ce9 	.word	0x08007ce9
 8007c6c:	08007c7d 	.word	0x08007c7d
 8007c70:	08007c7d 	.word	0x08007c7d
 8007c74:	08007c15 	.word	0x08007c15
 8007c78:	08007cc3 	.word	0x08007cc3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c7c:	9b05      	ldr	r3, [sp, #20]
 8007c7e:	69a1      	ldr	r1, [r4, #24]
 8007c80:	4602      	mov	r2, r0
 8007c82:	4419      	add	r1, r3
 8007c84:	4620      	mov	r0, r4
 8007c86:	f7ff fe3f 	bl	8007908 <prvInsertTimerInActiveList>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d0c2      	beq.n	8007c14 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c90:	4620      	mov	r0, r4
 8007c92:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c94:	69e3      	ldr	r3, [r4, #28]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d1bc      	bne.n	8007c14 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c9a:	69a2      	ldr	r2, [r4, #24]
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	9100      	str	r1, [sp, #0]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	9805      	ldr	r0, [sp, #20]
 8007ca4:	4402      	add	r2, r0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f7ff febc 	bl	8007a24 <xTimerGenericCommand>
							configASSERT( xResult );
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d1b1      	bne.n	8007c14 <prvProcessReceivedCommands+0xc>
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	e7fe      	b.n	8007cc0 <prvProcessReceivedCommands+0xb8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cc2:	9905      	ldr	r1, [sp, #20]
 8007cc4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cc6:	b131      	cbz	r1, 8007cd6 <prvProcessReceivedCommands+0xce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cc8:	4603      	mov	r3, r0
 8007cca:	4602      	mov	r2, r0
 8007ccc:	4401      	add	r1, r0
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7ff fe1a 	bl	8007908 <prvInsertTimerInActiveList>
					break;
 8007cd4:	e79e      	b.n	8007c14 <prvProcessReceivedCommands+0xc>
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	f383 8811 	msr	BASEPRI, r3
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ce6:	e7fe      	b.n	8007ce6 <prvProcessReceivedCommands+0xde>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ce8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d191      	bne.n	8007c14 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fa71 	bl	80081d8 <vPortFree>
 8007cf6:	e78d      	b.n	8007c14 <prvProcessReceivedCommands+0xc>
}
 8007cf8:	b008      	add	sp, #32
 8007cfa:	bd10      	pop	{r4, pc}
 8007cfc:	20001cd4 	.word	0x20001cd4

08007d00 <prvTimerTask>:
{
 8007d00:	b500      	push	{lr}
 8007d02:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d04:	a801      	add	r0, sp, #4
 8007d06:	f7ff fdef 	bl	80078e8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d0a:	9901      	ldr	r1, [sp, #4]
 8007d0c:	f7ff ff42 	bl	8007b94 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8007d10:	f7ff ff7a 	bl	8007c08 <prvProcessReceivedCommands>
	for( ;; )
 8007d14:	e7f6      	b.n	8007d04 <prvTimerTask+0x4>
	...

08007d18 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d18:	b510      	push	{r4, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007d20:	f06f 0301 	mvn.w	r3, #1
 8007d24:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007d26:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007d28:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007d2a:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4669      	mov	r1, sp
 8007d30:	4802      	ldr	r0, [pc, #8]	; (8007d3c <xTimerPendFunctionCallFromISR+0x24>)
 8007d32:	6800      	ldr	r0, [r0, #0]
 8007d34:	f7fe fe7e 	bl	8006a34 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8007d38:	b004      	add	sp, #16
 8007d3a:	bd10      	pop	{r4, pc}
 8007d3c:	20001cd4 	.word	0x20001cd4

08007d40 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d40:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d46:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <prvTaskExitError+0x3c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4e:	d008      	beq.n	8007d62 <prvTaskExitError+0x22>
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	e7fe      	b.n	8007d60 <prvTaskExitError+0x20>
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0fc      	beq.n	8007d72 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d78:	b002      	add	sp, #8
 8007d7a:	4770      	bx	lr
 8007d7c:	200007c4 	.word	0x200007c4

08007d80 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007d80:	4806      	ldr	r0, [pc, #24]	; (8007d9c <prvPortStartFirstTask+0x1c>)
 8007d82:	6800      	ldr	r0, [r0, #0]
 8007d84:	6800      	ldr	r0, [r0, #0]
 8007d86:	f380 8808 	msr	MSP, r0
 8007d8a:	b662      	cpsie	i
 8007d8c:	b661      	cpsie	f
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	df00      	svc	0
 8007d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d9a:	0000      	.short	0x0000
 8007d9c:	e000ed08 	.word	0xe000ed08

08007da0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007da4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007da8:	f021 0101 	bic.w	r1, r1, #1
 8007dac:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007db0:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <pxPortInitialiseStack+0x20>)
 8007db2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007db6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007dba:	3840      	subs	r0, #64	; 0x40
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	08007d41 	.word	0x08007d41
	...

08007dd0 <SVC_Handler>:
	__asm volatile (
 8007dd0:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <pxCurrentTCBConst2>)
 8007dd2:	6819      	ldr	r1, [r3, #0]
 8007dd4:	6808      	ldr	r0, [r1, #0]
 8007dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007dda:	f380 8809 	msr	PSP, r0
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f380 8811 	msr	BASEPRI, r0
 8007dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dee:	4770      	bx	lr

08007df0 <pxCurrentTCBConst2>:
 8007df0:	200016b0 	.word	0x200016b0

08007df4 <vPortEnterCritical>:
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e04:	4a0b      	ldr	r2, [pc, #44]	; (8007e34 <vPortEnterCritical+0x40>)
 8007e06:	6813      	ldr	r3, [r2, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d000      	beq.n	8007e12 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007e10:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e16:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007e1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e1e:	d0f7      	beq.n	8007e10 <vPortEnterCritical+0x1c>
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	e7fe      	b.n	8007e30 <vPortEnterCritical+0x3c>
 8007e32:	bf00      	nop
 8007e34:	200007c4 	.word	0x200007c4

08007e38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007e38:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <vPortExitCritical+0x28>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	b943      	cbnz	r3, 8007e50 <vPortExitCritical+0x18>
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	e7fe      	b.n	8007e4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007e50:	3b01      	subs	r3, #1
 8007e52:	4a03      	ldr	r2, [pc, #12]	; (8007e60 <vPortExitCritical+0x28>)
 8007e54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e56:	b90b      	cbnz	r3, 8007e5c <vPortExitCritical+0x24>
	__asm volatile
 8007e58:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	200007c4 	.word	0x200007c4
	...

08007e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e70:	f3ef 8009 	mrs	r0, PSP
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <pxCurrentTCBConst>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e80:	6010      	str	r0, [r2, #0]
 8007e82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007e86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e8a:	f380 8811 	msr	BASEPRI, r0
 8007e8e:	f7ff fb35 	bl	80074fc <vTaskSwitchContext>
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f380 8811 	msr	BASEPRI, r0
 8007e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e9e:	6819      	ldr	r1, [r3, #0]
 8007ea0:	6808      	ldr	r0, [r1, #0]
 8007ea2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ea6:	f380 8809 	msr	PSP, r0
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	4770      	bx	lr

08007eb0 <pxCurrentTCBConst>:
 8007eb0:	200016b0 	.word	0x200016b0

08007eb4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007eb4:	b508      	push	{r3, lr}
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ec6:	f7ff f9af 	bl	8007228 <xTaskIncrementTick>
 8007eca:	b128      	cbz	r0, 8007ed8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ecc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ede:	bd08      	pop	{r3, pc}

08007ee0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ee0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ee8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eea:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <vPortSetupTimerInterrupt+0x20>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4905      	ldr	r1, [pc, #20]	; (8007f04 <vPortSetupTimerInterrupt+0x24>)
 8007ef0:	fba1 1303 	umull	r1, r3, r1, r3
 8007ef4:	099b      	lsrs	r3, r3, #6
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007efa:	2307      	movs	r3, #7
 8007efc:	6113      	str	r3, [r2, #16]
}
 8007efe:	4770      	bx	lr
 8007f00:	20000020 	.word	0x20000020
 8007f04:	10624dd3 	.word	0x10624dd3

08007f08 <xPortStartScheduler>:
{
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f0c:	4b2a      	ldr	r3, [pc, #168]	; (8007fb8 <xPortStartScheduler+0xb0>)
 8007f0e:	781a      	ldrb	r2, [r3, #0]
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f14:	22ff      	movs	r2, #255	; 0xff
 8007f16:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f20:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f28:	4a24      	ldr	r2, [pc, #144]	; (8007fbc <xPortStartScheduler+0xb4>)
 8007f2a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f2c:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <xPortStartScheduler+0xb8>)
 8007f2e:	2207      	movs	r2, #7
 8007f30:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f32:	e009      	b.n	8007f48 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8007f34:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <xPortStartScheduler+0xb8>)
 8007f36:	6813      	ldr	r3, [r2, #0]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f48:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f50:	d1f0      	bne.n	8007f34 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f52:	4b1b      	ldr	r3, [pc, #108]	; (8007fc0 <xPortStartScheduler+0xb8>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d008      	beq.n	8007f6c <xPortStartScheduler+0x64>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	e7fe      	b.n	8007f6a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	4a14      	ldr	r2, [pc, #80]	; (8007fc0 <xPortStartScheduler+0xb8>)
 8007f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f76:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	4a0e      	ldr	r2, [pc, #56]	; (8007fb8 <xPortStartScheduler+0xb0>)
 8007f7e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f84:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007f88:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007f8c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f90:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007f94:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007f98:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007f9c:	f7ff ffa0 	bl	8007ee0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007fa0:	2400      	movs	r4, #0
 8007fa2:	4b08      	ldr	r3, [pc, #32]	; (8007fc4 <xPortStartScheduler+0xbc>)
 8007fa4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007fa6:	f7ff feeb 	bl	8007d80 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007faa:	f7ff faa7 	bl	80074fc <vTaskSwitchContext>
	prvTaskExitError();
 8007fae:	f7ff fec7 	bl	8007d40 <prvTaskExitError>
}
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	b002      	add	sp, #8
 8007fb6:	bd10      	pop	{r4, pc}
 8007fb8:	e000e400 	.word	0xe000e400
 8007fbc:	20001cdc 	.word	0x20001cdc
 8007fc0:	20001ce0 	.word	0x20001ce0
 8007fc4:	200007c4 	.word	0x200007c4

08007fc8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fc8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fcc:	2b0f      	cmp	r3, #15
 8007fce:	d90f      	bls.n	8007ff0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fd0:	4a11      	ldr	r2, [pc, #68]	; (8008018 <vPortValidateInterruptPriority+0x50>)
 8007fd2:	5c9b      	ldrb	r3, [r3, r2]
 8007fd4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fd6:	4a11      	ldr	r2, [pc, #68]	; (800801c <vPortValidateInterruptPriority+0x54>)
 8007fd8:	7812      	ldrb	r2, [r2, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d908      	bls.n	8007ff0 <vPortValidateInterruptPriority+0x28>
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	e7fe      	b.n	8007fee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ff0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ff4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ffc:	4a08      	ldr	r2, [pc, #32]	; (8008020 <vPortValidateInterruptPriority+0x58>)
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	4293      	cmp	r3, r2
 8008002:	d908      	bls.n	8008016 <vPortValidateInterruptPriority+0x4e>
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	e7fe      	b.n	8008014 <vPortValidateInterruptPriority+0x4c>
	}
 8008016:	4770      	bx	lr
 8008018:	e000e3f0 	.word	0xe000e3f0
 800801c:	20001cdc 	.word	0x20001cdc
 8008020:	20001ce0 	.word	0x20001ce0

08008024 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008024:	4a12      	ldr	r2, [pc, #72]	; (8008070 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008026:	f012 0f07 	tst.w	r2, #7
 800802a:	d01e      	beq.n	800806a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800802c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800802e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008032:	f5c1 637a 	rsb	r3, r1, #4000	; 0xfa0
 8008036:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008038:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800803a:	480e      	ldr	r0, [pc, #56]	; (8008074 <prvHeapInit+0x50>)
 800803c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800803e:	2100      	movs	r1, #0
 8008040:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008042:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8008044:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008046:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800804a:	480b      	ldr	r0, [pc, #44]	; (8008078 <prvHeapInit+0x54>)
 800804c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800804e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008050:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008052:	1a99      	subs	r1, r3, r2
 8008054:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008056:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008058:	4b08      	ldr	r3, [pc, #32]	; (800807c <prvHeapInit+0x58>)
 800805a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800805c:	4b08      	ldr	r3, [pc, #32]	; (8008080 <prvHeapInit+0x5c>)
 800805e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008060:	4b08      	ldr	r3, [pc, #32]	; (8008084 <prvHeapInit+0x60>)
 8008062:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008066:	601a      	str	r2, [r3, #0]
}
 8008068:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800806a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800806e:	e7e4      	b.n	800803a <prvHeapInit+0x16>
 8008070:	20001ce8 	.word	0x20001ce8
 8008074:	20002c94 	.word	0x20002c94
 8008078:	20001ce4 	.word	0x20001ce4
 800807c:	20002c90 	.word	0x20002c90
 8008080:	20002c8c 	.word	0x20002c8c
 8008084:	20002c88 	.word	0x20002c88

08008088 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008088:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <prvInsertBlockIntoFreeList+0x58>)
 800808a:	461a      	mov	r2, r3
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4283      	cmp	r3, r0
 8008090:	d3fb      	bcc.n	800808a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008092:	6851      	ldr	r1, [r2, #4]
 8008094:	eb02 0c01 	add.w	ip, r2, r1
 8008098:	4584      	cmp	ip, r0
 800809a:	d009      	beq.n	80080b0 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800809c:	6841      	ldr	r1, [r0, #4]
 800809e:	eb00 0c01 	add.w	ip, r0, r1
 80080a2:	4563      	cmp	r3, ip
 80080a4:	d009      	beq.n	80080ba <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080a6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080a8:	4290      	cmp	r0, r2
 80080aa:	d018      	beq.n	80080de <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080ac:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80080ae:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080b0:	6840      	ldr	r0, [r0, #4]
 80080b2:	4401      	add	r1, r0
 80080b4:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80080b6:	4610      	mov	r0, r2
 80080b8:	e7f0      	b.n	800809c <prvInsertBlockIntoFreeList+0x14>
{
 80080ba:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080bc:	4c09      	ldr	r4, [pc, #36]	; (80080e4 <prvInsertBlockIntoFreeList+0x5c>)
 80080be:	6824      	ldr	r4, [r4, #0]
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	d00a      	beq.n	80080da <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4419      	add	r1, r3
 80080c8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80080d0:	4290      	cmp	r0, r2
 80080d2:	d000      	beq.n	80080d6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080d4:	6010      	str	r0, [r2, #0]
	}
}
 80080d6:	bc10      	pop	{r4}
 80080d8:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080da:	6004      	str	r4, [r0, #0]
 80080dc:	e7f8      	b.n	80080d0 <prvInsertBlockIntoFreeList+0x48>
 80080de:	4770      	bx	lr
 80080e0:	20002c94 	.word	0x20002c94
 80080e4:	20001ce4 	.word	0x20001ce4

080080e8 <pvPortMalloc>:
{
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80080ec:	f7ff f88e 	bl	800720c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80080f0:	4b34      	ldr	r3, [pc, #208]	; (80081c4 <pvPortMalloc+0xdc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	b1a3      	cbz	r3, 8008120 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080f6:	4b34      	ldr	r3, [pc, #208]	; (80081c8 <pvPortMalloc+0xe0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	421d      	tst	r5, r3
 80080fc:	d14a      	bne.n	8008194 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 80080fe:	b135      	cbz	r5, 800810e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8008100:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008102:	f015 0f07 	tst.w	r5, #7
 8008106:	d002      	beq.n	800810e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008108:	f025 0507 	bic.w	r5, r5, #7
 800810c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800810e:	2d00      	cmp	r5, #0
 8008110:	d042      	beq.n	8008198 <pvPortMalloc+0xb0>
 8008112:	4b2e      	ldr	r3, [pc, #184]	; (80081cc <pvPortMalloc+0xe4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	42ab      	cmp	r3, r5
 8008118:	d34d      	bcc.n	80081b6 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 800811a:	4a2d      	ldr	r2, [pc, #180]	; (80081d0 <pvPortMalloc+0xe8>)
 800811c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800811e:	e004      	b.n	800812a <pvPortMalloc+0x42>
			prvHeapInit();
 8008120:	f7ff ff80 	bl	8008024 <prvHeapInit>
 8008124:	e7e7      	b.n	80080f6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8008126:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8008128:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	42ab      	cmp	r3, r5
 800812e:	d202      	bcs.n	8008136 <pvPortMalloc+0x4e>
 8008130:	6823      	ldr	r3, [r4, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f7      	bne.n	8008126 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008136:	4b23      	ldr	r3, [pc, #140]	; (80081c4 <pvPortMalloc+0xdc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	42a3      	cmp	r3, r4
 800813c:	d03d      	beq.n	80081ba <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800813e:	6816      	ldr	r6, [r2, #0]
 8008140:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008146:	6863      	ldr	r3, [r4, #4]
 8008148:	1b5b      	subs	r3, r3, r5
 800814a:	2b10      	cmp	r3, #16
 800814c:	d910      	bls.n	8008170 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800814e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008150:	f010 0f07 	tst.w	r0, #7
 8008154:	d008      	beq.n	8008168 <pvPortMalloc+0x80>
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	e7fe      	b.n	8008166 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008168:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800816a:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800816c:	f7ff ff8c 	bl	8008088 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008170:	6862      	ldr	r2, [r4, #4]
 8008172:	4916      	ldr	r1, [pc, #88]	; (80081cc <pvPortMalloc+0xe4>)
 8008174:	680b      	ldr	r3, [r1, #0]
 8008176:	1a9b      	subs	r3, r3, r2
 8008178:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800817a:	4916      	ldr	r1, [pc, #88]	; (80081d4 <pvPortMalloc+0xec>)
 800817c:	6809      	ldr	r1, [r1, #0]
 800817e:	428b      	cmp	r3, r1
 8008180:	d201      	bcs.n	8008186 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008182:	4914      	ldr	r1, [pc, #80]	; (80081d4 <pvPortMalloc+0xec>)
 8008184:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008186:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <pvPortMalloc+0xe0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4313      	orrs	r3, r2
 800818c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	e002      	b.n	800819a <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8008194:	2600      	movs	r6, #0
 8008196:	e000      	b.n	800819a <pvPortMalloc+0xb2>
 8008198:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800819a:	f7ff f8d1 	bl	8007340 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800819e:	f016 0f07 	tst.w	r6, #7
 80081a2:	d00c      	beq.n	80081be <pvPortMalloc+0xd6>
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	e7fe      	b.n	80081b4 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 80081b6:	2600      	movs	r6, #0
 80081b8:	e7ef      	b.n	800819a <pvPortMalloc+0xb2>
 80081ba:	2600      	movs	r6, #0
 80081bc:	e7ed      	b.n	800819a <pvPortMalloc+0xb2>
}
 80081be:	4630      	mov	r0, r6
 80081c0:	bd70      	pop	{r4, r5, r6, pc}
 80081c2:	bf00      	nop
 80081c4:	20001ce4 	.word	0x20001ce4
 80081c8:	20002c88 	.word	0x20002c88
 80081cc:	20002c8c 	.word	0x20002c8c
 80081d0:	20002c94 	.word	0x20002c94
 80081d4:	20002c90 	.word	0x20002c90

080081d8 <vPortFree>:
	if( pv != NULL )
 80081d8:	b380      	cbz	r0, 800823c <vPortFree+0x64>
{
 80081da:	b538      	push	{r3, r4, r5, lr}
 80081dc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80081de:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80081e6:	4a16      	ldr	r2, [pc, #88]	; (8008240 <vPortFree+0x68>)
 80081e8:	6812      	ldr	r2, [r2, #0]
 80081ea:	4213      	tst	r3, r2
 80081ec:	d108      	bne.n	8008200 <vPortFree+0x28>
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	e7fe      	b.n	80081fe <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008200:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008204:	b141      	cbz	r1, 8008218 <vPortFree+0x40>
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	e7fe      	b.n	8008216 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008218:	ea23 0302 	bic.w	r3, r3, r2
 800821c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008220:	f7fe fff4 	bl	800720c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008224:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008228:	4a06      	ldr	r2, [pc, #24]	; (8008244 <vPortFree+0x6c>)
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	440b      	add	r3, r1
 800822e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008230:	4628      	mov	r0, r5
 8008232:	f7ff ff29 	bl	8008088 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8008236:	f7ff f883 	bl	8007340 <xTaskResumeAll>
}
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20002c88 	.word	0x20002c88
 8008244:	20002c8c 	.word	0x20002c8c

08008248 <__itoa>:
 8008248:	1e93      	subs	r3, r2, #2
 800824a:	2b22      	cmp	r3, #34	; 0x22
 800824c:	b510      	push	{r4, lr}
 800824e:	460c      	mov	r4, r1
 8008250:	d904      	bls.n	800825c <__itoa+0x14>
 8008252:	2300      	movs	r3, #0
 8008254:	461c      	mov	r4, r3
 8008256:	700b      	strb	r3, [r1, #0]
 8008258:	4620      	mov	r0, r4
 800825a:	bd10      	pop	{r4, pc}
 800825c:	2a0a      	cmp	r2, #10
 800825e:	d109      	bne.n	8008274 <__itoa+0x2c>
 8008260:	2800      	cmp	r0, #0
 8008262:	da07      	bge.n	8008274 <__itoa+0x2c>
 8008264:	232d      	movs	r3, #45	; 0x2d
 8008266:	700b      	strb	r3, [r1, #0]
 8008268:	2101      	movs	r1, #1
 800826a:	4240      	negs	r0, r0
 800826c:	4421      	add	r1, r4
 800826e:	f000 f843 	bl	80082f8 <__utoa>
 8008272:	e7f1      	b.n	8008258 <__itoa+0x10>
 8008274:	2100      	movs	r1, #0
 8008276:	e7f9      	b.n	800826c <__itoa+0x24>

08008278 <itoa>:
 8008278:	f7ff bfe6 	b.w	8008248 <__itoa>

0800827c <rand>:
 800827c:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <rand+0x5c>)
 800827e:	b510      	push	{r4, lr}
 8008280:	681c      	ldr	r4, [r3, #0]
 8008282:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008284:	b9b3      	cbnz	r3, 80082b4 <rand+0x38>
 8008286:	2018      	movs	r0, #24
 8008288:	f000 fa76 	bl	8008778 <malloc>
 800828c:	4602      	mov	r2, r0
 800828e:	6320      	str	r0, [r4, #48]	; 0x30
 8008290:	b920      	cbnz	r0, 800829c <rand+0x20>
 8008292:	2152      	movs	r1, #82	; 0x52
 8008294:	4b11      	ldr	r3, [pc, #68]	; (80082dc <rand+0x60>)
 8008296:	4812      	ldr	r0, [pc, #72]	; (80082e0 <rand+0x64>)
 8008298:	f000 fa08 	bl	80086ac <__assert_func>
 800829c:	4911      	ldr	r1, [pc, #68]	; (80082e4 <rand+0x68>)
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <rand+0x6c>)
 80082a0:	e9c0 1300 	strd	r1, r3, [r0]
 80082a4:	4b11      	ldr	r3, [pc, #68]	; (80082ec <rand+0x70>)
 80082a6:	2100      	movs	r1, #0
 80082a8:	6083      	str	r3, [r0, #8]
 80082aa:	230b      	movs	r3, #11
 80082ac:	8183      	strh	r3, [r0, #12]
 80082ae:	2001      	movs	r0, #1
 80082b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80082b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80082b6:	480e      	ldr	r0, [pc, #56]	; (80082f0 <rand+0x74>)
 80082b8:	690b      	ldr	r3, [r1, #16]
 80082ba:	694c      	ldr	r4, [r1, #20]
 80082bc:	4358      	muls	r0, r3
 80082be:	4a0d      	ldr	r2, [pc, #52]	; (80082f4 <rand+0x78>)
 80082c0:	fb02 0004 	mla	r0, r2, r4, r0
 80082c4:	fba3 3202 	umull	r3, r2, r3, r2
 80082c8:	3301      	adds	r3, #1
 80082ca:	eb40 0002 	adc.w	r0, r0, r2
 80082ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80082d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80082d6:	bd10      	pop	{r4, pc}
 80082d8:	20000820 	.word	0x20000820
 80082dc:	08009ff0 	.word	0x08009ff0
 80082e0:	0800a007 	.word	0x0800a007
 80082e4:	abcd330e 	.word	0xabcd330e
 80082e8:	e66d1234 	.word	0xe66d1234
 80082ec:	0005deec 	.word	0x0005deec
 80082f0:	5851f42d 	.word	0x5851f42d
 80082f4:	4c957f2d 	.word	0x4c957f2d

080082f8 <__utoa>:
 80082f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082fa:	b08b      	sub	sp, #44	; 0x2c
 80082fc:	4605      	mov	r5, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	466e      	mov	r6, sp
 8008302:	4c1d      	ldr	r4, [pc, #116]	; (8008378 <__utoa+0x80>)
 8008304:	f104 0c20 	add.w	ip, r4, #32
 8008308:	4637      	mov	r7, r6
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	6861      	ldr	r1, [r4, #4]
 800830e:	3408      	adds	r4, #8
 8008310:	c703      	stmia	r7!, {r0, r1}
 8008312:	4564      	cmp	r4, ip
 8008314:	463e      	mov	r6, r7
 8008316:	d1f7      	bne.n	8008308 <__utoa+0x10>
 8008318:	7921      	ldrb	r1, [r4, #4]
 800831a:	6820      	ldr	r0, [r4, #0]
 800831c:	7139      	strb	r1, [r7, #4]
 800831e:	1e91      	subs	r1, r2, #2
 8008320:	2922      	cmp	r1, #34	; 0x22
 8008322:	6038      	str	r0, [r7, #0]
 8008324:	f04f 0100 	mov.w	r1, #0
 8008328:	d904      	bls.n	8008334 <__utoa+0x3c>
 800832a:	7019      	strb	r1, [r3, #0]
 800832c:	460b      	mov	r3, r1
 800832e:	4618      	mov	r0, r3
 8008330:	b00b      	add	sp, #44	; 0x2c
 8008332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008334:	1e58      	subs	r0, r3, #1
 8008336:	4684      	mov	ip, r0
 8008338:	fbb5 f7f2 	udiv	r7, r5, r2
 800833c:	fb02 5617 	mls	r6, r2, r7, r5
 8008340:	3628      	adds	r6, #40	; 0x28
 8008342:	446e      	add	r6, sp
 8008344:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008348:	460c      	mov	r4, r1
 800834a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800834e:	462e      	mov	r6, r5
 8008350:	42b2      	cmp	r2, r6
 8008352:	463d      	mov	r5, r7
 8008354:	f101 0101 	add.w	r1, r1, #1
 8008358:	d9ee      	bls.n	8008338 <__utoa+0x40>
 800835a:	2200      	movs	r2, #0
 800835c:	545a      	strb	r2, [r3, r1]
 800835e:	1919      	adds	r1, r3, r4
 8008360:	1aa5      	subs	r5, r4, r2
 8008362:	42aa      	cmp	r2, r5
 8008364:	dae3      	bge.n	800832e <__utoa+0x36>
 8008366:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800836a:	780e      	ldrb	r6, [r1, #0]
 800836c:	3201      	adds	r2, #1
 800836e:	7006      	strb	r6, [r0, #0]
 8008370:	f801 5901 	strb.w	r5, [r1], #-1
 8008374:	e7f4      	b.n	8008360 <__utoa+0x68>
 8008376:	bf00      	nop
 8008378:	0800a05f 	.word	0x0800a05f

0800837c <std>:
 800837c:	2300      	movs	r3, #0
 800837e:	b510      	push	{r4, lr}
 8008380:	4604      	mov	r4, r0
 8008382:	e9c0 3300 	strd	r3, r3, [r0]
 8008386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800838a:	6083      	str	r3, [r0, #8]
 800838c:	8181      	strh	r1, [r0, #12]
 800838e:	6643      	str	r3, [r0, #100]	; 0x64
 8008390:	81c2      	strh	r2, [r0, #14]
 8008392:	6183      	str	r3, [r0, #24]
 8008394:	4619      	mov	r1, r3
 8008396:	2208      	movs	r2, #8
 8008398:	305c      	adds	r0, #92	; 0x5c
 800839a:	f000 f8f4 	bl	8008586 <memset>
 800839e:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <std+0x58>)
 80083a0:	6224      	str	r4, [r4, #32]
 80083a2:	6263      	str	r3, [r4, #36]	; 0x24
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <std+0x5c>)
 80083a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80083a8:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <std+0x60>)
 80083aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083ac:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <std+0x64>)
 80083ae:	6323      	str	r3, [r4, #48]	; 0x30
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <std+0x68>)
 80083b2:	429c      	cmp	r4, r3
 80083b4:	d006      	beq.n	80083c4 <std+0x48>
 80083b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083ba:	4294      	cmp	r4, r2
 80083bc:	d002      	beq.n	80083c4 <std+0x48>
 80083be:	33d0      	adds	r3, #208	; 0xd0
 80083c0:	429c      	cmp	r4, r3
 80083c2:	d105      	bne.n	80083d0 <std+0x54>
 80083c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083cc:	f000 b954 	b.w	8008678 <__retarget_lock_init_recursive>
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	bf00      	nop
 80083d4:	08008501 	.word	0x08008501
 80083d8:	08008523 	.word	0x08008523
 80083dc:	0800855b 	.word	0x0800855b
 80083e0:	0800857f 	.word	0x0800857f
 80083e4:	20002c9c 	.word	0x20002c9c

080083e8 <stdio_exit_handler>:
 80083e8:	4a02      	ldr	r2, [pc, #8]	; (80083f4 <stdio_exit_handler+0xc>)
 80083ea:	4903      	ldr	r1, [pc, #12]	; (80083f8 <stdio_exit_handler+0x10>)
 80083ec:	4803      	ldr	r0, [pc, #12]	; (80083fc <stdio_exit_handler+0x14>)
 80083ee:	f000 b869 	b.w	80084c4 <_fwalk_sglue>
 80083f2:	bf00      	nop
 80083f4:	200007c8 	.word	0x200007c8
 80083f8:	080089e5 	.word	0x080089e5
 80083fc:	200007d4 	.word	0x200007d4

08008400 <cleanup_stdio>:
 8008400:	6841      	ldr	r1, [r0, #4]
 8008402:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <cleanup_stdio+0x34>)
 8008404:	b510      	push	{r4, lr}
 8008406:	4299      	cmp	r1, r3
 8008408:	4604      	mov	r4, r0
 800840a:	d001      	beq.n	8008410 <cleanup_stdio+0x10>
 800840c:	f000 faea 	bl	80089e4 <_fflush_r>
 8008410:	68a1      	ldr	r1, [r4, #8]
 8008412:	4b09      	ldr	r3, [pc, #36]	; (8008438 <cleanup_stdio+0x38>)
 8008414:	4299      	cmp	r1, r3
 8008416:	d002      	beq.n	800841e <cleanup_stdio+0x1e>
 8008418:	4620      	mov	r0, r4
 800841a:	f000 fae3 	bl	80089e4 <_fflush_r>
 800841e:	68e1      	ldr	r1, [r4, #12]
 8008420:	4b06      	ldr	r3, [pc, #24]	; (800843c <cleanup_stdio+0x3c>)
 8008422:	4299      	cmp	r1, r3
 8008424:	d004      	beq.n	8008430 <cleanup_stdio+0x30>
 8008426:	4620      	mov	r0, r4
 8008428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800842c:	f000 bada 	b.w	80089e4 <_fflush_r>
 8008430:	bd10      	pop	{r4, pc}
 8008432:	bf00      	nop
 8008434:	20002c9c 	.word	0x20002c9c
 8008438:	20002d04 	.word	0x20002d04
 800843c:	20002d6c 	.word	0x20002d6c

08008440 <global_stdio_init.part.0>:
 8008440:	b510      	push	{r4, lr}
 8008442:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <global_stdio_init.part.0+0x30>)
 8008444:	4c0b      	ldr	r4, [pc, #44]	; (8008474 <global_stdio_init.part.0+0x34>)
 8008446:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <global_stdio_init.part.0+0x38>)
 8008448:	4620      	mov	r0, r4
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	2104      	movs	r1, #4
 800844e:	2200      	movs	r2, #0
 8008450:	f7ff ff94 	bl	800837c <std>
 8008454:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008458:	2201      	movs	r2, #1
 800845a:	2109      	movs	r1, #9
 800845c:	f7ff ff8e 	bl	800837c <std>
 8008460:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008464:	2202      	movs	r2, #2
 8008466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846a:	2112      	movs	r1, #18
 800846c:	f7ff bf86 	b.w	800837c <std>
 8008470:	20002dd4 	.word	0x20002dd4
 8008474:	20002c9c 	.word	0x20002c9c
 8008478:	080083e9 	.word	0x080083e9

0800847c <__sfp_lock_acquire>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__sfp_lock_acquire+0x8>)
 800847e:	f000 b8fc 	b.w	800867a <__retarget_lock_acquire_recursive>
 8008482:	bf00      	nop
 8008484:	20002ddd 	.word	0x20002ddd

08008488 <__sfp_lock_release>:
 8008488:	4801      	ldr	r0, [pc, #4]	; (8008490 <__sfp_lock_release+0x8>)
 800848a:	f000 b8f7 	b.w	800867c <__retarget_lock_release_recursive>
 800848e:	bf00      	nop
 8008490:	20002ddd 	.word	0x20002ddd

08008494 <__sinit>:
 8008494:	b510      	push	{r4, lr}
 8008496:	4604      	mov	r4, r0
 8008498:	f7ff fff0 	bl	800847c <__sfp_lock_acquire>
 800849c:	6a23      	ldr	r3, [r4, #32]
 800849e:	b11b      	cbz	r3, 80084a8 <__sinit+0x14>
 80084a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a4:	f7ff bff0 	b.w	8008488 <__sfp_lock_release>
 80084a8:	4b04      	ldr	r3, [pc, #16]	; (80084bc <__sinit+0x28>)
 80084aa:	6223      	str	r3, [r4, #32]
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <__sinit+0x2c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f5      	bne.n	80084a0 <__sinit+0xc>
 80084b4:	f7ff ffc4 	bl	8008440 <global_stdio_init.part.0>
 80084b8:	e7f2      	b.n	80084a0 <__sinit+0xc>
 80084ba:	bf00      	nop
 80084bc:	08008401 	.word	0x08008401
 80084c0:	20002dd4 	.word	0x20002dd4

080084c4 <_fwalk_sglue>:
 80084c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c8:	4607      	mov	r7, r0
 80084ca:	4688      	mov	r8, r1
 80084cc:	4614      	mov	r4, r2
 80084ce:	2600      	movs	r6, #0
 80084d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084d4:	f1b9 0901 	subs.w	r9, r9, #1
 80084d8:	d505      	bpl.n	80084e6 <_fwalk_sglue+0x22>
 80084da:	6824      	ldr	r4, [r4, #0]
 80084dc:	2c00      	cmp	r4, #0
 80084de:	d1f7      	bne.n	80084d0 <_fwalk_sglue+0xc>
 80084e0:	4630      	mov	r0, r6
 80084e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d907      	bls.n	80084fc <_fwalk_sglue+0x38>
 80084ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084f0:	3301      	adds	r3, #1
 80084f2:	d003      	beq.n	80084fc <_fwalk_sglue+0x38>
 80084f4:	4629      	mov	r1, r5
 80084f6:	4638      	mov	r0, r7
 80084f8:	47c0      	blx	r8
 80084fa:	4306      	orrs	r6, r0
 80084fc:	3568      	adds	r5, #104	; 0x68
 80084fe:	e7e9      	b.n	80084d4 <_fwalk_sglue+0x10>

08008500 <__sread>:
 8008500:	b510      	push	{r4, lr}
 8008502:	460c      	mov	r4, r1
 8008504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008508:	f000 f868 	bl	80085dc <_read_r>
 800850c:	2800      	cmp	r0, #0
 800850e:	bfab      	itete	ge
 8008510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008512:	89a3      	ldrhlt	r3, [r4, #12]
 8008514:	181b      	addge	r3, r3, r0
 8008516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800851a:	bfac      	ite	ge
 800851c:	6563      	strge	r3, [r4, #84]	; 0x54
 800851e:	81a3      	strhlt	r3, [r4, #12]
 8008520:	bd10      	pop	{r4, pc}

08008522 <__swrite>:
 8008522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008526:	461f      	mov	r7, r3
 8008528:	898b      	ldrh	r3, [r1, #12]
 800852a:	4605      	mov	r5, r0
 800852c:	05db      	lsls	r3, r3, #23
 800852e:	460c      	mov	r4, r1
 8008530:	4616      	mov	r6, r2
 8008532:	d505      	bpl.n	8008540 <__swrite+0x1e>
 8008534:	2302      	movs	r3, #2
 8008536:	2200      	movs	r2, #0
 8008538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853c:	f000 f83c 	bl	80085b8 <_lseek_r>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	4632      	mov	r2, r6
 8008544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	4628      	mov	r0, r5
 800854c:	463b      	mov	r3, r7
 800854e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008556:	f000 b853 	b.w	8008600 <_write_r>

0800855a <__sseek>:
 800855a:	b510      	push	{r4, lr}
 800855c:	460c      	mov	r4, r1
 800855e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008562:	f000 f829 	bl	80085b8 <_lseek_r>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	bf15      	itete	ne
 800856c:	6560      	strne	r0, [r4, #84]	; 0x54
 800856e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008576:	81a3      	strheq	r3, [r4, #12]
 8008578:	bf18      	it	ne
 800857a:	81a3      	strhne	r3, [r4, #12]
 800857c:	bd10      	pop	{r4, pc}

0800857e <__sclose>:
 800857e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008582:	f000 b809 	b.w	8008598 <_close_r>

08008586 <memset>:
 8008586:	4603      	mov	r3, r0
 8008588:	4402      	add	r2, r0
 800858a:	4293      	cmp	r3, r2
 800858c:	d100      	bne.n	8008590 <memset+0xa>
 800858e:	4770      	bx	lr
 8008590:	f803 1b01 	strb.w	r1, [r3], #1
 8008594:	e7f9      	b.n	800858a <memset+0x4>
	...

08008598 <_close_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	2300      	movs	r3, #0
 800859c:	4d05      	ldr	r5, [pc, #20]	; (80085b4 <_close_r+0x1c>)
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7fa fed0 	bl	8003348 <_close>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_close_r+0x1a>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_close_r+0x1a>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20002dd8 	.word	0x20002dd8

080085b8 <_lseek_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4604      	mov	r4, r0
 80085bc:	4608      	mov	r0, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	2200      	movs	r2, #0
 80085c2:	4d05      	ldr	r5, [pc, #20]	; (80085d8 <_lseek_r+0x20>)
 80085c4:	602a      	str	r2, [r5, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	f7fa fec8 	bl	800335c <_lseek>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_lseek_r+0x1e>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_lseek_r+0x1e>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20002dd8 	.word	0x20002dd8

080085dc <_read_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	4611      	mov	r1, r2
 80085e4:	2200      	movs	r2, #0
 80085e6:	4d05      	ldr	r5, [pc, #20]	; (80085fc <_read_r+0x20>)
 80085e8:	602a      	str	r2, [r5, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f7fa fe8e 	bl	800330c <_read>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_read_r+0x1e>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_read_r+0x1e>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20002dd8 	.word	0x20002dd8

08008600 <_write_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	4611      	mov	r1, r2
 8008608:	2200      	movs	r2, #0
 800860a:	4d05      	ldr	r5, [pc, #20]	; (8008620 <_write_r+0x20>)
 800860c:	602a      	str	r2, [r5, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	f7fa fe8c 	bl	800332c <_write>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_write_r+0x1e>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_write_r+0x1e>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20002dd8 	.word	0x20002dd8

08008624 <__errno>:
 8008624:	4b01      	ldr	r3, [pc, #4]	; (800862c <__errno+0x8>)
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20000820 	.word	0x20000820

08008630 <__libc_init_array>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	2600      	movs	r6, #0
 8008634:	4d0c      	ldr	r5, [pc, #48]	; (8008668 <__libc_init_array+0x38>)
 8008636:	4c0d      	ldr	r4, [pc, #52]	; (800866c <__libc_init_array+0x3c>)
 8008638:	1b64      	subs	r4, r4, r5
 800863a:	10a4      	asrs	r4, r4, #2
 800863c:	42a6      	cmp	r6, r4
 800863e:	d109      	bne.n	8008654 <__libc_init_array+0x24>
 8008640:	f000 fe62 	bl	8009308 <_init>
 8008644:	2600      	movs	r6, #0
 8008646:	4d0a      	ldr	r5, [pc, #40]	; (8008670 <__libc_init_array+0x40>)
 8008648:	4c0a      	ldr	r4, [pc, #40]	; (8008674 <__libc_init_array+0x44>)
 800864a:	1b64      	subs	r4, r4, r5
 800864c:	10a4      	asrs	r4, r4, #2
 800864e:	42a6      	cmp	r6, r4
 8008650:	d105      	bne.n	800865e <__libc_init_array+0x2e>
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	f855 3b04 	ldr.w	r3, [r5], #4
 8008658:	4798      	blx	r3
 800865a:	3601      	adds	r6, #1
 800865c:	e7ee      	b.n	800863c <__libc_init_array+0xc>
 800865e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008662:	4798      	blx	r3
 8008664:	3601      	adds	r6, #1
 8008666:	e7f2      	b.n	800864e <__libc_init_array+0x1e>
 8008668:	0800a0f4 	.word	0x0800a0f4
 800866c:	0800a0f4 	.word	0x0800a0f4
 8008670:	0800a0f4 	.word	0x0800a0f4
 8008674:	0800a0f8 	.word	0x0800a0f8

08008678 <__retarget_lock_init_recursive>:
 8008678:	4770      	bx	lr

0800867a <__retarget_lock_acquire_recursive>:
 800867a:	4770      	bx	lr

0800867c <__retarget_lock_release_recursive>:
 800867c:	4770      	bx	lr

0800867e <strcpy>:
 800867e:	4603      	mov	r3, r0
 8008680:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008684:	f803 2b01 	strb.w	r2, [r3], #1
 8008688:	2a00      	cmp	r2, #0
 800868a:	d1f9      	bne.n	8008680 <strcpy+0x2>
 800868c:	4770      	bx	lr

0800868e <memcpy>:
 800868e:	440a      	add	r2, r1
 8008690:	4291      	cmp	r1, r2
 8008692:	f100 33ff 	add.w	r3, r0, #4294967295
 8008696:	d100      	bne.n	800869a <memcpy+0xc>
 8008698:	4770      	bx	lr
 800869a:	b510      	push	{r4, lr}
 800869c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a0:	4291      	cmp	r1, r2
 80086a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086a6:	d1f9      	bne.n	800869c <memcpy+0xe>
 80086a8:	bd10      	pop	{r4, pc}
	...

080086ac <__assert_func>:
 80086ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086ae:	4614      	mov	r4, r2
 80086b0:	461a      	mov	r2, r3
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <__assert_func+0x2c>)
 80086b4:	4605      	mov	r5, r0
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68d8      	ldr	r0, [r3, #12]
 80086ba:	b14c      	cbz	r4, 80086d0 <__assert_func+0x24>
 80086bc:	4b07      	ldr	r3, [pc, #28]	; (80086dc <__assert_func+0x30>)
 80086be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086c2:	9100      	str	r1, [sp, #0]
 80086c4:	462b      	mov	r3, r5
 80086c6:	4906      	ldr	r1, [pc, #24]	; (80086e0 <__assert_func+0x34>)
 80086c8:	f000 f9b4 	bl	8008a34 <fiprintf>
 80086cc:	f000 f9d4 	bl	8008a78 <abort>
 80086d0:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <__assert_func+0x38>)
 80086d2:	461c      	mov	r4, r3
 80086d4:	e7f3      	b.n	80086be <__assert_func+0x12>
 80086d6:	bf00      	nop
 80086d8:	20000820 	.word	0x20000820
 80086dc:	0800a084 	.word	0x0800a084
 80086e0:	0800a091 	.word	0x0800a091
 80086e4:	0800a0bf 	.word	0x0800a0bf

080086e8 <_free_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4605      	mov	r5, r0
 80086ec:	2900      	cmp	r1, #0
 80086ee:	d040      	beq.n	8008772 <_free_r+0x8a>
 80086f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f4:	1f0c      	subs	r4, r1, #4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bfb8      	it	lt
 80086fa:	18e4      	addlt	r4, r4, r3
 80086fc:	f000 f8e4 	bl	80088c8 <__malloc_lock>
 8008700:	4a1c      	ldr	r2, [pc, #112]	; (8008774 <_free_r+0x8c>)
 8008702:	6813      	ldr	r3, [r2, #0]
 8008704:	b933      	cbnz	r3, 8008714 <_free_r+0x2c>
 8008706:	6063      	str	r3, [r4, #4]
 8008708:	6014      	str	r4, [r2, #0]
 800870a:	4628      	mov	r0, r5
 800870c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008710:	f000 b8e0 	b.w	80088d4 <__malloc_unlock>
 8008714:	42a3      	cmp	r3, r4
 8008716:	d908      	bls.n	800872a <_free_r+0x42>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	1821      	adds	r1, r4, r0
 800871c:	428b      	cmp	r3, r1
 800871e:	bf01      	itttt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	1809      	addeq	r1, r1, r0
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	e7ed      	b.n	8008706 <_free_r+0x1e>
 800872a:	461a      	mov	r2, r3
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	b10b      	cbz	r3, 8008734 <_free_r+0x4c>
 8008730:	42a3      	cmp	r3, r4
 8008732:	d9fa      	bls.n	800872a <_free_r+0x42>
 8008734:	6811      	ldr	r1, [r2, #0]
 8008736:	1850      	adds	r0, r2, r1
 8008738:	42a0      	cmp	r0, r4
 800873a:	d10b      	bne.n	8008754 <_free_r+0x6c>
 800873c:	6820      	ldr	r0, [r4, #0]
 800873e:	4401      	add	r1, r0
 8008740:	1850      	adds	r0, r2, r1
 8008742:	4283      	cmp	r3, r0
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	d1e0      	bne.n	800870a <_free_r+0x22>
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	4408      	add	r0, r1
 800874e:	6010      	str	r0, [r2, #0]
 8008750:	6053      	str	r3, [r2, #4]
 8008752:	e7da      	b.n	800870a <_free_r+0x22>
 8008754:	d902      	bls.n	800875c <_free_r+0x74>
 8008756:	230c      	movs	r3, #12
 8008758:	602b      	str	r3, [r5, #0]
 800875a:	e7d6      	b.n	800870a <_free_r+0x22>
 800875c:	6820      	ldr	r0, [r4, #0]
 800875e:	1821      	adds	r1, r4, r0
 8008760:	428b      	cmp	r3, r1
 8008762:	bf01      	itttt	eq
 8008764:	6819      	ldreq	r1, [r3, #0]
 8008766:	685b      	ldreq	r3, [r3, #4]
 8008768:	1809      	addeq	r1, r1, r0
 800876a:	6021      	streq	r1, [r4, #0]
 800876c:	6063      	str	r3, [r4, #4]
 800876e:	6054      	str	r4, [r2, #4]
 8008770:	e7cb      	b.n	800870a <_free_r+0x22>
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	20002de0 	.word	0x20002de0

08008778 <malloc>:
 8008778:	4b02      	ldr	r3, [pc, #8]	; (8008784 <malloc+0xc>)
 800877a:	4601      	mov	r1, r0
 800877c:	6818      	ldr	r0, [r3, #0]
 800877e:	f000 b823 	b.w	80087c8 <_malloc_r>
 8008782:	bf00      	nop
 8008784:	20000820 	.word	0x20000820

08008788 <sbrk_aligned>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4e0e      	ldr	r6, [pc, #56]	; (80087c4 <sbrk_aligned+0x3c>)
 800878c:	460c      	mov	r4, r1
 800878e:	6831      	ldr	r1, [r6, #0]
 8008790:	4605      	mov	r5, r0
 8008792:	b911      	cbnz	r1, 800879a <sbrk_aligned+0x12>
 8008794:	f000 f960 	bl	8008a58 <_sbrk_r>
 8008798:	6030      	str	r0, [r6, #0]
 800879a:	4621      	mov	r1, r4
 800879c:	4628      	mov	r0, r5
 800879e:	f000 f95b 	bl	8008a58 <_sbrk_r>
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	d00a      	beq.n	80087bc <sbrk_aligned+0x34>
 80087a6:	1cc4      	adds	r4, r0, #3
 80087a8:	f024 0403 	bic.w	r4, r4, #3
 80087ac:	42a0      	cmp	r0, r4
 80087ae:	d007      	beq.n	80087c0 <sbrk_aligned+0x38>
 80087b0:	1a21      	subs	r1, r4, r0
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 f950 	bl	8008a58 <_sbrk_r>
 80087b8:	3001      	adds	r0, #1
 80087ba:	d101      	bne.n	80087c0 <sbrk_aligned+0x38>
 80087bc:	f04f 34ff 	mov.w	r4, #4294967295
 80087c0:	4620      	mov	r0, r4
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	20002de4 	.word	0x20002de4

080087c8 <_malloc_r>:
 80087c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087cc:	1ccd      	adds	r5, r1, #3
 80087ce:	f025 0503 	bic.w	r5, r5, #3
 80087d2:	3508      	adds	r5, #8
 80087d4:	2d0c      	cmp	r5, #12
 80087d6:	bf38      	it	cc
 80087d8:	250c      	movcc	r5, #12
 80087da:	2d00      	cmp	r5, #0
 80087dc:	4607      	mov	r7, r0
 80087de:	db01      	blt.n	80087e4 <_malloc_r+0x1c>
 80087e0:	42a9      	cmp	r1, r5
 80087e2:	d905      	bls.n	80087f0 <_malloc_r+0x28>
 80087e4:	230c      	movs	r3, #12
 80087e6:	2600      	movs	r6, #0
 80087e8:	603b      	str	r3, [r7, #0]
 80087ea:	4630      	mov	r0, r6
 80087ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088c4 <_malloc_r+0xfc>
 80087f4:	f000 f868 	bl	80088c8 <__malloc_lock>
 80087f8:	f8d8 3000 	ldr.w	r3, [r8]
 80087fc:	461c      	mov	r4, r3
 80087fe:	bb5c      	cbnz	r4, 8008858 <_malloc_r+0x90>
 8008800:	4629      	mov	r1, r5
 8008802:	4638      	mov	r0, r7
 8008804:	f7ff ffc0 	bl	8008788 <sbrk_aligned>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	4604      	mov	r4, r0
 800880c:	d155      	bne.n	80088ba <_malloc_r+0xf2>
 800880e:	f8d8 4000 	ldr.w	r4, [r8]
 8008812:	4626      	mov	r6, r4
 8008814:	2e00      	cmp	r6, #0
 8008816:	d145      	bne.n	80088a4 <_malloc_r+0xdc>
 8008818:	2c00      	cmp	r4, #0
 800881a:	d048      	beq.n	80088ae <_malloc_r+0xe6>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	4631      	mov	r1, r6
 8008820:	4638      	mov	r0, r7
 8008822:	eb04 0903 	add.w	r9, r4, r3
 8008826:	f000 f917 	bl	8008a58 <_sbrk_r>
 800882a:	4581      	cmp	r9, r0
 800882c:	d13f      	bne.n	80088ae <_malloc_r+0xe6>
 800882e:	6821      	ldr	r1, [r4, #0]
 8008830:	4638      	mov	r0, r7
 8008832:	1a6d      	subs	r5, r5, r1
 8008834:	4629      	mov	r1, r5
 8008836:	f7ff ffa7 	bl	8008788 <sbrk_aligned>
 800883a:	3001      	adds	r0, #1
 800883c:	d037      	beq.n	80088ae <_malloc_r+0xe6>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	442b      	add	r3, r5
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	f8d8 3000 	ldr.w	r3, [r8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d038      	beq.n	80088be <_malloc_r+0xf6>
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	42a2      	cmp	r2, r4
 8008850:	d12b      	bne.n	80088aa <_malloc_r+0xe2>
 8008852:	2200      	movs	r2, #0
 8008854:	605a      	str	r2, [r3, #4]
 8008856:	e00f      	b.n	8008878 <_malloc_r+0xb0>
 8008858:	6822      	ldr	r2, [r4, #0]
 800885a:	1b52      	subs	r2, r2, r5
 800885c:	d41f      	bmi.n	800889e <_malloc_r+0xd6>
 800885e:	2a0b      	cmp	r2, #11
 8008860:	d917      	bls.n	8008892 <_malloc_r+0xca>
 8008862:	1961      	adds	r1, r4, r5
 8008864:	42a3      	cmp	r3, r4
 8008866:	6025      	str	r5, [r4, #0]
 8008868:	bf18      	it	ne
 800886a:	6059      	strne	r1, [r3, #4]
 800886c:	6863      	ldr	r3, [r4, #4]
 800886e:	bf08      	it	eq
 8008870:	f8c8 1000 	streq.w	r1, [r8]
 8008874:	5162      	str	r2, [r4, r5]
 8008876:	604b      	str	r3, [r1, #4]
 8008878:	4638      	mov	r0, r7
 800887a:	f104 060b 	add.w	r6, r4, #11
 800887e:	f000 f829 	bl	80088d4 <__malloc_unlock>
 8008882:	f026 0607 	bic.w	r6, r6, #7
 8008886:	1d23      	adds	r3, r4, #4
 8008888:	1af2      	subs	r2, r6, r3
 800888a:	d0ae      	beq.n	80087ea <_malloc_r+0x22>
 800888c:	1b9b      	subs	r3, r3, r6
 800888e:	50a3      	str	r3, [r4, r2]
 8008890:	e7ab      	b.n	80087ea <_malloc_r+0x22>
 8008892:	42a3      	cmp	r3, r4
 8008894:	6862      	ldr	r2, [r4, #4]
 8008896:	d1dd      	bne.n	8008854 <_malloc_r+0x8c>
 8008898:	f8c8 2000 	str.w	r2, [r8]
 800889c:	e7ec      	b.n	8008878 <_malloc_r+0xb0>
 800889e:	4623      	mov	r3, r4
 80088a0:	6864      	ldr	r4, [r4, #4]
 80088a2:	e7ac      	b.n	80087fe <_malloc_r+0x36>
 80088a4:	4634      	mov	r4, r6
 80088a6:	6876      	ldr	r6, [r6, #4]
 80088a8:	e7b4      	b.n	8008814 <_malloc_r+0x4c>
 80088aa:	4613      	mov	r3, r2
 80088ac:	e7cc      	b.n	8008848 <_malloc_r+0x80>
 80088ae:	230c      	movs	r3, #12
 80088b0:	4638      	mov	r0, r7
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	f000 f80e 	bl	80088d4 <__malloc_unlock>
 80088b8:	e797      	b.n	80087ea <_malloc_r+0x22>
 80088ba:	6025      	str	r5, [r4, #0]
 80088bc:	e7dc      	b.n	8008878 <_malloc_r+0xb0>
 80088be:	605b      	str	r3, [r3, #4]
 80088c0:	deff      	udf	#255	; 0xff
 80088c2:	bf00      	nop
 80088c4:	20002de0 	.word	0x20002de0

080088c8 <__malloc_lock>:
 80088c8:	4801      	ldr	r0, [pc, #4]	; (80088d0 <__malloc_lock+0x8>)
 80088ca:	f7ff bed6 	b.w	800867a <__retarget_lock_acquire_recursive>
 80088ce:	bf00      	nop
 80088d0:	20002ddc 	.word	0x20002ddc

080088d4 <__malloc_unlock>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__malloc_unlock+0x8>)
 80088d6:	f7ff bed1 	b.w	800867c <__retarget_lock_release_recursive>
 80088da:	bf00      	nop
 80088dc:	20002ddc 	.word	0x20002ddc

080088e0 <__sflush_r>:
 80088e0:	898a      	ldrh	r2, [r1, #12]
 80088e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e4:	4605      	mov	r5, r0
 80088e6:	0710      	lsls	r0, r2, #28
 80088e8:	460c      	mov	r4, r1
 80088ea:	d457      	bmi.n	800899c <__sflush_r+0xbc>
 80088ec:	684b      	ldr	r3, [r1, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dc04      	bgt.n	80088fc <__sflush_r+0x1c>
 80088f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	dc01      	bgt.n	80088fc <__sflush_r+0x1c>
 80088f8:	2000      	movs	r0, #0
 80088fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088fe:	2e00      	cmp	r6, #0
 8008900:	d0fa      	beq.n	80088f8 <__sflush_r+0x18>
 8008902:	2300      	movs	r3, #0
 8008904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008908:	682f      	ldr	r7, [r5, #0]
 800890a:	6a21      	ldr	r1, [r4, #32]
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	d032      	beq.n	8008976 <__sflush_r+0x96>
 8008910:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	075a      	lsls	r2, r3, #29
 8008916:	d505      	bpl.n	8008924 <__sflush_r+0x44>
 8008918:	6863      	ldr	r3, [r4, #4]
 800891a:	1ac0      	subs	r0, r0, r3
 800891c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800891e:	b10b      	cbz	r3, 8008924 <__sflush_r+0x44>
 8008920:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008922:	1ac0      	subs	r0, r0, r3
 8008924:	2300      	movs	r3, #0
 8008926:	4602      	mov	r2, r0
 8008928:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800892a:	4628      	mov	r0, r5
 800892c:	6a21      	ldr	r1, [r4, #32]
 800892e:	47b0      	blx	r6
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	d106      	bne.n	8008944 <__sflush_r+0x64>
 8008936:	6829      	ldr	r1, [r5, #0]
 8008938:	291d      	cmp	r1, #29
 800893a:	d82b      	bhi.n	8008994 <__sflush_r+0xb4>
 800893c:	4a28      	ldr	r2, [pc, #160]	; (80089e0 <__sflush_r+0x100>)
 800893e:	410a      	asrs	r2, r1
 8008940:	07d6      	lsls	r6, r2, #31
 8008942:	d427      	bmi.n	8008994 <__sflush_r+0xb4>
 8008944:	2200      	movs	r2, #0
 8008946:	6062      	str	r2, [r4, #4]
 8008948:	6922      	ldr	r2, [r4, #16]
 800894a:	04d9      	lsls	r1, r3, #19
 800894c:	6022      	str	r2, [r4, #0]
 800894e:	d504      	bpl.n	800895a <__sflush_r+0x7a>
 8008950:	1c42      	adds	r2, r0, #1
 8008952:	d101      	bne.n	8008958 <__sflush_r+0x78>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b903      	cbnz	r3, 800895a <__sflush_r+0x7a>
 8008958:	6560      	str	r0, [r4, #84]	; 0x54
 800895a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800895c:	602f      	str	r7, [r5, #0]
 800895e:	2900      	cmp	r1, #0
 8008960:	d0ca      	beq.n	80088f8 <__sflush_r+0x18>
 8008962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008966:	4299      	cmp	r1, r3
 8008968:	d002      	beq.n	8008970 <__sflush_r+0x90>
 800896a:	4628      	mov	r0, r5
 800896c:	f7ff febc 	bl	80086e8 <_free_r>
 8008970:	2000      	movs	r0, #0
 8008972:	6360      	str	r0, [r4, #52]	; 0x34
 8008974:	e7c1      	b.n	80088fa <__sflush_r+0x1a>
 8008976:	2301      	movs	r3, #1
 8008978:	4628      	mov	r0, r5
 800897a:	47b0      	blx	r6
 800897c:	1c41      	adds	r1, r0, #1
 800897e:	d1c8      	bne.n	8008912 <__sflush_r+0x32>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0c5      	beq.n	8008912 <__sflush_r+0x32>
 8008986:	2b1d      	cmp	r3, #29
 8008988:	d001      	beq.n	800898e <__sflush_r+0xae>
 800898a:	2b16      	cmp	r3, #22
 800898c:	d101      	bne.n	8008992 <__sflush_r+0xb2>
 800898e:	602f      	str	r7, [r5, #0]
 8008990:	e7b2      	b.n	80088f8 <__sflush_r+0x18>
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	e7ae      	b.n	80088fa <__sflush_r+0x1a>
 800899c:	690f      	ldr	r7, [r1, #16]
 800899e:	2f00      	cmp	r7, #0
 80089a0:	d0aa      	beq.n	80088f8 <__sflush_r+0x18>
 80089a2:	0793      	lsls	r3, r2, #30
 80089a4:	bf18      	it	ne
 80089a6:	2300      	movne	r3, #0
 80089a8:	680e      	ldr	r6, [r1, #0]
 80089aa:	bf08      	it	eq
 80089ac:	694b      	ldreq	r3, [r1, #20]
 80089ae:	1bf6      	subs	r6, r6, r7
 80089b0:	600f      	str	r7, [r1, #0]
 80089b2:	608b      	str	r3, [r1, #8]
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	dd9f      	ble.n	80088f8 <__sflush_r+0x18>
 80089b8:	4633      	mov	r3, r6
 80089ba:	463a      	mov	r2, r7
 80089bc:	4628      	mov	r0, r5
 80089be:	6a21      	ldr	r1, [r4, #32]
 80089c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80089c4:	47e0      	blx	ip
 80089c6:	2800      	cmp	r0, #0
 80089c8:	dc06      	bgt.n	80089d8 <__sflush_r+0xf8>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f04f 30ff 	mov.w	r0, #4294967295
 80089d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d4:	81a3      	strh	r3, [r4, #12]
 80089d6:	e790      	b.n	80088fa <__sflush_r+0x1a>
 80089d8:	4407      	add	r7, r0
 80089da:	1a36      	subs	r6, r6, r0
 80089dc:	e7ea      	b.n	80089b4 <__sflush_r+0xd4>
 80089de:	bf00      	nop
 80089e0:	dfbffffe 	.word	0xdfbffffe

080089e4 <_fflush_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	690b      	ldr	r3, [r1, #16]
 80089e8:	4605      	mov	r5, r0
 80089ea:	460c      	mov	r4, r1
 80089ec:	b913      	cbnz	r3, 80089f4 <_fflush_r+0x10>
 80089ee:	2500      	movs	r5, #0
 80089f0:	4628      	mov	r0, r5
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	b118      	cbz	r0, 80089fe <_fflush_r+0x1a>
 80089f6:	6a03      	ldr	r3, [r0, #32]
 80089f8:	b90b      	cbnz	r3, 80089fe <_fflush_r+0x1a>
 80089fa:	f7ff fd4b 	bl	8008494 <__sinit>
 80089fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0f3      	beq.n	80089ee <_fflush_r+0xa>
 8008a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a08:	07d0      	lsls	r0, r2, #31
 8008a0a:	d404      	bmi.n	8008a16 <_fflush_r+0x32>
 8008a0c:	0599      	lsls	r1, r3, #22
 8008a0e:	d402      	bmi.n	8008a16 <_fflush_r+0x32>
 8008a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a12:	f7ff fe32 	bl	800867a <__retarget_lock_acquire_recursive>
 8008a16:	4628      	mov	r0, r5
 8008a18:	4621      	mov	r1, r4
 8008a1a:	f7ff ff61 	bl	80088e0 <__sflush_r>
 8008a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a20:	4605      	mov	r5, r0
 8008a22:	07da      	lsls	r2, r3, #31
 8008a24:	d4e4      	bmi.n	80089f0 <_fflush_r+0xc>
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	059b      	lsls	r3, r3, #22
 8008a2a:	d4e1      	bmi.n	80089f0 <_fflush_r+0xc>
 8008a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2e:	f7ff fe25 	bl	800867c <__retarget_lock_release_recursive>
 8008a32:	e7dd      	b.n	80089f0 <_fflush_r+0xc>

08008a34 <fiprintf>:
 8008a34:	b40e      	push	{r1, r2, r3}
 8008a36:	b503      	push	{r0, r1, lr}
 8008a38:	4601      	mov	r1, r0
 8008a3a:	ab03      	add	r3, sp, #12
 8008a3c:	4805      	ldr	r0, [pc, #20]	; (8008a54 <fiprintf+0x20>)
 8008a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a42:	6800      	ldr	r0, [r0, #0]
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	f000 f845 	bl	8008ad4 <_vfiprintf_r>
 8008a4a:	b002      	add	sp, #8
 8008a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a50:	b003      	add	sp, #12
 8008a52:	4770      	bx	lr
 8008a54:	20000820 	.word	0x20000820

08008a58 <_sbrk_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4d05      	ldr	r5, [pc, #20]	; (8008a74 <_sbrk_r+0x1c>)
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7fa fc7c 	bl	8003360 <_sbrk>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_sbrk_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_sbrk_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20002dd8 	.word	0x20002dd8

08008a78 <abort>:
 8008a78:	2006      	movs	r0, #6
 8008a7a:	b508      	push	{r3, lr}
 8008a7c:	f000 fb96 	bl	80091ac <raise>
 8008a80:	2001      	movs	r0, #1
 8008a82:	f7fa fc3d 	bl	8003300 <_exit>

08008a86 <__sfputc_r>:
 8008a86:	6893      	ldr	r3, [r2, #8]
 8008a88:	b410      	push	{r4}
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	6093      	str	r3, [r2, #8]
 8008a90:	da07      	bge.n	8008aa2 <__sfputc_r+0x1c>
 8008a92:	6994      	ldr	r4, [r2, #24]
 8008a94:	42a3      	cmp	r3, r4
 8008a96:	db01      	blt.n	8008a9c <__sfputc_r+0x16>
 8008a98:	290a      	cmp	r1, #10
 8008a9a:	d102      	bne.n	8008aa2 <__sfputc_r+0x1c>
 8008a9c:	bc10      	pop	{r4}
 8008a9e:	f000 bac7 	b.w	8009030 <__swbuf_r>
 8008aa2:	6813      	ldr	r3, [r2, #0]
 8008aa4:	1c58      	adds	r0, r3, #1
 8008aa6:	6010      	str	r0, [r2, #0]
 8008aa8:	7019      	strb	r1, [r3, #0]
 8008aaa:	4608      	mov	r0, r1
 8008aac:	bc10      	pop	{r4}
 8008aae:	4770      	bx	lr

08008ab0 <__sfputs_r>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	4614      	mov	r4, r2
 8008ab8:	18d5      	adds	r5, r2, r3
 8008aba:	42ac      	cmp	r4, r5
 8008abc:	d101      	bne.n	8008ac2 <__sfputs_r+0x12>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e007      	b.n	8008ad2 <__sfputs_r+0x22>
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aca:	f7ff ffdc 	bl	8008a86 <__sfputc_r>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d1f3      	bne.n	8008aba <__sfputs_r+0xa>
 8008ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ad4 <_vfiprintf_r>:
 8008ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	460d      	mov	r5, r1
 8008ada:	4614      	mov	r4, r2
 8008adc:	4698      	mov	r8, r3
 8008ade:	4606      	mov	r6, r0
 8008ae0:	b09d      	sub	sp, #116	; 0x74
 8008ae2:	b118      	cbz	r0, 8008aec <_vfiprintf_r+0x18>
 8008ae4:	6a03      	ldr	r3, [r0, #32]
 8008ae6:	b90b      	cbnz	r3, 8008aec <_vfiprintf_r+0x18>
 8008ae8:	f7ff fcd4 	bl	8008494 <__sinit>
 8008aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aee:	07d9      	lsls	r1, r3, #31
 8008af0:	d405      	bmi.n	8008afe <_vfiprintf_r+0x2a>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	059a      	lsls	r2, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_vfiprintf_r+0x2a>
 8008af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008afa:	f7ff fdbe 	bl	800867a <__retarget_lock_acquire_recursive>
 8008afe:	89ab      	ldrh	r3, [r5, #12]
 8008b00:	071b      	lsls	r3, r3, #28
 8008b02:	d501      	bpl.n	8008b08 <_vfiprintf_r+0x34>
 8008b04:	692b      	ldr	r3, [r5, #16]
 8008b06:	b99b      	cbnz	r3, 8008b30 <_vfiprintf_r+0x5c>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f000 face 	bl	80090ac <__swsetup_r>
 8008b10:	b170      	cbz	r0, 8008b30 <_vfiprintf_r+0x5c>
 8008b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b14:	07dc      	lsls	r4, r3, #31
 8008b16:	d504      	bpl.n	8008b22 <_vfiprintf_r+0x4e>
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1c:	b01d      	add	sp, #116	; 0x74
 8008b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b22:	89ab      	ldrh	r3, [r5, #12]
 8008b24:	0598      	lsls	r0, r3, #22
 8008b26:	d4f7      	bmi.n	8008b18 <_vfiprintf_r+0x44>
 8008b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b2a:	f7ff fda7 	bl	800867c <__retarget_lock_release_recursive>
 8008b2e:	e7f3      	b.n	8008b18 <_vfiprintf_r+0x44>
 8008b30:	2300      	movs	r3, #0
 8008b32:	9309      	str	r3, [sp, #36]	; 0x24
 8008b34:	2320      	movs	r3, #32
 8008b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b3a:	2330      	movs	r3, #48	; 0x30
 8008b3c:	f04f 0901 	mov.w	r9, #1
 8008b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008cf4 <_vfiprintf_r+0x220>
 8008b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b4c:	4623      	mov	r3, r4
 8008b4e:	469a      	mov	sl, r3
 8008b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b54:	b10a      	cbz	r2, 8008b5a <_vfiprintf_r+0x86>
 8008b56:	2a25      	cmp	r2, #37	; 0x25
 8008b58:	d1f9      	bne.n	8008b4e <_vfiprintf_r+0x7a>
 8008b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b5e:	d00b      	beq.n	8008b78 <_vfiprintf_r+0xa4>
 8008b60:	465b      	mov	r3, fp
 8008b62:	4622      	mov	r2, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7ff ffa2 	bl	8008ab0 <__sfputs_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f000 80a9 	beq.w	8008cc4 <_vfiprintf_r+0x1f0>
 8008b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b74:	445a      	add	r2, fp
 8008b76:	9209      	str	r2, [sp, #36]	; 0x24
 8008b78:	f89a 3000 	ldrb.w	r3, [sl]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80a1 	beq.w	8008cc4 <_vfiprintf_r+0x1f0>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295
 8008b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b8c:	f10a 0a01 	add.w	sl, sl, #1
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	9307      	str	r3, [sp, #28]
 8008b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b98:	931a      	str	r3, [sp, #104]	; 0x68
 8008b9a:	4654      	mov	r4, sl
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba2:	4854      	ldr	r0, [pc, #336]	; (8008cf4 <_vfiprintf_r+0x220>)
 8008ba4:	f000 fb1e 	bl	80091e4 <memchr>
 8008ba8:	9a04      	ldr	r2, [sp, #16]
 8008baa:	b9d8      	cbnz	r0, 8008be4 <_vfiprintf_r+0x110>
 8008bac:	06d1      	lsls	r1, r2, #27
 8008bae:	bf44      	itt	mi
 8008bb0:	2320      	movmi	r3, #32
 8008bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb6:	0713      	lsls	r3, r2, #28
 8008bb8:	bf44      	itt	mi
 8008bba:	232b      	movmi	r3, #43	; 0x2b
 8008bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc6:	d015      	beq.n	8008bf4 <_vfiprintf_r+0x120>
 8008bc8:	4654      	mov	r4, sl
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f04f 0c0a 	mov.w	ip, #10
 8008bd0:	9a07      	ldr	r2, [sp, #28]
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd8:	3b30      	subs	r3, #48	; 0x30
 8008bda:	2b09      	cmp	r3, #9
 8008bdc:	d94d      	bls.n	8008c7a <_vfiprintf_r+0x1a6>
 8008bde:	b1b0      	cbz	r0, 8008c0e <_vfiprintf_r+0x13a>
 8008be0:	9207      	str	r2, [sp, #28]
 8008be2:	e014      	b.n	8008c0e <_vfiprintf_r+0x13a>
 8008be4:	eba0 0308 	sub.w	r3, r0, r8
 8008be8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bec:	4313      	orrs	r3, r2
 8008bee:	46a2      	mov	sl, r4
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	e7d2      	b.n	8008b9a <_vfiprintf_r+0xc6>
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	1d19      	adds	r1, r3, #4
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	9103      	str	r1, [sp, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bfbb      	ittet	lt
 8008c00:	425b      	neglt	r3, r3
 8008c02:	f042 0202 	orrlt.w	r2, r2, #2
 8008c06:	9307      	strge	r3, [sp, #28]
 8008c08:	9307      	strlt	r3, [sp, #28]
 8008c0a:	bfb8      	it	lt
 8008c0c:	9204      	strlt	r2, [sp, #16]
 8008c0e:	7823      	ldrb	r3, [r4, #0]
 8008c10:	2b2e      	cmp	r3, #46	; 0x2e
 8008c12:	d10c      	bne.n	8008c2e <_vfiprintf_r+0x15a>
 8008c14:	7863      	ldrb	r3, [r4, #1]
 8008c16:	2b2a      	cmp	r3, #42	; 0x2a
 8008c18:	d134      	bne.n	8008c84 <_vfiprintf_r+0x1b0>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	3402      	adds	r4, #2
 8008c1e:	1d1a      	adds	r2, r3, #4
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	9203      	str	r2, [sp, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	bfb8      	it	lt
 8008c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c2c:	9305      	str	r3, [sp, #20]
 8008c2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cf8 <_vfiprintf_r+0x224>
 8008c32:	2203      	movs	r2, #3
 8008c34:	4650      	mov	r0, sl
 8008c36:	7821      	ldrb	r1, [r4, #0]
 8008c38:	f000 fad4 	bl	80091e4 <memchr>
 8008c3c:	b138      	cbz	r0, 8008c4e <_vfiprintf_r+0x17a>
 8008c3e:	2240      	movs	r2, #64	; 0x40
 8008c40:	9b04      	ldr	r3, [sp, #16]
 8008c42:	eba0 000a 	sub.w	r0, r0, sl
 8008c46:	4082      	lsls	r2, r0
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	3401      	adds	r4, #1
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c52:	2206      	movs	r2, #6
 8008c54:	4829      	ldr	r0, [pc, #164]	; (8008cfc <_vfiprintf_r+0x228>)
 8008c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c5a:	f000 fac3 	bl	80091e4 <memchr>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d03f      	beq.n	8008ce2 <_vfiprintf_r+0x20e>
 8008c62:	4b27      	ldr	r3, [pc, #156]	; (8008d00 <_vfiprintf_r+0x22c>)
 8008c64:	bb1b      	cbnz	r3, 8008cae <_vfiprintf_r+0x1da>
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	3307      	adds	r3, #7
 8008c6a:	f023 0307 	bic.w	r3, r3, #7
 8008c6e:	3308      	adds	r3, #8
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c74:	443b      	add	r3, r7
 8008c76:	9309      	str	r3, [sp, #36]	; 0x24
 8008c78:	e768      	b.n	8008b4c <_vfiprintf_r+0x78>
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c82:	e7a6      	b.n	8008bd2 <_vfiprintf_r+0xfe>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f04f 0c0a 	mov.w	ip, #10
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	3401      	adds	r4, #1
 8008c8e:	9305      	str	r3, [sp, #20]
 8008c90:	4620      	mov	r0, r4
 8008c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c96:	3a30      	subs	r2, #48	; 0x30
 8008c98:	2a09      	cmp	r2, #9
 8008c9a:	d903      	bls.n	8008ca4 <_vfiprintf_r+0x1d0>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d0c6      	beq.n	8008c2e <_vfiprintf_r+0x15a>
 8008ca0:	9105      	str	r1, [sp, #20]
 8008ca2:	e7c4      	b.n	8008c2e <_vfiprintf_r+0x15a>
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cac:	e7f0      	b.n	8008c90 <_vfiprintf_r+0x1bc>
 8008cae:	ab03      	add	r3, sp, #12
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	462a      	mov	r2, r5
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <_vfiprintf_r+0x230>)
 8008cb8:	a904      	add	r1, sp, #16
 8008cba:	f3af 8000 	nop.w
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	1c78      	adds	r0, r7, #1
 8008cc2:	d1d6      	bne.n	8008c72 <_vfiprintf_r+0x19e>
 8008cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cc6:	07d9      	lsls	r1, r3, #31
 8008cc8:	d405      	bmi.n	8008cd6 <_vfiprintf_r+0x202>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	059a      	lsls	r2, r3, #22
 8008cce:	d402      	bmi.n	8008cd6 <_vfiprintf_r+0x202>
 8008cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cd2:	f7ff fcd3 	bl	800867c <__retarget_lock_release_recursive>
 8008cd6:	89ab      	ldrh	r3, [r5, #12]
 8008cd8:	065b      	lsls	r3, r3, #25
 8008cda:	f53f af1d 	bmi.w	8008b18 <_vfiprintf_r+0x44>
 8008cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ce0:	e71c      	b.n	8008b1c <_vfiprintf_r+0x48>
 8008ce2:	ab03      	add	r3, sp, #12
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	462a      	mov	r2, r5
 8008ce8:	4630      	mov	r0, r6
 8008cea:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <_vfiprintf_r+0x230>)
 8008cec:	a904      	add	r1, sp, #16
 8008cee:	f000 f87d 	bl	8008dec <_printf_i>
 8008cf2:	e7e4      	b.n	8008cbe <_vfiprintf_r+0x1ea>
 8008cf4:	0800a0c0 	.word	0x0800a0c0
 8008cf8:	0800a0c6 	.word	0x0800a0c6
 8008cfc:	0800a0ca 	.word	0x0800a0ca
 8008d00:	00000000 	.word	0x00000000
 8008d04:	08008ab1 	.word	0x08008ab1

08008d08 <_printf_common>:
 8008d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	4699      	mov	r9, r3
 8008d10:	688a      	ldr	r2, [r1, #8]
 8008d12:	690b      	ldr	r3, [r1, #16]
 8008d14:	4607      	mov	r7, r0
 8008d16:	4293      	cmp	r3, r2
 8008d18:	bfb8      	it	lt
 8008d1a:	4613      	movlt	r3, r2
 8008d1c:	6033      	str	r3, [r6, #0]
 8008d1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d22:	460c      	mov	r4, r1
 8008d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d28:	b10a      	cbz	r2, 8008d2e <_printf_common+0x26>
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	0699      	lsls	r1, r3, #26
 8008d32:	bf42      	ittt	mi
 8008d34:	6833      	ldrmi	r3, [r6, #0]
 8008d36:	3302      	addmi	r3, #2
 8008d38:	6033      	strmi	r3, [r6, #0]
 8008d3a:	6825      	ldr	r5, [r4, #0]
 8008d3c:	f015 0506 	ands.w	r5, r5, #6
 8008d40:	d106      	bne.n	8008d50 <_printf_common+0x48>
 8008d42:	f104 0a19 	add.w	sl, r4, #25
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	6832      	ldr	r2, [r6, #0]
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dc2b      	bgt.n	8008da8 <_printf_common+0xa0>
 8008d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d54:	1e13      	subs	r3, r2, #0
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	bf18      	it	ne
 8008d5a:	2301      	movne	r3, #1
 8008d5c:	0692      	lsls	r2, r2, #26
 8008d5e:	d430      	bmi.n	8008dc2 <_printf_common+0xba>
 8008d60:	4649      	mov	r1, r9
 8008d62:	4638      	mov	r0, r7
 8008d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d68:	47c0      	blx	r8
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d023      	beq.n	8008db6 <_printf_common+0xae>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	6922      	ldr	r2, [r4, #16]
 8008d72:	f003 0306 	and.w	r3, r3, #6
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	bf14      	ite	ne
 8008d7a:	2500      	movne	r5, #0
 8008d7c:	6833      	ldreq	r3, [r6, #0]
 8008d7e:	f04f 0600 	mov.w	r6, #0
 8008d82:	bf08      	it	eq
 8008d84:	68e5      	ldreq	r5, [r4, #12]
 8008d86:	f104 041a 	add.w	r4, r4, #26
 8008d8a:	bf08      	it	eq
 8008d8c:	1aed      	subeq	r5, r5, r3
 8008d8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008d92:	bf08      	it	eq
 8008d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	bfc4      	itt	gt
 8008d9c:	1a9b      	subgt	r3, r3, r2
 8008d9e:	18ed      	addgt	r5, r5, r3
 8008da0:	42b5      	cmp	r5, r6
 8008da2:	d11a      	bne.n	8008dda <_printf_common+0xd2>
 8008da4:	2000      	movs	r0, #0
 8008da6:	e008      	b.n	8008dba <_printf_common+0xb2>
 8008da8:	2301      	movs	r3, #1
 8008daa:	4652      	mov	r2, sl
 8008dac:	4649      	mov	r1, r9
 8008dae:	4638      	mov	r0, r7
 8008db0:	47c0      	blx	r8
 8008db2:	3001      	adds	r0, #1
 8008db4:	d103      	bne.n	8008dbe <_printf_common+0xb6>
 8008db6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dbe:	3501      	adds	r5, #1
 8008dc0:	e7c1      	b.n	8008d46 <_printf_common+0x3e>
 8008dc2:	2030      	movs	r0, #48	; 0x30
 8008dc4:	18e1      	adds	r1, r4, r3
 8008dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dd0:	4422      	add	r2, r4
 8008dd2:	3302      	adds	r3, #2
 8008dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dd8:	e7c2      	b.n	8008d60 <_printf_common+0x58>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4649      	mov	r1, r9
 8008de0:	4638      	mov	r0, r7
 8008de2:	47c0      	blx	r8
 8008de4:	3001      	adds	r0, #1
 8008de6:	d0e6      	beq.n	8008db6 <_printf_common+0xae>
 8008de8:	3601      	adds	r6, #1
 8008dea:	e7d9      	b.n	8008da0 <_printf_common+0x98>

08008dec <_printf_i>:
 8008dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	7e0f      	ldrb	r7, [r1, #24]
 8008df2:	4691      	mov	r9, r2
 8008df4:	2f78      	cmp	r7, #120	; 0x78
 8008df6:	4680      	mov	r8, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	469a      	mov	sl, r3
 8008dfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e02:	d807      	bhi.n	8008e14 <_printf_i+0x28>
 8008e04:	2f62      	cmp	r7, #98	; 0x62
 8008e06:	d80a      	bhi.n	8008e1e <_printf_i+0x32>
 8008e08:	2f00      	cmp	r7, #0
 8008e0a:	f000 80d5 	beq.w	8008fb8 <_printf_i+0x1cc>
 8008e0e:	2f58      	cmp	r7, #88	; 0x58
 8008e10:	f000 80c1 	beq.w	8008f96 <_printf_i+0x1aa>
 8008e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e1c:	e03a      	b.n	8008e94 <_printf_i+0xa8>
 8008e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e22:	2b15      	cmp	r3, #21
 8008e24:	d8f6      	bhi.n	8008e14 <_printf_i+0x28>
 8008e26:	a101      	add	r1, pc, #4	; (adr r1, 8008e2c <_printf_i+0x40>)
 8008e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e2c:	08008e85 	.word	0x08008e85
 8008e30:	08008e99 	.word	0x08008e99
 8008e34:	08008e15 	.word	0x08008e15
 8008e38:	08008e15 	.word	0x08008e15
 8008e3c:	08008e15 	.word	0x08008e15
 8008e40:	08008e15 	.word	0x08008e15
 8008e44:	08008e99 	.word	0x08008e99
 8008e48:	08008e15 	.word	0x08008e15
 8008e4c:	08008e15 	.word	0x08008e15
 8008e50:	08008e15 	.word	0x08008e15
 8008e54:	08008e15 	.word	0x08008e15
 8008e58:	08008f9f 	.word	0x08008f9f
 8008e5c:	08008ec5 	.word	0x08008ec5
 8008e60:	08008f59 	.word	0x08008f59
 8008e64:	08008e15 	.word	0x08008e15
 8008e68:	08008e15 	.word	0x08008e15
 8008e6c:	08008fc1 	.word	0x08008fc1
 8008e70:	08008e15 	.word	0x08008e15
 8008e74:	08008ec5 	.word	0x08008ec5
 8008e78:	08008e15 	.word	0x08008e15
 8008e7c:	08008e15 	.word	0x08008e15
 8008e80:	08008f61 	.word	0x08008f61
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	1d1a      	adds	r2, r3, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	602a      	str	r2, [r5, #0]
 8008e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0a0      	b.n	8008fda <_printf_i+0x1ee>
 8008e98:	6820      	ldr	r0, [r4, #0]
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	0607      	lsls	r7, r0, #24
 8008e9e:	f103 0104 	add.w	r1, r3, #4
 8008ea2:	6029      	str	r1, [r5, #0]
 8008ea4:	d501      	bpl.n	8008eaa <_printf_i+0xbe>
 8008ea6:	681e      	ldr	r6, [r3, #0]
 8008ea8:	e003      	b.n	8008eb2 <_printf_i+0xc6>
 8008eaa:	0646      	lsls	r6, r0, #25
 8008eac:	d5fb      	bpl.n	8008ea6 <_printf_i+0xba>
 8008eae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	da03      	bge.n	8008ebe <_printf_i+0xd2>
 8008eb6:	232d      	movs	r3, #45	; 0x2d
 8008eb8:	4276      	negs	r6, r6
 8008eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ebe:	230a      	movs	r3, #10
 8008ec0:	4859      	ldr	r0, [pc, #356]	; (8009028 <_printf_i+0x23c>)
 8008ec2:	e012      	b.n	8008eea <_printf_i+0xfe>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	6820      	ldr	r0, [r4, #0]
 8008ec8:	1d19      	adds	r1, r3, #4
 8008eca:	6029      	str	r1, [r5, #0]
 8008ecc:	0605      	lsls	r5, r0, #24
 8008ece:	d501      	bpl.n	8008ed4 <_printf_i+0xe8>
 8008ed0:	681e      	ldr	r6, [r3, #0]
 8008ed2:	e002      	b.n	8008eda <_printf_i+0xee>
 8008ed4:	0641      	lsls	r1, r0, #25
 8008ed6:	d5fb      	bpl.n	8008ed0 <_printf_i+0xe4>
 8008ed8:	881e      	ldrh	r6, [r3, #0]
 8008eda:	2f6f      	cmp	r7, #111	; 0x6f
 8008edc:	bf0c      	ite	eq
 8008ede:	2308      	moveq	r3, #8
 8008ee0:	230a      	movne	r3, #10
 8008ee2:	4851      	ldr	r0, [pc, #324]	; (8009028 <_printf_i+0x23c>)
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008eea:	6865      	ldr	r5, [r4, #4]
 8008eec:	2d00      	cmp	r5, #0
 8008eee:	bfa8      	it	ge
 8008ef0:	6821      	ldrge	r1, [r4, #0]
 8008ef2:	60a5      	str	r5, [r4, #8]
 8008ef4:	bfa4      	itt	ge
 8008ef6:	f021 0104 	bicge.w	r1, r1, #4
 8008efa:	6021      	strge	r1, [r4, #0]
 8008efc:	b90e      	cbnz	r6, 8008f02 <_printf_i+0x116>
 8008efe:	2d00      	cmp	r5, #0
 8008f00:	d04b      	beq.n	8008f9a <_printf_i+0x1ae>
 8008f02:	4615      	mov	r5, r2
 8008f04:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f08:	fb03 6711 	mls	r7, r3, r1, r6
 8008f0c:	5dc7      	ldrb	r7, [r0, r7]
 8008f0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f12:	4637      	mov	r7, r6
 8008f14:	42bb      	cmp	r3, r7
 8008f16:	460e      	mov	r6, r1
 8008f18:	d9f4      	bls.n	8008f04 <_printf_i+0x118>
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d10b      	bne.n	8008f36 <_printf_i+0x14a>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	07de      	lsls	r6, r3, #31
 8008f22:	d508      	bpl.n	8008f36 <_printf_i+0x14a>
 8008f24:	6923      	ldr	r3, [r4, #16]
 8008f26:	6861      	ldr	r1, [r4, #4]
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	bfde      	ittt	le
 8008f2c:	2330      	movle	r3, #48	; 0x30
 8008f2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f36:	1b52      	subs	r2, r2, r5
 8008f38:	6122      	str	r2, [r4, #16]
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	4640      	mov	r0, r8
 8008f40:	f8cd a000 	str.w	sl, [sp]
 8008f44:	aa03      	add	r2, sp, #12
 8008f46:	f7ff fedf 	bl	8008d08 <_printf_common>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d14a      	bne.n	8008fe4 <_printf_i+0x1f8>
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f52:	b004      	add	sp, #16
 8008f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	f043 0320 	orr.w	r3, r3, #32
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	2778      	movs	r7, #120	; 0x78
 8008f62:	4832      	ldr	r0, [pc, #200]	; (800902c <_printf_i+0x240>)
 8008f64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	6829      	ldr	r1, [r5, #0]
 8008f6c:	061f      	lsls	r7, r3, #24
 8008f6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f72:	d402      	bmi.n	8008f7a <_printf_i+0x18e>
 8008f74:	065f      	lsls	r7, r3, #25
 8008f76:	bf48      	it	mi
 8008f78:	b2b6      	uxthmi	r6, r6
 8008f7a:	07df      	lsls	r7, r3, #31
 8008f7c:	bf48      	it	mi
 8008f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f82:	6029      	str	r1, [r5, #0]
 8008f84:	bf48      	it	mi
 8008f86:	6023      	strmi	r3, [r4, #0]
 8008f88:	b91e      	cbnz	r6, 8008f92 <_printf_i+0x1a6>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	f023 0320 	bic.w	r3, r3, #32
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	2310      	movs	r3, #16
 8008f94:	e7a6      	b.n	8008ee4 <_printf_i+0xf8>
 8008f96:	4824      	ldr	r0, [pc, #144]	; (8009028 <_printf_i+0x23c>)
 8008f98:	e7e4      	b.n	8008f64 <_printf_i+0x178>
 8008f9a:	4615      	mov	r5, r2
 8008f9c:	e7bd      	b.n	8008f1a <_printf_i+0x12e>
 8008f9e:	682b      	ldr	r3, [r5, #0]
 8008fa0:	6826      	ldr	r6, [r4, #0]
 8008fa2:	1d18      	adds	r0, r3, #4
 8008fa4:	6961      	ldr	r1, [r4, #20]
 8008fa6:	6028      	str	r0, [r5, #0]
 8008fa8:	0635      	lsls	r5, r6, #24
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	d501      	bpl.n	8008fb2 <_printf_i+0x1c6>
 8008fae:	6019      	str	r1, [r3, #0]
 8008fb0:	e002      	b.n	8008fb8 <_printf_i+0x1cc>
 8008fb2:	0670      	lsls	r0, r6, #25
 8008fb4:	d5fb      	bpl.n	8008fae <_printf_i+0x1c2>
 8008fb6:	8019      	strh	r1, [r3, #0]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	4615      	mov	r5, r2
 8008fbc:	6123      	str	r3, [r4, #16]
 8008fbe:	e7bc      	b.n	8008f3a <_printf_i+0x14e>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	1d1a      	adds	r2, r3, #4
 8008fc6:	602a      	str	r2, [r5, #0]
 8008fc8:	681d      	ldr	r5, [r3, #0]
 8008fca:	6862      	ldr	r2, [r4, #4]
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f000 f909 	bl	80091e4 <memchr>
 8008fd2:	b108      	cbz	r0, 8008fd8 <_printf_i+0x1ec>
 8008fd4:	1b40      	subs	r0, r0, r5
 8008fd6:	6060      	str	r0, [r4, #4]
 8008fd8:	6863      	ldr	r3, [r4, #4]
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fe2:	e7aa      	b.n	8008f3a <_printf_i+0x14e>
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	4640      	mov	r0, r8
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	47d0      	blx	sl
 8008fee:	3001      	adds	r0, #1
 8008ff0:	d0ad      	beq.n	8008f4e <_printf_i+0x162>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	079b      	lsls	r3, r3, #30
 8008ff6:	d413      	bmi.n	8009020 <_printf_i+0x234>
 8008ff8:	68e0      	ldr	r0, [r4, #12]
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	4298      	cmp	r0, r3
 8008ffe:	bfb8      	it	lt
 8009000:	4618      	movlt	r0, r3
 8009002:	e7a6      	b.n	8008f52 <_printf_i+0x166>
 8009004:	2301      	movs	r3, #1
 8009006:	4632      	mov	r2, r6
 8009008:	4649      	mov	r1, r9
 800900a:	4640      	mov	r0, r8
 800900c:	47d0      	blx	sl
 800900e:	3001      	adds	r0, #1
 8009010:	d09d      	beq.n	8008f4e <_printf_i+0x162>
 8009012:	3501      	adds	r5, #1
 8009014:	68e3      	ldr	r3, [r4, #12]
 8009016:	9903      	ldr	r1, [sp, #12]
 8009018:	1a5b      	subs	r3, r3, r1
 800901a:	42ab      	cmp	r3, r5
 800901c:	dcf2      	bgt.n	8009004 <_printf_i+0x218>
 800901e:	e7eb      	b.n	8008ff8 <_printf_i+0x20c>
 8009020:	2500      	movs	r5, #0
 8009022:	f104 0619 	add.w	r6, r4, #25
 8009026:	e7f5      	b.n	8009014 <_printf_i+0x228>
 8009028:	0800a0d1 	.word	0x0800a0d1
 800902c:	0800a0e2 	.word	0x0800a0e2

08009030 <__swbuf_r>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	460e      	mov	r6, r1
 8009034:	4614      	mov	r4, r2
 8009036:	4605      	mov	r5, r0
 8009038:	b118      	cbz	r0, 8009042 <__swbuf_r+0x12>
 800903a:	6a03      	ldr	r3, [r0, #32]
 800903c:	b90b      	cbnz	r3, 8009042 <__swbuf_r+0x12>
 800903e:	f7ff fa29 	bl	8008494 <__sinit>
 8009042:	69a3      	ldr	r3, [r4, #24]
 8009044:	60a3      	str	r3, [r4, #8]
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	071a      	lsls	r2, r3, #28
 800904a:	d525      	bpl.n	8009098 <__swbuf_r+0x68>
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	b31b      	cbz	r3, 8009098 <__swbuf_r+0x68>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	6922      	ldr	r2, [r4, #16]
 8009054:	b2f6      	uxtb	r6, r6
 8009056:	1a98      	subs	r0, r3, r2
 8009058:	6963      	ldr	r3, [r4, #20]
 800905a:	4637      	mov	r7, r6
 800905c:	4283      	cmp	r3, r0
 800905e:	dc04      	bgt.n	800906a <__swbuf_r+0x3a>
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f7ff fcbe 	bl	80089e4 <_fflush_r>
 8009068:	b9e0      	cbnz	r0, 80090a4 <__swbuf_r+0x74>
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	3b01      	subs	r3, #1
 800906e:	60a3      	str	r3, [r4, #8]
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	6022      	str	r2, [r4, #0]
 8009076:	701e      	strb	r6, [r3, #0]
 8009078:	6962      	ldr	r2, [r4, #20]
 800907a:	1c43      	adds	r3, r0, #1
 800907c:	429a      	cmp	r2, r3
 800907e:	d004      	beq.n	800908a <__swbuf_r+0x5a>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	07db      	lsls	r3, r3, #31
 8009084:	d506      	bpl.n	8009094 <__swbuf_r+0x64>
 8009086:	2e0a      	cmp	r6, #10
 8009088:	d104      	bne.n	8009094 <__swbuf_r+0x64>
 800908a:	4621      	mov	r1, r4
 800908c:	4628      	mov	r0, r5
 800908e:	f7ff fca9 	bl	80089e4 <_fflush_r>
 8009092:	b938      	cbnz	r0, 80090a4 <__swbuf_r+0x74>
 8009094:	4638      	mov	r0, r7
 8009096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009098:	4621      	mov	r1, r4
 800909a:	4628      	mov	r0, r5
 800909c:	f000 f806 	bl	80090ac <__swsetup_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d0d5      	beq.n	8009050 <__swbuf_r+0x20>
 80090a4:	f04f 37ff 	mov.w	r7, #4294967295
 80090a8:	e7f4      	b.n	8009094 <__swbuf_r+0x64>
	...

080090ac <__swsetup_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4b2a      	ldr	r3, [pc, #168]	; (8009158 <__swsetup_r+0xac>)
 80090b0:	4605      	mov	r5, r0
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	460c      	mov	r4, r1
 80090b6:	b118      	cbz	r0, 80090c0 <__swsetup_r+0x14>
 80090b8:	6a03      	ldr	r3, [r0, #32]
 80090ba:	b90b      	cbnz	r3, 80090c0 <__swsetup_r+0x14>
 80090bc:	f7ff f9ea 	bl	8008494 <__sinit>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090c6:	0718      	lsls	r0, r3, #28
 80090c8:	d422      	bmi.n	8009110 <__swsetup_r+0x64>
 80090ca:	06d9      	lsls	r1, r3, #27
 80090cc:	d407      	bmi.n	80090de <__swsetup_r+0x32>
 80090ce:	2309      	movs	r3, #9
 80090d0:	602b      	str	r3, [r5, #0]
 80090d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090d6:	f04f 30ff 	mov.w	r0, #4294967295
 80090da:	81a3      	strh	r3, [r4, #12]
 80090dc:	e034      	b.n	8009148 <__swsetup_r+0x9c>
 80090de:	0758      	lsls	r0, r3, #29
 80090e0:	d512      	bpl.n	8009108 <__swsetup_r+0x5c>
 80090e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090e4:	b141      	cbz	r1, 80090f8 <__swsetup_r+0x4c>
 80090e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090ea:	4299      	cmp	r1, r3
 80090ec:	d002      	beq.n	80090f4 <__swsetup_r+0x48>
 80090ee:	4628      	mov	r0, r5
 80090f0:	f7ff fafa 	bl	80086e8 <_free_r>
 80090f4:	2300      	movs	r3, #0
 80090f6:	6363      	str	r3, [r4, #52]	; 0x34
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	2300      	movs	r3, #0
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	f043 0308 	orr.w	r3, r3, #8
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	b94b      	cbnz	r3, 8009128 <__swsetup_r+0x7c>
 8009114:	89a3      	ldrh	r3, [r4, #12]
 8009116:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800911a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800911e:	d003      	beq.n	8009128 <__swsetup_r+0x7c>
 8009120:	4621      	mov	r1, r4
 8009122:	4628      	mov	r0, r5
 8009124:	f000 f891 	bl	800924a <__smakebuf_r>
 8009128:	89a0      	ldrh	r0, [r4, #12]
 800912a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800912e:	f010 0301 	ands.w	r3, r0, #1
 8009132:	d00a      	beq.n	800914a <__swsetup_r+0x9e>
 8009134:	2300      	movs	r3, #0
 8009136:	60a3      	str	r3, [r4, #8]
 8009138:	6963      	ldr	r3, [r4, #20]
 800913a:	425b      	negs	r3, r3
 800913c:	61a3      	str	r3, [r4, #24]
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	b943      	cbnz	r3, 8009154 <__swsetup_r+0xa8>
 8009142:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009146:	d1c4      	bne.n	80090d2 <__swsetup_r+0x26>
 8009148:	bd38      	pop	{r3, r4, r5, pc}
 800914a:	0781      	lsls	r1, r0, #30
 800914c:	bf58      	it	pl
 800914e:	6963      	ldrpl	r3, [r4, #20]
 8009150:	60a3      	str	r3, [r4, #8]
 8009152:	e7f4      	b.n	800913e <__swsetup_r+0x92>
 8009154:	2000      	movs	r0, #0
 8009156:	e7f7      	b.n	8009148 <__swsetup_r+0x9c>
 8009158:	20000820 	.word	0x20000820

0800915c <_raise_r>:
 800915c:	291f      	cmp	r1, #31
 800915e:	b538      	push	{r3, r4, r5, lr}
 8009160:	4604      	mov	r4, r0
 8009162:	460d      	mov	r5, r1
 8009164:	d904      	bls.n	8009170 <_raise_r+0x14>
 8009166:	2316      	movs	r3, #22
 8009168:	6003      	str	r3, [r0, #0]
 800916a:	f04f 30ff 	mov.w	r0, #4294967295
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009172:	b112      	cbz	r2, 800917a <_raise_r+0x1e>
 8009174:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009178:	b94b      	cbnz	r3, 800918e <_raise_r+0x32>
 800917a:	4620      	mov	r0, r4
 800917c:	f000 f830 	bl	80091e0 <_getpid_r>
 8009180:	462a      	mov	r2, r5
 8009182:	4601      	mov	r1, r0
 8009184:	4620      	mov	r0, r4
 8009186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800918a:	f000 b817 	b.w	80091bc <_kill_r>
 800918e:	2b01      	cmp	r3, #1
 8009190:	d00a      	beq.n	80091a8 <_raise_r+0x4c>
 8009192:	1c59      	adds	r1, r3, #1
 8009194:	d103      	bne.n	800919e <_raise_r+0x42>
 8009196:	2316      	movs	r3, #22
 8009198:	6003      	str	r3, [r0, #0]
 800919a:	2001      	movs	r0, #1
 800919c:	e7e7      	b.n	800916e <_raise_r+0x12>
 800919e:	2400      	movs	r4, #0
 80091a0:	4628      	mov	r0, r5
 80091a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091a6:	4798      	blx	r3
 80091a8:	2000      	movs	r0, #0
 80091aa:	e7e0      	b.n	800916e <_raise_r+0x12>

080091ac <raise>:
 80091ac:	4b02      	ldr	r3, [pc, #8]	; (80091b8 <raise+0xc>)
 80091ae:	4601      	mov	r1, r0
 80091b0:	6818      	ldr	r0, [r3, #0]
 80091b2:	f7ff bfd3 	b.w	800915c <_raise_r>
 80091b6:	bf00      	nop
 80091b8:	20000820 	.word	0x20000820

080091bc <_kill_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	2300      	movs	r3, #0
 80091c0:	4d06      	ldr	r5, [pc, #24]	; (80091dc <_kill_r+0x20>)
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	4611      	mov	r1, r2
 80091c8:	602b      	str	r3, [r5, #0]
 80091ca:	f7fa f891 	bl	80032f0 <_kill>
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	d102      	bne.n	80091d8 <_kill_r+0x1c>
 80091d2:	682b      	ldr	r3, [r5, #0]
 80091d4:	b103      	cbz	r3, 80091d8 <_kill_r+0x1c>
 80091d6:	6023      	str	r3, [r4, #0]
 80091d8:	bd38      	pop	{r3, r4, r5, pc}
 80091da:	bf00      	nop
 80091dc:	20002dd8 	.word	0x20002dd8

080091e0 <_getpid_r>:
 80091e0:	f7fa b884 	b.w	80032ec <_getpid>

080091e4 <memchr>:
 80091e4:	4603      	mov	r3, r0
 80091e6:	b510      	push	{r4, lr}
 80091e8:	b2c9      	uxtb	r1, r1
 80091ea:	4402      	add	r2, r0
 80091ec:	4293      	cmp	r3, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	d101      	bne.n	80091f6 <memchr+0x12>
 80091f2:	2000      	movs	r0, #0
 80091f4:	e003      	b.n	80091fe <memchr+0x1a>
 80091f6:	7804      	ldrb	r4, [r0, #0]
 80091f8:	3301      	adds	r3, #1
 80091fa:	428c      	cmp	r4, r1
 80091fc:	d1f6      	bne.n	80091ec <memchr+0x8>
 80091fe:	bd10      	pop	{r4, pc}

08009200 <__swhatbuf_r>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	460c      	mov	r4, r1
 8009204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009208:	4615      	mov	r5, r2
 800920a:	2900      	cmp	r1, #0
 800920c:	461e      	mov	r6, r3
 800920e:	b096      	sub	sp, #88	; 0x58
 8009210:	da0c      	bge.n	800922c <__swhatbuf_r+0x2c>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	2100      	movs	r1, #0
 8009216:	f013 0f80 	tst.w	r3, #128	; 0x80
 800921a:	bf0c      	ite	eq
 800921c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009220:	2340      	movne	r3, #64	; 0x40
 8009222:	2000      	movs	r0, #0
 8009224:	6031      	str	r1, [r6, #0]
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	b016      	add	sp, #88	; 0x58
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	466a      	mov	r2, sp
 800922e:	f000 f849 	bl	80092c4 <_fstat_r>
 8009232:	2800      	cmp	r0, #0
 8009234:	dbed      	blt.n	8009212 <__swhatbuf_r+0x12>
 8009236:	9901      	ldr	r1, [sp, #4]
 8009238:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800923c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009240:	4259      	negs	r1, r3
 8009242:	4159      	adcs	r1, r3
 8009244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009248:	e7eb      	b.n	8009222 <__swhatbuf_r+0x22>

0800924a <__smakebuf_r>:
 800924a:	898b      	ldrh	r3, [r1, #12]
 800924c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800924e:	079d      	lsls	r5, r3, #30
 8009250:	4606      	mov	r6, r0
 8009252:	460c      	mov	r4, r1
 8009254:	d507      	bpl.n	8009266 <__smakebuf_r+0x1c>
 8009256:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	6123      	str	r3, [r4, #16]
 800925e:	2301      	movs	r3, #1
 8009260:	6163      	str	r3, [r4, #20]
 8009262:	b002      	add	sp, #8
 8009264:	bd70      	pop	{r4, r5, r6, pc}
 8009266:	466a      	mov	r2, sp
 8009268:	ab01      	add	r3, sp, #4
 800926a:	f7ff ffc9 	bl	8009200 <__swhatbuf_r>
 800926e:	9900      	ldr	r1, [sp, #0]
 8009270:	4605      	mov	r5, r0
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff faa8 	bl	80087c8 <_malloc_r>
 8009278:	b948      	cbnz	r0, 800928e <__smakebuf_r+0x44>
 800927a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800927e:	059a      	lsls	r2, r3, #22
 8009280:	d4ef      	bmi.n	8009262 <__smakebuf_r+0x18>
 8009282:	f023 0303 	bic.w	r3, r3, #3
 8009286:	f043 0302 	orr.w	r3, r3, #2
 800928a:	81a3      	strh	r3, [r4, #12]
 800928c:	e7e3      	b.n	8009256 <__smakebuf_r+0xc>
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	6020      	str	r0, [r4, #0]
 8009292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009296:	81a3      	strh	r3, [r4, #12]
 8009298:	9b00      	ldr	r3, [sp, #0]
 800929a:	6120      	str	r0, [r4, #16]
 800929c:	6163      	str	r3, [r4, #20]
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	b15b      	cbz	r3, 80092ba <__smakebuf_r+0x70>
 80092a2:	4630      	mov	r0, r6
 80092a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092a8:	f000 f81e 	bl	80092e8 <_isatty_r>
 80092ac:	b128      	cbz	r0, 80092ba <__smakebuf_r+0x70>
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f023 0303 	bic.w	r3, r3, #3
 80092b4:	f043 0301 	orr.w	r3, r3, #1
 80092b8:	81a3      	strh	r3, [r4, #12]
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	431d      	orrs	r5, r3
 80092be:	81a5      	strh	r5, [r4, #12]
 80092c0:	e7cf      	b.n	8009262 <__smakebuf_r+0x18>
	...

080092c4 <_fstat_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	2300      	movs	r3, #0
 80092c8:	4d06      	ldr	r5, [pc, #24]	; (80092e4 <_fstat_r+0x20>)
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	4611      	mov	r1, r2
 80092d0:	602b      	str	r3, [r5, #0]
 80092d2:	f7fa f83c 	bl	800334e <_fstat>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	d102      	bne.n	80092e0 <_fstat_r+0x1c>
 80092da:	682b      	ldr	r3, [r5, #0]
 80092dc:	b103      	cbz	r3, 80092e0 <_fstat_r+0x1c>
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	bd38      	pop	{r3, r4, r5, pc}
 80092e2:	bf00      	nop
 80092e4:	20002dd8 	.word	0x20002dd8

080092e8 <_isatty_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	2300      	movs	r3, #0
 80092ec:	4d05      	ldr	r5, [pc, #20]	; (8009304 <_isatty_r+0x1c>)
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7fa f830 	bl	8003358 <_isatty>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_isatty_r+0x1a>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_isatty_r+0x1a>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	20002dd8 	.word	0x20002dd8

08009308 <_init>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	bf00      	nop
 800930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930e:	bc08      	pop	{r3}
 8009310:	469e      	mov	lr, r3
 8009312:	4770      	bx	lr

08009314 <_fini>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr
