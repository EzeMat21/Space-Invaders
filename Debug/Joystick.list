
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ac  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c24  08007c24  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08007c24  08007c24  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c24  08007c24  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ec8  2000001c  08007c48  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ee4  08007c48  00021ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b87  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b01  00000000  00000000  00037c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001162  00000000  00000000  0003cd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f8a  00000000  00000000  0003deca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac4d  00000000  00000000  00057e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009920b  00000000  00000000  00072aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d80  00000000  00000000  0010bcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00111a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007260 	.word	0x08007260

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08007260 	.word	0x08007260

08000150 <getPlayer>:

extern dificultad_t dificultad;



player_t *getPlayer(){
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

	return &Player;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <getPlayer+0x10>)
}
 8000156:	4618      	mov	r0, r3
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000038 	.word	0x20000038

08000164 <getAlien>:

alien_t *getAlien(uint8_t fila, uint8_t columna){
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	460a      	mov	r2, r1
 800016e:	71fb      	strb	r3, [r7, #7]
 8000170:	4613      	mov	r3, r2
 8000172:	71bb      	strb	r3, [r7, #6]
	return &Alien[fila][columna];
 8000174:	79f9      	ldrb	r1, [r7, #7]
 8000176:	79bb      	ldrb	r3, [r7, #6]
 8000178:	461a      	mov	r2, r3
 800017a:	0092      	lsls	r2, r2, #2
 800017c:	441a      	add	r2, r3
 800017e:	460b      	mov	r3, r1
 8000180:	009b      	lsls	r3, r3, #2
 8000182:	440b      	add	r3, r1
 8000184:	00d9      	lsls	r1, r3, #3
 8000186:	1ac9      	subs	r1, r1, r3
 8000188:	1853      	adds	r3, r2, r1
 800018a:	4a03      	ldr	r2, [pc, #12]	; (8000198 <getAlien+0x34>)
 800018c:	4413      	add	r3, r2
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000044 	.word	0x20000044

0800019c <getMovAliens>:

movimiento_aliens_t *getMovAliens(){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	return &movimiento_Aliens;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <getMovAliens+0x10>)
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000040 	.word	0x20000040

080001b0 <getDisparo>:

disparo_t *getDisparo(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	return &Disparo;
 80001b4:	4b02      	ldr	r3, [pc, #8]	; (80001c0 <getDisparo+0x10>)
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	2000003c 	.word	0x2000003c

080001c4 <playerInit>:

void playerInit(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	Player.posicion_X = 64;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <playerInit+0x14>)
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	705a      	strb	r2, [r3, #1]

}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000038 	.word	0x20000038

080001dc <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af02      	add	r7, sp, #8
 80001e2:	4603      	mov	r3, r0
 80001e4:	6039      	str	r1, [r7, #0]
 80001e6:	71fb      	strb	r3, [r7, #7]

	if(direccion == derecha){
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10e      	bne.n	800020c <plotPlayer+0x30>

		if(player->posicion_X >= 120){
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	2b77      	cmp	r3, #119	; 0x77
 80001f4:	d903      	bls.n	80001fe <plotPlayer+0x22>
			player->posicion_X = 120;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2278      	movs	r2, #120	; 0x78
 80001fa:	705a      	strb	r2, [r3, #1]
 80001fc:	e017      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X + 4;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	3304      	adds	r3, #4
 8000204:	b2da      	uxtb	r2, r3
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	705a      	strb	r2, [r3, #1]
 800020a:	e010      	b.n	800022e <plotPlayer+0x52>
		}

	}
	else if(direccion == izquierda){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d10d      	bne.n	800022e <plotPlayer+0x52>

		if(player->posicion_X <= 0){
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d103      	bne.n	8000222 <plotPlayer+0x46>
			player->posicion_X = 0;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	705a      	strb	r2, [r3, #1]
 8000220:	e005      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X - 4;
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	3b04      	subs	r3, #4
 8000228:	b2da      	uxtb	r2, r3
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	705a      	strb	r2, [r3, #1]
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	b218      	sxth	r0, r3
 8000234:	2301      	movs	r3, #1
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	2308      	movs	r3, #8
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2308      	movs	r3, #8
 800023e:	4a04      	ldr	r2, [pc, #16]	; (8000250 <plotPlayer+0x74>)
 8000240:	2138      	movs	r1, #56	; 0x38
 8000242:	f000 fe35 	bl	8000eb0 <SSD1306_DrawBitmap>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	08007a4c 	.word	0x08007a4c

08000254 <InvaderInit>:



void InvaderInit(){
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

	movimiento_Aliens.orientacion = mov_derecha;
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <InvaderInit+0xa0>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000260:	2300      	movs	r3, #0
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	e03e      	b.n	80002e4 <InvaderInit+0x90>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	e035      	b.n	80002d8 <InvaderInit+0x84>
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	461a      	mov	r2, r3
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	441a      	add	r2, r3
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	4413      	add	r3, r2
 8000278:	b2dc      	uxtb	r4, r3
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff6f 	bl	8000164 <getAlien>
 8000286:	4603      	mov	r3, r0
 8000288:	f104 020a 	add.w	r2, r4, #10
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	701a      	strb	r2, [r3, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff64 	bl	8000164 <getAlien>
 800029c:	4602      	mov	r2, r0
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4619      	mov	r1, r3
 80002a2:	0089      	lsls	r1, r1, #2
 80002a4:	4419      	add	r1, r3
 80002a6:	0049      	lsls	r1, r1, #1
 80002a8:	440b      	add	r3, r1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	7053      	strb	r3, [r2, #1]
			getAlien(y, x)->vivo = true;
 80002ae:	79ba      	ldrb	r2, [r7, #6]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff55 	bl	8000164 <getAlien>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2201      	movs	r2, #1
 80002be:	709a      	strb	r2, [r3, #2]
			getAlien(y, x)->conteo_explosion = 2;
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff4c 	bl	8000164 <getAlien>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2202      	movs	r2, #2
 80002d0:	711a      	strb	r2, [r3, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b06      	cmp	r3, #6
 80002dc:	d9c6      	bls.n	800026c <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	3301      	adds	r3, #1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d9bd      	bls.n	8000266 <InvaderInit+0x12>
		}
	}

}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	20000040 	.word	0x20000040

080002f8 <plotAliens>:

void plotAliens(){
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af02      	add	r7, sp, #8


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80002fe:	f7ff ff4d 	bl	800019c <getMovAliens>
 8000302:	4603      	mov	r3, r0
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	4aa9      	ldr	r2, [pc, #676]	; (80005ac <plotAliens+0x2b4>)
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	fbb3 f1f2 	udiv	r1, r3, r2
 800030e:	fb01 f202 	mul.w	r2, r1, r2
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 80a8 	bne.w	800046c <plotAliens+0x174>
			switch(getMovAliens()->orientacion){
 800031c:	f7ff ff3e 	bl	800019c <getMovAliens>
 8000320:	4603      	mov	r3, r0
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <plotAliens+0x36>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d025      	beq.n	8000378 <plotAliens+0x80>
							}
						}

						break;
				default:
					break;
 800032c:	e049      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	e01d      	b.n	8000370 <plotAliens+0x78>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000334:	2300      	movs	r3, #0
 8000336:	71bb      	strb	r3, [r7, #6]
 8000338:	e014      	b.n	8000364 <plotAliens+0x6c>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 1;
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff0f 	bl	8000164 <getAlien>
 8000346:	4603      	mov	r3, r0
 8000348:	781c      	ldrb	r4, [r3, #0]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff07 	bl	8000164 <getAlien>
 8000356:	4603      	mov	r3, r0
 8000358:	1c62      	adds	r2, r4, #1
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3301      	adds	r3, #1
 8000362:	71bb      	strb	r3, [r7, #6]
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	2b06      	cmp	r3, #6
 8000368:	d9e7      	bls.n	800033a <plotAliens+0x42>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	3301      	adds	r3, #1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d9de      	bls.n	8000334 <plotAliens+0x3c>
					break;
 8000376:	e024      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000378:	2300      	movs	r3, #0
 800037a:	717b      	strb	r3, [r7, #5]
 800037c:	e01d      	b.n	80003ba <plotAliens+0xc2>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800037e:	2300      	movs	r3, #0
 8000380:	713b      	strb	r3, [r7, #4]
 8000382:	e014      	b.n	80003ae <plotAliens+0xb6>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 1;
 8000384:	793a      	ldrb	r2, [r7, #4]
 8000386:	797b      	ldrb	r3, [r7, #5]
 8000388:	4611      	mov	r1, r2
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff feea 	bl	8000164 <getAlien>
 8000390:	4603      	mov	r3, r0
 8000392:	781c      	ldrb	r4, [r3, #0]
 8000394:	793a      	ldrb	r2, [r7, #4]
 8000396:	797b      	ldrb	r3, [r7, #5]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fee2 	bl	8000164 <getAlien>
 80003a0:	4603      	mov	r3, r0
 80003a2:	1e62      	subs	r2, r4, #1
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003a8:	793b      	ldrb	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	713b      	strb	r3, [r7, #4]
 80003ae:	793b      	ldrb	r3, [r7, #4]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d9e7      	bls.n	8000384 <plotAliens+0x8c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	3301      	adds	r3, #1
 80003b8:	717b      	strb	r3, [r7, #5]
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d9de      	bls.n	800037e <plotAliens+0x86>
						break;
 80003c0:	bf00      	nop
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 80003c2:	2106      	movs	r1, #6
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fecd 	bl	8000164 <getAlien>
 80003ca:	4603      	mov	r3, r0
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b72      	cmp	r3, #114	; 0x72
 80003d0:	d904      	bls.n	80003dc <plotAliens+0xe4>

				getMovAliens()->orientacion = mov_izquierda;
 80003d2:	f7ff fee3 	bl	800019c <getMovAliens>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 80003dc:	2100      	movs	r1, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff fec0 	bl	8000164 <getAlien>
 80003e4:	4603      	mov	r3, r0
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10e      	bne.n	800040a <plotAliens+0x112>
				getMovAliens()->orientacion = mov_derecha;
 80003ec:	f7ff fed6 	bl	800019c <getMovAliens>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 80003f6:	f7ff fed1 	bl	800019c <getMovAliens>
 80003fa:	4603      	mov	r3, r0
 80003fc:	789c      	ldrb	r4, [r3, #2]
 80003fe:	f7ff fecd 	bl	800019c <getMovAliens>
 8000402:	4603      	mov	r3, r0
 8000404:	1c62      	adds	r2, r4, #1
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 800040a:	f7ff fec7 	bl	800019c <getMovAliens>
 800040e:	4603      	mov	r3, r0
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	2b0a      	cmp	r3, #10
 8000414:	d12a      	bne.n	800046c <plotAliens+0x174>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000416:	2300      	movs	r3, #0
 8000418:	70fb      	strb	r3, [r7, #3]
 800041a:	e024      	b.n	8000466 <plotAliens+0x16e>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800041c:	2300      	movs	r3, #0
 800041e:	70bb      	strb	r3, [r7, #2]
 8000420:	e01b      	b.n	800045a <plotAliens+0x162>

						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 8000422:	78ba      	ldrb	r2, [r7, #2]
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe9b 	bl	8000164 <getAlien>
 800042e:	4603      	mov	r3, r0
 8000430:	785d      	ldrb	r5, [r3, #1]
 8000432:	4b5e      	ldr	r3, [pc, #376]	; (80005ac <plotAliens+0x2b4>)
 8000434:	785c      	ldrb	r4, [r3, #1]
 8000436:	78ba      	ldrb	r2, [r7, #2]
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe91 	bl	8000164 <getAlien>
 8000442:	4603      	mov	r3, r0
 8000444:	192a      	adds	r2, r5, r4
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	705a      	strb	r2, [r3, #1]
						getMovAliens()->conteo_bajada = 0;
 800044a:	f7ff fea7 	bl	800019c <getMovAliens>
 800044e:	4603      	mov	r3, r0
 8000450:	2200      	movs	r2, #0
 8000452:	709a      	strb	r2, [r3, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	3301      	adds	r3, #1
 8000458:	70bb      	strb	r3, [r7, #2]
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	2b06      	cmp	r3, #6
 800045e:	d9e0      	bls.n	8000422 <plotAliens+0x12a>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	3301      	adds	r3, #1
 8000464:	70fb      	strb	r3, [r7, #3]
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d9d7      	bls.n	800041c <plotAliens+0x124>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 800046c:	f7ff fe96 	bl	800019c <getMovAliens>
 8000470:	4603      	mov	r3, r0
 8000472:	785c      	ldrb	r4, [r3, #1]
 8000474:	f7ff fe92 	bl	800019c <getMovAliens>
 8000478:	4603      	mov	r3, r0
 800047a:	1c62      	adds	r2, r4, #1
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	705a      	strb	r2, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000480:	2300      	movs	r3, #0
 8000482:	707b      	strb	r3, [r7, #1]
 8000484:	e089      	b.n	800059a <plotAliens+0x2a2>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000486:	2300      	movs	r3, #0
 8000488:	703b      	strb	r3, [r7, #0]
 800048a:	e07f      	b.n	800058c <plotAliens+0x294>

					switch(y){
 800048c:	787b      	ldrb	r3, [r7, #1]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <plotAliens+0x1a0>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d026      	beq.n	80004e4 <plotAliens+0x1ec>
 8000496:	e04b      	b.n	8000530 <plotAliens+0x238>

					case 0:
						if(getAlien(y,x)->vivo == true){
 8000498:	783a      	ldrb	r2, [r7, #0]
 800049a:	787b      	ldrb	r3, [r7, #1]
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe60 	bl	8000164 <getAlien>
 80004a4:	4603      	mov	r3, r0
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d167      	bne.n	800057c <plotAliens+0x284>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004ac:	783a      	ldrb	r2, [r7, #0]
 80004ae:	787b      	ldrb	r3, [r7, #1]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe56 	bl	8000164 <getAlien>
 80004b8:	4603      	mov	r3, r0
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b21c      	sxth	r4, r3
 80004be:	783a      	ldrb	r2, [r7, #0]
 80004c0:	787b      	ldrb	r3, [r7, #1]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe4d 	bl	8000164 <getAlien>
 80004ca:	4603      	mov	r3, r0
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	b219      	sxth	r1, r3
 80004d0:	2301      	movs	r3, #1
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2308      	movs	r3, #8
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2310      	movs	r3, #16
 80004da:	4a35      	ldr	r2, [pc, #212]	; (80005b0 <plotAliens+0x2b8>)
 80004dc:	4620      	mov	r0, r4
 80004de:	f000 fce7 	bl	8000eb0 <SSD1306_DrawBitmap>
						}
						break;
 80004e2:	e04b      	b.n	800057c <plotAliens+0x284>
					case 1:
						if(getAlien(y,x)->vivo == true){
 80004e4:	783a      	ldrb	r2, [r7, #0]
 80004e6:	787b      	ldrb	r3, [r7, #1]
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe3a 	bl	8000164 <getAlien>
 80004f0:	4603      	mov	r3, r0
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d143      	bne.n	8000580 <plotAliens+0x288>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004f8:	783a      	ldrb	r2, [r7, #0]
 80004fa:	787b      	ldrb	r3, [r7, #1]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe30 	bl	8000164 <getAlien>
 8000504:	4603      	mov	r3, r0
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b21c      	sxth	r4, r3
 800050a:	783a      	ldrb	r2, [r7, #0]
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe27 	bl	8000164 <getAlien>
 8000516:	4603      	mov	r3, r0
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	b219      	sxth	r1, r3
 800051c:	2301      	movs	r3, #1
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2308      	movs	r3, #8
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2310      	movs	r3, #16
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <plotAliens+0x2b8>)
 8000528:	4620      	mov	r0, r4
 800052a:	f000 fcc1 	bl	8000eb0 <SSD1306_DrawBitmap>
						}
						break;
 800052e:	e027      	b.n	8000580 <plotAliens+0x288>
					default:
						if(getAlien(y,x)->vivo == true){
 8000530:	783a      	ldrb	r2, [r7, #0]
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe14 	bl	8000164 <getAlien>
 800053c:	4603      	mov	r3, r0
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d11f      	bne.n	8000584 <plotAliens+0x28c>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000544:	783a      	ldrb	r2, [r7, #0]
 8000546:	787b      	ldrb	r3, [r7, #1]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe0a 	bl	8000164 <getAlien>
 8000550:	4603      	mov	r3, r0
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b21c      	sxth	r4, r3
 8000556:	783a      	ldrb	r2, [r7, #0]
 8000558:	787b      	ldrb	r3, [r7, #1]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe01 	bl	8000164 <getAlien>
 8000562:	4603      	mov	r3, r0
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	b219      	sxth	r1, r3
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2308      	movs	r3, #8
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2310      	movs	r3, #16
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <plotAliens+0x2bc>)
 8000574:	4620      	mov	r0, r4
 8000576:	f000 fc9b 	bl	8000eb0 <SSD1306_DrawBitmap>
						}
						break;
 800057a:	e003      	b.n	8000584 <plotAliens+0x28c>
						break;
 800057c:	bf00      	nop
 800057e:	e002      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000580:	bf00      	nop
 8000582:	e000      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000584:	bf00      	nop
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000586:	783b      	ldrb	r3, [r7, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	703b      	strb	r3, [r7, #0]
 800058c:	783b      	ldrb	r3, [r7, #0]
 800058e:	2b06      	cmp	r3, #6
 8000590:	f67f af7c 	bls.w	800048c <plotAliens+0x194>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000594:	787b      	ldrb	r3, [r7, #1]
 8000596:	3301      	adds	r3, #1
 8000598:	707b      	strb	r3, [r7, #1]
 800059a:	787b      	ldrb	r3, [r7, #1]
 800059c:	2b02      	cmp	r3, #2
 800059e:	f67f af72 	bls.w	8000486 <plotAliens+0x18e>
					}
			}

		}

}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	200000b0 	.word	0x200000b0
 80005b0:	08007a64 	.word	0x08007a64
 80005b4:	08007a74 	.word	0x08007a74

080005b8 <disparoInit>:


void disparoInit(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

	Disparo.posicion_x = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <disparoInit+0x20>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <disparoInit+0x20>)
 80005c4:	223c      	movs	r2, #60	; 0x3c
 80005c6:	705a      	strb	r2, [r3, #1]
	Disparo.disparo = false;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <disparoInit+0x20>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	709a      	strb	r2, [r3, #2]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	2000003c 	.word	0x2000003c

080005dc <disparar>:


void disparar(){
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8


			if(getDisparo()->numero_disparos == 1){
 80005e2:	f7ff fde5 	bl	80001b0 <getDisparo>
 80005e6:	4603      	mov	r3, r0
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10c      	bne.n	8000608 <disparar+0x2c>
				getDisparo()->disparo = true;
 80005ee:	f7ff fddf 	bl	80001b0 <getDisparo>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2201      	movs	r2, #1
 80005f6:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 80005f8:	f7ff fdaa 	bl	8000150 <getPlayer>
 80005fc:	4604      	mov	r4, r0
 80005fe:	f7ff fdd7 	bl	80001b0 <getDisparo>
 8000602:	4603      	mov	r3, r0
 8000604:	7862      	ldrb	r2, [r4, #1]
 8000606:	701a      	strb	r2, [r3, #0]
			}


			if(getDisparo()->disparo == true){
 8000608:	f7ff fdd2 	bl	80001b0 <getDisparo>
 800060c:	4603      	mov	r3, r0
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d145      	bne.n	80006a0 <disparar+0xc4>
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 3, 1);
 8000614:	f7ff fdcc 	bl	80001b0 <getDisparo>
 8000618:	4603      	mov	r3, r0
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3304      	adds	r3, #4
 8000620:	b29c      	uxth	r4, r3
 8000622:	f7ff fdc5 	bl	80001b0 <getDisparo>
 8000626:	4603      	mov	r3, r0
 8000628:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800062c:	b29d      	uxth	r5, r3
 800062e:	f7ff fdbf 	bl	80001b0 <getDisparo>
 8000632:	4603      	mov	r3, r0
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	3304      	adds	r3, #4
 800063a:	b29e      	uxth	r6, r3
 800063c:	f7ff fdb8 	bl	80001b0 <getDisparo>
 8000640:	4603      	mov	r3, r0
 8000642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000646:	b29b      	uxth	r3, r3
 8000648:	3303      	adds	r3, #3
 800064a:	b29b      	uxth	r3, r3
 800064c:	2201      	movs	r2, #1
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	4632      	mov	r2, r6
 8000652:	4629      	mov	r1, r5
 8000654:	4620      	mov	r0, r4
 8000656:	f000 feb6 	bl	80013c6 <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800065a:	f7ff fda9 	bl	80001b0 <getDisparo>
 800065e:	4603      	mov	r3, r0
 8000660:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b06      	subs	r3, #6
 8000668:	b2dc      	uxtb	r4, r3
 800066a:	f7ff fda1 	bl	80001b0 <getDisparo>
 800066e:	4603      	mov	r3, r0
 8000670:	b262      	sxtb	r2, r4
 8000672:	705a      	strb	r2, [r3, #1]


				if(getDisparo()->posicion_y <= 0){
 8000674:	f7ff fd9c 	bl	80001b0 <getDisparo>
 8000678:	4603      	mov	r3, r0
 800067a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800067e:	2b00      	cmp	r3, #0
 8000680:	dc0e      	bgt.n	80006a0 <disparar+0xc4>
					//Se reinician los valores del disparo
					getDisparo()->disparo = false;
 8000682:	f7ff fd95 	bl	80001b0 <getDisparo>
 8000686:	4603      	mov	r3, r0
 8000688:	2200      	movs	r2, #0
 800068a:	709a      	strb	r2, [r3, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800068c:	f7ff fd90 	bl	80001b0 <getDisparo>
 8000690:	4603      	mov	r3, r0
 8000692:	223c      	movs	r2, #60	; 0x3c
 8000694:	705a      	strb	r2, [r3, #1]
					getDisparo()->numero_disparos = 0;
 8000696:	f7ff fd8b 	bl	80001b0 <getDisparo>
 800069a:	4603      	mov	r3, r0
 800069c:	2200      	movs	r2, #0
 800069e:	70da      	strb	r2, [r3, #3]
				}
			}


			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e0c0      	b.n	8000828 <disparar+0x24c>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	e0b6      	b.n	800081a <disparar+0x23e>

					if( (getDisparo()->posicion_x >= getAlien(y,x)->posicion_X) &&  (getDisparo()->posicion_x <= getAlien(y,x)->posicion_X + (TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS) )){
 80006ac:	f7ff fd80 	bl	80001b0 <getDisparo>
 80006b0:	4603      	mov	r3, r0
 80006b2:	781c      	ldrb	r4, [r3, #0]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd52 	bl	8000164 <getAlien>
 80006c0:	4603      	mov	r3, r0
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d35b      	bcc.n	8000780 <disparar+0x1a4>
 80006c8:	f7ff fd72 	bl	80001b0 <getDisparo>
 80006cc:	4603      	mov	r3, r0
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461c      	mov	r4, r3
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd43 	bl	8000164 <getAlien>
 80006de:	4603      	mov	r3, r0
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	330d      	adds	r3, #13
 80006e4:	429c      	cmp	r4, r3
 80006e6:	dc4b      	bgt.n	8000780 <disparar+0x1a4>
						if( (getDisparo()->posicion_y >= getAlien(y,x)->posicion_Y) && (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + (TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS)) ){
 80006e8:	f7ff fd62 	bl	80001b0 <getDisparo>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f2:	461c      	mov	r4, r3
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd32 	bl	8000164 <getAlien>
 8000700:	4603      	mov	r3, r0
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	429c      	cmp	r4, r3
 8000706:	db3b      	blt.n	8000780 <disparar+0x1a4>
 8000708:	f7ff fd52 	bl	80001b0 <getDisparo>
 800070c:	4603      	mov	r3, r0
 800070e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000712:	461c      	mov	r4, r3
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd22 	bl	8000164 <getAlien>
 8000720:	4603      	mov	r3, r0
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	330b      	adds	r3, #11
 8000726:	429c      	cmp	r4, r3
 8000728:	dc2a      	bgt.n	8000780 <disparar+0x1a4>

								if(getAlien(y,x)->vivo == true){
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd17 	bl	8000164 <getAlien>
 8000736:	4603      	mov	r3, r0
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d120      	bne.n	8000780 <disparar+0x1a4>
									getAlien(y,x)->vivo = false;
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd0d 	bl	8000164 <getAlien>
 800074a:	4603      	mov	r3, r0
 800074c:	2200      	movs	r2, #0
 800074e:	709a      	strb	r2, [r3, #2]
									getAlien(y,x)->explosion = true;
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd04 	bl	8000164 <getAlien>
 800075c:	4603      	mov	r3, r0
 800075e:	2201      	movs	r2, #1
 8000760:	70da      	strb	r2, [r3, #3]

									//Se reinician los valores del disparo
									getDisparo()->disparo = false;
 8000762:	f7ff fd25 	bl	80001b0 <getDisparo>
 8000766:	4603      	mov	r3, r0
 8000768:	2200      	movs	r2, #0
 800076a:	709a      	strb	r2, [r3, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800076c:	f7ff fd20 	bl	80001b0 <getDisparo>
 8000770:	4603      	mov	r3, r0
 8000772:	223c      	movs	r2, #60	; 0x3c
 8000774:	705a      	strb	r2, [r3, #1]
									getDisparo()->numero_disparos = 0;
 8000776:	f7ff fd1b 	bl	80001b0 <getDisparo>
 800077a:	4603      	mov	r3, r0
 800077c:	2200      	movs	r2, #0
 800077e:	70da      	strb	r2, [r3, #3]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fcec 	bl	8000164 <getAlien>
 800078c:	4603      	mov	r3, r0
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d13f      	bne.n	8000814 <disparar+0x238>
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fce2 	bl	8000164 <getAlien>
 80007a0:	4603      	mov	r3, r0
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b21c      	sxth	r4, r3
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fcd9 	bl	8000164 <getAlien>
 80007b2:	4603      	mov	r3, r0
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	b219      	sxth	r1, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2308      	movs	r3, #8
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2310      	movs	r3, #16
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <disparar+0x260>)
 80007c4:	4620      	mov	r0, r4
 80007c6:	f000 fb73 	bl	8000eb0 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fcc7 	bl	8000164 <getAlien>
 80007d6:	4603      	mov	r3, r0
 80007d8:	791c      	ldrb	r4, [r3, #4]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcbf 	bl	8000164 <getAlien>
 80007e6:	4603      	mov	r3, r0
 80007e8:	1e62      	subs	r2, r4, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	711a      	strb	r2, [r3, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fcb5 	bl	8000164 <getAlien>
 80007fa:	4603      	mov	r3, r0
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <disparar+0x238>
							getAlien(y,x)->explosion = false;
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fcab 	bl	8000164 <getAlien>
 800080e:	4603      	mov	r3, r0
 8000810:	2200      	movs	r2, #0
 8000812:	70da      	strb	r2, [r3, #3]
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	3301      	adds	r3, #1
 8000818:	71bb      	strb	r3, [r7, #6]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	2b06      	cmp	r3, #6
 800081e:	f67f af45 	bls.w	80006ac <disparar+0xd0>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b02      	cmp	r3, #2
 800082c:	f67f af3b 	bls.w	80006a6 <disparar+0xca>
						}
					}
				}
			}
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	bf00      	nop
 800083c:	08007a54 	.word	0x08007a54

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f001 f8d8 	bl	80019f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f834 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f8fa 	bl	8000a44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000850:	f000 f88c 	bl	800096c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000854:	f000 f8c8 	bl	80009e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000858:	f003 fdac 	bl	80043b4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueJoystPant */
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <main+0x54>)
 800085e:	2103      	movs	r1, #3
 8000860:	200a      	movs	r0, #10
 8000862:	f003 feb7 	bl	80045d4 <osMessageQueueNew>
 8000866:	4603      	mov	r3, r0
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <main+0x58>)
 800086a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of JoystickTask */
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <main+0x5c>)
 800086e:	2100      	movs	r1, #0
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <main+0x60>)
 8000872:	f003 fe05 	bl	8004480 <osThreadNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <main+0x64>)
 800087a:	6013      	str	r3, [r2, #0]

  /* creation of PantallaTask */
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <main+0x68>)
 800087e:	2100      	movs	r1, #0
 8000880:	480a      	ldr	r0, [pc, #40]	; (80008ac <main+0x6c>)
 8000882:	f003 fdfd 	bl	8004480 <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <main+0x70>)
 800088a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800088c:	f003 fdc4 	bl	8004418 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000890:	e7fe      	b.n	8000890 <main+0x50>
 8000892:	bf00      	nop
 8000894:	08007acc 	.word	0x08007acc
 8000898:	20000140 	.word	0x20000140
 800089c:	08007a84 	.word	0x08007a84
 80008a0:	08000b75 	.word	0x08000b75
 80008a4:	20000138 	.word	0x20000138
 80008a8:	08007aa8 	.word	0x08007aa8
 80008ac:	08000c21 	.word	0x08000c21
 80008b0:	2000013c 	.word	0x2000013c

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	2228      	movs	r2, #40	; 0x28
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 fc92 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f2:	2301      	movs	r3, #1
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000900:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fd5c 	bl	80033c8 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000916:	f000 f9d9 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f002 ffc8 	bl	80038cc <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000942:	f000 f9c3 	bl	8000ccc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000946:	2302      	movs	r3, #2
 8000948:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800094a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800094e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f003 f978 	bl	8003c48 <HAL_RCCEx_PeriphCLKConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800095e:	f000 f9b5 	bl	8000ccc <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	; 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_ADC1_Init+0x74>)
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <MX_ADC1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_ADC1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_ADC1_Init+0x74>)
 800098a:	2201      	movs	r2, #1
 800098c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_ADC1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_ADC1_Init+0x74>)
 8000996:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800099a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_ADC1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_ADC1_Init+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_ADC1_Init+0x74>)
 80009aa:	f001 f857 	bl	8001a5c <HAL_ADC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009b4:	f000 f98a 	bl	8000ccc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	2301      	movs	r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_ADC1_Init+0x74>)
 80009ca:	f001 fb0b 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009d4:	f000 f97a 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000b4 	.word	0x200000b4
 80009e4:	40012400 	.word	0x40012400

080009e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f001 ff05 	bl	8002834 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 f94c 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000e4 	.word	0x200000e4
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	00061a80 	.word	0x00061a80

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a58:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a33      	ldr	r2, [pc, #204]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a76:	f043 0320 	orr.w	r3, r3, #32
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0320 	and.w	r3, r3, #32
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_GPIO_Init+0xe8>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abe:	481c      	ldr	r0, [pc, #112]	; (8000b30 <MX_GPIO_Init+0xec>)
 8000ac0:	f001 fe9f 	bl	8002802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aca:	481a      	ldr	r0, [pc, #104]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000acc:	f001 fe99 	bl	8002802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_GPIO_Init+0xec>)
 8000aea:	f001 fcef 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aee:	2304      	movs	r3, #4
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	4619      	mov	r1, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000b02:	f001 fce3 	bl	80024cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_GPIO_Init+0xf0>)
 8000b20:	f001 fcd4 	bl	80024cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40011000 	.word	0x40011000
 8000b34:	40010800 	.word	0x40010800

08000b38 <config_ADC_canal0>:

/* USER CODE BEGIN 4 */

void config_ADC_canal0(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]

	  sConfig.Channel = ADC_CHANNEL_0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <config_ADC_canal0+0x38>)
 8000b5a:	f001 fa43 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <config_ADC_canal0+0x30>
	  {
	    Error_Handler();
 8000b64:	f000 f8b2 	bl	8000ccc <Error_Handler>
	  }
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000b4 	.word	0x200000b4

08000b74 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	uint16_t val_x, val_y;

	//HAL_ADC_Start_DMA(&hadc1, ADC_values, sizeof(ADC_values));

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000b7c:	f005 f842 	bl	8005c04 <xTaskGetTickCount>
 8000b80:	4603      	mov	r3, r0
 8000b82:	60bb      	str	r3, [r7, #8]
  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  //ADC1->CHSELR  = 0x01;
	  config_ADC_canal0();
 8000b84:	f7ff ffd8 	bl	8000b38 <config_ADC_canal0>
	  HAL_ADC_Start(&hadc1);
 8000b88:	4821      	ldr	r0, [pc, #132]	; (8000c10 <entryJoystick+0x9c>)
 8000b8a:	f001 f83f 	bl	8001c0c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000b8e:	210a      	movs	r1, #10
 8000b90:	481f      	ldr	r0, [pc, #124]	; (8000c10 <entryJoystick+0x9c>)
 8000b92:	f001 f915 	bl	8001dc0 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000b96:	481e      	ldr	r0, [pc, #120]	; (8000c10 <entryJoystick+0x9c>)
 8000b98:	f001 fa18 	bl	8001fcc <HAL_ADC_GetValue>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	82fb      	strh	r3, [r7, #22]
	  HAL_ADC_Stop(&hadc1);
 8000ba0:	481b      	ldr	r0, [pc, #108]	; (8000c10 <entryJoystick+0x9c>)
 8000ba2:	f001 f8e1 	bl	8001d68 <HAL_ADC_Stop>
	  HAL_ADC_Stop(&hadc1);*/

	  //val_x = ADC_values[0];
	  //val_y = ADC_values[1];

	  if(val_x > 2000){
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bac:	d902      	bls.n	8000bb4 <entryJoystick+0x40>
		  joystick.x_value = derecha;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	733b      	strb	r3, [r7, #12]
 8000bb2:	e008      	b.n	8000bc6 <entryJoystick+0x52>
	  }
	  else if(val_x < 1600){
 8000bb4:	8afb      	ldrh	r3, [r7, #22]
 8000bb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000bba:	d202      	bcs.n	8000bc2 <entryJoystick+0x4e>
		  joystick.x_value = izquierda;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	733b      	strb	r3, [r7, #12]
 8000bc0:	e001      	b.n	8000bc6 <entryJoystick+0x52>
	  }
	  else{
		  joystick.x_value = nuloo;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	733b      	strb	r3, [r7, #12]
	  }*/


	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4812      	ldr	r0, [pc, #72]	; (8000c14 <entryJoystick+0xa0>)
 8000bca:	f001 fe03 	bl	80027d4 <HAL_GPIO_ReadPin>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <entryJoystick+0x66>
		  joystick.boton = enter;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	73bb      	strb	r3, [r7, #14]
 8000bd8:	e001      	b.n	8000bde <entryJoystick+0x6a>
	  }
	  else{
		  joystick.boton = nulo;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	73bb      	strb	r3, [r7, #14]
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <entryJoystick+0xa4>)
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	f107 010c 	add.w	r1, r7, #12
 8000be6:	2300      	movs	r3, #0
 8000be8:	2200      	movs	r2, #0
 8000bea:	f003 fd79 	bl	80046e0 <osMessageQueuePut>
 8000bee:	6138      	str	r0, [r7, #16]
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <entryJoystick+0x8e>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <entryJoystick+0xa8>)
 8000bfe:	f001 fe00 	bl	8002802 <HAL_GPIO_WritePin>

	  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	2132      	movs	r1, #50	; 0x32
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f004 fe6b 	bl	80058e4 <vTaskDelayUntil>
  {
 8000c0e:	e7b9      	b.n	8000b84 <entryJoystick+0x10>
 8000c10:	200000b4 	.word	0x200000b4
 8000c14:	40010800 	.word	0x40010800
 8000c18:	20000140 	.word	0x20000140
 8000c1c:	40011000 	.word	0x40011000

08000c20 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8000c28:	f000 f9aa 	bl	8000f80 <SSD1306_Init>
	SSD1306_Clear();
 8000c2c:	f000 fcc6 	bl	80015bc <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8000c30:	f000 fa6a 	bl	8001108 <SSD1306_UpdateScreen>

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8000c34:	f7ff fac6 	bl	80001c4 <playerInit>
	InvaderInit();
 8000c38:	f7ff fb0c 	bl	8000254 <InvaderInit>
	disparoInit();
 8000c3c:	f7ff fcbc 	bl	80005b8 <disparoInit>

	dificultad.velocidad_horizontal = 1;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <entryPantalla+0x7c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 1;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <entryPantalla+0x7c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	705a      	strb	r2, [r3, #1]

	menuInit();
 8000c4c:	f000 f84e 	bl	8000cec <menuInit>

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <entryPantalla+0x80>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f107 0108 	add.w	r1, r7, #8
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f003 fdb3 	bl	80047c8 <osMessageQueueGet>
 8000c62:	60f8      	str	r0, [r7, #12]

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d006      	beq.n	8000c78 <entryPantalla+0x58>
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <entryPantalla+0x84>)
 8000c72:	f001 fdc6 	bl	8002802 <HAL_GPIO_WritePin>
 8000c76:	e00b      	b.n	8000c90 <entryPantalla+0x70>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <entryPantalla+0x84>)
 8000c80:	f001 fdbf 	bl	8002802 <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000c84:	7a3b      	ldrb	r3, [r7, #8]
 8000c86:	7a79      	ldrb	r1, [r7, #9]
 8000c88:	7aba      	ldrb	r2, [r7, #10]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 f850 	bl	8000d30 <menuActualizar>


	}


    SSD1306_UpdateScreen(); // update screen
 8000c90:	f000 fa3a 	bl	8001108 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 fa65 	bl	8001164 <SSD1306_Fill>
  {
 8000c9a:	e7d9      	b.n	8000c50 <entryPantalla+0x30>
 8000c9c:	200000b0 	.word	0x200000b0
 8000ca0:	20000140 	.word	0x20000140
 8000ca4:	40011000 	.word	0x40011000

08000ca8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cba:	f000 feb3 	bl	8001a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40000800 	.word	0x40000800

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <getMenu>:
#include "menu.h"
#include "invaders.h"

menu_t menu;

menu_t *getMenu(){
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

	return &menu;
 8000cdc:	4b02      	ldr	r3, [pc, #8]	; (8000ce8 <getMenu+0x10>)
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000144 	.word	0x20000144

08000cec <menuInit>:


void menuInit(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

	getMenu()->menuActual = menu_principal;
 8000cf0:	f7ff fff2 	bl	8000cd8 <getMenu>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]

	SSD1306_GotoXY(50, 35);
 8000cfa:	2123      	movs	r1, #35	; 0x23
 8000cfc:	2032      	movs	r0, #50	; 0x32
 8000cfe:	f000 faa7 	bl	8001250 <SSD1306_GotoXY>
	SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <menuInit+0x38>)
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <menuInit+0x3c>)
 8000d08:	f000 fb38 	bl	800137c <SSD1306_Puts>
	SSD1306_GotoXY(50, 45);
 8000d0c:	212d      	movs	r1, #45	; 0x2d
 8000d0e:	2032      	movs	r0, #50	; 0x32
 8000d10:	f000 fa9e 	bl	8001250 <SSD1306_GotoXY>
	SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	4903      	ldr	r1, [pc, #12]	; (8000d24 <menuInit+0x38>)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <menuInit+0x40>)
 8000d1a:	f000 fb2f 	bl	800137c <SSD1306_Puts>

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000000 	.word	0x20000000
 8000d28:	080072a8 	.word	0x080072a8
 8000d2c:	080072b0 	.word	0x080072b0

08000d30 <menuActualizar>:

void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	71bb      	strb	r3, [r7, #6]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	717b      	strb	r3, [r7, #5]


	switch(getMenu()->menuActual){
 8000d42:	f7ff ffc9 	bl	8000cd8 <getMenu>
 8000d46:	4603      	mov	r3, r0
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	f200 809d 	bhi.w	8000e8a <menuActualizar+0x15a>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <menuActualizar+0x28>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d6d 	.word	0x08000d6d
 8000d5c:	08000df1 	.word	0x08000df1
 8000d60:	08000e3f 	.word	0x08000e3f
 8000d64:	08000e8b 	.word	0x08000e8b
 8000d68:	08000e53 	.word	0x08000e53

//--------------------------------------------------------------MENU PRINCIPAL-----------------------------------------------------------------------------
	case menu_principal:

		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	2320      	movs	r3, #32
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	4a47      	ldr	r2, [pc, #284]	; (8000e94 <menuActualizar+0x164>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2023      	movs	r0, #35	; 0x23
 8000d7c:	f000 f898 	bl	8000eb0 <SSD1306_DrawBitmap>

		SSD1306_GotoXY(45, 35);
 8000d80:	2123      	movs	r1, #35	; 0x23
 8000d82:	202d      	movs	r0, #45	; 0x2d
 8000d84:	f000 fa64 	bl	8001250 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4943      	ldr	r1, [pc, #268]	; (8000e98 <menuActualizar+0x168>)
 8000d8c:	4843      	ldr	r0, [pc, #268]	; (8000e9c <menuActualizar+0x16c>)
 8000d8e:	f000 faf5 	bl	800137c <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 8000d92:	212d      	movs	r1, #45	; 0x2d
 8000d94:	202d      	movs	r0, #45	; 0x2d
 8000d96:	f000 fa5b 	bl	8001250 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	493e      	ldr	r1, [pc, #248]	; (8000e98 <menuActualizar+0x168>)
 8000d9e:	4840      	ldr	r0, [pc, #256]	; (8000ea0 <menuActualizar+0x170>)
 8000da0:	f000 faec 	bl	800137c <SSD1306_Puts>
		}
		else{
			SSD1306_DrawCircle(43, 48, 3, 1);
		}*/

		switch (getMenu()->accion) {
 8000da4:	f7ff ff98 	bl	8000cd8 <getMenu>
 8000da8:	4603      	mov	r3, r0
 8000daa:	785b      	ldrb	r3, [r3, #1]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d005      	beq.n	8000dbc <menuActualizar+0x8c>
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	dc17      	bgt.n	8000de4 <menuActualizar+0xb4>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d017      	beq.n	8000de8 <menuActualizar+0xb8>
 8000db8:	2b01      	cmp	r3, #1

				break;
			case arriba:
				break;
			case abajo:
				break;
 8000dba:	e018      	b.n	8000dee <menuActualizar+0xbe>
				if(opciones_principal == principal_jugar ){
 8000dbc:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <menuActualizar+0x174>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <menuActualizar+0xa0>
					getMenu()->menuActual = juego;
 8000dc4:	f7ff ff88 	bl	8000cd8 <getMenu>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2201      	movs	r2, #1
 8000dcc:	701a      	strb	r2, [r3, #0]
				break;
 8000dce:	e00d      	b.n	8000dec <menuActualizar+0xbc>
				else if(opciones_principal == principal_puntajes ){
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <menuActualizar+0x174>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d109      	bne.n	8000dec <menuActualizar+0xbc>
					getMenu()->menuActual = puntajes;
 8000dd8:	f7ff ff7e 	bl	8000cd8 <getMenu>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2202      	movs	r2, #2
 8000de0:	701a      	strb	r2, [r3, #0]
				break;
 8000de2:	e003      	b.n	8000dec <menuActualizar+0xbc>
			default:
				break;
 8000de4:	bf00      	nop
 8000de6:	e051      	b.n	8000e8c <menuActualizar+0x15c>
				break;
 8000de8:	bf00      	nop
 8000dea:	e04f      	b.n	8000e8c <menuActualizar+0x15c>
				break;
 8000dec:	bf00      	nop
		}

		break;
 8000dee:	e04d      	b.n	8000e8c <menuActualizar+0x15c>
//--------------------------------------------------------------  JUEGO -----------------------------------------------------------------------------

	case juego:

		//Se grafican el player, aliens y disparo.
		plotPlayer(x, getPlayer());
 8000df0:	f7ff f9ae 	bl	8000150 <getPlayer>
 8000df4:	4602      	mov	r2, r0
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9ee 	bl	80001dc <plotPlayer>
		plotAliens();
 8000e00:	f7ff fa7a 	bl	80002f8 <plotAliens>

		disparar();
 8000e04:	f7ff fbea 	bl	80005dc <disparar>


		//Prender led si se apretó el boton
		if(boton == enter){
 8000e08:	797b      	ldrb	r3, [r7, #5]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d110      	bne.n	8000e30 <menuActualizar+0x100>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e14:	4824      	ldr	r0, [pc, #144]	; (8000ea8 <menuActualizar+0x178>)
 8000e16:	f001 fcf4 	bl	8002802 <HAL_GPIO_WritePin>
			//boton_apretado = 1;
			getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 8000e1a:	f7ff f9c9 	bl	80001b0 <getDisparo>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	78dc      	ldrb	r4, [r3, #3]
 8000e22:	f7ff f9c5 	bl	80001b0 <getDisparo>
 8000e26:	4603      	mov	r3, r0
 8000e28:	1c62      	adds	r2, r4, #1
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	70da      	strb	r2, [r3, #3]
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		}

		break;
 8000e2e:	e02d      	b.n	8000e8c <menuActualizar+0x15c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e36:	481c      	ldr	r0, [pc, #112]	; (8000ea8 <menuActualizar+0x178>)
 8000e38:	f001 fce3 	bl	8002802 <HAL_GPIO_WritePin>
		break;
 8000e3c:	e026      	b.n	8000e8c <menuActualizar+0x15c>

//-------------------------------------------------------------- PUNTAJES-----------------------------------------------------------------------------
	case puntajes:

		SSD1306_GotoXY(35, 25);
 8000e3e:	2119      	movs	r1, #25
 8000e40:	2023      	movs	r0, #35	; 0x23
 8000e42:	f000 fa05 	bl	8001250 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	4913      	ldr	r1, [pc, #76]	; (8000e98 <menuActualizar+0x168>)
 8000e4a:	4815      	ldr	r0, [pc, #84]	; (8000ea0 <menuActualizar+0x170>)
 8000e4c:	f000 fa96 	bl	800137c <SSD1306_Puts>

		break;
 8000e50:	e01c      	b.n	8000e8c <menuActualizar+0x15c>


//-------------------------------------------------------------- GAME OVER -----------------------------------------------------------------------------
	case game_over:

		SSD1306_GotoXY(35, 25);
 8000e52:	2119      	movs	r1, #25
 8000e54:	2023      	movs	r0, #35	; 0x23
 8000e56:	f000 f9fb 	bl	8001250 <SSD1306_GotoXY>
		SSD1306_Puts("GAME OVER", &Font_7x10, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	490e      	ldr	r1, [pc, #56]	; (8000e98 <menuActualizar+0x168>)
 8000e5e:	4813      	ldr	r0, [pc, #76]	; (8000eac <menuActualizar+0x17c>)
 8000e60:	f000 fa8c 	bl	800137c <SSD1306_Puts>

		getMenu()->accion = boton;
 8000e64:	f7ff ff38 	bl	8000cd8 <getMenu>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	7053      	strb	r3, [r2, #1]

		switch(getMenu()->accion){
 8000e6e:	f7ff ff33 	bl	8000cd8 <getMenu>
 8000e72:	4603      	mov	r3, r0
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d105      	bne.n	8000e86 <menuActualizar+0x156>
			case enter:
				getMenu()->menuActual = puntajes;
 8000e7a:	f7ff ff2d 	bl	8000cd8 <getMenu>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]
				break;
 8000e84:	e000      	b.n	8000e88 <menuActualizar+0x158>
			default:
				break;
 8000e86:	bf00      	nop
		}

		break;
 8000e88:	e000      	b.n	8000e8c <menuActualizar+0x15c>
	default:
		break;
 8000e8a:	bf00      	nop
	}

}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	08007ae4 	.word	0x08007ae4
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	080072a8 	.word	0x080072a8
 8000ea0:	080072b0 	.word	0x080072b0
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	080072bc 	.word	0x080072bc

08000eb0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60ba      	str	r2, [r7, #8]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4603      	mov	r3, r0
 8000ebc:	81fb      	strh	r3, [r7, #14]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	81bb      	strh	r3, [r7, #12]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eca:	3307      	adds	r3, #7
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	da00      	bge.n	8000ed2 <SSD1306_DrawBitmap+0x22>
 8000ed0:	3307      	adds	r3, #7
 8000ed2:	10db      	asrs	r3, r3, #3
 8000ed4:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	82bb      	strh	r3, [r7, #20]
 8000ede:	e044      	b.n	8000f6a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	827b      	strh	r3, [r7, #18]
 8000ee4:	e02f      	b.n	8000f46 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000ee6:	8a7b      	ldrh	r3, [r7, #18]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	75fb      	strb	r3, [r7, #23]
 8000ef6:	e012      	b.n	8000f1e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ef8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000efc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f00:	fb03 f202 	mul.w	r2, r3, r2
 8000f04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da00      	bge.n	8000f0e <SSD1306_DrawBitmap+0x5e>
 8000f0c:	3307      	adds	r3, #7
 8000f0e:	10db      	asrs	r3, r3, #3
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4413      	add	r3, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da09      	bge.n	8000f3a <SSD1306_DrawBitmap+0x8a>
 8000f26:	89fa      	ldrh	r2, [r7, #14]
 8000f28:	8a7b      	ldrh	r3, [r7, #18]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	89b9      	ldrh	r1, [r7, #12]
 8000f30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f92d 	bl	8001194 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000f3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	827b      	strh	r3, [r7, #18]
 8000f46:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dbc9      	blt.n	8000ee6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000f52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	82bb      	strh	r3, [r7, #20]
 8000f5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3301      	adds	r3, #1
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	81bb      	strh	r3, [r7, #12]
 8000f6a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000f6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dbb4      	blt.n	8000ee0 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f86:	f000 fb23 	bl	80015d0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f8a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2178      	movs	r1, #120	; 0x78
 8000f92:	485b      	ldr	r0, [pc, #364]	; (8001100 <SSD1306_Init+0x180>)
 8000f94:	f001 fe90 	bl	8002cb8 <HAL_I2C_IsDeviceReady>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e0a9      	b.n	80010f6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000fa2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000fa6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fa8:	e002      	b.n	8000fb0 <SSD1306_Init+0x30>
		p--;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fb6:	22ae      	movs	r2, #174	; 0xae
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2078      	movs	r0, #120	; 0x78
 8000fbc:	f000 fb82 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2078      	movs	r0, #120	; 0x78
 8000fc6:	f000 fb7d 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fca:	2210      	movs	r2, #16
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	; 0x78
 8000fd0:	f000 fb78 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fd4:	22b0      	movs	r2, #176	; 0xb0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2078      	movs	r0, #120	; 0x78
 8000fda:	f000 fb73 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fde:	22c8      	movs	r2, #200	; 0xc8
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	; 0x78
 8000fe4:	f000 fb6e 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2078      	movs	r0, #120	; 0x78
 8000fee:	f000 fb69 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2078      	movs	r0, #120	; 0x78
 8000ff8:	f000 fb64 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ffc:	2240      	movs	r2, #64	; 0x40
 8000ffe:	2100      	movs	r1, #0
 8001000:	2078      	movs	r0, #120	; 0x78
 8001002:	f000 fb5f 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001006:	2281      	movs	r2, #129	; 0x81
 8001008:	2100      	movs	r1, #0
 800100a:	2078      	movs	r0, #120	; 0x78
 800100c:	f000 fb5a 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	2100      	movs	r1, #0
 8001014:	2078      	movs	r0, #120	; 0x78
 8001016:	f000 fb55 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800101a:	22a1      	movs	r2, #161	; 0xa1
 800101c:	2100      	movs	r1, #0
 800101e:	2078      	movs	r0, #120	; 0x78
 8001020:	f000 fb50 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001024:	22a6      	movs	r2, #166	; 0xa6
 8001026:	2100      	movs	r1, #0
 8001028:	2078      	movs	r0, #120	; 0x78
 800102a:	f000 fb4b 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800102e:	22a8      	movs	r2, #168	; 0xa8
 8001030:	2100      	movs	r1, #0
 8001032:	2078      	movs	r0, #120	; 0x78
 8001034:	f000 fb46 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001038:	223f      	movs	r2, #63	; 0x3f
 800103a:	2100      	movs	r1, #0
 800103c:	2078      	movs	r0, #120	; 0x78
 800103e:	f000 fb41 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001042:	22a4      	movs	r2, #164	; 0xa4
 8001044:	2100      	movs	r1, #0
 8001046:	2078      	movs	r0, #120	; 0x78
 8001048:	f000 fb3c 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800104c:	22d3      	movs	r2, #211	; 0xd3
 800104e:	2100      	movs	r1, #0
 8001050:	2078      	movs	r0, #120	; 0x78
 8001052:	f000 fb37 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2078      	movs	r0, #120	; 0x78
 800105c:	f000 fb32 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001060:	22d5      	movs	r2, #213	; 0xd5
 8001062:	2100      	movs	r1, #0
 8001064:	2078      	movs	r0, #120	; 0x78
 8001066:	f000 fb2d 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800106a:	22f0      	movs	r2, #240	; 0xf0
 800106c:	2100      	movs	r1, #0
 800106e:	2078      	movs	r0, #120	; 0x78
 8001070:	f000 fb28 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001074:	22d9      	movs	r2, #217	; 0xd9
 8001076:	2100      	movs	r1, #0
 8001078:	2078      	movs	r0, #120	; 0x78
 800107a:	f000 fb23 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800107e:	2222      	movs	r2, #34	; 0x22
 8001080:	2100      	movs	r1, #0
 8001082:	2078      	movs	r0, #120	; 0x78
 8001084:	f000 fb1e 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001088:	22da      	movs	r2, #218	; 0xda
 800108a:	2100      	movs	r1, #0
 800108c:	2078      	movs	r0, #120	; 0x78
 800108e:	f000 fb19 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001092:	2212      	movs	r2, #18
 8001094:	2100      	movs	r1, #0
 8001096:	2078      	movs	r0, #120	; 0x78
 8001098:	f000 fb14 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800109c:	22db      	movs	r2, #219	; 0xdb
 800109e:	2100      	movs	r1, #0
 80010a0:	2078      	movs	r0, #120	; 0x78
 80010a2:	f000 fb0f 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010a6:	2220      	movs	r2, #32
 80010a8:	2100      	movs	r1, #0
 80010aa:	2078      	movs	r0, #120	; 0x78
 80010ac:	f000 fb0a 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010b0:	228d      	movs	r2, #141	; 0x8d
 80010b2:	2100      	movs	r1, #0
 80010b4:	2078      	movs	r0, #120	; 0x78
 80010b6:	f000 fb05 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010ba:	2214      	movs	r2, #20
 80010bc:	2100      	movs	r1, #0
 80010be:	2078      	movs	r0, #120	; 0x78
 80010c0:	f000 fb00 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010c4:	22af      	movs	r2, #175	; 0xaf
 80010c6:	2100      	movs	r1, #0
 80010c8:	2078      	movs	r0, #120	; 0x78
 80010ca:	f000 fafb 	bl	80016c4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010ce:	222e      	movs	r2, #46	; 0x2e
 80010d0:	2100      	movs	r1, #0
 80010d2:	2078      	movs	r0, #120	; 0x78
 80010d4:	f000 faf6 	bl	80016c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 f843 	bl	8001164 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80010de:	f000 f813 	bl	8001108 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <SSD1306_Init+0x184>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SSD1306_Init+0x184>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SSD1306_Init+0x184>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80010f4:	2301      	movs	r3, #1
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000e4 	.word	0x200000e4
 8001104:	20000548 	.word	0x20000548

08001108 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e01d      	b.n	8001150 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	3b50      	subs	r3, #80	; 0x50
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	2100      	movs	r1, #0
 800111e:	2078      	movs	r0, #120	; 0x78
 8001120:	f000 fad0 	bl	80016c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2078      	movs	r0, #120	; 0x78
 800112a:	f000 facb 	bl	80016c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800112e:	2210      	movs	r2, #16
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	; 0x78
 8001134:	f000 fac6 	bl	80016c4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	01db      	lsls	r3, r3, #7
 800113c:	4a08      	ldr	r2, [pc, #32]	; (8001160 <SSD1306_UpdateScreen+0x58>)
 800113e:	441a      	add	r2, r3
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	2078      	movs	r0, #120	; 0x78
 8001146:	f000 fa57 	bl	80015f8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3301      	adds	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b07      	cmp	r3, #7
 8001154:	d9de      	bls.n	8001114 <SSD1306_UpdateScreen+0xc>
	}
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000148 	.word	0x20000148

08001164 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <SSD1306_Fill+0x14>
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <SSD1306_Fill+0x16>
 8001178:	23ff      	movs	r3, #255	; 0xff
 800117a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117e:	4619      	mov	r1, r3
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <SSD1306_Fill+0x2c>)
 8001182:	f006 f833 	bl	80071ec <memset>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000148 	.word	0x20000148

08001194 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	460b      	mov	r3, r1
 80011a0:	80bb      	strh	r3, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	70fb      	strb	r3, [r7, #3]
	if (
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	2b7f      	cmp	r3, #127	; 0x7f
 80011aa:	d848      	bhi.n	800123e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011ac:	88bb      	ldrh	r3, [r7, #4]
 80011ae:	2b3f      	cmp	r3, #63	; 0x3f
 80011b0:	d845      	bhi.n	800123e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <SSD1306_DrawPixel+0xb4>)
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d11a      	bne.n	8001204 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011ce:	88fa      	ldrh	r2, [r7, #6]
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	08db      	lsrs	r3, r3, #3
 80011d4:	b298      	uxth	r0, r3
 80011d6:	4603      	mov	r3, r0
 80011d8:	01db      	lsls	r3, r3, #7
 80011da:	4413      	add	r3, r2
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <SSD1306_DrawPixel+0xb8>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	b25a      	sxtb	r2, r3
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b259      	sxtb	r1, r3
 80011f4:	88fa      	ldrh	r2, [r7, #6]
 80011f6:	4603      	mov	r3, r0
 80011f8:	01db      	lsls	r3, r3, #7
 80011fa:	4413      	add	r3, r2
 80011fc:	b2c9      	uxtb	r1, r1
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <SSD1306_DrawPixel+0xb8>)
 8001200:	54d1      	strb	r1, [r2, r3]
 8001202:	e01d      	b.n	8001240 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	88bb      	ldrh	r3, [r7, #4]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	b298      	uxth	r0, r3
 800120c:	4603      	mov	r3, r0
 800120e:	01db      	lsls	r3, r3, #7
 8001210:	4413      	add	r3, r2
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <SSD1306_DrawPixel+0xb8>)
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	b25a      	sxtb	r2, r3
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	b25b      	sxtb	r3, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	b25b      	sxtb	r3, r3
 800122a:	4013      	ands	r3, r2
 800122c:	b259      	sxtb	r1, r3
 800122e:	88fa      	ldrh	r2, [r7, #6]
 8001230:	4603      	mov	r3, r0
 8001232:	01db      	lsls	r3, r3, #7
 8001234:	4413      	add	r3, r2
 8001236:	b2c9      	uxtb	r1, r1
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <SSD1306_DrawPixel+0xb8>)
 800123a:	54d1      	strb	r1, [r2, r3]
 800123c:	e000      	b.n	8001240 <SSD1306_DrawPixel+0xac>
		return;
 800123e:	bf00      	nop
	}
}
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20000548 	.word	0x20000548
 800124c:	20000148 	.word	0x20000148

08001250 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	80fb      	strh	r3, [r7, #6]
 800125c:	4613      	mov	r3, r2
 800125e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001260:	4a05      	ldr	r2, [pc, #20]	; (8001278 <SSD1306_GotoXY+0x28>)
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <SSD1306_GotoXY+0x28>)
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	8053      	strh	r3, [r2, #2]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000548 	.word	0x20000548

0800127c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	4613      	mov	r3, r2
 800128a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <SSD1306_Putc+0xfc>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
	if (
 8001298:	2b7f      	cmp	r3, #127	; 0x7f
 800129a:	dc07      	bgt.n	80012ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <SSD1306_Putc+0xfc>)
 800129e:	885b      	ldrh	r3, [r3, #2]
 80012a0:	461a      	mov	r2, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012a8:	2b3f      	cmp	r3, #63	; 0x3f
 80012aa:	dd01      	ble.n	80012b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e05e      	b.n	800136e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e04b      	b.n	800134e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	3b20      	subs	r3, #32
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	7849      	ldrb	r1, [r1, #1]
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	440b      	add	r3, r1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	e030      	b.n	800133c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d010      	beq.n	800130c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <SSD1306_Putc+0xfc>)
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b298      	uxth	r0, r3
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <SSD1306_Putc+0xfc>)
 80012f8:	885a      	ldrh	r2, [r3, #2]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	79ba      	ldrb	r2, [r7, #6]
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff ff45 	bl	8001194 <SSD1306_DrawPixel>
 800130a:	e014      	b.n	8001336 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <SSD1306_Putc+0xfc>)
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b298      	uxth	r0, r3
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <SSD1306_Putc+0xfc>)
 800131a:	885a      	ldrh	r2, [r3, #2]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b299      	uxth	r1, r3
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	f7ff ff2f 	bl	8001194 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	3301      	adds	r3, #1
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4293      	cmp	r3, r2
 8001346:	d3c8      	bcc.n	80012da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	785b      	ldrb	r3, [r3, #1]
 8001352:	461a      	mov	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4293      	cmp	r3, r2
 8001358:	d3ad      	bcc.n	80012b6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <SSD1306_Putc+0xfc>)
 800135c:	881a      	ldrh	r2, [r3, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	4413      	add	r3, r2
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <SSD1306_Putc+0xfc>)
 800136a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800136c:	79fb      	ldrb	r3, [r7, #7]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000548 	.word	0x20000548

0800137c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4613      	mov	r3, r2
 8001388:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800138a:	e012      	b.n	80013b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff71 	bl	800127c <SSD1306_Putc>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d002      	beq.n	80013ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	e008      	b.n	80013be <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1e8      	bne.n	800138c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80013c6:	b590      	push	{r4, r7, lr}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4604      	mov	r4, r0
 80013ce:	4608      	mov	r0, r1
 80013d0:	4611      	mov	r1, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	4623      	mov	r3, r4
 80013d6:	80fb      	strh	r3, [r7, #6]
 80013d8:	4603      	mov	r3, r0
 80013da:	80bb      	strh	r3, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
 80013e0:	4613      	mov	r3, r2
 80013e2:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2b7f      	cmp	r3, #127	; 0x7f
 80013e8:	d901      	bls.n	80013ee <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80013ea:	237f      	movs	r3, #127	; 0x7f
 80013ec:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	2b7f      	cmp	r3, #127	; 0x7f
 80013f2:	d901      	bls.n	80013f8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80013f4:	237f      	movs	r3, #127	; 0x7f
 80013f6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	2b3f      	cmp	r3, #63	; 0x3f
 80013fc:	d901      	bls.n	8001402 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80013fe:	233f      	movs	r3, #63	; 0x3f
 8001400:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001402:	883b      	ldrh	r3, [r7, #0]
 8001404:	2b3f      	cmp	r3, #63	; 0x3f
 8001406:	d901      	bls.n	800140c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001408:	233f      	movs	r3, #63	; 0x3f
 800140a:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800140c:	88fa      	ldrh	r2, [r7, #6]
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	429a      	cmp	r2, r3
 8001412:	d205      	bcs.n	8001420 <SSD1306_DrawLine+0x5a>
 8001414:	887a      	ldrh	r2, [r7, #2]
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b29b      	uxth	r3, r3
 800141c:	b21b      	sxth	r3, r3
 800141e:	e004      	b.n	800142a <SSD1306_DrawLine+0x64>
 8001420:	88fa      	ldrh	r2, [r7, #6]
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21b      	sxth	r3, r3
 800142a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800142c:	88ba      	ldrh	r2, [r7, #4]
 800142e:	883b      	ldrh	r3, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d205      	bcs.n	8001440 <SSD1306_DrawLine+0x7a>
 8001434:	883a      	ldrh	r2, [r7, #0]
 8001436:	88bb      	ldrh	r3, [r7, #4]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	b21b      	sxth	r3, r3
 800143e:	e004      	b.n	800144a <SSD1306_DrawLine+0x84>
 8001440:	88ba      	ldrh	r2, [r7, #4]
 8001442:	883b      	ldrh	r3, [r7, #0]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b29b      	uxth	r3, r3
 8001448:	b21b      	sxth	r3, r3
 800144a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	429a      	cmp	r2, r3
 8001452:	d201      	bcs.n	8001458 <SSD1306_DrawLine+0x92>
 8001454:	2301      	movs	r3, #1
 8001456:	e001      	b.n	800145c <SSD1306_DrawLine+0x96>
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	883b      	ldrh	r3, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d201      	bcs.n	800146a <SSD1306_DrawLine+0xa4>
 8001466:	2301      	movs	r3, #1
 8001468:	e001      	b.n	800146e <SSD1306_DrawLine+0xa8>
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001470:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001474:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	dd06      	ble.n	800148a <SSD1306_DrawLine+0xc4>
 800147c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001480:	0fda      	lsrs	r2, r3, #31
 8001482:	4413      	add	r3, r2
 8001484:	105b      	asrs	r3, r3, #1
 8001486:	b21b      	sxth	r3, r3
 8001488:	e006      	b.n	8001498 <SSD1306_DrawLine+0xd2>
 800148a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800148e:	0fda      	lsrs	r2, r3, #31
 8001490:	4413      	add	r3, r2
 8001492:	105b      	asrs	r3, r3, #1
 8001494:	425b      	negs	r3, r3
 8001496:	b21b      	sxth	r3, r3
 8001498:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800149a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d129      	bne.n	80014f6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80014a2:	883a      	ldrh	r2, [r7, #0]
 80014a4:	88bb      	ldrh	r3, [r7, #4]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d205      	bcs.n	80014b6 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80014aa:	883b      	ldrh	r3, [r7, #0]
 80014ac:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80014ae:	88bb      	ldrh	r3, [r7, #4]
 80014b0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80014b2:	893b      	ldrh	r3, [r7, #8]
 80014b4:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d205      	bcs.n	80014ca <SSD1306_DrawLine+0x104>
			tmp = x1;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80014c6:	893b      	ldrh	r3, [r7, #8]
 80014c8:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80014ca:	88bb      	ldrh	r3, [r7, #4]
 80014cc:	82bb      	strh	r3, [r7, #20]
 80014ce:	e00c      	b.n	80014ea <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80014d0:	8ab9      	ldrh	r1, [r7, #20]
 80014d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe5b 	bl	8001194 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80014de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	82bb      	strh	r3, [r7, #20]
 80014ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80014ee:	883b      	ldrh	r3, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dded      	ble.n	80014d0 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80014f4:	e05f      	b.n	80015b6 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80014f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d129      	bne.n	8001552 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80014fe:	883a      	ldrh	r2, [r7, #0]
 8001500:	88bb      	ldrh	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	d205      	bcs.n	8001512 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001506:	883b      	ldrh	r3, [r7, #0]
 8001508:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800150e:	893b      	ldrh	r3, [r7, #8]
 8001510:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	429a      	cmp	r2, r3
 8001518:	d205      	bcs.n	8001526 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001522:	893b      	ldrh	r3, [r7, #8]
 8001524:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	82bb      	strh	r3, [r7, #20]
 800152a:	e00c      	b.n	8001546 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 800152c:	8abb      	ldrh	r3, [r7, #20]
 800152e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001532:	88b9      	ldrh	r1, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fe2d 	bl	8001194 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800153a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	b29b      	uxth	r3, r3
 8001544:	82bb      	strh	r3, [r7, #20]
 8001546:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	429a      	cmp	r2, r3
 800154e:	dded      	ble.n	800152c <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001550:	e031      	b.n	80015b6 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001552:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001556:	88b9      	ldrh	r1, [r7, #4]
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fe1a 	bl	8001194 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001560:	88fa      	ldrh	r2, [r7, #6]
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	429a      	cmp	r2, r3
 8001566:	d103      	bne.n	8001570 <SSD1306_DrawLine+0x1aa>
 8001568:	88ba      	ldrh	r2, [r7, #4]
 800156a:	883b      	ldrh	r3, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d021      	beq.n	80015b4 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001574:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001578:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800157c:	425b      	negs	r3, r3
 800157e:	429a      	cmp	r2, r3
 8001580:	dd08      	ble.n	8001594 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001582:	8afa      	ldrh	r2, [r7, #22]
 8001584:	8a3b      	ldrh	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	b29b      	uxth	r3, r3
 800158a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800158c:	89fa      	ldrh	r2, [r7, #14]
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4413      	add	r3, r2
 8001592:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001594:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001598:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	dad8      	bge.n	8001552 <SSD1306_DrawLine+0x18c>
			err += dx;
 80015a0:	8afa      	ldrh	r2, [r7, #22]
 80015a2:	8a7b      	ldrh	r3, [r7, #18]
 80015a4:	4413      	add	r3, r2
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80015aa:	89ba      	ldrh	r2, [r7, #12]
 80015ac:	88bb      	ldrh	r3, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80015b2:	e7ce      	b.n	8001552 <SSD1306_DrawLine+0x18c>
			break;
 80015b4:	bf00      	nop
		} 
	}
}
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fdcf 	bl	8001164 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80015c6:	f7ff fd9f 	bl	8001108 <SSD1306_UpdateScreen>
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <ssd1306_I2C_Init+0x24>)
 80015d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015da:	e002      	b.n	80015e2 <ssd1306_I2C_Init+0x12>
		p--;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f9      	bne.n	80015dc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	0003d090 	.word	0x0003d090

080015f8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b0c7      	sub	sp, #284	; 0x11c
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4604      	mov	r4, r0
 8001600:	4608      	mov	r0, r1
 8001602:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001606:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800160a:	600a      	str	r2, [r1, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001612:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001616:	4622      	mov	r2, r4
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800161e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001622:	4602      	mov	r2, r0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800162a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800162e:	460a      	mov	r2, r1
 8001630:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800163a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800163e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800164c:	e015      	b.n	800167a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800164e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001652:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001656:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	441a      	add	r2, r3
 800165e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001662:	3301      	adds	r3, #1
 8001664:	7811      	ldrb	r1, [r2, #0]
 8001666:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800166a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800166e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001670:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001674:	3301      	adds	r3, #1
 8001676:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800167a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800167e:	b29b      	uxth	r3, r3
 8001680:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001684:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001688:	8812      	ldrh	r2, [r2, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d8df      	bhi.n	800164e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800168e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001692:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b299      	uxth	r1, r3
 800169a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800169e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f107 020c 	add.w	r2, r7, #12
 80016ac:	200a      	movs	r0, #10
 80016ae:	9000      	str	r0, [sp, #0]
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <ssd1306_I2C_WriteMulti+0xc8>)
 80016b2:	f001 fa03 	bl	8002abc <HAL_I2C_Master_Transmit>
}
 80016b6:	bf00      	nop
 80016b8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd90      	pop	{r4, r7, pc}
 80016c0:	200000e4 	.word	0x200000e4

080016c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	460b      	mov	r3, r1
 80016d0:	71bb      	strb	r3, [r7, #6]
 80016d2:	4613      	mov	r3, r2
 80016d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016da:	797b      	ldrb	r3, [r7, #5]
 80016dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	b299      	uxth	r1, r3
 80016e2:	f107 020c 	add.w	r2, r7, #12
 80016e6:	230a      	movs	r3, #10
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2302      	movs	r3, #2
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <ssd1306_I2C_Write+0x38>)
 80016ee:	f001 f9e5 	bl	8002abc <HAL_I2C_Master_Transmit>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000e4 	.word	0x200000e4

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_MspInit+0x68>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_MspInit+0x68>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_MspInit+0x68>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_MspInit+0x68>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_MspInit+0x68>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_MspInit+0x68>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	210f      	movs	r1, #15
 800173a:	f06f 0001 	mvn.w	r0, #1
 800173e:	f000 fe9a 	bl	8002476 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_MspInit+0x6c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_MspInit+0x6c>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000

08001770 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_ADC_MspInit+0x6c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d121      	bne.n	80017d4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_ADC_MspInit+0x70>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_ADC_MspInit+0x70>)
 8001796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_ADC_MspInit+0x70>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_ADC_MspInit+0x70>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_ADC_MspInit+0x70>)
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_ADC_MspInit+0x70>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80017c0:	230b      	movs	r3, #11
 80017c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c4:	2303      	movs	r3, #3
 80017c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_ADC_MspInit+0x74>)
 80017d0:	f000 fe7c 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40012400 	.word	0x40012400
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010800 	.word	0x40010800

080017e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_I2C_MspInit+0x70>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d123      	bne.n	8001850 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_I2C_MspInit+0x74>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_I2C_MspInit+0x74>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_I2C_MspInit+0x74>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001820:	23c0      	movs	r3, #192	; 0xc0
 8001822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001824:	2312      	movs	r3, #18
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	480b      	ldr	r0, [pc, #44]	; (8001860 <HAL_I2C_MspInit+0x78>)
 8001834:	f000 fe4a 	bl	80024cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_I2C_MspInit+0x74>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_I2C_MspInit+0x74>)
 800183e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001842:	61d3      	str	r3, [r2, #28]
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_I2C_MspInit+0x74>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40005400 	.word	0x40005400
 800185c:	40021000 	.word	0x40021000
 8001860:	40010c00 	.word	0x40010c00

08001864 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_InitTick+0xe8>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a33      	ldr	r2, [pc, #204]	; (800194c <HAL_InitTick+0xe8>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_InitTick+0xe8>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001892:	f107 0210 	add.w	r2, r7, #16
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f002 f985 	bl	8003bac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ac:	f002 f956 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 80018b0:	6378      	str	r0, [r7, #52]	; 0x34
 80018b2:	e004      	b.n	80018be <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018b4:	f002 f952 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 80018b8:	4603      	mov	r3, r0
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c0:	4a23      	ldr	r2, [pc, #140]	; (8001950 <HAL_InitTick+0xec>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0c9b      	lsrs	r3, r3, #18
 80018c8:	3b01      	subs	r3, #1
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_InitTick+0xf0>)
 80018ce:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_InitTick+0xf4>)
 80018d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_InitTick+0xf0>)
 80018d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80018da:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <HAL_InitTick+0xf0>)
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_InitTick+0xf0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_InitTick+0xf0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_InitTick+0xf0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80018f2:	4818      	ldr	r0, [pc, #96]	; (8001954 <HAL_InitTick+0xf0>)
 80018f4:	f002 fb14 	bl	8003f20 <HAL_TIM_Base_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001902:	2b00      	cmp	r3, #0
 8001904:	d11b      	bne.n	800193e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001906:	4813      	ldr	r0, [pc, #76]	; (8001954 <HAL_InitTick+0xf0>)
 8001908:	f002 fb62 	bl	8003fd0 <HAL_TIM_Base_Start_IT>
 800190c:	4603      	mov	r3, r0
 800190e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001916:	2b00      	cmp	r3, #0
 8001918:	d111      	bne.n	800193e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800191a:	201e      	movs	r0, #30
 800191c:	f000 fdc7 	bl	80024ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b0f      	cmp	r3, #15
 8001924:	d808      	bhi.n	8001938 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001926:	2200      	movs	r2, #0
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	201e      	movs	r0, #30
 800192c:	f000 fda3 	bl	8002476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <HAL_InitTick+0xf8>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e002      	b.n	800193e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800193e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001942:	4618      	mov	r0, r3
 8001944:	3738      	adds	r7, #56	; 0x38
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	431bde83 	.word	0x431bde83
 8001954:	20000550 	.word	0x20000550
 8001958:	40000800 	.word	0x40000800
 800195c:	20000010 	.word	0x20000010

08001960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <NMI_Handler+0x4>

08001966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <MemManage_Handler+0x4>

08001972 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler+0x4>

0800197e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM4_IRQHandler+0x10>)
 8001992:	f002 fb6f 	bl	8004074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000550 	.word	0x20000550

080019a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80019ac:	f7ff fff8 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480b      	ldr	r0, [pc, #44]	; (80019e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019b2:	490c      	ldr	r1, [pc, #48]	; (80019e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b4:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c8:	4c09      	ldr	r4, [pc, #36]	; (80019f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f005 fc11 	bl	80071fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019da:	f7fe ff31 	bl	8000840 <main>
  bx lr
 80019de:	4770      	bx	lr
  ldr r0, =_sdata
 80019e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80019e8:	08007c2c 	.word	0x08007c2c
  ldr r2, =_sbss
 80019ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80019f0:	20001ee4 	.word	0x20001ee4

080019f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f4:	e7fe      	b.n	80019f4 <ADC1_2_IRQHandler>
	...

080019f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_Init+0x28>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_Init+0x28>)
 8001a02:	f043 0310 	orr.w	r3, r3, #16
 8001a06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 fd29 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f7ff ff28 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fe74 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40022000 	.word	0x40022000

08001a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_IncTick+0x1c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_IncTick+0x20>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <HAL_IncTick+0x20>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000014 	.word	0x20000014
 8001a44:	20000598 	.word	0x20000598

08001a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_GetTick+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000598 	.word	0x20000598

08001a5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0be      	b.n	8001bfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fe68 	bl	8001770 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fbf1 	bl	8002288 <ADC_ConversionStop_Disable>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 8099 	bne.w	8001bea <HAL_ADC_Init+0x18e>
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 8095 	bne.w	8001bea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ac8:	f023 0302 	bic.w	r3, r3, #2
 8001acc:	f043 0202 	orr.w	r2, r3, #2
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001adc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7b1b      	ldrb	r3, [r3, #12]
 8001ae2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ae4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001af4:	d003      	beq.n	8001afe <HAL_ADC_Init+0xa2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <HAL_ADC_Init+0xa8>
 8001afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b02:	e000      	b.n	8001b06 <HAL_ADC_Init+0xaa>
 8001b04:	2300      	movs	r3, #0
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7d1b      	ldrb	r3, [r3, #20]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d119      	bne.n	8001b48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7b1b      	ldrb	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	035a      	lsls	r2, r3, #13
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e00b      	b.n	8001b48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f043 0201 	orr.w	r2, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_ADC_Init+0x1a8>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b78:	d003      	beq.n	8001b82 <HAL_ADC_Init+0x126>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d104      	bne.n	8001b8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	051b      	lsls	r3, r3, #20
 8001b8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_ADC_Init+0x1ac>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d10b      	bne.n	8001bc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f023 0303 	bic.w	r3, r3, #3
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bc6:	e018      	b.n	8001bfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f023 0312 	bic.w	r3, r3, #18
 8001bd0:	f043 0210 	orr.w	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001be8:	e007      	b.n	8001bfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	ffe1f7fd 	.word	0xffe1f7fd
 8001c08:	ff1f0efe 	.word	0xff1f0efe

08001c0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_Start+0x1a>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e098      	b.n	8001d58 <HAL_ADC_Start+0x14c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fad0 	bl	80021d4 <ADC_Enable>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 8087 	bne.w	8001d4e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a41      	ldr	r2, [pc, #260]	; (8001d60 <HAL_ADC_Start+0x154>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_Start+0x5e>
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_ADC_Start+0x158>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d026      	beq.n	8001cd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c94:	e01d      	b.n	8001cd2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a2f      	ldr	r2, [pc, #188]	; (8001d64 <HAL_ADC_Start+0x158>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d004      	beq.n	8001cb6 <HAL_ADC_Start+0xaa>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2b      	ldr	r2, [pc, #172]	; (8001d60 <HAL_ADC_Start+0x154>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10d      	bne.n	8001cd2 <HAL_ADC_Start+0xc6>
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_ADC_Start+0x158>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f023 0206 	bic.w	r2, r3, #6
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cea:	e002      	b.n	8001cf2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f06f 0202 	mvn.w	r2, #2
 8001d02:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d12:	d113      	bne.n	8001d3c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_ADC_Start+0x154>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_ADC_Start+0x158>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	e00c      	b.n	8001d56 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40012800 	.word	0x40012800
 8001d64:	40012400 	.word	0x40012400

08001d68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_Stop+0x1a>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e01a      	b.n	8001db8 <HAL_ADC_Stop+0x50>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa7c 	bl	8002288 <ADC_ConversionStop_Disable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dd6:	f7ff fe37 	bl	8001a48 <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	f043 0220 	orr.w	r2, r3, #32
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0d3      	b.n	8001faa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d131      	bne.n	8001e74 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d12a      	bne.n	8001e74 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e1e:	e021      	b.n	8001e64 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e26:	d01d      	beq.n	8001e64 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_ADC_PollForConversion+0x7e>
 8001e2e:	f7ff fe0b 	bl	8001a48 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d212      	bcs.n	8001e64 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10b      	bne.n	8001e64 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	f043 0204 	orr.w	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0a2      	b.n	8001faa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0d6      	beq.n	8001e20 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e72:	e070      	b.n	8001f56 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e74:	4b4f      	ldr	r3, [pc, #316]	; (8001fb4 <HAL_ADC_PollForConversion+0x1f4>)
 8001e76:	681c      	ldr	r4, [r3, #0]
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f001 ff9b 	bl	8003db4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_ADC_PollForConversion+0x1f8>)
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x104>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68d9      	ldr	r1, [r3, #12]
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_ADC_PollForConversion+0x1fc>)
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d111      	bne.n	8001ec4 <HAL_ADC_PollForConversion+0x104>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6919      	ldr	r1, [r3, #16]
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_ADC_PollForConversion+0x200>)
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d108      	bne.n	8001ec0 <HAL_ADC_PollForConversion+0x100>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68d9      	ldr	r1, [r3, #12]
 8001eb4:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_ADC_PollForConversion+0x204>)
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_PollForConversion+0x100>
 8001ebc:	2314      	movs	r3, #20
 8001ebe:	e020      	b.n	8001f02 <HAL_ADC_PollForConversion+0x142>
 8001ec0:	2329      	movs	r3, #41	; 0x29
 8001ec2:	e01e      	b.n	8001f02 <HAL_ADC_PollForConversion+0x142>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_ADC_PollForConversion+0x200>)
 8001ecc:	400b      	ands	r3, r1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_ADC_PollForConversion+0x120>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68d9      	ldr	r1, [r3, #12]
 8001ed8:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_ADC_PollForConversion+0x204>)
 8001eda:	400b      	ands	r3, r1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00d      	beq.n	8001efc <HAL_ADC_PollForConversion+0x13c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_ADC_PollForConversion+0x208>)
 8001ee8:	400b      	ands	r3, r1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x140>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68d9      	ldr	r1, [r3, #12]
 8001ef4:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_ADC_PollForConversion+0x208>)
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x140>
 8001efc:	2354      	movs	r3, #84	; 0x54
 8001efe:	e000      	b.n	8001f02 <HAL_ADC_PollForConversion+0x142>
 8001f00:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f08:	e021      	b.n	8001f4e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f10:	d01a      	beq.n	8001f48 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_ADC_PollForConversion+0x168>
 8001f18:	f7ff fd96 	bl	8001a48 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d20f      	bcs.n	8001f48 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d90b      	bls.n	8001f48 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e030      	b.n	8001faa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d8d9      	bhi.n	8001f0a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0212 	mvn.w	r2, #18
 8001f5e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f7a:	d115      	bne.n	8001fa8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	371c      	adds	r7, #28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	24924924 	.word	0x24924924
 8001fbc:	00924924 	.word	0x00924924
 8001fc0:	12492492 	.word	0x12492492
 8001fc4:	00492492 	.word	0x00492492
 8001fc8:	00249249 	.word	0x00249249

08001fcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x20>
 8002000:	2302      	movs	r3, #2
 8002002:	e0dc      	b.n	80021be <HAL_ADC_ConfigChannel+0x1da>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b06      	cmp	r3, #6
 8002012:	d81c      	bhi.n	800204e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b05      	subs	r3, #5
 8002026:	221f      	movs	r2, #31
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	4019      	ands	r1, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b05      	subs	r3, #5
 8002040:	fa00 f203 	lsl.w	r2, r0, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	635a      	str	r2, [r3, #52]	; 0x34
 800204c:	e03c      	b.n	80020c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d81c      	bhi.n	8002090 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b23      	subs	r3, #35	; 0x23
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	4019      	ands	r1, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	3b23      	subs	r3, #35	; 0x23
 8002082:	fa00 f203 	lsl.w	r2, r0, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
 800208e:	e01b      	b.n	80020c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b41      	subs	r3, #65	; 0x41
 80020a2:	221f      	movs	r2, #31
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	4019      	ands	r1, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b41      	subs	r3, #65	; 0x41
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d91c      	bls.n	800210a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	3b1e      	subs	r3, #30
 80020e2:	2207      	movs	r2, #7
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	4019      	ands	r1, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6898      	ldr	r0, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	3b1e      	subs	r3, #30
 80020fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	e019      	b.n	800213e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6919      	ldr	r1, [r3, #16]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	2207      	movs	r2, #7
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	4019      	ands	r1, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6898      	ldr	r0, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	fa00 f203 	lsl.w	r2, r0, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b10      	cmp	r3, #16
 8002144:	d003      	beq.n	800214e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800214a:	2b11      	cmp	r3, #17
 800214c:	d132      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1d      	ldr	r2, [pc, #116]	; (80021c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d125      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d126      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002174:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b10      	cmp	r3, #16
 800217c:	d11a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	0c9a      	lsrs	r2, r3, #18
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002194:	e002      	b.n	800219c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3b01      	subs	r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f9      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x1b2>
 80021a2:	e007      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f043 0220 	orr.w	r2, r3, #32
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	40012400 	.word	0x40012400
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	431bde83 	.word	0x431bde83

080021d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d040      	beq.n	8002274 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <ADC_Enable+0xac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <ADC_Enable+0xb0>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9b      	lsrs	r3, r3, #18
 800220e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002210:	e002      	b.n	8002218 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3b01      	subs	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f9      	bne.n	8002212 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800221e:	f7ff fc13 	bl	8001a48 <HAL_GetTick>
 8002222:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002224:	e01f      	b.n	8002266 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002226:	f7ff fc0f 	bl	8001a48 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d918      	bls.n	8002266 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d011      	beq.n	8002266 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	f043 0210 	orr.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e007      	b.n	8002276 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d1d8      	bne.n	8002226 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	2000000c 	.word	0x2000000c
 8002284:	431bde83 	.word	0x431bde83

08002288 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d12e      	bne.n	8002300 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022b2:	f7ff fbc9 	bl	8001a48 <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022b8:	e01b      	b.n	80022f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ba:	f7ff fbc5 	bl	8001a48 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d914      	bls.n	80022f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10d      	bne.n	80022f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f043 0210 	orr.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e007      	b.n	8002302 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d0dc      	beq.n	80022ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002328:	4013      	ands	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800233c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233e:	4a04      	ldr	r2, [pc, #16]	; (8002350 <__NVIC_SetPriorityGrouping+0x44>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	60d3      	str	r3, [r2, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <__NVIC_GetPriorityGrouping+0x18>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	f003 0307 	and.w	r3, r3, #7
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	2b00      	cmp	r3, #0
 8002380:	db0b      	blt.n	800239a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f003 021f 	and.w	r2, r3, #31
 8002388:	4906      	ldr	r1, [pc, #24]	; (80023a4 <__NVIC_EnableIRQ+0x34>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2001      	movs	r0, #1
 8002392:	fa00 f202 	lsl.w	r2, r0, r2
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff4f 	bl	800230c <__NVIC_SetPriorityGrouping>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff64 	bl	8002354 <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ffb2 	bl	80023fc <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff81 	bl	80023a8 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff57 	bl	8002370 <__NVIC_EnableIRQ>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b08b      	sub	sp, #44	; 0x2c
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	e169      	b.n	80027b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024e0:	2201      	movs	r2, #1
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8158 	bne.w	80027ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4a9a      	ldr	r2, [pc, #616]	; (800276c <HAL_GPIO_Init+0x2a0>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d05e      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002508:	4a98      	ldr	r2, [pc, #608]	; (800276c <HAL_GPIO_Init+0x2a0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d875      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800250e:	4a98      	ldr	r2, [pc, #608]	; (8002770 <HAL_GPIO_Init+0x2a4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d058      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002514:	4a96      	ldr	r2, [pc, #600]	; (8002770 <HAL_GPIO_Init+0x2a4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d86f      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800251a:	4a96      	ldr	r2, [pc, #600]	; (8002774 <HAL_GPIO_Init+0x2a8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d052      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002520:	4a94      	ldr	r2, [pc, #592]	; (8002774 <HAL_GPIO_Init+0x2a8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d869      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002526:	4a94      	ldr	r2, [pc, #592]	; (8002778 <HAL_GPIO_Init+0x2ac>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d04c      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 800252c:	4a92      	ldr	r2, [pc, #584]	; (8002778 <HAL_GPIO_Init+0x2ac>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d863      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002532:	4a92      	ldr	r2, [pc, #584]	; (800277c <HAL_GPIO_Init+0x2b0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d046      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
 8002538:	4a90      	ldr	r2, [pc, #576]	; (800277c <HAL_GPIO_Init+0x2b0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d85d      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 800253e:	2b12      	cmp	r3, #18
 8002540:	d82a      	bhi.n	8002598 <HAL_GPIO_Init+0xcc>
 8002542:	2b12      	cmp	r3, #18
 8002544:	d859      	bhi.n	80025fa <HAL_GPIO_Init+0x12e>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <HAL_GPIO_Init+0x80>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	080025c7 	.word	0x080025c7
 8002550:	080025a1 	.word	0x080025a1
 8002554:	080025b3 	.word	0x080025b3
 8002558:	080025f5 	.word	0x080025f5
 800255c:	080025fb 	.word	0x080025fb
 8002560:	080025fb 	.word	0x080025fb
 8002564:	080025fb 	.word	0x080025fb
 8002568:	080025fb 	.word	0x080025fb
 800256c:	080025fb 	.word	0x080025fb
 8002570:	080025fb 	.word	0x080025fb
 8002574:	080025fb 	.word	0x080025fb
 8002578:	080025fb 	.word	0x080025fb
 800257c:	080025fb 	.word	0x080025fb
 8002580:	080025fb 	.word	0x080025fb
 8002584:	080025fb 	.word	0x080025fb
 8002588:	080025fb 	.word	0x080025fb
 800258c:	080025fb 	.word	0x080025fb
 8002590:	080025a9 	.word	0x080025a9
 8002594:	080025bd 	.word	0x080025bd
 8002598:	4a79      	ldr	r2, [pc, #484]	; (8002780 <HAL_GPIO_Init+0x2b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800259e:	e02c      	b.n	80025fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e029      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	3304      	adds	r3, #4
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e024      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	3308      	adds	r3, #8
 80025b8:	623b      	str	r3, [r7, #32]
          break;
 80025ba:	e01f      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	330c      	adds	r3, #12
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	e01a      	b.n	80025fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ce:	2304      	movs	r3, #4
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e013      	b.n	80025fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025dc:	2308      	movs	r3, #8
 80025de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	611a      	str	r2, [r3, #16]
          break;
 80025e6:	e009      	b.n	80025fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e8:	2308      	movs	r3, #8
 80025ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	615a      	str	r2, [r3, #20]
          break;
 80025f2:	e003      	b.n	80025fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
          break;
 80025f8:	e000      	b.n	80025fc <HAL_GPIO_Init+0x130>
          break;
 80025fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2bff      	cmp	r3, #255	; 0xff
 8002600:	d801      	bhi.n	8002606 <HAL_GPIO_Init+0x13a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	e001      	b.n	800260a <HAL_GPIO_Init+0x13e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2bff      	cmp	r3, #255	; 0xff
 8002610:	d802      	bhi.n	8002618 <HAL_GPIO_Init+0x14c>
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	e002      	b.n	800261e <HAL_GPIO_Init+0x152>
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	3b08      	subs	r3, #8
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	210f      	movs	r1, #15
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	431a      	orrs	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80b1 	beq.w	80027ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a4c      	ldr	r2, [pc, #304]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002664:	4a48      	ldr	r2, [pc, #288]	; (8002788 <HAL_GPIO_Init+0x2bc>)
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	220f      	movs	r2, #15
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a40      	ldr	r2, [pc, #256]	; (800278c <HAL_GPIO_Init+0x2c0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d013      	beq.n	80026b8 <HAL_GPIO_Init+0x1ec>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <HAL_GPIO_Init+0x2c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00d      	beq.n	80026b4 <HAL_GPIO_Init+0x1e8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a3e      	ldr	r2, [pc, #248]	; (8002794 <HAL_GPIO_Init+0x2c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0x1e4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a3d      	ldr	r2, [pc, #244]	; (8002798 <HAL_GPIO_Init+0x2cc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_GPIO_Init+0x1e0>
 80026a8:	2303      	movs	r3, #3
 80026aa:	e006      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e004      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e002      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_GPIO_Init+0x1ee>
 80026b8:	2300      	movs	r3, #0
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	f002 0203 	and.w	r2, r2, #3
 80026c0:	0092      	lsls	r2, r2, #2
 80026c2:	4093      	lsls	r3, r2
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ca:	492f      	ldr	r1, [pc, #188]	; (8002788 <HAL_GPIO_Init+0x2bc>)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026e4:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	492c      	ldr	r1, [pc, #176]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	608b      	str	r3, [r1, #8]
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4928      	ldr	r1, [pc, #160]	; (800279c <HAL_GPIO_Init+0x2d0>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4922      	ldr	r1, [pc, #136]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	43db      	mvns	r3, r3
 8002722:	491e      	ldr	r1, [pc, #120]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002724:	4013      	ands	r3, r2
 8002726:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4918      	ldr	r1, [pc, #96]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	43db      	mvns	r3, r3
 800274a:	4914      	ldr	r1, [pc, #80]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800274c:	4013      	ands	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d021      	beq.n	80027a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_GPIO_Init+0x2d0>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	490e      	ldr	r1, [pc, #56]	; (800279c <HAL_GPIO_Init+0x2d0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
 8002768:	e021      	b.n	80027ae <HAL_GPIO_Init+0x2e2>
 800276a:	bf00      	nop
 800276c:	10320000 	.word	0x10320000
 8002770:	10310000 	.word	0x10310000
 8002774:	10220000 	.word	0x10220000
 8002778:	10210000 	.word	0x10210000
 800277c:	10120000 	.word	0x10120000
 8002780:	10110000 	.word	0x10110000
 8002784:	40021000 	.word	0x40021000
 8002788:	40010000 	.word	0x40010000
 800278c:	40010800 	.word	0x40010800
 8002790:	40010c00 	.word	0x40010c00
 8002794:	40011000 	.word	0x40011000
 8002798:	40011400 	.word	0x40011400
 800279c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	4909      	ldr	r1, [pc, #36]	; (80027d0 <HAL_GPIO_Init+0x304>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	3301      	adds	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	fa22 f303 	lsr.w	r3, r2, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f47f ae8e 	bne.w	80024e0 <HAL_GPIO_Init+0x14>
  }
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	372c      	adds	r7, #44	; 0x2c
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40010400 	.word	0x40010400

080027d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	807b      	strh	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002812:	787b      	ldrb	r3, [r7, #1]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002818:	887a      	ldrh	r2, [r7, #2]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800281e:	e003      	b.n	8002828 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	041a      	lsls	r2, r3, #16
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	611a      	str	r2, [r3, #16]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
	...

08002834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e12b      	b.n	8002a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe ffc4 	bl	80017e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2224      	movs	r2, #36	; 0x24
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002898:	f001 f960 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 800289c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4a81      	ldr	r2, [pc, #516]	; (8002aa8 <HAL_I2C_Init+0x274>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d807      	bhi.n	80028b8 <HAL_I2C_Init+0x84>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a80      	ldr	r2, [pc, #512]	; (8002aac <HAL_I2C_Init+0x278>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e006      	b.n	80028c6 <HAL_I2C_Init+0x92>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a7d      	ldr	r2, [pc, #500]	; (8002ab0 <HAL_I2C_Init+0x27c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf94      	ite	ls
 80028c0:	2301      	movls	r3, #1
 80028c2:	2300      	movhi	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0e7      	b.n	8002a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4a78      	ldr	r2, [pc, #480]	; (8002ab4 <HAL_I2C_Init+0x280>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0c9b      	lsrs	r3, r3, #18
 80028d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <HAL_I2C_Init+0x274>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d802      	bhi.n	8002908 <HAL_I2C_Init+0xd4>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3301      	adds	r3, #1
 8002906:	e009      	b.n	800291c <HAL_I2C_Init+0xe8>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <HAL_I2C_Init+0x284>)
 8002914:	fba2 2303 	umull	r2, r3, r2, r3
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	3301      	adds	r3, #1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800292e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	495c      	ldr	r1, [pc, #368]	; (8002aa8 <HAL_I2C_Init+0x274>)
 8002938:	428b      	cmp	r3, r1
 800293a:	d819      	bhi.n	8002970 <HAL_I2C_Init+0x13c>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1e59      	subs	r1, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fbb1 f3f3 	udiv	r3, r1, r3
 800294a:	1c59      	adds	r1, r3, #1
 800294c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002950:	400b      	ands	r3, r1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_I2C_Init+0x138>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e59      	subs	r1, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fbb1 f3f3 	udiv	r3, r1, r3
 8002964:	3301      	adds	r3, #1
 8002966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296a:	e051      	b.n	8002a10 <HAL_I2C_Init+0x1dc>
 800296c:	2304      	movs	r3, #4
 800296e:	e04f      	b.n	8002a10 <HAL_I2C_Init+0x1dc>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d111      	bne.n	800299c <HAL_I2C_Init+0x168>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e012      	b.n	80029c2 <HAL_I2C_Init+0x18e>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	0099      	lsls	r1, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x196>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e022      	b.n	8002a10 <HAL_I2C_Init+0x1dc>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10e      	bne.n	80029f0 <HAL_I2C_Init+0x1bc>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e58      	subs	r0, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	440b      	add	r3, r1
 80029e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ee:	e00f      	b.n	8002a10 <HAL_I2C_Init+0x1dc>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	0099      	lsls	r1, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	6809      	ldr	r1, [r1, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6911      	ldr	r1, [r2, #16]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	4311      	orrs	r1, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	000186a0 	.word	0x000186a0
 8002aac:	001e847f 	.word	0x001e847f
 8002ab0:	003d08ff 	.word	0x003d08ff
 8002ab4:	431bde83 	.word	0x431bde83
 8002ab8:	10624dd3 	.word	0x10624dd3

08002abc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	460b      	mov	r3, r1
 8002aca:	817b      	strh	r3, [r7, #10]
 8002acc:	4613      	mov	r3, r2
 8002ace:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7fe ffba 	bl	8001a48 <HAL_GetTick>
 8002ad4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	f040 80e0 	bne.w	8002ca4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2319      	movs	r3, #25
 8002aea:	2201      	movs	r2, #1
 8002aec:	4970      	ldr	r1, [pc, #448]	; (8002cb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fa92 	bl	8003018 <I2C_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0d3      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x50>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d007      	beq.n	8002b32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2221      	movs	r2, #33	; 0x21
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	893a      	ldrh	r2, [r7, #8]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f9ca 	bl	8002f14 <I2C_MasterRequestWrite>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e08d      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ba0:	e066      	b.n	8002c70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fb50 	bl	800324c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06b      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d11b      	bne.n	8002c44 <HAL_I2C_Master_Transmit+0x188>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d017      	beq.n	8002c44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	6a39      	ldr	r1, [r7, #32]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fb47 	bl	80032dc <I2C_WaitOnBTFFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d107      	bne.n	8002c6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e01a      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d194      	bne.n	8002ba2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	00100002 	.word	0x00100002
 8002cb4:	ffff0000 	.word	0xffff0000

08002cb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7fe febe 	bl	8001a48 <HAL_GetTick>
 8002ccc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 8111 	bne.w	8002f02 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2319      	movs	r3, #25
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4988      	ldr	r1, [pc, #544]	; (8002f0c <HAL_I2C_IsDeviceReady+0x254>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f994 	bl	8003018 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e104      	b.n	8002f04 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_IsDeviceReady+0x50>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0fd      	b.n	8002f04 <HAL_I2C_IsDeviceReady+0x24c>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2224      	movs	r2, #36	; 0x24
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a70      	ldr	r2, [pc, #448]	; (8002f10 <HAL_I2C_IsDeviceReady+0x258>)
 8002d50:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d60:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f952 	bl	8003018 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d88:	d103      	bne.n	8002d92 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0b6      	b.n	8002f04 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002da4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fe4f 	bl	8001a48 <HAL_GetTick>
 8002daa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dda:	e025      	b.n	8002e28 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ddc:	f7fe fe34 	bl	8001a48 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d302      	bcc.n	8002df2 <HAL_I2C_IsDeviceReady+0x13a>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	22a0      	movs	r2, #160	; 0xa0
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2ba0      	cmp	r3, #160	; 0xa0
 8002e32:	d005      	beq.n	8002e40 <HAL_I2C_IsDeviceReady+0x188>
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d102      	bne.n	8002e40 <HAL_I2C_IsDeviceReady+0x188>
 8002e3a:	7dbb      	ldrb	r3, [r7, #22]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0cd      	beq.n	8002ddc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d129      	bne.n	8002eaa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e64:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2319      	movs	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	4921      	ldr	r1, [pc, #132]	; (8002f0c <HAL_I2C_IsDeviceReady+0x254>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f8c6 	bl	8003018 <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e036      	b.n	8002f04 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e02c      	b.n	8002f04 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2319      	movs	r3, #25
 8002eca:	2201      	movs	r2, #1
 8002ecc:	490f      	ldr	r1, [pc, #60]	; (8002f0c <HAL_I2C_IsDeviceReady+0x254>)
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f8a2 	bl	8003018 <I2C_WaitOnFlagUntilTimeout>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e012      	b.n	8002f04 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	f4ff af32 	bcc.w	8002d52 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
  }
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	00100002 	.word	0x00100002
 8002f10:	ffff0000 	.word	0xffff0000

08002f14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	460b      	mov	r3, r1
 8002f22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d006      	beq.n	8002f3e <I2C_MasterRequestWrite+0x2a>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d003      	beq.n	8002f3e <I2C_MasterRequestWrite+0x2a>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f3c:	d108      	bne.n	8002f50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e00b      	b.n	8002f68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	2b12      	cmp	r3, #18
 8002f56:	d107      	bne.n	8002f68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f84f 	bl	8003018 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8e:	d103      	bne.n	8002f98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e035      	b.n	8003008 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa4:	d108      	bne.n	8002fb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa6:	897b      	ldrh	r3, [r7, #10]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb4:	611a      	str	r2, [r3, #16]
 8002fb6:	e01b      	b.n	8002ff0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fb8:	897b      	ldrh	r3, [r7, #10]
 8002fba:	11db      	asrs	r3, r3, #7
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f003 0306 	and.w	r3, r3, #6
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f063 030f 	orn	r3, r3, #15
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	490e      	ldr	r1, [pc, #56]	; (8003010 <I2C_MasterRequestWrite+0xfc>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f898 	bl	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e010      	b.n	8003008 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fe6:	897b      	ldrh	r3, [r7, #10]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4907      	ldr	r1, [pc, #28]	; (8003014 <I2C_MasterRequestWrite+0x100>)
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f888 	bl	800310c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	00010008 	.word	0x00010008
 8003014:	00010002 	.word	0x00010002

08003018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003028:	e048      	b.n	80030bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d044      	beq.n	80030bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7fe fd09 	bl	8001a48 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d139      	bne.n	80030bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10d      	bne.n	800306e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	43da      	mvns	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4013      	ands	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	e00c      	b.n	8003088 <I2C_WaitOnFlagUntilTimeout+0x70>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	429a      	cmp	r2, r3
 800308c:	d116      	bne.n	80030bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e023      	b.n	8003104 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d10d      	bne.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	43da      	mvns	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4013      	ands	r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	e00c      	b.n	80030fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	43da      	mvns	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d093      	beq.n	800302a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800311a:	e071      	b.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d123      	bne.n	8003174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003144:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e067      	b.n	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d041      	beq.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317c:	f7fe fc64 	bl	8001a48 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d136      	bne.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10c      	bne.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e00b      	b.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e021      	b.n	8003244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10c      	bne.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e00b      	b.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	bf14      	ite	ne
 8003236:	2301      	movne	r3, #1
 8003238:	2300      	moveq	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	f47f af6d 	bne.w	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003258:	e034      	b.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f886 	bl	800336c <I2C_IsAcknowledgeFailed>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e034      	b.n	80032d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d028      	beq.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7fe fbe9 	bl	8001a48 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d11d      	bne.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b80      	cmp	r3, #128	; 0x80
 8003294:	d016      	beq.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e007      	b.n	80032d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b80      	cmp	r3, #128	; 0x80
 80032d0:	d1c3      	bne.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e8:	e034      	b.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f83e 	bl	800336c <I2C_IsAcknowledgeFailed>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e034      	b.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d028      	beq.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7fe fba1 	bl	8001a48 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11d      	bne.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d016      	beq.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e007      	b.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b04      	cmp	r3, #4
 8003360:	d1c3      	bne.n	80032ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003382:	d11b      	bne.n	80033bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800338c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0204 	orr.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e272      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8087 	beq.w	80034f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e8:	4b92      	ldr	r3, [pc, #584]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d00c      	beq.n	800340e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033f4:	4b8f      	ldr	r3, [pc, #572]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d112      	bne.n	8003426 <HAL_RCC_OscConfig+0x5e>
 8003400:	4b8c      	ldr	r3, [pc, #560]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d10b      	bne.n	8003426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340e:	4b89      	ldr	r3, [pc, #548]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d06c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x12c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d168      	bne.n	80034f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e24c      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x76>
 8003430:	4b80      	ldr	r3, [pc, #512]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a7f      	ldr	r2, [pc, #508]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e02e      	b.n	800349c <HAL_RCC_OscConfig+0xd4>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x98>
 8003446:	4b7b      	ldr	r3, [pc, #492]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7a      	ldr	r2, [pc, #488]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 800344c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b78      	ldr	r3, [pc, #480]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a77      	ldr	r2, [pc, #476]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e01d      	b.n	800349c <HAL_RCC_OscConfig+0xd4>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0xbc>
 800346a:	4b72      	ldr	r3, [pc, #456]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a71      	ldr	r2, [pc, #452]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b6f      	ldr	r3, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e00b      	b.n	800349c <HAL_RCC_OscConfig+0xd4>
 8003484:	4b6b      	ldr	r3, [pc, #428]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a6a      	ldr	r2, [pc, #424]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 800348a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	4b68      	ldr	r3, [pc, #416]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a67      	ldr	r2, [pc, #412]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fad0 	bl	8001a48 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ac:	f7fe facc 	bl	8001a48 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e200      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b5d      	ldr	r3, [pc, #372]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0xe4>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fabc 	bl	8001a48 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fab8 	bl	8001a48 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e1ec      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	4b53      	ldr	r3, [pc, #332]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x10c>
 80034f2:	e000      	b.n	80034f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d063      	beq.n	80035ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003502:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b08      	cmp	r3, #8
 8003518:	d11c      	bne.n	8003554 <HAL_RCC_OscConfig+0x18c>
 800351a:	4b46      	ldr	r3, [pc, #280]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	4b43      	ldr	r3, [pc, #268]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_RCC_OscConfig+0x176>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e1c0      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353e:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4939      	ldr	r1, [pc, #228]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	e03a      	b.n	80035ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d020      	beq.n	800359e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800355c:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fe fa71 	bl	8001a48 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356a:	f7fe fa6d 	bl	8001a48 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e1a1      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	4b2d      	ldr	r3, [pc, #180]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4927      	ldr	r1, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]
 800359c:	e015      	b.n	80035ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_RCC_OscConfig+0x270>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fa50 	bl	8001a48 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ac:	f7fe fa4c 	bl	8001a48 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e180      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d03a      	beq.n	800364c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d019      	beq.n	8003612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035de:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_RCC_OscConfig+0x274>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e4:	f7fe fa30 	bl	8001a48 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ec:	f7fe fa2c 	bl	8001a48 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e160      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_RCC_OscConfig+0x26c>)
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800360a:	2001      	movs	r0, #1
 800360c:	f000 fafe 	bl	8003c0c <RCC_Delay>
 8003610:	e01c      	b.n	800364c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_RCC_OscConfig+0x274>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003618:	f7fe fa16 	bl	8001a48 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361e:	e00f      	b.n	8003640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003620:	f7fe fa12 	bl	8001a48 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d908      	bls.n	8003640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e146      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	42420000 	.word	0x42420000
 800363c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b92      	ldr	r3, [pc, #584]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e9      	bne.n	8003620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a6 	beq.w	80037a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10d      	bne.n	8003686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4a87      	ldr	r2, [pc, #540]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003674:	61d3      	str	r3, [r2, #28]
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b82      	ldr	r3, [pc, #520]	; (8003890 <HAL_RCC_OscConfig+0x4c8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d118      	bne.n	80036c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003692:	4b7f      	ldr	r3, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x4c8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7e      	ldr	r2, [pc, #504]	; (8003890 <HAL_RCC_OscConfig+0x4c8>)
 8003698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369e:	f7fe f9d3 	bl	8001a48 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a6:	f7fe f9cf 	bl	8001a48 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b64      	cmp	r3, #100	; 0x64
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e103      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	4b75      	ldr	r3, [pc, #468]	; (8003890 <HAL_RCC_OscConfig+0x4c8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <HAL_RCC_OscConfig+0x312>
 80036cc:	4b6f      	ldr	r3, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	6213      	str	r3, [r2, #32]
 80036d8:	e02d      	b.n	8003736 <HAL_RCC_OscConfig+0x36e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x334>
 80036e2:	4b6a      	ldr	r3, [pc, #424]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	4a69      	ldr	r2, [pc, #420]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6213      	str	r3, [r2, #32]
 80036ee:	4b67      	ldr	r3, [pc, #412]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a66      	ldr	r2, [pc, #408]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	6213      	str	r3, [r2, #32]
 80036fa:	e01c      	b.n	8003736 <HAL_RCC_OscConfig+0x36e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b05      	cmp	r3, #5
 8003702:	d10c      	bne.n	800371e <HAL_RCC_OscConfig+0x356>
 8003704:	4b61      	ldr	r3, [pc, #388]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4a60      	ldr	r2, [pc, #384]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	6213      	str	r3, [r2, #32]
 8003710:	4b5e      	ldr	r3, [pc, #376]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a5d      	ldr	r2, [pc, #372]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	e00b      	b.n	8003736 <HAL_RCC_OscConfig+0x36e>
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	4a5a      	ldr	r2, [pc, #360]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	6213      	str	r3, [r2, #32]
 800372a:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4a57      	ldr	r2, [pc, #348]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003730:	f023 0304 	bic.w	r3, r3, #4
 8003734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d015      	beq.n	800376a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7fe f983 	bl	8001a48 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fe f97f 	bl	8001a48 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0b1      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	4b4b      	ldr	r3, [pc, #300]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ee      	beq.n	8003746 <HAL_RCC_OscConfig+0x37e>
 8003768:	e014      	b.n	8003794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376a:	f7fe f96d 	bl	8001a48 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fe f969 	bl	8001a48 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003780:	4293      	cmp	r3, r2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e09b      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ee      	bne.n	8003772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d105      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379a:	4b3c      	ldr	r3, [pc, #240]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	4a3b      	ldr	r2, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8087 	beq.w	80038be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b0:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d061      	beq.n	8003880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d146      	bne.n	8003852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c4:	4b33      	ldr	r3, [pc, #204]	; (8003894 <HAL_RCC_OscConfig+0x4cc>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fe f93d 	bl	8001a48 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fe f939 	bl	8001a48 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e06d      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e4:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f8:	d108      	bne.n	800380c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4921      	ldr	r1, [pc, #132]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a19      	ldr	r1, [r3, #32]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	430b      	orrs	r3, r1
 800381e:	491b      	ldr	r1, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x4cc>)
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe f90d 	bl	8001a48 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003832:	f7fe f909 	bl	8001a48 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e03d      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x46a>
 8003850:	e035      	b.n	80038be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_OscConfig+0x4cc>)
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe f8f6 	bl	8001a48 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fe f8f2 	bl	8001a48 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e026      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003872:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCC_OscConfig+0x4c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x498>
 800387e:	e01e      	b.n	80038be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d107      	bne.n	8003898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e019      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
 8003894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_OscConfig+0x500>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000

080038cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0d0      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b6a      	ldr	r3, [pc, #424]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d910      	bls.n	8003910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b67      	ldr	r3, [pc, #412]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 0207 	bic.w	r2, r3, #7
 80038f6:	4965      	ldr	r1, [pc, #404]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b8      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800394a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	494d      	ldr	r1, [pc, #308]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d040      	beq.n	80039ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d115      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e073      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e06b      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4936      	ldr	r1, [pc, #216]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039bc:	f7fe f844 	bl	8001a48 <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fe f840 	bl	8001a48 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e053      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	4b2d      	ldr	r3, [pc, #180]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 020c 	and.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d1eb      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d210      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 0207 	bic.w	r2, r3, #7
 8003a02:	4922      	ldr	r1, [pc, #136]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e032      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4916      	ldr	r1, [pc, #88]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	490e      	ldr	r1, [pc, #56]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a5a:	f000 f821 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	490a      	ldr	r1, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1cc>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1d0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fef2 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40021000 	.word	0x40021000
 8003a94:	08007be4 	.word	0x08007be4
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	20000010 	.word	0x20000010

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8003ace:	e027      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ad2:	613b      	str	r3, [r7, #16]
      break;
 8003ad4:	e027      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	0c9b      	lsrs	r3, r3, #18
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ae0:	5cd3      	ldrb	r3, [r2, r3]
 8003ae2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d010      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	0c5b      	lsrs	r3, r3, #17
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	4a11      	ldr	r2, [pc, #68]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003afa:	5cd3      	ldrb	r3, [r2, r3]
 8003afc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b02:	fb03 f202 	mul.w	r2, r3, r2
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	e004      	b.n	8003b1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	613b      	str	r3, [r7, #16]
      break;
 8003b1e:	e002      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b22:	613b      	str	r3, [r7, #16]
      break;
 8003b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b26:	693b      	ldr	r3, [r7, #16]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	007a1200 	.word	0x007a1200
 8003b3c:	08007bfc 	.word	0x08007bfc
 8003b40:	08007c0c 	.word	0x08007c0c
 8003b44:	003d0900 	.word	0x003d0900

08003b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	2000000c 	.word	0x2000000c

08003b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b60:	f7ff fff2 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4903      	ldr	r1, [pc, #12]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08007bf4 	.word	0x08007bf4

08003b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b88:	f7ff ffde 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0adb      	lsrs	r3, r3, #11
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08007bf4 	.word	0x08007bf4

08003bac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	220f      	movs	r2, #15
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_GetClockConfig+0x58>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0203 	and.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_RCC_GetClockConfig+0x58>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_GetClockConfig+0x58>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCC_GetClockConfig+0x58>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	08db      	lsrs	r3, r3, #3
 8003be6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0207 	and.w	r2, r3, #7
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40022000 	.word	0x40022000

08003c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <RCC_Delay+0x34>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <RCC_Delay+0x38>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	0a5b      	lsrs	r3, r3, #9
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c28:	bf00      	nop
  }
  while (Delay --);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	60fa      	str	r2, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f9      	bne.n	8003c28 <RCC_Delay+0x1c>
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	2000000c 	.word	0x2000000c
 8003c44:	10624dd3 	.word	0x10624dd3

08003c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d07d      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c68:	4b4f      	ldr	r3, [pc, #316]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c74:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	61d3      	str	r3, [r2, #28]
 8003c80:	4b49      	ldr	r3, [pc, #292]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4b46      	ldr	r3, [pc, #280]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d118      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9c:	4b43      	ldr	r3, [pc, #268]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a42      	ldr	r2, [pc, #264]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca8:	f7fd fece 	bl	8001a48 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	e008      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb0:	f7fd feca 	bl	8001a48 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e06d      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cce:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d02e      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d027      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf6:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d02:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d014      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fd fe99 	bl	8001a48 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fd fe95 	bl	8001a48 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e036      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d30:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ee      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4917      	ldr	r1, [pc, #92]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	490b      	ldr	r1, [pc, #44]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4904      	ldr	r1, [pc, #16]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
 8003dac:	40007000 	.word	0x40007000
 8003db0:	42420440 	.word	0x42420440

08003db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	f200 808a 	bhi.w	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d045      	beq.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d075      	beq.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003dea:	e082      	b.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003dec:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003df2:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d07b      	beq.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	0c9b      	lsrs	r3, r3, #18
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	4a41      	ldr	r2, [pc, #260]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003e08:	5cd3      	ldrb	r3, [r2, r3]
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d015      	beq.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e16:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	0c5b      	lsrs	r3, r3, #17
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	4a3b      	ldr	r2, [pc, #236]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003e22:	5cd3      	ldrb	r3, [r2, r3]
 8003e24:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e30:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	fb02 f303 	mul.w	r3, r2, r3
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e004      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4a34      	ldr	r2, [pc, #208]	; (8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e58:	d102      	bne.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	61bb      	str	r3, [r7, #24]
      break;
 8003e5e:	e04a      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
      break;
 8003e6e:	e042      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e80:	d108      	bne.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	e01f      	b.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9e:	d109      	bne.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003eac:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ebe:	d11c      	bne.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d016      	beq.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003ecc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ed0:	61bb      	str	r3, [r7, #24]
      break;
 8003ed2:	e012      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ed4:	e011      	b.n	8003efa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ed6:	f7ff fe55 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	0b9b      	lsrs	r3, r3, #14
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	61bb      	str	r3, [r7, #24]
      break;
 8003ef0:	e004      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003efa:	bf00      	nop
    }
  }
  return (frequency);
 8003efc:	69bb      	ldr	r3, [r7, #24]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08007c10 	.word	0x08007c10
 8003f10:	08007c20 	.word	0x08007c20
 8003f14:	007a1200 	.word	0x007a1200
 8003f18:	003d0900 	.word	0x003d0900
 8003f1c:	aaaaaaab 	.word	0xaaaaaaab

08003f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e041      	b.n	8003fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f839 	bl	8003fbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f000 f9b4 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d001      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e03a      	b.n	800405e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a18      	ldr	r2, [pc, #96]	; (8004068 <HAL_TIM_Base_Start_IT+0x98>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00e      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x58>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d009      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x58>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_TIM_Base_Start_IT+0x9c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x58>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a13      	ldr	r2, [pc, #76]	; (8004070 <HAL_TIM_Base_Start_IT+0xa0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d111      	bne.n	800404c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b06      	cmp	r3, #6
 8004038:	d010      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0201 	orr.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404a:	e007      	b.n	800405c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800

08004074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b02      	cmp	r3, #2
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b02      	cmp	r3, #2
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0202 	mvn.w	r2, #2
 80040a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8ed 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8e0 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8ef 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d122      	bne.n	8004124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d11b      	bne.n	8004124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0204 	mvn.w	r2, #4
 80040f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f8c3 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8004110:	e005      	b.n	800411e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8b6 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8c5 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b08      	cmp	r3, #8
 8004130:	d122      	bne.n	8004178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b08      	cmp	r3, #8
 800413e:	d11b      	bne.n	8004178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0208 	mvn.w	r2, #8
 8004148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2204      	movs	r2, #4
 800414e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f899 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8004164:	e005      	b.n	8004172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f88c 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f89b 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b10      	cmp	r3, #16
 8004184:	d122      	bne.n	80041cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b10      	cmp	r3, #16
 8004192:	d11b      	bne.n	80041cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0210 	mvn.w	r2, #16
 800419c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f86f 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f862 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f871 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0201 	mvn.w	r2, #1
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fc fd58 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d10e      	bne.n	8004224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b80      	cmp	r3, #128	; 0x80
 8004212:	d107      	bne.n	8004224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800421c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8bf 	bl	80043a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b40      	cmp	r3, #64	; 0x40
 8004230:	d10e      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d107      	bne.n	8004250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f835 	bl	80042ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b20      	cmp	r3, #32
 800425c:	d10e      	bne.n	800427c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b20      	cmp	r3, #32
 800426a:	d107      	bne.n	800427c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0220 	mvn.w	r2, #32
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f88a 	bl	8004390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a29      	ldr	r2, [pc, #164]	; (8004384 <TIM_Base_SetConfig+0xb8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00b      	beq.n	80042fc <TIM_Base_SetConfig+0x30>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ea:	d007      	beq.n	80042fc <TIM_Base_SetConfig+0x30>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a26      	ldr	r2, [pc, #152]	; (8004388 <TIM_Base_SetConfig+0xbc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_Base_SetConfig+0x30>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a25      	ldr	r2, [pc, #148]	; (800438c <TIM_Base_SetConfig+0xc0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d108      	bne.n	800430e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <TIM_Base_SetConfig+0xb8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_Base_SetConfig+0x62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d007      	beq.n	800432e <TIM_Base_SetConfig+0x62>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a19      	ldr	r2, [pc, #100]	; (8004388 <TIM_Base_SetConfig+0xbc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_Base_SetConfig+0x62>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <TIM_Base_SetConfig+0xc0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d108      	bne.n	8004340 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a07      	ldr	r2, [pc, #28]	; (8004384 <TIM_Base_SetConfig+0xb8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d103      	bne.n	8004374 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	615a      	str	r2, [r3, #20]
}
 800437a:	bf00      	nop
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800

08004390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr

080043a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ba:	f3ef 8305 	mrs	r3, IPSR
 80043be:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ca:	607b      	str	r3, [r7, #4]
  return(result);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <osKernelInitialize+0x32>
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <osKernelInitialize+0x60>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d109      	bne.n	80043ee <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043da:	f3ef 8311 	mrs	r3, BASEPRI
 80043de:	603b      	str	r3, [r7, #0]
  return(result);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80043e6:	f06f 0305 	mvn.w	r3, #5
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e00c      	b.n	8004408 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <osKernelInitialize+0x60>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d105      	bne.n	8004402 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <osKernelInitialize+0x60>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e002      	b.n	8004408 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004408:	68fb      	ldr	r3, [r7, #12]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	2000059c 	.word	0x2000059c

08004418 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800441e:	f3ef 8305 	mrs	r3, IPSR
 8004422:	60bb      	str	r3, [r7, #8]
  return(result);
 8004424:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10f      	bne.n	800444a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442a:	f3ef 8310 	mrs	r3, PRIMASK
 800442e:	607b      	str	r3, [r7, #4]
  return(result);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <osKernelStart+0x32>
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <osKernelStart+0x64>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d109      	bne.n	8004452 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800443e:	f3ef 8311 	mrs	r3, BASEPRI
 8004442:	603b      	str	r3, [r7, #0]
  return(result);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <osKernelStart+0x3a>
    stat = osErrorISR;
 800444a:	f06f 0305 	mvn.w	r3, #5
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e00e      	b.n	8004470 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <osKernelStart+0x64>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d107      	bne.n	800446a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800445a:	4b08      	ldr	r3, [pc, #32]	; (800447c <osKernelStart+0x64>)
 800445c:	2202      	movs	r2, #2
 800445e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004460:	f001 fabe 	bl	80059e0 <vTaskStartScheduler>
      stat = osOK;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e002      	b.n	8004470 <osKernelStart+0x58>
    } else {
      stat = osError;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004470:	68fb      	ldr	r3, [r7, #12]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	2000059c 	.word	0x2000059c

08004480 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004480:	b580      	push	{r7, lr}
 8004482:	b092      	sub	sp, #72	; 0x48
 8004484:	af04      	add	r7, sp, #16
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004490:	f3ef 8305 	mrs	r3, IPSR
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8094 	bne.w	80045c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800449e:	f3ef 8310 	mrs	r3, PRIMASK
 80044a2:	623b      	str	r3, [r7, #32]
  return(result);
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 808d 	bne.w	80045c6 <osThreadNew+0x146>
 80044ac:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <osThreadNew+0x150>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d106      	bne.n	80044c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044b4:	f3ef 8311 	mrs	r3, BASEPRI
 80044b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 8082 	bne.w	80045c6 <osThreadNew+0x146>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d07e      	beq.n	80045c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80044cc:	2318      	movs	r3, #24
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80044d0:	2300      	movs	r3, #0
 80044d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80044d4:	f107 031b 	add.w	r3, r7, #27
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d045      	beq.n	8004572 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <osThreadNew+0x74>
        name = attr->name;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <osThreadNew+0x9a>
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	2b38      	cmp	r3, #56	; 0x38
 800450c:	d805      	bhi.n	800451a <osThreadNew+0x9a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <osThreadNew+0x9e>
        return (NULL);
 800451a:	2300      	movs	r3, #0
 800451c:	e054      	b.n	80045c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	089b      	lsrs	r3, r3, #2
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <osThreadNew+0xd4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b5b      	cmp	r3, #91	; 0x5b
 800453c:	d90a      	bls.n	8004554 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <osThreadNew+0xd4>
        mem = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
 8004552:	e010      	b.n	8004576 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <osThreadNew+0xf6>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d108      	bne.n	8004576 <osThreadNew+0xf6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <osThreadNew+0xf6>
          mem = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004570:	e001      	b.n	8004576 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2b01      	cmp	r3, #1
 800457a:	d110      	bne.n	800459e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004584:	9202      	str	r2, [sp, #8]
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004590:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f001 f80e 	bl	80055b4 <xTaskCreateStatic>
 8004598:	4603      	mov	r3, r0
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e013      	b.n	80045c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d110      	bne.n	80045c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	f107 0314 	add.w	r3, r7, #20
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f001 f858 	bl	800566c <xTaskCreate>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <osThreadNew+0x146>
          hTask = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045c6:	697b      	ldr	r3, [r7, #20]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3738      	adds	r7, #56	; 0x38
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	2000059c 	.word	0x2000059c

080045d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	; 0x30
 80045d8:	af02      	add	r7, sp, #8
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e4:	f3ef 8305 	mrs	r3, IPSR
 80045e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80045ea:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d16f      	bne.n	80046d0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f0:	f3ef 8310 	mrs	r3, PRIMASK
 80045f4:	617b      	str	r3, [r7, #20]
  return(result);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d169      	bne.n	80046d0 <osMessageQueueNew+0xfc>
 80045fc:	4b37      	ldr	r3, [pc, #220]	; (80046dc <osMessageQueueNew+0x108>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d105      	bne.n	8004610 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004604:	f3ef 8311 	mrs	r3, BASEPRI
 8004608:	613b      	str	r3, [r7, #16]
  return(result);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d15f      	bne.n	80046d0 <osMessageQueueNew+0xfc>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d05c      	beq.n	80046d0 <osMessageQueueNew+0xfc>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d059      	beq.n	80046d0 <osMessageQueueNew+0xfc>
    mem = -1;
 800461c:	f04f 33ff 	mov.w	r3, #4294967295
 8004620:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d029      	beq.n	800467c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d012      	beq.n	8004656 <osMessageQueueNew+0x82>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b4f      	cmp	r3, #79	; 0x4f
 8004636:	d90e      	bls.n	8004656 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <osMessageQueueNew+0x82>
        mem = 1;
 8004650:	2301      	movs	r3, #1
 8004652:	623b      	str	r3, [r7, #32]
 8004654:	e014      	b.n	8004680 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d110      	bne.n	8004680 <osMessageQueueNew+0xac>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10c      	bne.n	8004680 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <osMessageQueueNew+0xac>
          mem = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	623b      	str	r3, [r7, #32]
 800467a:	e001      	b.n	8004680 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d10b      	bne.n	800469e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2100      	movs	r1, #0
 8004690:	9100      	str	r1, [sp, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fa53 	bl	8004b40 <xQueueGenericCreateStatic>
 800469a:	6278      	str	r0, [r7, #36]	; 0x24
 800469c:	e008      	b.n	80046b0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80046a4:	2200      	movs	r2, #0
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fac0 	bl	8004c2e <xQueueGenericCreate>
 80046ae:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00c      	beq.n	80046d0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	e001      	b.n	80046c8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046cc:	f000 ff16 	bl	80054fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3728      	adds	r7, #40	; 0x28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	2000059c 	.word	0x2000059c

080046e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f8:	f3ef 8305 	mrs	r3, IPSR
 80046fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80046fe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004704:	f3ef 8310 	mrs	r3, PRIMASK
 8004708:	61bb      	str	r3, [r7, #24]
  return(result);
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <osMessageQueuePut+0x44>
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <osMessageQueuePut+0xe0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d12e      	bne.n	8004776 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004718:	f3ef 8311 	mrs	r3, BASEPRI
 800471c:	617b      	str	r3, [r7, #20]
  return(result);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d028      	beq.n	8004776 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <osMessageQueuePut+0x56>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <osMessageQueuePut+0x56>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004736:	f06f 0303 	mvn.w	r3, #3
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800473c:	e039      	b.n	80047b2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004742:	f107 0210 	add.w	r2, r7, #16
 8004746:	2300      	movs	r3, #0
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	6a38      	ldr	r0, [r7, #32]
 800474c:	f000 fbce 	bl	8004eec <xQueueGenericSendFromISR>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d003      	beq.n	800475e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004756:	f06f 0302 	mvn.w	r3, #2
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800475c:	e029      	b.n	80047b2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d026      	beq.n	80047b2 <osMessageQueuePut+0xd2>
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <osMessageQueuePut+0xe4>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004774:	e01d      	b.n	80047b2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <osMessageQueuePut+0xa2>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004782:	f06f 0303 	mvn.w	r3, #3
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	e014      	b.n	80047b4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800478a:	2300      	movs	r3, #0
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	6a38      	ldr	r0, [r7, #32]
 8004792:	f000 faad 	bl	8004cf0 <xQueueGenericSend>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d00b      	beq.n	80047b4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80047a2:	f06f 0301 	mvn.w	r3, #1
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e004      	b.n	80047b4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80047aa:	f06f 0302 	mvn.w	r3, #2
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
 80047b0:	e000      	b.n	80047b4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80047b2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	2000059c 	.word	0x2000059c
 80047c4:	e000ed04 	.word	0xe000ed04

080047c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047de:	f3ef 8305 	mrs	r3, IPSR
 80047e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80047e4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ea:	f3ef 8310 	mrs	r3, PRIMASK
 80047ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <osMessageQueueGet+0x42>
 80047f6:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <osMessageQueueGet+0xdc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d12e      	bne.n	800485c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004802:	617b      	str	r3, [r7, #20]
  return(result);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d028      	beq.n	800485c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <osMessageQueueGet+0x54>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <osMessageQueueGet+0x54>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800481c:	f06f 0303 	mvn.w	r3, #3
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004822:	e038      	b.n	8004896 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004828:	f107 0310 	add.w	r3, r7, #16
 800482c:	461a      	mov	r2, r3
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	6a38      	ldr	r0, [r7, #32]
 8004832:	f000 fcd3 	bl	80051dc <xQueueReceiveFromISR>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d003      	beq.n	8004844 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800483c:	f06f 0302 	mvn.w	r3, #2
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004842:	e028      	b.n	8004896 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d025      	beq.n	8004896 <osMessageQueueGet+0xce>
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <osMessageQueueGet+0xe0>)
 800484c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800485a:	e01c      	b.n	8004896 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <osMessageQueueGet+0xa0>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d103      	bne.n	8004870 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004868:	f06f 0303 	mvn.w	r3, #3
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
 800486e:	e013      	b.n	8004898 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	6a38      	ldr	r0, [r7, #32]
 8004876:	f000 fbd1 	bl	800501c <xQueueReceive>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d00b      	beq.n	8004898 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004886:	f06f 0301 	mvn.w	r3, #1
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	e004      	b.n	8004898 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800488e:	f06f 0302 	mvn.w	r3, #2
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
 8004894:	e000      	b.n	8004898 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004896:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800489a:	4618      	mov	r0, r3
 800489c:	3728      	adds	r7, #40	; 0x28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	2000059c 	.word	0x2000059c
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a06      	ldr	r2, [pc, #24]	; (80048d4 <vApplicationGetIdleTaskMemory+0x28>)
 80048bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a05      	ldr	r2, [pc, #20]	; (80048d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80048c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2280      	movs	r2, #128	; 0x80
 80048c8:	601a      	str	r2, [r3, #0]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	200005a0 	.word	0x200005a0
 80048d8:	200005fc 	.word	0x200005fc

080048dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a07      	ldr	r2, [pc, #28]	; (8004908 <vApplicationGetTimerTaskMemory+0x2c>)
 80048ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4a06      	ldr	r2, [pc, #24]	; (800490c <vApplicationGetTimerTaskMemory+0x30>)
 80048f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048fa:	601a      	str	r2, [r3, #0]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	200007fc 	.word	0x200007fc
 800490c:	20000858 	.word	0x20000858

08004910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f103 0208 	add.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f04f 32ff 	mov.w	r2, #4294967295
 8004928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f103 0208 	add.w	r2, r3, #8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f103 0208 	add.w	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	601a      	str	r2, [r3, #0]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d103      	bne.n	80049cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e00c      	b.n	80049e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3308      	adds	r3, #8
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e002      	b.n	80049da <vListInsert+0x2e>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d2f6      	bcs.n	80049d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6892      	ldr	r2, [r2, #8]
 8004a32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6852      	ldr	r2, [r2, #4]
 8004a3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d103      	bne.n	8004a50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr
	...

08004a70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a96:	bf00      	nop
 8004a98:	e7fe      	b.n	8004a98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a9a:	f002 f8cf 	bl	8006c3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	68f9      	ldr	r1, [r7, #12]
 8004aa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	3b01      	subs	r3, #1
 8004acc:	68f9      	ldr	r1, [r7, #12]
 8004ace:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	22ff      	movs	r2, #255	; 0xff
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d114      	bne.n	8004b1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01a      	beq.n	8004b2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3310      	adds	r3, #16
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 f9f9 	bl	8005ef4 <xTaskRemoveFromEventList>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d012      	beq.n	8004b2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <xQueueGenericReset+0xcc>)
 8004b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	e009      	b.n	8004b2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3310      	adds	r3, #16
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fef6 	bl	8004910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff fef1 	bl	8004910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b2e:	f002 f8b5 	bl	8006c9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b32:	2301      	movs	r3, #1
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <xQueueGenericCreateStatic+0x52>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <xQueueGenericCreateStatic+0x56>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <xQueueGenericCreateStatic+0x58>
 8004b96:	2300      	movs	r3, #0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	623b      	str	r3, [r7, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <xQueueGenericCreateStatic+0x7e>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <xQueueGenericCreateStatic+0x82>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <xQueueGenericCreateStatic+0x84>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	61fb      	str	r3, [r7, #28]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bde:	2350      	movs	r3, #80	; 0x50
 8004be0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d00a      	beq.n	8004bfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	61bb      	str	r3, [r7, #24]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c10:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	68b9      	ldr	r1, [r7, #8]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f843 	bl	8004caa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3730      	adds	r7, #48	; 0x30
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08a      	sub	sp, #40	; 0x28
 8004c32:	af02      	add	r7, sp, #8
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	613b      	str	r3, [r7, #16]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d102      	bne.n	8004c64 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	e004      	b.n	8004c6e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3350      	adds	r3, #80	; 0x50
 8004c72:	4618      	mov	r0, r3
 8004c74:	f002 f8e2 	bl	8006e3c <pvPortMalloc>
 8004c78:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00f      	beq.n	8004ca0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	3350      	adds	r3, #80	; 0x50
 8004c84:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c8e:	79fa      	ldrb	r2, [r7, #7]
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f805 	bl	8004caa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
	}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3720      	adds	r7, #32
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e002      	b.n	8004ccc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cd8:	2101      	movs	r1, #1
 8004cda:	69b8      	ldr	r0, [r7, #24]
 8004cdc:	f7ff fec8 	bl	8004a70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08e      	sub	sp, #56	; 0x38
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <xQueueGenericSend+0x32>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <xQueueGenericSend+0x40>
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <xQueueGenericSend+0x44>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <xQueueGenericSend+0x46>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <xQueueGenericSend+0x60>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d103      	bne.n	8004d5e <xQueueGenericSend+0x6e>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <xQueueGenericSend+0x72>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <xQueueGenericSend+0x74>
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueGenericSend+0x8e>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	623b      	str	r3, [r7, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d7e:	f001 fa7b 	bl	8006278 <xTaskGetSchedulerState>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <xQueueGenericSend+0x9e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <xQueueGenericSend+0xa2>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <xQueueGenericSend+0xa4>
 8004d92:	2300      	movs	r3, #0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <xQueueGenericSend+0xbe>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	61fb      	str	r3, [r7, #28]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dae:	f001 ff45 	bl	8006c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <xQueueGenericSend+0xd4>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d129      	bne.n	8004e18 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dca:	f000 fa87 	bl	80052dc <prvCopyDataToQueue>
 8004dce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	3324      	adds	r3, #36	; 0x24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 f889 	bl	8005ef4 <xTaskRemoveFromEventList>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d013      	beq.n	8004e10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004de8:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <xQueueGenericSend+0x1f8>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	e00a      	b.n	8004e10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e00:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <xQueueGenericSend+0x1f8>)
 8004e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e10:	f001 ff44 	bl	8006c9c <vPortExitCritical>
				return pdPASS;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e063      	b.n	8004ee0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e1e:	f001 ff3d 	bl	8006c9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e05c      	b.n	8004ee0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 f8c3 	bl	8005fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e3a:	f001 ff2f 	bl	8006c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e3e:	f000 fe35 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e42:	f001 fefb 	bl	8006c3c <vPortEnterCritical>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e4c:	b25b      	sxtb	r3, r3
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d103      	bne.n	8004e5c <xQueueGenericSend+0x16c>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e62:	b25b      	sxtb	r3, r3
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d103      	bne.n	8004e72 <xQueueGenericSend+0x182>
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e72:	f001 ff13 	bl	8006c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e76:	1d3a      	adds	r2, r7, #4
 8004e78:	f107 0314 	add.w	r3, r7, #20
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 f8b2 	bl	8005fe8 <xTaskCheckForTimeOut>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d124      	bne.n	8004ed4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8c:	f000 fb1e 	bl	80054cc <prvIsQueueFull>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	3310      	adds	r3, #16
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ffd8 	bl	8005e54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea6:	f000 faa9 	bl	80053fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004eaa:	f000 fe0d 	bl	8005ac8 <xTaskResumeAll>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f47f af7c 	bne.w	8004dae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <xQueueGenericSend+0x1f8>)
 8004eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	e772      	b.n	8004dae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eca:	f000 fa97 	bl	80053fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ece:	f000 fdfb 	bl	8005ac8 <xTaskResumeAll>
 8004ed2:	e76c      	b.n	8004dae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed6:	f000 fa91 	bl	80053fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eda:	f000 fdf5 	bl	8005ac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ede:	2300      	movs	r3, #0
		}
	}
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3738      	adds	r7, #56	; 0x38
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	; 0x38
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d103      	bne.n	8004f28 <xQueueGenericSendFromISR+0x3c>
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <xQueueGenericSendFromISR+0x40>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <xQueueGenericSendFromISR+0x42>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	623b      	str	r3, [r7, #32]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d103      	bne.n	8004f56 <xQueueGenericSendFromISR+0x6a>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <xQueueGenericSendFromISR+0x6e>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <xQueueGenericSendFromISR+0x70>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	61fb      	str	r3, [r7, #28]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f76:	f001 ff23 	bl	8006dc0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	61ba      	str	r2, [r7, #24]
 8004f90:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f92:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <xQueueGenericSendFromISR+0xbc>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d12c      	bne.n	8005002 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fb8:	f000 f990 	bl	80052dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fbc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d112      	bne.n	8004fec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d016      	beq.n	8004ffc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	3324      	adds	r3, #36	; 0x24
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 ff8e 	bl	8005ef4 <xTaskRemoveFromEventList>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00e      	beq.n	8004ffc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e007      	b.n	8004ffc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	b25a      	sxtb	r2, r3
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005000:	e001      	b.n	8005006 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005002:	2300      	movs	r3, #0
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005010:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005014:	4618      	mov	r0, r3
 8005016:	3738      	adds	r7, #56	; 0x38
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08c      	sub	sp, #48	; 0x30
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005028:	2300      	movs	r3, #0
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <xQueueReceive+0x30>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	623b      	str	r3, [r7, #32]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <xQueueReceive+0x3e>
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <xQueueReceive+0x42>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueReceive+0x44>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueReceive+0x5e>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61fb      	str	r3, [r7, #28]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800507a:	f001 f8fd 	bl	8006278 <xTaskGetSchedulerState>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <xQueueReceive+0x6e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <xQueueReceive+0x72>
 800508a:	2301      	movs	r3, #1
 800508c:	e000      	b.n	8005090 <xQueueReceive+0x74>
 800508e:	2300      	movs	r3, #0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xQueueReceive+0x8e>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	61bb      	str	r3, [r7, #24]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80050aa:	f001 fdc7 	bl	8006c3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01f      	beq.n	80050fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050be:	f000 f977 	bl	80053b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	1e5a      	subs	r2, r3, #1
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00f      	beq.n	80050f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	3310      	adds	r3, #16
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 ff0c 	bl	8005ef4 <xTaskRemoveFromEventList>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050e2:	4b3d      	ldr	r3, [pc, #244]	; (80051d8 <xQueueReceive+0x1bc>)
 80050e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050f2:	f001 fdd3 	bl	8006c9c <vPortExitCritical>
				return pdPASS;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e069      	b.n	80051ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005100:	f001 fdcc 	bl	8006c9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005104:	2300      	movs	r3, #0
 8005106:	e062      	b.n	80051ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800510e:	f107 0310 	add.w	r3, r7, #16
 8005112:	4618      	mov	r0, r3
 8005114:	f000 ff52 	bl	8005fbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005118:	2301      	movs	r3, #1
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800511c:	f001 fdbe 	bl	8006c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005120:	f000 fcc4 	bl	8005aac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005124:	f001 fd8a 	bl	8006c3c <vPortEnterCritical>
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800512e:	b25b      	sxtb	r3, r3
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d103      	bne.n	800513e <xQueueReceive+0x122>
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005144:	b25b      	sxtb	r3, r3
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d103      	bne.n	8005154 <xQueueReceive+0x138>
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005154:	f001 fda2 	bl	8006c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005158:	1d3a      	adds	r2, r7, #4
 800515a:	f107 0310 	add.w	r3, r7, #16
 800515e:	4611      	mov	r1, r2
 8005160:	4618      	mov	r0, r3
 8005162:	f000 ff41 	bl	8005fe8 <xTaskCheckForTimeOut>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d123      	bne.n	80051b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800516c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800516e:	f000 f997 	bl	80054a0 <prvIsQueueEmpty>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d017      	beq.n	80051a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	3324      	adds	r3, #36	; 0x24
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fe67 	bl	8005e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005188:	f000 f938 	bl	80053fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800518c:	f000 fc9c 	bl	8005ac8 <xTaskResumeAll>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d189      	bne.n	80050aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <xQueueReceive+0x1bc>)
 8005198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	e780      	b.n	80050aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80051a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051aa:	f000 f927 	bl	80053fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ae:	f000 fc8b 	bl	8005ac8 <xTaskResumeAll>
 80051b2:	e77a      	b.n	80050aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80051b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051b6:	f000 f921 	bl	80053fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051ba:	f000 fc85 	bl	8005ac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c0:	f000 f96e 	bl	80054a0 <prvIsQueueEmpty>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f43f af6f 	beq.w	80050aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3730      	adds	r7, #48	; 0x30
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08e      	sub	sp, #56	; 0x38
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	623b      	str	r3, [r7, #32]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d103      	bne.n	8005216 <xQueueReceiveFromISR+0x3a>
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <xQueueReceiveFromISR+0x3e>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueReceiveFromISR+0x40>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61fb      	str	r3, [r7, #28]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005236:	f001 fdc3 	bl	8006dc0 <vPortValidateInterruptPriority>
	__asm volatile
 800523a:	f3ef 8211 	mrs	r2, BASEPRI
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	61ba      	str	r2, [r7, #24]
 8005250:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005252:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	2b00      	cmp	r3, #0
 8005260:	d02f      	beq.n	80052c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800526c:	68b9      	ldr	r1, [r7, #8]
 800526e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005270:	f000 f89e 	bl	80053b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	1e5a      	subs	r2, r3, #1
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800527c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d112      	bne.n	80052ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d016      	beq.n	80052bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	3310      	adds	r3, #16
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fe2e 	bl	8005ef4 <xTaskRemoveFromEventList>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00e      	beq.n	80052bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e007      	b.n	80052bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80052ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052b0:	3301      	adds	r3, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	b25a      	sxtb	r2, r3
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80052bc:	2301      	movs	r3, #1
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
 80052c0:	e001      	b.n	80052c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	f383 8811 	msr	BASEPRI, r3
}
 80052d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3738      	adds	r7, #56	; 0x38
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d14d      	bne.n	800539e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 ffd4 	bl	80062b4 <xTaskPriorityDisinherit>
 800530c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	e043      	b.n	800539e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d119      	bne.n	8005350 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6898      	ldr	r0, [r3, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	461a      	mov	r2, r3
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	f001 ff8c 	bl	8007244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	441a      	add	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d32b      	bcc.n	800539e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	609a      	str	r2, [r3, #8]
 800534e:	e026      	b.n	800539e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68d8      	ldr	r0, [r3, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	461a      	mov	r2, r3
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	f001 ff72 	bl	8007244 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	425b      	negs	r3, r3
 800536a:	441a      	add	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d207      	bcs.n	800538c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	425b      	negs	r3, r3
 8005386:	441a      	add	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d105      	bne.n	800539e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	3b01      	subs	r3, #1
 800539c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80053a6:	697b      	ldr	r3, [r7, #20]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d018      	beq.n	80053f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	441a      	add	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d303      	bcc.n	80053e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68d9      	ldr	r1, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	461a      	mov	r2, r3
 80053ee:	6838      	ldr	r0, [r7, #0]
 80053f0:	f001 ff28 	bl	8007244 <memcpy>
	}
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005404:	f001 fc1a 	bl	8006c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800540e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005410:	e011      	b.n	8005436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d012      	beq.n	8005440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3324      	adds	r3, #36	; 0x24
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fd68 	bl	8005ef4 <xTaskRemoveFromEventList>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800542a:	f000 fe3f 	bl	80060ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	3b01      	subs	r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800543a:	2b00      	cmp	r3, #0
 800543c:	dce9      	bgt.n	8005412 <prvUnlockQueue+0x16>
 800543e:	e000      	b.n	8005442 <prvUnlockQueue+0x46>
					break;
 8005440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	22ff      	movs	r2, #255	; 0xff
 8005446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800544a:	f001 fc27 	bl	8006c9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800544e:	f001 fbf5 	bl	8006c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800545a:	e011      	b.n	8005480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d012      	beq.n	800548a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3310      	adds	r3, #16
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fd43 	bl	8005ef4 <xTaskRemoveFromEventList>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005474:	f000 fe1a 	bl	80060ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	3b01      	subs	r3, #1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005484:	2b00      	cmp	r3, #0
 8005486:	dce9      	bgt.n	800545c <prvUnlockQueue+0x60>
 8005488:	e000      	b.n	800548c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800548a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	22ff      	movs	r2, #255	; 0xff
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005494:	f001 fc02 	bl	8006c9c <vPortExitCritical>
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054a8:	f001 fbc8 	bl	8006c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e001      	b.n	80054be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054be:	f001 fbed 	bl	8006c9c <vPortExitCritical>

	return xReturn;
 80054c2:	68fb      	ldr	r3, [r7, #12]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054d4:	f001 fbb2 	bl	8006c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d102      	bne.n	80054ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e001      	b.n	80054ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054ee:	f001 fbd5 	bl	8006c9c <vPortExitCritical>

	return xReturn;
 80054f2:	68fb      	ldr	r3, [r7, #12]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e014      	b.n	8005536 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800550c:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <vQueueAddToRegistry+0x4c>)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10b      	bne.n	8005530 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005518:	490b      	ldr	r1, [pc, #44]	; (8005548 <vQueueAddToRegistry+0x4c>)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005522:	4a09      	ldr	r2, [pc, #36]	; (8005548 <vQueueAddToRegistry+0x4c>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800552e:	e006      	b.n	800553e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b07      	cmp	r3, #7
 800553a:	d9e7      	bls.n	800550c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	20000c58 	.word	0x20000c58

0800554c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800555c:	f001 fb6e 	bl	8006c3c <vPortEnterCritical>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005566:	b25b      	sxtb	r3, r3
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d103      	bne.n	8005576 <vQueueWaitForMessageRestricted+0x2a>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800557c:	b25b      	sxtb	r3, r3
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d103      	bne.n	800558c <vQueueWaitForMessageRestricted+0x40>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800558c:	f001 fb86 	bl	8006c9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3324      	adds	r3, #36	; 0x24
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fc7b 	bl	8005e9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80055a6:	6978      	ldr	r0, [r7, #20]
 80055a8:	f7ff ff28 	bl	80053fc <prvUnlockQueue>
	}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08e      	sub	sp, #56	; 0x38
 80055b8:	af04      	add	r7, sp, #16
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xTaskCreateStatic+0x2a>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	623b      	str	r3, [r7, #32]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <xTaskCreateStatic+0x46>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	61fb      	str	r3, [r7, #28]
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055fa:	235c      	movs	r3, #92	; 0x5c
 80055fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b5c      	cmp	r3, #92	; 0x5c
 8005602:	d00a      	beq.n	800561a <xTaskCreateStatic+0x66>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	61bb      	str	r3, [r7, #24]
}
 8005616:	bf00      	nop
 8005618:	e7fe      	b.n	8005618 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01e      	beq.n	800565e <xTaskCreateStatic+0xaa>
 8005620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005622:	2b00      	cmp	r3, #0
 8005624:	d01b      	beq.n	800565e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005638:	2300      	movs	r3, #0
 800563a:	9303      	str	r3, [sp, #12]
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	9302      	str	r3, [sp, #8]
 8005640:	f107 0314 	add.w	r3, r7, #20
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f850 	bl	80056f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005658:	f000 f8d4 	bl	8005804 <prvAddNewTaskToReadyList>
 800565c:	e001      	b.n	8005662 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005662:	697b      	ldr	r3, [r7, #20]
	}
 8005664:	4618      	mov	r0, r3
 8005666:	3728      	adds	r7, #40	; 0x28
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08c      	sub	sp, #48	; 0x30
 8005670:	af04      	add	r7, sp, #16
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4618      	mov	r0, r3
 8005682:	f001 fbdb 	bl	8006e3c <pvPortMalloc>
 8005686:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00e      	beq.n	80056ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800568e:	205c      	movs	r0, #92	; 0x5c
 8005690:	f001 fbd4 	bl	8006e3c <pvPortMalloc>
 8005694:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
 80056a2:	e005      	b.n	80056b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056a4:	6978      	ldr	r0, [r7, #20]
 80056a6:	f001 fc8d 	bl	8006fc4 <vPortFree>
 80056aa:	e001      	b.n	80056b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d017      	beq.n	80056e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	2300      	movs	r3, #0
 80056c2:	9303      	str	r3, [sp, #12]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	9302      	str	r3, [sp, #8]
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f80e 	bl	80056f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056da:	69f8      	ldr	r0, [r7, #28]
 80056dc:	f000 f892 	bl	8005804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056e0:	2301      	movs	r3, #1
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e002      	b.n	80056ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056ec:	69bb      	ldr	r3, [r7, #24]
	}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b088      	sub	sp, #32
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	461a      	mov	r2, r3
 800570e:	21a5      	movs	r1, #165	; 0xa5
 8005710:	f001 fd6c 	bl	80071ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800571e:	3b01      	subs	r3, #1
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	f023 0307 	bic.w	r3, r3, #7
 800572c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <prvInitialiseNewTask+0x58>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	617b      	str	r3, [r7, #20]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e012      	b.n	800577a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	4413      	add	r3, r2
 800575a:	7819      	ldrb	r1, [r3, #0]
 800575c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	3334      	adds	r3, #52	; 0x34
 8005764:	460a      	mov	r2, r1
 8005766:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d006      	beq.n	8005782 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3301      	adds	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	2b0f      	cmp	r3, #15
 800577e:	d9e9      	bls.n	8005754 <prvInitialiseNewTask+0x5e>
 8005780:	e000      	b.n	8005784 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005782:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b37      	cmp	r3, #55	; 0x37
 8005790:	d901      	bls.n	8005796 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005792:	2337      	movs	r3, #55	; 0x37
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2200      	movs	r2, #0
 80057a6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	3304      	adds	r3, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff f8ce 	bl	800494e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	3318      	adds	r3, #24
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff f8c9 	bl	800494e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	2200      	movs	r2, #0
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	69b8      	ldr	r0, [r7, #24]
 80057e6:	f001 f939 	bl	8006a5c <pxPortInitialiseStack>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057fc:	bf00      	nop
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800580c:	f001 fa16 	bl	8006c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005810:	4b2d      	ldr	r3, [pc, #180]	; (80058c8 <prvAddNewTaskToReadyList+0xc4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <prvAddNewTaskToReadyList+0xc4>)
 8005818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800581a:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005822:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005828:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <prvAddNewTaskToReadyList+0xc4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d110      	bne.n	8005852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005830:	f000 fc60 	bl	80060f4 <prvInitialiseTaskLists>
 8005834:	e00d      	b.n	8005852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005836:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <prvAddNewTaskToReadyList+0xcc>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800583e:	4b23      	ldr	r3, [pc, #140]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	429a      	cmp	r2, r3
 800584a:	d802      	bhi.n	8005852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800584c:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005852:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <prvAddNewTaskToReadyList+0xd0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <prvAddNewTaskToReadyList+0xd0>)
 800585a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800585c:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <prvAddNewTaskToReadyList+0xd0>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <prvAddNewTaskToReadyList+0xd4>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	429a      	cmp	r2, r3
 800586e:	d903      	bls.n	8005878 <prvAddNewTaskToReadyList+0x74>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <prvAddNewTaskToReadyList+0xd4>)
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4a15      	ldr	r2, [pc, #84]	; (80058dc <prvAddNewTaskToReadyList+0xd8>)
 8005886:	441a      	add	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f7ff f869 	bl	8004966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005894:	f001 fa02 	bl	8006c9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005898:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <prvAddNewTaskToReadyList+0xcc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00e      	beq.n	80058be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <prvAddNewTaskToReadyList+0xc8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d207      	bcs.n	80058be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058ae:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <prvAddNewTaskToReadyList+0xdc>)
 80058b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	2000116c 	.word	0x2000116c
 80058cc:	20000c98 	.word	0x20000c98
 80058d0:	20001178 	.word	0x20001178
 80058d4:	20001188 	.word	0x20001188
 80058d8:	20001174 	.word	0x20001174
 80058dc:	20000c9c 	.word	0x20000c9c
 80058e0:	e000ed04 	.word	0xe000ed04

080058e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08a      	sub	sp, #40	; 0x28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <vTaskDelayUntil+0x2a>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	617b      	str	r3, [r7, #20]
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <vTaskDelayUntil+0x46>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	613b      	str	r3, [r7, #16]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800592a:	4b2a      	ldr	r3, [pc, #168]	; (80059d4 <vTaskDelayUntil+0xf0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <vTaskDelayUntil+0x64>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005948:	f000 f8b0 	bl	8005aac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800594c:	4b22      	ldr	r3, [pc, #136]	; (80059d8 <vTaskDelayUntil+0xf4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	4413      	add	r3, r2
 800595a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	429a      	cmp	r2, r3
 8005964:	d20b      	bcs.n	800597e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	429a      	cmp	r2, r3
 800596e:	d211      	bcs.n	8005994 <vTaskDelayUntil+0xb0>
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	429a      	cmp	r2, r3
 8005976:	d90d      	bls.n	8005994 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
 800597c:	e00a      	b.n	8005994 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	429a      	cmp	r2, r3
 8005986:	d303      	bcc.n	8005990 <vTaskDelayUntil+0xac>
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	429a      	cmp	r2, r3
 800598e:	d901      	bls.n	8005994 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005990:	2301      	movs	r3, #1
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d006      	beq.n	80059ae <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fcf1 	bl	8006390 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80059ae:	f000 f88b 	bl	8005ac8 <xTaskResumeAll>
 80059b2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d107      	bne.n	80059ca <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <vTaskDelayUntil+0xf8>)
 80059bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059ca:	bf00      	nop
 80059cc:	3728      	adds	r7, #40	; 0x28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20001194 	.word	0x20001194
 80059d8:	20001170 	.word	0x20001170
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059ee:	463a      	mov	r2, r7
 80059f0:	1d39      	adds	r1, r7, #4
 80059f2:	f107 0308 	add.w	r3, r7, #8
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe ff58 	bl	80048ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	9202      	str	r2, [sp, #8]
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	4921      	ldr	r1, [pc, #132]	; (8005a94 <vTaskStartScheduler+0xb4>)
 8005a10:	4821      	ldr	r0, [pc, #132]	; (8005a98 <vTaskStartScheduler+0xb8>)
 8005a12:	f7ff fdcf 	bl	80055b4 <xTaskCreateStatic>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <vTaskStartScheduler+0xbc>)
 8005a1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <vTaskStartScheduler+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a24:	2301      	movs	r3, #1
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	e001      	b.n	8005a2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d102      	bne.n	8005a3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a34:	f000 fd00 	bl	8006438 <xTimerCreateTimerTask>
 8005a38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d116      	bne.n	8005a6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a54:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <vTaskStartScheduler+0xc0>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <vTaskStartScheduler+0xc4>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <vTaskStartScheduler+0xc8>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a68:	f001 f876 	bl	8006b58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a6c:	e00e      	b.n	8005a8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d10a      	bne.n	8005a8c <vTaskStartScheduler+0xac>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	60fb      	str	r3, [r7, #12]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <vTaskStartScheduler+0xaa>
}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	080072c8 	.word	0x080072c8
 8005a98:	080060c5 	.word	0x080060c5
 8005a9c:	20001190 	.word	0x20001190
 8005aa0:	2000118c 	.word	0x2000118c
 8005aa4:	20001178 	.word	0x20001178
 8005aa8:	20001170 	.word	0x20001170

08005aac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <vTaskSuspendAll+0x18>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a03      	ldr	r2, [pc, #12]	; (8005ac4 <vTaskSuspendAll+0x18>)
 8005ab8:	6013      	str	r3, [r2, #0]
}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20001194 	.word	0x20001194

08005ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ad6:	4b42      	ldr	r3, [pc, #264]	; (8005be0 <xTaskResumeAll+0x118>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	603b      	str	r3, [r7, #0]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005af4:	f001 f8a2 	bl	8006c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005af8:	4b39      	ldr	r3, [pc, #228]	; (8005be0 <xTaskResumeAll+0x118>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a38      	ldr	r2, [pc, #224]	; (8005be0 <xTaskResumeAll+0x118>)
 8005b00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b02:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <xTaskResumeAll+0x118>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d162      	bne.n	8005bd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b0a:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <xTaskResumeAll+0x11c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d05e      	beq.n	8005bd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b12:	e02f      	b.n	8005b74 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <xTaskResumeAll+0x120>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3318      	adds	r3, #24
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe ff7b 	bl	8004a1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fe ff76 	bl	8004a1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b2d      	ldr	r3, [pc, #180]	; (8005bec <xTaskResumeAll+0x124>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <xTaskResumeAll+0x7c>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <xTaskResumeAll+0x124>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a27      	ldr	r2, [pc, #156]	; (8005bf0 <xTaskResumeAll+0x128>)
 8005b52:	441a      	add	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe ff03 	bl	8004966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	4b23      	ldr	r3, [pc, #140]	; (8005bf4 <xTaskResumeAll+0x12c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b6e:	4b22      	ldr	r3, [pc, #136]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b74:	4b1c      	ldr	r3, [pc, #112]	; (8005be8 <xTaskResumeAll+0x120>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1cb      	bne.n	8005b14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b82:	f000 fb55 	bl	8006230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <xTaskResumeAll+0x134>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d010      	beq.n	8005bb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b92:	f000 f845 	bl	8005c20 <xTaskIncrementTick>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b9c:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f1      	bne.n	8005b92 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <xTaskResumeAll+0x134>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <xTaskResumeAll+0x130>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <xTaskResumeAll+0x138>)
 8005bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bd0:	f001 f864 	bl	8006c9c <vPortExitCritical>

	return xAlreadyYielded;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20001194 	.word	0x20001194
 8005be4:	2000116c 	.word	0x2000116c
 8005be8:	2000112c 	.word	0x2000112c
 8005bec:	20001174 	.word	0x20001174
 8005bf0:	20000c9c 	.word	0x20000c9c
 8005bf4:	20000c98 	.word	0x20000c98
 8005bf8:	20001180 	.word	0x20001180
 8005bfc:	2000117c 	.word	0x2000117c
 8005c00:	e000ed04 	.word	0xe000ed04

08005c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c0a:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <xTaskGetTickCount+0x18>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c10:	687b      	ldr	r3, [r7, #4]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr
 8005c1c:	20001170 	.word	0x20001170

08005c20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c2a:	4b51      	ldr	r3, [pc, #324]	; (8005d70 <xTaskIncrementTick+0x150>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f040 808e 	bne.w	8005d50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c34:	4b4f      	ldr	r3, [pc, #316]	; (8005d74 <xTaskIncrementTick+0x154>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c3c:	4a4d      	ldr	r2, [pc, #308]	; (8005d74 <xTaskIncrementTick+0x154>)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d120      	bne.n	8005c8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c48:	4b4b      	ldr	r3, [pc, #300]	; (8005d78 <xTaskIncrementTick+0x158>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	603b      	str	r3, [r7, #0]
}
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <xTaskIncrementTick+0x46>
 8005c68:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <xTaskIncrementTick+0x158>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	4b43      	ldr	r3, [pc, #268]	; (8005d7c <xTaskIncrementTick+0x15c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a41      	ldr	r2, [pc, #260]	; (8005d78 <xTaskIncrementTick+0x158>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4a41      	ldr	r2, [pc, #260]	; (8005d7c <xTaskIncrementTick+0x15c>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4b40      	ldr	r3, [pc, #256]	; (8005d80 <xTaskIncrementTick+0x160>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	4a3f      	ldr	r2, [pc, #252]	; (8005d80 <xTaskIncrementTick+0x160>)
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	f000 fad3 	bl	8006230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c8a:	4b3e      	ldr	r3, [pc, #248]	; (8005d84 <xTaskIncrementTick+0x164>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d34e      	bcc.n	8005d32 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c94:	4b38      	ldr	r3, [pc, #224]	; (8005d78 <xTaskIncrementTick+0x158>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <xTaskIncrementTick+0x82>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <xTaskIncrementTick+0x84>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca8:	4b36      	ldr	r3, [pc, #216]	; (8005d84 <xTaskIncrementTick+0x164>)
 8005caa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cae:	601a      	str	r2, [r3, #0]
					break;
 8005cb0:	e03f      	b.n	8005d32 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cb2:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <xTaskIncrementTick+0x158>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d203      	bcs.n	8005cd2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cca:	4a2e      	ldr	r2, [pc, #184]	; (8005d84 <xTaskIncrementTick+0x164>)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6013      	str	r3, [r2, #0]
						break;
 8005cd0:	e02f      	b.n	8005d32 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fea0 	bl	8004a1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	3318      	adds	r3, #24
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fe97 	bl	8004a1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf2:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <xTaskIncrementTick+0x168>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d903      	bls.n	8005d02 <xTaskIncrementTick+0xe2>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <xTaskIncrementTick+0x168>)
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <xTaskIncrementTick+0x16c>)
 8005d10:	441a      	add	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7fe fe24 	bl	8004966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <xTaskIncrementTick+0x170>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d3b3      	bcc.n	8005c94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d30:	e7b0      	b.n	8005c94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d32:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <xTaskIncrementTick+0x170>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d38:	4914      	ldr	r1, [pc, #80]	; (8005d8c <xTaskIncrementTick+0x16c>)
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d907      	bls.n	8005d5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	e004      	b.n	8005d5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005d50:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <xTaskIncrementTick+0x174>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	4a0f      	ldr	r2, [pc, #60]	; (8005d94 <xTaskIncrementTick+0x174>)
 8005d58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005d5a:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <xTaskIncrementTick+0x178>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005d66:	697b      	ldr	r3, [r7, #20]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20001194 	.word	0x20001194
 8005d74:	20001170 	.word	0x20001170
 8005d78:	20001124 	.word	0x20001124
 8005d7c:	20001128 	.word	0x20001128
 8005d80:	20001184 	.word	0x20001184
 8005d84:	2000118c 	.word	0x2000118c
 8005d88:	20001174 	.word	0x20001174
 8005d8c:	20000c9c 	.word	0x20000c9c
 8005d90:	20000c98 	.word	0x20000c98
 8005d94:	2000117c 	.word	0x2000117c
 8005d98:	20001180 	.word	0x20001180

08005d9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005da2:	4b27      	ldr	r3, [pc, #156]	; (8005e40 <vTaskSwitchContext+0xa4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005daa:	4b26      	ldr	r3, [pc, #152]	; (8005e44 <vTaskSwitchContext+0xa8>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005db0:	e041      	b.n	8005e36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005db2:	4b24      	ldr	r3, [pc, #144]	; (8005e44 <vTaskSwitchContext+0xa8>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005db8:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <vTaskSwitchContext+0xac>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e010      	b.n	8005de2 <vTaskSwitchContext+0x46>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <vTaskSwitchContext+0x40>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	607b      	str	r3, [r7, #4]
}
 8005dd8:	bf00      	nop
 8005dda:	e7fe      	b.n	8005dda <vTaskSwitchContext+0x3e>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	491a      	ldr	r1, [pc, #104]	; (8005e4c <vTaskSwitchContext+0xb0>)
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0e4      	beq.n	8005dc0 <vTaskSwitchContext+0x24>
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4a12      	ldr	r2, [pc, #72]	; (8005e4c <vTaskSwitchContext+0xb0>)
 8005e02:	4413      	add	r3, r2
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	3308      	adds	r3, #8
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d104      	bne.n	8005e26 <vTaskSwitchContext+0x8a>
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <vTaskSwitchContext+0xb4>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <vTaskSwitchContext+0xac>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6013      	str	r3, [r2, #0]
}
 8005e36:	bf00      	nop
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	20001194 	.word	0x20001194
 8005e44:	20001180 	.word	0x20001180
 8005e48:	20001174 	.word	0x20001174
 8005e4c:	20000c9c 	.word	0x20000c9c
 8005e50:	20000c98 	.word	0x20000c98

08005e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60fb      	str	r3, [r7, #12]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e7a:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <vTaskPlaceOnEventList+0x44>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3318      	adds	r3, #24
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fe fd92 	bl	80049ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e88:	2101      	movs	r1, #1
 8005e8a:	6838      	ldr	r0, [r7, #0]
 8005e8c:	f000 fa80 	bl	8006390 <prvAddCurrentTaskToDelayedList>
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000c98 	.word	0x20000c98

08005e9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	617b      	str	r3, [r7, #20]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3318      	adds	r3, #24
 8005eca:	4619      	mov	r1, r3
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7fe fd4a 	bl	8004966 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	68b8      	ldr	r0, [r7, #8]
 8005ee2:	f000 fa55 	bl	8006390 <prvAddCurrentTaskToDelayedList>
	}
 8005ee6:	bf00      	nop
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000c98 	.word	0x20000c98

08005ef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	60fb      	str	r3, [r7, #12]
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	3318      	adds	r3, #24
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fd79 	bl	8004a1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f2a:	4b1e      	ldr	r3, [pc, #120]	; (8005fa4 <xTaskRemoveFromEventList+0xb0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d11d      	bne.n	8005f6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3304      	adds	r3, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe fd70 	bl	8004a1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f40:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <xTaskRemoveFromEventList+0xb4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d903      	bls.n	8005f50 <xTaskRemoveFromEventList+0x5c>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <xTaskRemoveFromEventList+0xb4>)
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4a13      	ldr	r2, [pc, #76]	; (8005fac <xTaskRemoveFromEventList+0xb8>)
 8005f5e:	441a      	add	r2, r3
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f7fe fcfd 	bl	8004966 <vListInsertEnd>
 8005f6c:	e005      	b.n	8005f7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3318      	adds	r3, #24
 8005f72:	4619      	mov	r1, r3
 8005f74:	480e      	ldr	r0, [pc, #56]	; (8005fb0 <xTaskRemoveFromEventList+0xbc>)
 8005f76:	f7fe fcf6 	bl	8004966 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <xTaskRemoveFromEventList+0xc0>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d905      	bls.n	8005f94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <xTaskRemoveFromEventList+0xc4>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e001      	b.n	8005f98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005f98:	697b      	ldr	r3, [r7, #20]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20001194 	.word	0x20001194
 8005fa8:	20001174 	.word	0x20001174
 8005fac:	20000c9c 	.word	0x20000c9c
 8005fb0:	2000112c 	.word	0x2000112c
 8005fb4:	20000c98 	.word	0x20000c98
 8005fb8:	20001180 	.word	0x20001180

08005fbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <vTaskInternalSetTimeOutState+0x24>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <vTaskInternalSetTimeOutState+0x28>)
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	605a      	str	r2, [r3, #4]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20001184 	.word	0x20001184
 8005fe4:	20001170 	.word	0x20001170

08005fe8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	613b      	str	r3, [r7, #16]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800602a:	f000 fe07 	bl	8006c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800602e:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <xTaskCheckForTimeOut+0xbc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	d102      	bne.n	800604e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	e023      	b.n	8006096 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <xTaskCheckForTimeOut+0xc0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d007      	beq.n	800606a <xTaskCheckForTimeOut+0x82>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	429a      	cmp	r2, r3
 8006062:	d302      	bcc.n	800606a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	e015      	b.n	8006096 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	429a      	cmp	r2, r3
 8006072:	d20b      	bcs.n	800608c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff ff9b 	bl	8005fbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	e004      	b.n	8006096 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006096:	f000 fe01 	bl	8006c9c <vPortExitCritical>

	return xReturn;
 800609a:	69fb      	ldr	r3, [r7, #28]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20001170 	.word	0x20001170
 80060a8:	20001184 	.word	0x20001184

080060ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <vTaskMissedYield+0x14>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
}
 80060b6:	bf00      	nop
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bc80      	pop	{r7}
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20001180 	.word	0x20001180

080060c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060cc:	f000 f852 	bl	8006174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <prvIdleTask+0x28>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d9f9      	bls.n	80060cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <prvIdleTask+0x2c>)
 80060da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060e8:	e7f0      	b.n	80060cc <prvIdleTask+0x8>
 80060ea:	bf00      	nop
 80060ec:	20000c9c 	.word	0x20000c9c
 80060f0:	e000ed04 	.word	0xe000ed04

080060f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060fa:	2300      	movs	r3, #0
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	e00c      	b.n	800611a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4a12      	ldr	r2, [pc, #72]	; (8006154 <prvInitialiseTaskLists+0x60>)
 800610c:	4413      	add	r3, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fbfe 	bl	8004910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3301      	adds	r3, #1
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b37      	cmp	r3, #55	; 0x37
 800611e:	d9ef      	bls.n	8006100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006120:	480d      	ldr	r0, [pc, #52]	; (8006158 <prvInitialiseTaskLists+0x64>)
 8006122:	f7fe fbf5 	bl	8004910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006126:	480d      	ldr	r0, [pc, #52]	; (800615c <prvInitialiseTaskLists+0x68>)
 8006128:	f7fe fbf2 	bl	8004910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800612c:	480c      	ldr	r0, [pc, #48]	; (8006160 <prvInitialiseTaskLists+0x6c>)
 800612e:	f7fe fbef 	bl	8004910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006132:	480c      	ldr	r0, [pc, #48]	; (8006164 <prvInitialiseTaskLists+0x70>)
 8006134:	f7fe fbec 	bl	8004910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006138:	480b      	ldr	r0, [pc, #44]	; (8006168 <prvInitialiseTaskLists+0x74>)
 800613a:	f7fe fbe9 	bl	8004910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800613e:	4b0b      	ldr	r3, [pc, #44]	; (800616c <prvInitialiseTaskLists+0x78>)
 8006140:	4a05      	ldr	r2, [pc, #20]	; (8006158 <prvInitialiseTaskLists+0x64>)
 8006142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <prvInitialiseTaskLists+0x7c>)
 8006146:	4a05      	ldr	r2, [pc, #20]	; (800615c <prvInitialiseTaskLists+0x68>)
 8006148:	601a      	str	r2, [r3, #0]
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000c9c 	.word	0x20000c9c
 8006158:	200010fc 	.word	0x200010fc
 800615c:	20001110 	.word	0x20001110
 8006160:	2000112c 	.word	0x2000112c
 8006164:	20001140 	.word	0x20001140
 8006168:	20001158 	.word	0x20001158
 800616c:	20001124 	.word	0x20001124
 8006170:	20001128 	.word	0x20001128

08006174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800617a:	e019      	b.n	80061b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800617c:	f000 fd5e 	bl	8006c3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006180:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <prvCheckTasksWaitingTermination+0x50>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe fc45 	bl	8004a1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006192:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <prvCheckTasksWaitingTermination+0x54>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	4a0b      	ldr	r2, [pc, #44]	; (80061c8 <prvCheckTasksWaitingTermination+0x54>)
 800619a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <prvCheckTasksWaitingTermination+0x58>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3b01      	subs	r3, #1
 80061a2:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <prvCheckTasksWaitingTermination+0x58>)
 80061a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061a6:	f000 fd79 	bl	8006c9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f810 	bl	80061d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061b0:	4b06      	ldr	r3, [pc, #24]	; (80061cc <prvCheckTasksWaitingTermination+0x58>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e1      	bne.n	800617c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20001140 	.word	0x20001140
 80061c8:	2000116c 	.word	0x2000116c
 80061cc:	20001154 	.word	0x20001154

080061d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d108      	bne.n	80061f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 feec 	bl	8006fc4 <vPortFree>
				vPortFree( pxTCB );
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fee9 	bl	8006fc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061f2:	e018      	b.n	8006226 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d103      	bne.n	8006206 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fee0 	bl	8006fc4 <vPortFree>
	}
 8006204:	e00f      	b.n	8006226 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800620c:	2b02      	cmp	r3, #2
 800620e:	d00a      	beq.n	8006226 <prvDeleteTCB+0x56>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60fb      	str	r3, [r7, #12]
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <prvDeleteTCB+0x54>
	}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006236:	4b0e      	ldr	r3, [pc, #56]	; (8006270 <prvResetNextTaskUnblockTime+0x40>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <prvResetNextTaskUnblockTime+0x14>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <prvResetNextTaskUnblockTime+0x16>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <prvResetNextTaskUnblockTime+0x44>)
 800624c:	f04f 32ff 	mov.w	r2, #4294967295
 8006250:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006252:	e008      	b.n	8006266 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006254:	4b06      	ldr	r3, [pc, #24]	; (8006270 <prvResetNextTaskUnblockTime+0x40>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4a04      	ldr	r2, [pc, #16]	; (8006274 <prvResetNextTaskUnblockTime+0x44>)
 8006264:	6013      	str	r3, [r2, #0]
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr
 8006270:	20001124 	.word	0x20001124
 8006274:	2000118c 	.word	0x2000118c

08006278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <xTaskGetSchedulerState+0x34>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006286:	2301      	movs	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	e008      	b.n	800629e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800628c:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <xTaskGetSchedulerState+0x38>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006294:	2302      	movs	r3, #2
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	e001      	b.n	800629e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800629e:	687b      	ldr	r3, [r7, #4]
	}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	20001178 	.word	0x20001178
 80062b0:	20001194 	.word	0x20001194

080062b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d056      	beq.n	8006378 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062ca:	4b2e      	ldr	r3, [pc, #184]	; (8006384 <xTaskPriorityDisinherit+0xd0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d00a      	beq.n	80062ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	60fb      	str	r3, [r7, #12]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630c:	1e5a      	subs	r2, r3, #1
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800631a:	429a      	cmp	r2, r3
 800631c:	d02c      	beq.n	8006378 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006322:	2b00      	cmp	r3, #0
 8006324:	d128      	bne.n	8006378 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3304      	adds	r3, #4
 800632a:	4618      	mov	r0, r3
 800632c:	f7fe fb76 	bl	8004a1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <xTaskPriorityDisinherit+0xd4>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d903      	bls.n	8006358 <xTaskPriorityDisinherit+0xa4>
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	4a0c      	ldr	r2, [pc, #48]	; (8006388 <xTaskPriorityDisinherit+0xd4>)
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4a09      	ldr	r2, [pc, #36]	; (800638c <xTaskPriorityDisinherit+0xd8>)
 8006366:	441a      	add	r2, r3
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f7fe faf9 	bl	8004966 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006374:	2301      	movs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006378:	697b      	ldr	r3, [r7, #20]
	}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000c98 	.word	0x20000c98
 8006388:	20001174 	.word	0x20001174
 800638c:	20000c9c 	.word	0x20000c9c

08006390 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800639a:	4b21      	ldr	r3, [pc, #132]	; (8006420 <prvAddCurrentTaskToDelayedList+0x90>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063a0:	4b20      	ldr	r3, [pc, #128]	; (8006424 <prvAddCurrentTaskToDelayedList+0x94>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3304      	adds	r3, #4
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fb38 	bl	8004a1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d10a      	bne.n	80063ca <prvAddCurrentTaskToDelayedList+0x3a>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ba:	4b1a      	ldr	r3, [pc, #104]	; (8006424 <prvAddCurrentTaskToDelayedList+0x94>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4819      	ldr	r0, [pc, #100]	; (8006428 <prvAddCurrentTaskToDelayedList+0x98>)
 80063c4:	f7fe facf 	bl	8004966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063c8:	e026      	b.n	8006418 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4413      	add	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063d2:	4b14      	ldr	r3, [pc, #80]	; (8006424 <prvAddCurrentTaskToDelayedList+0x94>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d209      	bcs.n	80063f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <prvAddCurrentTaskToDelayedList+0x9c>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3304      	adds	r3, #4
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f7fe fadc 	bl	80049ac <vListInsert>
}
 80063f4:	e010      	b.n	8006418 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f6:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <prvAddCurrentTaskToDelayedList+0x94>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f7fe fad2 	bl	80049ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006408:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	429a      	cmp	r2, r3
 8006410:	d202      	bcs.n	8006418 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006412:	4a08      	ldr	r2, [pc, #32]	; (8006434 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6013      	str	r3, [r2, #0]
}
 8006418:	bf00      	nop
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20001170 	.word	0x20001170
 8006424:	20000c98 	.word	0x20000c98
 8006428:	20001158 	.word	0x20001158
 800642c:	20001128 	.word	0x20001128
 8006430:	20001124 	.word	0x20001124
 8006434:	2000118c 	.word	0x2000118c

08006438 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800643e:	2300      	movs	r3, #0
 8006440:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006442:	f000 facb 	bl	80069dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006446:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <xTimerCreateTimerTask+0x80>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d021      	beq.n	8006492 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006456:	1d3a      	adds	r2, r7, #4
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	f107 030c 	add.w	r3, r7, #12
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe fa3b 	bl	80048dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	9202      	str	r2, [sp, #8]
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	2302      	movs	r3, #2
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	460a      	mov	r2, r1
 8006478:	4910      	ldr	r1, [pc, #64]	; (80064bc <xTimerCreateTimerTask+0x84>)
 800647a:	4811      	ldr	r0, [pc, #68]	; (80064c0 <xTimerCreateTimerTask+0x88>)
 800647c:	f7ff f89a 	bl	80055b4 <xTaskCreateStatic>
 8006480:	4603      	mov	r3, r0
 8006482:	4a10      	ldr	r2, [pc, #64]	; (80064c4 <xTimerCreateTimerTask+0x8c>)
 8006484:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <xTimerCreateTimerTask+0x8c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800648e:	2301      	movs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	613b      	str	r3, [r7, #16]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064ae:	697b      	ldr	r3, [r7, #20]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200011c8 	.word	0x200011c8
 80064bc:	080072d0 	.word	0x080072d0
 80064c0:	080065e5 	.word	0x080065e5
 80064c4:	200011cc 	.word	0x200011cc

080064c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	623b      	str	r3, [r7, #32]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064f6:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <xTimerGenericCommand+0x98>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d02a      	beq.n	8006554 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b05      	cmp	r3, #5
 800650e:	dc18      	bgt.n	8006542 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006510:	f7ff feb2 	bl	8006278 <xTaskGetSchedulerState>
 8006514:	4603      	mov	r3, r0
 8006516:	2b02      	cmp	r3, #2
 8006518:	d109      	bne.n	800652e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800651a:	4b11      	ldr	r3, [pc, #68]	; (8006560 <xTimerGenericCommand+0x98>)
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	f107 0110 	add.w	r1, r7, #16
 8006522:	2300      	movs	r3, #0
 8006524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006526:	f7fe fbe3 	bl	8004cf0 <xQueueGenericSend>
 800652a:	6278      	str	r0, [r7, #36]	; 0x24
 800652c:	e012      	b.n	8006554 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800652e:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <xTimerGenericCommand+0x98>)
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	f107 0110 	add.w	r1, r7, #16
 8006536:	2300      	movs	r3, #0
 8006538:	2200      	movs	r2, #0
 800653a:	f7fe fbd9 	bl	8004cf0 <xQueueGenericSend>
 800653e:	6278      	str	r0, [r7, #36]	; 0x24
 8006540:	e008      	b.n	8006554 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006542:	4b07      	ldr	r3, [pc, #28]	; (8006560 <xTimerGenericCommand+0x98>)
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	f107 0110 	add.w	r1, r7, #16
 800654a:	2300      	movs	r3, #0
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	f7fe fccd 	bl	8004eec <xQueueGenericSendFromISR>
 8006552:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006556:	4618      	mov	r0, r3
 8006558:	3728      	adds	r7, #40	; 0x28
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	200011c8 	.word	0x200011c8

08006564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af02      	add	r7, sp, #8
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800656e:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <prvProcessExpiredTimer+0x7c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fa4d 	bl	8004a1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d122      	bne.n	80065d0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	18d1      	adds	r1, r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	6978      	ldr	r0, [r7, #20]
 8006598:	f000 f8c8 	bl	800672c <prvInsertTimerInActiveList>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d016      	beq.n	80065d0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a2:	2300      	movs	r3, #0
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	2300      	movs	r3, #0
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	2100      	movs	r1, #0
 80065ac:	6978      	ldr	r0, [r7, #20]
 80065ae:	f7ff ff8b 	bl	80064c8 <xTimerGenericCommand>
 80065b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	60fb      	str	r3, [r7, #12]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	6978      	ldr	r0, [r7, #20]
 80065d6:	4798      	blx	r3
}
 80065d8:	bf00      	nop
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	200011c0 	.word	0x200011c0

080065e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065ec:	f107 0308 	add.w	r3, r7, #8
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 f857 	bl	80066a4 <prvGetNextExpireTime>
 80065f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4619      	mov	r1, r3
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f803 	bl	8006608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006602:	f000 f8d5 	bl	80067b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006606:	e7f1      	b.n	80065ec <prvTimerTask+0x8>

08006608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006612:	f7ff fa4b 	bl	8005aac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006616:	f107 0308 	add.w	r3, r7, #8
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f866 	bl	80066ec <prvSampleTimeNow>
 8006620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d130      	bne.n	800668a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <prvProcessTimerOrBlockTask+0x3c>
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	429a      	cmp	r2, r3
 8006634:	d806      	bhi.n	8006644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006636:	f7ff fa47 	bl	8005ac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ff91 	bl	8006564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006642:	e024      	b.n	800668e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800664a:	4b13      	ldr	r3, [pc, #76]	; (8006698 <prvProcessTimerOrBlockTask+0x90>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf0c      	ite	eq
 8006654:	2301      	moveq	r3, #1
 8006656:	2300      	movne	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <prvProcessTimerOrBlockTask+0x94>)
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	f7fe ff6f 	bl	800554c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800666e:	f7ff fa2b 	bl	8005ac8 <xTaskResumeAll>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <prvProcessTimerOrBlockTask+0x98>)
 800667a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	f3bf 8f6f 	isb	sy
}
 8006688:	e001      	b.n	800668e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800668a:	f7ff fa1d 	bl	8005ac8 <xTaskResumeAll>
}
 800668e:	bf00      	nop
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	200011c4 	.word	0x200011c4
 800669c:	200011c8 	.word	0x200011c8
 80066a0:	e000ed04 	.word	0xe000ed04

080066a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066ac:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <prvGetNextExpireTime+0x44>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	bf0c      	ite	eq
 80066b6:	2301      	moveq	r3, #1
 80066b8:	2300      	movne	r3, #0
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d105      	bne.n	80066d6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066ca:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <prvGetNextExpireTime+0x44>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e001      	b.n	80066da <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066da:	68fb      	ldr	r3, [r7, #12]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	200011c0 	.word	0x200011c0

080066ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066f4:	f7ff fa86 	bl	8005c04 <xTaskGetTickCount>
 80066f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066fa:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <prvSampleTimeNow+0x3c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	429a      	cmp	r2, r3
 8006702:	d205      	bcs.n	8006710 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006704:	f000 f908 	bl	8006918 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	e002      	b.n	8006716 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006716:	4a04      	ldr	r2, [pc, #16]	; (8006728 <prvSampleTimeNow+0x3c>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800671c:	68fb      	ldr	r3, [r7, #12]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	200011d0 	.word	0x200011d0

0800672c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	429a      	cmp	r2, r3
 8006750:	d812      	bhi.n	8006778 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	1ad2      	subs	r2, r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	429a      	cmp	r2, r3
 800675e:	d302      	bcc.n	8006766 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	e01b      	b.n	800679e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006766:	4b10      	ldr	r3, [pc, #64]	; (80067a8 <prvInsertTimerInActiveList+0x7c>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3304      	adds	r3, #4
 800676e:	4619      	mov	r1, r3
 8006770:	4610      	mov	r0, r2
 8006772:	f7fe f91b 	bl	80049ac <vListInsert>
 8006776:	e012      	b.n	800679e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d206      	bcs.n	800678e <prvInsertTimerInActiveList+0x62>
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d302      	bcc.n	800678e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006788:	2301      	movs	r3, #1
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e007      	b.n	800679e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <prvInsertTimerInActiveList+0x80>)
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3304      	adds	r3, #4
 8006796:	4619      	mov	r1, r3
 8006798:	4610      	mov	r0, r2
 800679a:	f7fe f907 	bl	80049ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 800679e:	697b      	ldr	r3, [r7, #20]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	200011c4 	.word	0x200011c4
 80067ac:	200011c0 	.word	0x200011c0

080067b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	; 0x38
 80067b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067b6:	e09d      	b.n	80068f4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da18      	bge.n	80067f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067be:	1d3b      	adds	r3, r7, #4
 80067c0:	3304      	adds	r3, #4
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	61fb      	str	r3, [r7, #28]
}
 80067dc:	bf00      	nop
 80067de:	e7fe      	b.n	80067de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e6:	6850      	ldr	r0, [r2, #4]
 80067e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ea:	6892      	ldr	r2, [r2, #8]
 80067ec:	4611      	mov	r1, r2
 80067ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	db7e      	blt.n	80068f4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	3304      	adds	r3, #4
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe f908 	bl	8004a1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800680c:	463b      	mov	r3, r7
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff ff6c 	bl	80066ec <prvSampleTimeNow>
 8006814:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b09      	cmp	r3, #9
 800681a:	d86a      	bhi.n	80068f2 <prvProcessReceivedCommands+0x142>
 800681c:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <prvProcessReceivedCommands+0x74>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	0800684d 	.word	0x0800684d
 8006828:	0800684d 	.word	0x0800684d
 800682c:	0800684d 	.word	0x0800684d
 8006830:	080068f5 	.word	0x080068f5
 8006834:	080068a9 	.word	0x080068a9
 8006838:	080068e1 	.word	0x080068e1
 800683c:	0800684d 	.word	0x0800684d
 8006840:	0800684d 	.word	0x0800684d
 8006844:	080068f5 	.word	0x080068f5
 8006848:	080068a9 	.word	0x080068a9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	18d1      	adds	r1, r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800685a:	f7ff ff67 	bl	800672c <prvInsertTimerInActiveList>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d047      	beq.n	80068f4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800686a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d13f      	bne.n	80068f4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	441a      	add	r2, r3
 800687c:	2300      	movs	r3, #0
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	2300      	movs	r3, #0
 8006882:	2100      	movs	r1, #0
 8006884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006886:	f7ff fe1f 	bl	80064c8 <xTimerGenericCommand>
 800688a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d130      	bne.n	80068f4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	61bb      	str	r3, [r7, #24]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	617b      	str	r3, [r7, #20]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	699a      	ldr	r2, [r3, #24]
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	18d1      	adds	r1, r2, r3
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068da:	f7ff ff27 	bl	800672c <prvInsertTimerInActiveList>
					break;
 80068de:	e009      	b.n	80068f4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80068ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ec:	f000 fb6a 	bl	8006fc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80068f0:	e000      	b.n	80068f4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80068f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <prvProcessReceivedCommands+0x164>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	1d39      	adds	r1, r7, #4
 80068fa:	2200      	movs	r2, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fb8d 	bl	800501c <xQueueReceive>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	f47f af57 	bne.w	80067b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	3730      	adds	r7, #48	; 0x30
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	200011c8 	.word	0x200011c8

08006918 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800691e:	e045      	b.n	80069ac <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006920:	4b2c      	ldr	r3, [pc, #176]	; (80069d4 <prvSwitchTimerLists+0xbc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800692a:	4b2a      	ldr	r3, [pc, #168]	; (80069d4 <prvSwitchTimerLists+0xbc>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3304      	adds	r3, #4
 8006938:	4618      	mov	r0, r3
 800693a:	f7fe f86f 	bl	8004a1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d12e      	bne.n	80069ac <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	429a      	cmp	r2, r3
 800695e:	d90e      	bls.n	800697e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800696c:	4b19      	ldr	r3, [pc, #100]	; (80069d4 <prvSwitchTimerLists+0xbc>)
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fe f818 	bl	80049ac <vListInsert>
 800697c:	e016      	b.n	80069ac <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800697e:	2300      	movs	r3, #0
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	2300      	movs	r3, #0
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	2100      	movs	r1, #0
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fd9d 	bl	80064c8 <xTimerGenericCommand>
 800698e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <prvSwitchTimerLists+0x94>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	603b      	str	r3, [r7, #0]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <prvSwitchTimerLists+0xbc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1b4      	bne.n	8006920 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80069b6:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <prvSwitchTimerLists+0xbc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <prvSwitchTimerLists+0xc0>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a04      	ldr	r2, [pc, #16]	; (80069d4 <prvSwitchTimerLists+0xbc>)
 80069c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80069c4:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <prvSwitchTimerLists+0xc0>)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6013      	str	r3, [r2, #0]
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200011c0 	.word	0x200011c0
 80069d8:	200011c4 	.word	0x200011c4

080069dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80069e2:	f000 f92b 	bl	8006c3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069e6:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <prvCheckForValidListAndQueue+0x60>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d120      	bne.n	8006a30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069ee:	4814      	ldr	r0, [pc, #80]	; (8006a40 <prvCheckForValidListAndQueue+0x64>)
 80069f0:	f7fd ff8e 	bl	8004910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069f4:	4813      	ldr	r0, [pc, #76]	; (8006a44 <prvCheckForValidListAndQueue+0x68>)
 80069f6:	f7fd ff8b 	bl	8004910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <prvCheckForValidListAndQueue+0x6c>)
 80069fc:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <prvCheckForValidListAndQueue+0x64>)
 80069fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a00:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <prvCheckForValidListAndQueue+0x70>)
 8006a02:	4a10      	ldr	r2, [pc, #64]	; (8006a44 <prvCheckForValidListAndQueue+0x68>)
 8006a04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a06:	2300      	movs	r3, #0
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <prvCheckForValidListAndQueue+0x74>)
 8006a0c:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <prvCheckForValidListAndQueue+0x78>)
 8006a0e:	2110      	movs	r1, #16
 8006a10:	200a      	movs	r0, #10
 8006a12:	f7fe f895 	bl	8004b40 <xQueueGenericCreateStatic>
 8006a16:	4603      	mov	r3, r0
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <prvCheckForValidListAndQueue+0x60>)
 8006a1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a1c:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <prvCheckForValidListAndQueue+0x60>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d005      	beq.n	8006a30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <prvCheckForValidListAndQueue+0x60>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	490b      	ldr	r1, [pc, #44]	; (8006a58 <prvCheckForValidListAndQueue+0x7c>)
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fd66 	bl	80054fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a30:	f000 f934 	bl	8006c9c <vPortExitCritical>
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200011c8 	.word	0x200011c8
 8006a40:	20001198 	.word	0x20001198
 8006a44:	200011ac 	.word	0x200011ac
 8006a48:	200011c0 	.word	0x200011c0
 8006a4c:	200011c4 	.word	0x200011c4
 8006a50:	20001274 	.word	0x20001274
 8006a54:	200011d4 	.word	0x200011d4
 8006a58:	080072d8 	.word	0x080072d8

08006a5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3b04      	subs	r3, #4
 8006a6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3b04      	subs	r3, #4
 8006a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f023 0201 	bic.w	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3b04      	subs	r3, #4
 8006a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a8c:	4a08      	ldr	r2, [pc, #32]	; (8006ab0 <pxPortInitialiseStack+0x54>)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3b14      	subs	r3, #20
 8006a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3b20      	subs	r3, #32
 8006aa2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr
 8006ab0:	08006ab5 	.word	0x08006ab5

08006ab4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <prvTaskExitError+0x54>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d00a      	beq.n	8006ade <prvTaskExitError+0x2a>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	60fb      	str	r3, [r7, #12]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <prvTaskExitError+0x28>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60bb      	str	r3, [r7, #8]
}
 8006af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006af2:	bf00      	nop
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0fc      	beq.n	8006af4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006afa:	bf00      	nop
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20000018 	.word	0x20000018
 8006b0c:	00000000 	.word	0x00000000

08006b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <pxCurrentTCBConst2>)
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6808      	ldr	r0, [r1, #0]
 8006b16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b1a:	f380 8809 	msr	PSP, r0
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f380 8811 	msr	BASEPRI, r0
 8006b2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006b2e:	4770      	bx	lr

08006b30 <pxCurrentTCBConst2>:
 8006b30:	20000c98 	.word	0x20000c98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop

08006b38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006b38:	4806      	ldr	r0, [pc, #24]	; (8006b54 <prvPortStartFirstTask+0x1c>)
 8006b3a:	6800      	ldr	r0, [r0, #0]
 8006b3c:	6800      	ldr	r0, [r0, #0]
 8006b3e:	f380 8808 	msr	MSP, r0
 8006b42:	b662      	cpsie	i
 8006b44:	b661      	cpsie	f
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	df00      	svc	0
 8006b50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed08 	.word	0xe000ed08

08006b58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b5e:	4b32      	ldr	r3, [pc, #200]	; (8006c28 <xPortStartScheduler+0xd0>)
 8006b60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	22ff      	movs	r2, #255	; 0xff
 8006b6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <xPortStartScheduler+0xd4>)
 8006b84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b86:	4b2a      	ldr	r3, [pc, #168]	; (8006c30 <xPortStartScheduler+0xd8>)
 8006b88:	2207      	movs	r2, #7
 8006b8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b8c:	e009      	b.n	8006ba2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006b8e:	4b28      	ldr	r3, [pc, #160]	; (8006c30 <xPortStartScheduler+0xd8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	4a26      	ldr	r2, [pc, #152]	; (8006c30 <xPortStartScheduler+0xd8>)
 8006b96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	2b80      	cmp	r3, #128	; 0x80
 8006bac:	d0ef      	beq.n	8006b8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bae:	4b20      	ldr	r3, [pc, #128]	; (8006c30 <xPortStartScheduler+0xd8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f1c3 0307 	rsb	r3, r3, #7
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d00a      	beq.n	8006bd0 <xPortStartScheduler+0x78>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	60bb      	str	r3, [r7, #8]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <xPortStartScheduler+0xd8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <xPortStartScheduler+0xd8>)
 8006bd8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bda:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <xPortStartScheduler+0xd8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006be2:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <xPortStartScheduler+0xd8>)
 8006be4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bee:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <xPortStartScheduler+0xdc>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a10      	ldr	r2, [pc, #64]	; (8006c34 <xPortStartScheduler+0xdc>)
 8006bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bfa:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <xPortStartScheduler+0xdc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a0d      	ldr	r2, [pc, #52]	; (8006c34 <xPortStartScheduler+0xdc>)
 8006c00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c06:	f000 f8b9 	bl	8006d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <xPortStartScheduler+0xe0>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c10:	f7ff ff92 	bl	8006b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c14:	f7ff f8c2 	bl	8005d9c <vTaskSwitchContext>
	prvTaskExitError();
 8006c18:	f7ff ff4c 	bl	8006ab4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	e000e400 	.word	0xe000e400
 8006c2c:	200012c4 	.word	0x200012c4
 8006c30:	200012c8 	.word	0x200012c8
 8006c34:	e000ed20 	.word	0xe000ed20
 8006c38:	20000018 	.word	0x20000018

08006c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	607b      	str	r3, [r7, #4]
}
 8006c54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c56:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <vPortEnterCritical+0x58>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	; (8006c94 <vPortEnterCritical+0x58>)
 8006c5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <vPortEnterCritical+0x58>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d10f      	bne.n	8006c88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c68:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <vPortEnterCritical+0x5c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	603b      	str	r3, [r7, #0]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <vPortEnterCritical+0x4a>
	}
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000018 	.word	0x20000018
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <vPortExitCritical+0x4c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <vPortExitCritical+0x24>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	607b      	str	r3, [r7, #4]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006cc0:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <vPortExitCritical+0x4c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	4a08      	ldr	r2, [pc, #32]	; (8006ce8 <vPortExitCritical+0x4c>)
 8006cc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <vPortExitCritical+0x4c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d105      	bne.n	8006cde <vPortExitCritical+0x42>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f383 8811 	msr	BASEPRI, r3
}
 8006cdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr
 8006ce8:	20000018 	.word	0x20000018
 8006cec:	00000000 	.word	0x00000000

08006cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cf0:	f3ef 8009 	mrs	r0, PSP
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <pxCurrentTCBConst>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d00:	6010      	str	r0, [r2, #0]
 8006d02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006d06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d0a:	f380 8811 	msr	BASEPRI, r0
 8006d0e:	f7ff f845 	bl	8005d9c <vTaskSwitchContext>
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8811 	msr	BASEPRI, r0
 8006d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d1e:	6819      	ldr	r1, [r3, #0]
 8006d20:	6808      	ldr	r0, [r1, #0]
 8006d22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d26:	f380 8809 	msr	PSP, r0
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	4770      	bx	lr

08006d30 <pxCurrentTCBConst>:
 8006d30:	20000c98 	.word	0x20000c98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop

08006d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d52:	f7fe ff65 	bl	8005c20 <xTaskIncrementTick>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <SysTick_Handler+0x40>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
}
 8006d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d80:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <vPortSetupTimerInterrupt+0x30>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d86:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d8c:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <vPortSetupTimerInterrupt+0x38>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <vPortSetupTimerInterrupt+0x3c>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	4a08      	ldr	r2, [pc, #32]	; (8006dbc <vPortSetupTimerInterrupt+0x40>)
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d9e:	4b03      	ldr	r3, [pc, #12]	; (8006dac <vPortSetupTimerInterrupt+0x30>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr
 8006dac:	e000e010 	.word	0xe000e010
 8006db0:	e000e018 	.word	0xe000e018
 8006db4:	2000000c 	.word	0x2000000c
 8006db8:	10624dd3 	.word	0x10624dd3
 8006dbc:	e000e014 	.word	0xe000e014

08006dc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dc6:	f3ef 8305 	mrs	r3, IPSR
 8006dca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b0f      	cmp	r3, #15
 8006dd0:	d914      	bls.n	8006dfc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dd2:	4a16      	ldr	r2, [pc, #88]	; (8006e2c <vPortValidateInterruptPriority+0x6c>)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ddc:	4b14      	ldr	r3, [pc, #80]	; (8006e30 <vPortValidateInterruptPriority+0x70>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	7afa      	ldrb	r2, [r7, #11]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d20a      	bcs.n	8006dfc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	607b      	str	r3, [r7, #4]
}
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <vPortValidateInterruptPriority+0x74>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e04:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <vPortValidateInterruptPriority+0x78>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d90a      	bls.n	8006e22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	603b      	str	r3, [r7, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <vPortValidateInterruptPriority+0x60>
	}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bc80      	pop	{r7}
 8006e2a:	4770      	bx	lr
 8006e2c:	e000e3f0 	.word	0xe000e3f0
 8006e30:	200012c4 	.word	0x200012c4
 8006e34:	e000ed0c 	.word	0xe000ed0c
 8006e38:	200012c8 	.word	0x200012c8

08006e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	; 0x28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e48:	f7fe fe30 	bl	8005aac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e4c:	4b58      	ldr	r3, [pc, #352]	; (8006fb0 <pvPortMalloc+0x174>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e54:	f000 f910 	bl	8007078 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e58:	4b56      	ldr	r3, [pc, #344]	; (8006fb4 <pvPortMalloc+0x178>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 808e 	bne.w	8006f82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01d      	beq.n	8006ea8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4413      	add	r3, r2
 8006e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d014      	beq.n	8006ea8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f023 0307 	bic.w	r3, r3, #7
 8006e84:	3308      	adds	r3, #8
 8006e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <pvPortMalloc+0x6c>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	617b      	str	r3, [r7, #20]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d069      	beq.n	8006f82 <pvPortMalloc+0x146>
 8006eae:	4b42      	ldr	r3, [pc, #264]	; (8006fb8 <pvPortMalloc+0x17c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d864      	bhi.n	8006f82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006eb8:	4b40      	ldr	r3, [pc, #256]	; (8006fbc <pvPortMalloc+0x180>)
 8006eba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ebc:	4b3f      	ldr	r3, [pc, #252]	; (8006fbc <pvPortMalloc+0x180>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ec2:	e004      	b.n	8006ece <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d903      	bls.n	8006ee0 <pvPortMalloc+0xa4>
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f1      	bne.n	8006ec4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ee0:	4b33      	ldr	r3, [pc, #204]	; (8006fb0 <pvPortMalloc+0x174>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d04b      	beq.n	8006f82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2208      	movs	r2, #8
 8006ef0:	4413      	add	r3, r2
 8006ef2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	2308      	movs	r3, #8
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d91f      	bls.n	8006f4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4413      	add	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <pvPortMalloc+0xf8>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	613b      	str	r3, [r7, #16]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f46:	69b8      	ldr	r0, [r7, #24]
 8006f48:	f000 f8f8 	bl	800713c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f4c:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <pvPortMalloc+0x17c>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <pvPortMalloc+0x17c>)
 8006f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f5a:	4b17      	ldr	r3, [pc, #92]	; (8006fb8 <pvPortMalloc+0x17c>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b18      	ldr	r3, [pc, #96]	; (8006fc0 <pvPortMalloc+0x184>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d203      	bcs.n	8006f6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <pvPortMalloc+0x17c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a15      	ldr	r2, [pc, #84]	; (8006fc0 <pvPortMalloc+0x184>)
 8006f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <pvPortMalloc+0x178>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f82:	f7fe fda1 	bl	8005ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <pvPortMalloc+0x16a>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	60fb      	str	r3, [r7, #12]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <pvPortMalloc+0x168>
	return pvReturn;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3728      	adds	r7, #40	; 0x28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20001ed4 	.word	0x20001ed4
 8006fb4:	20001ee0 	.word	0x20001ee0
 8006fb8:	20001ed8 	.word	0x20001ed8
 8006fbc:	20001ecc 	.word	0x20001ecc
 8006fc0:	20001edc 	.word	0x20001edc

08006fc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d048      	beq.n	8007068 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006fd6:	2308      	movs	r3, #8
 8006fd8:	425b      	negs	r3, r3
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4413      	add	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	4b21      	ldr	r3, [pc, #132]	; (8007070 <vPortFree+0xac>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <vPortFree+0x44>
	__asm volatile
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	60fb      	str	r3, [r7, #12]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <vPortFree+0x62>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60bb      	str	r3, [r7, #8]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	4b11      	ldr	r3, [pc, #68]	; (8007070 <vPortFree+0xac>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4013      	ands	r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d019      	beq.n	8007068 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d115      	bne.n	8007068 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <vPortFree+0xac>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	43db      	mvns	r3, r3
 8007046:	401a      	ands	r2, r3
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800704c:	f7fe fd2e 	bl	8005aac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <vPortFree+0xb0>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4413      	add	r3, r2
 800705a:	4a06      	ldr	r2, [pc, #24]	; (8007074 <vPortFree+0xb0>)
 800705c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800705e:	6938      	ldr	r0, [r7, #16]
 8007060:	f000 f86c 	bl	800713c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007064:	f7fe fd30 	bl	8005ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007068:	bf00      	nop
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20001ee0 	.word	0x20001ee0
 8007074:	20001ed8 	.word	0x20001ed8

08007078 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800707e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007082:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007084:	4b27      	ldr	r3, [pc, #156]	; (8007124 <prvHeapInit+0xac>)
 8007086:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00c      	beq.n	80070ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3307      	adds	r3, #7
 8007096:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0307 	bic.w	r3, r3, #7
 800709e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	4a1f      	ldr	r2, [pc, #124]	; (8007124 <prvHeapInit+0xac>)
 80070a8:	4413      	add	r3, r2
 80070aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070b0:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <prvHeapInit+0xb0>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070b6:	4b1c      	ldr	r3, [pc, #112]	; (8007128 <prvHeapInit+0xb0>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4413      	add	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80070c4:	2208      	movs	r2, #8
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1a9b      	subs	r3, r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0307 	bic.w	r3, r3, #7
 80070d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <prvHeapInit+0xb4>)
 80070d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80070da:	4b14      	ldr	r3, [pc, #80]	; (800712c <prvHeapInit+0xb4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2200      	movs	r2, #0
 80070e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80070e2:	4b12      	ldr	r3, [pc, #72]	; (800712c <prvHeapInit+0xb4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	1ad2      	subs	r2, r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070f8:	4b0c      	ldr	r3, [pc, #48]	; (800712c <prvHeapInit+0xb4>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4a0a      	ldr	r2, [pc, #40]	; (8007130 <prvHeapInit+0xb8>)
 8007106:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	4a09      	ldr	r2, [pc, #36]	; (8007134 <prvHeapInit+0xbc>)
 800710e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007110:	4b09      	ldr	r3, [pc, #36]	; (8007138 <prvHeapInit+0xc0>)
 8007112:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007116:	601a      	str	r2, [r3, #0]
}
 8007118:	bf00      	nop
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	bc80      	pop	{r7}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	200012cc 	.word	0x200012cc
 8007128:	20001ecc 	.word	0x20001ecc
 800712c:	20001ed4 	.word	0x20001ed4
 8007130:	20001edc 	.word	0x20001edc
 8007134:	20001ed8 	.word	0x20001ed8
 8007138:	20001ee0 	.word	0x20001ee0

0800713c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <prvInsertBlockIntoFreeList+0xa8>)
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e002      	b.n	8007150 <prvInsertBlockIntoFreeList+0x14>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	429a      	cmp	r2, r3
 8007158:	d8f7      	bhi.n	800714a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4413      	add	r3, r2
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	429a      	cmp	r2, r3
 800716a:	d108      	bne.n	800717e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	441a      	add	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	441a      	add	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d118      	bne.n	80071c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4b14      	ldr	r3, [pc, #80]	; (80071e8 <prvInsertBlockIntoFreeList+0xac>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d00d      	beq.n	80071ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	441a      	add	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e008      	b.n	80071cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <prvInsertBlockIntoFreeList+0xac>)
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e003      	b.n	80071cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d002      	beq.n	80071da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071da:	bf00      	nop
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr
 80071e4:	20001ecc 	.word	0x20001ecc
 80071e8:	20001ed4 	.word	0x20001ed4

080071ec <memset>:
 80071ec:	4603      	mov	r3, r0
 80071ee:	4402      	add	r2, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <__libc_init_array>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	2600      	movs	r6, #0
 8007200:	4d0c      	ldr	r5, [pc, #48]	; (8007234 <__libc_init_array+0x38>)
 8007202:	4c0d      	ldr	r4, [pc, #52]	; (8007238 <__libc_init_array+0x3c>)
 8007204:	1b64      	subs	r4, r4, r5
 8007206:	10a4      	asrs	r4, r4, #2
 8007208:	42a6      	cmp	r6, r4
 800720a:	d109      	bne.n	8007220 <__libc_init_array+0x24>
 800720c:	f000 f828 	bl	8007260 <_init>
 8007210:	2600      	movs	r6, #0
 8007212:	4d0a      	ldr	r5, [pc, #40]	; (800723c <__libc_init_array+0x40>)
 8007214:	4c0a      	ldr	r4, [pc, #40]	; (8007240 <__libc_init_array+0x44>)
 8007216:	1b64      	subs	r4, r4, r5
 8007218:	10a4      	asrs	r4, r4, #2
 800721a:	42a6      	cmp	r6, r4
 800721c:	d105      	bne.n	800722a <__libc_init_array+0x2e>
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	f855 3b04 	ldr.w	r3, [r5], #4
 8007224:	4798      	blx	r3
 8007226:	3601      	adds	r6, #1
 8007228:	e7ee      	b.n	8007208 <__libc_init_array+0xc>
 800722a:	f855 3b04 	ldr.w	r3, [r5], #4
 800722e:	4798      	blx	r3
 8007230:	3601      	adds	r6, #1
 8007232:	e7f2      	b.n	800721a <__libc_init_array+0x1e>
 8007234:	08007c24 	.word	0x08007c24
 8007238:	08007c24 	.word	0x08007c24
 800723c:	08007c24 	.word	0x08007c24
 8007240:	08007c28 	.word	0x08007c28

08007244 <memcpy>:
 8007244:	440a      	add	r2, r1
 8007246:	4291      	cmp	r1, r2
 8007248:	f100 33ff 	add.w	r3, r0, #4294967295
 800724c:	d100      	bne.n	8007250 <memcpy+0xc>
 800724e:	4770      	bx	lr
 8007250:	b510      	push	{r4, lr}
 8007252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007256:	4291      	cmp	r1, r2
 8007258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800725c:	d1f9      	bne.n	8007252 <memcpy+0xe>
 800725e:	bd10      	pop	{r4, pc}

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	bf00      	nop
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
