
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed8  08006ed8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006ed8  08006ed8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ed8  08006ed8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e94  20000010  08006ef0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ea4  08006ef0  00021ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173d1  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037b9  00000000  00000000  0003744d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111d  00000000  00000000  0003c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003457  00000000  00000000  0003d315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019946  00000000  00000000  0004076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098fef  00000000  00000000  0005a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c6c  00000000  00000000  000f30a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000f8d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006db0 	.word	0x08006db0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006db0 	.word	0x08006db0

08000150 <getPlayer>:

disparo_t Disparo;

extern dificultad_t dificultad;

player_t *getPlayer(){
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

	return &Player;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <getPlayer+0x10>)
}
 8000156:	4618      	mov	r0, r3
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	2000002c 	.word	0x2000002c

08000164 <getAlien>:

alien_t *getAlien(uint8_t fila, uint8_t columna){
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	460a      	mov	r2, r1
 800016e:	71fb      	strb	r3, [r7, #7]
 8000170:	4613      	mov	r3, r2
 8000172:	71bb      	strb	r3, [r7, #6]
	return &Alien[fila][columna];
 8000174:	79f9      	ldrb	r1, [r7, #7]
 8000176:	79bb      	ldrb	r3, [r7, #6]
 8000178:	461a      	mov	r2, r3
 800017a:	0052      	lsls	r2, r2, #1
 800017c:	441a      	add	r2, r3
 800017e:	460b      	mov	r3, r1
 8000180:	005b      	lsls	r3, r3, #1
 8000182:	440b      	add	r3, r1
 8000184:	00d9      	lsls	r1, r3, #3
 8000186:	1ac9      	subs	r1, r1, r3
 8000188:	1853      	adds	r3, r2, r1
 800018a:	4a03      	ldr	r2, [pc, #12]	; (8000198 <getAlien+0x34>)
 800018c:	4413      	add	r3, r2
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000030 	.word	0x20000030

0800019c <getDisparo>:

disparo_t *getDisparo(){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	return &Disparo;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <getDisparo+0x10>)
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000070 	.word	0x20000070

080001b0 <playerInit>:

void playerInit(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0

	Player.posicion_X = 64;
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <playerInit+0x14>)
 80001b6:	2240      	movs	r2, #64	; 0x40
 80001b8:	705a      	strb	r2, [r3, #1]

}
 80001ba:	bf00      	nop
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	2000002c 	.word	0x2000002c

080001c8 <plotPlayer>:

void plotPlayer(uint16_t direccion, player_t *player){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	80fb      	strh	r3, [r7, #6]

	if( direccion > 2000){
 80001d4:	88fb      	ldrh	r3, [r7, #6]
 80001d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80001da:	d90e      	bls.n	80001fa <plotPlayer+0x32>

		if(player->posicion_X >= 120){
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	785b      	ldrb	r3, [r3, #1]
 80001e0:	2b77      	cmp	r3, #119	; 0x77
 80001e2:	d903      	bls.n	80001ec <plotPlayer+0x24>
			player->posicion_X = 120;
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	2278      	movs	r2, #120	; 0x78
 80001e8:	705a      	strb	r2, [r3, #1]
 80001ea:	e018      	b.n	800021e <plotPlayer+0x56>
		}
		else{
			player->posicion_X = player->posicion_X + 4;
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	785b      	ldrb	r3, [r3, #1]
 80001f0:	3304      	adds	r3, #4
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	705a      	strb	r2, [r3, #1]
 80001f8:	e011      	b.n	800021e <plotPlayer+0x56>
		}

	}
	else if(direccion < 1800){
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000200:	d20d      	bcs.n	800021e <plotPlayer+0x56>

		if(player->posicion_X <= 0){
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	785b      	ldrb	r3, [r3, #1]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d103      	bne.n	8000212 <plotPlayer+0x4a>
			player->posicion_X = 0;
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	2200      	movs	r2, #0
 800020e:	705a      	strb	r2, [r3, #1]
 8000210:	e005      	b.n	800021e <plotPlayer+0x56>
		}
		else{
			player->posicion_X = player->posicion_X - 4;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	3b04      	subs	r3, #4
 8000218:	b2da      	uxtb	r2, r3
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	705a      	strb	r2, [r3, #1]
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, pato, 8,8,1);
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	785b      	ldrb	r3, [r3, #1]
 8000222:	b218      	sxth	r0, r3
 8000224:	2301      	movs	r3, #1
 8000226:	9301      	str	r3, [sp, #4]
 8000228:	2308      	movs	r3, #8
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	2308      	movs	r3, #8
 800022e:	4a04      	ldr	r2, [pc, #16]	; (8000240 <plotPlayer+0x78>)
 8000230:	2138      	movs	r1, #56	; 0x38
 8000232:	f000 fcc8 	bl	8000bc6 <SSD1306_DrawBitmap>
}
 8000236:	bf00      	nop
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	08006e10 	.word	0x08006e10

08000244 <InvaderInit>:



void InvaderInit(){
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800024a:	2300      	movs	r3, #0
 800024c:	71fb      	strb	r3, [r7, #7]
 800024e:	e035      	b.n	80002bc <InvaderInit+0x78>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000250:	2300      	movs	r3, #0
 8000252:	71bb      	strb	r3, [r7, #6]
 8000254:	e02c      	b.n	80002b0 <InvaderInit+0x6c>
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN_CHICO + ESPACIO_ENTRE_COLUMNAS);
 8000256:	79bb      	ldrb	r3, [r7, #6]
 8000258:	461a      	mov	r2, r3
 800025a:	0052      	lsls	r2, r2, #1
 800025c:	441a      	add	r2, r3
 800025e:	0092      	lsls	r2, r2, #2
 8000260:	4413      	add	r3, r2
 8000262:	b2dc      	uxtb	r4, r3
 8000264:	79ba      	ldrb	r2, [r7, #6]
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	4611      	mov	r1, r2
 800026a:	4618      	mov	r0, r3
 800026c:	f7ff ff7a 	bl	8000164 <getAlien>
 8000270:	4603      	mov	r3, r0
 8000272:	f104 020a 	add.w	r2, r4, #10
 8000276:	b2d2      	uxtb	r2, r2
 8000278:	701a      	strb	r2, [r3, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN_CHICO + ESPACIO_ENTRE_FILAS);
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff6f 	bl	8000164 <getAlien>
 8000286:	4602      	mov	r2, r0
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4619      	mov	r1, r3
 800028c:	0089      	lsls	r1, r1, #2
 800028e:	4419      	add	r1, r3
 8000290:	0049      	lsls	r1, r1, #1
 8000292:	440b      	add	r3, r1
 8000294:	b2db      	uxtb	r3, r3
 8000296:	7053      	strb	r3, [r2, #1]
			getAlien(y, x)->vivo = true;
 8000298:	79ba      	ldrb	r2, [r7, #6]
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	4611      	mov	r1, r2
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ff60 	bl	8000164 <getAlien>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2201      	movs	r2, #1
 80002a8:	709a      	strb	r2, [r3, #2]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	3301      	adds	r3, #1
 80002ae:	71bb      	strb	r3, [r7, #6]
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	2b06      	cmp	r3, #6
 80002b4:	d9cf      	bls.n	8000256 <InvaderInit+0x12>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	3301      	adds	r3, #1
 80002ba:	71fb      	strb	r3, [r7, #7]
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d9c6      	bls.n	8000250 <InvaderInit+0xc>
		}
	}

}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd90      	pop	{r4, r7, pc}

080002cc <plotAliens>:

void plotAliens(orientacion_t *orientacion_horizontal, uint8_t vel, uint8_t *conteo){
 80002cc:	b5b0      	push	{r4, r5, r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af02      	add	r7, sp, #8
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	460b      	mov	r3, r1
 80002d6:	607a      	str	r2, [r7, #4]
 80002d8:	72fb      	strb	r3, [r7, #11]


	if(vel % dificultad.velocidad_horizontal == 0){
 80002da:	4b9e      	ldr	r3, [pc, #632]	; (8000554 <plotAliens+0x288>)
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	7afb      	ldrb	r3, [r7, #11]
 80002e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80002e4:	fb01 f202 	mul.w	r2, r1, r2
 80002e8:	1a9b      	subs	r3, r3, r2
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	f040 809a 	bne.w	8000426 <plotAliens+0x15a>
			switch(*orientacion_horizontal){
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d002      	beq.n	8000300 <plotAliens+0x34>
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d025      	beq.n	800034a <plotAliens+0x7e>
							}
						}

						break;
				default:
					break;
 80002fe:	e049      	b.n	8000394 <plotAliens+0xc8>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000300:	2300      	movs	r3, #0
 8000302:	75fb      	strb	r3, [r7, #23]
 8000304:	e01d      	b.n	8000342 <plotAliens+0x76>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000306:	2300      	movs	r3, #0
 8000308:	75bb      	strb	r3, [r7, #22]
 800030a:	e014      	b.n	8000336 <plotAliens+0x6a>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 1;
 800030c:	7dba      	ldrb	r2, [r7, #22]
 800030e:	7dfb      	ldrb	r3, [r7, #23]
 8000310:	4611      	mov	r1, r2
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff26 	bl	8000164 <getAlien>
 8000318:	4603      	mov	r3, r0
 800031a:	781c      	ldrb	r4, [r3, #0]
 800031c:	7dba      	ldrb	r2, [r7, #22]
 800031e:	7dfb      	ldrb	r3, [r7, #23]
 8000320:	4611      	mov	r1, r2
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff1e 	bl	8000164 <getAlien>
 8000328:	4603      	mov	r3, r0
 800032a:	1c62      	adds	r2, r4, #1
 800032c:	b2d2      	uxtb	r2, r2
 800032e:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000330:	7dbb      	ldrb	r3, [r7, #22]
 8000332:	3301      	adds	r3, #1
 8000334:	75bb      	strb	r3, [r7, #22]
 8000336:	7dbb      	ldrb	r3, [r7, #22]
 8000338:	2b06      	cmp	r3, #6
 800033a:	d9e7      	bls.n	800030c <plotAliens+0x40>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800033c:	7dfb      	ldrb	r3, [r7, #23]
 800033e:	3301      	adds	r3, #1
 8000340:	75fb      	strb	r3, [r7, #23]
 8000342:	7dfb      	ldrb	r3, [r7, #23]
 8000344:	2b02      	cmp	r3, #2
 8000346:	d9de      	bls.n	8000306 <plotAliens+0x3a>
					break;
 8000348:	e024      	b.n	8000394 <plotAliens+0xc8>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800034a:	2300      	movs	r3, #0
 800034c:	757b      	strb	r3, [r7, #21]
 800034e:	e01d      	b.n	800038c <plotAliens+0xc0>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000350:	2300      	movs	r3, #0
 8000352:	753b      	strb	r3, [r7, #20]
 8000354:	e014      	b.n	8000380 <plotAliens+0xb4>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 1;
 8000356:	7d3a      	ldrb	r2, [r7, #20]
 8000358:	7d7b      	ldrb	r3, [r7, #21]
 800035a:	4611      	mov	r1, r2
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff01 	bl	8000164 <getAlien>
 8000362:	4603      	mov	r3, r0
 8000364:	781c      	ldrb	r4, [r3, #0]
 8000366:	7d3a      	ldrb	r2, [r7, #20]
 8000368:	7d7b      	ldrb	r3, [r7, #21]
 800036a:	4611      	mov	r1, r2
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff fef9 	bl	8000164 <getAlien>
 8000372:	4603      	mov	r3, r0
 8000374:	1e62      	subs	r2, r4, #1
 8000376:	b2d2      	uxtb	r2, r2
 8000378:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800037a:	7d3b      	ldrb	r3, [r7, #20]
 800037c:	3301      	adds	r3, #1
 800037e:	753b      	strb	r3, [r7, #20]
 8000380:	7d3b      	ldrb	r3, [r7, #20]
 8000382:	2b06      	cmp	r3, #6
 8000384:	d9e7      	bls.n	8000356 <plotAliens+0x8a>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000386:	7d7b      	ldrb	r3, [r7, #21]
 8000388:	3301      	adds	r3, #1
 800038a:	757b      	strb	r3, [r7, #21]
 800038c:	7d7b      	ldrb	r3, [r7, #21]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d9de      	bls.n	8000350 <plotAliens+0x84>
						break;
 8000392:	bf00      	nop
		}


			if( getAlien(0,7)->posicion_X >= 39){
 8000394:	2107      	movs	r1, #7
 8000396:	2000      	movs	r0, #0
 8000398:	f7ff fee4 	bl	8000164 <getAlien>
 800039c:	4603      	mov	r3, r0
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b26      	cmp	r3, #38	; 0x26
 80003a2:	d902      	bls.n	80003aa <plotAliens+0xde>

				*orientacion_horizontal = mov_izquierda;
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
			}
			if( getAlien(0,0)->posicion_X <= 0){
 80003aa:	2100      	movs	r1, #0
 80003ac:	2000      	movs	r0, #0
 80003ae:	f7ff fed9 	bl	8000164 <getAlien>
 80003b2:	4603      	mov	r3, r0
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d108      	bne.n	80003cc <plotAliens+0x100>
				*orientacion_horizontal = mov_derecha;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
				*conteo = *conteo + 1;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	b2da      	uxtb	r2, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	701a      	strb	r2, [r3, #0]



		//Esta parte se encarga de ir bajando los aliens

			if(*conteo == 10){
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b0a      	cmp	r3, #10
 80003d2:	d128      	bne.n	8000426 <plotAliens+0x15a>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003d4:	2300      	movs	r3, #0
 80003d6:	74fb      	strb	r3, [r7, #19]
 80003d8:	e022      	b.n	8000420 <plotAliens+0x154>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003da:	2300      	movs	r3, #0
 80003dc:	74bb      	strb	r3, [r7, #18]
 80003de:	e019      	b.n	8000414 <plotAliens+0x148>

						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 80003e0:	7cba      	ldrb	r2, [r7, #18]
 80003e2:	7cfb      	ldrb	r3, [r7, #19]
 80003e4:	4611      	mov	r1, r2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff febc 	bl	8000164 <getAlien>
 80003ec:	4603      	mov	r3, r0
 80003ee:	785d      	ldrb	r5, [r3, #1]
 80003f0:	4b58      	ldr	r3, [pc, #352]	; (8000554 <plotAliens+0x288>)
 80003f2:	785c      	ldrb	r4, [r3, #1]
 80003f4:	7cba      	ldrb	r2, [r7, #18]
 80003f6:	7cfb      	ldrb	r3, [r7, #19]
 80003f8:	4611      	mov	r1, r2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff feb2 	bl	8000164 <getAlien>
 8000400:	4603      	mov	r3, r0
 8000402:	192a      	adds	r2, r5, r4
 8000404:	b2d2      	uxtb	r2, r2
 8000406:	705a      	strb	r2, [r3, #1]
						*conteo = 0;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800040e:	7cbb      	ldrb	r3, [r7, #18]
 8000410:	3301      	adds	r3, #1
 8000412:	74bb      	strb	r3, [r7, #18]
 8000414:	7cbb      	ldrb	r3, [r7, #18]
 8000416:	2b06      	cmp	r3, #6
 8000418:	d9e2      	bls.n	80003e0 <plotAliens+0x114>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800041a:	7cfb      	ldrb	r3, [r7, #19]
 800041c:	3301      	adds	r3, #1
 800041e:	74fb      	strb	r3, [r7, #19]
 8000420:	7cfb      	ldrb	r3, [r7, #19]
 8000422:	2b02      	cmp	r3, #2
 8000424:	d9d9      	bls.n	80003da <plotAliens+0x10e>
	}


	//Acá se grafican los aliens en la pantalla

		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000426:	2300      	movs	r3, #0
 8000428:	747b      	strb	r3, [r7, #17]
 800042a:	e089      	b.n	8000540 <plotAliens+0x274>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800042c:	2300      	movs	r3, #0
 800042e:	743b      	strb	r3, [r7, #16]
 8000430:	e07f      	b.n	8000532 <plotAliens+0x266>

					switch(y){
 8000432:	7c7b      	ldrb	r3, [r7, #17]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d002      	beq.n	800043e <plotAliens+0x172>
 8000438:	2b01      	cmp	r3, #1
 800043a:	d026      	beq.n	800048a <plotAliens+0x1be>
 800043c:	e04b      	b.n	80004d6 <plotAliens+0x20a>

					case 0:
						if(getAlien(y,x)->vivo == true){
 800043e:	7c3a      	ldrb	r2, [r7, #16]
 8000440:	7c7b      	ldrb	r3, [r7, #17]
 8000442:	4611      	mov	r1, r2
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff fe8d 	bl	8000164 <getAlien>
 800044a:	4603      	mov	r3, r0
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d167      	bne.n	8000522 <plotAliens+0x256>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 8000452:	7c3a      	ldrb	r2, [r7, #16]
 8000454:	7c7b      	ldrb	r3, [r7, #17]
 8000456:	4611      	mov	r1, r2
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff fe83 	bl	8000164 <getAlien>
 800045e:	4603      	mov	r3, r0
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	b21c      	sxth	r4, r3
 8000464:	7c3a      	ldrb	r2, [r7, #16]
 8000466:	7c7b      	ldrb	r3, [r7, #17]
 8000468:	4611      	mov	r1, r2
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff fe7a 	bl	8000164 <getAlien>
 8000470:	4603      	mov	r3, r0
 8000472:	785b      	ldrb	r3, [r3, #1]
 8000474:	b219      	sxth	r1, r3
 8000476:	2301      	movs	r3, #1
 8000478:	9301      	str	r3, [sp, #4]
 800047a:	2308      	movs	r3, #8
 800047c:	9300      	str	r3, [sp, #0]
 800047e:	2310      	movs	r3, #16
 8000480:	4a35      	ldr	r2, [pc, #212]	; (8000558 <plotAliens+0x28c>)
 8000482:	4620      	mov	r0, r4
 8000484:	f000 fb9f 	bl	8000bc6 <SSD1306_DrawBitmap>
						}
						else{

						}
						break;
 8000488:	e04b      	b.n	8000522 <plotAliens+0x256>
					case 1:
						if(getAlien(y,x)->vivo == true){
 800048a:	7c3a      	ldrb	r2, [r7, #16]
 800048c:	7c7b      	ldrb	r3, [r7, #17]
 800048e:	4611      	mov	r1, r2
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fe67 	bl	8000164 <getAlien>
 8000496:	4603      	mov	r3, r0
 8000498:	789b      	ldrb	r3, [r3, #2]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d143      	bne.n	8000526 <plotAliens+0x25a>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 800049e:	7c3a      	ldrb	r2, [r7, #16]
 80004a0:	7c7b      	ldrb	r3, [r7, #17]
 80004a2:	4611      	mov	r1, r2
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fe5d 	bl	8000164 <getAlien>
 80004aa:	4603      	mov	r3, r0
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b21c      	sxth	r4, r3
 80004b0:	7c3a      	ldrb	r2, [r7, #16]
 80004b2:	7c7b      	ldrb	r3, [r7, #17]
 80004b4:	4611      	mov	r1, r2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fe54 	bl	8000164 <getAlien>
 80004bc:	4603      	mov	r3, r0
 80004be:	785b      	ldrb	r3, [r3, #1]
 80004c0:	b219      	sxth	r1, r3
 80004c2:	2301      	movs	r3, #1
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2308      	movs	r3, #8
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2310      	movs	r3, #16
 80004cc:	4a22      	ldr	r2, [pc, #136]	; (8000558 <plotAliens+0x28c>)
 80004ce:	4620      	mov	r0, r4
 80004d0:	f000 fb79 	bl	8000bc6 <SSD1306_DrawBitmap>
						}
						else{

						}
						break;
 80004d4:	e027      	b.n	8000526 <plotAliens+0x25a>
					default:
						if(getAlien(y,x)->vivo == true){
 80004d6:	7c3a      	ldrb	r2, [r7, #16]
 80004d8:	7c7b      	ldrb	r3, [r7, #17]
 80004da:	4611      	mov	r1, r2
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe41 	bl	8000164 <getAlien>
 80004e2:	4603      	mov	r3, r0
 80004e4:	789b      	ldrb	r3, [r3, #2]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d11f      	bne.n	800052a <plotAliens+0x25e>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 80004ea:	7c3a      	ldrb	r2, [r7, #16]
 80004ec:	7c7b      	ldrb	r3, [r7, #17]
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff fe37 	bl	8000164 <getAlien>
 80004f6:	4603      	mov	r3, r0
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	b21c      	sxth	r4, r3
 80004fc:	7c3a      	ldrb	r2, [r7, #16]
 80004fe:	7c7b      	ldrb	r3, [r7, #17]
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe2e 	bl	8000164 <getAlien>
 8000508:	4603      	mov	r3, r0
 800050a:	785b      	ldrb	r3, [r3, #1]
 800050c:	b219      	sxth	r1, r3
 800050e:	2301      	movs	r3, #1
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2308      	movs	r3, #8
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2310      	movs	r3, #16
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <plotAliens+0x290>)
 800051a:	4620      	mov	r0, r4
 800051c:	f000 fb53 	bl	8000bc6 <SSD1306_DrawBitmap>
						}
						else{

						}
						break;
 8000520:	e003      	b.n	800052a <plotAliens+0x25e>
						break;
 8000522:	bf00      	nop
 8000524:	e002      	b.n	800052c <plotAliens+0x260>
						break;
 8000526:	bf00      	nop
 8000528:	e000      	b.n	800052c <plotAliens+0x260>
						break;
 800052a:	bf00      	nop
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800052c:	7c3b      	ldrb	r3, [r7, #16]
 800052e:	3301      	adds	r3, #1
 8000530:	743b      	strb	r3, [r7, #16]
 8000532:	7c3b      	ldrb	r3, [r7, #16]
 8000534:	2b06      	cmp	r3, #6
 8000536:	f67f af7c 	bls.w	8000432 <plotAliens+0x166>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800053a:	7c7b      	ldrb	r3, [r7, #17]
 800053c:	3301      	adds	r3, #1
 800053e:	747b      	strb	r3, [r7, #17]
 8000540:	7c7b      	ldrb	r3, [r7, #17]
 8000542:	2b02      	cmp	r3, #2
 8000544:	f67f af72 	bls.w	800042c <plotAliens+0x160>
					}
			}

		}

}
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bdb0      	pop	{r4, r5, r7, pc}
 8000552:	bf00      	nop
 8000554:	20000074 	.word	0x20000074
 8000558:	08006e18 	.word	0x08006e18
 800055c:	08006e28 	.word	0x08006e28

08000560 <disparoInit>:


void disparoInit(){
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

	Disparo.posicion_x = 255;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <disparoInit+0x20>)
 8000566:	22ff      	movs	r2, #255	; 0xff
 8000568:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = 58;
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <disparoInit+0x20>)
 800056c:	223a      	movs	r2, #58	; 0x3a
 800056e:	705a      	strb	r2, [r3, #1]
	Disparo.disparo = false;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <disparoInit+0x20>)
 8000572:	2200      	movs	r2, #0
 8000574:	709a      	strb	r2, [r3, #2]
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000070 	.word	0x20000070

08000584 <disparar>:


void disparar(uint8_t *numero_disparos){
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
	//if(disparoOK == 1){		//estamos disparando


		//if(disparo[i].disparo == false){
			//disparo[i].posicion_x = getPlayer()->posicion_X;
			switch (*numero_disparos) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d113      	bne.n	80005bc <disparar+0x38>
				case 1:
					if(getDisparo()->disparo == false){
 8000594:	f7ff fe02 	bl	800019c <getDisparo>
 8000598:	4603      	mov	r3, r0
 800059a:	789b      	ldrb	r3, [r3, #2]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d10f      	bne.n	80005c0 <disparar+0x3c>
						getDisparo()->disparo = true;
 80005a0:	f7ff fdfc 	bl	800019c <getDisparo>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2201      	movs	r2, #1
 80005a8:	709a      	strb	r2, [r3, #2]
						getDisparo()->posicion_x = getPlayer()->posicion_X;
 80005aa:	f7ff fdd1 	bl	8000150 <getPlayer>
 80005ae:	4604      	mov	r4, r0
 80005b0:	f7ff fdf4 	bl	800019c <getDisparo>
 80005b4:	4603      	mov	r3, r0
 80005b6:	7862      	ldrb	r2, [r4, #1]
 80005b8:	701a      	strb	r2, [r3, #0]
					}
					break;
 80005ba:	e001      	b.n	80005c0 <disparar+0x3c>
						disparo[4].disparo = true;
						disparo[4].posicion_x = getPlayer()->posicion_X;
					}*/
					break;
				default:
					break;
 80005bc:	bf00      	nop
 80005be:	e000      	b.n	80005c2 <disparar+0x3e>
					break;
 80005c0:	bf00      	nop



		//for(uint8_t i=0; i<1;i++){

			if(getDisparo()->disparo == true){
 80005c2:	f7ff fdeb 	bl	800019c <getDisparo>
 80005c6:	4603      	mov	r3, r0
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d146      	bne.n	800065c <disparar+0xd8>
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x+4, getDisparo()->posicion_y + 3, 1);
 80005ce:	f7ff fde5 	bl	800019c <getDisparo>
 80005d2:	4603      	mov	r3, r0
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	3304      	adds	r3, #4
 80005da:	b29c      	uxth	r4, r3
 80005dc:	f7ff fdde 	bl	800019c <getDisparo>
 80005e0:	4603      	mov	r3, r0
 80005e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80005e6:	b29d      	uxth	r5, r3
 80005e8:	f7ff fdd8 	bl	800019c <getDisparo>
 80005ec:	4603      	mov	r3, r0
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	3304      	adds	r3, #4
 80005f4:	b29e      	uxth	r6, r3
 80005f6:	f7ff fdd1 	bl	800019c <getDisparo>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000600:	b29b      	uxth	r3, r3
 8000602:	3303      	adds	r3, #3
 8000604:	b29b      	uxth	r3, r3
 8000606:	2201      	movs	r2, #1
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	4632      	mov	r2, r6
 800060c:	4629      	mov	r1, r5
 800060e:	4620      	mov	r0, r4
 8000610:	f000 fcaa 	bl	8000f68 <SSD1306_DrawLine>
				//disparar(disparo[i].posicion_x, &disparo[i].posicion_y);
				getDisparo()->posicion_y = getDisparo()->posicion_y - 8;
 8000614:	f7ff fdc2 	bl	800019c <getDisparo>
 8000618:	4603      	mov	r3, r0
 800061a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	3b08      	subs	r3, #8
 8000622:	b2dc      	uxtb	r4, r3
 8000624:	f7ff fdba 	bl	800019c <getDisparo>
 8000628:	4603      	mov	r3, r0
 800062a:	b262      	sxtb	r2, r4
 800062c:	705a      	strb	r2, [r3, #1]


				if(getDisparo()->posicion_y <= 0){
 800062e:	f7ff fdb5 	bl	800019c <getDisparo>
 8000632:	4603      	mov	r3, r0
 8000634:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000638:	2b00      	cmp	r3, #0
 800063a:	dc0f      	bgt.n	800065c <disparar+0xd8>
					getDisparo()->disparo = false;
 800063c:	f7ff fdae 	bl	800019c <getDisparo>
 8000640:	4603      	mov	r3, r0
 8000642:	2200      	movs	r2, #0
 8000644:	709a      	strb	r2, [r3, #2]
					getDisparo()->posicion_y = 58;
 8000646:	f7ff fda9 	bl	800019c <getDisparo>
 800064a:	4603      	mov	r3, r0
 800064c:	223a      	movs	r2, #58	; 0x3a
 800064e:	705a      	strb	r2, [r3, #1]
					*numero_disparos = *numero_disparos - 1;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	701a      	strb	r2, [r3, #0]

			}
		//}


}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 ff96 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f834 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f8fa 	bl	8000868 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000674:	f000 f88c 	bl	8000790 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000678:	f000 f8c8 	bl	800080c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800067c:	f003 fc3e 	bl	8003efc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueJoystPant */
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <main+0x54>)
 8000682:	2106      	movs	r1, #6
 8000684:	200a      	movs	r0, #10
 8000686:	f003 fd49 	bl	800411c <osMessageQueueNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <main+0x58>)
 800068e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of JoystickTask */
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000690:	4a0b      	ldr	r2, [pc, #44]	; (80006c0 <main+0x5c>)
 8000692:	2100      	movs	r1, #0
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <main+0x60>)
 8000696:	f003 fc97 	bl	8003fc8 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <main+0x64>)
 800069e:	6013      	str	r3, [r2, #0]

  /* creation of PantallaTask */
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 80006a0:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <main+0x68>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	480a      	ldr	r0, [pc, #40]	; (80006d0 <main+0x6c>)
 80006a6:	f003 fc8f 	bl	8003fc8 <osThreadNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a09      	ldr	r2, [pc, #36]	; (80006d4 <main+0x70>)
 80006ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b0:	f003 fc56 	bl	8003f60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x50>
 80006b6:	bf00      	nop
 80006b8:	08006e80 	.word	0x08006e80
 80006bc:	20000104 	.word	0x20000104
 80006c0:	08006e38 	.word	0x08006e38
 80006c4:	0800095d 	.word	0x0800095d
 80006c8:	200000fc 	.word	0x200000fc
 80006cc:	08006e5c 	.word	0x08006e5c
 80006d0:	080009e1 	.word	0x080009e1
 80006d4:	20000100 	.word	0x20000100

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e2:	2228      	movs	r2, #40	; 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fb28 	bl	8006d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000724:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fbee 	bl	8002f10 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800073a:	f000 fa3f 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fe5a 	bl	8003414 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000766:	f000 fa29 	bl	8000bbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800076a:	2302      	movs	r3, #2
 800076c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800076e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000772:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f003 f80a 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000782:	f000 fa1b 	bl	8000bbc <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_ADC1_Init+0x74>)
 80007a2:	4a19      	ldr	r2, [pc, #100]	; (8000808 <MX_ADC1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ADC1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_ADC1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_ADC1_Init+0x74>)
 80007ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_ADC1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC1_Init+0x74>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_ADC1_Init+0x74>)
 80007ce:	f000 ff15 	bl	80015fc <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 f9f0 	bl	8000bbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_ADC1_Init+0x74>)
 80007ee:	f001 f99d 	bl	8001b2c <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007f8:	f000 f9e0 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000078 	.word	0x20000078
 8000808:	40012400 	.word	0x40012400

0800080c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C1_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <MX_I2C1_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_I2C1_Init+0x50>)
 8000818:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_I2C1_Init+0x58>)
 800081a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_I2C1_Init+0x50>)
 800082a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800082e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_I2C1_Init+0x50>)
 800084a:	f001 fd97 	bl	800237c <HAL_I2C_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000854:	f000 f9b2 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000a8 	.word	0x200000a8
 8000860:	40005400 	.word	0x40005400
 8000864:	00061a80 	.word	0x00061a80

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_GPIO_Init+0xe8>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a33      	ldr	r2, [pc, #204]	; (8000950 <MX_GPIO_Init+0xe8>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_GPIO_Init+0xe8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0310 	and.w	r3, r3, #16
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_GPIO_Init+0xe8>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <MX_GPIO_Init+0xe8>)
 800089a:	f043 0320 	orr.w	r3, r3, #32
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_GPIO_Init+0xe8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xe8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <MX_GPIO_Init+0xe8>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0xe8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_GPIO_Init+0xe8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_GPIO_Init+0xe8>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_GPIO_Init+0xe8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <MX_GPIO_Init+0xec>)
 80008e4:	f001 fd31 	bl	800234a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008f0:	f001 fd2b 	bl	800234a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2302      	movs	r3, #2
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4619      	mov	r1, r3
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_GPIO_Init+0xec>)
 800090e:	f001 fb81 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000912:	2304      	movs	r3, #4
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	2301      	movs	r3, #1
 800091c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <MX_GPIO_Init+0xf0>)
 8000926:	f001 fb75 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2302      	movs	r3, #2
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0xf0>)
 8000944:	f001 fb66 	bl	8002014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	40011000 	.word	0x40011000
 8000958:	40010800 	.word	0x40010800

0800095c <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	botones_t joystick;

	//uint16_t val;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000964:	f004 fef2 	bl	800574c <xTaskGetTickCount>
 8000968:	4603      	mov	r3, r0
 800096a:	60bb      	str	r3, [r7, #8]

  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 800096c:	4818      	ldr	r0, [pc, #96]	; (80009d0 <entryJoystick+0x74>)
 800096e:	f000 ff1d 	bl	80017ac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000972:	210a      	movs	r1, #10
 8000974:	4816      	ldr	r0, [pc, #88]	; (80009d0 <entryJoystick+0x74>)
 8000976:	f000 ffc7 	bl	8001908 <HAL_ADC_PollForConversion>
	  joystick.x_value = HAL_ADC_GetValue(&hadc1);
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <entryJoystick+0x74>)
 800097c:	f001 f8ca 	bl	8001b14 <HAL_ADC_GetValue>
 8000980:	4603      	mov	r3, r0
 8000982:	b29b      	uxth	r3, r3
 8000984:	81bb      	strh	r3, [r7, #12]

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000986:	2104      	movs	r1, #4
 8000988:	4812      	ldr	r0, [pc, #72]	; (80009d4 <entryJoystick+0x78>)
 800098a:	f001 fcc7 	bl	800231c <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <entryJoystick+0x3e>
		  joystick.boton = true;
 8000994:	2301      	movs	r3, #1
 8000996:	743b      	strb	r3, [r7, #16]
 8000998:	e001      	b.n	800099e <entryJoystick+0x42>
	  }
	  else{
		  joystick.boton = false;
 800099a:	2300      	movs	r3, #0
 800099c:	743b      	strb	r3, [r7, #16]
	  }

	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <entryJoystick+0x7c>)
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	f107 010c 	add.w	r1, r7, #12
 80009a6:	2300      	movs	r3, #0
 80009a8:	2200      	movs	r2, #0
 80009aa:	f003 fc3d 	bl	8004228 <osMessageQueuePut>
 80009ae:	6178      	str	r0, [r7, #20]
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d005      	beq.n	80009c2 <entryJoystick+0x66>
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009bc:	4807      	ldr	r0, [pc, #28]	; (80009dc <entryJoystick+0x80>)
 80009be:	f001 fcc4 	bl	800234a <HAL_GPIO_WritePin>

	  vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2132      	movs	r1, #50	; 0x32
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fd2f 	bl	800542c <vTaskDelayUntil>
  {
 80009ce:	e7cd      	b.n	800096c <entryJoystick+0x10>
 80009d0:	20000078 	.word	0x20000078
 80009d4:	40010800 	.word	0x40010800
 80009d8:	20000104 	.word	0x20000104
 80009dc:	40011000 	.word	0x40011000

080009e0 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 80009e8:	f000 f956 	bl	8000c98 <SSD1306_Init>
	SSD1306_Clear();
 80009ec:	f000 fbb7 	bl	800115e <SSD1306_Clear>
	SSD1306_UpdateScreen();
 80009f0:	f000 fa16 	bl	8000e20 <SSD1306_UpdateScreen>

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 80009f4:	f7ff fbdc 	bl	80001b0 <playerInit>
	InvaderInit();
 80009f8:	f7ff fc24 	bl	8000244 <InvaderInit>
	disparoInit();
 80009fc:	f7ff fdb0 	bl	8000560 <disparoInit>


	uint8_t vel = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	77fb      	strb	r3, [r7, #31]
	uint8_t conteo = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]

	orientacion_t orientacion = mov_derecha;		//Se comienza el movimiento hacia la derecha.
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73bb      	strb	r3, [r7, #14]
	dificultad.velocidad_horizontal = 1;
 8000a0c:	4b5e      	ldr	r3, [pc, #376]	; (8000b88 <entryPantalla+0x1a8>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 1;
 8000a12:	4b5d      	ldr	r3, [pc, #372]	; (8000b88 <entryPantalla+0x1a8>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	705a      	strb	r2, [r3, #1]


	//Para el disparo.
	uint8_t numero_disparos = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	737b      	strb	r3, [r7, #13]

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);
 8000a1c:	4b5b      	ldr	r3, [pc, #364]	; (8000b8c <entryPantalla+0x1ac>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	f107 0110 	add.w	r1, r7, #16
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f003 fc71 	bl	8004310 <osMessageQueueGet>
 8000a2e:	61b8      	str	r0, [r7, #24]

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <entryPantalla+0x64>
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3c:	4854      	ldr	r0, [pc, #336]	; (8000b90 <entryPantalla+0x1b0>)
 8000a3e:	f001 fc84 	bl	800234a <HAL_GPIO_WritePin>
 8000a42:	e09a      	b.n	8000b7a <entryPantalla+0x19a>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4a:	4851      	ldr	r0, [pc, #324]	; (8000b90 <entryPantalla+0x1b0>)
 8000a4c:	f001 fc7d 	bl	800234a <HAL_GPIO_WritePin>

		plotPlayer(joystick.x_value, getPlayer());
 8000a50:	8a3c      	ldrh	r4, [r7, #16]
 8000a52:	f7ff fb7d 	bl	8000150 <getPlayer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f7ff fbb4 	bl	80001c8 <plotPlayer>
		plotAliens(&orientacion, vel, &conteo);
 8000a60:	f107 020f 	add.w	r2, r7, #15
 8000a64:	7ff9      	ldrb	r1, [r7, #31]
 8000a66:	f107 030e 	add.w	r3, r7, #14
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fc2e 	bl	80002cc <plotAliens>
		vel++;
 8000a70:	7ffb      	ldrb	r3, [r7, #31]
 8000a72:	3301      	adds	r3, #1
 8000a74:	77fb      	strb	r3, [r7, #31]

		disparar(&numero_disparos);
 8000a76:	f107 030d 	add.w	r3, r7, #13
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fd82 	bl	8000584 <disparar>


		//Si se dispara a una alien

		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000a80:	2300      	movs	r3, #0
 8000a82:	77bb      	strb	r3, [r7, #30]
 8000a84:	e058      	b.n	8000b38 <entryPantalla+0x158>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000a86:	2300      	movs	r3, #0
 8000a88:	777b      	strb	r3, [r7, #29]
 8000a8a:	e04f      	b.n	8000b2c <entryPantalla+0x14c>

				if( (getDisparo()->posicion_x >= getAlien(y,x)->posicion_X) &&  (getDisparo()->posicion_x <= getAlien(y,x)->posicion_X + 15)){
 8000a8c:	f7ff fb86 	bl	800019c <getDisparo>
 8000a90:	4603      	mov	r3, r0
 8000a92:	781c      	ldrb	r4, [r3, #0]
 8000a94:	7f7a      	ldrb	r2, [r7, #29]
 8000a96:	7fbb      	ldrb	r3, [r7, #30]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fb62 	bl	8000164 <getAlien>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	429c      	cmp	r4, r3
 8000aa6:	d33e      	bcc.n	8000b26 <entryPantalla+0x146>
 8000aa8:	f7ff fb78 	bl	800019c <getDisparo>
 8000aac:	4603      	mov	r3, r0
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461c      	mov	r4, r3
 8000ab2:	7f7a      	ldrb	r2, [r7, #29]
 8000ab4:	7fbb      	ldrb	r3, [r7, #30]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fb53 	bl	8000164 <getAlien>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	330f      	adds	r3, #15
 8000ac4:	429c      	cmp	r4, r3
 8000ac6:	dc2e      	bgt.n	8000b26 <entryPantalla+0x146>
					if( (getDisparo()->posicion_y >= getAlien(y,x)->posicion_Y) && (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + 7) ){
 8000ac8:	f7ff fb68 	bl	800019c <getDisparo>
 8000acc:	4603      	mov	r3, r0
 8000ace:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ad2:	461c      	mov	r4, r3
 8000ad4:	7f7a      	ldrb	r2, [r7, #29]
 8000ad6:	7fbb      	ldrb	r3, [r7, #30]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb42 	bl	8000164 <getAlien>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	785b      	ldrb	r3, [r3, #1]
 8000ae4:	429c      	cmp	r4, r3
 8000ae6:	db1e      	blt.n	8000b26 <entryPantalla+0x146>
 8000ae8:	f7ff fb58 	bl	800019c <getDisparo>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000af2:	461c      	mov	r4, r3
 8000af4:	7f7a      	ldrb	r2, [r7, #29]
 8000af6:	7fbb      	ldrb	r3, [r7, #30]
 8000af8:	4611      	mov	r1, r2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff fb32 	bl	8000164 <getAlien>
 8000b00:	4603      	mov	r3, r0
 8000b02:	785b      	ldrb	r3, [r3, #1]
 8000b04:	3307      	adds	r3, #7
 8000b06:	429c      	cmp	r4, r3
 8000b08:	dc0d      	bgt.n	8000b26 <entryPantalla+0x146>
						getAlien(y,x)->vivo = false;
 8000b0a:	7f7a      	ldrb	r2, [r7, #29]
 8000b0c:	7fbb      	ldrb	r3, [r7, #30]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb27 	bl	8000164 <getAlien>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2200      	movs	r2, #0
 8000b1a:	709a      	strb	r2, [r3, #2]
						getDisparo()->posicion_y = false;
 8000b1c:	f7ff fb3e 	bl	800019c <getDisparo>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2200      	movs	r2, #0
 8000b24:	705a      	strb	r2, [r3, #1]
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000b26:	7f7b      	ldrb	r3, [r7, #29]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	777b      	strb	r3, [r7, #29]
 8000b2c:	7f7b      	ldrb	r3, [r7, #29]
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	d9ac      	bls.n	8000a8c <entryPantalla+0xac>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000b32:	7fbb      	ldrb	r3, [r7, #30]
 8000b34:	3301      	adds	r3, #1
 8000b36:	77bb      	strb	r3, [r7, #30]
 8000b38:	7fbb      	ldrb	r3, [r7, #30]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d9a3      	bls.n	8000a86 <entryPantalla+0xa6>

				}
			}
		}

		SSD1306_DrawPixel(0,0,1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2100      	movs	r1, #0
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f9b2 	bl	8000eac <SSD1306_DrawPixel>


		//Prender led si se apreta el boton
		if(joystick.boton == true){
 8000b48:	7d3b      	ldrb	r3, [r7, #20]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d10f      	bne.n	8000b6e <entryPantalla+0x18e>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <entryPantalla+0x1b4>)
 8000b56:	f001 fbf8 	bl	800234a <HAL_GPIO_WritePin>
			//disparoOK = 1;
			numero_disparos++;
 8000b5a:	7b7b      	ldrb	r3, [r7, #13]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	737b      	strb	r3, [r7, #13]

			if(numero_disparos > 1){
 8000b62:	7b7b      	ldrb	r3, [r7, #13]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d908      	bls.n	8000b7a <entryPantalla+0x19a>
				numero_disparos = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	737b      	strb	r3, [r7, #13]
 8000b6c:	e005      	b.n	8000b7a <entryPantalla+0x19a>
			}


		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <entryPantalla+0x1b4>)
 8000b76:	f001 fbe8 	bl	800234a <HAL_GPIO_WritePin>


	}


    SSD1306_UpdateScreen(); // update screen
 8000b7a:	f000 f951 	bl	8000e20 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f97c 	bl	8000e7c <SSD1306_Fill>
  {
 8000b84:	e74a      	b.n	8000a1c <entryPantalla+0x3c>
 8000b86:	bf00      	nop
 8000b88:	20000074 	.word	0x20000074
 8000b8c:	20000104 	.word	0x20000104
 8000b90:	40011000 	.word	0x40011000
 8000b94:	40010800 	.word	0x40010800

08000b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000baa:	f000 fd0b 	bl	80015c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40000800 	.word	0x40000800

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>

08000bc6 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	81fb      	strh	r3, [r7, #14]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	81bb      	strh	r3, [r7, #12]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be0:	3307      	adds	r3, #7
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	da00      	bge.n	8000be8 <SSD1306_DrawBitmap+0x22>
 8000be6:	3307      	adds	r3, #7
 8000be8:	10db      	asrs	r3, r3, #3
 8000bea:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	82bb      	strh	r3, [r7, #20]
 8000bf4:	e044      	b.n	8000c80 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	827b      	strh	r3, [r7, #18]
 8000bfa:	e02f      	b.n	8000c5c <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000bfc:	8a7b      	ldrh	r3, [r7, #18]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	75fb      	strb	r3, [r7, #23]
 8000c0c:	e012      	b.n	8000c34 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000c0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c12:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000c16:	fb03 f202 	mul.w	r2, r3, r2
 8000c1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da00      	bge.n	8000c24 <SSD1306_DrawBitmap+0x5e>
 8000c22:	3307      	adds	r3, #7
 8000c24:	10db      	asrs	r3, r3, #3
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	4413      	add	r3, r2
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da09      	bge.n	8000c50 <SSD1306_DrawBitmap+0x8a>
 8000c3c:	89fa      	ldrh	r2, [r7, #14]
 8000c3e:	8a7b      	ldrh	r3, [r7, #18]
 8000c40:	4413      	add	r3, r2
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	89b9      	ldrh	r1, [r7, #12]
 8000c46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f92e 	bl	8000eac <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000c50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	3301      	adds	r3, #1
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	827b      	strh	r3, [r7, #18]
 8000c5c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbc9      	blt.n	8000bfc <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000c68:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	82bb      	strh	r3, [r7, #20]
 8000c74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	81bb      	strh	r3, [r7, #12]
 8000c80:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000c84:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbb4      	blt.n	8000bf6 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c9e:	f000 fa67 	bl	8001170 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000ca2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2178      	movs	r1, #120	; 0x78
 8000caa:	485b      	ldr	r0, [pc, #364]	; (8000e18 <SSD1306_Init+0x180>)
 8000cac:	f001 fda8 	bl	8002800 <HAL_I2C_IsDeviceReady>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e0a9      	b.n	8000e0e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000cba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000cbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cc0:	e002      	b.n	8000cc8 <SSD1306_Init+0x30>
		p--;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f9      	bne.n	8000cc2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000cce:	22ae      	movs	r2, #174	; 0xae
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	; 0x78
 8000cd4:	f000 fac6 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000cd8:	2220      	movs	r2, #32
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2078      	movs	r0, #120	; 0x78
 8000cde:	f000 fac1 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	; 0x78
 8000ce8:	f000 fabc 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000cec:	22b0      	movs	r2, #176	; 0xb0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2078      	movs	r0, #120	; 0x78
 8000cf2:	f000 fab7 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000cf6:	22c8      	movs	r2, #200	; 0xc8
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	; 0x78
 8000cfc:	f000 fab2 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2078      	movs	r0, #120	; 0x78
 8000d06:	f000 faad 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	; 0x78
 8000d10:	f000 faa8 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d14:	2240      	movs	r2, #64	; 0x40
 8000d16:	2100      	movs	r1, #0
 8000d18:	2078      	movs	r0, #120	; 0x78
 8000d1a:	f000 faa3 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000d1e:	2281      	movs	r2, #129	; 0x81
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	; 0x78
 8000d24:	f000 fa9e 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000d28:	22ff      	movs	r2, #255	; 0xff
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2078      	movs	r0, #120	; 0x78
 8000d2e:	f000 fa99 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000d32:	22a1      	movs	r2, #161	; 0xa1
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	; 0x78
 8000d38:	f000 fa94 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000d3c:	22a6      	movs	r2, #166	; 0xa6
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2078      	movs	r0, #120	; 0x78
 8000d42:	f000 fa8f 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000d46:	22a8      	movs	r2, #168	; 0xa8
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	; 0x78
 8000d4c:	f000 fa8a 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000d50:	223f      	movs	r2, #63	; 0x3f
 8000d52:	2100      	movs	r1, #0
 8000d54:	2078      	movs	r0, #120	; 0x78
 8000d56:	f000 fa85 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d5a:	22a4      	movs	r2, #164	; 0xa4
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	; 0x78
 8000d60:	f000 fa80 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000d64:	22d3      	movs	r2, #211	; 0xd3
 8000d66:	2100      	movs	r1, #0
 8000d68:	2078      	movs	r0, #120	; 0x78
 8000d6a:	f000 fa7b 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	; 0x78
 8000d74:	f000 fa76 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d78:	22d5      	movs	r2, #213	; 0xd5
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	; 0x78
 8000d7e:	f000 fa71 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d82:	22f0      	movs	r2, #240	; 0xf0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	; 0x78
 8000d88:	f000 fa6c 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d8c:	22d9      	movs	r2, #217	; 0xd9
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2078      	movs	r0, #120	; 0x78
 8000d92:	f000 fa67 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d96:	2222      	movs	r2, #34	; 0x22
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	; 0x78
 8000d9c:	f000 fa62 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000da0:	22da      	movs	r2, #218	; 0xda
 8000da2:	2100      	movs	r1, #0
 8000da4:	2078      	movs	r0, #120	; 0x78
 8000da6:	f000 fa5d 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000daa:	2212      	movs	r2, #18
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	; 0x78
 8000db0:	f000 fa58 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000db4:	22db      	movs	r2, #219	; 0xdb
 8000db6:	2100      	movs	r1, #0
 8000db8:	2078      	movs	r0, #120	; 0x78
 8000dba:	f000 fa53 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	; 0x78
 8000dc4:	f000 fa4e 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000dc8:	228d      	movs	r2, #141	; 0x8d
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2078      	movs	r0, #120	; 0x78
 8000dce:	f000 fa49 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000dd2:	2214      	movs	r2, #20
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	; 0x78
 8000dd8:	f000 fa44 	bl	8001264 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ddc:	22af      	movs	r2, #175	; 0xaf
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	; 0x78
 8000de2:	f000 fa3f 	bl	8001264 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000de6:	222e      	movs	r2, #46	; 0x2e
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	; 0x78
 8000dec:	f000 fa3a 	bl	8001264 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 f843 	bl	8000e7c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000df6:	f000 f813 	bl	8000e20 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <SSD1306_Init+0x184>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SSD1306_Init+0x184>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SSD1306_Init+0x184>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000e0c:	2301      	movs	r3, #1
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000a8 	.word	0x200000a8
 8000e1c:	20000508 	.word	0x20000508

08000e20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e01d      	b.n	8000e68 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	3b50      	subs	r3, #80	; 0x50
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	2078      	movs	r0, #120	; 0x78
 8000e38:	f000 fa14 	bl	8001264 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2078      	movs	r0, #120	; 0x78
 8000e42:	f000 fa0f 	bl	8001264 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000e46:	2210      	movs	r2, #16
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2078      	movs	r0, #120	; 0x78
 8000e4c:	f000 fa0a 	bl	8001264 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	01db      	lsls	r3, r3, #7
 8000e54:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <SSD1306_UpdateScreen+0x58>)
 8000e56:	441a      	add	r2, r3
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	2078      	movs	r0, #120	; 0x78
 8000e5e:	f000 f99b 	bl	8001198 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	3301      	adds	r3, #1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	d9de      	bls.n	8000e2c <SSD1306_UpdateScreen+0xc>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000108 	.word	0x20000108

08000e7c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <SSD1306_Fill+0x14>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e000      	b.n	8000e92 <SSD1306_Fill+0x16>
 8000e90:	23ff      	movs	r3, #255	; 0xff
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	4619      	mov	r1, r3
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <SSD1306_Fill+0x2c>)
 8000e9a:	f005 ff4f 	bl	8006d3c <memset>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000108 	.word	0x20000108

08000eac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	80bb      	strh	r3, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	70fb      	strb	r3, [r7, #3]
	if (
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ec2:	d848      	bhi.n	8000f56 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec8:	d845      	bhi.n	8000f56 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <SSD1306_DrawPixel+0xb4>)
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d006      	beq.n	8000ee0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000ed2:	78fb      	ldrb	r3, [r7, #3]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf0c      	ite	eq
 8000ed8:	2301      	moveq	r3, #1
 8000eda:	2300      	movne	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d11a      	bne.n	8000f1c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ee6:	88fa      	ldrh	r2, [r7, #6]
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	08db      	lsrs	r3, r3, #3
 8000eec:	b298      	uxth	r0, r3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	01db      	lsls	r3, r3, #7
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <SSD1306_DrawPixel+0xb8>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	88bb      	ldrh	r3, [r7, #4]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	2101      	movs	r1, #1
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b259      	sxtb	r1, r3
 8000f0c:	88fa      	ldrh	r2, [r7, #6]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	01db      	lsls	r3, r3, #7
 8000f12:	4413      	add	r3, r2
 8000f14:	b2c9      	uxtb	r1, r1
 8000f16:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <SSD1306_DrawPixel+0xb8>)
 8000f18:	54d1      	strb	r1, [r2, r3]
 8000f1a:	e01d      	b.n	8000f58 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f1c:	88fa      	ldrh	r2, [r7, #6]
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	b298      	uxth	r0, r3
 8000f24:	4603      	mov	r3, r0
 8000f26:	01db      	lsls	r3, r3, #7
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <SSD1306_DrawPixel+0xb8>)
 8000f2c:	5cd3      	ldrb	r3, [r2, r3]
 8000f2e:	b25a      	sxtb	r2, r3
 8000f30:	88bb      	ldrh	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	2101      	movs	r1, #1
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	4013      	ands	r3, r2
 8000f44:	b259      	sxtb	r1, r3
 8000f46:	88fa      	ldrh	r2, [r7, #6]
 8000f48:	4603      	mov	r3, r0
 8000f4a:	01db      	lsls	r3, r3, #7
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b2c9      	uxtb	r1, r1
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <SSD1306_DrawPixel+0xb8>)
 8000f52:	54d1      	strb	r1, [r2, r3]
 8000f54:	e000      	b.n	8000f58 <SSD1306_DrawPixel+0xac>
		return;
 8000f56:	bf00      	nop
	}
}
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000508 	.word	0x20000508
 8000f64:	20000108 	.word	0x20000108

08000f68 <SSD1306_DrawLine>:
	/* Everything OK, zero should be returned */
	return *str;
}
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	4611      	mov	r1, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	4623      	mov	r3, r4
 8000f78:	80fb      	strh	r3, [r7, #6]
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80bb      	strh	r3, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	807b      	strh	r3, [r7, #2]
 8000f82:	4613      	mov	r3, r2
 8000f84:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	2b7f      	cmp	r3, #127	; 0x7f
 8000f8a:	d901      	bls.n	8000f90 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000f8c:	237f      	movs	r3, #127	; 0x7f
 8000f8e:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	2b7f      	cmp	r3, #127	; 0x7f
 8000f94:	d901      	bls.n	8000f9a <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000f96:	237f      	movs	r3, #127	; 0x7f
 8000f98:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000f9a:	88bb      	ldrh	r3, [r7, #4]
 8000f9c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f9e:	d901      	bls.n	8000fa4 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000fa0:	233f      	movs	r3, #63	; 0x3f
 8000fa2:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000fa4:	883b      	ldrh	r3, [r7, #0]
 8000fa6:	2b3f      	cmp	r3, #63	; 0x3f
 8000fa8:	d901      	bls.n	8000fae <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000faa:	233f      	movs	r3, #63	; 0x3f
 8000fac:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000fae:	88fa      	ldrh	r2, [r7, #6]
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d205      	bcs.n	8000fc2 <SSD1306_DrawLine+0x5a>
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	e004      	b.n	8000fcc <SSD1306_DrawLine+0x64>
 8000fc2:	88fa      	ldrh	r2, [r7, #6]
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000fce:	88ba      	ldrh	r2, [r7, #4]
 8000fd0:	883b      	ldrh	r3, [r7, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d205      	bcs.n	8000fe2 <SSD1306_DrawLine+0x7a>
 8000fd6:	883a      	ldrh	r2, [r7, #0]
 8000fd8:	88bb      	ldrh	r3, [r7, #4]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	e004      	b.n	8000fec <SSD1306_DrawLine+0x84>
 8000fe2:	88ba      	ldrh	r2, [r7, #4]
 8000fe4:	883b      	ldrh	r3, [r7, #0]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000fee:	88fa      	ldrh	r2, [r7, #6]
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d201      	bcs.n	8000ffa <SSD1306_DrawLine+0x92>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e001      	b.n	8000ffe <SSD1306_DrawLine+0x96>
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001000:	88ba      	ldrh	r2, [r7, #4]
 8001002:	883b      	ldrh	r3, [r7, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d201      	bcs.n	800100c <SSD1306_DrawLine+0xa4>
 8001008:	2301      	movs	r3, #1
 800100a:	e001      	b.n	8001010 <SSD1306_DrawLine+0xa8>
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001012:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001016:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800101a:	429a      	cmp	r2, r3
 800101c:	dd06      	ble.n	800102c <SSD1306_DrawLine+0xc4>
 800101e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001022:	0fda      	lsrs	r2, r3, #31
 8001024:	4413      	add	r3, r2
 8001026:	105b      	asrs	r3, r3, #1
 8001028:	b21b      	sxth	r3, r3
 800102a:	e006      	b.n	800103a <SSD1306_DrawLine+0xd2>
 800102c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001030:	0fda      	lsrs	r2, r3, #31
 8001032:	4413      	add	r3, r2
 8001034:	105b      	asrs	r3, r3, #1
 8001036:	425b      	negs	r3, r3
 8001038:	b21b      	sxth	r3, r3
 800103a:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800103c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d129      	bne.n	8001098 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001044:	883a      	ldrh	r2, [r7, #0]
 8001046:	88bb      	ldrh	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	d205      	bcs.n	8001058 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800104c:	883b      	ldrh	r3, [r7, #0]
 800104e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001054:	893b      	ldrh	r3, [r7, #8]
 8001056:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	429a      	cmp	r2, r3
 800105e:	d205      	bcs.n	800106c <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001068:	893b      	ldrh	r3, [r7, #8]
 800106a:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800106c:	88bb      	ldrh	r3, [r7, #4]
 800106e:	82bb      	strh	r3, [r7, #20]
 8001070:	e00c      	b.n	800108c <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001072:	8ab9      	ldrh	r1, [r7, #20]
 8001074:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff16 	bl	8000eac <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001080:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001084:	b29b      	uxth	r3, r3
 8001086:	3301      	adds	r3, #1
 8001088:	b29b      	uxth	r3, r3
 800108a:	82bb      	strh	r3, [r7, #20]
 800108c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001090:	883b      	ldrh	r3, [r7, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	dded      	ble.n	8001072 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001096:	e05f      	b.n	8001158 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001098:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d129      	bne.n	80010f4 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80010a0:	883a      	ldrh	r2, [r7, #0]
 80010a2:	88bb      	ldrh	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d205      	bcs.n	80010b4 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80010a8:	883b      	ldrh	r3, [r7, #0]
 80010aa:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80010ac:	88bb      	ldrh	r3, [r7, #4]
 80010ae:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80010b0:	893b      	ldrh	r3, [r7, #8]
 80010b2:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d205      	bcs.n	80010c8 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80010c4:	893b      	ldrh	r3, [r7, #8]
 80010c6:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	82bb      	strh	r3, [r7, #20]
 80010cc:	e00c      	b.n	80010e8 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80010ce:	8abb      	ldrh	r3, [r7, #20]
 80010d0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010d4:	88b9      	ldrh	r1, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fee8 	bl	8000eac <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80010dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	82bb      	strh	r3, [r7, #20]
 80010e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dded      	ble.n	80010ce <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80010f2:	e031      	b.n	8001158 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80010f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010f8:	88b9      	ldrh	r1, [r7, #4]
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fed5 	bl	8000eac <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	429a      	cmp	r2, r3
 8001108:	d103      	bne.n	8001112 <SSD1306_DrawLine+0x1aa>
 800110a:	88ba      	ldrh	r2, [r7, #4]
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d021      	beq.n	8001156 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001112:	8afb      	ldrh	r3, [r7, #22]
 8001114:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001116:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800111a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800111e:	425b      	negs	r3, r3
 8001120:	429a      	cmp	r2, r3
 8001122:	dd08      	ble.n	8001136 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001124:	8afa      	ldrh	r2, [r7, #22]
 8001126:	8a3b      	ldrh	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b29b      	uxth	r3, r3
 800112c:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800112e:	89fa      	ldrh	r2, [r7, #14]
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	4413      	add	r3, r2
 8001134:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001136:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800113a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800113e:	429a      	cmp	r2, r3
 8001140:	dad8      	bge.n	80010f4 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001142:	8afa      	ldrh	r2, [r7, #22]
 8001144:	8a7b      	ldrh	r3, [r7, #18]
 8001146:	4413      	add	r3, r2
 8001148:	b29b      	uxth	r3, r3
 800114a:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800114c:	89ba      	ldrh	r2, [r7, #12]
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001154:	e7ce      	b.n	80010f4 <SSD1306_DrawLine+0x18c>
			break;
 8001156:	bf00      	nop
		} 
	}
}
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}

0800115e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fe8a 	bl	8000e7c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001168:	f7ff fe5a 	bl	8000e20 <SSD1306_UpdateScreen>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <ssd1306_I2C_Init+0x24>)
 8001178:	607b      	str	r3, [r7, #4]
	while(p>0)
 800117a:	e002      	b.n	8001182 <ssd1306_I2C_Init+0x12>
		p--;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f9      	bne.n	800117c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	0003d090 	.word	0x0003d090

08001198 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b0c7      	sub	sp, #284	; 0x11c
 800119c:	af02      	add	r7, sp, #8
 800119e:	4604      	mov	r4, r0
 80011a0:	4608      	mov	r0, r1
 80011a2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80011a6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80011aa:	600a      	str	r2, [r1, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011b2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80011b6:	4622      	mov	r2, r4
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011be:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80011c2:	4602      	mov	r2, r0
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011ce:	460a      	mov	r2, r1
 80011d0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80011d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80011d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80011da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011de:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80011e2:	7812      	ldrb	r2, [r2, #0]
 80011e4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80011ec:	e015      	b.n	800121a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80011ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80011f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80011f6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	441a      	add	r2, r3
 80011fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001202:	3301      	adds	r3, #1
 8001204:	7811      	ldrb	r1, [r2, #0]
 8001206:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800120a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800120e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001210:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001214:	3301      	adds	r3, #1
 8001216:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800121a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800121e:	b29b      	uxth	r3, r3
 8001220:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001224:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001228:	8812      	ldrh	r2, [r2, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d8df      	bhi.n	80011ee <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800122e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001232:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b299      	uxth	r1, r3
 800123a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800123e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	b29b      	uxth	r3, r3
 8001248:	f107 020c 	add.w	r2, r7, #12
 800124c:	200a      	movs	r0, #10
 800124e:	9000      	str	r0, [sp, #0]
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <ssd1306_I2C_WriteMulti+0xc8>)
 8001252:	f001 f9d7 	bl	8002604 <HAL_I2C_Master_Transmit>
}
 8001256:	bf00      	nop
 8001258:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	200000a8 	.word	0x200000a8

08001264 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af02      	add	r7, sp, #8
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	460b      	mov	r3, r1
 8001270:	71bb      	strb	r3, [r7, #6]
 8001272:	4613      	mov	r3, r2
 8001274:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800127a:	797b      	ldrb	r3, [r7, #5]
 800127c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	b299      	uxth	r1, r3
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	230a      	movs	r3, #10
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2302      	movs	r3, #2
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <ssd1306_I2C_Write+0x38>)
 800128e:	f001 f9b9 	bl	8002604 <HAL_I2C_Master_Transmit>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000a8 	.word	0x200000a8

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_MspInit+0x68>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_MspInit+0x68>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_MspInit+0x68>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_MspInit+0x68>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_MspInit+0x68>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_MspInit+0x68>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	210f      	movs	r1, #15
 80012da:	f06f 0001 	mvn.w	r0, #1
 80012de:	f000 fe6e 	bl	8001fbe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_MspInit+0x6c>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_MspInit+0x6c>)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000

08001310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_ADC_MspInit+0x6c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d121      	bne.n	8001374 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_ADC_MspInit+0x70>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_ADC_MspInit+0x70>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_ADC_MspInit+0x70>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_ADC_MspInit+0x70>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <HAL_ADC_MspInit+0x70>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_ADC_MspInit+0x70>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001360:	2301      	movs	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001364:	2303      	movs	r3, #3
 8001366:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_ADC_MspInit+0x74>)
 8001370:	f000 fe50 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40012400 	.word	0x40012400
 8001380:	40021000 	.word	0x40021000
 8001384:	40010800 	.word	0x40010800

08001388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a15      	ldr	r2, [pc, #84]	; (80013f8 <HAL_I2C_MspInit+0x70>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d123      	bne.n	80013f0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c0:	23c0      	movs	r3, #192	; 0xc0
 80013c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c4:	2312      	movs	r3, #18
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <HAL_I2C_MspInit+0x78>)
 80013d4:	f000 fe1e 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e2:	61d3      	str	r3, [r2, #28]
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_I2C_MspInit+0x74>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40005400 	.word	0x40005400
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010c00 	.word	0x40010c00

08001404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08e      	sub	sp, #56	; 0x38
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_InitTick+0xe8>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a33      	ldr	r2, [pc, #204]	; (80014ec <HAL_InitTick+0xe8>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b31      	ldr	r3, [pc, #196]	; (80014ec <HAL_InitTick+0xe8>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001432:	f107 0210 	add.w	r2, r7, #16
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f002 f959 	bl	80036f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001448:	2b00      	cmp	r3, #0
 800144a:	d103      	bne.n	8001454 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800144c:	f002 f92a 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8001450:	6378      	str	r0, [r7, #52]	; 0x34
 8001452:	e004      	b.n	800145e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001454:	f002 f926 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 8001458:	4603      	mov	r3, r0
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001460:	4a23      	ldr	r2, [pc, #140]	; (80014f0 <HAL_InitTick+0xec>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	3b01      	subs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <HAL_InitTick+0xf0>)
 800146e:	4a22      	ldr	r2, [pc, #136]	; (80014f8 <HAL_InitTick+0xf4>)
 8001470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <HAL_InitTick+0xf0>)
 8001474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001478:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800147a:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <HAL_InitTick+0xf0>)
 800147c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <HAL_InitTick+0xf0>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_InitTick+0xf0>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_InitTick+0xf0>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001492:	4818      	ldr	r0, [pc, #96]	; (80014f4 <HAL_InitTick+0xf0>)
 8001494:	f002 fae8 	bl	8003a68 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800149e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d11b      	bne.n	80014de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80014a6:	4813      	ldr	r0, [pc, #76]	; (80014f4 <HAL_InitTick+0xf0>)
 80014a8:	f002 fb36 	bl	8003b18 <HAL_TIM_Base_Start_IT>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d111      	bne.n	80014de <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014ba:	201e      	movs	r0, #30
 80014bc:	f000 fd9b 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b0f      	cmp	r3, #15
 80014c4:	d808      	bhi.n	80014d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014c6:	2200      	movs	r2, #0
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	201e      	movs	r0, #30
 80014cc:	f000 fd77 	bl	8001fbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d0:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_InitTick+0xf8>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e002      	b.n	80014de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3738      	adds	r7, #56	; 0x38
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	431bde83 	.word	0x431bde83
 80014f4:	20000510 	.word	0x20000510
 80014f8:	40000800 	.word	0x40000800
 80014fc:	20000004 	.word	0x20000004

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
	...

0800152c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM4_IRQHandler+0x10>)
 8001532:	f002 fb43 	bl	8003bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000510 	.word	0x20000510

08001540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr

0800154c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800154c:	f7ff fff8 	bl	8001540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001552:	490c      	ldr	r1, [pc, #48]	; (8001584 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001554:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001558:	e002      	b.n	8001560 <LoopCopyDataInit>

0800155a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800155c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155e:	3304      	adds	r3, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001564:	d3f9      	bcc.n	800155a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001568:	4c09      	ldr	r4, [pc, #36]	; (8001590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800156c:	e001      	b.n	8001572 <LoopFillZerobss>

0800156e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001570:	3204      	adds	r2, #4

08001572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001574:	d3fb      	bcc.n	800156e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001576:	f005 fbe9 	bl	8006d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800157a:	f7ff f873 	bl	8000664 <main>
  bx lr
 800157e:	4770      	bx	lr
  ldr r0, =_sdata
 8001580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001584:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001588:	08006ee0 	.word	0x08006ee0
  ldr r2, =_sbss
 800158c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001590:	20001ea4 	.word	0x20001ea4

08001594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_2_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_Init+0x28>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_Init+0x28>)
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fcfd 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	200f      	movs	r0, #15
 80015b0:	f7ff ff28 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fe74 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40022000 	.word	0x40022000

080015c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x1c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_IncTick+0x20>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <HAL_IncTick+0x20>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000558 	.word	0x20000558

080015e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <HAL_GetTick+0x10>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000558 	.word	0x20000558

080015fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0be      	b.n	800179c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	d109      	bne.n	8001640 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fe68 	bl	8001310 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fbc5 	bl	8001dd0 <ADC_ConversionStop_Disable>
 8001646:	4603      	mov	r3, r0
 8001648:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	f040 8099 	bne.w	800178a <HAL_ADC_Init+0x18e>
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 8095 	bne.w	800178a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001668:	f023 0302 	bic.w	r3, r3, #2
 800166c:	f043 0202 	orr.w	r2, r3, #2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800167c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7b1b      	ldrb	r3, [r3, #12]
 8001682:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001684:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	4313      	orrs	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001694:	d003      	beq.n	800169e <HAL_ADC_Init+0xa2>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d102      	bne.n	80016a4 <HAL_ADC_Init+0xa8>
 800169e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a2:	e000      	b.n	80016a6 <HAL_ADC_Init+0xaa>
 80016a4:	2300      	movs	r3, #0
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7d1b      	ldrb	r3, [r3, #20]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d119      	bne.n	80016e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7b1b      	ldrb	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	035a      	lsls	r2, r3, #13
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e00b      	b.n	80016e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f043 0220 	orr.w	r2, r3, #32
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	f043 0201 	orr.w	r2, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <HAL_ADC_Init+0x1a8>)
 8001704:	4013      	ands	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	430b      	orrs	r3, r1
 800170e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001718:	d003      	beq.n	8001722 <HAL_ADC_Init+0x126>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d104      	bne.n	800172c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	3b01      	subs	r3, #1
 8001728:	051b      	lsls	r3, r3, #20
 800172a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	430a      	orrs	r2, r1
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_ADC_Init+0x1ac>)
 8001748:	4013      	ands	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	d10b      	bne.n	8001768 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	f023 0303 	bic.w	r3, r3, #3
 800175e:	f043 0201 	orr.w	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001766:	e018      	b.n	800179a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	f023 0312 	bic.w	r3, r3, #18
 8001770:	f043 0210 	orr.w	r2, r3, #16
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001788:	e007      	b.n	800179a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	f043 0210 	orr.w	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800179a:	7dfb      	ldrb	r3, [r7, #23]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	ffe1f7fd 	.word	0xffe1f7fd
 80017a8:	ff1f0efe 	.word	0xff1f0efe

080017ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Start+0x1a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e098      	b.n	80018f8 <HAL_ADC_Start+0x14c>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 faa4 	bl	8001d1c <ADC_Enable>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 8087 	bne.w	80018ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a41      	ldr	r2, [pc, #260]	; (8001900 <HAL_ADC_Start+0x154>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d105      	bne.n	800180a <HAL_ADC_Start+0x5e>
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_ADC_Start+0x158>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d115      	bne.n	8001836 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001820:	2b00      	cmp	r3, #0
 8001822:	d026      	beq.n	8001872 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800182c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001834:	e01d      	b.n	8001872 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a2f      	ldr	r2, [pc, #188]	; (8001904 <HAL_ADC_Start+0x158>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d004      	beq.n	8001856 <HAL_ADC_Start+0xaa>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a2b      	ldr	r2, [pc, #172]	; (8001900 <HAL_ADC_Start+0x154>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10d      	bne.n	8001872 <HAL_ADC_Start+0xc6>
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_ADC_Start+0x158>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800186a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f023 0206 	bic.w	r2, r3, #6
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
 800188a:	e002      	b.n	8001892 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f06f 0202 	mvn.w	r2, #2
 80018a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018b2:	d113      	bne.n	80018dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018b8:	4a11      	ldr	r2, [pc, #68]	; (8001900 <HAL_ADC_Start+0x154>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d105      	bne.n	80018ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_ADC_Start+0x158>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	e00c      	b.n	80018f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e003      	b.n	80018f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40012800 	.word	0x40012800
 8001904:	40012400 	.word	0x40012400

08001908 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800191e:	f7ff fe63 	bl	80015e8 <HAL_GetTick>
 8001922:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	f043 0220 	orr.w	r2, r3, #32
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0d3      	b.n	8001af2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d131      	bne.n	80019bc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001962:	2b00      	cmp	r3, #0
 8001964:	d12a      	bne.n	80019bc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001966:	e021      	b.n	80019ac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196e:	d01d      	beq.n	80019ac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <HAL_ADC_PollForConversion+0x7e>
 8001976:	f7ff fe37 	bl	80015e8 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d212      	bcs.n	80019ac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10b      	bne.n	80019ac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f043 0204 	orr.w	r2, r3, #4
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0a2      	b.n	8001af2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0d6      	beq.n	8001968 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ba:	e070      	b.n	8001a9e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019bc:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <HAL_ADC_PollForConversion+0x1f4>)
 80019be:	681c      	ldr	r4, [r3, #0]
 80019c0:	2002      	movs	r0, #2
 80019c2:	f001 ff9b 	bl	80038fc <HAL_RCCEx_GetPeriphCLKFreq>
 80019c6:	4603      	mov	r3, r0
 80019c8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_ADC_PollForConversion+0x1f8>)
 80019d4:	400b      	ands	r3, r1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_ADC_PollForConversion+0x104>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68d9      	ldr	r1, [r3, #12]
 80019e0:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <HAL_ADC_PollForConversion+0x1fc>)
 80019e2:	400b      	ands	r3, r1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d111      	bne.n	8001a0c <HAL_ADC_PollForConversion+0x104>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6919      	ldr	r1, [r3, #16]
 80019ee:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <HAL_ADC_PollForConversion+0x200>)
 80019f0:	400b      	ands	r3, r1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d108      	bne.n	8001a08 <HAL_ADC_PollForConversion+0x100>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68d9      	ldr	r1, [r3, #12]
 80019fc:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <HAL_ADC_PollForConversion+0x204>)
 80019fe:	400b      	ands	r3, r1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_PollForConversion+0x100>
 8001a04:	2314      	movs	r3, #20
 8001a06:	e020      	b.n	8001a4a <HAL_ADC_PollForConversion+0x142>
 8001a08:	2329      	movs	r3, #41	; 0x29
 8001a0a:	e01e      	b.n	8001a4a <HAL_ADC_PollForConversion+0x142>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6919      	ldr	r1, [r3, #16]
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_ADC_PollForConversion+0x200>)
 8001a14:	400b      	ands	r3, r1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_ADC_PollForConversion+0x120>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68d9      	ldr	r1, [r3, #12]
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <HAL_ADC_PollForConversion+0x204>)
 8001a22:	400b      	ands	r3, r1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00d      	beq.n	8001a44 <HAL_ADC_PollForConversion+0x13c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6919      	ldr	r1, [r3, #16]
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_ADC_PollForConversion+0x208>)
 8001a30:	400b      	ands	r3, r1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d108      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x140>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68d9      	ldr	r1, [r3, #12]
 8001a3c:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <HAL_ADC_PollForConversion+0x208>)
 8001a3e:	400b      	ands	r3, r1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x140>
 8001a44:	2354      	movs	r3, #84	; 0x54
 8001a46:	e000      	b.n	8001a4a <HAL_ADC_PollForConversion+0x142>
 8001a48:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a50:	e021      	b.n	8001a96 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d01a      	beq.n	8001a90 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <HAL_ADC_PollForConversion+0x168>
 8001a60:	f7ff fdc2 	bl	80015e8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d20f      	bcs.n	8001a90 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d90b      	bls.n	8001a90 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f043 0204 	orr.w	r2, r3, #4
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e030      	b.n	8001af2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d8d9      	bhi.n	8001a52 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0212 	mvn.w	r2, #18
 8001aa6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001abe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ac2:	d115      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d111      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd90      	pop	{r4, r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000000 	.word	0x20000000
 8001b00:	24924924 	.word	0x24924924
 8001b04:	00924924 	.word	0x00924924
 8001b08:	12492492 	.word	0x12492492
 8001b0c:	00492492 	.word	0x00492492
 8001b10:	00249249 	.word	0x00249249

08001b14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x20>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e0dc      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x1da>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d81c      	bhi.n	8001b96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b05      	subs	r3, #5
 8001b6e:	221f      	movs	r2, #31
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4019      	ands	r1, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	3b05      	subs	r3, #5
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
 8001b94:	e03c      	b.n	8001c10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d81c      	bhi.n	8001bd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b23      	subs	r3, #35	; 0x23
 8001bb0:	221f      	movs	r2, #31
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	4019      	ands	r1, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b23      	subs	r3, #35	; 0x23
 8001bca:	fa00 f203 	lsl.w	r2, r0, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd6:	e01b      	b.n	8001c10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b41      	subs	r3, #65	; 0x41
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4019      	ands	r1, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	3b41      	subs	r3, #65	; 0x41
 8001c04:	fa00 f203 	lsl.w	r2, r0, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	d91c      	bls.n	8001c52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68d9      	ldr	r1, [r3, #12]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4613      	mov	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	3b1e      	subs	r3, #30
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4019      	ands	r1, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6898      	ldr	r0, [r3, #8]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	3b1e      	subs	r3, #30
 8001c44:	fa00 f203 	lsl.w	r2, r0, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	e019      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6919      	ldr	r1, [r3, #16]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	2207      	movs	r2, #7
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4019      	ands	r1, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6898      	ldr	r0, [r3, #8]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d003      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c92:	2b11      	cmp	r3, #17
 8001c94:	d132      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d125      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d126      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d11a      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a13      	ldr	r2, [pc, #76]	; (8001d18 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9a      	lsrs	r2, r3, #18
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f9      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x1b2>
 8001cea:	e007      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40012400 	.word	0x40012400
 8001d14:	20000000 	.word	0x20000000
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d040      	beq.n	8001dbc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <ADC_Enable+0xac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <ADC_Enable+0xb0>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d58:	e002      	b.n	8001d60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f9      	bne.n	8001d5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d66:	f7ff fc3f 	bl	80015e8 <HAL_GetTick>
 8001d6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d6c:	e01f      	b.n	8001dae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d6e:	f7ff fc3b 	bl	80015e8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d918      	bls.n	8001dae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d011      	beq.n	8001dae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	f043 0201 	orr.w	r2, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e007      	b.n	8001dbe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d1d8      	bne.n	8001d6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	431bde83 	.word	0x431bde83

08001dd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d12e      	bne.n	8001e48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dfa:	f7ff fbf5 	bl	80015e8 <HAL_GetTick>
 8001dfe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e00:	e01b      	b.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e02:	f7ff fbf1 	bl	80015e8 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d914      	bls.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d10d      	bne.n	8001e3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e007      	b.n	8001e4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d0dc      	beq.n	8001e02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4906      	ldr	r1, [pc, #24]	; (8001eec <__NVIC_EnableIRQ+0x34>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
         );
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff4f 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff64 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ffb2 	bl	8001f44 <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff81 	bl	8001ef0 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff57 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b08b      	sub	sp, #44	; 0x2c
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e169      	b.n	80022fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002028:	2201      	movs	r2, #1
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 8158 	bne.w	80022f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4a9a      	ldr	r2, [pc, #616]	; (80022b4 <HAL_GPIO_Init+0x2a0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d05e      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002050:	4a98      	ldr	r2, [pc, #608]	; (80022b4 <HAL_GPIO_Init+0x2a0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d875      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002056:	4a98      	ldr	r2, [pc, #608]	; (80022b8 <HAL_GPIO_Init+0x2a4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d058      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 800205c:	4a96      	ldr	r2, [pc, #600]	; (80022b8 <HAL_GPIO_Init+0x2a4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d86f      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002062:	4a96      	ldr	r2, [pc, #600]	; (80022bc <HAL_GPIO_Init+0x2a8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d052      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002068:	4a94      	ldr	r2, [pc, #592]	; (80022bc <HAL_GPIO_Init+0x2a8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d869      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800206e:	4a94      	ldr	r2, [pc, #592]	; (80022c0 <HAL_GPIO_Init+0x2ac>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d04c      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002074:	4a92      	ldr	r2, [pc, #584]	; (80022c0 <HAL_GPIO_Init+0x2ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d863      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800207a:	4a92      	ldr	r2, [pc, #584]	; (80022c4 <HAL_GPIO_Init+0x2b0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d046      	beq.n	800210e <HAL_GPIO_Init+0xfa>
 8002080:	4a90      	ldr	r2, [pc, #576]	; (80022c4 <HAL_GPIO_Init+0x2b0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d85d      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 8002086:	2b12      	cmp	r3, #18
 8002088:	d82a      	bhi.n	80020e0 <HAL_GPIO_Init+0xcc>
 800208a:	2b12      	cmp	r3, #18
 800208c:	d859      	bhi.n	8002142 <HAL_GPIO_Init+0x12e>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <HAL_GPIO_Init+0x80>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	0800210f 	.word	0x0800210f
 8002098:	080020e9 	.word	0x080020e9
 800209c:	080020fb 	.word	0x080020fb
 80020a0:	0800213d 	.word	0x0800213d
 80020a4:	08002143 	.word	0x08002143
 80020a8:	08002143 	.word	0x08002143
 80020ac:	08002143 	.word	0x08002143
 80020b0:	08002143 	.word	0x08002143
 80020b4:	08002143 	.word	0x08002143
 80020b8:	08002143 	.word	0x08002143
 80020bc:	08002143 	.word	0x08002143
 80020c0:	08002143 	.word	0x08002143
 80020c4:	08002143 	.word	0x08002143
 80020c8:	08002143 	.word	0x08002143
 80020cc:	08002143 	.word	0x08002143
 80020d0:	08002143 	.word	0x08002143
 80020d4:	08002143 	.word	0x08002143
 80020d8:	080020f1 	.word	0x080020f1
 80020dc:	08002105 	.word	0x08002105
 80020e0:	4a79      	ldr	r2, [pc, #484]	; (80022c8 <HAL_GPIO_Init+0x2b4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020e6:	e02c      	b.n	8002142 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	623b      	str	r3, [r7, #32]
          break;
 80020ee:	e029      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	3304      	adds	r3, #4
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e024      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	3308      	adds	r3, #8
 8002100:	623b      	str	r3, [r7, #32]
          break;
 8002102:	e01f      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	330c      	adds	r3, #12
 800210a:	623b      	str	r3, [r7, #32]
          break;
 800210c:	e01a      	b.n	8002144 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002116:	2304      	movs	r3, #4
 8002118:	623b      	str	r3, [r7, #32]
          break;
 800211a:	e013      	b.n	8002144 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002124:	2308      	movs	r3, #8
 8002126:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	611a      	str	r2, [r3, #16]
          break;
 800212e:	e009      	b.n	8002144 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002130:	2308      	movs	r3, #8
 8002132:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	615a      	str	r2, [r3, #20]
          break;
 800213a:	e003      	b.n	8002144 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
          break;
 8002140:	e000      	b.n	8002144 <HAL_GPIO_Init+0x130>
          break;
 8002142:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2bff      	cmp	r3, #255	; 0xff
 8002148:	d801      	bhi.n	800214e <HAL_GPIO_Init+0x13a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	e001      	b.n	8002152 <HAL_GPIO_Init+0x13e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3304      	adds	r3, #4
 8002152:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2bff      	cmp	r3, #255	; 0xff
 8002158:	d802      	bhi.n	8002160 <HAL_GPIO_Init+0x14c>
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	e002      	b.n	8002166 <HAL_GPIO_Init+0x152>
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	3b08      	subs	r3, #8
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	210f      	movs	r1, #15
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	401a      	ands	r2, r3
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80b1 	beq.w	80022f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002194:	4b4d      	ldr	r3, [pc, #308]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6193      	str	r3, [r2, #24]
 80021a0:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_GPIO_Init+0x2b8>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ac:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4013      	ands	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a40      	ldr	r2, [pc, #256]	; (80022d4 <HAL_GPIO_Init+0x2c0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d013      	beq.n	8002200 <HAL_GPIO_Init+0x1ec>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3f      	ldr	r2, [pc, #252]	; (80022d8 <HAL_GPIO_Init+0x2c4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00d      	beq.n	80021fc <HAL_GPIO_Init+0x1e8>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3e      	ldr	r2, [pc, #248]	; (80022dc <HAL_GPIO_Init+0x2c8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <HAL_GPIO_Init+0x1e4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3d      	ldr	r2, [pc, #244]	; (80022e0 <HAL_GPIO_Init+0x2cc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_GPIO_Init+0x1e0>
 80021f0:	2303      	movs	r3, #3
 80021f2:	e006      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e004      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e002      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_GPIO_Init+0x1ee>
 8002200:	2300      	movs	r3, #0
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	f002 0203 	and.w	r2, r2, #3
 8002208:	0092      	lsls	r2, r2, #2
 800220a:	4093      	lsls	r3, r2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002212:	492f      	ldr	r1, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x2bc>)
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	3302      	adds	r3, #2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800222c:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	492c      	ldr	r1, [pc, #176]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	43db      	mvns	r3, r3
 8002242:	4928      	ldr	r1, [pc, #160]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002244:	4013      	ands	r3, r2
 8002246:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d006      	beq.n	8002262 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002254:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4922      	ldr	r1, [pc, #136]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	60cb      	str	r3, [r1, #12]
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	43db      	mvns	r3, r3
 800226a:	491e      	ldr	r1, [pc, #120]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800226c:	4013      	ands	r3, r2
 800226e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4918      	ldr	r1, [pc, #96]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	43db      	mvns	r3, r3
 8002292:	4914      	ldr	r1, [pc, #80]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 8002294:	4013      	ands	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d021      	beq.n	80022e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_GPIO_Init+0x2d0>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e021      	b.n	80022f6 <HAL_GPIO_Init+0x2e2>
 80022b2:	bf00      	nop
 80022b4:	10320000 	.word	0x10320000
 80022b8:	10310000 	.word	0x10310000
 80022bc:	10220000 	.word	0x10220000
 80022c0:	10210000 	.word	0x10210000
 80022c4:	10120000 	.word	0x10120000
 80022c8:	10110000 	.word	0x10110000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40010800 	.word	0x40010800
 80022d8:	40010c00 	.word	0x40010c00
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	4909      	ldr	r1, [pc, #36]	; (8002318 <HAL_GPIO_Init+0x304>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	3301      	adds	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	f47f ae8e 	bne.w	8002028 <HAL_GPIO_Init+0x14>
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	372c      	adds	r7, #44	; 0x2c
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e001      	b.n	800233e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]
 8002356:	4613      	mov	r3, r2
 8002358:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235a:	787b      	ldrb	r3, [r7, #1]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002366:	e003      	b.n	8002370 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	041a      	lsls	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	611a      	str	r2, [r3, #16]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
	...

0800237c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e12b      	b.n	80025e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fff0 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023e0:	f001 f960 	bl	80036a4 <HAL_RCC_GetPCLK1Freq>
 80023e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a81      	ldr	r2, [pc, #516]	; (80025f0 <HAL_I2C_Init+0x274>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d807      	bhi.n	8002400 <HAL_I2C_Init+0x84>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a80      	ldr	r2, [pc, #512]	; (80025f4 <HAL_I2C_Init+0x278>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bf94      	ite	ls
 80023f8:	2301      	movls	r3, #1
 80023fa:	2300      	movhi	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e006      	b.n	800240e <HAL_I2C_Init+0x92>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a7d      	ldr	r2, [pc, #500]	; (80025f8 <HAL_I2C_Init+0x27c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	bf94      	ite	ls
 8002408:	2301      	movls	r3, #1
 800240a:	2300      	movhi	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0e7      	b.n	80025e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a78      	ldr	r2, [pc, #480]	; (80025fc <HAL_I2C_Init+0x280>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a6a      	ldr	r2, [pc, #424]	; (80025f0 <HAL_I2C_Init+0x274>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d802      	bhi.n	8002450 <HAL_I2C_Init+0xd4>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3301      	adds	r3, #1
 800244e:	e009      	b.n	8002464 <HAL_I2C_Init+0xe8>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	4a69      	ldr	r2, [pc, #420]	; (8002600 <HAL_I2C_Init+0x284>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	3301      	adds	r3, #1
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	430b      	orrs	r3, r1
 800246a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	495c      	ldr	r1, [pc, #368]	; (80025f0 <HAL_I2C_Init+0x274>)
 8002480:	428b      	cmp	r3, r1
 8002482:	d819      	bhi.n	80024b8 <HAL_I2C_Init+0x13c>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e59      	subs	r1, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002492:	1c59      	adds	r1, r3, #1
 8002494:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002498:	400b      	ands	r3, r1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_I2C_Init+0x138>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1e59      	subs	r1, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b2:	e051      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 80024b4:	2304      	movs	r3, #4
 80024b6:	e04f      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d111      	bne.n	80024e4 <HAL_I2C_Init+0x168>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1e58      	subs	r0, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6859      	ldr	r1, [r3, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	e012      	b.n	800250a <HAL_I2C_Init+0x18e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Init+0x196>
 800250e:	2301      	movs	r3, #1
 8002510:	e022      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10e      	bne.n	8002538 <HAL_I2C_Init+0x1bc>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e58      	subs	r0, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6859      	ldr	r1, [r3, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	440b      	add	r3, r1
 8002528:	fbb0 f3f3 	udiv	r3, r0, r3
 800252c:	3301      	adds	r3, #1
 800252e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002536:	e00f      	b.n	8002558 <HAL_I2C_Init+0x1dc>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1e58      	subs	r0, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	0099      	lsls	r1, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	fbb0 f3f3 	udiv	r3, r0, r3
 800254e:	3301      	adds	r3, #1
 8002550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	6809      	ldr	r1, [r1, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6911      	ldr	r1, [r2, #16]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	4311      	orrs	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	430b      	orrs	r3, r1
 800259a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	000186a0 	.word	0x000186a0
 80025f4:	001e847f 	.word	0x001e847f
 80025f8:	003d08ff 	.word	0x003d08ff
 80025fc:	431bde83 	.word	0x431bde83
 8002600:	10624dd3 	.word	0x10624dd3

08002604 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	461a      	mov	r2, r3
 8002610:	460b      	mov	r3, r1
 8002612:	817b      	strh	r3, [r7, #10]
 8002614:	4613      	mov	r3, r2
 8002616:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7fe ffe6 	bl	80015e8 <HAL_GetTick>
 800261c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	f040 80e0 	bne.w	80027ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2319      	movs	r3, #25
 8002632:	2201      	movs	r2, #1
 8002634:	4970      	ldr	r1, [pc, #448]	; (80027f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa92 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
 8002644:	e0d3      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_I2C_Master_Transmit+0x50>
 8002650:	2302      	movs	r3, #2
 8002652:	e0cc      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d007      	beq.n	800267a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002688:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2221      	movs	r2, #33	; 0x21
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2210      	movs	r2, #16
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	893a      	ldrh	r2, [r7, #8]
 80026aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a50      	ldr	r2, [pc, #320]	; (80027fc <HAL_I2C_Master_Transmit+0x1f8>)
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026bc:	8979      	ldrh	r1, [r7, #10]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	6a3a      	ldr	r2, [r7, #32]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f9ca 	bl	8002a5c <I2C_MasterRequestWrite>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e08d      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026e8:	e066      	b.n	80027b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6a39      	ldr	r1, [r7, #32]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fb50 	bl	8002d94 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d107      	bne.n	8002712 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e06b      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d11b      	bne.n	800278c <HAL_I2C_Master_Transmit+0x188>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d017      	beq.n	800278c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	781a      	ldrb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	6a39      	ldr	r1, [r7, #32]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fb47 	bl	8002e24 <I2C_WaitOnBTFFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00d      	beq.n	80027b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e01a      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d194      	bne.n	80026ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00100002 	.word	0x00100002
 80027fc:	ffff0000 	.word	0xffff0000

08002800 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7fe feea 	bl	80015e8 <HAL_GetTick>
 8002814:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	f040 8111 	bne.w	8002a4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2319      	movs	r3, #25
 800282e:	2201      	movs	r2, #1
 8002830:	4988      	ldr	r1, [pc, #544]	; (8002a54 <HAL_I2C_IsDeviceReady+0x254>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f994 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	e104      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2C_IsDeviceReady+0x50>
 800284c:	2302      	movs	r3, #2
 800284e:	e0fd      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d007      	beq.n	8002876 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002884:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2224      	movs	r2, #36	; 0x24
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a70      	ldr	r2, [pc, #448]	; (8002a58 <HAL_I2C_IsDeviceReady+0x258>)
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f952 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d0:	d103      	bne.n	80028da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0b6      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fe7b 	bl	80015e8 <HAL_GetTick>
 80028f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002922:	e025      	b.n	8002970 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002924:	f7fe fe60 	bl	80015e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d302      	bcc.n	800293a <HAL_I2C_IsDeviceReady+0x13a>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22a0      	movs	r2, #160	; 0xa0
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b02      	cmp	r3, #2
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2ba0      	cmp	r3, #160	; 0xa0
 800297a:	d005      	beq.n	8002988 <HAL_I2C_IsDeviceReady+0x188>
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_I2C_IsDeviceReady+0x188>
 8002982:	7dbb      	ldrb	r3, [r7, #22]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0cd      	beq.n	8002924 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d129      	bne.n	80029f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2319      	movs	r3, #25
 80029ca:	2201      	movs	r2, #1
 80029cc:	4921      	ldr	r1, [pc, #132]	; (8002a54 <HAL_I2C_IsDeviceReady+0x254>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8c6 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e036      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e02c      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	490f      	ldr	r1, [pc, #60]	; (8002a54 <HAL_I2C_IsDeviceReady+0x254>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f8a2 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e012      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f4ff af32 	bcc.w	800289a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	00100002 	.word	0x00100002
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d006      	beq.n	8002a86 <I2C_MasterRequestWrite+0x2a>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d003      	beq.n	8002a86 <I2C_MasterRequestWrite+0x2a>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a84:	d108      	bne.n	8002a98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e00b      	b.n	8002ab0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b12      	cmp	r3, #18
 8002a9e:	d107      	bne.n	8002ab0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f84f 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad6:	d103      	bne.n	8002ae0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e035      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aec:	d108      	bne.n	8002b00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	e01b      	b.n	8002b38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b00:	897b      	ldrh	r3, [r7, #10]
 8002b02:	11db      	asrs	r3, r3, #7
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f063 030f 	orn	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	490e      	ldr	r1, [pc, #56]	; (8002b58 <I2C_MasterRequestWrite+0xfc>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f898 	bl	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e010      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <I2C_MasterRequestWrite+0x100>)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f888 	bl	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	00010008 	.word	0x00010008
 8002b5c:	00010002 	.word	0x00010002

08002b60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b70:	e048      	b.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d044      	beq.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7a:	f7fe fd35 	bl	80015e8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d139      	bne.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10d      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	e00c      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d116      	bne.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e023      	b.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d10d      	bne.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	e00c      	b.n	8002c44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	43da      	mvns	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4013      	ands	r3, r2
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d093      	beq.n	8002b72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c62:	e071      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c72:	d123      	bne.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f043 0204 	orr.w	r2, r3, #4
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e067      	b.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc2:	d041      	beq.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc4:	f7fe fc90 	bl	80015e8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d302      	bcc.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d136      	bne.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10c      	bne.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	e00b      	b.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf14      	ite	ne
 8002d10:	2301      	movne	r3, #1
 8002d12:	2300      	moveq	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e021      	b.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	0c1b      	lsrs	r3, r3, #16
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d10c      	bne.n	8002d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e00b      	b.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	43da      	mvns	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4013      	ands	r3, r2
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f47f af6d 	bne.w	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da0:	e034      	b.n	8002e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f886 	bl	8002eb4 <I2C_IsAcknowledgeFailed>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e034      	b.n	8002e1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d028      	beq.n	8002e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dba:	f7fe fc15 	bl	80015e8 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11d      	bne.n	8002e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d016      	beq.n	8002e0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e007      	b.n	8002e1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	d1c3      	bne.n	8002da2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e30:	e034      	b.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f83e 	bl	8002eb4 <I2C_IsAcknowledgeFailed>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e034      	b.n	8002eac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d028      	beq.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4a:	f7fe fbcd 	bl	80015e8 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d302      	bcc.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11d      	bne.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d016      	beq.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e007      	b.n	8002eac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d1c3      	bne.n	8002e32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d11b      	bne.n	8002f04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ed4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e272      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8087 	beq.w	800303e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f30:	4b92      	ldr	r3, [pc, #584]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d00c      	beq.n	8002f56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d112      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5e>
 8002f48:	4b8c      	ldr	r3, [pc, #560]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d10b      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f56:	4b89      	ldr	r3, [pc, #548]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d06c      	beq.n	800303c <HAL_RCC_OscConfig+0x12c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d168      	bne.n	800303c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e24c      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x76>
 8002f78:	4b80      	ldr	r3, [pc, #512]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a7f      	ldr	r2, [pc, #508]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e02e      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x98>
 8002f8e:	4b7b      	ldr	r3, [pc, #492]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7a      	ldr	r2, [pc, #488]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b78      	ldr	r3, [pc, #480]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a77      	ldr	r2, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e01d      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0xbc>
 8002fb2:	4b72      	ldr	r3, [pc, #456]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a71      	ldr	r2, [pc, #452]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6e      	ldr	r2, [pc, #440]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0xd4>
 8002fcc:	4b6b      	ldr	r3, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6a      	ldr	r2, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a67      	ldr	r2, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe fafc 	bl	80015e8 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe faf8 	bl	80015e8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e200      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xe4>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe fae8 	bl	80015e8 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe fae4 	bl	80015e8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1ec      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x10c>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304a:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003056:	4b49      	ldr	r3, [pc, #292]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b08      	cmp	r3, #8
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x18c>
 8003062:	4b46      	ldr	r3, [pc, #280]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e1c0      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4939      	ldr	r1, [pc, #228]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	e03a      	b.n	8003112 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b36      	ldr	r3, [pc, #216]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe fa9d 	bl	80015e8 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fe fa99 	bl	80015e8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e1a1      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	4b2d      	ldr	r3, [pc, #180]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4927      	ldr	r1, [pc, #156]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e015      	b.n	8003112 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <HAL_RCC_OscConfig+0x270>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fa7c 	bl	80015e8 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f4:	f7fe fa78 	bl	80015e8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e180      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d03a      	beq.n	8003194 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <HAL_RCC_OscConfig+0x274>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312c:	f7fe fa5c 	bl	80015e8 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003134:	f7fe fa58 	bl	80015e8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e160      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	4b0d      	ldr	r3, [pc, #52]	; (800317c <HAL_RCC_OscConfig+0x26c>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003152:	2001      	movs	r0, #1
 8003154:	f000 fafe 	bl	8003754 <RCC_Delay>
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_OscConfig+0x274>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003160:	f7fe fa42 	bl	80015e8 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003166:	e00f      	b.n	8003188 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003168:	f7fe fa3e 	bl	80015e8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d908      	bls.n	8003188 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e146      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	42420000 	.word	0x42420000
 8003184:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b92      	ldr	r3, [pc, #584]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1e9      	bne.n	8003168 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a6 	beq.w	80032ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b8b      	ldr	r3, [pc, #556]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4a87      	ldr	r2, [pc, #540]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	61d3      	str	r3, [r2, #28]
 80031be:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <HAL_RCC_OscConfig+0x4c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b7f      	ldr	r3, [pc, #508]	; (80033d8 <HAL_RCC_OscConfig+0x4c8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7e      	ldr	r2, [pc, #504]	; (80033d8 <HAL_RCC_OscConfig+0x4c8>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fe f9ff 	bl	80015e8 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fe f9fb 	bl	80015e8 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b64      	cmp	r3, #100	; 0x64
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e103      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <HAL_RCC_OscConfig+0x4c8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x312>
 8003214:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a6e      	ldr	r2, [pc, #440]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	e02d      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x334>
 800322a:	4b6a      	ldr	r3, [pc, #424]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a69      	ldr	r2, [pc, #420]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6213      	str	r3, [r2, #32]
 8003236:	4b67      	ldr	r3, [pc, #412]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a66      	ldr	r2, [pc, #408]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
 8003242:	e01c      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b05      	cmp	r3, #5
 800324a:	d10c      	bne.n	8003266 <HAL_RCC_OscConfig+0x356>
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	4a60      	ldr	r2, [pc, #384]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003252:	f043 0304 	orr.w	r3, r3, #4
 8003256:	6213      	str	r3, [r2, #32]
 8003258:	4b5e      	ldr	r3, [pc, #376]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4a5d      	ldr	r2, [pc, #372]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	6213      	str	r3, [r2, #32]
 8003264:	e00b      	b.n	800327e <HAL_RCC_OscConfig+0x36e>
 8003266:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	4a5a      	ldr	r2, [pc, #360]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	6213      	str	r3, [r2, #32]
 8003272:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	4a57      	ldr	r2, [pc, #348]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d015      	beq.n	80032b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003286:	f7fe f9af 	bl	80015e8 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fe f9ab 	bl	80015e8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0b1      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	4b4b      	ldr	r3, [pc, #300]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ee      	beq.n	800328e <HAL_RCC_OscConfig+0x37e>
 80032b0:	e014      	b.n	80032dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b2:	f7fe f999 	bl	80015e8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe f995 	bl	80015e8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e09b      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d0:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e2:	4b3c      	ldr	r3, [pc, #240]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a3b      	ldr	r2, [pc, #236]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8087 	beq.w	8003406 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b08      	cmp	r3, #8
 8003302:	d061      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d146      	bne.n	800339a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330c:	4b33      	ldr	r3, [pc, #204]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe f969 	bl	80015e8 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7fe f965 	bl	80015e8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e06d      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d108      	bne.n	8003354 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4921      	ldr	r1, [pc, #132]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a19      	ldr	r1, [r3, #32]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	430b      	orrs	r3, r1
 8003366:	491b      	ldr	r1, [pc, #108]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe f939 	bl	80015e8 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe f935 	bl	80015e8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e03d      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x46a>
 8003398:	e035      	b.n	8003406 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_RCC_OscConfig+0x4cc>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe f922 	bl	80015e8 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe f91e 	bl	80015e8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e026      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x498>
 80033c6:	e01e      	b.n	8003406 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d107      	bne.n	80033e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e019      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40007000 	.word	0x40007000
 80033dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_OscConfig+0x500>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d001      	beq.n	8003406 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0d0      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4965      	ldr	r1, [pc, #404]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800347a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d040      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d115      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e073      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06b      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4936      	ldr	r1, [pc, #216]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fe f870 	bl	80015e8 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe f86c 	bl	80015e8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e053      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d210      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 0207 	bic.w	r2, r3, #7
 800354a:	4922      	ldr	r1, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490a      	ldr	r1, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1cc>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1d0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd ff1e 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40022000 	.word	0x40022000
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08006e98 	.word	0x08006e98
 80035e0:	20000000 	.word	0x20000000
 80035e4:	20000004 	.word	0x20000004

080035e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <HAL_RCC_GetSysClockFreq+0x94>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b04      	cmp	r3, #4
 8003610:	d002      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x30>
 8003612:	2b08      	cmp	r3, #8
 8003614:	d003      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x36>
 8003616:	e027      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_GetSysClockFreq+0x98>)
 800361a:	613b      	str	r3, [r7, #16]
      break;
 800361c:	e027      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	0c9b      	lsrs	r3, r3, #18
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003628:	5cd3      	ldrb	r3, [r2, r3]
 800362a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_GetSysClockFreq+0x94>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	0c5b      	lsrs	r3, r3, #17
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	4a11      	ldr	r2, [pc, #68]	; (8003688 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <HAL_RCC_GetSysClockFreq+0x98>)
 800364a:	fb03 f202 	mul.w	r2, r3, r2
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e004      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a0c      	ldr	r2, [pc, #48]	; (800368c <HAL_RCC_GetSysClockFreq+0xa4>)
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	613b      	str	r3, [r7, #16]
      break;
 8003666:	e002      	b.n	800366e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <HAL_RCC_GetSysClockFreq+0x98>)
 800366a:	613b      	str	r3, [r7, #16]
      break;
 800366c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366e:	693b      	ldr	r3, [r7, #16]
}
 8003670:	4618      	mov	r0, r3
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	007a1200 	.word	0x007a1200
 8003684:	08006eb0 	.word	0x08006eb0
 8003688:	08006ec0 	.word	0x08006ec0
 800368c:	003d0900 	.word	0x003d0900

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr
 80036a0:	20000000 	.word	0x20000000

080036a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036a8:	f7ff fff2 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4903      	ldr	r1, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	08006ea8 	.word	0x08006ea8

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036d0:	f7ff ffde 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	0adb      	lsrs	r3, r3, #11
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4903      	ldr	r1, [pc, #12]	; (80036f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40021000 	.word	0x40021000
 80036f0:	08006ea8 	.word	0x08006ea8

080036f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	220f      	movs	r2, #15
 8003702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_RCC_GetClockConfig+0x58>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0203 	and.w	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003710:	4b0e      	ldr	r3, [pc, #56]	; (800374c <HAL_RCC_GetClockConfig+0x58>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_GetClockConfig+0x58>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_RCC_GetClockConfig+0x58>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	08db      	lsrs	r3, r3, #3
 800372e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_GetClockConfig+0x5c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0207 	and.w	r2, r3, #7
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40021000 	.word	0x40021000
 8003750:	40022000 	.word	0x40022000

08003754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <RCC_Delay+0x34>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <RCC_Delay+0x38>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a5b      	lsrs	r3, r3, #9
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003770:	bf00      	nop
  }
  while (Delay --);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1e5a      	subs	r2, r3, #1
 8003776:	60fa      	str	r2, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f9      	bne.n	8003770 <RCC_Delay+0x1c>
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	20000000 	.word	0x20000000
 800378c:	10624dd3 	.word	0x10624dd3

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d07d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	4a4b      	ldr	r2, [pc, #300]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	61d3      	str	r3, [r2, #28]
 80037c8:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d118      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a42      	ldr	r2, [pc, #264]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f0:	f7fd fefa 	bl	80015e8 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fd fef6 	bl	80015e8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e06d      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d027      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800384a:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fd fec5 	bl	80015e8 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd fec1 	bl	80015e8 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e036      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4917      	ldr	r1, [pc, #92]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	4313      	orrs	r3, r2
 8003894:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	490b      	ldr	r1, [pc, #44]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4904      	ldr	r1, [pc, #16]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	42420440 	.word	0x42420440

080038fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b10      	cmp	r3, #16
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b10      	cmp	r3, #16
 8003922:	f200 808a 	bhi.w	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d045      	beq.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d075      	beq.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003932:	e082      	b.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003934:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800393a:	4b45      	ldr	r3, [pc, #276]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d07b      	beq.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	0c9b      	lsrs	r3, r3, #18
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	4a41      	ldr	r2, [pc, #260]	; (8003a54 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800395e:	4b3c      	ldr	r3, [pc, #240]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0c5b      	lsrs	r3, r3, #17
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800396a:	5cd3      	ldrb	r3, [r2, r3]
 800396c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00d      	beq.n	8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003978:	4a38      	ldr	r2, [pc, #224]	; (8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e004      	b.n	8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4a34      	ldr	r2, [pc, #208]	; (8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003994:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a0:	d102      	bne.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	61bb      	str	r3, [r7, #24]
      break;
 80039a6:	e04a      	b.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
      break;
 80039b6:	e042      	b.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c8:	d108      	bne.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80039d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e01f      	b.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e6:	d109      	bne.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80039f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e00f      	b.n	8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a06:	d11c      	bne.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d016      	beq.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003a14:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003a18:	61bb      	str	r3, [r7, #24]
      break;
 8003a1a:	e012      	b.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a1c:	e011      	b.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a1e:	f7ff fe55 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	0b9b      	lsrs	r3, r3, #14
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	61bb      	str	r3, [r7, #24]
      break;
 8003a38:	e004      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a42:	bf00      	nop
    }
  }
  return (frequency);
 8003a44:	69bb      	ldr	r3, [r7, #24]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	08006ec4 	.word	0x08006ec4
 8003a58:	08006ed4 	.word	0x08006ed4
 8003a5c:	007a1200 	.word	0x007a1200
 8003a60:	003d0900 	.word	0x003d0900
 8003a64:	aaaaaaab 	.word	0xaaaaaaab

08003a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e041      	b.n	8003afe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f839 	bl	8003b06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 f9b4 	bl	8003e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d001      	beq.n	8003b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e03a      	b.n	8003ba6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <HAL_TIM_Base_Start_IT+0x98>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00e      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5a:	d009      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d004      	beq.n	8003b70 <HAL_TIM_Base_Start_IT+0x58>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d111      	bne.n	8003b94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d010      	beq.n	8003ba4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b92:	e007      	b.n	8003ba4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800

08003bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0202 	mvn.w	r2, #2
 8003be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8ed 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8e0 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8ef 	bl	8003df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0204 	mvn.w	r2, #4
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8c3 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8b6 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f8c5 	bl	8003df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b08      	cmp	r3, #8
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0208 	mvn.w	r2, #8
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f899 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f88c 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f89b 	bl	8003df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d122      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d11b      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0210 	mvn.w	r2, #16
 8003ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f86f 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003d00:	e005      	b.n	8003d0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f862 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f871 	bl	8003df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10e      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0201 	mvn.w	r2, #1
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc ff2c 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b80      	cmp	r3, #128	; 0x80
 8003d4c:	d10e      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b80      	cmp	r3, #128	; 0x80
 8003d5a:	d107      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f8bf 	bl	8003eea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d10e      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f835 	bl	8003e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d10e      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d107      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0220 	mvn.w	r2, #32
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f88a 	bl	8003ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a29      	ldr	r2, [pc, #164]	; (8003ecc <TIM_Base_SetConfig+0xb8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00b      	beq.n	8003e44 <TIM_Base_SetConfig+0x30>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e32:	d007      	beq.n	8003e44 <TIM_Base_SetConfig+0x30>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <TIM_Base_SetConfig+0xbc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_Base_SetConfig+0x30>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a25      	ldr	r2, [pc, #148]	; (8003ed4 <TIM_Base_SetConfig+0xc0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d108      	bne.n	8003e56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <TIM_Base_SetConfig+0xb8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00b      	beq.n	8003e76 <TIM_Base_SetConfig+0x62>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d007      	beq.n	8003e76 <TIM_Base_SetConfig+0x62>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <TIM_Base_SetConfig+0xbc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_Base_SetConfig+0x62>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a18      	ldr	r2, [pc, #96]	; (8003ed4 <TIM_Base_SetConfig+0xc0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <TIM_Base_SetConfig+0xb8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d103      	bne.n	8003ebc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	615a      	str	r2, [r3, #20]
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800

08003ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f02:	f3ef 8305 	mrs	r3, IPSR
 8003f06:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f12:	607b      	str	r3, [r7, #4]
  return(result);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <osKernelInitialize+0x32>
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <osKernelInitialize+0x60>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d109      	bne.n	8003f36 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f22:	f3ef 8311 	mrs	r3, BASEPRI
 8003f26:	603b      	str	r3, [r7, #0]
  return(result);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003f2e:	f06f 0305 	mvn.w	r3, #5
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e00c      	b.n	8003f50 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <osKernelInitialize+0x60>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d105      	bne.n	8003f4a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003f3e:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <osKernelInitialize+0x60>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	e002      	b.n	8003f50 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f50:	68fb      	ldr	r3, [r7, #12]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	2000055c 	.word	0x2000055c

08003f60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f66:	f3ef 8305 	mrs	r3, IPSR
 8003f6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f72:	f3ef 8310 	mrs	r3, PRIMASK
 8003f76:	607b      	str	r3, [r7, #4]
  return(result);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <osKernelStart+0x32>
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <osKernelStart+0x64>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d109      	bne.n	8003f9a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f86:	f3ef 8311 	mrs	r3, BASEPRI
 8003f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f92:	f06f 0305 	mvn.w	r3, #5
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e00e      	b.n	8003fb8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <osKernelStart+0x64>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <osKernelStart+0x64>)
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003fa8:	f001 fabe 	bl	8005528 <vTaskStartScheduler>
      stat = osOK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	e002      	b.n	8003fb8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	2000055c 	.word	0x2000055c

08003fc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b092      	sub	sp, #72	; 0x48
 8003fcc:	af04      	add	r7, sp, #16
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fd8:	f3ef 8305 	mrs	r3, IPSR
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 8094 	bne.w	800410e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fea:	623b      	str	r3, [r7, #32]
  return(result);
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 808d 	bne.w	800410e <osThreadNew+0x146>
 8003ff4:	4b48      	ldr	r3, [pc, #288]	; (8004118 <osThreadNew+0x150>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d106      	bne.n	800400a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8004000:	61fb      	str	r3, [r7, #28]
  return(result);
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 8082 	bne.w	800410e <osThreadNew+0x146>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d07e      	beq.n	800410e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004014:	2318      	movs	r3, #24
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004018:	2300      	movs	r3, #0
 800401a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800401c:	f107 031b 	add.w	r3, r7, #27
 8004020:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d045      	beq.n	80040ba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <osThreadNew+0x74>
        name = attr->name;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <osThreadNew+0x9a>
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	2b38      	cmp	r3, #56	; 0x38
 8004054:	d805      	bhi.n	8004062 <osThreadNew+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <osThreadNew+0x9e>
        return (NULL);
 8004062:	2300      	movs	r3, #0
 8004064:	e054      	b.n	8004110 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	089b      	lsrs	r3, r3, #2
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00e      	beq.n	800409c <osThreadNew+0xd4>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b5b      	cmp	r3, #91	; 0x5b
 8004084:	d90a      	bls.n	800409c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <osThreadNew+0xd4>
        mem = 1;
 8004096:	2301      	movs	r3, #1
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
 800409a:	e010      	b.n	80040be <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10c      	bne.n	80040be <osThreadNew+0xf6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d108      	bne.n	80040be <osThreadNew+0xf6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <osThreadNew+0xf6>
          mem = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b8:	e001      	b.n	80040be <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d110      	bne.n	80040e6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040cc:	9202      	str	r2, [sp, #8]
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f001 f80e 	bl	80050fc <xTaskCreateStatic>
 80040e0:	4603      	mov	r3, r0
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	e013      	b.n	800410e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d110      	bne.n	800410e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f001 f858 	bl	80051b4 <xTaskCreate>
 8004104:	4603      	mov	r3, r0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <osThreadNew+0x146>
          hTask = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800410e:	697b      	ldr	r3, [r7, #20]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3738      	adds	r7, #56	; 0x38
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	2000055c 	.word	0x2000055c

0800411c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b08c      	sub	sp, #48	; 0x30
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800412c:	f3ef 8305 	mrs	r3, IPSR
 8004130:	61bb      	str	r3, [r7, #24]
  return(result);
 8004132:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004134:	2b00      	cmp	r3, #0
 8004136:	d16f      	bne.n	8004218 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004138:	f3ef 8310 	mrs	r3, PRIMASK
 800413c:	617b      	str	r3, [r7, #20]
  return(result);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d169      	bne.n	8004218 <osMessageQueueNew+0xfc>
 8004144:	4b37      	ldr	r3, [pc, #220]	; (8004224 <osMessageQueueNew+0x108>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d105      	bne.n	8004158 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800414c:	f3ef 8311 	mrs	r3, BASEPRI
 8004150:	613b      	str	r3, [r7, #16]
  return(result);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d15f      	bne.n	8004218 <osMessageQueueNew+0xfc>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d05c      	beq.n	8004218 <osMessageQueueNew+0xfc>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d059      	beq.n	8004218 <osMessageQueueNew+0xfc>
    mem = -1;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295
 8004168:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d029      	beq.n	80041c4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d012      	beq.n	800419e <osMessageQueueNew+0x82>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b4f      	cmp	r3, #79	; 0x4f
 800417e:	d90e      	bls.n	800419e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	429a      	cmp	r2, r3
 8004196:	d302      	bcc.n	800419e <osMessageQueueNew+0x82>
        mem = 1;
 8004198:	2301      	movs	r3, #1
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	e014      	b.n	80041c8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d110      	bne.n	80041c8 <osMessageQueueNew+0xac>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d108      	bne.n	80041c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <osMessageQueueNew+0xac>
          mem = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	e001      	b.n	80041c8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d10b      	bne.n	80041e6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2100      	movs	r1, #0
 80041d8:	9100      	str	r1, [sp, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fa53 	bl	8004688 <xQueueGenericCreateStatic>
 80041e2:	6278      	str	r0, [r7, #36]	; 0x24
 80041e4:	e008      	b.n	80041f8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d105      	bne.n	80041f8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80041ec:	2200      	movs	r2, #0
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fac0 	bl	8004776 <xQueueGenericCreate>
 80041f6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <osMessageQueueNew+0xf0>
        name = attr->name;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	e001      	b.n	8004210 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004210:	69f9      	ldr	r1, [r7, #28]
 8004212:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004214:	f000 ff16 	bl	8005044 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800421a:	4618      	mov	r0, r3
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	2000055c 	.word	0x2000055c

08004228 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800423c:	2300      	movs	r3, #0
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004240:	f3ef 8305 	mrs	r3, IPSR
 8004244:	61fb      	str	r3, [r7, #28]
  return(result);
 8004246:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10f      	bne.n	800426c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800424c:	f3ef 8310 	mrs	r3, PRIMASK
 8004250:	61bb      	str	r3, [r7, #24]
  return(result);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <osMessageQueuePut+0x44>
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <osMessageQueuePut+0xe0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d12e      	bne.n	80042be <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004260:	f3ef 8311 	mrs	r3, BASEPRI
 8004264:	617b      	str	r3, [r7, #20]
  return(result);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <osMessageQueuePut+0x56>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <osMessageQueuePut+0x56>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800427e:	f06f 0303 	mvn.w	r3, #3
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004284:	e039      	b.n	80042fa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800428a:	f107 0210 	add.w	r2, r7, #16
 800428e:	2300      	movs	r3, #0
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	6a38      	ldr	r0, [r7, #32]
 8004294:	f000 fbce 	bl	8004a34 <xQueueGenericSendFromISR>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d003      	beq.n	80042a6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800429e:	f06f 0302 	mvn.w	r3, #2
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042a4:	e029      	b.n	80042fa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d026      	beq.n	80042fa <osMessageQueuePut+0xd2>
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <osMessageQueuePut+0xe4>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042bc:	e01d      	b.n	80042fa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <osMessageQueuePut+0xa2>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80042ca:	f06f 0303 	mvn.w	r3, #3
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
 80042d0:	e014      	b.n	80042fc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80042d2:	2300      	movs	r3, #0
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6a38      	ldr	r0, [r7, #32]
 80042da:	f000 faad 	bl	8004838 <xQueueGenericSend>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d00b      	beq.n	80042fc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80042ea:	f06f 0301 	mvn.w	r3, #1
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	e004      	b.n	80042fc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80042f2:	f06f 0302 	mvn.w	r3, #2
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	e000      	b.n	80042fc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80042fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3728      	adds	r7, #40	; 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000055c 	.word	0x2000055c
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004326:	f3ef 8305 	mrs	r3, IPSR
 800432a:	61fb      	str	r3, [r7, #28]
  return(result);
 800432c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004332:	f3ef 8310 	mrs	r3, PRIMASK
 8004336:	61bb      	str	r3, [r7, #24]
  return(result);
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <osMessageQueueGet+0x42>
 800433e:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <osMessageQueueGet+0xdc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d12e      	bne.n	80043a4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004346:	f3ef 8311 	mrs	r3, BASEPRI
 800434a:	617b      	str	r3, [r7, #20]
  return(result);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d028      	beq.n	80043a4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <osMessageQueueGet+0x54>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <osMessageQueueGet+0x54>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004364:	f06f 0303 	mvn.w	r3, #3
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800436a:	e038      	b.n	80043de <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004370:	f107 0310 	add.w	r3, r7, #16
 8004374:	461a      	mov	r2, r3
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	6a38      	ldr	r0, [r7, #32]
 800437a:	f000 fcd3 	bl	8004d24 <xQueueReceiveFromISR>
 800437e:	4603      	mov	r3, r0
 8004380:	2b01      	cmp	r3, #1
 8004382:	d003      	beq.n	800438c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004384:	f06f 0302 	mvn.w	r3, #2
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800438a:	e028      	b.n	80043de <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d025      	beq.n	80043de <osMessageQueueGet+0xce>
 8004392:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <osMessageQueueGet+0xe0>)
 8004394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043a2:	e01c      	b.n	80043de <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <osMessageQueueGet+0xa0>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80043b0:	f06f 0303 	mvn.w	r3, #3
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
 80043b6:	e013      	b.n	80043e0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	6a38      	ldr	r0, [r7, #32]
 80043be:	f000 fbd1 	bl	8004b64 <xQueueReceive>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d00b      	beq.n	80043e0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80043ce:	f06f 0301 	mvn.w	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	e004      	b.n	80043e0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80043d6:	f06f 0302 	mvn.w	r3, #2
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	e000      	b.n	80043e0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043de:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3728      	adds	r7, #40	; 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	2000055c 	.word	0x2000055c
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a06      	ldr	r2, [pc, #24]	; (800441c <vApplicationGetIdleTaskMemory+0x28>)
 8004404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4a05      	ldr	r2, [pc, #20]	; (8004420 <vApplicationGetIdleTaskMemory+0x2c>)
 800440a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2280      	movs	r2, #128	; 0x80
 8004410:	601a      	str	r2, [r3, #0]
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	20000560 	.word	0x20000560
 8004420:	200005bc 	.word	0x200005bc

08004424 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <vApplicationGetTimerTaskMemory+0x2c>)
 8004434:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4a06      	ldr	r2, [pc, #24]	; (8004454 <vApplicationGetTimerTaskMemory+0x30>)
 800443a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	200007bc 	.word	0x200007bc
 8004454:	20000818 	.word	0x20000818

08004458 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f103 0208 	add.w	r2, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f04f 32ff 	mov.w	r2, #4294967295
 8004470:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f103 0208 	add.w	r2, r3, #8
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f103 0208 	add.w	r2, r3, #8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]
}
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d103      	bne.n	8004514 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e00c      	b.n	800452e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3308      	adds	r3, #8
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e002      	b.n	8004522 <vListInsert+0x2e>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	d2f6      	bcs.n	800451c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6892      	ldr	r2, [r2, #8]
 800457a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6852      	ldr	r2, [r2, #4]
 8004584:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d103      	bne.n	8004598 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	1e5a      	subs	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
	...

080045b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045e2:	f002 f8d3 	bl	800678c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	3b01      	subs	r3, #1
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	441a      	add	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	22ff      	movs	r2, #255	; 0xff
 800462e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d114      	bne.n	8004662 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01a      	beq.n	8004676 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3310      	adds	r3, #16
 8004644:	4618      	mov	r0, r3
 8004646:	f001 f9f9 	bl	8005a3c <xTaskRemoveFromEventList>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <xQueueGenericReset+0xcc>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	e009      	b.n	8004676 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3310      	adds	r3, #16
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff fef6 	bl	8004458 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fef1 	bl	8004458 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004676:	f002 f8b9 	bl	80067ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800467a:	2301      	movs	r3, #1
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08e      	sub	sp, #56	; 0x38
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046ae:	bf00      	nop
 80046b0:	e7fe      	b.n	80046b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <xQueueGenericCreateStatic+0x52>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <xQueueGenericCreateStatic+0x56>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <xQueueGenericCreateStatic+0x58>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10a      	bne.n	80046fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	623b      	str	r3, [r7, #32]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <xQueueGenericCreateStatic+0x7e>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <xQueueGenericCreateStatic+0x82>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <xQueueGenericCreateStatic+0x84>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	61fb      	str	r3, [r7, #28]
}
 8004722:	bf00      	nop
 8004724:	e7fe      	b.n	8004724 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004726:	2350      	movs	r3, #80	; 0x50
 8004728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b50      	cmp	r3, #80	; 0x50
 800472e:	d00a      	beq.n	8004746 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	61bb      	str	r3, [r7, #24]
}
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004758:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f843 	bl	80047f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800476e:	4618      	mov	r0, r3
 8004770:	3730      	adds	r7, #48	; 0x30
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004776:	b580      	push	{r7, lr}
 8004778:	b08a      	sub	sp, #40	; 0x28
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	4613      	mov	r3, r2
 8004782:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	613b      	str	r3, [r7, #16]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	e004      	b.n	80047b6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	fb02 f303 	mul.w	r3, r2, r3
 80047b4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3350      	adds	r3, #80	; 0x50
 80047ba:	4618      	mov	r0, r3
 80047bc:	f002 f8e6 	bl	800698c <pvPortMalloc>
 80047c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00f      	beq.n	80047e8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	3350      	adds	r3, #80	; 0x50
 80047cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047d6:	79fa      	ldrb	r2, [r7, #7]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f805 	bl	80047f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80047e8:	69bb      	ldr	r3, [r7, #24]
	}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e002      	b.n	8004814 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004820:	2101      	movs	r1, #1
 8004822:	69b8      	ldr	r0, [r7, #24]
 8004824:	f7ff fec8 	bl	80045b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	78fa      	ldrb	r2, [r7, #3]
 800482c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08e      	sub	sp, #56	; 0x38
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004846:	2300      	movs	r3, #0
 8004848:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <xQueueGenericSend+0x32>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <xQueueGenericSend+0x40>
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <xQueueGenericSend+0x44>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <xQueueGenericSend+0x46>
 800487c:	2300      	movs	r3, #0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <xQueueGenericSend+0x60>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d103      	bne.n	80048a6 <xQueueGenericSend+0x6e>
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <xQueueGenericSend+0x72>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <xQueueGenericSend+0x74>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	623b      	str	r3, [r7, #32]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048c6:	f001 fa7b 	bl	8005dc0 <xTaskGetSchedulerState>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d102      	bne.n	80048d6 <xQueueGenericSend+0x9e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <xQueueGenericSend+0xa2>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <xQueueGenericSend+0xa4>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	61fb      	str	r3, [r7, #28]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048f6:	f001 ff49 	bl	800678c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <xQueueGenericSend+0xd4>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d129      	bne.n	8004960 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004912:	f000 fa87 	bl	8004e24 <prvCopyDataToQueue>
 8004916:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	d010      	beq.n	8004942 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	3324      	adds	r3, #36	; 0x24
 8004924:	4618      	mov	r0, r3
 8004926:	f001 f889 	bl	8005a3c <xTaskRemoveFromEventList>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004930:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <xQueueGenericSend+0x1f8>)
 8004932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	e00a      	b.n	8004958 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004948:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <xQueueGenericSend+0x1f8>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004958:	f001 ff48 	bl	80067ec <vPortExitCritical>
				return pdPASS;
 800495c:	2301      	movs	r3, #1
 800495e:	e063      	b.n	8004a28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004966:	f001 ff41 	bl	80067ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800496a:	2300      	movs	r3, #0
 800496c:	e05c      	b.n	8004a28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	4618      	mov	r0, r3
 800497a:	f001 f8c3 	bl	8005b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800497e:	2301      	movs	r3, #1
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004982:	f001 ff33 	bl	80067ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004986:	f000 fe35 	bl	80055f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800498a:	f001 feff 	bl	800678c <vPortEnterCritical>
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004994:	b25b      	sxtb	r3, r3
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d103      	bne.n	80049a4 <xQueueGenericSend+0x16c>
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049aa:	b25b      	sxtb	r3, r3
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d103      	bne.n	80049ba <xQueueGenericSend+0x182>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ba:	f001 ff17 	bl	80067ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049be:	1d3a      	adds	r2, r7, #4
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 f8b2 	bl	8005b30 <xTaskCheckForTimeOut>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d124      	bne.n	8004a1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d4:	f000 fb1e 	bl	8005014 <prvIsQueueFull>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d018      	beq.n	8004a10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	3310      	adds	r3, #16
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 ffd8 	bl	800599c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ee:	f000 faa9 	bl	8004f44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049f2:	f000 fe0d 	bl	8005610 <xTaskResumeAll>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f47f af7c 	bne.w	80048f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <xQueueGenericSend+0x1f8>)
 8004a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	e772      	b.n	80048f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a12:	f000 fa97 	bl	8004f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a16:	f000 fdfb 	bl	8005610 <xTaskResumeAll>
 8004a1a:	e76c      	b.n	80048f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a1e:	f000 fa91 	bl	8004f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a22:	f000 fdf5 	bl	8005610 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a26:	2300      	movs	r3, #0
		}
	}
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3738      	adds	r7, #56	; 0x38
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08e      	sub	sp, #56	; 0x38
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <xQueueGenericSendFromISR+0x3c>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <xQueueGenericSendFromISR+0x40>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <xQueueGenericSendFromISR+0x42>
 8004a74:	2300      	movs	r3, #0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	623b      	str	r3, [r7, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d103      	bne.n	8004a9e <xQueueGenericSendFromISR+0x6a>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <xQueueGenericSendFromISR+0x6e>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericSendFromISR+0x70>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	61fb      	str	r3, [r7, #28]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004abe:	f001 ff27 	bl	8006910 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	61ba      	str	r2, [r7, #24]
 8004ad8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ada:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <xQueueGenericSendFromISR+0xbc>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d12c      	bne.n	8004b4a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b00:	f000 f990 	bl	8004e24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d112      	bne.n	8004b34 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d016      	beq.n	8004b44 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	3324      	adds	r3, #36	; 0x24
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 ff8e 	bl	8005a3c <xTaskRemoveFromEventList>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00e      	beq.n	8004b44 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e007      	b.n	8004b44 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b38:	3301      	adds	r3, #1
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	b25a      	sxtb	r2, r3
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b44:	2301      	movs	r3, #1
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b48:	e001      	b.n	8004b4e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3738      	adds	r7, #56	; 0x38
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <xQueueReceive+0x30>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	623b      	str	r3, [r7, #32]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <xQueueReceive+0x3e>
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <xQueueReceive+0x42>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueReceive+0x44>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xQueueReceive+0x5e>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61fb      	str	r3, [r7, #28]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bc2:	f001 f8fd 	bl	8005dc0 <xTaskGetSchedulerState>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <xQueueReceive+0x6e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <xQueueReceive+0x72>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <xQueueReceive+0x74>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10a      	bne.n	8004bf2 <xQueueReceive+0x8e>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	61bb      	str	r3, [r7, #24]
}
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bf2:	f001 fdcb 	bl	800678c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01f      	beq.n	8004c42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c06:	f000 f977 	bl	8004ef8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00f      	beq.n	8004c3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 ff0c 	bl	8005a3c <xTaskRemoveFromEventList>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c2a:	4b3d      	ldr	r3, [pc, #244]	; (8004d20 <xQueueReceive+0x1bc>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c3a:	f001 fdd7 	bl	80067ec <vPortExitCritical>
				return pdPASS;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e069      	b.n	8004d16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c48:	f001 fdd0 	bl	80067ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e062      	b.n	8004d16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c56:	f107 0310 	add.w	r3, r7, #16
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 ff52 	bl	8005b04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c64:	f001 fdc2 	bl	80067ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c68:	f000 fcc4 	bl	80055f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6c:	f001 fd8e 	bl	800678c <vPortEnterCritical>
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c76:	b25b      	sxtb	r3, r3
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d103      	bne.n	8004c86 <xQueueReceive+0x122>
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d103      	bne.n	8004c9c <xQueueReceive+0x138>
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9c:	f001 fda6 	bl	80067ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ca0:	1d3a      	adds	r2, r7, #4
 8004ca2:	f107 0310 	add.w	r3, r7, #16
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 ff41 	bl	8005b30 <xTaskCheckForTimeOut>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d123      	bne.n	8004cfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb6:	f000 f997 	bl	8004fe8 <prvIsQueueEmpty>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d017      	beq.n	8004cf0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	3324      	adds	r3, #36	; 0x24
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fe67 	bl	800599c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd0:	f000 f938 	bl	8004f44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cd4:	f000 fc9c 	bl	8005610 <xTaskResumeAll>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d189      	bne.n	8004bf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <xQueueReceive+0x1bc>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	e780      	b.n	8004bf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf2:	f000 f927 	bl	8004f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cf6:	f000 fc8b 	bl	8005610 <xTaskResumeAll>
 8004cfa:	e77a      	b.n	8004bf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 f921 	bl	8004f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d02:	f000 fc85 	bl	8005610 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d08:	f000 f96e 	bl	8004fe8 <prvIsQueueEmpty>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f43f af6f 	beq.w	8004bf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3730      	adds	r7, #48	; 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08e      	sub	sp, #56	; 0x38
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	623b      	str	r3, [r7, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <xQueueReceiveFromISR+0x3a>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <xQueueReceiveFromISR+0x3e>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <xQueueReceiveFromISR+0x40>
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	61fb      	str	r3, [r7, #28]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d7e:	f001 fdc7 	bl	8006910 <vPortValidateInterruptPriority>
	__asm volatile
 8004d82:	f3ef 8211 	mrs	r2, BASEPRI
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	61ba      	str	r2, [r7, #24]
 8004d98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d02f      	beq.n	8004e0a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004db8:	f000 f89e 	bl	8004ef8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004dc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d112      	bne.n	8004df4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	3310      	adds	r3, #16
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fe2e 	bl	8005a3c <xTaskRemoveFromEventList>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00b      	beq.n	8004e04 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e007      	b.n	8004e04 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	b25a      	sxtb	r2, r3
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004e04:	2301      	movs	r3, #1
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
 8004e08:	e001      	b.n	8004e0e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f383 8811 	msr	BASEPRI, r3
}
 8004e18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3738      	adds	r7, #56	; 0x38
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10d      	bne.n	8004e5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d14d      	bne.n	8004ee6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 ffd4 	bl	8005dfc <xTaskPriorityDisinherit>
 8004e54:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	e043      	b.n	8004ee6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d119      	bne.n	8004e98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6898      	ldr	r0, [r3, #8]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	f001 ff90 	bl	8006d94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	441a      	add	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d32b      	bcc.n	8004ee6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	e026      	b.n	8004ee6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68d8      	ldr	r0, [r3, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	f001 ff76 	bl	8006d94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	425b      	negs	r3, r3
 8004eb2:	441a      	add	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d207      	bcs.n	8004ed4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	425b      	negs	r3, r3
 8004ece:	441a      	add	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d105      	bne.n	8004ee6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004eee:	697b      	ldr	r3, [r7, #20]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d018      	beq.n	8004f3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	441a      	add	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d303      	bcc.n	8004f2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68d9      	ldr	r1, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	461a      	mov	r2, r3
 8004f36:	6838      	ldr	r0, [r7, #0]
 8004f38:	f001 ff2c 	bl	8006d94 <memcpy>
	}
}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f4c:	f001 fc1e 	bl	800678c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f58:	e011      	b.n	8004f7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d012      	beq.n	8004f88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3324      	adds	r3, #36	; 0x24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fd68 	bl	8005a3c <xTaskRemoveFromEventList>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f72:	f000 fe3f 	bl	8005bf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dce9      	bgt.n	8004f5a <prvUnlockQueue+0x16>
 8004f86:	e000      	b.n	8004f8a <prvUnlockQueue+0x46>
					break;
 8004f88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	22ff      	movs	r2, #255	; 0xff
 8004f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f92:	f001 fc2b 	bl	80067ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f96:	f001 fbf9 	bl	800678c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fa2:	e011      	b.n	8004fc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d012      	beq.n	8004fd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3310      	adds	r3, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fd43 	bl	8005a3c <xTaskRemoveFromEventList>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fbc:	f000 fe1a 	bl	8005bf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fc0:	7bbb      	ldrb	r3, [r7, #14]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dce9      	bgt.n	8004fa4 <prvUnlockQueue+0x60>
 8004fd0:	e000      	b.n	8004fd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fdc:	f001 fc06 	bl	80067ec <vPortExitCritical>
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ff0:	f001 fbcc 	bl	800678c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e001      	b.n	8005006 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005006:	f001 fbf1 	bl	80067ec <vPortExitCritical>

	return xReturn;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800501c:	f001 fbb6 	bl	800678c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	429a      	cmp	r2, r3
 800502a:	d102      	bne.n	8005032 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800502c:	2301      	movs	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	e001      	b.n	8005036 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005036:	f001 fbd9 	bl	80067ec <vPortExitCritical>

	return xReturn;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e014      	b.n	800507e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005054:	4a0e      	ldr	r2, [pc, #56]	; (8005090 <vQueueAddToRegistry+0x4c>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005060:	490b      	ldr	r1, [pc, #44]	; (8005090 <vQueueAddToRegistry+0x4c>)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800506a:	4a09      	ldr	r2, [pc, #36]	; (8005090 <vQueueAddToRegistry+0x4c>)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005076:	e006      	b.n	8005086 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b07      	cmp	r3, #7
 8005082:	d9e7      	bls.n	8005054 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	20000c18 	.word	0x20000c18

08005094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050a4:	f001 fb72 	bl	800678c <vPortEnterCritical>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ae:	b25b      	sxtb	r3, r3
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d103      	bne.n	80050be <vQueueWaitForMessageRestricted+0x2a>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d103      	bne.n	80050d4 <vQueueWaitForMessageRestricted+0x40>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d4:	f001 fb8a 	bl	80067ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	3324      	adds	r3, #36	; 0x24
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fc7b 	bl	80059e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f7ff ff28 	bl	8004f44 <prvUnlockQueue>
	}
 80050f4:	bf00      	nop
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08e      	sub	sp, #56	; 0x38
 8005100:	af04      	add	r7, sp, #16
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800510a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	623b      	str	r3, [r7, #32]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <xTaskCreateStatic+0x46>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	61fb      	str	r3, [r7, #28]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005142:	235c      	movs	r3, #92	; 0x5c
 8005144:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b5c      	cmp	r3, #92	; 0x5c
 800514a:	d00a      	beq.n	8005162 <xTaskCreateStatic+0x66>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	61bb      	str	r3, [r7, #24]
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01e      	beq.n	80051a6 <xTaskCreateStatic+0xaa>
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01b      	beq.n	80051a6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005176:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005180:	2300      	movs	r3, #0
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	9302      	str	r3, [sp, #8]
 8005188:	f107 0314 	add.w	r3, r7, #20
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f850 	bl	800523e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051a0:	f000 f8d4 	bl	800534c <prvAddNewTaskToReadyList>
 80051a4:	e001      	b.n	80051aa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051aa:	697b      	ldr	r3, [r7, #20]
	}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3728      	adds	r7, #40	; 0x28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	; 0x30
 80051b8:	af04      	add	r7, sp, #16
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f001 fbdf 	bl	800698c <pvPortMalloc>
 80051ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051d6:	205c      	movs	r0, #92	; 0x5c
 80051d8:	f001 fbd8 	bl	800698c <pvPortMalloc>
 80051dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
 80051ea:	e005      	b.n	80051f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051ec:	6978      	ldr	r0, [r7, #20]
 80051ee:	f001 fc91 	bl	8006b14 <vPortFree>
 80051f2:	e001      	b.n	80051f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d017      	beq.n	800522e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	2300      	movs	r3, #0
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	9302      	str	r3, [sp, #8]
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	9301      	str	r3, [sp, #4]
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f80e 	bl	800523e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005222:	69f8      	ldr	r0, [r7, #28]
 8005224:	f000 f892 	bl	800534c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005228:	2301      	movs	r3, #1
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	e002      	b.n	8005234 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800522e:	f04f 33ff 	mov.w	r3, #4294967295
 8005232:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005234:	69bb      	ldr	r3, [r7, #24]
	}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b088      	sub	sp, #32
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	461a      	mov	r2, r3
 8005256:	21a5      	movs	r1, #165	; 0xa5
 8005258:	f001 fd70 	bl	8006d3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005266:	3b01      	subs	r3, #1
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f023 0307 	bic.w	r3, r3, #7
 8005274:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	617b      	str	r3, [r7, #20]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	e012      	b.n	80052c2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	7819      	ldrb	r1, [r3, #0]
 80052a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	3334      	adds	r3, #52	; 0x34
 80052ac:	460a      	mov	r2, r1
 80052ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	3301      	adds	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b0f      	cmp	r3, #15
 80052c6:	d9e9      	bls.n	800529c <prvInitialiseNewTask+0x5e>
 80052c8:	e000      	b.n	80052cc <prvInitialiseNewTask+0x8e>
		{
			break;
 80052ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b37      	cmp	r3, #55	; 0x37
 80052d8:	d901      	bls.n	80052de <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052da:	2337      	movs	r3, #55	; 0x37
 80052dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	2200      	movs	r2, #0
 80052ee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	3304      	adds	r3, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff f8ce 	bl	8004496 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	3318      	adds	r3, #24
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff f8c9 	bl	8004496 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005308:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005318:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	2200      	movs	r2, #0
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	69b8      	ldr	r0, [r7, #24]
 800532e:	f001 f939 	bl	80065a4 <pxPortInitialiseStack>
 8005332:	4602      	mov	r2, r0
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005344:	bf00      	nop
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005354:	f001 fa1a 	bl	800678c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005358:	4b2d      	ldr	r3, [pc, #180]	; (8005410 <prvAddNewTaskToReadyList+0xc4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	4a2c      	ldr	r2, [pc, #176]	; (8005410 <prvAddNewTaskToReadyList+0xc4>)
 8005360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005362:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800536a:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <prvAddNewTaskToReadyList+0xc4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d110      	bne.n	800539a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005378:	f000 fc60 	bl	8005c3c <prvInitialiseTaskLists>
 800537c:	e00d      	b.n	800539a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800537e:	4b26      	ldr	r3, [pc, #152]	; (8005418 <prvAddNewTaskToReadyList+0xcc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005386:	4b23      	ldr	r3, [pc, #140]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	429a      	cmp	r2, r3
 8005392:	d802      	bhi.n	800539a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800539a:	4b20      	ldr	r3, [pc, #128]	; (800541c <prvAddNewTaskToReadyList+0xd0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3301      	adds	r3, #1
 80053a0:	4a1e      	ldr	r2, [pc, #120]	; (800541c <prvAddNewTaskToReadyList+0xd0>)
 80053a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053a4:	4b1d      	ldr	r3, [pc, #116]	; (800541c <prvAddNewTaskToReadyList+0xd0>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <prvAddNewTaskToReadyList+0xd4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d903      	bls.n	80053c0 <prvAddNewTaskToReadyList+0x74>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <prvAddNewTaskToReadyList+0xd4>)
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	4613      	mov	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <prvAddNewTaskToReadyList+0xd8>)
 80053ce:	441a      	add	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3304      	adds	r3, #4
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7ff f869 	bl	80044ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053dc:	f001 fa06 	bl	80067ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053e0:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <prvAddNewTaskToReadyList+0xcc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00e      	beq.n	8005406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvAddNewTaskToReadyList+0xc8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d207      	bcs.n	8005406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <prvAddNewTaskToReadyList+0xdc>)
 80053f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005406:	bf00      	nop
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	2000112c 	.word	0x2000112c
 8005414:	20000c58 	.word	0x20000c58
 8005418:	20001138 	.word	0x20001138
 800541c:	20001148 	.word	0x20001148
 8005420:	20001134 	.word	0x20001134
 8005424:	20000c5c 	.word	0x20000c5c
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005436:	2300      	movs	r3, #0
 8005438:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <vTaskDelayUntil+0x2a>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	617b      	str	r3, [r7, #20]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <vTaskDelayUntil+0x46>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	613b      	str	r3, [r7, #16]
}
 800546e:	bf00      	nop
 8005470:	e7fe      	b.n	8005470 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005472:	4b2a      	ldr	r3, [pc, #168]	; (800551c <vTaskDelayUntil+0xf0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <vTaskDelayUntil+0x64>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	60fb      	str	r3, [r7, #12]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005490:	f000 f8b0 	bl	80055f4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005494:	4b22      	ldr	r3, [pc, #136]	; (8005520 <vTaskDelayUntil+0xf4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	4413      	add	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20b      	bcs.n	80054c6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d211      	bcs.n	80054dc <vTaskDelayUntil+0xb0>
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d90d      	bls.n	80054dc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
 80054c4:	e00a      	b.n	80054dc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d303      	bcc.n	80054d8 <vTaskDelayUntil+0xac>
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d901      	bls.n	80054dc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d006      	beq.n	80054f6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f000 fcf1 	bl	8005ed8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80054f6:	f000 f88b 	bl	8005610 <xTaskResumeAll>
 80054fa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005502:	4b08      	ldr	r3, [pc, #32]	; (8005524 <vTaskDelayUntil+0xf8>)
 8005504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005512:	bf00      	nop
 8005514:	3728      	adds	r7, #40	; 0x28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20001154 	.word	0x20001154
 8005520:	20001130 	.word	0x20001130
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005536:	463a      	mov	r2, r7
 8005538:	1d39      	adds	r1, r7, #4
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe ff58 	bl	80043f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005544:	6839      	ldr	r1, [r7, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	9202      	str	r2, [sp, #8]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	2300      	movs	r3, #0
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	2300      	movs	r3, #0
 8005554:	460a      	mov	r2, r1
 8005556:	4921      	ldr	r1, [pc, #132]	; (80055dc <vTaskStartScheduler+0xb4>)
 8005558:	4821      	ldr	r0, [pc, #132]	; (80055e0 <vTaskStartScheduler+0xb8>)
 800555a:	f7ff fdcf 	bl	80050fc <xTaskCreateStatic>
 800555e:	4603      	mov	r3, r0
 8005560:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <vTaskStartScheduler+0xbc>)
 8005562:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005564:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <vTaskStartScheduler+0xbc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800556c:	2301      	movs	r3, #1
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e001      	b.n	8005576 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d102      	bne.n	8005582 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800557c:	f000 fd00 	bl	8005f80 <xTimerCreateTimerTask>
 8005580:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d116      	bne.n	80055b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	613b      	str	r3, [r7, #16]
}
 800559a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <vTaskStartScheduler+0xc0>)
 800559e:	f04f 32ff 	mov.w	r2, #4294967295
 80055a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <vTaskStartScheduler+0xc4>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80055aa:	4b11      	ldr	r3, [pc, #68]	; (80055f0 <vTaskStartScheduler+0xc8>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055b0:	f001 f87a 	bl	80066a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055b4:	e00e      	b.n	80055d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055bc:	d10a      	bne.n	80055d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60fb      	str	r3, [r7, #12]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <vTaskStartScheduler+0xaa>
}
 80055d4:	bf00      	nop
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	08006df8 	.word	0x08006df8
 80055e0:	08005c0d 	.word	0x08005c0d
 80055e4:	20001150 	.word	0x20001150
 80055e8:	2000114c 	.word	0x2000114c
 80055ec:	20001138 	.word	0x20001138
 80055f0:	20001130 	.word	0x20001130

080055f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <vTaskSuspendAll+0x18>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	4a03      	ldr	r2, [pc, #12]	; (800560c <vTaskSuspendAll+0x18>)
 8005600:	6013      	str	r3, [r2, #0]
}
 8005602:	bf00      	nop
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20001154 	.word	0x20001154

08005610 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800561e:	4b42      	ldr	r3, [pc, #264]	; (8005728 <xTaskResumeAll+0x118>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <xTaskResumeAll+0x2c>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	603b      	str	r3, [r7, #0]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800563c:	f001 f8a6 	bl	800678c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005640:	4b39      	ldr	r3, [pc, #228]	; (8005728 <xTaskResumeAll+0x118>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3b01      	subs	r3, #1
 8005646:	4a38      	ldr	r2, [pc, #224]	; (8005728 <xTaskResumeAll+0x118>)
 8005648:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <xTaskResumeAll+0x118>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d162      	bne.n	8005718 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005652:	4b36      	ldr	r3, [pc, #216]	; (800572c <xTaskResumeAll+0x11c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d05e      	beq.n	8005718 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800565a:	e02f      	b.n	80056bc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800565c:	4b34      	ldr	r3, [pc, #208]	; (8005730 <xTaskResumeAll+0x120>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3318      	adds	r3, #24
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe ff7b 	bl	8004564 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3304      	adds	r3, #4
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe ff76 	bl	8004564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	4b2d      	ldr	r3, [pc, #180]	; (8005734 <xTaskResumeAll+0x124>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d903      	bls.n	800568c <xTaskResumeAll+0x7c>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <xTaskResumeAll+0x124>)
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4a27      	ldr	r2, [pc, #156]	; (8005738 <xTaskResumeAll+0x128>)
 800569a:	441a      	add	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f7fe ff03 	bl	80044ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	4b23      	ldr	r3, [pc, #140]	; (800573c <xTaskResumeAll+0x12c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056b6:	4b22      	ldr	r3, [pc, #136]	; (8005740 <xTaskResumeAll+0x130>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056bc:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <xTaskResumeAll+0x120>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1cb      	bne.n	800565c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056ca:	f000 fb55 	bl	8005d78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <xTaskResumeAll+0x134>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056da:	f000 f845 	bl	8005768 <xTaskIncrementTick>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056e4:	4b16      	ldr	r3, [pc, #88]	; (8005740 <xTaskResumeAll+0x130>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f1      	bne.n	80056da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80056f6:	4b13      	ldr	r3, [pc, #76]	; (8005744 <xTaskResumeAll+0x134>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <xTaskResumeAll+0x130>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005708:	4b0f      	ldr	r3, [pc, #60]	; (8005748 <xTaskResumeAll+0x138>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005718:	f001 f868 	bl	80067ec <vPortExitCritical>

	return xAlreadyYielded;
 800571c:	68bb      	ldr	r3, [r7, #8]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20001154 	.word	0x20001154
 800572c:	2000112c 	.word	0x2000112c
 8005730:	200010ec 	.word	0x200010ec
 8005734:	20001134 	.word	0x20001134
 8005738:	20000c5c 	.word	0x20000c5c
 800573c:	20000c58 	.word	0x20000c58
 8005740:	20001140 	.word	0x20001140
 8005744:	2000113c 	.word	0x2000113c
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005752:	4b04      	ldr	r3, [pc, #16]	; (8005764 <xTaskGetTickCount+0x18>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005758:	687b      	ldr	r3, [r7, #4]
}
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	20001130 	.word	0x20001130

08005768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005772:	4b51      	ldr	r3, [pc, #324]	; (80058b8 <xTaskIncrementTick+0x150>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f040 808e 	bne.w	8005898 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800577c:	4b4f      	ldr	r3, [pc, #316]	; (80058bc <xTaskIncrementTick+0x154>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005784:	4a4d      	ldr	r2, [pc, #308]	; (80058bc <xTaskIncrementTick+0x154>)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d120      	bne.n	80057d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005790:	4b4b      	ldr	r3, [pc, #300]	; (80058c0 <xTaskIncrementTick+0x158>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	603b      	str	r3, [r7, #0]
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <xTaskIncrementTick+0x46>
 80057b0:	4b43      	ldr	r3, [pc, #268]	; (80058c0 <xTaskIncrementTick+0x158>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <xTaskIncrementTick+0x15c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a41      	ldr	r2, [pc, #260]	; (80058c0 <xTaskIncrementTick+0x158>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	4a41      	ldr	r2, [pc, #260]	; (80058c4 <xTaskIncrementTick+0x15c>)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	4b40      	ldr	r3, [pc, #256]	; (80058c8 <xTaskIncrementTick+0x160>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3301      	adds	r3, #1
 80057ca:	4a3f      	ldr	r2, [pc, #252]	; (80058c8 <xTaskIncrementTick+0x160>)
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	f000 fad3 	bl	8005d78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057d2:	4b3e      	ldr	r3, [pc, #248]	; (80058cc <xTaskIncrementTick+0x164>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d34e      	bcc.n	800587a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057dc:	4b38      	ldr	r3, [pc, #224]	; (80058c0 <xTaskIncrementTick+0x158>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <xTaskIncrementTick+0x82>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <xTaskIncrementTick+0x84>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f0:	4b36      	ldr	r3, [pc, #216]	; (80058cc <xTaskIncrementTick+0x164>)
 80057f2:	f04f 32ff 	mov.w	r2, #4294967295
 80057f6:	601a      	str	r2, [r3, #0]
					break;
 80057f8:	e03f      	b.n	800587a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057fa:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <xTaskIncrementTick+0x158>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	429a      	cmp	r2, r3
 8005810:	d203      	bcs.n	800581a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005812:	4a2e      	ldr	r2, [pc, #184]	; (80058cc <xTaskIncrementTick+0x164>)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6013      	str	r3, [r2, #0]
						break;
 8005818:	e02f      	b.n	800587a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	3304      	adds	r3, #4
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe fea0 	bl	8004564 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3318      	adds	r3, #24
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe fe97 	bl	8004564 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <xTaskIncrementTick+0x168>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d903      	bls.n	800584a <xTaskIncrementTick+0xe2>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005846:	4a22      	ldr	r2, [pc, #136]	; (80058d0 <xTaskIncrementTick+0x168>)
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a1f      	ldr	r2, [pc, #124]	; (80058d4 <xTaskIncrementTick+0x16c>)
 8005858:	441a      	add	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	3304      	adds	r3, #4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f7fe fe24 	bl	80044ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586a:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <xTaskIncrementTick+0x170>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	429a      	cmp	r2, r3
 8005872:	d3b3      	bcc.n	80057dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005878:	e7b0      	b.n	80057dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800587a:	4b17      	ldr	r3, [pc, #92]	; (80058d8 <xTaskIncrementTick+0x170>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4914      	ldr	r1, [pc, #80]	; (80058d4 <xTaskIncrementTick+0x16c>)
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d907      	bls.n	80058a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005892:	2301      	movs	r3, #1
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e004      	b.n	80058a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005898:	4b10      	ldr	r3, [pc, #64]	; (80058dc <xTaskIncrementTick+0x174>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3301      	adds	r3, #1
 800589e:	4a0f      	ldr	r2, [pc, #60]	; (80058dc <xTaskIncrementTick+0x174>)
 80058a0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <xTaskIncrementTick+0x178>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80058aa:	2301      	movs	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058ae:	697b      	ldr	r3, [r7, #20]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20001154 	.word	0x20001154
 80058bc:	20001130 	.word	0x20001130
 80058c0:	200010e4 	.word	0x200010e4
 80058c4:	200010e8 	.word	0x200010e8
 80058c8:	20001144 	.word	0x20001144
 80058cc:	2000114c 	.word	0x2000114c
 80058d0:	20001134 	.word	0x20001134
 80058d4:	20000c5c 	.word	0x20000c5c
 80058d8:	20000c58 	.word	0x20000c58
 80058dc:	2000113c 	.word	0x2000113c
 80058e0:	20001140 	.word	0x20001140

080058e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ea:	4b27      	ldr	r3, [pc, #156]	; (8005988 <vTaskSwitchContext+0xa4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058f2:	4b26      	ldr	r3, [pc, #152]	; (800598c <vTaskSwitchContext+0xa8>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058f8:	e041      	b.n	800597e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80058fa:	4b24      	ldr	r3, [pc, #144]	; (800598c <vTaskSwitchContext+0xa8>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005900:	4b23      	ldr	r3, [pc, #140]	; (8005990 <vTaskSwitchContext+0xac>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e010      	b.n	800592a <vTaskSwitchContext+0x46>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <vTaskSwitchContext+0x40>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	607b      	str	r3, [r7, #4]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <vTaskSwitchContext+0x3e>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3b01      	subs	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	491a      	ldr	r1, [pc, #104]	; (8005994 <vTaskSwitchContext+0xb0>)
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0e4      	beq.n	8005908 <vTaskSwitchContext+0x24>
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4a12      	ldr	r2, [pc, #72]	; (8005994 <vTaskSwitchContext+0xb0>)
 800594a:	4413      	add	r3, r2
 800594c:	60bb      	str	r3, [r7, #8]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	3308      	adds	r3, #8
 8005960:	429a      	cmp	r2, r3
 8005962:	d104      	bne.n	800596e <vTaskSwitchContext+0x8a>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	605a      	str	r2, [r3, #4]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4a08      	ldr	r2, [pc, #32]	; (8005998 <vTaskSwitchContext+0xb4>)
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	4a05      	ldr	r2, [pc, #20]	; (8005990 <vTaskSwitchContext+0xac>)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6013      	str	r3, [r2, #0]
}
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr
 8005988:	20001154 	.word	0x20001154
 800598c:	20001140 	.word	0x20001140
 8005990:	20001134 	.word	0x20001134
 8005994:	20000c5c 	.word	0x20000c5c
 8005998:	20000c58 	.word	0x20000c58

0800599c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60fb      	str	r3, [r7, #12]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059c2:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <vTaskPlaceOnEventList+0x44>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3318      	adds	r3, #24
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fe fd92 	bl	80044f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059d0:	2101      	movs	r1, #1
 80059d2:	6838      	ldr	r0, [r7, #0]
 80059d4:	f000 fa80 	bl	8005ed8 <prvAddCurrentTaskToDelayedList>
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000c58 	.word	0x20000c58

080059e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	617b      	str	r3, [r7, #20]
}
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4619      	mov	r1, r3
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7fe fd4a 	bl	80044ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	68b8      	ldr	r0, [r7, #8]
 8005a2a:	f000 fa55 	bl	8005ed8 <prvAddCurrentTaskToDelayedList>
	}
 8005a2e:	bf00      	nop
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000c58 	.word	0x20000c58

08005a3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60fb      	str	r3, [r7, #12]
}
 8005a64:	bf00      	nop
 8005a66:	e7fe      	b.n	8005a66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3318      	adds	r3, #24
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe fd79 	bl	8004564 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a72:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <xTaskRemoveFromEventList+0xb0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d11d      	bne.n	8005ab6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fd70 	bl	8004564 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <xTaskRemoveFromEventList+0xb4>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d903      	bls.n	8005a98 <xTaskRemoveFromEventList+0x5c>
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <xTaskRemoveFromEventList+0xb4>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <xTaskRemoveFromEventList+0xb8>)
 8005aa6:	441a      	add	r2, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f7fe fcfd 	bl	80044ae <vListInsertEnd>
 8005ab4:	e005      	b.n	8005ac2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	4619      	mov	r1, r3
 8005abc:	480e      	ldr	r0, [pc, #56]	; (8005af8 <xTaskRemoveFromEventList+0xbc>)
 8005abe:	f7fe fcf6 	bl	80044ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <xTaskRemoveFromEventList+0xc0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d905      	bls.n	8005adc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <xTaskRemoveFromEventList+0xc4>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e001      	b.n	8005ae0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005ae0:	697b      	ldr	r3, [r7, #20]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20001154 	.word	0x20001154
 8005af0:	20001134 	.word	0x20001134
 8005af4:	20000c5c 	.word	0x20000c5c
 8005af8:	200010ec 	.word	0x200010ec
 8005afc:	20000c58 	.word	0x20000c58
 8005b00:	20001140 	.word	0x20001140

08005b04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <vTaskInternalSetTimeOutState+0x24>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <vTaskInternalSetTimeOutState+0x28>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	605a      	str	r2, [r3, #4]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20001144 	.word	0x20001144
 8005b2c:	20001130 	.word	0x20001130

08005b30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	613b      	str	r3, [r7, #16]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	60fb      	str	r3, [r7, #12]
}
 8005b6e:	bf00      	nop
 8005b70:	e7fe      	b.n	8005b70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b72:	f000 fe0b 	bl	800678c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <xTaskCheckForTimeOut+0xbc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8e:	d102      	bne.n	8005b96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	e023      	b.n	8005bde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <xTaskCheckForTimeOut+0xc0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d007      	beq.n	8005bb2 <xTaskCheckForTimeOut+0x82>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d302      	bcc.n	8005bb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bac:	2301      	movs	r3, #1
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	e015      	b.n	8005bde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d20b      	bcs.n	8005bd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad2      	subs	r2, r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ff9b 	bl	8005b04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	e004      	b.n	8005bde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bde:	f000 fe05 	bl	80067ec <vPortExitCritical>

	return xReturn;
 8005be2:	69fb      	ldr	r3, [r7, #28]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20001130 	.word	0x20001130
 8005bf0:	20001144 	.word	0x20001144

08005bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <vTaskMissedYield+0x14>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20001140 	.word	0x20001140

08005c0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c14:	f000 f852 	bl	8005cbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c18:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <prvIdleTask+0x28>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d9f9      	bls.n	8005c14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <prvIdleTask+0x2c>)
 8005c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c30:	e7f0      	b.n	8005c14 <prvIdleTask+0x8>
 8005c32:	bf00      	nop
 8005c34:	20000c5c 	.word	0x20000c5c
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c42:	2300      	movs	r3, #0
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	e00c      	b.n	8005c62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <prvInitialiseTaskLists+0x60>)
 8005c54:	4413      	add	r3, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fbfe 	bl	8004458 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	607b      	str	r3, [r7, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b37      	cmp	r3, #55	; 0x37
 8005c66:	d9ef      	bls.n	8005c48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c68:	480d      	ldr	r0, [pc, #52]	; (8005ca0 <prvInitialiseTaskLists+0x64>)
 8005c6a:	f7fe fbf5 	bl	8004458 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c6e:	480d      	ldr	r0, [pc, #52]	; (8005ca4 <prvInitialiseTaskLists+0x68>)
 8005c70:	f7fe fbf2 	bl	8004458 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c74:	480c      	ldr	r0, [pc, #48]	; (8005ca8 <prvInitialiseTaskLists+0x6c>)
 8005c76:	f7fe fbef 	bl	8004458 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c7a:	480c      	ldr	r0, [pc, #48]	; (8005cac <prvInitialiseTaskLists+0x70>)
 8005c7c:	f7fe fbec 	bl	8004458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c80:	480b      	ldr	r0, [pc, #44]	; (8005cb0 <prvInitialiseTaskLists+0x74>)
 8005c82:	f7fe fbe9 	bl	8004458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <prvInitialiseTaskLists+0x78>)
 8005c88:	4a05      	ldr	r2, [pc, #20]	; (8005ca0 <prvInitialiseTaskLists+0x64>)
 8005c8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <prvInitialiseTaskLists+0x7c>)
 8005c8e:	4a05      	ldr	r2, [pc, #20]	; (8005ca4 <prvInitialiseTaskLists+0x68>)
 8005c90:	601a      	str	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000c5c 	.word	0x20000c5c
 8005ca0:	200010bc 	.word	0x200010bc
 8005ca4:	200010d0 	.word	0x200010d0
 8005ca8:	200010ec 	.word	0x200010ec
 8005cac:	20001100 	.word	0x20001100
 8005cb0:	20001118 	.word	0x20001118
 8005cb4:	200010e4 	.word	0x200010e4
 8005cb8:	200010e8 	.word	0x200010e8

08005cbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cc2:	e019      	b.n	8005cf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cc4:	f000 fd62 	bl	800678c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005cc8:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <prvCheckTasksWaitingTermination+0x50>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fe fc45 	bl	8004564 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <prvCheckTasksWaitingTermination+0x54>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	4a0b      	ldr	r2, [pc, #44]	; (8005d10 <prvCheckTasksWaitingTermination+0x54>)
 8005ce2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <prvCheckTasksWaitingTermination+0x58>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <prvCheckTasksWaitingTermination+0x58>)
 8005cec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cee:	f000 fd7d 	bl	80067ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f810 	bl	8005d18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cf8:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <prvCheckTasksWaitingTermination+0x58>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1e1      	bne.n	8005cc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20001100 	.word	0x20001100
 8005d10:	2000112c 	.word	0x2000112c
 8005d14:	20001114 	.word	0x20001114

08005d18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d108      	bne.n	8005d3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fef0 	bl	8006b14 <vPortFree>
				vPortFree( pxTCB );
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 feed 	bl	8006b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d3a:	e018      	b.n	8005d6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d103      	bne.n	8005d4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fee4 	bl	8006b14 <vPortFree>
	}
 8005d4c:	e00f      	b.n	8005d6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d00a      	beq.n	8005d6e <prvDeleteTCB+0x56>
	__asm volatile
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	60fb      	str	r3, [r7, #12]
}
 8005d6a:	bf00      	nop
 8005d6c:	e7fe      	b.n	8005d6c <prvDeleteTCB+0x54>
	}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d7e:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <prvResetNextTaskUnblockTime+0x40>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <prvResetNextTaskUnblockTime+0x14>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <prvResetNextTaskUnblockTime+0x16>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d92:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <prvResetNextTaskUnblockTime+0x44>)
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d9a:	e008      	b.n	8005dae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d9c:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <prvResetNextTaskUnblockTime+0x40>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <prvResetNextTaskUnblockTime+0x44>)
 8005dac:	6013      	str	r3, [r2, #0]
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr
 8005db8:	200010e4 	.word	0x200010e4
 8005dbc:	2000114c 	.word	0x2000114c

08005dc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <xTaskGetSchedulerState+0x34>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	e008      	b.n	8005de6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd4:	4b08      	ldr	r3, [pc, #32]	; (8005df8 <xTaskGetSchedulerState+0x38>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	e001      	b.n	8005de6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005de2:	2300      	movs	r3, #0
 8005de4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005de6:	687b      	ldr	r3, [r7, #4]
	}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20001138 	.word	0x20001138
 8005df8:	20001154 	.word	0x20001154

08005dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d056      	beq.n	8005ec0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e12:	4b2e      	ldr	r3, [pc, #184]	; (8005ecc <xTaskPriorityDisinherit+0xd0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d00a      	beq.n	8005e32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	60fb      	str	r3, [r7, #12]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	60bb      	str	r3, [r7, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e54:	1e5a      	subs	r2, r3, #1
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d02c      	beq.n	8005ec0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d128      	bne.n	8005ec0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fb76 	bl	8004564 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e90:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <xTaskPriorityDisinherit+0xd4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d903      	bls.n	8005ea0 <xTaskPriorityDisinherit+0xa4>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	4a0c      	ldr	r2, [pc, #48]	; (8005ed0 <xTaskPriorityDisinherit+0xd4>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <xTaskPriorityDisinherit+0xd8>)
 8005eae:	441a      	add	r2, r3
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f7fe faf9 	bl	80044ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ec0:	697b      	ldr	r3, [r7, #20]
	}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000c58 	.word	0x20000c58
 8005ed0:	20001134 	.word	0x20001134
 8005ed4:	20000c5c 	.word	0x20000c5c

08005ed8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ee2:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fe fb38 	bl	8004564 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efa:	d10a      	bne.n	8005f12 <prvAddCurrentTaskToDelayedList+0x3a>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4819      	ldr	r0, [pc, #100]	; (8005f70 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f0c:	f7fe facf 	bl	80044ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f10:	e026      	b.n	8005f60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d209      	bcs.n	8005f3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f2a:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f7fe fadc 	bl	80044f4 <vListInsert>
}
 8005f3c:	e010      	b.n	8005f60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f3e:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7fe fad2 	bl	80044f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d202      	bcs.n	8005f60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f5a:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20001130 	.word	0x20001130
 8005f6c:	20000c58 	.word	0x20000c58
 8005f70:	20001118 	.word	0x20001118
 8005f74:	200010e8 	.word	0x200010e8
 8005f78:	200010e4 	.word	0x200010e4
 8005f7c:	2000114c 	.word	0x2000114c

08005f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f8a:	f000 facb 	bl	8006524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f8e:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <xTimerCreateTimerTask+0x80>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d021      	beq.n	8005fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f9e:	1d3a      	adds	r2, r7, #4
 8005fa0:	f107 0108 	add.w	r1, r7, #8
 8005fa4:	f107 030c 	add.w	r3, r7, #12
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe fa3b 	bl	8004424 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	9202      	str	r2, [sp, #8]
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	2302      	movs	r3, #2
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	460a      	mov	r2, r1
 8005fc0:	4910      	ldr	r1, [pc, #64]	; (8006004 <xTimerCreateTimerTask+0x84>)
 8005fc2:	4811      	ldr	r0, [pc, #68]	; (8006008 <xTimerCreateTimerTask+0x88>)
 8005fc4:	f7ff f89a 	bl	80050fc <xTaskCreateStatic>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	4a10      	ldr	r2, [pc, #64]	; (800600c <xTimerCreateTimerTask+0x8c>)
 8005fcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fce:	4b0f      	ldr	r3, [pc, #60]	; (800600c <xTimerCreateTimerTask+0x8c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ff6:	697b      	ldr	r3, [r7, #20]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20001188 	.word	0x20001188
 8006004:	08006e00 	.word	0x08006e00
 8006008:	0800612d 	.word	0x0800612d
 800600c:	2000118c 	.word	0x2000118c

08006010 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800601e:	2300      	movs	r3, #0
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	623b      	str	r3, [r7, #32]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800603e:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <xTimerGenericCommand+0x98>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d02a      	beq.n	800609c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b05      	cmp	r3, #5
 8006056:	dc18      	bgt.n	800608a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006058:	f7ff feb2 	bl	8005dc0 <xTaskGetSchedulerState>
 800605c:	4603      	mov	r3, r0
 800605e:	2b02      	cmp	r3, #2
 8006060:	d109      	bne.n	8006076 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <xTimerGenericCommand+0x98>)
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f107 0110 	add.w	r1, r7, #16
 800606a:	2300      	movs	r3, #0
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	f7fe fbe3 	bl	8004838 <xQueueGenericSend>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24
 8006074:	e012      	b.n	800609c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <xTimerGenericCommand+0x98>)
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	f107 0110 	add.w	r1, r7, #16
 800607e:	2300      	movs	r3, #0
 8006080:	2200      	movs	r2, #0
 8006082:	f7fe fbd9 	bl	8004838 <xQueueGenericSend>
 8006086:	6278      	str	r0, [r7, #36]	; 0x24
 8006088:	e008      	b.n	800609c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800608a:	4b07      	ldr	r3, [pc, #28]	; (80060a8 <xTimerGenericCommand+0x98>)
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	f107 0110 	add.w	r1, r7, #16
 8006092:	2300      	movs	r3, #0
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	f7fe fccd 	bl	8004a34 <xQueueGenericSendFromISR>
 800609a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3728      	adds	r7, #40	; 0x28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20001188 	.word	0x20001188

080060ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b6:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <prvProcessExpiredTimer+0x7c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe fa4d 	bl	8004564 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d122      	bne.n	8006118 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	18d1      	adds	r1, r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	6978      	ldr	r0, [r7, #20]
 80060e0:	f000 f8c8 	bl	8006274 <prvInsertTimerInActiveList>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d016      	beq.n	8006118 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060ea:	2300      	movs	r3, #0
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	2300      	movs	r3, #0
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	2100      	movs	r1, #0
 80060f4:	6978      	ldr	r0, [r7, #20]
 80060f6:	f7ff ff8b 	bl	8006010 <xTimerGenericCommand>
 80060fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60fb      	str	r3, [r7, #12]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	6978      	ldr	r0, [r7, #20]
 800611e:	4798      	blx	r3
}
 8006120:	bf00      	nop
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20001180 	.word	0x20001180

0800612c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006134:	f107 0308 	add.w	r3, r7, #8
 8006138:	4618      	mov	r0, r3
 800613a:	f000 f857 	bl	80061ec <prvGetNextExpireTime>
 800613e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4619      	mov	r1, r3
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f803 	bl	8006150 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800614a:	f000 f8d5 	bl	80062f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800614e:	e7f1      	b.n	8006134 <prvTimerTask+0x8>

08006150 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800615a:	f7ff fa4b 	bl	80055f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800615e:	f107 0308 	add.w	r3, r7, #8
 8006162:	4618      	mov	r0, r3
 8006164:	f000 f866 	bl	8006234 <prvSampleTimeNow>
 8006168:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d130      	bne.n	80061d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <prvProcessTimerOrBlockTask+0x3c>
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	429a      	cmp	r2, r3
 800617c:	d806      	bhi.n	800618c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800617e:	f7ff fa47 	bl	8005610 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff ff91 	bl	80060ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800618a:	e024      	b.n	80061d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006192:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <prvProcessTimerOrBlockTask+0x90>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <prvProcessTimerOrBlockTask+0x94>)
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4619      	mov	r1, r3
 80061b2:	f7fe ff6f 	bl	8005094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061b6:	f7ff fa2b 	bl	8005610 <xTaskResumeAll>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061c0:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <prvProcessTimerOrBlockTask+0x98>)
 80061c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	f3bf 8f6f 	isb	sy
}
 80061d0:	e001      	b.n	80061d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061d2:	f7ff fa1d 	bl	8005610 <xTaskResumeAll>
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20001184 	.word	0x20001184
 80061e4:	20001188 	.word	0x20001188
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <prvGetNextExpireTime+0x44>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bf0c      	ite	eq
 80061fe:	2301      	moveq	r3, #1
 8006200:	2300      	movne	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	461a      	mov	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006212:	4b07      	ldr	r3, [pc, #28]	; (8006230 <prvGetNextExpireTime+0x44>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e001      	b.n	8006222 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006222:	68fb      	ldr	r3, [r7, #12]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20001180 	.word	0x20001180

08006234 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800623c:	f7ff fa86 	bl	800574c <xTaskGetTickCount>
 8006240:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <prvSampleTimeNow+0x3c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	429a      	cmp	r2, r3
 800624a:	d205      	bcs.n	8006258 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800624c:	f000 f908 	bl	8006460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	e002      	b.n	800625e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800625e:	4a04      	ldr	r2, [pc, #16]	; (8006270 <prvSampleTimeNow+0x3c>)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006264:	68fb      	ldr	r3, [r7, #12]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20001190 	.word	0x20001190

08006274 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d812      	bhi.n	80062c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062a8:	2301      	movs	r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e01b      	b.n	80062e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <prvInsertTimerInActiveList+0x7c>)
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f7fe f91b 	bl	80044f4 <vListInsert>
 80062be:	e012      	b.n	80062e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d206      	bcs.n	80062d6 <prvInsertTimerInActiveList+0x62>
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d302      	bcc.n	80062d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062d0:	2301      	movs	r3, #1
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	e007      	b.n	80062e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062d6:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <prvInsertTimerInActiveList+0x80>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3304      	adds	r3, #4
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f7fe f907 	bl	80044f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062e6:	697b      	ldr	r3, [r7, #20]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20001184 	.word	0x20001184
 80062f4:	20001180 	.word	0x20001180

080062f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08e      	sub	sp, #56	; 0x38
 80062fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062fe:	e09d      	b.n	800643c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	da18      	bge.n	8006338 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006306:	1d3b      	adds	r3, r7, #4
 8006308:	3304      	adds	r3, #4
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	61fb      	str	r3, [r7, #28]
}
 8006324:	bf00      	nop
 8006326:	e7fe      	b.n	8006326 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800632e:	6850      	ldr	r0, [r2, #4]
 8006330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006332:	6892      	ldr	r2, [r2, #8]
 8006334:	4611      	mov	r1, r2
 8006336:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	db7e      	blt.n	800643c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	3304      	adds	r3, #4
 800634e:	4618      	mov	r0, r3
 8006350:	f7fe f908 	bl	8004564 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006354:	463b      	mov	r3, r7
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff ff6c 	bl	8006234 <prvSampleTimeNow>
 800635c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b09      	cmp	r3, #9
 8006362:	d86a      	bhi.n	800643a <prvProcessReceivedCommands+0x142>
 8006364:	a201      	add	r2, pc, #4	; (adr r2, 800636c <prvProcessReceivedCommands+0x74>)
 8006366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636a:	bf00      	nop
 800636c:	08006395 	.word	0x08006395
 8006370:	08006395 	.word	0x08006395
 8006374:	08006395 	.word	0x08006395
 8006378:	0800643d 	.word	0x0800643d
 800637c:	080063f1 	.word	0x080063f1
 8006380:	08006429 	.word	0x08006429
 8006384:	08006395 	.word	0x08006395
 8006388:	08006395 	.word	0x08006395
 800638c:	0800643d 	.word	0x0800643d
 8006390:	080063f1 	.word	0x080063f1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	18d1      	adds	r1, r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a2:	f7ff ff67 	bl	8006274 <prvInsertTimerInActiveList>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d047      	beq.n	800643c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d13f      	bne.n	800643c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	441a      	add	r2, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	2300      	movs	r3, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063ce:	f7ff fe1f 	bl	8006010 <xTimerGenericCommand>
 80063d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d130      	bne.n	800643c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	61bb      	str	r3, [r7, #24]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	617b      	str	r3, [r7, #20]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	18d1      	adds	r1, r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006422:	f7ff ff27 	bl	8006274 <prvInsertTimerInActiveList>
					break;
 8006426:	e009      	b.n	800643c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006434:	f000 fb6e 	bl	8006b14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006438:	e000      	b.n	800643c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800643a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800643c:	4b07      	ldr	r3, [pc, #28]	; (800645c <prvProcessReceivedCommands+0x164>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	1d39      	adds	r1, r7, #4
 8006442:	2200      	movs	r2, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe fb8d 	bl	8004b64 <xQueueReceive>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f af57 	bne.w	8006300 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	3730      	adds	r7, #48	; 0x30
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20001188 	.word	0x20001188

08006460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006466:	e045      	b.n	80064f4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006468:	4b2c      	ldr	r3, [pc, #176]	; (800651c <prvSwitchTimerLists+0xbc>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006472:	4b2a      	ldr	r3, [pc, #168]	; (800651c <prvSwitchTimerLists+0xbc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3304      	adds	r3, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe f86f 	bl	8004564 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d12e      	bne.n	80064f4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	4413      	add	r3, r2
 800649e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d90e      	bls.n	80064c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064b4:	4b19      	ldr	r3, [pc, #100]	; (800651c <prvSwitchTimerLists+0xbc>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f7fe f818 	bl	80044f4 <vListInsert>
 80064c4:	e016      	b.n	80064f4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	2300      	movs	r3, #0
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	2100      	movs	r1, #0
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f7ff fd9d 	bl	8006010 <xTimerGenericCommand>
 80064d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	603b      	str	r3, [r7, #0]
}
 80064f0:	bf00      	nop
 80064f2:	e7fe      	b.n	80064f2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <prvSwitchTimerLists+0xbc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1b4      	bne.n	8006468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064fe:	4b07      	ldr	r3, [pc, #28]	; (800651c <prvSwitchTimerLists+0xbc>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <prvSwitchTimerLists+0xc0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a04      	ldr	r2, [pc, #16]	; (800651c <prvSwitchTimerLists+0xbc>)
 800650a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800650c:	4a04      	ldr	r2, [pc, #16]	; (8006520 <prvSwitchTimerLists+0xc0>)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6013      	str	r3, [r2, #0]
}
 8006512:	bf00      	nop
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20001180 	.word	0x20001180
 8006520:	20001184 	.word	0x20001184

08006524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800652a:	f000 f92f 	bl	800678c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d120      	bne.n	8006578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006536:	4814      	ldr	r0, [pc, #80]	; (8006588 <prvCheckForValidListAndQueue+0x64>)
 8006538:	f7fd ff8e 	bl	8004458 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800653c:	4813      	ldr	r0, [pc, #76]	; (800658c <prvCheckForValidListAndQueue+0x68>)
 800653e:	f7fd ff8b 	bl	8004458 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <prvCheckForValidListAndQueue+0x6c>)
 8006544:	4a10      	ldr	r2, [pc, #64]	; (8006588 <prvCheckForValidListAndQueue+0x64>)
 8006546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006548:	4b12      	ldr	r3, [pc, #72]	; (8006594 <prvCheckForValidListAndQueue+0x70>)
 800654a:	4a10      	ldr	r2, [pc, #64]	; (800658c <prvCheckForValidListAndQueue+0x68>)
 800654c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800654e:	2300      	movs	r3, #0
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <prvCheckForValidListAndQueue+0x74>)
 8006554:	4a11      	ldr	r2, [pc, #68]	; (800659c <prvCheckForValidListAndQueue+0x78>)
 8006556:	2110      	movs	r1, #16
 8006558:	200a      	movs	r0, #10
 800655a:	f7fe f895 	bl	8004688 <xQueueGenericCreateStatic>
 800655e:	4603      	mov	r3, r0
 8006560:	4a08      	ldr	r2, [pc, #32]	; (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <prvCheckForValidListAndQueue+0x60>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <prvCheckForValidListAndQueue+0x60>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	490b      	ldr	r1, [pc, #44]	; (80065a0 <prvCheckForValidListAndQueue+0x7c>)
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fd66 	bl	8005044 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006578:	f000 f938 	bl	80067ec <vPortExitCritical>
}
 800657c:	bf00      	nop
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20001188 	.word	0x20001188
 8006588:	20001158 	.word	0x20001158
 800658c:	2000116c 	.word	0x2000116c
 8006590:	20001180 	.word	0x20001180
 8006594:	20001184 	.word	0x20001184
 8006598:	20001234 	.word	0x20001234
 800659c:	20001194 	.word	0x20001194
 80065a0:	08006e08 	.word	0x08006e08

080065a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3b04      	subs	r3, #4
 80065b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3b04      	subs	r3, #4
 80065c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065d4:	4a08      	ldr	r2, [pc, #32]	; (80065f8 <pxPortInitialiseStack+0x54>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3b14      	subs	r3, #20
 80065de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3b20      	subs	r3, #32
 80065ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	080065fd 	.word	0x080065fd

080065fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006602:	2300      	movs	r3, #0
 8006604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <prvTaskExitError+0x54>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d00a      	beq.n	8006626 <prvTaskExitError+0x2a>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	60fb      	str	r3, [r7, #12]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <prvTaskExitError+0x28>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60bb      	str	r3, [r7, #8]
}
 8006638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800663a:	bf00      	nop
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0fc      	beq.n	800663c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	2000000c 	.word	0x2000000c
	...

08006660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <pxCurrentTCBConst2>)
 8006662:	6819      	ldr	r1, [r3, #0]
 8006664:	6808      	ldr	r0, [r1, #0]
 8006666:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800666a:	f380 8809 	msr	PSP, r0
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8811 	msr	BASEPRI, r0
 800667a:	f04e 0e0d 	orr.w	lr, lr, #13
 800667e:	4770      	bx	lr

08006680 <pxCurrentTCBConst2>:
 8006680:	20000c58 	.word	0x20000c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop

08006688 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006688:	4806      	ldr	r0, [pc, #24]	; (80066a4 <prvPortStartFirstTask+0x1c>)
 800668a:	6800      	ldr	r0, [r0, #0]
 800668c:	6800      	ldr	r0, [r0, #0]
 800668e:	f380 8808 	msr	MSP, r0
 8006692:	b662      	cpsie	i
 8006694:	b661      	cpsie	f
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	df00      	svc	0
 80066a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066a2:	bf00      	nop
 80066a4:	e000ed08 	.word	0xe000ed08

080066a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066ae:	4b32      	ldr	r3, [pc, #200]	; (8006778 <xPortStartScheduler+0xd0>)
 80066b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	22ff      	movs	r2, #255	; 0xff
 80066be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	4b2a      	ldr	r3, [pc, #168]	; (800677c <xPortStartScheduler+0xd4>)
 80066d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066d6:	4b2a      	ldr	r3, [pc, #168]	; (8006780 <xPortStartScheduler+0xd8>)
 80066d8:	2207      	movs	r2, #7
 80066da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066dc:	e009      	b.n	80066f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80066de:	4b28      	ldr	r3, [pc, #160]	; (8006780 <xPortStartScheduler+0xd8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	4a26      	ldr	r2, [pc, #152]	; (8006780 <xPortStartScheduler+0xd8>)
 80066e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fa:	2b80      	cmp	r3, #128	; 0x80
 80066fc:	d0ef      	beq.n	80066de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066fe:	4b20      	ldr	r3, [pc, #128]	; (8006780 <xPortStartScheduler+0xd8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f1c3 0307 	rsb	r3, r3, #7
 8006706:	2b04      	cmp	r3, #4
 8006708:	d00a      	beq.n	8006720 <xPortStartScheduler+0x78>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60bb      	str	r3, [r7, #8]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006720:	4b17      	ldr	r3, [pc, #92]	; (8006780 <xPortStartScheduler+0xd8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	021b      	lsls	r3, r3, #8
 8006726:	4a16      	ldr	r2, [pc, #88]	; (8006780 <xPortStartScheduler+0xd8>)
 8006728:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <xPortStartScheduler+0xd8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006732:	4a13      	ldr	r2, [pc, #76]	; (8006780 <xPortStartScheduler+0xd8>)
 8006734:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <xPortStartScheduler+0xdc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a10      	ldr	r2, [pc, #64]	; (8006784 <xPortStartScheduler+0xdc>)
 8006744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006748:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800674a:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <xPortStartScheduler+0xdc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <xPortStartScheduler+0xdc>)
 8006750:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006754:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006756:	f000 f8b9 	bl	80068cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <xPortStartScheduler+0xe0>)
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006760:	f7ff ff92 	bl	8006688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006764:	f7ff f8be 	bl	80058e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006768:	f7ff ff48 	bl	80065fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	e000e400 	.word	0xe000e400
 800677c:	20001284 	.word	0x20001284
 8006780:	20001288 	.word	0x20001288
 8006784:	e000ed20 	.word	0xe000ed20
 8006788:	2000000c 	.word	0x2000000c

0800678c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	607b      	str	r3, [r7, #4]
}
 80067a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <vPortEnterCritical+0x58>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3301      	adds	r3, #1
 80067ac:	4a0d      	ldr	r2, [pc, #52]	; (80067e4 <vPortEnterCritical+0x58>)
 80067ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067b0:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <vPortEnterCritical+0x58>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d10f      	bne.n	80067d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <vPortEnterCritical+0x5c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	603b      	str	r3, [r7, #0]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <vPortEnterCritical+0x4a>
	}
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	2000000c 	.word	0x2000000c
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <vPortExitCritical+0x4c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <vPortExitCritical+0x24>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <vPortExitCritical+0x4c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3b01      	subs	r3, #1
 8006816:	4a08      	ldr	r2, [pc, #32]	; (8006838 <vPortExitCritical+0x4c>)
 8006818:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <vPortExitCritical+0x4c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <vPortExitCritical+0x42>
 8006822:	2300      	movs	r3, #0
 8006824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f383 8811 	msr	BASEPRI, r3
}
 800682c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr
 8006838:	2000000c 	.word	0x2000000c
 800683c:	00000000 	.word	0x00000000

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006850:	6010      	str	r0, [r2, #0]
 8006852:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006856:	f04f 0050 	mov.w	r0, #80	; 0x50
 800685a:	f380 8811 	msr	BASEPRI, r0
 800685e:	f7ff f841 	bl	80058e4 <vTaskSwitchContext>
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f380 8811 	msr	BASEPRI, r0
 800686a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800686e:	6819      	ldr	r1, [r3, #0]
 8006870:	6808      	ldr	r0, [r1, #0]
 8006872:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006876:	f380 8809 	msr	PSP, r0
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	4770      	bx	lr

08006880 <pxCurrentTCBConst>:
 8006880:	20000c58 	.word	0x20000c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop

08006888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	607b      	str	r3, [r7, #4]
}
 80068a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068a2:	f7fe ff61 	bl	8005768 <xTaskIncrementTick>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068ac:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <SysTick_Handler+0x40>)
 80068ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	2300      	movs	r3, #0
 80068b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f383 8811 	msr	BASEPRI, r3
}
 80068be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	e000ed04 	.word	0xe000ed04

080068cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <vPortSetupTimerInterrupt+0x30>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068d6:	4b0a      	ldr	r3, [pc, #40]	; (8006900 <vPortSetupTimerInterrupt+0x34>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <vPortSetupTimerInterrupt+0x38>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a09      	ldr	r2, [pc, #36]	; (8006908 <vPortSetupTimerInterrupt+0x3c>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	099b      	lsrs	r3, r3, #6
 80068e8:	4a08      	ldr	r2, [pc, #32]	; (800690c <vPortSetupTimerInterrupt+0x40>)
 80068ea:	3b01      	subs	r3, #1
 80068ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ee:	4b03      	ldr	r3, [pc, #12]	; (80068fc <vPortSetupTimerInterrupt+0x30>)
 80068f0:	2207      	movs	r2, #7
 80068f2:	601a      	str	r2, [r3, #0]
}
 80068f4:	bf00      	nop
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr
 80068fc:	e000e010 	.word	0xe000e010
 8006900:	e000e018 	.word	0xe000e018
 8006904:	20000000 	.word	0x20000000
 8006908:	10624dd3 	.word	0x10624dd3
 800690c:	e000e014 	.word	0xe000e014

08006910 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006916:	f3ef 8305 	mrs	r3, IPSR
 800691a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	d914      	bls.n	800694c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006922:	4a16      	ldr	r2, [pc, #88]	; (800697c <vPortValidateInterruptPriority+0x6c>)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <vPortValidateInterruptPriority+0x70>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	7afa      	ldrb	r2, [r7, #11]
 8006932:	429a      	cmp	r2, r3
 8006934:	d20a      	bcs.n	800694c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	607b      	str	r3, [r7, #4]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <vPortValidateInterruptPriority+0x74>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <vPortValidateInterruptPriority+0x78>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d90a      	bls.n	8006972 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	603b      	str	r3, [r7, #0]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <vPortValidateInterruptPriority+0x60>
	}
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr
 800697c:	e000e3f0 	.word	0xe000e3f0
 8006980:	20001284 	.word	0x20001284
 8006984:	e000ed0c 	.word	0xe000ed0c
 8006988:	20001288 	.word	0x20001288

0800698c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006998:	f7fe fe2c 	bl	80055f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800699c:	4b58      	ldr	r3, [pc, #352]	; (8006b00 <pvPortMalloc+0x174>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069a4:	f000 f910 	bl	8006bc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069a8:	4b56      	ldr	r3, [pc, #344]	; (8006b04 <pvPortMalloc+0x178>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 808e 	bne.w	8006ad2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01d      	beq.n	80069f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069bc:	2208      	movs	r2, #8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4413      	add	r3, r2
 80069c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d014      	beq.n	80069f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f023 0307 	bic.w	r3, r3, #7
 80069d4:	3308      	adds	r3, #8
 80069d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <pvPortMalloc+0x6c>
	__asm volatile
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	617b      	str	r3, [r7, #20]
}
 80069f4:	bf00      	nop
 80069f6:	e7fe      	b.n	80069f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d069      	beq.n	8006ad2 <pvPortMalloc+0x146>
 80069fe:	4b42      	ldr	r3, [pc, #264]	; (8006b08 <pvPortMalloc+0x17c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d864      	bhi.n	8006ad2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a08:	4b40      	ldr	r3, [pc, #256]	; (8006b0c <pvPortMalloc+0x180>)
 8006a0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a0c:	4b3f      	ldr	r3, [pc, #252]	; (8006b0c <pvPortMalloc+0x180>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a12:	e004      	b.n	8006a1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d903      	bls.n	8006a30 <pvPortMalloc+0xa4>
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f1      	bne.n	8006a14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a30:	4b33      	ldr	r3, [pc, #204]	; (8006b00 <pvPortMalloc+0x174>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d04b      	beq.n	8006ad2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2208      	movs	r2, #8
 8006a40:	4413      	add	r3, r2
 8006a42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	2308      	movs	r3, #8
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d91f      	bls.n	8006a9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <pvPortMalloc+0xf8>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	613b      	str	r3, [r7, #16]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	1ad2      	subs	r2, r2, r3
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a96:	69b8      	ldr	r0, [r7, #24]
 8006a98:	f000 f8f8 	bl	8006c8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <pvPortMalloc+0x17c>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <pvPortMalloc+0x17c>)
 8006aa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aaa:	4b17      	ldr	r3, [pc, #92]	; (8006b08 <pvPortMalloc+0x17c>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <pvPortMalloc+0x184>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d203      	bcs.n	8006abe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <pvPortMalloc+0x17c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <pvPortMalloc+0x184>)
 8006abc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <pvPortMalloc+0x178>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ad2:	f7fe fd9d 	bl	8005610 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <pvPortMalloc+0x16a>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	60fb      	str	r3, [r7, #12]
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <pvPortMalloc+0x168>
	return pvReturn;
 8006af6:	69fb      	ldr	r3, [r7, #28]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20001e94 	.word	0x20001e94
 8006b04:	20001ea0 	.word	0x20001ea0
 8006b08:	20001e98 	.word	0x20001e98
 8006b0c:	20001e8c 	.word	0x20001e8c
 8006b10:	20001e9c 	.word	0x20001e9c

08006b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d048      	beq.n	8006bb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b26:	2308      	movs	r3, #8
 8006b28:	425b      	negs	r3, r3
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	4b21      	ldr	r3, [pc, #132]	; (8006bc0 <vPortFree+0xac>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <vPortFree+0x44>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	60fb      	str	r3, [r7, #12]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <vPortFree+0x62>
	__asm volatile
 8006b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	60bb      	str	r3, [r7, #8]
}
 8006b72:	bf00      	nop
 8006b74:	e7fe      	b.n	8006b74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <vPortFree+0xac>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d019      	beq.n	8006bb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d115      	bne.n	8006bb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <vPortFree+0xac>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	43db      	mvns	r3, r3
 8006b96:	401a      	ands	r2, r3
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b9c:	f7fe fd2a 	bl	80055f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <vPortFree+0xb0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4413      	add	r3, r2
 8006baa:	4a06      	ldr	r2, [pc, #24]	; (8006bc4 <vPortFree+0xb0>)
 8006bac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bae:	6938      	ldr	r0, [r7, #16]
 8006bb0:	f000 f86c 	bl	8006c8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006bb4:	f7fe fd2c 	bl	8005610 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006bb8:	bf00      	nop
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20001ea0 	.word	0x20001ea0
 8006bc4:	20001e98 	.word	0x20001e98

08006bc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bd4:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <prvHeapInit+0xac>)
 8006bd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3307      	adds	r3, #7
 8006be6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0307 	bic.w	r3, r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	4a1f      	ldr	r2, [pc, #124]	; (8006c74 <prvHeapInit+0xac>)
 8006bf8:	4413      	add	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c00:	4a1d      	ldr	r2, [pc, #116]	; (8006c78 <prvHeapInit+0xb0>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c06:	4b1c      	ldr	r3, [pc, #112]	; (8006c78 <prvHeapInit+0xb0>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c14:	2208      	movs	r2, #8
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1a9b      	subs	r3, r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0307 	bic.w	r3, r3, #7
 8006c22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <prvHeapInit+0xb4>)
 8006c28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <prvHeapInit+0xb4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c32:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <prvHeapInit+0xb4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <prvHeapInit+0xb4>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4a0a      	ldr	r2, [pc, #40]	; (8006c80 <prvHeapInit+0xb8>)
 8006c56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <prvHeapInit+0xbc>)
 8006c5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c60:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <prvHeapInit+0xc0>)
 8006c62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c66:	601a      	str	r2, [r3, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	2000128c 	.word	0x2000128c
 8006c78:	20001e8c 	.word	0x20001e8c
 8006c7c:	20001e94 	.word	0x20001e94
 8006c80:	20001e9c 	.word	0x20001e9c
 8006c84:	20001e98 	.word	0x20001e98
 8006c88:	20001ea0 	.word	0x20001ea0

08006c8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <prvInsertBlockIntoFreeList+0xa8>)
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	e002      	b.n	8006ca0 <prvInsertBlockIntoFreeList+0x14>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d8f7      	bhi.n	8006c9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d108      	bne.n	8006cce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	441a      	add	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	441a      	add	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d118      	bne.n	8006d14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <prvInsertBlockIntoFreeList+0xac>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d00d      	beq.n	8006d0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	e008      	b.n	8006d1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <prvInsertBlockIntoFreeList+0xac>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e003      	b.n	8006d1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d002      	beq.n	8006d2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr
 8006d34:	20001e8c 	.word	0x20001e8c
 8006d38:	20001e94 	.word	0x20001e94

08006d3c <memset>:
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	4402      	add	r2, r0
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d100      	bne.n	8006d46 <memset+0xa>
 8006d44:	4770      	bx	lr
 8006d46:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4a:	e7f9      	b.n	8006d40 <memset+0x4>

08006d4c <__libc_init_array>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	2600      	movs	r6, #0
 8006d50:	4d0c      	ldr	r5, [pc, #48]	; (8006d84 <__libc_init_array+0x38>)
 8006d52:	4c0d      	ldr	r4, [pc, #52]	; (8006d88 <__libc_init_array+0x3c>)
 8006d54:	1b64      	subs	r4, r4, r5
 8006d56:	10a4      	asrs	r4, r4, #2
 8006d58:	42a6      	cmp	r6, r4
 8006d5a:	d109      	bne.n	8006d70 <__libc_init_array+0x24>
 8006d5c:	f000 f828 	bl	8006db0 <_init>
 8006d60:	2600      	movs	r6, #0
 8006d62:	4d0a      	ldr	r5, [pc, #40]	; (8006d8c <__libc_init_array+0x40>)
 8006d64:	4c0a      	ldr	r4, [pc, #40]	; (8006d90 <__libc_init_array+0x44>)
 8006d66:	1b64      	subs	r4, r4, r5
 8006d68:	10a4      	asrs	r4, r4, #2
 8006d6a:	42a6      	cmp	r6, r4
 8006d6c:	d105      	bne.n	8006d7a <__libc_init_array+0x2e>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d74:	4798      	blx	r3
 8006d76:	3601      	adds	r6, #1
 8006d78:	e7ee      	b.n	8006d58 <__libc_init_array+0xc>
 8006d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7e:	4798      	blx	r3
 8006d80:	3601      	adds	r6, #1
 8006d82:	e7f2      	b.n	8006d6a <__libc_init_array+0x1e>
 8006d84:	08006ed8 	.word	0x08006ed8
 8006d88:	08006ed8 	.word	0x08006ed8
 8006d8c:	08006ed8 	.word	0x08006ed8
 8006d90:	08006edc 	.word	0x08006edc

08006d94 <memcpy>:
 8006d94:	440a      	add	r2, r1
 8006d96:	4291      	cmp	r1, r2
 8006d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d9c:	d100      	bne.n	8006da0 <memcpy+0xc>
 8006d9e:	4770      	bx	lr
 8006da0:	b510      	push	{r4, lr}
 8006da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006da6:	4291      	cmp	r1, r2
 8006da8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dac:	d1f9      	bne.n	8006da2 <memcpy+0xe>
 8006dae:	bd10      	pop	{r4, pc}

08006db0 <_init>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr

08006dbc <_fini>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr
