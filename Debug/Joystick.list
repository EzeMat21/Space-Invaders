
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009120  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  08009230  08009230  00019230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c88  08009c88  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08009c88  08009c88  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c88  08009c88  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c88  08009c88  00019c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c8c  08009c8c  00019c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002320  20000018  08009ca8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002338  08009ca8  00022338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a38e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004040  00000000  00000000  0003a412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  0003e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001319  00000000  00000000  0003fce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e95  00000000  00000000  00040ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc5f  00000000  00000000  0005ae8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009af5d  00000000  00000000  00078aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000679c  00000000  00000000  00113a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08009218 	.word	0x08009218

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08009218 	.word	0x08009218

08000150 <getPlayer>:


extern dificultad_t dificultad;


player_t *getPlayer(){
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

	return &Player;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <getPlayer+0x10>)
}
 8000156:	4618      	mov	r0, r3
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000034 	.word	0x20000034

08000164 <getAlien>:

alien_t *getAlien(uint8_t fila, uint8_t columna){
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	460a      	mov	r2, r1
 800016e:	71fb      	strb	r3, [r7, #7]
 8000170:	4613      	mov	r3, r2
 8000172:	71bb      	strb	r3, [r7, #6]
	return &Alien[fila][columna];
 8000174:	79f9      	ldrb	r1, [r7, #7]
 8000176:	79bb      	ldrb	r3, [r7, #6]
 8000178:	461a      	mov	r2, r3
 800017a:	0092      	lsls	r2, r2, #2
 800017c:	441a      	add	r2, r3
 800017e:	460b      	mov	r3, r1
 8000180:	009b      	lsls	r3, r3, #2
 8000182:	440b      	add	r3, r1
 8000184:	00d9      	lsls	r1, r3, #3
 8000186:	1ac9      	subs	r1, r1, r3
 8000188:	1853      	adds	r3, r2, r1
 800018a:	4a03      	ldr	r2, [pc, #12]	; (8000198 <getAlien+0x34>)
 800018c:	4413      	add	r3, r2
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000040 	.word	0x20000040

0800019c <getMovAliens>:

movimiento_aliens_t *getMovAliens(){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	return &movimiento_Aliens;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <getMovAliens+0x10>)
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000003c 	.word	0x2000003c

080001b0 <getDisparo>:

disparo_t *getDisparo(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	return &Disparo;
 80001b4:	4b02      	ldr	r3, [pc, #8]	; (80001c0 <getDisparo+0x10>)
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000038 	.word	0x20000038

080001c4 <playerInit>:

void playerInit(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	Player.posicion_X = 64;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <playerInit+0x14>)
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	705a      	strb	r2, [r3, #1]

}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000034 	.word	0x20000034

080001dc <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af02      	add	r7, sp, #8
 80001e2:	4603      	mov	r3, r0
 80001e4:	6039      	str	r1, [r7, #0]
 80001e6:	71fb      	strb	r3, [r7, #7]

	if(direccion == derecha){
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10e      	bne.n	800020c <plotPlayer+0x30>

		if(player->posicion_X >= 120){
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	2b77      	cmp	r3, #119	; 0x77
 80001f4:	d903      	bls.n	80001fe <plotPlayer+0x22>
			player->posicion_X = 120;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2278      	movs	r2, #120	; 0x78
 80001fa:	705a      	strb	r2, [r3, #1]
 80001fc:	e017      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X + 4;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	3304      	adds	r3, #4
 8000204:	b2da      	uxtb	r2, r3
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	705a      	strb	r2, [r3, #1]
 800020a:	e010      	b.n	800022e <plotPlayer+0x52>
		}

	}
	else if(direccion == izquierda){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b03      	cmp	r3, #3
 8000210:	d10d      	bne.n	800022e <plotPlayer+0x52>

		if(player->posicion_X <= 0){
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d103      	bne.n	8000222 <plotPlayer+0x46>
			player->posicion_X = 0;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	705a      	strb	r2, [r3, #1]
 8000220:	e005      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X - 4;
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	3b04      	subs	r3, #4
 8000228:	b2da      	uxtb	r2, r3
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	705a      	strb	r2, [r3, #1]
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	b218      	sxth	r0, r3
 8000234:	2301      	movs	r3, #1
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	2308      	movs	r3, #8
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2308      	movs	r3, #8
 800023e:	4a04      	ldr	r2, [pc, #16]	; (8000250 <plotPlayer+0x74>)
 8000240:	2138      	movs	r1, #56	; 0x38
 8000242:	f001 f9b1 	bl	80015a8 <SSD1306_DrawBitmap>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	08009a78 	.word	0x08009a78

08000254 <InvaderInit>:



void InvaderInit(){
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

	movimiento_Aliens.orientacion = mov_derecha;
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <InvaderInit+0xa0>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000260:	2300      	movs	r3, #0
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	e03e      	b.n	80002e4 <InvaderInit+0x90>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	e035      	b.n	80002d8 <InvaderInit+0x84>
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	461a      	mov	r2, r3
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	441a      	add	r2, r3
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	4413      	add	r3, r2
 8000278:	b2dc      	uxtb	r4, r3
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff6f 	bl	8000164 <getAlien>
 8000286:	4603      	mov	r3, r0
 8000288:	f104 020a 	add.w	r2, r4, #10
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	701a      	strb	r2, [r3, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff64 	bl	8000164 <getAlien>
 800029c:	4602      	mov	r2, r0
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4619      	mov	r1, r3
 80002a2:	0089      	lsls	r1, r1, #2
 80002a4:	4419      	add	r1, r3
 80002a6:	0049      	lsls	r1, r1, #1
 80002a8:	440b      	add	r3, r1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	7053      	strb	r3, [r2, #1]
			getAlien(y, x)->vivo = true;
 80002ae:	79ba      	ldrb	r2, [r7, #6]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff55 	bl	8000164 <getAlien>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2201      	movs	r2, #1
 80002be:	709a      	strb	r2, [r3, #2]
			getAlien(y, x)->conteo_explosion = 2;
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff4c 	bl	8000164 <getAlien>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2202      	movs	r2, #2
 80002d0:	711a      	strb	r2, [r3, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b06      	cmp	r3, #6
 80002dc:	d9c6      	bls.n	800026c <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	3301      	adds	r3, #1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d9bd      	bls.n	8000266 <InvaderInit+0x12>
		}
	}

}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	2000003c 	.word	0x2000003c

080002f8 <plotAliens>:

void plotAliens(){
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af02      	add	r7, sp, #8


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80002fe:	f7ff ff4d 	bl	800019c <getMovAliens>
 8000302:	4603      	mov	r3, r0
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	4aa9      	ldr	r2, [pc, #676]	; (80005ac <plotAliens+0x2b4>)
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	fbb3 f1f2 	udiv	r1, r3, r2
 800030e:	fb01 f202 	mul.w	r2, r1, r2
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 80a8 	bne.w	800046c <plotAliens+0x174>
			switch(getMovAliens()->orientacion){
 800031c:	f7ff ff3e 	bl	800019c <getMovAliens>
 8000320:	4603      	mov	r3, r0
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <plotAliens+0x36>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d025      	beq.n	8000378 <plotAliens+0x80>
							}
						}

						break;
				default:
					break;
 800032c:	e049      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	e01d      	b.n	8000370 <plotAliens+0x78>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000334:	2300      	movs	r3, #0
 8000336:	71bb      	strb	r3, [r7, #6]
 8000338:	e014      	b.n	8000364 <plotAliens+0x6c>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 1;
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff0f 	bl	8000164 <getAlien>
 8000346:	4603      	mov	r3, r0
 8000348:	781c      	ldrb	r4, [r3, #0]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff07 	bl	8000164 <getAlien>
 8000356:	4603      	mov	r3, r0
 8000358:	1c62      	adds	r2, r4, #1
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3301      	adds	r3, #1
 8000362:	71bb      	strb	r3, [r7, #6]
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	2b06      	cmp	r3, #6
 8000368:	d9e7      	bls.n	800033a <plotAliens+0x42>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	3301      	adds	r3, #1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d9de      	bls.n	8000334 <plotAliens+0x3c>
					break;
 8000376:	e024      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000378:	2300      	movs	r3, #0
 800037a:	717b      	strb	r3, [r7, #5]
 800037c:	e01d      	b.n	80003ba <plotAliens+0xc2>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800037e:	2300      	movs	r3, #0
 8000380:	713b      	strb	r3, [r7, #4]
 8000382:	e014      	b.n	80003ae <plotAliens+0xb6>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 1;
 8000384:	793a      	ldrb	r2, [r7, #4]
 8000386:	797b      	ldrb	r3, [r7, #5]
 8000388:	4611      	mov	r1, r2
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff feea 	bl	8000164 <getAlien>
 8000390:	4603      	mov	r3, r0
 8000392:	781c      	ldrb	r4, [r3, #0]
 8000394:	793a      	ldrb	r2, [r7, #4]
 8000396:	797b      	ldrb	r3, [r7, #5]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fee2 	bl	8000164 <getAlien>
 80003a0:	4603      	mov	r3, r0
 80003a2:	1e62      	subs	r2, r4, #1
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003a8:	793b      	ldrb	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	713b      	strb	r3, [r7, #4]
 80003ae:	793b      	ldrb	r3, [r7, #4]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d9e7      	bls.n	8000384 <plotAliens+0x8c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	3301      	adds	r3, #1
 80003b8:	717b      	strb	r3, [r7, #5]
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d9de      	bls.n	800037e <plotAliens+0x86>
						break;
 80003c0:	bf00      	nop
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 80003c2:	2106      	movs	r1, #6
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fecd 	bl	8000164 <getAlien>
 80003ca:	4603      	mov	r3, r0
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b72      	cmp	r3, #114	; 0x72
 80003d0:	d904      	bls.n	80003dc <plotAliens+0xe4>

				getMovAliens()->orientacion = mov_izquierda;
 80003d2:	f7ff fee3 	bl	800019c <getMovAliens>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 80003dc:	2100      	movs	r1, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff fec0 	bl	8000164 <getAlien>
 80003e4:	4603      	mov	r3, r0
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10e      	bne.n	800040a <plotAliens+0x112>
				getMovAliens()->orientacion = mov_derecha;
 80003ec:	f7ff fed6 	bl	800019c <getMovAliens>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 80003f6:	f7ff fed1 	bl	800019c <getMovAliens>
 80003fa:	4603      	mov	r3, r0
 80003fc:	789c      	ldrb	r4, [r3, #2]
 80003fe:	f7ff fecd 	bl	800019c <getMovAliens>
 8000402:	4603      	mov	r3, r0
 8000404:	1c62      	adds	r2, r4, #1
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 800040a:	f7ff fec7 	bl	800019c <getMovAliens>
 800040e:	4603      	mov	r3, r0
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	2b0a      	cmp	r3, #10
 8000414:	d12a      	bne.n	800046c <plotAliens+0x174>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000416:	2300      	movs	r3, #0
 8000418:	70fb      	strb	r3, [r7, #3]
 800041a:	e024      	b.n	8000466 <plotAliens+0x16e>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800041c:	2300      	movs	r3, #0
 800041e:	70bb      	strb	r3, [r7, #2]
 8000420:	e01b      	b.n	800045a <plotAliens+0x162>

						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 8000422:	78ba      	ldrb	r2, [r7, #2]
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe9b 	bl	8000164 <getAlien>
 800042e:	4603      	mov	r3, r0
 8000430:	785d      	ldrb	r5, [r3, #1]
 8000432:	4b5e      	ldr	r3, [pc, #376]	; (80005ac <plotAliens+0x2b4>)
 8000434:	785c      	ldrb	r4, [r3, #1]
 8000436:	78ba      	ldrb	r2, [r7, #2]
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe91 	bl	8000164 <getAlien>
 8000442:	4603      	mov	r3, r0
 8000444:	192a      	adds	r2, r5, r4
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	705a      	strb	r2, [r3, #1]
						getMovAliens()->conteo_bajada = 0;
 800044a:	f7ff fea7 	bl	800019c <getMovAliens>
 800044e:	4603      	mov	r3, r0
 8000450:	2200      	movs	r2, #0
 8000452:	709a      	strb	r2, [r3, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	3301      	adds	r3, #1
 8000458:	70bb      	strb	r3, [r7, #2]
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	2b06      	cmp	r3, #6
 800045e:	d9e0      	bls.n	8000422 <plotAliens+0x12a>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	3301      	adds	r3, #1
 8000464:	70fb      	strb	r3, [r7, #3]
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d9d7      	bls.n	800041c <plotAliens+0x124>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 800046c:	f7ff fe96 	bl	800019c <getMovAliens>
 8000470:	4603      	mov	r3, r0
 8000472:	785c      	ldrb	r4, [r3, #1]
 8000474:	f7ff fe92 	bl	800019c <getMovAliens>
 8000478:	4603      	mov	r3, r0
 800047a:	1c62      	adds	r2, r4, #1
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	705a      	strb	r2, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000480:	2300      	movs	r3, #0
 8000482:	707b      	strb	r3, [r7, #1]
 8000484:	e089      	b.n	800059a <plotAliens+0x2a2>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000486:	2300      	movs	r3, #0
 8000488:	703b      	strb	r3, [r7, #0]
 800048a:	e07f      	b.n	800058c <plotAliens+0x294>

					switch(y){
 800048c:	787b      	ldrb	r3, [r7, #1]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <plotAliens+0x1a0>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d026      	beq.n	80004e4 <plotAliens+0x1ec>
 8000496:	e04b      	b.n	8000530 <plotAliens+0x238>

					case 0:
						if(getAlien(y,x)->vivo == true){
 8000498:	783a      	ldrb	r2, [r7, #0]
 800049a:	787b      	ldrb	r3, [r7, #1]
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe60 	bl	8000164 <getAlien>
 80004a4:	4603      	mov	r3, r0
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d167      	bne.n	800057c <plotAliens+0x284>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004ac:	783a      	ldrb	r2, [r7, #0]
 80004ae:	787b      	ldrb	r3, [r7, #1]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe56 	bl	8000164 <getAlien>
 80004b8:	4603      	mov	r3, r0
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b21c      	sxth	r4, r3
 80004be:	783a      	ldrb	r2, [r7, #0]
 80004c0:	787b      	ldrb	r3, [r7, #1]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe4d 	bl	8000164 <getAlien>
 80004ca:	4603      	mov	r3, r0
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	b219      	sxth	r1, r3
 80004d0:	2301      	movs	r3, #1
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2308      	movs	r3, #8
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2310      	movs	r3, #16
 80004da:	4a35      	ldr	r2, [pc, #212]	; (80005b0 <plotAliens+0x2b8>)
 80004dc:	4620      	mov	r0, r4
 80004de:	f001 f863 	bl	80015a8 <SSD1306_DrawBitmap>
						}
						break;
 80004e2:	e04b      	b.n	800057c <plotAliens+0x284>
					case 1:
						if(getAlien(y,x)->vivo == true){
 80004e4:	783a      	ldrb	r2, [r7, #0]
 80004e6:	787b      	ldrb	r3, [r7, #1]
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe3a 	bl	8000164 <getAlien>
 80004f0:	4603      	mov	r3, r0
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d143      	bne.n	8000580 <plotAliens+0x288>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004f8:	783a      	ldrb	r2, [r7, #0]
 80004fa:	787b      	ldrb	r3, [r7, #1]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe30 	bl	8000164 <getAlien>
 8000504:	4603      	mov	r3, r0
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b21c      	sxth	r4, r3
 800050a:	783a      	ldrb	r2, [r7, #0]
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe27 	bl	8000164 <getAlien>
 8000516:	4603      	mov	r3, r0
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	b219      	sxth	r1, r3
 800051c:	2301      	movs	r3, #1
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2308      	movs	r3, #8
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2310      	movs	r3, #16
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <plotAliens+0x2b8>)
 8000528:	4620      	mov	r0, r4
 800052a:	f001 f83d 	bl	80015a8 <SSD1306_DrawBitmap>
						}
						break;
 800052e:	e027      	b.n	8000580 <plotAliens+0x288>
					default:
						if(getAlien(y,x)->vivo == true){
 8000530:	783a      	ldrb	r2, [r7, #0]
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe14 	bl	8000164 <getAlien>
 800053c:	4603      	mov	r3, r0
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d11f      	bne.n	8000584 <plotAliens+0x28c>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000544:	783a      	ldrb	r2, [r7, #0]
 8000546:	787b      	ldrb	r3, [r7, #1]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe0a 	bl	8000164 <getAlien>
 8000550:	4603      	mov	r3, r0
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b21c      	sxth	r4, r3
 8000556:	783a      	ldrb	r2, [r7, #0]
 8000558:	787b      	ldrb	r3, [r7, #1]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe01 	bl	8000164 <getAlien>
 8000562:	4603      	mov	r3, r0
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	b219      	sxth	r1, r3
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2308      	movs	r3, #8
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2310      	movs	r3, #16
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <plotAliens+0x2bc>)
 8000574:	4620      	mov	r0, r4
 8000576:	f001 f817 	bl	80015a8 <SSD1306_DrawBitmap>
						}
						break;
 800057a:	e003      	b.n	8000584 <plotAliens+0x28c>
						break;
 800057c:	bf00      	nop
 800057e:	e002      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000580:	bf00      	nop
 8000582:	e000      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000584:	bf00      	nop
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000586:	783b      	ldrb	r3, [r7, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	703b      	strb	r3, [r7, #0]
 800058c:	783b      	ldrb	r3, [r7, #0]
 800058e:	2b06      	cmp	r3, #6
 8000590:	f67f af7c 	bls.w	800048c <plotAliens+0x194>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000594:	787b      	ldrb	r3, [r7, #1]
 8000596:	3301      	adds	r3, #1
 8000598:	707b      	strb	r3, [r7, #1]
 800059a:	787b      	ldrb	r3, [r7, #1]
 800059c:	2b02      	cmp	r3, #2
 800059e:	f67f af72 	bls.w	8000486 <plotAliens+0x18e>
					}
			}

		}

}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	200000ac 	.word	0x200000ac
 80005b0:	08009a58 	.word	0x08009a58
 80005b4:	08009a68 	.word	0x08009a68

080005b8 <disparoInit>:


void disparoInit(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

	Disparo.posicion_x = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <disparoInit+0x20>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <disparoInit+0x20>)
 80005c4:	223c      	movs	r2, #60	; 0x3c
 80005c6:	705a      	strb	r2, [r3, #1]
	Disparo.disparo = false;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <disparoInit+0x20>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	709a      	strb	r2, [r3, #2]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000038 	.word	0x20000038

080005dc <disparar>:


void disparar(){
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8


			if(getDisparo()->numero_disparos == 1){
 80005e2:	f7ff fde5 	bl	80001b0 <getDisparo>
 80005e6:	4603      	mov	r3, r0
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10c      	bne.n	8000608 <disparar+0x2c>
				getDisparo()->disparo = true;
 80005ee:	f7ff fddf 	bl	80001b0 <getDisparo>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2201      	movs	r2, #1
 80005f6:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 80005f8:	f7ff fdaa 	bl	8000150 <getPlayer>
 80005fc:	4604      	mov	r4, r0
 80005fe:	f7ff fdd7 	bl	80001b0 <getDisparo>
 8000602:	4603      	mov	r3, r0
 8000604:	7862      	ldrb	r2, [r4, #1]
 8000606:	701a      	strb	r2, [r3, #0]
			}


			if(getDisparo()->disparo == true){
 8000608:	f7ff fdd2 	bl	80001b0 <getDisparo>
 800060c:	4603      	mov	r3, r0
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d145      	bne.n	80006a0 <disparar+0xc4>
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 3, 1);
 8000614:	f7ff fdcc 	bl	80001b0 <getDisparo>
 8000618:	4603      	mov	r3, r0
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3304      	adds	r3, #4
 8000620:	b29c      	uxth	r4, r3
 8000622:	f7ff fdc5 	bl	80001b0 <getDisparo>
 8000626:	4603      	mov	r3, r0
 8000628:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800062c:	b29d      	uxth	r5, r3
 800062e:	f7ff fdbf 	bl	80001b0 <getDisparo>
 8000632:	4603      	mov	r3, r0
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	3304      	adds	r3, #4
 800063a:	b29e      	uxth	r6, r3
 800063c:	f7ff fdb8 	bl	80001b0 <getDisparo>
 8000640:	4603      	mov	r3, r0
 8000642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000646:	b29b      	uxth	r3, r3
 8000648:	3303      	adds	r3, #3
 800064a:	b29b      	uxth	r3, r3
 800064c:	2201      	movs	r2, #1
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	4632      	mov	r2, r6
 8000652:	4629      	mov	r1, r5
 8000654:	4620      	mov	r0, r4
 8000656:	f001 fa32 	bl	8001abe <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800065a:	f7ff fda9 	bl	80001b0 <getDisparo>
 800065e:	4603      	mov	r3, r0
 8000660:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b06      	subs	r3, #6
 8000668:	b2dc      	uxtb	r4, r3
 800066a:	f7ff fda1 	bl	80001b0 <getDisparo>
 800066e:	4603      	mov	r3, r0
 8000670:	b262      	sxtb	r2, r4
 8000672:	705a      	strb	r2, [r3, #1]


				if(getDisparo()->posicion_y <= 0){
 8000674:	f7ff fd9c 	bl	80001b0 <getDisparo>
 8000678:	4603      	mov	r3, r0
 800067a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800067e:	2b00      	cmp	r3, #0
 8000680:	dc0e      	bgt.n	80006a0 <disparar+0xc4>
					//Se reinician los valores del disparo
					getDisparo()->disparo = false;
 8000682:	f7ff fd95 	bl	80001b0 <getDisparo>
 8000686:	4603      	mov	r3, r0
 8000688:	2200      	movs	r2, #0
 800068a:	709a      	strb	r2, [r3, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800068c:	f7ff fd90 	bl	80001b0 <getDisparo>
 8000690:	4603      	mov	r3, r0
 8000692:	223c      	movs	r2, #60	; 0x3c
 8000694:	705a      	strb	r2, [r3, #1]
					getDisparo()->numero_disparos = 0;
 8000696:	f7ff fd8b 	bl	80001b0 <getDisparo>
 800069a:	4603      	mov	r3, r0
 800069c:	2200      	movs	r2, #0
 800069e:	70da      	strb	r2, [r3, #3]
				}
			}


			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e0c0      	b.n	8000828 <disparar+0x24c>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	e0b6      	b.n	800081a <disparar+0x23e>

					if( (getDisparo()->posicion_x >= getAlien(y,x)->posicion_X) &&  (getDisparo()->posicion_x <= getAlien(y,x)->posicion_X + (TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS) )){
 80006ac:	f7ff fd80 	bl	80001b0 <getDisparo>
 80006b0:	4603      	mov	r3, r0
 80006b2:	781c      	ldrb	r4, [r3, #0]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd52 	bl	8000164 <getAlien>
 80006c0:	4603      	mov	r3, r0
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d35b      	bcc.n	8000780 <disparar+0x1a4>
 80006c8:	f7ff fd72 	bl	80001b0 <getDisparo>
 80006cc:	4603      	mov	r3, r0
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461c      	mov	r4, r3
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd43 	bl	8000164 <getAlien>
 80006de:	4603      	mov	r3, r0
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	330d      	adds	r3, #13
 80006e4:	429c      	cmp	r4, r3
 80006e6:	dc4b      	bgt.n	8000780 <disparar+0x1a4>
						if( (getDisparo()->posicion_y >= getAlien(y,x)->posicion_Y) && (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + (TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS)) ){
 80006e8:	f7ff fd62 	bl	80001b0 <getDisparo>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f2:	461c      	mov	r4, r3
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd32 	bl	8000164 <getAlien>
 8000700:	4603      	mov	r3, r0
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	429c      	cmp	r4, r3
 8000706:	db3b      	blt.n	8000780 <disparar+0x1a4>
 8000708:	f7ff fd52 	bl	80001b0 <getDisparo>
 800070c:	4603      	mov	r3, r0
 800070e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000712:	461c      	mov	r4, r3
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd22 	bl	8000164 <getAlien>
 8000720:	4603      	mov	r3, r0
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	330b      	adds	r3, #11
 8000726:	429c      	cmp	r4, r3
 8000728:	dc2a      	bgt.n	8000780 <disparar+0x1a4>

								if(getAlien(y,x)->vivo == true){
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd17 	bl	8000164 <getAlien>
 8000736:	4603      	mov	r3, r0
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d120      	bne.n	8000780 <disparar+0x1a4>
									getAlien(y,x)->vivo = false;
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd0d 	bl	8000164 <getAlien>
 800074a:	4603      	mov	r3, r0
 800074c:	2200      	movs	r2, #0
 800074e:	709a      	strb	r2, [r3, #2]
									getAlien(y,x)->explosion = true;
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd04 	bl	8000164 <getAlien>
 800075c:	4603      	mov	r3, r0
 800075e:	2201      	movs	r2, #1
 8000760:	70da      	strb	r2, [r3, #3]

									//Se reinician los valores del disparo
									getDisparo()->disparo = false;
 8000762:	f7ff fd25 	bl	80001b0 <getDisparo>
 8000766:	4603      	mov	r3, r0
 8000768:	2200      	movs	r2, #0
 800076a:	709a      	strb	r2, [r3, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800076c:	f7ff fd20 	bl	80001b0 <getDisparo>
 8000770:	4603      	mov	r3, r0
 8000772:	223c      	movs	r2, #60	; 0x3c
 8000774:	705a      	strb	r2, [r3, #1]
									getDisparo()->numero_disparos = 0;
 8000776:	f7ff fd1b 	bl	80001b0 <getDisparo>
 800077a:	4603      	mov	r3, r0
 800077c:	2200      	movs	r2, #0
 800077e:	70da      	strb	r2, [r3, #3]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fcec 	bl	8000164 <getAlien>
 800078c:	4603      	mov	r3, r0
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d13f      	bne.n	8000814 <disparar+0x238>
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fce2 	bl	8000164 <getAlien>
 80007a0:	4603      	mov	r3, r0
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b21c      	sxth	r4, r3
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fcd9 	bl	8000164 <getAlien>
 80007b2:	4603      	mov	r3, r0
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	b219      	sxth	r1, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2308      	movs	r3, #8
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2310      	movs	r3, #16
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <disparar+0x260>)
 80007c4:	4620      	mov	r0, r4
 80007c6:	f000 feef 	bl	80015a8 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fcc7 	bl	8000164 <getAlien>
 80007d6:	4603      	mov	r3, r0
 80007d8:	791c      	ldrb	r4, [r3, #4]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcbf 	bl	8000164 <getAlien>
 80007e6:	4603      	mov	r3, r0
 80007e8:	1e62      	subs	r2, r4, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	711a      	strb	r2, [r3, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fcb5 	bl	8000164 <getAlien>
 80007fa:	4603      	mov	r3, r0
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <disparar+0x238>
							getAlien(y,x)->explosion = false;
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fcab 	bl	8000164 <getAlien>
 800080e:	4603      	mov	r3, r0
 8000810:	2200      	movs	r2, #0
 8000812:	70da      	strb	r2, [r3, #3]
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	3301      	adds	r3, #1
 8000818:	71bb      	strb	r3, [r7, #6]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	2b06      	cmp	r3, #6
 800081e:	f67f af45 	bls.w	80006ac <disparar+0xd0>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b02      	cmp	r3, #2
 800082c:	f67f af3b 	bls.w	80006a6 <disparar+0xca>
						}
					}
				}
			}
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	bf00      	nop
 800083c:	08009a80 	.word	0x08009a80

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f001 fe06 	bl	8002454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f850 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f98a 	bl	8000b64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000850:	f000 f8a8 	bl	80009a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000854:	f000 f922 	bl	8000a9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000858:	f000 f94e 	bl	8000af8 <MX_SPI1_Init>
  MX_ADC2_Init();
 800085c:	f000 f8e0 	bl	8000a20 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000860:	f005 f882 	bl	8005968 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutexPuntajes */
  mutexPuntajesHandle = osMutexNew(&mutexPuntajes_attributes);
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <main+0x78>)
 8000866:	f005 f9bd 	bl	8005be4 <osMutexNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <main+0x7c>)
 800086e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueJoystPant */
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <main+0x80>)
 8000872:	2103      	movs	r1, #3
 8000874:	200a      	movs	r0, #10
 8000876:	f005 fafd 	bl	8005e74 <osMessageQueueNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <main+0x84>)
 800087e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of JoystickTask */
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000880:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <main+0x88>)
 8000882:	2100      	movs	r1, #0
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <main+0x8c>)
 8000886:	f005 f8d5 	bl	8005a34 <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <main+0x90>)
 800088e:	6013      	str	r3, [r2, #0]

  /* creation of PantallaTask */
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8000890:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <main+0x94>)
 8000892:	2100      	movs	r1, #0
 8000894:	4810      	ldr	r0, [pc, #64]	; (80008d8 <main+0x98>)
 8000896:	f005 f8cd 	bl	8005a34 <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <main+0x9c>)
 800089e:	6013      	str	r3, [r2, #0]

  /* creation of MemoriaTask */
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <main+0xa0>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <main+0xa4>)
 80008a6:	f005 f8c5 	bl	8005a34 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <main+0xa8>)
 80008ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b0:	f005 f88c 	bl	80059cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0x74>
 80008b6:	bf00      	nop
 80008b8:	08009b14 	.word	0x08009b14
 80008bc:	200001cc 	.word	0x200001cc
 80008c0:	08009afc 	.word	0x08009afc
 80008c4:	200001c8 	.word	0x200001c8
 80008c8:	08009a90 	.word	0x08009a90
 80008cc:	08000c85 	.word	0x08000c85
 80008d0:	200001bc 	.word	0x200001bc
 80008d4:	08009ab4 	.word	0x08009ab4
 80008d8:	08000d71 	.word	0x08000d71
 80008dc:	200001c0 	.word	0x200001c0
 80008e0:	08009ad8 	.word	0x08009ad8
 80008e4:	08000ded 	.word	0x08000ded
 80008e8:	200001c4 	.word	0x200001c4

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f6:	2228      	movs	r2, #40	; 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f008 fc4a 	bl	8009194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000938:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800093c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fa92 	bl	8003e6c <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800094e:	f000 fa77 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fcfe 	bl	8004370 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800097a:	f000 fa61 	bl	8000e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800097e:	2302      	movs	r3, #2
 8000980:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000986:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f003 feae 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000996:	f000 fa53 	bl	8000e40 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <MX_ADC1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009e2:	f001 fd8d 	bl	8002500 <HAL_ADC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009ec:	f000 fa28 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_ADC1_Init+0x74>)
 8000a02:	f002 f841 	bl	8002a88 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a0c:	f000 fa18 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000b0 	.word	0x200000b0
 8000a1c:	40012400 	.word	0x40012400

08000a20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <MX_ADC2_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a5e:	f001 fd4f 	bl	8002500 <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 f9ea 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a7e:	f002 f803 	bl	8002a88 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f000 f9da 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000e0 	.word	0x200000e0
 8000a98:	40012800 	.word	0x40012800

08000a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aa2:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <MX_I2C1_Init+0x54>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_I2C1_Init+0x58>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ada:	f002 fbfd 	bl	80032d8 <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 f9ac 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000110 	.word	0x20000110
 8000af0:	40005400 	.word	0x40005400
 8000af4:	00061a80 	.word	0x00061a80

08000af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_SPI1_Init+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b4a:	f003 ff3b 	bl	80049c4 <HAL_SPI_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b54:	f000 f974 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000164 	.word	0x20000164
 8000b60:	40013000 	.word	0x40013000

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b90:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a2b      	ldr	r2, [pc, #172]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000be0:	f002 fb61 	bl	80032a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000bec:	f002 fb5b 	bl	80032a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_GPIO_Init+0x11c>)
 8000bf6:	f002 fb56 	bl	80032a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4819      	ldr	r0, [pc, #100]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000c14:	f002 f9ac 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000c2c:	f002 f9a0 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000c4a:	f002 f991 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_GPIO_Init+0x11c>)
 8000c66:	f002 f983 	bl	8002f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000c8c:	f006 fe1a 	bl	80078c4 <xTaskGetTickCount>
 8000c90:	4603      	mov	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]

  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  HAL_ADC_Start(&hadc1);
 8000c94:	4831      	ldr	r0, [pc, #196]	; (8000d5c <entryJoystick+0xd8>)
 8000c96:	f001 fd0b 	bl	80026b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c9a:	210a      	movs	r1, #10
 8000c9c:	482f      	ldr	r0, [pc, #188]	; (8000d5c <entryJoystick+0xd8>)
 8000c9e:	f001 fde1 	bl	8002864 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000ca2:	482e      	ldr	r0, [pc, #184]	; (8000d5c <entryJoystick+0xd8>)
 8000ca4:	f001 fee4 	bl	8002a70 <HAL_ADC_GetValue>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	82fb      	strh	r3, [r7, #22]
	  HAL_ADC_Stop(&hadc1);
 8000cac:	482b      	ldr	r0, [pc, #172]	; (8000d5c <entryJoystick+0xd8>)
 8000cae:	f001 fdad 	bl	800280c <HAL_ADC_Stop>

	  //Joystick eje Y: arriba o abajo.
	  HAL_ADC_Start(&hadc2);
 8000cb2:	482b      	ldr	r0, [pc, #172]	; (8000d60 <entryJoystick+0xdc>)
 8000cb4:	f001 fcfc 	bl	80026b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000cb8:	210a      	movs	r1, #10
 8000cba:	4829      	ldr	r0, [pc, #164]	; (8000d60 <entryJoystick+0xdc>)
 8000cbc:	f001 fdd2 	bl	8002864 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000cc0:	4827      	ldr	r0, [pc, #156]	; (8000d60 <entryJoystick+0xdc>)
 8000cc2:	f001 fed5 	bl	8002a70 <HAL_ADC_GetValue>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	82bb      	strh	r3, [r7, #20]
	  HAL_ADC_Stop(&hadc2);
 8000cca:	4825      	ldr	r0, [pc, #148]	; (8000d60 <entryJoystick+0xdc>)
 8000ccc:	f001 fd9e 	bl	800280c <HAL_ADC_Stop>

	  if(val_x > 2000){
 8000cd0:	8afb      	ldrh	r3, [r7, #22]
 8000cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cd6:	d902      	bls.n	8000cde <entryJoystick+0x5a>
		  joystick.x_value = derecha;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	733b      	strb	r3, [r7, #12]
 8000cdc:	e008      	b.n	8000cf0 <entryJoystick+0x6c>
	  }
	  else if(val_x < 1600){
 8000cde:	8afb      	ldrh	r3, [r7, #22]
 8000ce0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000ce4:	d202      	bcs.n	8000cec <entryJoystick+0x68>
		  joystick.x_value = izquierda;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	733b      	strb	r3, [r7, #12]
 8000cea:	e001      	b.n	8000cf0 <entryJoystick+0x6c>
	  }
	  else{
		  joystick.x_value = nulo;
 8000cec:	2304      	movs	r3, #4
 8000cee:	733b      	strb	r3, [r7, #12]
	  }


	  if(val_y > 2000){
 8000cf0:	8abb      	ldrh	r3, [r7, #20]
 8000cf2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cf6:	d902      	bls.n	8000cfe <entryJoystick+0x7a>
		  joystick.y_value = abajo;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	737b      	strb	r3, [r7, #13]
 8000cfc:	e008      	b.n	8000d10 <entryJoystick+0x8c>
	  }
	  else if(val_y < 1600){
 8000cfe:	8abb      	ldrh	r3, [r7, #20]
 8000d00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000d04:	d202      	bcs.n	8000d0c <entryJoystick+0x88>
		  joystick.y_value = arriba;
 8000d06:	2300      	movs	r3, #0
 8000d08:	737b      	strb	r3, [r7, #13]
 8000d0a:	e001      	b.n	8000d10 <entryJoystick+0x8c>
	  }
	  else{
		  joystick.y_value = nulo;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	737b      	strb	r3, [r7, #13]
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000d10:	2104      	movs	r1, #4
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <entryJoystick+0xe0>)
 8000d14:	f002 fab0 	bl	8003278 <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <entryJoystick+0xa0>
		  joystick.boton = true;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73bb      	strb	r3, [r7, #14]
 8000d22:	e001      	b.n	8000d28 <entryJoystick+0xa4>
	  }
	  else{
		  joystick.boton = false;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <entryJoystick+0xe4>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	f107 010c 	add.w	r1, r7, #12
 8000d30:	2300      	movs	r3, #0
 8000d32:	2200      	movs	r2, #0
 8000d34:	f005 f924 	bl	8005f80 <osMessageQueuePut>
 8000d38:	6138      	str	r0, [r7, #16]
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <entryJoystick+0xc8>
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <entryJoystick+0xe8>)
 8000d48:	f002 faad 	bl	80032a6 <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	2132      	movs	r1, #50	; 0x32
 8000d52:	4618      	mov	r0, r3
 8000d54:	f006 fbf2 	bl	800753c <vTaskDelayUntil>
  {
 8000d58:	e79c      	b.n	8000c94 <entryJoystick+0x10>
 8000d5a:	bf00      	nop
 8000d5c:	200000b0 	.word	0x200000b0
 8000d60:	200000e0 	.word	0x200000e0
 8000d64:	40010800 	.word	0x40010800
 8000d68:	200001c8 	.word	0x200001c8
 8000d6c:	40011000 	.word	0x40011000

08000d70 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8000d78:	f000 fc7e 	bl	8001678 <SSD1306_Init>
	SSD1306_Clear();
 8000d7c:	f001 f8d8 	bl	8001f30 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8000d80:	f000 fd3e 	bl	8001800 <SSD1306_UpdateScreen>

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000d84:	f000 fa28 	bl	80011d8 <menuInit>


	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 1;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <entryPantalla+0x70>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 1;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <entryPantalla+0x70>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	705a      	strb	r2, [r3, #1]

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <entryPantalla+0x74>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	f107 0108 	add.w	r1, r7, #8
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	2200      	movs	r2, #0
 8000da2:	f005 f961 	bl	8006068 <osMessageQueueGet>
 8000da6:	60f8      	str	r0, [r7, #12]

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <entryPantalla+0x4c>
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <entryPantalla+0x78>)
 8000db6:	f002 fa76 	bl	80032a6 <HAL_GPIO_WritePin>
 8000dba:	e00b      	b.n	8000dd4 <entryPantalla+0x64>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <entryPantalla+0x78>)
 8000dc4:	f002 fa6f 	bl	80032a6 <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000dc8:	7a3b      	ldrb	r3, [r7, #8]
 8000dca:	7a79      	ldrb	r1, [r7, #9]
 8000dcc:	7aba      	ldrb	r2, [r7, #10]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fa16 	bl	8001200 <menuActualizar>

	}


    SSD1306_UpdateScreen(); // update screen
 8000dd4:	f000 fd14 	bl	8001800 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 fd3f 	bl	800185c <SSD1306_Fill>
  {
 8000dde:	e7d9      	b.n	8000d94 <entryPantalla+0x24>
 8000de0:	200000ac 	.word	0x200000ac
 8000de4:	200001c8 	.word	0x200001c8
 8000de8:	40011000 	.word	0x40011000

08000dec <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryMemoria */


	osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <entryMemoria+0x2c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 ff8b 	bl	8005d18 <osMutexAcquire>

	memoriaInit();
 8000e02:	f000 f863 	bl	8000ecc <memoriaInit>
	//Ordenamiento_Puntajes();

	osMutexRelease(mutexPuntajesHandle);
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <entryMemoria+0x2c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 ffe2 	bl	8005dd4 <osMutexRelease>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f004 feb9 	bl	8005b88 <osDelay>
 8000e16:	e7fb      	b.n	8000e10 <entryMemoria+0x24>
 8000e18:	200001cc 	.word	0x200001cc

08000e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e2e:	f001 fb27 	bl	8002480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40000800 	.word	0x40000800

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <getPuntajes>:

#include "memoria.h"

puntajes_t Puntajes[5];

puntajes_t *getPuntajes(uint8_t indice){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <getPuntajes+0x1c>)
 8000e5c:	4413      	add	r3, r2
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	200001d0 	.word	0x200001d0

08000e6c <Read_memoria>:
	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
}


uint8_t Read_memoria(uint16_t address)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
	uint8_t data_rec;
	uint8_t data[3];
	data[0] = READ;
 8000e76:	2303      	movs	r3, #3
 8000e78:	733b      	strb	r3, [r7, #12]
	data[1] = address>>8;
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	737b      	strb	r3, [r7, #13]
	data[2] = address;
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the pin low
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <Read_memoria+0x58>)
 8000e90:	f002 fa09 	bl	80032a6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // send address
 8000e94:	f107 010c 	add.w	r1, r7, #12
 8000e98:	2364      	movs	r3, #100	; 0x64
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <Read_memoria+0x5c>)
 8000e9e:	f003 fe15 	bl	8004acc <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, &data_rec, 1, 100);  // receive 6 bytes data
 8000ea2:	f107 010f 	add.w	r1, r7, #15
 8000ea6:	2364      	movs	r3, #100	; 0x64
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <Read_memoria+0x5c>)
 8000eac:	f003 ff51 	bl	8004d52 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the pin high
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <Read_memoria+0x58>)
 8000eb6:	f002 f9f6 	bl	80032a6 <HAL_GPIO_WritePin>

	return data_rec;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	20000164 	.word	0x20000164

08000ecc <memoriaInit>:



void memoriaInit(){
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

		char buff_nombre[7];

		uint16_t address = MEMORIA_ADDRESS;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	81fb      	strh	r3, [r7, #14]
		uint8_t j = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	737b      	strb	r3, [r7, #13]
		uint8_t permiso = true;
 8000eda:	2301      	movs	r3, #1
 8000edc:	733b      	strb	r3, [r7, #12]
		uint8_t i=0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	72fb      	strb	r3, [r7, #11]

		uint8_t puntaje_lsb;
		uint8_t puntaje_msb;
		uint8_t byte_dumb;

		puntaje_msb  = Read_memoria(address);
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ffc1 	bl	8000e6c <Read_memoria>
 8000eea:	4603      	mov	r3, r0
 8000eec:	72bb      	strb	r3, [r7, #10]
		HAL_Delay(3);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f001 fae2 	bl	80024b8 <HAL_Delay>

		do{

			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 8000ef4:	7afb      	ldrb	r3, [r7, #11]
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d00b      	beq.n	8000f12 <memoriaInit+0x46>
 8000efa:	7afb      	ldrb	r3, [r7, #11]
 8000efc:	2b0e      	cmp	r3, #14
 8000efe:	d008      	beq.n	8000f12 <memoriaInit+0x46>
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	2b16      	cmp	r3, #22
 8000f04:	d005      	beq.n	8000f12 <memoriaInit+0x46>
 8000f06:	7afb      	ldrb	r3, [r7, #11]
 8000f08:	2b1e      	cmp	r3, #30
 8000f0a:	d002      	beq.n	8000f12 <memoriaInit+0x46>
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	2b26      	cmp	r3, #38	; 0x26
 8000f10:	d109      	bne.n	8000f26 <memoriaInit+0x5a>

				puntaje_msb = Read_memoria(address);
 8000f12:	89fb      	ldrh	r3, [r7, #14]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ffa9 	bl	8000e6c <Read_memoria>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	72bb      	strb	r3, [r7, #10]
				HAL_Delay(3);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f001 faca 	bl	80024b8 <HAL_Delay>
 8000f24:	e13c      	b.n	80011a0 <memoriaInit+0x2d4>
			}
			else if((i==7) || (i==15) || (i==23) || (i==31) || (i==39)){
 8000f26:	7afb      	ldrb	r3, [r7, #11]
 8000f28:	2b07      	cmp	r3, #7
 8000f2a:	d00c      	beq.n	8000f46 <memoriaInit+0x7a>
 8000f2c:	7afb      	ldrb	r3, [r7, #11]
 8000f2e:	2b0f      	cmp	r3, #15
 8000f30:	d009      	beq.n	8000f46 <memoriaInit+0x7a>
 8000f32:	7afb      	ldrb	r3, [r7, #11]
 8000f34:	2b17      	cmp	r3, #23
 8000f36:	d006      	beq.n	8000f46 <memoriaInit+0x7a>
 8000f38:	7afb      	ldrb	r3, [r7, #11]
 8000f3a:	2b1f      	cmp	r3, #31
 8000f3c:	d003      	beq.n	8000f46 <memoriaInit+0x7a>
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	2b27      	cmp	r3, #39	; 0x27
 8000f42:	f040 80a0 	bne.w	8001086 <memoriaInit+0x1ba>

				puntaje_lsb = Read_memoria(address);
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff8f 	bl	8000e6c <Read_memoria>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	723b      	strb	r3, [r7, #8]
				HAL_Delay(3);
 8000f52:	2003      	movs	r0, #3
 8000f54:	f001 fab0 	bl	80024b8 <HAL_Delay>

				switch(i){
 8000f58:	7afb      	ldrb	r3, [r7, #11]
 8000f5a:	3b07      	subs	r3, #7
 8000f5c:	2b20      	cmp	r3, #32
 8000f5e:	f200 808b 	bhi.w	8001078 <memoriaInit+0x1ac>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <memoriaInit+0x9c>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000fed 	.word	0x08000fed
 8000f6c:	08001079 	.word	0x08001079
 8000f70:	08001079 	.word	0x08001079
 8000f74:	08001079 	.word	0x08001079
 8000f78:	08001079 	.word	0x08001079
 8000f7c:	08001079 	.word	0x08001079
 8000f80:	08001079 	.word	0x08001079
 8000f84:	08001079 	.word	0x08001079
 8000f88:	08001009 	.word	0x08001009
 8000f8c:	08001079 	.word	0x08001079
 8000f90:	08001079 	.word	0x08001079
 8000f94:	08001079 	.word	0x08001079
 8000f98:	08001079 	.word	0x08001079
 8000f9c:	08001079 	.word	0x08001079
 8000fa0:	08001079 	.word	0x08001079
 8000fa4:	08001079 	.word	0x08001079
 8000fa8:	08001025 	.word	0x08001025
 8000fac:	08001079 	.word	0x08001079
 8000fb0:	08001079 	.word	0x08001079
 8000fb4:	08001079 	.word	0x08001079
 8000fb8:	08001079 	.word	0x08001079
 8000fbc:	08001079 	.word	0x08001079
 8000fc0:	08001079 	.word	0x08001079
 8000fc4:	08001079 	.word	0x08001079
 8000fc8:	08001041 	.word	0x08001041
 8000fcc:	08001079 	.word	0x08001079
 8000fd0:	08001079 	.word	0x08001079
 8000fd4:	08001079 	.word	0x08001079
 8000fd8:	08001079 	.word	0x08001079
 8000fdc:	08001079 	.word	0x08001079
 8000fe0:	08001079 	.word	0x08001079
 8000fe4:	08001079 	.word	0x08001079
 8000fe8:	0800105d 	.word	0x0800105d

				case 7:
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8000fec:	7abb      	ldrb	r3, [r7, #10]
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b29d      	uxth	r5, r3
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	b29c      	uxth	r4, r3
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ff27 	bl	8000e4c <getPuntajes>
 8000ffe:	4603      	mov	r3, r0
 8001000:	192a      	adds	r2, r5, r4
 8001002:	b292      	uxth	r2, r2
 8001004:	80da      	strh	r2, [r3, #6]
					break;
 8001006:	e037      	b.n	8001078 <memoriaInit+0x1ac>
				case 15:
					getPuntajes(1)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001008:	7abb      	ldrb	r3, [r7, #10]
 800100a:	b29b      	uxth	r3, r3
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b29d      	uxth	r5, r3
 8001010:	7a3b      	ldrb	r3, [r7, #8]
 8001012:	b29c      	uxth	r4, r3
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff ff19 	bl	8000e4c <getPuntajes>
 800101a:	4603      	mov	r3, r0
 800101c:	192a      	adds	r2, r5, r4
 800101e:	b292      	uxth	r2, r2
 8001020:	80da      	strh	r2, [r3, #6]
					break;
 8001022:	e029      	b.n	8001078 <memoriaInit+0x1ac>
				case 23:
					getPuntajes(2)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	b29b      	uxth	r3, r3
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b29d      	uxth	r5, r3
 800102c:	7a3b      	ldrb	r3, [r7, #8]
 800102e:	b29c      	uxth	r4, r3
 8001030:	2002      	movs	r0, #2
 8001032:	f7ff ff0b 	bl	8000e4c <getPuntajes>
 8001036:	4603      	mov	r3, r0
 8001038:	192a      	adds	r2, r5, r4
 800103a:	b292      	uxth	r2, r2
 800103c:	80da      	strh	r2, [r3, #6]
					break;
 800103e:	e01b      	b.n	8001078 <memoriaInit+0x1ac>
				case 31:
					getPuntajes(3)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001040:	7abb      	ldrb	r3, [r7, #10]
 8001042:	b29b      	uxth	r3, r3
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b29d      	uxth	r5, r3
 8001048:	7a3b      	ldrb	r3, [r7, #8]
 800104a:	b29c      	uxth	r4, r3
 800104c:	2003      	movs	r0, #3
 800104e:	f7ff fefd 	bl	8000e4c <getPuntajes>
 8001052:	4603      	mov	r3, r0
 8001054:	192a      	adds	r2, r5, r4
 8001056:	b292      	uxth	r2, r2
 8001058:	80da      	strh	r2, [r3, #6]
					break;
 800105a:	e00d      	b.n	8001078 <memoriaInit+0x1ac>
				case 39:
					getPuntajes(4)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 800105c:	7abb      	ldrb	r3, [r7, #10]
 800105e:	b29b      	uxth	r3, r3
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b29d      	uxth	r5, r3
 8001064:	7a3b      	ldrb	r3, [r7, #8]
 8001066:	b29c      	uxth	r4, r3
 8001068:	2004      	movs	r0, #4
 800106a:	f7ff feef 	bl	8000e4c <getPuntajes>
 800106e:	4603      	mov	r3, r0
 8001070:	192a      	adds	r2, r5, r4
 8001072:	b292      	uxth	r2, r2
 8001074:	80da      	strh	r2, [r3, #6]
					break;
 8001076:	bf00      	nop

				}

				puntaje_msb = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	72bb      	strb	r3, [r7, #10]
				puntaje_lsb = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	723b      	strb	r3, [r7, #8]
				permiso = true;
 8001080:	2301      	movs	r3, #1
 8001082:	733b      	strb	r3, [r7, #12]
 8001084:	e08c      	b.n	80011a0 <memoriaInit+0x2d4>

			}
			else{

				if( (buff_nombre[j] != '\0') && permiso==true){
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	3310      	adds	r3, #16
 800108a:	443b      	add	r3, r7
 800108c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d07c      	beq.n	800118e <memoriaInit+0x2c2>
 8001094:	7b3b      	ldrb	r3, [r7, #12]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d179      	bne.n	800118e <memoriaInit+0x2c2>
					buff_nombre[j]  = Read_memoria(address);
 800109a:	7b7c      	ldrb	r4, [r7, #13]
 800109c:	89fb      	ldrh	r3, [r7, #14]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fee4 	bl	8000e6c <Read_memoria>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	f104 0310 	add.w	r3, r4, #16
 80010ac:	443b      	add	r3, r7
 80010ae:	f803 2c10 	strb.w	r2, [r3, #-16]
					HAL_Delay(3);
 80010b2:	2003      	movs	r0, #3
 80010b4:	f001 fa00 	bl	80024b8 <HAL_Delay>

					if(buff_nombre[j] == '\0'){
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	3310      	adds	r3, #16
 80010bc:	443b      	add	r3, r7
 80010be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d15f      	bne.n	8001186 <memoriaInit+0x2ba>

						if((i>=0 && i<6)){
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d80a      	bhi.n	80010e2 <memoriaInit+0x216>
							strcpy(getPuntajes(0)->nombre, buff_nombre);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff febd 	bl	8000e4c <getPuntajes>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4610      	mov	r0, r2
 80010dc:	f008 f886 	bl	80091ec <strcpy>
 80010e0:	e042      	b.n	8001168 <memoriaInit+0x29c>
						}
						else if((i>=8 && i<14)){
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	d90d      	bls.n	8001104 <memoriaInit+0x238>
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	2b0d      	cmp	r3, #13
 80010ec:	d80a      	bhi.n	8001104 <memoriaInit+0x238>
							strcpy(getPuntajes(1)->nombre, buff_nombre);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff feac 	bl	8000e4c <getPuntajes>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f008 f875 	bl	80091ec <strcpy>
 8001102:	e031      	b.n	8001168 <memoriaInit+0x29c>
						}
						else if((i>=16 && i<22)){
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d90d      	bls.n	8001126 <memoriaInit+0x25a>
 800110a:	7afb      	ldrb	r3, [r7, #11]
 800110c:	2b15      	cmp	r3, #21
 800110e:	d80a      	bhi.n	8001126 <memoriaInit+0x25a>
							strcpy(getPuntajes(2)->nombre, buff_nombre);
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff fe9b 	bl	8000e4c <getPuntajes>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f008 f864 	bl	80091ec <strcpy>
 8001124:	e020      	b.n	8001168 <memoriaInit+0x29c>
						}
						else if((i>=24 && i<30)){
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	2b17      	cmp	r3, #23
 800112a:	d90d      	bls.n	8001148 <memoriaInit+0x27c>
 800112c:	7afb      	ldrb	r3, [r7, #11]
 800112e:	2b1d      	cmp	r3, #29
 8001130:	d80a      	bhi.n	8001148 <memoriaInit+0x27c>
							strcpy(getPuntajes(3)->nombre, buff_nombre);
 8001132:	2003      	movs	r0, #3
 8001134:	f7ff fe8a 	bl	8000e4c <getPuntajes>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4610      	mov	r0, r2
 8001142:	f008 f853 	bl	80091ec <strcpy>
 8001146:	e00f      	b.n	8001168 <memoriaInit+0x29c>
						}
						else if((i>=32 && i<38)){
 8001148:	7afb      	ldrb	r3, [r7, #11]
 800114a:	2b1f      	cmp	r3, #31
 800114c:	d90c      	bls.n	8001168 <memoriaInit+0x29c>
 800114e:	7afb      	ldrb	r3, [r7, #11]
 8001150:	2b25      	cmp	r3, #37	; 0x25
 8001152:	d809      	bhi.n	8001168 <memoriaInit+0x29c>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8001154:	2004      	movs	r0, #4
 8001156:	f7ff fe79 	bl	8000e4c <getPuntajes>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4610      	mov	r0, r2
 8001164:	f008 f842 	bl	80091ec <strcpy>
						}

						j = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	737b      	strb	r3, [r7, #13]
						strcpy(buff_nombre, "      ");
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <memoriaInit+0x2f4>)
 800116e:	463b      	mov	r3, r7
 8001170:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001174:	6018      	str	r0, [r3, #0]
 8001176:	3304      	adds	r3, #4
 8001178:	8019      	strh	r1, [r3, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	0c0a      	lsrs	r2, r1, #16
 800117e:	701a      	strb	r2, [r3, #0]
						permiso = false;
 8001180:	2300      	movs	r3, #0
 8001182:	733b      	strb	r3, [r7, #12]
					if(buff_nombre[j] == '\0'){
 8001184:	e00c      	b.n	80011a0 <memoriaInit+0x2d4>
					}
					else{
						j++;
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	3301      	adds	r3, #1
 800118a:	737b      	strb	r3, [r7, #13]
					if(buff_nombre[j] == '\0'){
 800118c:	e008      	b.n	80011a0 <memoriaInit+0x2d4>
					}
				}

				else{
					byte_dumb = Read_memoria(address);
 800118e:	89fb      	ldrh	r3, [r7, #14]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fe6b 	bl	8000e6c <Read_memoria>
 8001196:	4603      	mov	r3, r0
 8001198:	727b      	strb	r3, [r7, #9]
					HAL_Delay(3);
 800119a:	2003      	movs	r0, #3
 800119c:	f001 f98c 	bl	80024b8 <HAL_Delay>
				}

			}
			i++;
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	3301      	adds	r3, #1
 80011a4:	72fb      	strb	r3, [r7, #11]
			address++;
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	3301      	adds	r3, #1
 80011aa:	81fb      	strh	r3, [r7, #14]
			//HAL_Delay(3);

		}while(i != 40);
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	2b28      	cmp	r3, #40	; 0x28
 80011b0:	f47f aea0 	bne.w	8000ef4 <memoriaInit+0x28>



}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800927c 	.word	0x0800927c

080011c4 <getMenu>:
#include "menu.h"

menu_t menu;


menu_t *getMenu(){
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

	return &menu;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <getMenu+0x10>)
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200001f8 	.word	0x200001f8

080011d8 <menuInit>:


void menuInit(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 80011dc:	f7fe fff2 	bl	80001c4 <playerInit>
	InvaderInit();
 80011e0:	f7ff f838 	bl	8000254 <InvaderInit>
	disparoInit();
 80011e4:	f7ff f9e8 	bl	80005b8 <disparoInit>

	//Se inicializa el cursor de la pantalla principal.
	getMenu()->menuActual = guardar_nombre;
 80011e8:	f7ff ffec 	bl	80011c4 <getMenu>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2203      	movs	r2, #3
 80011f0:	701a      	strb	r2, [r3, #0]
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80011f2:	f7ff ffe7 	bl	80011c4 <getMenu>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2226      	movs	r2, #38	; 0x26
 80011fa:	705a      	strb	r2, [r3, #1]


}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <menuActualizar>:

void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b08f      	sub	sp, #60	; 0x3c
 8001204:	af02      	add	r7, sp, #8
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	460b      	mov	r3, r1
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	4613      	mov	r3, r2
 8001210:	717b      	strb	r3, [r7, #5]


	switch(getMenu()->menuActual){
 8001212:	f7ff ffd7 	bl	80011c4 <getMenu>
 8001216:	4603      	mov	r3, r0
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b04      	cmp	r3, #4
 800121c:	f200 81a9 	bhi.w	8001572 <menuActualizar+0x372>
 8001220:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <menuActualizar+0x28>)
 8001222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001226:	bf00      	nop
 8001228:	0800123d 	.word	0x0800123d
 800122c:	080012f1 	.word	0x080012f1
 8001230:	0800133f 	.word	0x0800133f
 8001234:	08001437 	.word	0x08001437
 8001238:	0800155f 	.word	0x0800155f

//--------------------------------------------------------------MENU PRINCIPAL-----------------------------------------------------------------------------
	case menu_principal:

		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2320      	movs	r3, #32
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	4acd      	ldr	r2, [pc, #820]	; (800157c <menuActualizar+0x37c>)
 8001248:	2100      	movs	r1, #0
 800124a:	2023      	movs	r0, #35	; 0x23
 800124c:	f000 f9ac 	bl	80015a8 <SSD1306_DrawBitmap>

		SSD1306_GotoXY(45, 35);
 8001250:	2123      	movs	r1, #35	; 0x23
 8001252:	202d      	movs	r0, #45	; 0x2d
 8001254:	f000 fb78 	bl	8001948 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8001258:	2201      	movs	r2, #1
 800125a:	49c9      	ldr	r1, [pc, #804]	; (8001580 <menuActualizar+0x380>)
 800125c:	48c9      	ldr	r0, [pc, #804]	; (8001584 <menuActualizar+0x384>)
 800125e:	f000 fc09 	bl	8001a74 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 8001262:	212d      	movs	r1, #45	; 0x2d
 8001264:	202d      	movs	r0, #45	; 0x2d
 8001266:	f000 fb6f 	bl	8001948 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	49c4      	ldr	r1, [pc, #784]	; (8001580 <menuActualizar+0x380>)
 800126e:	48c6      	ldr	r0, [pc, #792]	; (8001588 <menuActualizar+0x388>)
 8001270:	f000 fc00 	bl	8001a74 <SSD1306_Puts>


		if(y == arriba){
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <menuActualizar+0x86>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 800127a:	f7ff ffa3 	bl	80011c4 <getMenu>
 800127e:	4603      	mov	r3, r0
 8001280:	2226      	movs	r2, #38	; 0x26
 8001282:	705a      	strb	r2, [r3, #1]
 8001284:	e007      	b.n	8001296 <menuActualizar+0x96>
		}
		else if(y == abajo){
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d104      	bne.n	8001296 <menuActualizar+0x96>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 800128c:	f7ff ff9a 	bl	80011c4 <getMenu>
 8001290:	4603      	mov	r3, r0
 8001292:	2230      	movs	r2, #48	; 0x30
 8001294:	705a      	strb	r2, [r3, #1]
		}

		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 8001296:	f7ff ff95 	bl	80011c4 <getMenu>
 800129a:	4603      	mov	r3, r0
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	b219      	sxth	r1, r3
 80012a0:	2301      	movs	r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	2027      	movs	r0, #39	; 0x27
 80012a6:	f000 fd6f 	bl	8001d88 <SSD1306_DrawCircle>


		switch(boton){
 80012aa:	797b      	ldrb	r3, [r7, #5]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d019      	beq.n	80012e4 <menuActualizar+0xe4>
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d119      	bne.n	80012e8 <menuActualizar+0xe8>
		case true:
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 80012b4:	f7ff ff86 	bl	80011c4 <getMenu>
 80012b8:	4603      	mov	r3, r0
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	2b26      	cmp	r3, #38	; 0x26
 80012be:	d105      	bne.n	80012cc <menuActualizar+0xcc>
				getMenu()->menuActual = juego;
 80012c0:	f7ff ff80 	bl	80011c4 <getMenu>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
			}
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
				getMenu()->menuActual = puntajes;
			}
			break;
 80012ca:	e00f      	b.n	80012ec <menuActualizar+0xec>
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 80012cc:	f7ff ff7a 	bl	80011c4 <getMenu>
 80012d0:	4603      	mov	r3, r0
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	2b30      	cmp	r3, #48	; 0x30
 80012d6:	d109      	bne.n	80012ec <menuActualizar+0xec>
				getMenu()->menuActual = puntajes;
 80012d8:	f7ff ff74 	bl	80011c4 <getMenu>
 80012dc:	4603      	mov	r3, r0
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
			break;
 80012e2:	e003      	b.n	80012ec <menuActualizar+0xec>
		case false:
			break;
 80012e4:	bf00      	nop
 80012e6:	e145      	b.n	8001574 <menuActualizar+0x374>
		default:
			break;
 80012e8:	bf00      	nop
 80012ea:	e143      	b.n	8001574 <menuActualizar+0x374>
			break;
 80012ec:	bf00      	nop
		}

		break;
 80012ee:	e141      	b.n	8001574 <menuActualizar+0x374>
//--------------------------------------------------------------  JUEGO -----------------------------------------------------------------------------

	case juego:

		//Se grafican el player, aliens y disparo.
		plotPlayer(x, getPlayer());
 80012f0:	f7fe ff2e 	bl	8000150 <getPlayer>
 80012f4:	4602      	mov	r2, r0
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7fe ff6e 	bl	80001dc <plotPlayer>
		plotAliens();
 8001300:	f7fe fffa 	bl	80002f8 <plotAliens>

		disparar();
 8001304:	f7ff f96a 	bl	80005dc <disparar>


		//Prender led si se apretó el boton
		if(boton == true){
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d110      	bne.n	8001330 <menuActualizar+0x130>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001314:	489d      	ldr	r0, [pc, #628]	; (800158c <menuActualizar+0x38c>)
 8001316:	f001 ffc6 	bl	80032a6 <HAL_GPIO_WritePin>
			//boton_apretado = 1;
			getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 800131a:	f7fe ff49 	bl	80001b0 <getDisparo>
 800131e:	4603      	mov	r3, r0
 8001320:	78dc      	ldrb	r4, [r3, #3]
 8001322:	f7fe ff45 	bl	80001b0 <getDisparo>
 8001326:	4603      	mov	r3, r0
 8001328:	1c62      	adds	r2, r4, #1
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	70da      	strb	r2, [r3, #3]
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		}

		break;
 800132e:	e121      	b.n	8001574 <menuActualizar+0x374>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001336:	4895      	ldr	r0, [pc, #596]	; (800158c <menuActualizar+0x38c>)
 8001338:	f001 ffb5 	bl	80032a6 <HAL_GPIO_WritePin>
		break;
 800133c:	e11a      	b.n	8001574 <menuActualizar+0x374>

//-------------------------------------------------------------- PUNTAJES-----------------------------------------------------------------------------
	case puntajes:

		//Titulo 'Puntajes'
		SSD1306_GotoXY(35, 0);
 800133e:	2100      	movs	r1, #0
 8001340:	2023      	movs	r0, #35	; 0x23
 8001342:	f000 fb01 	bl	8001948 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8001346:	2201      	movs	r2, #1
 8001348:	498d      	ldr	r1, [pc, #564]	; (8001580 <menuActualizar+0x380>)
 800134a:	488f      	ldr	r0, [pc, #572]	; (8001588 <menuActualizar+0x388>)
 800134c:	f000 fb92 	bl	8001a74 <SSD1306_Puts>

		uint8_t posicion;
		uint8_t buffer[2];

		osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 8001350:	4b8f      	ldr	r3, [pc, #572]	; (8001590 <menuActualizar+0x390>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	4618      	mov	r0, r3
 800135a:	f004 fcdd 	bl	8005d18 <osMutexAcquire>

		//char buff_retorno[5][6];

		//Nombres

		for(uint8_t j=0; j<5;j++){
 800135e:	2300      	movs	r3, #0
 8001360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001364:	e020      	b.n	80013a8 <menuActualizar+0x1a8>

			posicion = j*10 + 13;
 8001366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800136a:	461a      	mov	r2, r3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4413      	add	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	330d      	adds	r3, #13
 8001376:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

			SSD1306_GotoXY(15, posicion);
 800137a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800137e:	b29b      	uxth	r3, r3
 8001380:	4619      	mov	r1, r3
 8001382:	200f      	movs	r0, #15
 8001384:	f000 fae0 	bl	8001948 <SSD1306_GotoXY>
			//strcpy(buff_retorno[j], "jdsa");
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 8001388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fd5d 	bl	8000e4c <getPuntajes>
 8001392:	4603      	mov	r3, r0
 8001394:	2201      	movs	r2, #1
 8001396:	497a      	ldr	r1, [pc, #488]	; (8001580 <menuActualizar+0x380>)
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fb6b 	bl	8001a74 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 800139e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a2:	3301      	adds	r3, #1
 80013a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d9da      	bls.n	8001366 <menuActualizar+0x166>
		}


		//Puntuaciones
		for(uint8_t j=0; j<5;j++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80013b6:	e02a      	b.n	800140e <menuActualizar+0x20e>

			posicion = j*10 + 13;
 80013b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80013bc:	461a      	mov	r2, r3
 80013be:	0092      	lsls	r2, r2, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	330d      	adds	r3, #13
 80013c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

			SSD1306_GotoXY(90, posicion);
 80013cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4619      	mov	r1, r3
 80013d4:	205a      	movs	r0, #90	; 0x5a
 80013d6:	f000 fab7 	bl	8001948 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 80013da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fd34 	bl	8000e4c <getPuntajes>
 80013e4:	4603      	mov	r3, r0
 80013e6:	88db      	ldrh	r3, [r3, #6]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	220a      	movs	r2, #10
 80013f0:	4619      	mov	r1, r3
 80013f2:	f007 fe8b 	bl	800910c <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	2201      	movs	r2, #1
 80013fc:	4960      	ldr	r1, [pc, #384]	; (8001580 <menuActualizar+0x380>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fb38 	bl	8001a74 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001404:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001408:	3301      	adds	r3, #1
 800140a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800140e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001412:	2b04      	cmp	r3, #4
 8001414:	d9d0      	bls.n	80013b8 <menuActualizar+0x1b8>
		}

		osMutexRelease(mutexPuntajesHandle);
 8001416:	4b5e      	ldr	r3, [pc, #376]	; (8001590 <menuActualizar+0x390>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fcda 	bl	8005dd4 <osMutexRelease>


		switch(y){
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <menuActualizar+0x232>
		case arriba:
				getMenu()->menuActual = menu_principal;
 8001426:	f7ff fecd 	bl	80011c4 <getMenu>
 800142a:	4603      	mov	r3, r0
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
			break;
 8001430:	e000      	b.n	8001434 <menuActualizar+0x234>
		default:
			break;
 8001432:	bf00      	nop
		}
		break;
 8001434:	e09e      	b.n	8001574 <menuActualizar+0x374>

//-------------------------------------------------------------- GUARDADO DEL NOMBRE-----------------------------------------------------------------------------
	case guardar_nombre:


		char buff_qwerty[] = "qwertyuiop";
 8001436:	4a57      	ldr	r2, [pc, #348]	; (8001594 <menuActualizar+0x394>)
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	ca07      	ldmia	r2, {r0, r1, r2}
 800143e:	c303      	stmia	r3!, {r0, r1}
 8001440:	801a      	strh	r2, [r3, #0]
 8001442:	3302      	adds	r3, #2
 8001444:	0c12      	lsrs	r2, r2, #16
 8001446:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl";
 8001448:	4a53      	ldr	r2, [pc, #332]	; (8001598 <menuActualizar+0x398>)
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001450:	c303      	stmia	r3!, {r0, r1}
 8001452:	801a      	strh	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <menuActualizar+0x39c>)
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800145e:	e883 0003 	stmia.w	r3, {r0, r1}

		uint8_t posicion_x;

		SSD1306_DrawRectangle(35, 0, 50, 15, 1);
 8001462:	2301      	movs	r3, #1
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	230f      	movs	r3, #15
 8001468:	2232      	movs	r2, #50	; 0x32
 800146a:	2100      	movs	r1, #0
 800146c:	2023      	movs	r0, #35	; 0x23
 800146e:	f000 fc21 	bl	8001cb4 <SSD1306_DrawRectangle>
		SSD1306_GotoXY(37, 5);
 8001472:	2105      	movs	r1, #5
 8001474:	2025      	movs	r0, #37	; 0x25
 8001476:	f000 fa67 	bl	8001948 <SSD1306_GotoXY>
		SSD1306_Puts("capaz", &Font_7x10, 1);
 800147a:	2201      	movs	r2, #1
 800147c:	4940      	ldr	r1, [pc, #256]	; (8001580 <menuActualizar+0x380>)
 800147e:	4848      	ldr	r0, [pc, #288]	; (80015a0 <menuActualizar+0x3a0>)
 8001480:	f000 faf8 	bl	8001a74 <SSD1306_Puts>


			for(uint8_t i=0;i<10;i++){
 8001484:	2300      	movs	r3, #0
 8001486:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800148a:	e032      	b.n	80014f2 <menuActualizar+0x2f2>

				posicion_x = i*(12) + 6;
 800148c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001490:	461a      	mov	r2, r3
 8001492:	0052      	lsls	r2, r2, #1
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	b2db      	uxtb	r3, r3
 800149a:	3306      	adds	r3, #6
 800149c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				SSD1306_GotoXY(posicion_x, 23);
 80014a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2117      	movs	r1, #23
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fa4d 	bl	8001948 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 80014ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014b2:	3330      	adds	r3, #48	; 0x30
 80014b4:	443b      	add	r3, r7
 80014b6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80014ba:	2201      	movs	r2, #1
 80014bc:	4930      	ldr	r1, [pc, #192]	; (8001580 <menuActualizar+0x380>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fa58 	bl	8001974 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 80014c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	2126      	movs	r1, #38	; 0x26
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fa3b 	bl	8001948 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 80014d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014d6:	3330      	adds	r3, #48	; 0x30
 80014d8:	443b      	add	r3, r7
 80014da:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80014de:	2201      	movs	r2, #1
 80014e0:	4927      	ldr	r1, [pc, #156]	; (8001580 <menuActualizar+0x380>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fa46 	bl	8001974 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 80014e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ec:	3301      	adds	r3, #1
 80014ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80014f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014f6:	2b09      	cmp	r3, #9
 80014f8:	d9c8      	bls.n	800148c <menuActualizar+0x28c>

			}


			for(uint8_t i=0;i<7;i++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001500:	e020      	b.n	8001544 <menuActualizar+0x344>

				posicion_x = i*(12) + 18;
 8001502:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001506:	461a      	mov	r2, r3
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3312      	adds	r3, #18
 8001512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				SSD1306_GotoXY(posicion_x, 53);
 8001516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800151a:	b29b      	uxth	r3, r3
 800151c:	2135      	movs	r1, #53	; 0x35
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fa12 	bl	8001948 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 8001524:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001528:	3330      	adds	r3, #48	; 0x30
 800152a:	443b      	add	r3, r7
 800152c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001530:	2201      	movs	r2, #1
 8001532:	4913      	ldr	r1, [pc, #76]	; (8001580 <menuActualizar+0x380>)
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fa1d 	bl	8001974 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 800153a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800153e:	3301      	adds	r3, #1
 8001540:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001548:	2b06      	cmp	r3, #6
 800154a:	d9da      	bls.n	8001502 <menuActualizar+0x302>
			}

			SSD1306_DrawLine(6, 23 + 10, 12, 23+10, 1);
 800154c:	2301      	movs	r3, #1
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2321      	movs	r3, #33	; 0x21
 8001552:	220c      	movs	r2, #12
 8001554:	2121      	movs	r1, #33	; 0x21
 8001556:	2006      	movs	r0, #6
 8001558:	f000 fab1 	bl	8001abe <SSD1306_DrawLine>

		break;
 800155c:	e00a      	b.n	8001574 <menuActualizar+0x374>


//-------------------------------------------------------------- GAME OVER -----------------------------------------------------------------------------
	case game_over:

		SSD1306_GotoXY(35, 25);
 800155e:	2119      	movs	r1, #25
 8001560:	2023      	movs	r0, #35	; 0x23
 8001562:	f000 f9f1 	bl	8001948 <SSD1306_GotoXY>
		SSD1306_Puts("GAME OVER", &Font_7x10, 1);
 8001566:	2201      	movs	r2, #1
 8001568:	4905      	ldr	r1, [pc, #20]	; (8001580 <menuActualizar+0x380>)
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <menuActualizar+0x3a4>)
 800156c:	f000 fa82 	bl	8001a74 <SSD1306_Puts>


		break;
 8001570:	e000      	b.n	8001574 <menuActualizar+0x374>
	default:
		break;
 8001572:	bf00      	nop
	}

}
 8001574:	bf00      	nop
 8001576:	3734      	adds	r7, #52	; 0x34
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	08009b24 	.word	0x08009b24
 8001580:	20000000 	.word	0x20000000
 8001584:	0800928c 	.word	0x0800928c
 8001588:	08009294 	.word	0x08009294
 800158c:	40010800 	.word	0x40010800
 8001590:	200001cc 	.word	0x200001cc
 8001594:	080092b4 	.word	0x080092b4
 8001598:	080092c0 	.word	0x080092c0
 800159c:	080092cc 	.word	0x080092cc
 80015a0:	080092a0 	.word	0x080092a0
 80015a4:	080092a8 	.word	0x080092a8

080015a8 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60ba      	str	r2, [r7, #8]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	81fb      	strh	r3, [r7, #14]
 80015b6:	460b      	mov	r3, r1
 80015b8:	81bb      	strh	r3, [r7, #12]
 80015ba:	4613      	mov	r3, r2
 80015bc:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80015be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c2:	3307      	adds	r3, #7
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da00      	bge.n	80015ca <SSD1306_DrawBitmap+0x22>
 80015c8:	3307      	adds	r3, #7
 80015ca:	10db      	asrs	r3, r3, #3
 80015cc:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	82bb      	strh	r3, [r7, #20]
 80015d6:	e044      	b.n	8001662 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	827b      	strh	r3, [r7, #18]
 80015dc:	e02f      	b.n	800163e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80015de:	8a7b      	ldrh	r3, [r7, #18]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
 80015ee:	e012      	b.n	8001616 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80015f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015f4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80015f8:	fb03 f202 	mul.w	r2, r3, r2
 80015fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001600:	2b00      	cmp	r3, #0
 8001602:	da00      	bge.n	8001606 <SSD1306_DrawBitmap+0x5e>
 8001604:	3307      	adds	r3, #7
 8001606:	10db      	asrs	r3, r3, #3
 8001608:	b21b      	sxth	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	461a      	mov	r2, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da09      	bge.n	8001632 <SSD1306_DrawBitmap+0x8a>
 800161e:	89fa      	ldrh	r2, [r7, #14]
 8001620:	8a7b      	ldrh	r3, [r7, #18]
 8001622:	4413      	add	r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	89b9      	ldrh	r1, [r7, #12]
 8001628:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f92d 	bl	800188c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001632:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001636:	b29b      	uxth	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b29b      	uxth	r3, r3
 800163c:	827b      	strh	r3, [r7, #18]
 800163e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbc9      	blt.n	80015de <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800164a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800164e:	b29b      	uxth	r3, r3
 8001650:	3301      	adds	r3, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	82bb      	strh	r3, [r7, #20]
 8001656:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800165a:	b29b      	uxth	r3, r3
 800165c:	3301      	adds	r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	81bb      	strh	r3, [r7, #12]
 8001662:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001666:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800166a:	429a      	cmp	r2, r3
 800166c:	dbb4      	blt.n	80015d8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800167e:	f000 fc61 	bl	8001f44 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001682:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001686:	2201      	movs	r2, #1
 8001688:	2178      	movs	r1, #120	; 0x78
 800168a:	485b      	ldr	r0, [pc, #364]	; (80017f8 <SSD1306_Init+0x180>)
 800168c:	f002 f866 	bl	800375c <HAL_I2C_IsDeviceReady>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001696:	2300      	movs	r3, #0
 8001698:	e0a9      	b.n	80017ee <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800169a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800169e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016a0:	e002      	b.n	80016a8 <SSD1306_Init+0x30>
		p--;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f9      	bne.n	80016a2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80016ae:	22ae      	movs	r2, #174	; 0xae
 80016b0:	2100      	movs	r1, #0
 80016b2:	2078      	movs	r0, #120	; 0x78
 80016b4:	f000 fcc0 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80016b8:	2220      	movs	r2, #32
 80016ba:	2100      	movs	r1, #0
 80016bc:	2078      	movs	r0, #120	; 0x78
 80016be:	f000 fcbb 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016c2:	2210      	movs	r2, #16
 80016c4:	2100      	movs	r1, #0
 80016c6:	2078      	movs	r0, #120	; 0x78
 80016c8:	f000 fcb6 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016cc:	22b0      	movs	r2, #176	; 0xb0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2078      	movs	r0, #120	; 0x78
 80016d2:	f000 fcb1 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016d6:	22c8      	movs	r2, #200	; 0xc8
 80016d8:	2100      	movs	r1, #0
 80016da:	2078      	movs	r0, #120	; 0x78
 80016dc:	f000 fcac 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	2078      	movs	r0, #120	; 0x78
 80016e6:	f000 fca7 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016ea:	2210      	movs	r2, #16
 80016ec:	2100      	movs	r1, #0
 80016ee:	2078      	movs	r0, #120	; 0x78
 80016f0:	f000 fca2 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	2100      	movs	r1, #0
 80016f8:	2078      	movs	r0, #120	; 0x78
 80016fa:	f000 fc9d 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016fe:	2281      	movs	r2, #129	; 0x81
 8001700:	2100      	movs	r1, #0
 8001702:	2078      	movs	r0, #120	; 0x78
 8001704:	f000 fc98 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001708:	22ff      	movs	r2, #255	; 0xff
 800170a:	2100      	movs	r1, #0
 800170c:	2078      	movs	r0, #120	; 0x78
 800170e:	f000 fc93 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001712:	22a1      	movs	r2, #161	; 0xa1
 8001714:	2100      	movs	r1, #0
 8001716:	2078      	movs	r0, #120	; 0x78
 8001718:	f000 fc8e 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800171c:	22a6      	movs	r2, #166	; 0xa6
 800171e:	2100      	movs	r1, #0
 8001720:	2078      	movs	r0, #120	; 0x78
 8001722:	f000 fc89 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001726:	22a8      	movs	r2, #168	; 0xa8
 8001728:	2100      	movs	r1, #0
 800172a:	2078      	movs	r0, #120	; 0x78
 800172c:	f000 fc84 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001730:	223f      	movs	r2, #63	; 0x3f
 8001732:	2100      	movs	r1, #0
 8001734:	2078      	movs	r0, #120	; 0x78
 8001736:	f000 fc7f 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800173a:	22a4      	movs	r2, #164	; 0xa4
 800173c:	2100      	movs	r1, #0
 800173e:	2078      	movs	r0, #120	; 0x78
 8001740:	f000 fc7a 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001744:	22d3      	movs	r2, #211	; 0xd3
 8001746:	2100      	movs	r1, #0
 8001748:	2078      	movs	r0, #120	; 0x78
 800174a:	f000 fc75 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2078      	movs	r0, #120	; 0x78
 8001754:	f000 fc70 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001758:	22d5      	movs	r2, #213	; 0xd5
 800175a:	2100      	movs	r1, #0
 800175c:	2078      	movs	r0, #120	; 0x78
 800175e:	f000 fc6b 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001762:	22f0      	movs	r2, #240	; 0xf0
 8001764:	2100      	movs	r1, #0
 8001766:	2078      	movs	r0, #120	; 0x78
 8001768:	f000 fc66 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800176c:	22d9      	movs	r2, #217	; 0xd9
 800176e:	2100      	movs	r1, #0
 8001770:	2078      	movs	r0, #120	; 0x78
 8001772:	f000 fc61 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001776:	2222      	movs	r2, #34	; 0x22
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f000 fc5c 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001780:	22da      	movs	r2, #218	; 0xda
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	; 0x78
 8001786:	f000 fc57 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800178a:	2212      	movs	r2, #18
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 fc52 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001794:	22db      	movs	r2, #219	; 0xdb
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	; 0x78
 800179a:	f000 fc4d 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800179e:	2220      	movs	r2, #32
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	; 0x78
 80017a4:	f000 fc48 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017a8:	228d      	movs	r2, #141	; 0x8d
 80017aa:	2100      	movs	r1, #0
 80017ac:	2078      	movs	r0, #120	; 0x78
 80017ae:	f000 fc43 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80017b2:	2214      	movs	r2, #20
 80017b4:	2100      	movs	r1, #0
 80017b6:	2078      	movs	r0, #120	; 0x78
 80017b8:	f000 fc3e 	bl	8002038 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80017bc:	22af      	movs	r2, #175	; 0xaf
 80017be:	2100      	movs	r1, #0
 80017c0:	2078      	movs	r0, #120	; 0x78
 80017c2:	f000 fc39 	bl	8002038 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017c6:	222e      	movs	r2, #46	; 0x2e
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	; 0x78
 80017cc:	f000 fc34 	bl	8002038 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 f843 	bl	800185c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80017d6:	f000 f813 	bl	8001800 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <SSD1306_Init+0x184>)
 80017dc:	2200      	movs	r2, #0
 80017de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <SSD1306_Init+0x184>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SSD1306_Init+0x184>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000110 	.word	0x20000110
 80017fc:	200005fc 	.word	0x200005fc

08001800 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	e01d      	b.n	8001848 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	3b50      	subs	r3, #80	; 0x50
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	2100      	movs	r1, #0
 8001816:	2078      	movs	r0, #120	; 0x78
 8001818:	f000 fc0e 	bl	8002038 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2078      	movs	r0, #120	; 0x78
 8001822:	f000 fc09 	bl	8002038 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001826:	2210      	movs	r2, #16
 8001828:	2100      	movs	r1, #0
 800182a:	2078      	movs	r0, #120	; 0x78
 800182c:	f000 fc04 	bl	8002038 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	01db      	lsls	r3, r3, #7
 8001834:	4a08      	ldr	r2, [pc, #32]	; (8001858 <SSD1306_UpdateScreen+0x58>)
 8001836:	441a      	add	r2, r3
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	2140      	movs	r1, #64	; 0x40
 800183c:	2078      	movs	r0, #120	; 0x78
 800183e:	f000 fb95 	bl	8001f6c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	3301      	adds	r3, #1
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2b07      	cmp	r3, #7
 800184c:	d9de      	bls.n	800180c <SSD1306_UpdateScreen+0xc>
	}
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200001fc 	.word	0x200001fc

0800185c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <SSD1306_Fill+0x14>
 800186c:	2300      	movs	r3, #0
 800186e:	e000      	b.n	8001872 <SSD1306_Fill+0x16>
 8001870:	23ff      	movs	r3, #255	; 0xff
 8001872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001876:	4619      	mov	r1, r3
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <SSD1306_Fill+0x2c>)
 800187a:	f007 fc8b 	bl	8009194 <memset>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001fc 	.word	0x200001fc

0800188c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	460b      	mov	r3, r1
 8001898:	80bb      	strh	r3, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	70fb      	strb	r3, [r7, #3]
	if (
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	2b7f      	cmp	r3, #127	; 0x7f
 80018a2:	d848      	bhi.n	8001936 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	2b3f      	cmp	r3, #63	; 0x3f
 80018a8:	d845      	bhi.n	8001936 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <SSD1306_DrawPixel+0xb4>)
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d006      	beq.n	80018c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d11a      	bne.n	80018fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018c6:	88fa      	ldrh	r2, [r7, #6]
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	b298      	uxth	r0, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	01db      	lsls	r3, r3, #7
 80018d2:	4413      	add	r3, r2
 80018d4:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <SSD1306_DrawPixel+0xb8>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	b25a      	sxtb	r2, r3
 80018da:	88bb      	ldrh	r3, [r7, #4]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b259      	sxtb	r1, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	4603      	mov	r3, r0
 80018f0:	01db      	lsls	r3, r3, #7
 80018f2:	4413      	add	r3, r2
 80018f4:	b2c9      	uxtb	r1, r1
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <SSD1306_DrawPixel+0xb8>)
 80018f8:	54d1      	strb	r1, [r2, r3]
 80018fa:	e01d      	b.n	8001938 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018fc:	88fa      	ldrh	r2, [r7, #6]
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	b298      	uxth	r0, r3
 8001904:	4603      	mov	r3, r0
 8001906:	01db      	lsls	r3, r3, #7
 8001908:	4413      	add	r3, r2
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <SSD1306_DrawPixel+0xb8>)
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	b25a      	sxtb	r2, r3
 8001910:	88bb      	ldrh	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	b25b      	sxtb	r3, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	4013      	ands	r3, r2
 8001924:	b259      	sxtb	r1, r3
 8001926:	88fa      	ldrh	r2, [r7, #6]
 8001928:	4603      	mov	r3, r0
 800192a:	01db      	lsls	r3, r3, #7
 800192c:	4413      	add	r3, r2
 800192e:	b2c9      	uxtb	r1, r1
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <SSD1306_DrawPixel+0xb8>)
 8001932:	54d1      	strb	r1, [r2, r3]
 8001934:	e000      	b.n	8001938 <SSD1306_DrawPixel+0xac>
		return;
 8001936:	bf00      	nop
	}
}
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	200005fc 	.word	0x200005fc
 8001944:	200001fc 	.word	0x200001fc

08001948 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	460a      	mov	r2, r1
 8001952:	80fb      	strh	r3, [r7, #6]
 8001954:	4613      	mov	r3, r2
 8001956:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <SSD1306_GotoXY+0x28>)
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <SSD1306_GotoXY+0x28>)
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	8053      	strh	r3, [r2, #2]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200005fc 	.word	0x200005fc

08001974 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
 8001980:	4613      	mov	r3, r2
 8001982:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001984:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <SSD1306_Putc+0xfc>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
	if (
 8001990:	2b7f      	cmp	r3, #127	; 0x7f
 8001992:	dc07      	bgt.n	80019a4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <SSD1306_Putc+0xfc>)
 8001996:	885b      	ldrh	r3, [r3, #2]
 8001998:	461a      	mov	r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	785b      	ldrb	r3, [r3, #1]
 800199e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019a0:	2b3f      	cmp	r3, #63	; 0x3f
 80019a2:	dd01      	ble.n	80019a8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e05e      	b.n	8001a66 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e04b      	b.n	8001a46 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	3b20      	subs	r3, #32
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	7849      	ldrb	r1, [r1, #1]
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4619      	mov	r1, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	440b      	add	r3, r1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	e030      	b.n	8001a34 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d010      	beq.n	8001a04 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019e2:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <SSD1306_Putc+0xfc>)
 80019e4:	881a      	ldrh	r2, [r3, #0]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	b298      	uxth	r0, r3
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <SSD1306_Putc+0xfc>)
 80019f0:	885a      	ldrh	r2, [r3, #2]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	79ba      	ldrb	r2, [r7, #6]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff ff45 	bl	800188c <SSD1306_DrawPixel>
 8001a02:	e014      	b.n	8001a2e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <SSD1306_Putc+0xfc>)
 8001a06:	881a      	ldrh	r2, [r3, #0]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b298      	uxth	r0, r3
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <SSD1306_Putc+0xfc>)
 8001a12:	885a      	ldrh	r2, [r3, #2]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	b299      	uxth	r1, r3
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f7ff ff2f 	bl	800188c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	3301      	adds	r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d3c8      	bcc.n	80019d2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	785b      	ldrb	r3, [r3, #1]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d3ad      	bcc.n	80019ae <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <SSD1306_Putc+0xfc>)
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <SSD1306_Putc+0xfc>)
 8001a62:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200005fc 	.word	0x200005fc

08001a74 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a82:	e012      	b.n	8001aaa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	79fa      	ldrb	r2, [r7, #7]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff71 	bl	8001974 <SSD1306_Putc>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d002      	beq.n	8001aa4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	e008      	b.n	8001ab6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1e8      	bne.n	8001a84 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001abe:	b590      	push	{r4, r7, lr}
 8001ac0:	b087      	sub	sp, #28
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	4608      	mov	r0, r1
 8001ac8:	4611      	mov	r1, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	4623      	mov	r3, r4
 8001ace:	80fb      	strh	r3, [r7, #6]
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	80bb      	strh	r3, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae0:	d901      	bls.n	8001ae6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001ae2:	237f      	movs	r3, #127	; 0x7f
 8001ae4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aea:	d901      	bls.n	8001af0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001aec:	237f      	movs	r3, #127	; 0x7f
 8001aee:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001af0:	88bb      	ldrh	r3, [r7, #4]
 8001af2:	2b3f      	cmp	r3, #63	; 0x3f
 8001af4:	d901      	bls.n	8001afa <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001af6:	233f      	movs	r3, #63	; 0x3f
 8001af8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001afa:	883b      	ldrh	r3, [r7, #0]
 8001afc:	2b3f      	cmp	r3, #63	; 0x3f
 8001afe:	d901      	bls.n	8001b04 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001b00:	233f      	movs	r3, #63	; 0x3f
 8001b02:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b04:	88fa      	ldrh	r2, [r7, #6]
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d205      	bcs.n	8001b18 <SSD1306_DrawLine+0x5a>
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	e004      	b.n	8001b22 <SSD1306_DrawLine+0x64>
 8001b18:	88fa      	ldrh	r2, [r7, #6]
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b24:	88ba      	ldrh	r2, [r7, #4]
 8001b26:	883b      	ldrh	r3, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d205      	bcs.n	8001b38 <SSD1306_DrawLine+0x7a>
 8001b2c:	883a      	ldrh	r2, [r7, #0]
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	e004      	b.n	8001b42 <SSD1306_DrawLine+0x84>
 8001b38:	88ba      	ldrh	r2, [r7, #4]
 8001b3a:	883b      	ldrh	r3, [r7, #0]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d201      	bcs.n	8001b50 <SSD1306_DrawLine+0x92>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e001      	b.n	8001b54 <SSD1306_DrawLine+0x96>
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b56:	88ba      	ldrh	r2, [r7, #4]
 8001b58:	883b      	ldrh	r3, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d201      	bcs.n	8001b62 <SSD1306_DrawLine+0xa4>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e001      	b.n	8001b66 <SSD1306_DrawLine+0xa8>
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001b68:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dd06      	ble.n	8001b82 <SSD1306_DrawLine+0xc4>
 8001b74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b78:	0fda      	lsrs	r2, r3, #31
 8001b7a:	4413      	add	r3, r2
 8001b7c:	105b      	asrs	r3, r3, #1
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	e006      	b.n	8001b90 <SSD1306_DrawLine+0xd2>
 8001b82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b86:	0fda      	lsrs	r2, r3, #31
 8001b88:	4413      	add	r3, r2
 8001b8a:	105b      	asrs	r3, r3, #1
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d129      	bne.n	8001bee <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001b9a:	883a      	ldrh	r2, [r7, #0]
 8001b9c:	88bb      	ldrh	r3, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d205      	bcs.n	8001bae <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001ba2:	883b      	ldrh	r3, [r7, #0]
 8001ba4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001baa:	893b      	ldrh	r3, [r7, #8]
 8001bac:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d205      	bcs.n	8001bc2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001bbe:	893b      	ldrh	r3, [r7, #8]
 8001bc0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	82bb      	strh	r3, [r7, #20]
 8001bc6:	e00c      	b.n	8001be2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001bc8:	8ab9      	ldrh	r1, [r7, #20]
 8001bca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fe5b 	bl	800188c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001bd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	82bb      	strh	r3, [r7, #20]
 8001be2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001be6:	883b      	ldrh	r3, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dded      	ble.n	8001bc8 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001bec:	e05f      	b.n	8001cae <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001bee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d129      	bne.n	8001c4a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001bf6:	883a      	ldrh	r2, [r7, #0]
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d205      	bcs.n	8001c0a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001bfe:	883b      	ldrh	r3, [r7, #0]
 8001c00:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c02:	88bb      	ldrh	r3, [r7, #4]
 8001c04:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c06:	893b      	ldrh	r3, [r7, #8]
 8001c08:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d205      	bcs.n	8001c1e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c1a:	893b      	ldrh	r3, [r7, #8]
 8001c1c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	82bb      	strh	r3, [r7, #20]
 8001c22:	e00c      	b.n	8001c3e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001c24:	8abb      	ldrh	r3, [r7, #20]
 8001c26:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c2a:	88b9      	ldrh	r1, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe2d 	bl	800188c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001c32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	82bb      	strh	r3, [r7, #20]
 8001c3e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c42:	887b      	ldrh	r3, [r7, #2]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dded      	ble.n	8001c24 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001c48:	e031      	b.n	8001cae <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001c4a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c4e:	88b9      	ldrh	r1, [r7, #4]
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe1a 	bl	800188c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001c58:	88fa      	ldrh	r2, [r7, #6]
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d103      	bne.n	8001c68 <SSD1306_DrawLine+0x1aa>
 8001c60:	88ba      	ldrh	r2, [r7, #4]
 8001c62:	883b      	ldrh	r3, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d021      	beq.n	8001cac <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001c68:	8afb      	ldrh	r3, [r7, #22]
 8001c6a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001c6c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c74:	425b      	negs	r3, r3
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dd08      	ble.n	8001c8c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001c7a:	8afa      	ldrh	r2, [r7, #22]
 8001c7c:	8a3b      	ldrh	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001c84:	89fa      	ldrh	r2, [r7, #14]
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	4413      	add	r3, r2
 8001c8a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001c8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dad8      	bge.n	8001c4a <SSD1306_DrawLine+0x18c>
			err += dx;
 8001c98:	8afa      	ldrh	r2, [r7, #22]
 8001c9a:	8a7b      	ldrh	r3, [r7, #18]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001ca2:	89ba      	ldrh	r2, [r7, #12]
 8001ca4:	88bb      	ldrh	r3, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001caa:	e7ce      	b.n	8001c4a <SSD1306_DrawLine+0x18c>
			break;
 8001cac:	bf00      	nop
		} 
	}
}
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	4604      	mov	r4, r0
 8001cbc:	4608      	mov	r0, r1
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4623      	mov	r3, r4
 8001cc4:	80fb      	strh	r3, [r7, #6]
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80bb      	strh	r3, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	807b      	strh	r3, [r7, #2]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8001cd6:	d853      	bhi.n	8001d80 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001cd8:	88bb      	ldrh	r3, [r7, #4]
 8001cda:	2b3f      	cmp	r3, #63	; 0x3f
 8001cdc:	d850      	bhi.n	8001d80 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ce6:	dd03      	ble.n	8001cf0 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001cee:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001cf0:	88ba      	ldrh	r2, [r7, #4]
 8001cf2:	883b      	ldrh	r3, [r7, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8001cf8:	dd03      	ble.n	8001d02 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001cfa:	88bb      	ldrh	r3, [r7, #4]
 8001cfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d00:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	4413      	add	r3, r2
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	88bc      	ldrh	r4, [r7, #4]
 8001d0c:	88b9      	ldrh	r1, [r7, #4]
 8001d0e:	88f8      	ldrh	r0, [r7, #6]
 8001d10:	7e3b      	ldrb	r3, [r7, #24]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4623      	mov	r3, r4
 8001d16:	f7ff fed2 	bl	8001abe <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001d1a:	88ba      	ldrh	r2, [r7, #4]
 8001d1c:	883b      	ldrh	r3, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	b299      	uxth	r1, r3
 8001d22:	88fa      	ldrh	r2, [r7, #6]
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	4413      	add	r3, r2
 8001d28:	b29c      	uxth	r4, r3
 8001d2a:	88ba      	ldrh	r2, [r7, #4]
 8001d2c:	883b      	ldrh	r3, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	88f8      	ldrh	r0, [r7, #6]
 8001d34:	7e3b      	ldrb	r3, [r7, #24]
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	f7ff febf 	bl	8001abe <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001d40:	88ba      	ldrh	r2, [r7, #4]
 8001d42:	883b      	ldrh	r3, [r7, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	b29c      	uxth	r4, r3
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	88b9      	ldrh	r1, [r7, #4]
 8001d4c:	88f8      	ldrh	r0, [r7, #6]
 8001d4e:	7e3b      	ldrb	r3, [r7, #24]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4623      	mov	r3, r4
 8001d54:	f7ff feb3 	bl	8001abe <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b298      	uxth	r0, r3
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	4413      	add	r3, r2
 8001d66:	b29c      	uxth	r4, r3
 8001d68:	88ba      	ldrh	r2, [r7, #4]
 8001d6a:	883b      	ldrh	r3, [r7, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	88b9      	ldrh	r1, [r7, #4]
 8001d72:	7e3b      	ldrb	r3, [r7, #24]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	4613      	mov	r3, r2
 8001d78:	4622      	mov	r2, r4
 8001d7a:	f7ff fea0 	bl	8001abe <SSD1306_DrawLine>
 8001d7e:	e000      	b.n	8001d82 <SSD1306_DrawRectangle+0xce>
		return;
 8001d80:	bf00      	nop
}
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd90      	pop	{r4, r7, pc}

08001d88 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4623      	mov	r3, r4
 8001d98:	80fb      	strh	r3, [r7, #6]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80bb      	strh	r3, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	807b      	strh	r3, [r7, #2]
 8001da2:	4613      	mov	r3, r2
 8001da4:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	f1c3 0301 	rsb	r3, r3, #1
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	461a      	mov	r2, r3
 8001db8:	03d2      	lsls	r2, r2, #15
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001dca:	88f8      	ldrh	r0, [r7, #6]
 8001dcc:	88ba      	ldrh	r2, [r7, #4]
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	787a      	ldrb	r2, [r7, #1]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7ff fd58 	bl	800188c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001ddc:	88f8      	ldrh	r0, [r7, #6]
 8001dde:	88ba      	ldrh	r2, [r7, #4]
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	787a      	ldrb	r2, [r7, #1]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7ff fd4f 	bl	800188c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001dee:	88fa      	ldrh	r2, [r7, #6]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4413      	add	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	88b9      	ldrh	r1, [r7, #4]
 8001df8:	787a      	ldrb	r2, [r7, #1]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fd46 	bl	800188c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	88b9      	ldrh	r1, [r7, #4]
 8001e0a:	787a      	ldrb	r2, [r7, #1]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fd3d 	bl	800188c <SSD1306_DrawPixel>

    while (x < y) {
 8001e12:	e081      	b.n	8001f18 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8001e14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0e      	blt.n	8001e3a <SSD1306_DrawCircle+0xb2>
            y--;
 8001e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001e28:	8a7b      	ldrh	r3, [r7, #18]
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001e30:	8afa      	ldrh	r2, [r7, #22]
 8001e32:	8a7b      	ldrh	r3, [r7, #18]
 8001e34:	4413      	add	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001e3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001e46:	8abb      	ldrh	r3, [r7, #20]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001e4e:	8afa      	ldrh	r2, [r7, #22]
 8001e50:	8abb      	ldrh	r3, [r7, #20]
 8001e52:	4413      	add	r3, r2
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001e58:	88fa      	ldrh	r2, [r7, #6]
 8001e5a:	8a3b      	ldrh	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b298      	uxth	r0, r3
 8001e60:	88ba      	ldrh	r2, [r7, #4]
 8001e62:	89fb      	ldrh	r3, [r7, #14]
 8001e64:	4413      	add	r3, r2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	787a      	ldrb	r2, [r7, #1]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7ff fd0e 	bl	800188c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	8a3b      	ldrh	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b298      	uxth	r0, r3
 8001e78:	88ba      	ldrh	r2, [r7, #4]
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	787a      	ldrb	r2, [r7, #1]
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7ff fd02 	bl	800188c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	8a3b      	ldrh	r3, [r7, #16]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b298      	uxth	r0, r3
 8001e90:	88ba      	ldrh	r2, [r7, #4]
 8001e92:	89fb      	ldrh	r3, [r7, #14]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	787a      	ldrb	r2, [r7, #1]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7ff fcf6 	bl	800188c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001ea0:	88fa      	ldrh	r2, [r7, #6]
 8001ea2:	8a3b      	ldrh	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	b298      	uxth	r0, r3
 8001ea8:	88ba      	ldrh	r2, [r7, #4]
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	787a      	ldrb	r2, [r7, #1]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7ff fcea 	bl	800188c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	89fb      	ldrh	r3, [r7, #14]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b298      	uxth	r0, r3
 8001ec0:	88ba      	ldrh	r2, [r7, #4]
 8001ec2:	8a3b      	ldrh	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	787a      	ldrb	r2, [r7, #1]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7ff fcde 	bl	800188c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b298      	uxth	r0, r3
 8001ed8:	88ba      	ldrh	r2, [r7, #4]
 8001eda:	8a3b      	ldrh	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	787a      	ldrb	r2, [r7, #1]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f7ff fcd2 	bl	800188c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	89fb      	ldrh	r3, [r7, #14]
 8001eec:	4413      	add	r3, r2
 8001eee:	b298      	uxth	r0, r3
 8001ef0:	88ba      	ldrh	r2, [r7, #4]
 8001ef2:	8a3b      	ldrh	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	787a      	ldrb	r2, [r7, #1]
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7ff fcc6 	bl	800188c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	b298      	uxth	r0, r3
 8001f08:	88ba      	ldrh	r2, [r7, #4]
 8001f0a:	8a3b      	ldrh	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	787a      	ldrb	r2, [r7, #1]
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7ff fcba 	bl	800188c <SSD1306_DrawPixel>
    while (x < y) {
 8001f18:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001f1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f6ff af77 	blt.w	8001e14 <SSD1306_DrawCircle+0x8c>
    }
}
 8001f26:	bf00      	nop
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd90      	pop	{r4, r7, pc}

08001f30 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff fc91 	bl	800185c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001f3a:	f7ff fc61 	bl	8001800 <SSD1306_UpdateScreen>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <ssd1306_I2C_Init+0x24>)
 8001f4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f4e:	e002      	b.n	8001f56 <ssd1306_I2C_Init+0x12>
		p--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f9      	bne.n	8001f50 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	0003d090 	.word	0x0003d090

08001f6c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b0c7      	sub	sp, #284	; 0x11c
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	4604      	mov	r4, r0
 8001f74:	4608      	mov	r0, r1
 8001f76:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001f7a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001f7e:	600a      	str	r2, [r1, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f86:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f92:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001f96:	4602      	mov	r2, r0
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001f9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fa2:	460a      	mov	r2, r1
 8001fa4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001fa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fb2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001fc0:	e015      	b.n	8001fee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001fc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fc6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fca:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	441a      	add	r2, r3
 8001fd2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	7811      	ldrb	r1, [r2, #0]
 8001fda:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001fde:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001fe2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001fe4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001fee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ff8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001ffc:	8812      	ldrh	r2, [r2, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d8df      	bhi.n	8001fc2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002002:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002006:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b299      	uxth	r1, r3
 800200e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002012:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b29b      	uxth	r3, r3
 800201c:	f107 020c 	add.w	r2, r7, #12
 8002020:	200a      	movs	r0, #10
 8002022:	9000      	str	r0, [sp, #0]
 8002024:	4803      	ldr	r0, [pc, #12]	; (8002034 <ssd1306_I2C_WriteMulti+0xc8>)
 8002026:	f001 fa9b 	bl	8003560 <HAL_I2C_Master_Transmit>
}
 800202a:	bf00      	nop
 800202c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}
 8002034:	20000110 	.word	0x20000110

08002038 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af02      	add	r7, sp, #8
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	460b      	mov	r3, r1
 8002044:	71bb      	strb	r3, [r7, #6]
 8002046:	4613      	mov	r3, r2
 8002048:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800204a:	79bb      	ldrb	r3, [r7, #6]
 800204c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800204e:	797b      	ldrb	r3, [r7, #5]
 8002050:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	b299      	uxth	r1, r3
 8002056:	f107 020c 	add.w	r2, r7, #12
 800205a:	230a      	movs	r3, #10
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2302      	movs	r3, #2
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <ssd1306_I2C_Write+0x38>)
 8002062:	f001 fa7d 	bl	8003560 <HAL_I2C_Master_Transmit>
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000110 	.word	0x20000110

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_MspInit+0x68>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_MspInit+0x68>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6193      	str	r3, [r2, #24]
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_MspInit+0x68>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_MspInit+0x68>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a11      	ldr	r2, [pc, #68]	; (80020dc <HAL_MspInit+0x68>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_MspInit+0x68>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	210f      	movs	r1, #15
 80020ae:	f06f 0001 	mvn.w	r0, #1
 80020b2:	f000 ff32 	bl	8002f1a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_MspInit+0x6c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_MspInit+0x6c>)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000

080020e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <HAL_ADC_MspInit+0xbc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d122      	bne.n	800214a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a20      	ldr	r2, [pc, #128]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002134:	2309      	movs	r3, #9
 8002136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002138:	2303      	movs	r3, #3
 800213a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0318 	add.w	r3, r7, #24
 8002140:	4619      	mov	r1, r3
 8002142:	4819      	ldr	r0, [pc, #100]	; (80021a8 <HAL_ADC_MspInit+0xc4>)
 8002144:	f000 ff14 	bl	8002f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002148:	e026      	b.n	8002198 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_ADC_MspInit+0xc8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d121      	bne.n	8002198 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002154:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 800215a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215e:	6193      	str	r3, [r2, #24]
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_ADC_MspInit+0xc0>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002188:	2303      	movs	r3, #3
 800218a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	4619      	mov	r1, r3
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_ADC_MspInit+0xc4>)
 8002194:	f000 feec 	bl	8002f70 <HAL_GPIO_Init>
}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40012400 	.word	0x40012400
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010800 	.word	0x40010800
 80021ac:	40012800 	.word	0x40012800

080021b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 0310 	add.w	r3, r7, #16
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a15      	ldr	r2, [pc, #84]	; (8002220 <HAL_I2C_MspInit+0x70>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d123      	bne.n	8002218 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_I2C_MspInit+0x74>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <HAL_I2C_MspInit+0x74>)
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <HAL_I2C_MspInit+0x74>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021e8:	23c0      	movs	r3, #192	; 0xc0
 80021ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ec:	2312      	movs	r3, #18
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f4:	f107 0310 	add.w	r3, r7, #16
 80021f8:	4619      	mov	r1, r3
 80021fa:	480b      	ldr	r0, [pc, #44]	; (8002228 <HAL_I2C_MspInit+0x78>)
 80021fc:	f000 feb8 	bl	8002f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x74>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_I2C_MspInit+0x74>)
 8002206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800220a:	61d3      	str	r3, [r2, #28]
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_I2C_MspInit+0x74>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40005400 	.word	0x40005400
 8002224:	40021000 	.word	0x40021000
 8002228:	40010c00 	.word	0x40010c00

0800222c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_SPI_MspInit+0x88>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d12f      	bne.n	80022ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_SPI_MspInit+0x8c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_SPI_MspInit+0x8c>)
 8002252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_SPI_MspInit+0x8c>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_SPI_MspInit+0x8c>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_SPI_MspInit+0x8c>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_SPI_MspInit+0x8c>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800227c:	23a0      	movs	r3, #160	; 0xa0
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	480b      	ldr	r0, [pc, #44]	; (80022bc <HAL_SPI_MspInit+0x90>)
 8002290:	f000 fe6e 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002294:	2340      	movs	r3, #64	; 0x40
 8002296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <HAL_SPI_MspInit+0x90>)
 80022a8:	f000 fe62 	bl	8002f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022ac:	bf00      	nop
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40013000 	.word	0x40013000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010800 	.word	0x40010800

080022c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08e      	sub	sp, #56	; 0x38
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_InitTick+0xe8>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_InitTick+0xe8>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	61d3      	str	r3, [r2, #28]
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_InitTick+0xe8>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022ee:	f107 0210 	add.w	r2, r7, #16
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 f9a9 	bl	8004650 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d103      	bne.n	8002310 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002308:	f002 f97a 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 800230c:	6378      	str	r0, [r7, #52]	; 0x34
 800230e:	e004      	b.n	800231a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002310:	f002 f976 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8002314:	4603      	mov	r3, r0
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800231a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_InitTick+0xec>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0c9b      	lsrs	r3, r3, #18
 8002324:	3b01      	subs	r3, #1
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_InitTick+0xf0>)
 800232a:	4a22      	ldr	r2, [pc, #136]	; (80023b4 <HAL_InitTick+0xf4>)
 800232c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_InitTick+0xf0>)
 8002330:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002334:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_InitTick+0xf0>)
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_InitTick+0xf0>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_InitTick+0xf0>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_InitTick+0xf0>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800234e:	4818      	ldr	r0, [pc, #96]	; (80023b0 <HAL_InitTick+0xf0>)
 8002350:	f003 f8c0 	bl	80054d4 <HAL_TIM_Base_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800235a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11b      	bne.n	800239a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002362:	4813      	ldr	r0, [pc, #76]	; (80023b0 <HAL_InitTick+0xf0>)
 8002364:	f003 f90e 	bl	8005584 <HAL_TIM_Base_Start_IT>
 8002368:	4603      	mov	r3, r0
 800236a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800236e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002372:	2b00      	cmp	r3, #0
 8002374:	d111      	bne.n	800239a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002376:	201e      	movs	r0, #30
 8002378:	f000 fdeb 	bl	8002f52 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b0f      	cmp	r3, #15
 8002380:	d808      	bhi.n	8002394 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002382:	2200      	movs	r2, #0
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	201e      	movs	r0, #30
 8002388:	f000 fdc7 	bl	8002f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_InitTick+0xf8>)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e002      	b.n	800239a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800239a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3738      	adds	r7, #56	; 0x38
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	20000604 	.word	0x20000604
 80023b4:	40000800 	.word	0x40000800
 80023b8:	2000000c 	.word	0x2000000c

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <NMI_Handler+0x4>

080023c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <MemManage_Handler+0x4>

080023ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <UsageFault_Handler+0x4>

080023da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
	...

080023e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM4_IRQHandler+0x10>)
 80023ee:	f003 f91b 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000604 	.word	0x20000604

080023fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8002408:	f7ff fff8 	bl	80023fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800240e:	490c      	ldr	r1, [pc, #48]	; (8002440 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002424:	4c09      	ldr	r4, [pc, #36]	; (800244c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002432:	f006 feb7 	bl	80091a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002436:	f7fe fa03 	bl	8000840 <main>
  bx lr
 800243a:	4770      	bx	lr
  ldr r0, =_sdata
 800243c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002440:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002444:	08009c90 	.word	0x08009c90
  ldr r2, =_sbss
 8002448:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800244c:	20002338 	.word	0x20002338

08002450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC1_2_IRQHandler>
	...

08002454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_Init+0x28>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_Init+0x28>)
 800245e:	f043 0310 	orr.w	r3, r3, #16
 8002462:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002464:	2003      	movs	r0, #3
 8002466:	f000 fd4d 	bl	8002f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246a:	200f      	movs	r0, #15
 800246c:	f7ff ff28 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002470:	f7ff fe00 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40022000 	.word	0x40022000

08002480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <HAL_IncTick+0x1c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_IncTick+0x20>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a03      	ldr	r2, [pc, #12]	; (80024a0 <HAL_IncTick+0x20>)
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	20000010 	.word	0x20000010
 80024a0:	2000064c 	.word	0x2000064c

080024a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <HAL_GetTick+0x10>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	2000064c 	.word	0x2000064c

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffe0 	bl	80024a4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000010 	.word	0x20000010

08002500 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0be      	b.n	80026a0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d109      	bne.n	8002544 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fdd0 	bl	80020e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fbf1 	bl	8002d2c <ADC_ConversionStop_Disable>
 800254a:	4603      	mov	r3, r0
 800254c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 8099 	bne.w	800268e <HAL_ADC_Init+0x18e>
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 8095 	bne.w	800268e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800256c:	f023 0302 	bic.w	r3, r3, #2
 8002570:	f043 0202 	orr.w	r2, r3, #2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002580:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	7b1b      	ldrb	r3, [r3, #12]
 8002586:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002588:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4313      	orrs	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002598:	d003      	beq.n	80025a2 <HAL_ADC_Init+0xa2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_ADC_Init+0xa8>
 80025a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a6:	e000      	b.n	80025aa <HAL_ADC_Init+0xaa>
 80025a8:	2300      	movs	r3, #0
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7d1b      	ldrb	r3, [r3, #20]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d119      	bne.n	80025ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7b1b      	ldrb	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	035a      	lsls	r2, r3, #13
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e00b      	b.n	80025ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_ADC_Init+0x1a8>)
 8002608:	4013      	ands	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	430b      	orrs	r3, r1
 8002612:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261c:	d003      	beq.n	8002626 <HAL_ADC_Init+0x126>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d104      	bne.n	8002630 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	3b01      	subs	r3, #1
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002636:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	430a      	orrs	r2, r1
 8002642:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_ADC_Init+0x1ac>)
 800264c:	4013      	ands	r3, r2
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	429a      	cmp	r2, r3
 8002652:	d10b      	bne.n	800266c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	f023 0303 	bic.w	r3, r3, #3
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800266a:	e018      	b.n	800269e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	f023 0312 	bic.w	r3, r3, #18
 8002674:	f043 0210 	orr.w	r2, r3, #16
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800268c:	e007      	b.n	800269e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	f043 0210 	orr.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	ffe1f7fd 	.word	0xffe1f7fd
 80026ac:	ff1f0efe 	.word	0xff1f0efe

080026b0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Start+0x1a>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e098      	b.n	80027fc <HAL_ADC_Start+0x14c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fad0 	bl	8002c78 <ADC_Enable>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 8087 	bne.w	80027f2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a41      	ldr	r2, [pc, #260]	; (8002804 <HAL_ADC_Start+0x154>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d105      	bne.n	800270e <HAL_ADC_Start+0x5e>
 8002702:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_ADC_Start+0x158>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d026      	beq.n	8002776 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002730:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002738:	e01d      	b.n	8002776 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2f      	ldr	r2, [pc, #188]	; (8002808 <HAL_ADC_Start+0x158>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_ADC_Start+0xaa>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <HAL_ADC_Start+0x154>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d10d      	bne.n	8002776 <HAL_ADC_Start+0xc6>
 800275a:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <HAL_ADC_Start+0x158>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800276e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	f023 0206 	bic.w	r2, r3, #6
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c
 800278e:	e002      	b.n	8002796 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f06f 0202 	mvn.w	r2, #2
 80027a6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027b2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027b6:	d113      	bne.n	80027e0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_ADC_Start+0x154>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d105      	bne.n	80027ce <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_ADC_Start+0x158>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	e00c      	b.n	80027fa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e003      	b.n	80027fa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40012800 	.word	0x40012800
 8002808:	40012400 	.word	0x40012400

0800280c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Stop+0x1a>
 8002822:	2302      	movs	r3, #2
 8002824:	e01a      	b.n	800285c <HAL_ADC_Stop+0x50>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fa7c 	bl	8002d2c <ADC_ConversionStop_Disable>
 8002834:	4603      	mov	r3, r0
 8002836:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d109      	bne.n	8002852 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800287a:	f7ff fe13 	bl	80024a4 <HAL_GetTick>
 800287e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0d3      	b.n	8002a4e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d131      	bne.n	8002918 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12a      	bne.n	8002918 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028c2:	e021      	b.n	8002908 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d01d      	beq.n	8002908 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_ADC_PollForConversion+0x7e>
 80028d2:	f7ff fde7 	bl	80024a4 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d212      	bcs.n	8002908 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e0a2      	b.n	8002a4e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0d6      	beq.n	80028c4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002916:	e070      	b.n	80029fa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_ADC_PollForConversion+0x1f4>)
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	2002      	movs	r0, #2
 800291e:	f001 ff9b 	bl	8004858 <HAL_RCCEx_GetPeriphCLKFreq>
 8002922:	4603      	mov	r3, r0
 8002924:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6919      	ldr	r1, [r3, #16]
 800292e:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <HAL_ADC_PollForConversion+0x1f8>)
 8002930:	400b      	ands	r3, r1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d118      	bne.n	8002968 <HAL_ADC_PollForConversion+0x104>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68d9      	ldr	r1, [r3, #12]
 800293c:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_ADC_PollForConversion+0x1fc>)
 800293e:	400b      	ands	r3, r1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d111      	bne.n	8002968 <HAL_ADC_PollForConversion+0x104>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <HAL_ADC_PollForConversion+0x200>)
 800294c:	400b      	ands	r3, r1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d108      	bne.n	8002964 <HAL_ADC_PollForConversion+0x100>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68d9      	ldr	r1, [r3, #12]
 8002958:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <HAL_ADC_PollForConversion+0x204>)
 800295a:	400b      	ands	r3, r1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_ADC_PollForConversion+0x100>
 8002960:	2314      	movs	r3, #20
 8002962:	e020      	b.n	80029a6 <HAL_ADC_PollForConversion+0x142>
 8002964:	2329      	movs	r3, #41	; 0x29
 8002966:	e01e      	b.n	80029a6 <HAL_ADC_PollForConversion+0x142>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6919      	ldr	r1, [r3, #16]
 800296e:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <HAL_ADC_PollForConversion+0x200>)
 8002970:	400b      	ands	r3, r1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_ADC_PollForConversion+0x120>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68d9      	ldr	r1, [r3, #12]
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_ADC_PollForConversion+0x204>)
 800297e:	400b      	ands	r3, r1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <HAL_ADC_PollForConversion+0x13c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6919      	ldr	r1, [r3, #16]
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_ADC_PollForConversion+0x208>)
 800298c:	400b      	ands	r3, r1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d108      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x140>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68d9      	ldr	r1, [r3, #12]
 8002998:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <HAL_ADC_PollForConversion+0x208>)
 800299a:	400b      	ands	r3, r1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_ADC_PollForConversion+0x140>
 80029a0:	2354      	movs	r3, #84	; 0x54
 80029a2:	e000      	b.n	80029a6 <HAL_ADC_PollForConversion+0x142>
 80029a4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029ac:	e021      	b.n	80029f2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d01a      	beq.n	80029ec <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_ADC_PollForConversion+0x168>
 80029bc:	f7ff fd72 	bl	80024a4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d20f      	bcs.n	80029ec <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d90b      	bls.n	80029ec <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	f043 0204 	orr.w	r2, r3, #4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e030      	b.n	8002a4e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	3301      	adds	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d8d9      	bhi.n	80029ae <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f06f 0212 	mvn.w	r2, #18
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a1e:	d115      	bne.n	8002a4c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d111      	bne.n	8002a4c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd90      	pop	{r4, r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	24924924 	.word	0x24924924
 8002a60:	00924924 	.word	0x00924924
 8002a64:	12492492 	.word	0x12492492
 8002a68:	00492492 	.word	0x00492492
 8002a6c:	00249249 	.word	0x00249249

08002a70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x20>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0dc      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1da>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d81c      	bhi.n	8002af2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b05      	subs	r3, #5
 8002aca:	221f      	movs	r2, #31
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3b05      	subs	r3, #5
 8002ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34
 8002af0:	e03c      	b.n	8002b6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d81c      	bhi.n	8002b34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	3b23      	subs	r3, #35	; 0x23
 8002b0c:	221f      	movs	r2, #31
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	4019      	ands	r1, r3
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	3b23      	subs	r3, #35	; 0x23
 8002b26:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
 8002b32:	e01b      	b.n	8002b6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	3b41      	subs	r3, #65	; 0x41
 8002b46:	221f      	movs	r2, #31
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4019      	ands	r1, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b41      	subs	r3, #65	; 0x41
 8002b60:	fa00 f203 	lsl.w	r2, r0, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d91c      	bls.n	8002bae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	3b1e      	subs	r3, #30
 8002b86:	2207      	movs	r2, #7
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4019      	ands	r1, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6898      	ldr	r0, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b1e      	subs	r3, #30
 8002ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	60da      	str	r2, [r3, #12]
 8002bac:	e019      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6919      	ldr	r1, [r3, #16]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4019      	ands	r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6898      	ldr	r0, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d003      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bee:	2b11      	cmp	r3, #17
 8002bf0:	d132      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_ADC_ConfigChannel+0x1e4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d125      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d126      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d11a      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0c9a      	lsrs	r2, r3, #18
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c38:	e002      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f9      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x1b2>
 8002c46:	e007      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40012400 	.word	0x40012400
 8002c70:	20000008 	.word	0x20000008
 8002c74:	431bde83 	.word	0x431bde83

08002c78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d040      	beq.n	8002d18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <ADC_Enable+0xac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <ADC_Enable+0xb0>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cb4:	e002      	b.n	8002cbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f9      	bne.n	8002cb6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cc2:	f7ff fbef 	bl	80024a4 <HAL_GetTick>
 8002cc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cc8:	e01f      	b.n	8002d0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cca:	f7ff fbeb 	bl	80024a4 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d918      	bls.n	8002d0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d011      	beq.n	8002d0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	f043 0210 	orr.w	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d1d8      	bne.n	8002cca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000008 	.word	0x20000008
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d12e      	bne.n	8002da4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d56:	f7ff fba5 	bl	80024a4 <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d5c:	e01b      	b.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d5e:	f7ff fba1 	bl	80024a4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d914      	bls.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d10d      	bne.n	8002d96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f043 0210 	orr.w	r2, r3, #16
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e007      	b.n	8002da6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d0dc      	beq.n	8002d5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de2:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <__NVIC_SetPriorityGrouping+0x44>)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	60d3      	str	r3, [r2, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <__NVIC_GetPriorityGrouping+0x18>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	f003 0307 	and.w	r3, r3, #7
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	db0b      	blt.n	8002e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4906      	ldr	r1, [pc, #24]	; (8002e48 <__NVIC_EnableIRQ+0x34>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2001      	movs	r0, #1
 8002e36:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	; (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	; (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
         );
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	; 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff4f 	bl	8002db0 <__NVIC_SetPriorityGrouping>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
 8002f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff64 	bl	8002df8 <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ffb2 	bl	8002ea0 <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff81 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff57 	bl	8002e14 <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b08b      	sub	sp, #44	; 0x2c
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f82:	e169      	b.n	8003258 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f84:	2201      	movs	r2, #1
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f040 8158 	bne.w	8003252 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4a9a      	ldr	r2, [pc, #616]	; (8003210 <HAL_GPIO_Init+0x2a0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d05e      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fac:	4a98      	ldr	r2, [pc, #608]	; (8003210 <HAL_GPIO_Init+0x2a0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d875      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fb2:	4a98      	ldr	r2, [pc, #608]	; (8003214 <HAL_GPIO_Init+0x2a4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d058      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fb8:	4a96      	ldr	r2, [pc, #600]	; (8003214 <HAL_GPIO_Init+0x2a4>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d86f      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fbe:	4a96      	ldr	r2, [pc, #600]	; (8003218 <HAL_GPIO_Init+0x2a8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d052      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fc4:	4a94      	ldr	r2, [pc, #592]	; (8003218 <HAL_GPIO_Init+0x2a8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d869      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fca:	4a94      	ldr	r2, [pc, #592]	; (800321c <HAL_GPIO_Init+0x2ac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d04c      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fd0:	4a92      	ldr	r2, [pc, #584]	; (800321c <HAL_GPIO_Init+0x2ac>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d863      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fd6:	4a92      	ldr	r2, [pc, #584]	; (8003220 <HAL_GPIO_Init+0x2b0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d046      	beq.n	800306a <HAL_GPIO_Init+0xfa>
 8002fdc:	4a90      	ldr	r2, [pc, #576]	; (8003220 <HAL_GPIO_Init+0x2b0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d85d      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fe2:	2b12      	cmp	r3, #18
 8002fe4:	d82a      	bhi.n	800303c <HAL_GPIO_Init+0xcc>
 8002fe6:	2b12      	cmp	r3, #18
 8002fe8:	d859      	bhi.n	800309e <HAL_GPIO_Init+0x12e>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <HAL_GPIO_Init+0x80>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	0800306b 	.word	0x0800306b
 8002ff4:	08003045 	.word	0x08003045
 8002ff8:	08003057 	.word	0x08003057
 8002ffc:	08003099 	.word	0x08003099
 8003000:	0800309f 	.word	0x0800309f
 8003004:	0800309f 	.word	0x0800309f
 8003008:	0800309f 	.word	0x0800309f
 800300c:	0800309f 	.word	0x0800309f
 8003010:	0800309f 	.word	0x0800309f
 8003014:	0800309f 	.word	0x0800309f
 8003018:	0800309f 	.word	0x0800309f
 800301c:	0800309f 	.word	0x0800309f
 8003020:	0800309f 	.word	0x0800309f
 8003024:	0800309f 	.word	0x0800309f
 8003028:	0800309f 	.word	0x0800309f
 800302c:	0800309f 	.word	0x0800309f
 8003030:	0800309f 	.word	0x0800309f
 8003034:	0800304d 	.word	0x0800304d
 8003038:	08003061 	.word	0x08003061
 800303c:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_GPIO_Init+0x2b4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003042:	e02c      	b.n	800309e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	623b      	str	r3, [r7, #32]
          break;
 800304a:	e029      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	3304      	adds	r3, #4
 8003052:	623b      	str	r3, [r7, #32]
          break;
 8003054:	e024      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	3308      	adds	r3, #8
 800305c:	623b      	str	r3, [r7, #32]
          break;
 800305e:	e01f      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	330c      	adds	r3, #12
 8003066:	623b      	str	r3, [r7, #32]
          break;
 8003068:	e01a      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003072:	2304      	movs	r3, #4
 8003074:	623b      	str	r3, [r7, #32]
          break;
 8003076:	e013      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003080:	2308      	movs	r3, #8
 8003082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	611a      	str	r2, [r3, #16]
          break;
 800308a:	e009      	b.n	80030a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800308c:	2308      	movs	r3, #8
 800308e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	615a      	str	r2, [r3, #20]
          break;
 8003096:	e003      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003098:	2300      	movs	r3, #0
 800309a:	623b      	str	r3, [r7, #32]
          break;
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_Init+0x130>
          break;
 800309e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2bff      	cmp	r3, #255	; 0xff
 80030a4:	d801      	bhi.n	80030aa <HAL_GPIO_Init+0x13a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	e001      	b.n	80030ae <HAL_GPIO_Init+0x13e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2bff      	cmp	r3, #255	; 0xff
 80030b4:	d802      	bhi.n	80030bc <HAL_GPIO_Init+0x14c>
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	e002      	b.n	80030c2 <HAL_GPIO_Init+0x152>
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	3b08      	subs	r3, #8
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	210f      	movs	r1, #15
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	401a      	ands	r2, r3
 80030d4:	6a39      	ldr	r1, [r7, #32]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	431a      	orrs	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80b1 	beq.w	8003252 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030f0:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <HAL_GPIO_Init+0x2b8>)
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	4a4c      	ldr	r2, [pc, #304]	; (8003228 <HAL_GPIO_Init+0x2b8>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6193      	str	r3, [r2, #24]
 80030fc:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <HAL_GPIO_Init+0x2b8>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003108:	4a48      	ldr	r2, [pc, #288]	; (800322c <HAL_GPIO_Init+0x2bc>)
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003114:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	220f      	movs	r2, #15
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4013      	ands	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <HAL_GPIO_Init+0x2c0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_GPIO_Init+0x1ec>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3f      	ldr	r2, [pc, #252]	; (8003234 <HAL_GPIO_Init+0x2c4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00d      	beq.n	8003158 <HAL_GPIO_Init+0x1e8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3e      	ldr	r2, [pc, #248]	; (8003238 <HAL_GPIO_Init+0x2c8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d007      	beq.n	8003154 <HAL_GPIO_Init+0x1e4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3d      	ldr	r2, [pc, #244]	; (800323c <HAL_GPIO_Init+0x2cc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d101      	bne.n	8003150 <HAL_GPIO_Init+0x1e0>
 800314c:	2303      	movs	r3, #3
 800314e:	e006      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003150:	2304      	movs	r3, #4
 8003152:	e004      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003154:	2302      	movs	r3, #2
 8003156:	e002      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_GPIO_Init+0x1ee>
 800315c:	2300      	movs	r3, #0
 800315e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003160:	f002 0203 	and.w	r2, r2, #3
 8003164:	0092      	lsls	r2, r2, #2
 8003166:	4093      	lsls	r3, r2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800316e:	492f      	ldr	r1, [pc, #188]	; (800322c <HAL_GPIO_Init+0x2bc>)
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3302      	adds	r3, #2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d006      	beq.n	8003196 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003188:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	492c      	ldr	r1, [pc, #176]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003196:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	43db      	mvns	r3, r3
 800319e:	4928      	ldr	r1, [pc, #160]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031b0:	4b23      	ldr	r3, [pc, #140]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	4922      	ldr	r1, [pc, #136]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031be:	4b20      	ldr	r3, [pc, #128]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	491e      	ldr	r1, [pc, #120]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4918      	ldr	r1, [pc, #96]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031e6:	4b16      	ldr	r3, [pc, #88]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4914      	ldr	r1, [pc, #80]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d021      	beq.n	8003244 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <HAL_GPIO_Init+0x2d0>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e021      	b.n	8003252 <HAL_GPIO_Init+0x2e2>
 800320e:	bf00      	nop
 8003210:	10320000 	.word	0x10320000
 8003214:	10310000 	.word	0x10310000
 8003218:	10220000 	.word	0x10220000
 800321c:	10210000 	.word	0x10210000
 8003220:	10120000 	.word	0x10120000
 8003224:	10110000 	.word	0x10110000
 8003228:	40021000 	.word	0x40021000
 800322c:	40010000 	.word	0x40010000
 8003230:	40010800 	.word	0x40010800
 8003234:	40010c00 	.word	0x40010c00
 8003238:	40011000 	.word	0x40011000
 800323c:	40011400 	.word	0x40011400
 8003240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_GPIO_Init+0x304>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	43db      	mvns	r3, r3
 800324c:	4909      	ldr	r1, [pc, #36]	; (8003274 <HAL_GPIO_Init+0x304>)
 800324e:	4013      	ands	r3, r2
 8003250:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	3301      	adds	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	fa22 f303 	lsr.w	r3, r2, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f ae8e 	bne.w	8002f84 <HAL_GPIO_Init+0x14>
  }
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	372c      	adds	r7, #44	; 0x2c
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40010400 	.word	0x40010400

08003278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	e001      	b.n	800329a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]
 80032b2:	4613      	mov	r3, r2
 80032b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b6:	787b      	ldrb	r3, [r7, #1]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032bc:	887a      	ldrh	r2, [r7, #2]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032c2:	e003      	b.n	80032cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	041a      	lsls	r2, r3, #16
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	611a      	str	r2, [r3, #16]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
	...

080032d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e12b      	b.n	8003542 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe ff56 	bl	80021b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2224      	movs	r2, #36	; 0x24
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800332a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800333a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800333c:	f001 f960 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8003340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4a81      	ldr	r2, [pc, #516]	; (800354c <HAL_I2C_Init+0x274>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d807      	bhi.n	800335c <HAL_I2C_Init+0x84>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a80      	ldr	r2, [pc, #512]	; (8003550 <HAL_I2C_Init+0x278>)
 8003350:	4293      	cmp	r3, r2
 8003352:	bf94      	ite	ls
 8003354:	2301      	movls	r3, #1
 8003356:	2300      	movhi	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	e006      	b.n	800336a <HAL_I2C_Init+0x92>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a7d      	ldr	r2, [pc, #500]	; (8003554 <HAL_I2C_Init+0x27c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	bf94      	ite	ls
 8003364:	2301      	movls	r3, #1
 8003366:	2300      	movhi	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0e7      	b.n	8003542 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4a78      	ldr	r2, [pc, #480]	; (8003558 <HAL_I2C_Init+0x280>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	0c9b      	lsrs	r3, r3, #18
 800337c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a6a      	ldr	r2, [pc, #424]	; (800354c <HAL_I2C_Init+0x274>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d802      	bhi.n	80033ac <HAL_I2C_Init+0xd4>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3301      	adds	r3, #1
 80033aa:	e009      	b.n	80033c0 <HAL_I2C_Init+0xe8>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	4a69      	ldr	r2, [pc, #420]	; (800355c <HAL_I2C_Init+0x284>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	099b      	lsrs	r3, r3, #6
 80033be:	3301      	adds	r3, #1
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	495c      	ldr	r1, [pc, #368]	; (800354c <HAL_I2C_Init+0x274>)
 80033dc:	428b      	cmp	r3, r1
 80033de:	d819      	bhi.n	8003414 <HAL_I2C_Init+0x13c>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e59      	subs	r1, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ee:	1c59      	adds	r1, r3, #1
 80033f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033f4:	400b      	ands	r3, r1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_I2C_Init+0x138>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e59      	subs	r1, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fbb1 f3f3 	udiv	r3, r1, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340e:	e051      	b.n	80034b4 <HAL_I2C_Init+0x1dc>
 8003410:	2304      	movs	r3, #4
 8003412:	e04f      	b.n	80034b4 <HAL_I2C_Init+0x1dc>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d111      	bne.n	8003440 <HAL_I2C_Init+0x168>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1e58      	subs	r0, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	440b      	add	r3, r1
 800342a:	fbb0 f3f3 	udiv	r3, r0, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf0c      	ite	eq
 8003438:	2301      	moveq	r3, #1
 800343a:	2300      	movne	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e012      	b.n	8003466 <HAL_I2C_Init+0x18e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1e58      	subs	r0, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	0099      	lsls	r1, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	fbb0 f3f3 	udiv	r3, r0, r3
 8003456:	3301      	adds	r3, #1
 8003458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Init+0x196>
 800346a:	2301      	movs	r3, #1
 800346c:	e022      	b.n	80034b4 <HAL_I2C_Init+0x1dc>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10e      	bne.n	8003494 <HAL_I2C_Init+0x1bc>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1e58      	subs	r0, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6859      	ldr	r1, [r3, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	440b      	add	r3, r1
 8003484:	fbb0 f3f3 	udiv	r3, r0, r3
 8003488:	3301      	adds	r3, #1
 800348a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003492:	e00f      	b.n	80034b4 <HAL_I2C_Init+0x1dc>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1e58      	subs	r0, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	0099      	lsls	r1, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	6809      	ldr	r1, [r1, #0]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6911      	ldr	r1, [r2, #16]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68d2      	ldr	r2, [r2, #12]
 80034ee:	4311      	orrs	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	000186a0 	.word	0x000186a0
 8003550:	001e847f 	.word	0x001e847f
 8003554:	003d08ff 	.word	0x003d08ff
 8003558:	431bde83 	.word	0x431bde83
 800355c:	10624dd3 	.word	0x10624dd3

08003560 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	461a      	mov	r2, r3
 800356c:	460b      	mov	r3, r1
 800356e:	817b      	strh	r3, [r7, #10]
 8003570:	4613      	mov	r3, r2
 8003572:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7fe ff96 	bl	80024a4 <HAL_GetTick>
 8003578:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b20      	cmp	r3, #32
 8003584:	f040 80e0 	bne.w	8003748 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2319      	movs	r3, #25
 800358e:	2201      	movs	r2, #1
 8003590:	4970      	ldr	r1, [pc, #448]	; (8003754 <HAL_I2C_Master_Transmit+0x1f4>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fa92 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800359e:	2302      	movs	r3, #2
 80035a0:	e0d3      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_I2C_Master_Transmit+0x50>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e0cc      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d007      	beq.n	80035d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0201 	orr.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2221      	movs	r2, #33	; 0x21
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2210      	movs	r2, #16
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	893a      	ldrh	r2, [r7, #8]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_I2C_Master_Transmit+0x1f8>)
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003618:	8979      	ldrh	r1, [r7, #10]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	6a3a      	ldr	r2, [r7, #32]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f9ca 	bl	80039b8 <I2C_MasterRequestWrite>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e08d      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003644:	e066      	b.n	8003714 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6a39      	ldr	r1, [r7, #32]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fb50 	bl	8003cf0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00d      	beq.n	8003672 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	2b04      	cmp	r3, #4
 800365c:	d107      	bne.n	800366e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06b      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_I2C_Master_Transmit+0x188>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6a39      	ldr	r1, [r7, #32]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fb47 	bl	8003d80 <I2C_WaitOnBTFFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d107      	bne.n	8003710 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800370e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e01a      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	2b00      	cmp	r3, #0
 800371a:	d194      	bne.n	8003646 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000

0800375c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	460b      	mov	r3, r1
 800376a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7fe fe9a 	bl	80024a4 <HAL_GetTick>
 8003770:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b20      	cmp	r3, #32
 8003780:	f040 8111 	bne.w	80039a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2319      	movs	r3, #25
 800378a:	2201      	movs	r2, #1
 800378c:	4988      	ldr	r1, [pc, #544]	; (80039b0 <HAL_I2C_IsDeviceReady+0x254>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f994 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	e104      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_I2C_IsDeviceReady+0x50>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e0fd      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x24c>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d007      	beq.n	80037d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0201 	orr.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2224      	movs	r2, #36	; 0x24
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a70      	ldr	r2, [pc, #448]	; (80039b4 <HAL_I2C_IsDeviceReady+0x258>)
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003804:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2200      	movs	r2, #0
 800380e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f952 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382c:	d103      	bne.n	8003836 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0b6      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800383a:	897b      	ldrh	r3, [r7, #10]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003848:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800384a:	f7fe fe2b 	bl	80024a4 <HAL_GetTick>
 800384e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b02      	cmp	r3, #2
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003874:	bf0c      	ite	eq
 8003876:	2301      	moveq	r3, #1
 8003878:	2300      	movne	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800387e:	e025      	b.n	80038cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7fe fe10 	bl	80024a4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <HAL_I2C_IsDeviceReady+0x13a>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	22a0      	movs	r2, #160	; 0xa0
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2ba0      	cmp	r3, #160	; 0xa0
 80038d6:	d005      	beq.n	80038e4 <HAL_I2C_IsDeviceReady+0x188>
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_I2C_IsDeviceReady+0x188>
 80038de:	7dbb      	ldrb	r3, [r7, #22]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0cd      	beq.n	8003880 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d129      	bne.n	800394e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003908:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	2319      	movs	r3, #25
 8003926:	2201      	movs	r2, #1
 8003928:	4921      	ldr	r1, [pc, #132]	; (80039b0 <HAL_I2C_IsDeviceReady+0x254>)
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f8c6 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e036      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e02c      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003966:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2319      	movs	r3, #25
 800396e:	2201      	movs	r2, #1
 8003970:	490f      	ldr	r1, [pc, #60]	; (80039b0 <HAL_I2C_IsDeviceReady+0x254>)
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f8a2 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e012      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	3301      	adds	r3, #1
 8003986:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	429a      	cmp	r2, r3
 800398e:	f4ff af32 	bcc.w	80037f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039a6:	2302      	movs	r3, #2
  }
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	00100002 	.word	0x00100002
 80039b4:	ffff0000 	.word	0xffff0000

080039b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	460b      	mov	r3, r1
 80039c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d006      	beq.n	80039e2 <I2C_MasterRequestWrite+0x2a>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d003      	beq.n	80039e2 <I2C_MasterRequestWrite+0x2a>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e0:	d108      	bne.n	80039f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e00b      	b.n	8003a0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	2b12      	cmp	r3, #18
 80039fa:	d107      	bne.n	8003a0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f84f 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a32:	d103      	bne.n	8003a3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e035      	b.n	8003aac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a48:	d108      	bne.n	8003a5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a4a:	897b      	ldrh	r3, [r7, #10]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a58:	611a      	str	r2, [r3, #16]
 8003a5a:	e01b      	b.n	8003a94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a5c:	897b      	ldrh	r3, [r7, #10]
 8003a5e:	11db      	asrs	r3, r3, #7
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0306 	and.w	r3, r3, #6
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f063 030f 	orn	r3, r3, #15
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	490e      	ldr	r1, [pc, #56]	; (8003ab4 <I2C_MasterRequestWrite+0xfc>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f898 	bl	8003bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e010      	b.n	8003aac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a8a:	897b      	ldrh	r3, [r7, #10]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4907      	ldr	r1, [pc, #28]	; (8003ab8 <I2C_MasterRequestWrite+0x100>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f888 	bl	8003bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	00010008 	.word	0x00010008
 8003ab8:	00010002 	.word	0x00010002

08003abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003acc:	e048      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d044      	beq.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe fce5 	bl	80024a4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d139      	bne.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10d      	bne.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	43da      	mvns	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4013      	ands	r3, r2
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf0c      	ite	eq
 8003b08:	2301      	moveq	r3, #1
 8003b0a:	2300      	movne	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	e00c      	b.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	43da      	mvns	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d116      	bne.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e023      	b.n	8003ba8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	0c1b      	lsrs	r3, r3, #16
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d10d      	bne.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	43da      	mvns	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4013      	ands	r3, r2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	e00c      	b.n	8003ba0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	43da      	mvns	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d093      	beq.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bbe:	e071      	b.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d123      	bne.n	8003c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f043 0204 	orr.w	r2, r3, #4
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e067      	b.n	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d041      	beq.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fe fc40 	bl	80024a4 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d136      	bne.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10c      	bne.n	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	43da      	mvns	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bf14      	ite	ne
 8003c52:	2301      	movne	r3, #1
 8003c54:	2300      	moveq	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	e00b      	b.n	8003c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	43da      	mvns	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4013      	ands	r3, r2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e021      	b.n	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	0c1b      	lsrs	r3, r3, #16
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10c      	bne.n	8003cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	e00b      	b.n	8003ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f47f af6d 	bne.w	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cfc:	e034      	b.n	8003d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f886 	bl	8003e10 <I2C_IsAcknowledgeFailed>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e034      	b.n	8003d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d028      	beq.n	8003d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d16:	f7fe fbc5 	bl	80024a4 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11d      	bne.n	8003d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d016      	beq.n	8003d68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e007      	b.n	8003d78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d1c3      	bne.n	8003cfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8c:	e034      	b.n	8003df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f83e 	bl	8003e10 <I2C_IsAcknowledgeFailed>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e034      	b.n	8003e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d028      	beq.n	8003df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da6:	f7fe fb7d 	bl	80024a4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d11d      	bne.n	8003df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d016      	beq.n	8003df8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e007      	b.n	8003e08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d1c3      	bne.n	8003d8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d11b      	bne.n	8003e60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e272      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8087 	beq.w	8003f9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e8c:	4b92      	ldr	r3, [pc, #584]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d00c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e98:	4b8f      	ldr	r3, [pc, #572]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d112      	bne.n	8003eca <HAL_RCC_OscConfig+0x5e>
 8003ea4:	4b8c      	ldr	r3, [pc, #560]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb0:	d10b      	bne.n	8003eca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb2:	4b89      	ldr	r3, [pc, #548]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d06c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x12c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d168      	bne.n	8003f98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e24c      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x76>
 8003ed4:	4b80      	ldr	r3, [pc, #512]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a7f      	ldr	r2, [pc, #508]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	e02e      	b.n	8003f40 <HAL_RCC_OscConfig+0xd4>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x98>
 8003eea:	4b7b      	ldr	r3, [pc, #492]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7a      	ldr	r2, [pc, #488]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b78      	ldr	r3, [pc, #480]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a77      	ldr	r2, [pc, #476]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e01d      	b.n	8003f40 <HAL_RCC_OscConfig+0xd4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0xbc>
 8003f0e:	4b72      	ldr	r3, [pc, #456]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a71      	ldr	r2, [pc, #452]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b6f      	ldr	r3, [pc, #444]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6e      	ldr	r2, [pc, #440]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e00b      	b.n	8003f40 <HAL_RCC_OscConfig+0xd4>
 8003f28:	4b6b      	ldr	r3, [pc, #428]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a6a      	ldr	r2, [pc, #424]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b68      	ldr	r3, [pc, #416]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a67      	ldr	r2, [pc, #412]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d013      	beq.n	8003f70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fe faac 	bl	80024a4 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fe faa8 	bl	80024a4 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e200      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b5d      	ldr	r3, [pc, #372]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0xe4>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fe fa98 	bl	80024a4 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fe fa94 	bl	80024a4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e1ec      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x10c>
 8003f96:	e000      	b.n	8003f9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d063      	beq.n	800406e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fa6:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003fb2:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x18c>
 8003fbe:	4b46      	ldr	r3, [pc, #280]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d116      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fca:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x176>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e1c0      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe2:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4939      	ldr	r1, [pc, #228]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff6:	e03a      	b.n	800406e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004000:	4b36      	ldr	r3, [pc, #216]	; (80040dc <HAL_RCC_OscConfig+0x270>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fe fa4d 	bl	80024a4 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400e:	f7fe fa49 	bl	80024a4 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e1a1      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4927      	ldr	r1, [pc, #156]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]
 8004040:	e015      	b.n	800406e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004042:	4b26      	ldr	r3, [pc, #152]	; (80040dc <HAL_RCC_OscConfig+0x270>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fe fa2c 	bl	80024a4 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004050:	f7fe fa28 	bl	80024a4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e180      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03a      	beq.n	80040f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d019      	beq.n	80040b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004088:	f7fe fa0c 	bl	80024a4 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004090:	f7fe fa08 	bl	80024a4 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e160      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a2:	4b0d      	ldr	r3, [pc, #52]	; (80040d8 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040ae:	2001      	movs	r0, #1
 80040b0:	f000 fafe 	bl	80046b0 <RCC_Delay>
 80040b4:	e01c      	b.n	80040f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <HAL_RCC_OscConfig+0x274>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040bc:	f7fe f9f2 	bl	80024a4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c2:	e00f      	b.n	80040e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c4:	f7fe f9ee 	bl	80024a4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d908      	bls.n	80040e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e146      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
 80040d6:	bf00      	nop
 80040d8:	40021000 	.word	0x40021000
 80040dc:	42420000 	.word	0x42420000
 80040e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	4b92      	ldr	r3, [pc, #584]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e9      	bne.n	80040c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a6 	beq.w	800424a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004102:	4b8b      	ldr	r3, [pc, #556]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10d      	bne.n	800412a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	4b88      	ldr	r3, [pc, #544]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	4a87      	ldr	r2, [pc, #540]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	61d3      	str	r3, [r2, #28]
 800411a:	4b85      	ldr	r3, [pc, #532]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	4b82      	ldr	r3, [pc, #520]	; (8004334 <HAL_RCC_OscConfig+0x4c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d118      	bne.n	8004168 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004136:	4b7f      	ldr	r3, [pc, #508]	; (8004334 <HAL_RCC_OscConfig+0x4c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a7e      	ldr	r2, [pc, #504]	; (8004334 <HAL_RCC_OscConfig+0x4c8>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004142:	f7fe f9af 	bl	80024a4 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414a:	f7fe f9ab 	bl	80024a4 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b64      	cmp	r3, #100	; 0x64
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e103      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	4b75      	ldr	r3, [pc, #468]	; (8004334 <HAL_RCC_OscConfig+0x4c8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d106      	bne.n	800417e <HAL_RCC_OscConfig+0x312>
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	4a6e      	ldr	r2, [pc, #440]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6213      	str	r3, [r2, #32]
 800417c:	e02d      	b.n	80041da <HAL_RCC_OscConfig+0x36e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x334>
 8004186:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a69      	ldr	r2, [pc, #420]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	4b67      	ldr	r3, [pc, #412]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4a66      	ldr	r2, [pc, #408]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004198:	f023 0304 	bic.w	r3, r3, #4
 800419c:	6213      	str	r3, [r2, #32]
 800419e:	e01c      	b.n	80041da <HAL_RCC_OscConfig+0x36e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b05      	cmp	r3, #5
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCC_OscConfig+0x356>
 80041a8:	4b61      	ldr	r3, [pc, #388]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a60      	ldr	r2, [pc, #384]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	f043 0304 	orr.w	r3, r3, #4
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	4b5e      	ldr	r3, [pc, #376]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	4a5d      	ldr	r2, [pc, #372]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6213      	str	r3, [r2, #32]
 80041c0:	e00b      	b.n	80041da <HAL_RCC_OscConfig+0x36e>
 80041c2:	4b5b      	ldr	r3, [pc, #364]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a5a      	ldr	r2, [pc, #360]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	6213      	str	r3, [r2, #32]
 80041ce:	4b58      	ldr	r3, [pc, #352]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a57      	ldr	r2, [pc, #348]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d015      	beq.n	800420e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fe f95f 	bl	80024a4 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fe f95b 	bl	80024a4 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e0b1      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004200:	4b4b      	ldr	r3, [pc, #300]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ee      	beq.n	80041ea <HAL_RCC_OscConfig+0x37e>
 800420c:	e014      	b.n	8004238 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420e:	f7fe f949 	bl	80024a4 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f7fe f945 	bl	80024a4 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e09b      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422c:	4b40      	ldr	r3, [pc, #256]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ee      	bne.n	8004216 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	4b3c      	ldr	r3, [pc, #240]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a3b      	ldr	r2, [pc, #236]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004248:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 8087 	beq.w	8004362 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004254:	4b36      	ldr	r3, [pc, #216]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	2b08      	cmp	r3, #8
 800425e:	d061      	beq.n	8004324 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d146      	bne.n	80042f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004268:	4b33      	ldr	r3, [pc, #204]	; (8004338 <HAL_RCC_OscConfig+0x4cc>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fe f919 	bl	80024a4 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004276:	f7fe f915 	bl	80024a4 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e06d      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004288:	4b29      	ldr	r3, [pc, #164]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f0      	bne.n	8004276 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d108      	bne.n	80042b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800429e:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	4921      	ldr	r1, [pc, #132]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042b0:	4b1f      	ldr	r3, [pc, #124]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a19      	ldr	r1, [r3, #32]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	430b      	orrs	r3, r1
 80042c2:	491b      	ldr	r1, [pc, #108]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c8:	4b1b      	ldr	r3, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ce:	f7fe f8e9 	bl	80024a4 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d6:	f7fe f8e5 	bl	80024a4 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e03d      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x46a>
 80042f4:	e035      	b.n	8004362 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <HAL_RCC_OscConfig+0x4cc>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe f8d2 	bl	80024a4 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004304:	f7fe f8ce 	bl	80024a4 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e026      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x498>
 8004322:	e01e      	b.n	8004362 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e019      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
 8004330:	40021000 	.word	0x40021000
 8004334:	40007000 	.word	0x40007000
 8004338:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_OscConfig+0x500>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	429a      	cmp	r2, r3
 800434e:	d106      	bne.n	800435e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d001      	beq.n	8004362 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000

08004370 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0d0      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004384:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d910      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b67      	ldr	r3, [pc, #412]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 0207 	bic.w	r2, r3, #7
 800439a:	4965      	ldr	r1, [pc, #404]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b63      	ldr	r3, [pc, #396]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b8      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e4:	4b53      	ldr	r3, [pc, #332]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f0:	4b50      	ldr	r3, [pc, #320]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	494d      	ldr	r1, [pc, #308]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d040      	beq.n	8004490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b47      	ldr	r3, [pc, #284]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d115      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e07f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442e:	4b41      	ldr	r3, [pc, #260]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e073      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443e:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e06b      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800444e:	4b39      	ldr	r3, [pc, #228]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f023 0203 	bic.w	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4936      	ldr	r1, [pc, #216]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004460:	f7fe f820 	bl	80024a4 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	e00a      	b.n	800447e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004468:	f7fe f81c 	bl	80024a4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e053      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 020c 	and.w	r2, r3, #12
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	429a      	cmp	r2, r3
 800448e:	d1eb      	bne.n	8004468 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d210      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 0207 	bic.w	r2, r3, #7
 80044a6:	4922      	ldr	r1, [pc, #136]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCC_ClockConfig+0x1c0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e032      	b.n	8004526 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4916      	ldr	r1, [pc, #88]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044fe:	f000 f821 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	490a      	ldr	r1, [pc, #40]	; (8004538 <HAL_RCC_ClockConfig+0x1c8>)
 8004510:	5ccb      	ldrb	r3, [r1, r3]
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <HAL_RCC_ClockConfig+0x1cc>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_RCC_ClockConfig+0x1d0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fece 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40022000 	.word	0x40022000
 8004534:	40021000 	.word	0x40021000
 8004538:	08009c24 	.word	0x08009c24
 800453c:	20000008 	.word	0x20000008
 8004540:	2000000c 	.word	0x2000000c

08004544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800455e:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d002      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x30>
 800456e:	2b08      	cmp	r3, #8
 8004570:	d003      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x36>
 8004572:	e027      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCC_GetSysClockFreq+0x98>)
 8004576:	613b      	str	r3, [r7, #16]
      break;
 8004578:	e027      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	0c9b      	lsrs	r3, r3, #18
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004584:	5cd3      	ldrb	r3, [r2, r3]
 8004586:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d010      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004592:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	0c5b      	lsrs	r3, r3, #17
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <HAL_RCC_GetSysClockFreq+0x98>)
 80045a6:	fb03 f202 	mul.w	r2, r3, r2
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e004      	b.n	80045be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045b8:	fb02 f303 	mul.w	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	613b      	str	r3, [r7, #16]
      break;
 80045c2:	e002      	b.n	80045ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetSysClockFreq+0x98>)
 80045c6:	613b      	str	r3, [r7, #16]
      break;
 80045c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ca:	693b      	ldr	r3, [r7, #16]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	007a1200 	.word	0x007a1200
 80045e0:	08009c3c 	.word	0x08009c3c
 80045e4:	08009c4c 	.word	0x08009c4c
 80045e8:	003d0900 	.word	0x003d0900

080045ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f0:	4b02      	ldr	r3, [pc, #8]	; (80045fc <HAL_RCC_GetHCLKFreq+0x10>)
 80045f2:	681b      	ldr	r3, [r3, #0]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	20000008 	.word	0x20000008

08004600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004604:	f7ff fff2 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40021000 	.word	0x40021000
 8004624:	08009c34 	.word	0x08009c34

08004628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800462c:	f7ff ffde 	bl	80045ec <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	0adb      	lsrs	r3, r3, #11
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	; (800464c <HAL_RCC_GetPCLK2Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	08009c34 	.word	0x08009c34

08004650 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	220f      	movs	r2, #15
 800465e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_RCC_GetClockConfig+0x58>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 0203 	and.w	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800466c:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <HAL_RCC_GetClockConfig+0x58>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_RCC_GetClockConfig+0x58>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_RCC_GetClockConfig+0x58>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	08db      	lsrs	r3, r3, #3
 800468a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <HAL_RCC_GetClockConfig+0x5c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0207 	and.w	r2, r3, #7
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40022000 	.word	0x40022000

080046b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <RCC_Delay+0x34>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <RCC_Delay+0x38>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	0a5b      	lsrs	r3, r3, #9
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	fb02 f303 	mul.w	r3, r2, r3
 80046ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046cc:	bf00      	nop
  }
  while (Delay --);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1e5a      	subs	r2, r3, #1
 80046d2:	60fa      	str	r2, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f9      	bne.n	80046cc <RCC_Delay+0x1c>
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	20000008 	.word	0x20000008
 80046e8:	10624dd3 	.word	0x10624dd3

080046ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d07d      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004708:	2300      	movs	r3, #0
 800470a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470c:	4b4f      	ldr	r3, [pc, #316]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10d      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004718:	4b4c      	ldr	r3, [pc, #304]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4a4b      	ldr	r2, [pc, #300]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004722:	61d3      	str	r3, [r2, #28]
 8004724:	4b49      	ldr	r3, [pc, #292]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004730:	2301      	movs	r3, #1
 8004732:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	4b46      	ldr	r3, [pc, #280]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d118      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004740:	4b43      	ldr	r3, [pc, #268]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a42      	ldr	r2, [pc, #264]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474c:	f7fd feaa 	bl	80024a4 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004752:	e008      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004754:	f7fd fea6 	bl	80024a4 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e06d      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004766:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d02e      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	429a      	cmp	r2, r3
 800478e:	d027      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004790:	4b2e      	ldr	r3, [pc, #184]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004798:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800479c:	2201      	movs	r2, #1
 800479e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a0:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047a6:	4a29      	ldr	r2, [pc, #164]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d014      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fd fe75 	bl	80024a4 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fd fe71 	bl	80024a4 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e036      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ee      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4917      	ldr	r1, [pc, #92]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d105      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004802:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	490b      	ldr	r1, [pc, #44]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	d008      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	4904      	ldr	r1, [pc, #16]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
 8004850:	40007000 	.word	0x40007000
 8004854:	42420440 	.word	0x42420440

08004858 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	2300      	movs	r3, #0
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	2300      	movs	r3, #0
 8004872:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b10      	cmp	r3, #16
 8004878:	d00a      	beq.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b10      	cmp	r3, #16
 800487e:	f200 808a 	bhi.w	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d045      	beq.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d075      	beq.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800488e:	e082      	b.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004890:	4b46      	ldr	r3, [pc, #280]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004896:	4b45      	ldr	r3, [pc, #276]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d07b      	beq.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	0c9b      	lsrs	r3, r3, #18
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	4a41      	ldr	r2, [pc, #260]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
 80048ae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d015      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ba:	4b3c      	ldr	r3, [pc, #240]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	0c5b      	lsrs	r3, r3, #17
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80048c6:	5cd3      	ldrb	r3, [r2, r3]
 80048c8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00d      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80048d4:	4a38      	ldr	r2, [pc, #224]	; (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e004      	b.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4a34      	ldr	r2, [pc, #208]	; (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80048f0:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fc:	d102      	bne.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	61bb      	str	r3, [r7, #24]
      break;
 8004902:	e04a      	b.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	61bb      	str	r3, [r7, #24]
      break;
 8004912:	e042      	b.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004924:	d108      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	e01f      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004942:	d109      	bne.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004944:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004950:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	e00f      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004962:	d11c      	bne.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d016      	beq.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004970:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004974:	61bb      	str	r3, [r7, #24]
      break;
 8004976:	e012      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004978:	e011      	b.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800497a:	f7ff fe55 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 800497e:	4602      	mov	r2, r0
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	0b9b      	lsrs	r3, r3, #14
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	61bb      	str	r3, [r7, #24]
      break;
 8004994:	e004      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800499e:	bf00      	nop
    }
  }
  return (frequency);
 80049a0:	69bb      	ldr	r3, [r7, #24]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	08009c50 	.word	0x08009c50
 80049b4:	08009c60 	.word	0x08009c60
 80049b8:	007a1200 	.word	0x007a1200
 80049bc:	003d0900 	.word	0x003d0900
 80049c0:	aaaaaaab 	.word	0xaaaaaaab

080049c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e076      	b.n	8004ac4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e6:	d009      	beq.n	80049fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	61da      	str	r2, [r3, #28]
 80049ee:	e005      	b.n	80049fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd fc08 	bl	800222c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	ea42 0103 	orr.w	r1, r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	0c1a      	lsrs	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f002 0204 	and.w	r2, r2, #4
 8004aa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_SPI_Transmit+0x22>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e12d      	b.n	8004d4a <HAL_SPI_Transmit+0x27e>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004af6:	f7fd fcd5 	bl	80024a4 <HAL_GetTick>
 8004afa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d002      	beq.n	8004b12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b10:	e116      	b.n	8004d40 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_SPI_Transmit+0x52>
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b22:	e10d      	b.n	8004d40 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2203      	movs	r2, #3
 8004b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	88fa      	ldrh	r2, [r7, #6]
 8004b42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6a:	d10f      	bne.n	8004b8c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d007      	beq.n	8004baa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb2:	d14f      	bne.n	8004c54 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <HAL_SPI_Transmit+0xf6>
 8004bbc:	8afb      	ldrh	r3, [r7, #22]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d142      	bne.n	8004c48 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	881a      	ldrh	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004be6:	e02f      	b.n	8004c48 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d112      	bne.n	8004c1c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	881a      	ldrh	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	1c9a      	adds	r2, r3, #2
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c1a:	e015      	b.n	8004c48 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c1c:	f7fd fc42 	bl	80024a4 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d803      	bhi.n	8004c34 <HAL_SPI_Transmit+0x168>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d102      	bne.n	8004c3a <HAL_SPI_Transmit+0x16e>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c46:	e07b      	b.n	8004d40 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1ca      	bne.n	8004be8 <HAL_SPI_Transmit+0x11c>
 8004c52:	e050      	b.n	8004cf6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <HAL_SPI_Transmit+0x196>
 8004c5c:	8afb      	ldrh	r3, [r7, #22]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d144      	bne.n	8004cec <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c88:	e030      	b.n	8004cec <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d113      	bne.n	8004cc0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	330c      	adds	r3, #12
 8004ca2:	7812      	ldrb	r2, [r2, #0]
 8004ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cbe:	e015      	b.n	8004cec <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc0:	f7fd fbf0 	bl	80024a4 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d803      	bhi.n	8004cd8 <HAL_SPI_Transmit+0x20c>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d102      	bne.n	8004cde <HAL_SPI_Transmit+0x212>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004cea:	e029      	b.n	8004d40 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1c9      	bne.n	8004c8a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 fbcc 	bl	8005498 <SPI_EndRxTxTransaction>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	77fb      	strb	r3, [r7, #31]
 8004d36:	e003      	b.n	8004d40 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b088      	sub	sp, #32
 8004d56:	af02      	add	r7, sp, #8
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	603b      	str	r3, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
 8004d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d76:	e0fb      	b.n	8004f70 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d80:	d112      	bne.n	8004da8 <HAL_SPI_Receive+0x56>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10e      	bne.n	8004da8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f8ef 	bl	8004f82 <HAL_SPI_TransmitReceive>
 8004da4:	4603      	mov	r3, r0
 8004da6:	e0e8      	b.n	8004f7a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_SPI_Receive+0x64>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e0e1      	b.n	8004f7a <HAL_SPI_Receive+0x228>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dbe:	f7fd fb71 	bl	80024a4 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Receive+0x7e>
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dd4:	e0cc      	b.n	8004f70 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	88fa      	ldrh	r2, [r7, #6]
 8004dee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	d10f      	bne.n	8004e3e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d007      	beq.n	8004e5c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d16a      	bne.n	8004f3a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e64:	e032      	b.n	8004ecc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d115      	bne.n	8004ea0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f103 020c 	add.w	r2, r3, #12
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	b2d2      	uxtb	r2, r2
 8004e84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e9e:	e015      	b.n	8004ecc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ea0:	f7fd fb00 	bl	80024a4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d803      	bhi.n	8004eb8 <HAL_SPI_Receive+0x166>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d102      	bne.n	8004ebe <HAL_SPI_Receive+0x16c>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004eca:	e051      	b.n	8004f70 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1c7      	bne.n	8004e66 <HAL_SPI_Receive+0x114>
 8004ed6:	e035      	b.n	8004f44 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d113      	bne.n	8004f0e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	b292      	uxth	r2, r2
 8004ef2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	1c9a      	adds	r2, r3, #2
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f0c:	e015      	b.n	8004f3a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f0e:	f7fd fac9 	bl	80024a4 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d803      	bhi.n	8004f26 <HAL_SPI_Receive+0x1d4>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d102      	bne.n	8004f2c <HAL_SPI_Receive+0x1da>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f38:	e01a      	b.n	8004f70 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1c9      	bne.n	8004ed8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fa53 	bl	80053f4 <SPI_EndRxTransaction>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	75fb      	strb	r3, [r7, #23]
 8004f66:	e003      	b.n	8004f70 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b08c      	sub	sp, #48	; 0x30
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f90:	2301      	movs	r3, #1
 8004f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x26>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e198      	b.n	80052da <HAL_SPI_TransmitReceive+0x358>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb0:	f7fd fa78 	bl	80024a4 <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fc6:	887b      	ldrh	r3, [r7, #2]
 8004fc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d00f      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0x70>
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd8:	d107      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d103      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x68>
 8004fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d003      	beq.n	8004ff2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
 8004fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ff0:	e16d      	b.n	80052ce <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_SPI_TransmitReceive+0x82>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_TransmitReceive+0x82>
 8004ffe:	887b      	ldrh	r3, [r7, #2]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800500a:	e160      	b.n	80052ce <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b04      	cmp	r3, #4
 8005016:	d003      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2205      	movs	r2, #5
 800501c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	887a      	ldrh	r2, [r7, #2]
 8005036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	887a      	ldrh	r2, [r7, #2]
 8005042:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	887a      	ldrh	r2, [r7, #2]
 8005048:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d007      	beq.n	8005074 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005072:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507c:	d17c      	bne.n	8005178 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_SPI_TransmitReceive+0x10a>
 8005086:	8b7b      	ldrh	r3, [r7, #26]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d16a      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005090:	881a      	ldrh	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b0:	e057      	b.n	8005162 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d11b      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x176>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x176>
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d113      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b01      	cmp	r3, #1
 8005104:	d119      	bne.n	800513a <HAL_SPI_TransmitReceive+0x1b8>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d014      	beq.n	800513a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	b292      	uxth	r2, r2
 800511c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005136:	2301      	movs	r3, #1
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800513a:	f7fd f9b3 	bl	80024a4 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005146:	429a      	cmp	r2, r3
 8005148:	d80b      	bhi.n	8005162 <HAL_SPI_TransmitReceive+0x1e0>
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d007      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005160:	e0b5      	b.n	80052ce <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1a2      	bne.n	80050b2 <HAL_SPI_TransmitReceive+0x130>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d19d      	bne.n	80050b2 <HAL_SPI_TransmitReceive+0x130>
 8005176:	e080      	b.n	800527a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_SPI_TransmitReceive+0x204>
 8005180:	8b7b      	ldrh	r3, [r7, #26]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d16f      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ac:	e05b      	b.n	8005266 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d11c      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x274>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d017      	beq.n	80051f6 <HAL_SPI_TransmitReceive+0x274>
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d114      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b01      	cmp	r3, #1
 8005202:	d119      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x2b6>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d014      	beq.n	8005238 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005234:	2301      	movs	r3, #1
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005238:	f7fd f934 	bl	80024a4 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005244:	429a      	cmp	r2, r3
 8005246:	d803      	bhi.n	8005250 <HAL_SPI_TransmitReceive+0x2ce>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d102      	bne.n	8005256 <HAL_SPI_TransmitReceive+0x2d4>
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d107      	bne.n	8005266 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005264:	e033      	b.n	80052ce <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d19e      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x22c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d199      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800527a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f90a 	bl	8005498 <SPI_EndRxTxTransaction>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d006      	beq.n	8005298 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005296:	e01a      	b.n	80052ce <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c4:	e003      	b.n	80052ce <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3730      	adds	r7, #48	; 0x30
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052f4:	f7fd f8d6 	bl	80024a4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	4413      	add	r3, r2
 8005302:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005304:	f7fd f8ce 	bl	80024a4 <HAL_GetTick>
 8005308:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800530a:	4b39      	ldr	r3, [pc, #228]	; (80053f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	015b      	lsls	r3, r3, #5
 8005310:	0d1b      	lsrs	r3, r3, #20
 8005312:	69fa      	ldr	r2, [r7, #28]
 8005314:	fb02 f303 	mul.w	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800531a:	e054      	b.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d050      	beq.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005324:	f7fd f8be 	bl	80024a4 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	429a      	cmp	r2, r3
 8005332:	d902      	bls.n	800533a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d13d      	bne.n	80053b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d111      	bne.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535c:	d004      	beq.n	8005368 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005366:	d107      	bne.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005380:	d10f      	bne.n	80053a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e017      	b.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4013      	ands	r3, r2
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	bf0c      	ite	eq
 80053d6:	2301      	moveq	r3, #1
 80053d8:	2300      	movne	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	79fb      	ldrb	r3, [r7, #7]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d19b      	bne.n	800531c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000008 	.word	0x20000008

080053f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005408:	d111      	bne.n	800542e <SPI_EndRxTransaction+0x3a>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005412:	d004      	beq.n	800541e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d107      	bne.n	800542e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005436:	d117      	bne.n	8005468 <SPI_EndRxTransaction+0x74>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005440:	d112      	bne.n	8005468 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	2101      	movs	r1, #1
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff ff49 	bl	80052e4 <SPI_WaitFlagStateUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01a      	beq.n	800548e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e013      	b.n	8005490 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff ff36 	bl	80052e4 <SPI_WaitFlagStateUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e000      	b.n	8005490 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f7ff ff18 	bl	80052e4 <SPI_WaitFlagStateUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f043 0220 	orr.w	r2, r3, #32
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e000      	b.n	80054cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e041      	b.n	800556a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f839 	bl	8005572 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 f9b4 	bl	8005880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d001      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e03a      	b.n	8005612 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a18      	ldr	r2, [pc, #96]	; (800561c <HAL_TIM_Base_Start_IT+0x98>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00e      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x58>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d009      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x58>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <HAL_TIM_Base_Start_IT+0x9c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d004      	beq.n	80055dc <HAL_TIM_Base_Start_IT+0x58>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a13      	ldr	r2, [pc, #76]	; (8005624 <HAL_TIM_Base_Start_IT+0xa0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d111      	bne.n	8005600 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b06      	cmp	r3, #6
 80055ec:	d010      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	e007      	b.n	8005610 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800

08005628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d122      	bne.n	8005684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0202 	mvn.w	r2, #2
 8005654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8ed 	bl	800584a <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8e0 	bl	8005838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8ef 	bl	800585c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b04      	cmp	r3, #4
 8005690:	d122      	bne.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d11b      	bne.n	80056d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0204 	mvn.w	r2, #4
 80056a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f8c3 	bl	800584a <HAL_TIM_IC_CaptureCallback>
 80056c4:	e005      	b.n	80056d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f8b6 	bl	8005838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8c5 	bl	800585c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0308 	and.w	r3, r3, #8
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d122      	bne.n	800572c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d11b      	bne.n	800572c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0208 	mvn.w	r2, #8
 80056fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2204      	movs	r2, #4
 8005702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f899 	bl	800584a <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f88c 	bl	8005838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f89b 	bl	800585c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b10      	cmp	r3, #16
 8005738:	d122      	bne.n	8005780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b10      	cmp	r3, #16
 8005746:	d11b      	bne.n	8005780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0210 	mvn.w	r2, #16
 8005750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2208      	movs	r2, #8
 8005756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f86f 	bl	800584a <HAL_TIM_IC_CaptureCallback>
 800576c:	e005      	b.n	800577a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f862 	bl	8005838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f871 	bl	800585c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b01      	cmp	r3, #1
 800578c:	d10e      	bne.n	80057ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d107      	bne.n	80057ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0201 	mvn.w	r2, #1
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fb fb38 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c4:	2b80      	cmp	r3, #128	; 0x80
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8bf 	bl	8005956 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d10e      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	d107      	bne.n	8005804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f835 	bl	800586e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b20      	cmp	r3, #32
 8005810:	d10e      	bne.n	8005830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b20      	cmp	r3, #32
 800581e:	d107      	bne.n	8005830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0220 	mvn.w	r2, #32
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f88a 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a29      	ldr	r2, [pc, #164]	; (8005938 <TIM_Base_SetConfig+0xb8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_Base_SetConfig+0x30>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589e:	d007      	beq.n	80058b0 <TIM_Base_SetConfig+0x30>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a26      	ldr	r2, [pc, #152]	; (800593c <TIM_Base_SetConfig+0xbc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0x30>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a25      	ldr	r2, [pc, #148]	; (8005940 <TIM_Base_SetConfig+0xc0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <TIM_Base_SetConfig+0xb8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0x62>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0x62>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a19      	ldr	r2, [pc, #100]	; (800593c <TIM_Base_SetConfig+0xbc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0x62>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a18      	ldr	r2, [pc, #96]	; (8005940 <TIM_Base_SetConfig+0xc0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a07      	ldr	r2, [pc, #28]	; (8005938 <TIM_Base_SetConfig+0xb8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bc80      	pop	{r7}
 8005954:	4770      	bx	lr

08005956 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800596e:	f3ef 8305 	mrs	r3, IPSR
 8005972:	60bb      	str	r3, [r7, #8]
  return(result);
 8005974:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10f      	bne.n	800599a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597a:	f3ef 8310 	mrs	r3, PRIMASK
 800597e:	607b      	str	r3, [r7, #4]
  return(result);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <osKernelInitialize+0x32>
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <osKernelInitialize+0x60>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d109      	bne.n	80059a2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800598e:	f3ef 8311 	mrs	r3, BASEPRI
 8005992:	603b      	str	r3, [r7, #0]
  return(result);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800599a:	f06f 0305 	mvn.w	r3, #5
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e00c      	b.n	80059bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <osKernelInitialize+0x60>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d105      	bne.n	80059b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <osKernelInitialize+0x60>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	e002      	b.n	80059bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059bc:	68fb      	ldr	r3, [r7, #12]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	20000650 	.word	0x20000650

080059cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d2:	f3ef 8305 	mrs	r3, IPSR
 80059d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80059d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10f      	bne.n	80059fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059de:	f3ef 8310 	mrs	r3, PRIMASK
 80059e2:	607b      	str	r3, [r7, #4]
  return(result);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d109      	bne.n	80059fe <osKernelStart+0x32>
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <osKernelStart+0x64>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d109      	bne.n	8005a06 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059f2:	f3ef 8311 	mrs	r3, BASEPRI
 80059f6:	603b      	str	r3, [r7, #0]
  return(result);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <osKernelStart+0x3a>
    stat = osErrorISR;
 80059fe:	f06f 0305 	mvn.w	r3, #5
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e00e      	b.n	8005a24 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <osKernelStart+0x64>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d107      	bne.n	8005a1e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005a0e:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <osKernelStart+0x64>)
 8005a10:	2202      	movs	r2, #2
 8005a12:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005a14:	f001 fe44 	bl	80076a0 <vTaskStartScheduler>
      stat = osOK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e002      	b.n	8005a24 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a24:	68fb      	ldr	r3, [r7, #12]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000650 	.word	0x20000650

08005a34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b092      	sub	sp, #72	; 0x48
 8005a38:	af04      	add	r7, sp, #16
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a44:	f3ef 8305 	mrs	r3, IPSR
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 8094 	bne.w	8005b7a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a52:	f3ef 8310 	mrs	r3, PRIMASK
 8005a56:	623b      	str	r3, [r7, #32]
  return(result);
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 808d 	bne.w	8005b7a <osThreadNew+0x146>
 8005a60:	4b48      	ldr	r3, [pc, #288]	; (8005b84 <osThreadNew+0x150>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d106      	bne.n	8005a76 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a68:	f3ef 8311 	mrs	r3, BASEPRI
 8005a6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f040 8082 	bne.w	8005b7a <osThreadNew+0x146>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d07e      	beq.n	8005b7a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005a80:	2318      	movs	r3, #24
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005a84:	2300      	movs	r3, #0
 8005a86:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005a88:	f107 031b 	add.w	r3, r7, #27
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d045      	beq.n	8005b26 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <osThreadNew+0x74>
        name = attr->name;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d008      	beq.n	8005ace <osThreadNew+0x9a>
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	2b38      	cmp	r3, #56	; 0x38
 8005ac0:	d805      	bhi.n	8005ace <osThreadNew+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <osThreadNew+0x9e>
        return (NULL);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e054      	b.n	8005b7c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <osThreadNew+0xd4>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b5b      	cmp	r3, #91	; 0x5b
 8005af0:	d90a      	bls.n	8005b08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d006      	beq.n	8005b08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <osThreadNew+0xd4>
        mem = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b06:	e010      	b.n	8005b2a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10c      	bne.n	8005b2a <osThreadNew+0xf6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d108      	bne.n	8005b2a <osThreadNew+0xf6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <osThreadNew+0xf6>
          mem = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b24:	e001      	b.n	8005b2a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d110      	bne.n	8005b52 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b38:	9202      	str	r2, [sp, #8]
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f001 fb60 	bl	800720c <xTaskCreateStatic>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e013      	b.n	8005b7a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d110      	bne.n	8005b7a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f001 fbaa 	bl	80072c4 <xTaskCreate>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <osThreadNew+0x146>
          hTask = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b7a:	697b      	ldr	r3, [r7, #20]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3738      	adds	r7, #56	; 0x38
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20000650 	.word	0x20000650

08005b88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b90:	f3ef 8305 	mrs	r3, IPSR
 8005b94:	613b      	str	r3, [r7, #16]
  return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10f      	bne.n	8005bbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <osDelay+0x34>
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <osDelay+0x58>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d109      	bne.n	8005bc4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <osDelay+0x3c>
    stat = osErrorISR;
 8005bbc:	f06f 0305 	mvn.w	r3, #5
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e007      	b.n	8005bd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fd32 	bl	8007638 <vTaskDelay>
    }
  }

  return (stat);
 8005bd4:	697b      	ldr	r3, [r7, #20]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000650 	.word	0x20000650

08005be4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf0:	f3ef 8305 	mrs	r3, IPSR
 8005bf4:	613b      	str	r3, [r7, #16]
  return(result);
 8005bf6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f040 8085 	bne.w	8005d08 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8005c02:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d17e      	bne.n	8005d08 <osMutexNew+0x124>
 8005c0a:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <osMutexNew+0x130>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d105      	bne.n	8005c1e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c12:	f3ef 8311 	mrs	r3, BASEPRI
 8005c16:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d174      	bne.n	8005d08 <osMutexNew+0x124>
    if (attr != NULL) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <osMutexNew+0x48>
      type = attr->attr_bits;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	623b      	str	r3, [r7, #32]
 8005c2a:	e001      	b.n	8005c30 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <osMutexNew+0x5c>
      rmtx = 1U;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	e001      	b.n	8005c44 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d15c      	bne.n	8005d08 <osMutexNew+0x124>
      mem = -1;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d015      	beq.n	8005c86 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d006      	beq.n	8005c70 <osMutexNew+0x8c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	2b4f      	cmp	r3, #79	; 0x4f
 8005c68:	d902      	bls.n	8005c70 <osMutexNew+0x8c>
          mem = 1;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e00c      	b.n	8005c8a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d108      	bne.n	8005c8a <osMutexNew+0xa6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <osMutexNew+0xa6>
            mem = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	e001      	b.n	8005c8a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d112      	bne.n	8005cb6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	2004      	movs	r0, #4
 8005c9e:	f000 fca9 	bl	80065f4 <xQueueCreateMutexStatic>
 8005ca2:	6278      	str	r0, [r7, #36]	; 0x24
 8005ca4:	e016      	b.n	8005cd4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	4619      	mov	r1, r3
 8005cac:	2001      	movs	r0, #1
 8005cae:	f000 fca1 	bl	80065f4 <xQueueCreateMutexStatic>
 8005cb2:	6278      	str	r0, [r7, #36]	; 0x24
 8005cb4:	e00e      	b.n	8005cd4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005cc2:	2004      	movs	r0, #4
 8005cc4:	f000 fc7e 	bl	80065c4 <xQueueCreateMutex>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24
 8005cca:	e003      	b.n	8005cd4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005ccc:	2001      	movs	r0, #1
 8005cce:	f000 fc79 	bl	80065c4 <xQueueCreateMutex>
 8005cd2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00c      	beq.n	8005cf4 <osMutexNew+0x110>
        if (attr != NULL) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <osMutexNew+0x104>
          name = attr->name;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e001      	b.n	8005cec <osMutexNew+0x108>
        } else {
          name = NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cf0:	f001 fa30 	bl	8007154 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d006      	beq.n	8005d08 <osMutexNew+0x124>
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3728      	adds	r7, #40	; 0x28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000650 	.word	0x20000650

08005d18 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f023 0301 	bic.w	r3, r3, #1
 8005d28:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d36:	f3ef 8305 	mrs	r3, IPSR
 8005d3a:	613b      	str	r3, [r7, #16]
  return(result);
 8005d3c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10f      	bne.n	8005d62 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d42:	f3ef 8310 	mrs	r3, PRIMASK
 8005d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <osMutexAcquire+0x4a>
 8005d4e:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <osMutexAcquire+0xb8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d109      	bne.n	8005d6a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d56:	f3ef 8311 	mrs	r3, BASEPRI
 8005d5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8005d62:	f06f 0305 	mvn.w	r3, #5
 8005d66:	61fb      	str	r3, [r7, #28]
 8005d68:	e02c      	b.n	8005dc4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d103      	bne.n	8005d78 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8005d70:	f06f 0303 	mvn.w	r3, #3
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	e025      	b.n	8005dc4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d011      	beq.n	8005da2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	69b8      	ldr	r0, [r7, #24]
 8005d82:	f000 fc86 	bl	8006692 <xQueueTakeMutexRecursive>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d01b      	beq.n	8005dc4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8005d92:	f06f 0301 	mvn.w	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	e014      	b.n	8005dc4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005d9a:	f06f 0302 	mvn.w	r3, #2
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e010      	b.n	8005dc4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	69b8      	ldr	r0, [r7, #24]
 8005da6:	f000 ff21 	bl	8006bec <xQueueSemaphoreTake>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d009      	beq.n	8005dc4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8005db6:	f06f 0301 	mvn.w	r3, #1
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	e002      	b.n	8005dc4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8005dbe:	f06f 0302 	mvn.w	r3, #2
 8005dc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005dc4:	69fb      	ldr	r3, [r7, #28]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000650 	.word	0x20000650

08005dd4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df0:	f3ef 8305 	mrs	r3, IPSR
 8005df4:	613b      	str	r3, [r7, #16]
  return(result);
 8005df6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10f      	bne.n	8005e1c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d109      	bne.n	8005e1c <osMutexRelease+0x48>
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <osMutexRelease+0x9c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d109      	bne.n	8005e24 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e10:	f3ef 8311 	mrs	r3, BASEPRI
 8005e14:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005e1c:	f06f 0305 	mvn.w	r3, #5
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e01f      	b.n	8005e64 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d103      	bne.n	8005e32 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8005e2a:	f06f 0303 	mvn.w	r3, #3
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e018      	b.n	8005e64 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005e38:	69b8      	ldr	r0, [r7, #24]
 8005e3a:	f000 fbf6 	bl	800662a <xQueueGiveMutexRecursive>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d00f      	beq.n	8005e64 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005e44:	f06f 0302 	mvn.w	r3, #2
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	e00b      	b.n	8005e64 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2100      	movs	r1, #0
 8005e52:	69b8      	ldr	r0, [r7, #24]
 8005e54:	f000 fc54 	bl	8006700 <xQueueGenericSend>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d002      	beq.n	8005e64 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005e5e:	f06f 0302 	mvn.w	r3, #2
 8005e62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005e64:	69fb      	ldr	r3, [r7, #28]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000650 	.word	0x20000650

08005e74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08c      	sub	sp, #48	; 0x30
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e84:	f3ef 8305 	mrs	r3, IPSR
 8005e88:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d16f      	bne.n	8005f70 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e90:	f3ef 8310 	mrs	r3, PRIMASK
 8005e94:	617b      	str	r3, [r7, #20]
  return(result);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d169      	bne.n	8005f70 <osMessageQueueNew+0xfc>
 8005e9c:	4b37      	ldr	r3, [pc, #220]	; (8005f7c <osMessageQueueNew+0x108>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d105      	bne.n	8005eb0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d15f      	bne.n	8005f70 <osMessageQueueNew+0xfc>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d05c      	beq.n	8005f70 <osMessageQueueNew+0xfc>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d059      	beq.n	8005f70 <osMessageQueueNew+0xfc>
    mem = -1;
 8005ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d029      	beq.n	8005f1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d012      	beq.n	8005ef6 <osMessageQueueNew+0x82>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	2b4f      	cmp	r3, #79	; 0x4f
 8005ed6:	d90e      	bls.n	8005ef6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	695a      	ldr	r2, [r3, #20]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d302      	bcc.n	8005ef6 <osMessageQueueNew+0x82>
        mem = 1;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	623b      	str	r3, [r7, #32]
 8005ef4:	e014      	b.n	8005f20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d110      	bne.n	8005f20 <osMessageQueueNew+0xac>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10c      	bne.n	8005f20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d108      	bne.n	8005f20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <osMessageQueueNew+0xac>
          mem = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	623b      	str	r3, [r7, #32]
 8005f1a:	e001      	b.n	8005f20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10b      	bne.n	8005f3e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2100      	movs	r1, #0
 8005f30:	9100      	str	r1, [sp, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 fa53 	bl	80063e0 <xQueueGenericCreateStatic>
 8005f3a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f3c:	e008      	b.n	8005f50 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d105      	bne.n	8005f50 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005f44:	2200      	movs	r2, #0
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fac0 	bl	80064ce <xQueueGenericCreate>
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00c      	beq.n	8005f70 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	e001      	b.n	8005f68 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f68:	69f9      	ldr	r1, [r7, #28]
 8005f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f6c:	f001 f8f2 	bl	8007154 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000650 	.word	0x20000650

08005f80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f98:	f3ef 8305 	mrs	r3, IPSR
 8005f9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10f      	bne.n	8005fc4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <osMessageQueuePut+0x44>
 8005fb0:	4b2b      	ldr	r3, [pc, #172]	; (8006060 <osMessageQueuePut+0xe0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d12e      	bne.n	8006016 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d028      	beq.n	8006016 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <osMessageQueuePut+0x56>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <osMessageQueuePut+0x56>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005fd6:	f06f 0303 	mvn.w	r3, #3
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fdc:	e039      	b.n	8006052 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005fe2:	f107 0210 	add.w	r2, r7, #16
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	68b9      	ldr	r1, [r7, #8]
 8005fea:	6a38      	ldr	r0, [r7, #32]
 8005fec:	f000 fc86 	bl	80068fc <xQueueGenericSendFromISR>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d003      	beq.n	8005ffe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005ff6:	f06f 0302 	mvn.w	r3, #2
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ffc:	e029      	b.n	8006052 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d026      	beq.n	8006052 <osMessageQueuePut+0xd2>
 8006004:	4b17      	ldr	r3, [pc, #92]	; (8006064 <osMessageQueuePut+0xe4>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006014:	e01d      	b.n	8006052 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <osMessageQueuePut+0xa2>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d103      	bne.n	800602a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006022:	f06f 0303 	mvn.w	r3, #3
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
 8006028:	e014      	b.n	8006054 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800602a:	2300      	movs	r3, #0
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	6a38      	ldr	r0, [r7, #32]
 8006032:	f000 fb65 	bl	8006700 <xQueueGenericSend>
 8006036:	4603      	mov	r3, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d00b      	beq.n	8006054 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006042:	f06f 0301 	mvn.w	r3, #1
 8006046:	627b      	str	r3, [r7, #36]	; 0x24
 8006048:	e004      	b.n	8006054 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800604a:	f06f 0302 	mvn.w	r3, #2
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
 8006050:	e000      	b.n	8006054 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006052:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006056:	4618      	mov	r0, r3
 8006058:	3728      	adds	r7, #40	; 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000650 	.word	0x20000650
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800607a:	2300      	movs	r3, #0
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800607e:	f3ef 8305 	mrs	r3, IPSR
 8006082:	61fb      	str	r3, [r7, #28]
  return(result);
 8006084:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10f      	bne.n	80060aa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608a:	f3ef 8310 	mrs	r3, PRIMASK
 800608e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <osMessageQueueGet+0x42>
 8006096:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <osMessageQueueGet+0xdc>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d12e      	bne.n	80060fc <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800609e:	f3ef 8311 	mrs	r3, BASEPRI
 80060a2:	617b      	str	r3, [r7, #20]
  return(result);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d028      	beq.n	80060fc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <osMessageQueueGet+0x54>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <osMessageQueueGet+0x54>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80060bc:	f06f 0303 	mvn.w	r3, #3
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060c2:	e038      	b.n	8006136 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80060c8:	f107 0310 	add.w	r3, r7, #16
 80060cc:	461a      	mov	r2, r3
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	6a38      	ldr	r0, [r7, #32]
 80060d2:	f000 fe97 	bl	8006e04 <xQueueReceiveFromISR>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d003      	beq.n	80060e4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80060dc:	f06f 0302 	mvn.w	r3, #2
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060e2:	e028      	b.n	8006136 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d025      	beq.n	8006136 <osMessageQueueGet+0xce>
 80060ea:	4b17      	ldr	r3, [pc, #92]	; (8006148 <osMessageQueueGet+0xe0>)
 80060ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060fa:	e01c      	b.n	8006136 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <osMessageQueueGet+0xa0>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006108:	f06f 0303 	mvn.w	r3, #3
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
 800610e:	e013      	b.n	8006138 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	6a38      	ldr	r0, [r7, #32]
 8006116:	f000 fc89 	bl	8006a2c <xQueueReceive>
 800611a:	4603      	mov	r3, r0
 800611c:	2b01      	cmp	r3, #1
 800611e:	d00b      	beq.n	8006138 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006126:	f06f 0301 	mvn.w	r3, #1
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
 800612c:	e004      	b.n	8006138 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800612e:	f06f 0302 	mvn.w	r3, #2
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
 8006134:	e000      	b.n	8006138 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006136:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800613a:	4618      	mov	r0, r3
 800613c:	3728      	adds	r7, #40	; 0x28
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000650 	.word	0x20000650
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a06      	ldr	r2, [pc, #24]	; (8006174 <vApplicationGetIdleTaskMemory+0x28>)
 800615c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	4a05      	ldr	r2, [pc, #20]	; (8006178 <vApplicationGetIdleTaskMemory+0x2c>)
 8006162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2280      	movs	r2, #128	; 0x80
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr
 8006174:	20000654 	.word	0x20000654
 8006178:	200006b0 	.word	0x200006b0

0800617c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800618c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4a06      	ldr	r2, [pc, #24]	; (80061ac <vApplicationGetTimerTaskMemory+0x30>)
 8006192:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800619a:	601a      	str	r2, [r3, #0]
}
 800619c:	bf00      	nop
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	200008b0 	.word	0x200008b0
 80061ac:	2000090c 	.word	0x2000090c

080061b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f103 0208 	add.w	r2, r3, #8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f04f 32ff 	mov.w	r2, #4294967295
 80061c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f103 0208 	add.w	r2, r3, #8
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f103 0208 	add.w	r2, r3, #8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bc80      	pop	{r7}
 80061ec:	4770      	bx	lr

080061ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr

08006206 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	601a      	str	r2, [r3, #0]
}
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d103      	bne.n	800626c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	e00c      	b.n	8006286 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3308      	adds	r3, #8
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e002      	b.n	800627a <vListInsert+0x2e>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	d2f6      	bcs.n	8006274 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6892      	ldr	r2, [r2, #8]
 80062d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6852      	ldr	r2, [r2, #4]
 80062dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d103      	bne.n	80062f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1e5a      	subs	r2, r3, #1
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr
	...

08006310 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800633a:	f002 fbf7 	bl	8008b2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800634a:	fb01 f303 	mul.w	r3, r1, r3
 800634e:	441a      	add	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636a:	3b01      	subs	r3, #1
 800636c:	68f9      	ldr	r1, [r7, #12]
 800636e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	441a      	add	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	22ff      	movs	r2, #255	; 0xff
 800637e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	22ff      	movs	r2, #255	; 0xff
 8006386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d114      	bne.n	80063ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01a      	beq.n	80063ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3310      	adds	r3, #16
 800639c:	4618      	mov	r0, r3
 800639e:	f001 fc09 	bl	8007bb4 <xTaskRemoveFromEventList>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063a8:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <xQueueGenericReset+0xcc>)
 80063aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	e009      	b.n	80063ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3310      	adds	r3, #16
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff fef6 	bl	80061b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3324      	adds	r3, #36	; 0x24
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fef1 	bl	80061b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063ce:	f002 fbdd 	bl	8008b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063d2:	2301      	movs	r3, #1
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	; 0x38
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006422:	bf00      	nop
 8006424:	e7fe      	b.n	8006424 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <xQueueGenericCreateStatic+0x52>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <xQueueGenericCreateStatic+0x56>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <xQueueGenericCreateStatic+0x58>
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	623b      	str	r3, [r7, #32]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <xQueueGenericCreateStatic+0x7e>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <xQueueGenericCreateStatic+0x82>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <xQueueGenericCreateStatic+0x84>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61fb      	str	r3, [r7, #28]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800647e:	2350      	movs	r3, #80	; 0x50
 8006480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b50      	cmp	r3, #80	; 0x50
 8006486:	d00a      	beq.n	800649e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	61bb      	str	r3, [r7, #24]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00d      	beq.n	80064c4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f843 	bl	800654a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3730      	adds	r7, #48	; 0x30
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b08a      	sub	sp, #40	; 0x28
 80064d2:	af02      	add	r7, sp, #8
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	4613      	mov	r3, r2
 80064da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	613b      	str	r3, [r7, #16]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	e004      	b.n	800650e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	fb02 f303 	mul.w	r3, r2, r3
 800650c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	3350      	adds	r3, #80	; 0x50
 8006512:	4618      	mov	r0, r3
 8006514:	f002 fc0a 	bl	8008d2c <pvPortMalloc>
 8006518:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00f      	beq.n	8006540 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	3350      	adds	r3, #80	; 0x50
 8006524:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800652e:	79fa      	ldrb	r2, [r7, #7]
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 f805 	bl	800654a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006540:	69bb      	ldr	r3, [r7, #24]
	}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
 8006556:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e002      	b.n	800656c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006578:	2101      	movs	r1, #1
 800657a:	69b8      	ldr	r0, [r7, #24]
 800657c:	f7ff fec8 	bl	8006310 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	78fa      	ldrb	r2, [r7, #3]
 8006584:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00e      	beq.n	80065bc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80065b0:	2300      	movs	r3, #0
 80065b2:	2200      	movs	r2, #0
 80065b4:	2100      	movs	r1, #0
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8a2 	bl	8006700 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80065ce:	2301      	movs	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	461a      	mov	r2, r3
 80065da:	6939      	ldr	r1, [r7, #16]
 80065dc:	6978      	ldr	r0, [r7, #20]
 80065de:	f7ff ff76 	bl	80064ce <xQueueGenericCreate>
 80065e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ffd3 	bl	8006590 <prvInitialiseMutex>

		return pxNewQueue;
 80065ea:	68fb      	ldr	r3, [r7, #12]
	}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	4603      	mov	r3, r0
 80065fc:	6039      	str	r1, [r7, #0]
 80065fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006600:	2301      	movs	r3, #1
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2200      	movs	r2, #0
 8006610:	6939      	ldr	r1, [r7, #16]
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	f7ff fee4 	bl	80063e0 <xQueueGenericCreateStatic>
 8006618:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7ff ffb8 	bl	8006590 <prvInitialiseMutex>

		return pxNewQueue;
 8006620:	68fb      	ldr	r3, [r7, #12]
	}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800662a:	b590      	push	{r4, r7, lr}
 800662c:	b087      	sub	sp, #28
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60fb      	str	r3, [r7, #12]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	685c      	ldr	r4, [r3, #4]
 8006656:	f001 fc6f 	bl	8007f38 <xTaskGetCurrentTaskHandle>
 800665a:	4603      	mov	r3, r0
 800665c:	429c      	cmp	r4, r3
 800665e:	d111      	bne.n	8006684 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	1e5a      	subs	r2, r3, #1
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d105      	bne.n	800667e <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006672:	2300      	movs	r3, #0
 8006674:	2200      	movs	r2, #0
 8006676:	2100      	movs	r1, #0
 8006678:	6938      	ldr	r0, [r7, #16]
 800667a:	f000 f841 	bl	8006700 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800667e:	2301      	movs	r3, #1
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e001      	b.n	8006688 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006688:	697b      	ldr	r3, [r7, #20]
	}
 800668a:	4618      	mov	r0, r3
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	bd90      	pop	{r4, r7, pc}

08006692 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006692:	b590      	push	{r4, r7, lr}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60fb      	str	r3, [r7, #12]
}
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	685c      	ldr	r4, [r3, #4]
 80066c0:	f001 fc3a 	bl	8007f38 <xTaskGetCurrentTaskHandle>
 80066c4:	4603      	mov	r3, r0
 80066c6:	429c      	cmp	r4, r3
 80066c8:	d107      	bne.n	80066da <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80066d4:	2301      	movs	r3, #1
 80066d6:	617b      	str	r3, [r7, #20]
 80066d8:	e00c      	b.n	80066f4 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6938      	ldr	r0, [r7, #16]
 80066de:	f000 fa85 	bl	8006bec <xQueueSemaphoreTake>
 80066e2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80066f4:	697b      	ldr	r3, [r7, #20]
	}
 80066f6:	4618      	mov	r0, r3
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd90      	pop	{r4, r7, pc}
	...

08006700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08e      	sub	sp, #56	; 0x38
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800670e:	2300      	movs	r3, #0
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <xQueueGenericSend+0x32>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <xQueueGenericSend+0x40>
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <xQueueGenericSend+0x44>
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <xQueueGenericSend+0x46>
 8006744:	2300      	movs	r3, #0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <xQueueGenericSend+0x60>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d103      	bne.n	800676e <xQueueGenericSend+0x6e>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <xQueueGenericSend+0x72>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <xQueueGenericSend+0x74>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <xQueueGenericSend+0x8e>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	623b      	str	r3, [r7, #32]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800678e:	f001 fbe1 	bl	8007f54 <xTaskGetSchedulerState>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d102      	bne.n	800679e <xQueueGenericSend+0x9e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <xQueueGenericSend+0xa2>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <xQueueGenericSend+0xa4>
 80067a2:	2300      	movs	r3, #0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <xQueueGenericSend+0xbe>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	61fb      	str	r3, [r7, #28]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067be:	f002 f9b5 	bl	8008b2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d302      	bcc.n	80067d4 <xQueueGenericSend+0xd4>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d129      	bne.n	8006828 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067da:	f000 fbaa 	bl	8006f32 <prvCopyDataToQueue>
 80067de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d010      	beq.n	800680a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	3324      	adds	r3, #36	; 0x24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 f9e1 	bl	8007bb4 <xTaskRemoveFromEventList>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d013      	beq.n	8006820 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067f8:	4b3f      	ldr	r3, [pc, #252]	; (80068f8 <xQueueGenericSend+0x1f8>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	e00a      	b.n	8006820 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006810:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <xQueueGenericSend+0x1f8>)
 8006812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006820:	f002 f9b4 	bl	8008b8c <vPortExitCritical>
				return pdPASS;
 8006824:	2301      	movs	r3, #1
 8006826:	e063      	b.n	80068f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d103      	bne.n	8006836 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800682e:	f002 f9ad 	bl	8008b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006832:	2300      	movs	r3, #0
 8006834:	e05c      	b.n	80068f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800683c:	f107 0314 	add.w	r3, r7, #20
 8006840:	4618      	mov	r0, r3
 8006842:	f001 fa1b 	bl	8007c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006846:	2301      	movs	r3, #1
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800684a:	f002 f99f 	bl	8008b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800684e:	f000 ff8d 	bl	800776c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006852:	f002 f96b 	bl	8008b2c <vPortEnterCritical>
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800685c:	b25b      	sxtb	r3, r3
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d103      	bne.n	800686c <xQueueGenericSend+0x16c>
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006872:	b25b      	sxtb	r3, r3
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006878:	d103      	bne.n	8006882 <xQueueGenericSend+0x182>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006882:	f002 f983 	bl	8008b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006886:	1d3a      	adds	r2, r7, #4
 8006888:	f107 0314 	add.w	r3, r7, #20
 800688c:	4611      	mov	r1, r2
 800688e:	4618      	mov	r0, r3
 8006890:	f001 fa0a 	bl	8007ca8 <xTaskCheckForTimeOut>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d124      	bne.n	80068e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800689a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800689c:	f000 fc41 	bl	8007122 <prvIsQueueFull>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d018      	beq.n	80068d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	3310      	adds	r3, #16
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 f930 	bl	8007b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068b6:	f000 fbcc 	bl	8007052 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068ba:	f000 ff65 	bl	8007788 <xTaskResumeAll>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f47f af7c 	bne.w	80067be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80068c6:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <xQueueGenericSend+0x1f8>)
 80068c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	e772      	b.n	80067be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068da:	f000 fbba 	bl	8007052 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068de:	f000 ff53 	bl	8007788 <xTaskResumeAll>
 80068e2:	e76c      	b.n	80067be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e6:	f000 fbb4 	bl	8007052 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068ea:	f000 ff4d 	bl	8007788 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068ee:	2300      	movs	r3, #0
		}
	}
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3738      	adds	r7, #56	; 0x38
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08e      	sub	sp, #56	; 0x38
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d103      	bne.n	8006938 <xQueueGenericSendFromISR+0x3c>
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <xQueueGenericSendFromISR+0x40>
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <xQueueGenericSendFromISR+0x42>
 800693c:	2300      	movs	r3, #0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	623b      	str	r3, [r7, #32]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d103      	bne.n	8006966 <xQueueGenericSendFromISR+0x6a>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <xQueueGenericSendFromISR+0x6e>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <xQueueGenericSendFromISR+0x70>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	61fb      	str	r3, [r7, #28]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006986:	f002 f993 	bl	8008cb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800698a:	f3ef 8211 	mrs	r2, BASEPRI
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61ba      	str	r2, [r7, #24]
 80069a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d302      	bcc.n	80069b8 <xQueueGenericSendFromISR+0xbc>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d12c      	bne.n	8006a12 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c8:	f000 fab3 	bl	8006f32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d4:	d112      	bne.n	80069fc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d016      	beq.n	8006a0c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	3324      	adds	r3, #36	; 0x24
 80069e2:	4618      	mov	r0, r3
 80069e4:	f001 f8e6 	bl	8007bb4 <xTaskRemoveFromEventList>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00e      	beq.n	8006a0c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	e007      	b.n	8006a0c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a00:	3301      	adds	r3, #1
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	b25a      	sxtb	r2, r3
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a10:	e001      	b.n	8006a16 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3738      	adds	r7, #56	; 0x38
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08c      	sub	sp, #48	; 0x30
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10a      	bne.n	8006a5c <xQueueReceive+0x30>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	623b      	str	r3, [r7, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <xQueueReceive+0x3e>
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <xQueueReceive+0x42>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <xQueueReceive+0x44>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <xQueueReceive+0x5e>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	61fb      	str	r3, [r7, #28]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a8a:	f001 fa63 	bl	8007f54 <xTaskGetSchedulerState>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <xQueueReceive+0x6e>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <xQueueReceive+0x72>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <xQueueReceive+0x74>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <xQueueReceive+0x8e>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	61bb      	str	r3, [r7, #24]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aba:	f002 f837 	bl	8008b2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01f      	beq.n	8006b0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ace:	f000 fa9a 	bl	8007006 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	1e5a      	subs	r2, r3, #1
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00f      	beq.n	8006b02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	3310      	adds	r3, #16
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 f864 	bl	8007bb4 <xTaskRemoveFromEventList>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d007      	beq.n	8006b02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006af2:	4b3d      	ldr	r3, [pc, #244]	; (8006be8 <xQueueReceive+0x1bc>)
 8006af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b02:	f002 f843 	bl	8008b8c <vPortExitCritical>
				return pdPASS;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e069      	b.n	8006bde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b10:	f002 f83c 	bl	8008b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e062      	b.n	8006bde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b1e:	f107 0310 	add.w	r3, r7, #16
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 f8aa 	bl	8007c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b2c:	f002 f82e 	bl	8008b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b30:	f000 fe1c 	bl	800776c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b34:	f001 fffa 	bl	8008b2c <vPortEnterCritical>
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b3e:	b25b      	sxtb	r3, r3
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d103      	bne.n	8006b4e <xQueueReceive+0x122>
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b54:	b25b      	sxtb	r3, r3
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5a:	d103      	bne.n	8006b64 <xQueueReceive+0x138>
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b64:	f002 f812 	bl	8008b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b68:	1d3a      	adds	r2, r7, #4
 8006b6a:	f107 0310 	add.w	r3, r7, #16
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 f899 	bl	8007ca8 <xTaskCheckForTimeOut>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d123      	bne.n	8006bc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b7e:	f000 faba 	bl	80070f6 <prvIsQueueEmpty>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d017      	beq.n	8006bb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	3324      	adds	r3, #36	; 0x24
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 ffbf 	bl	8007b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b98:	f000 fa5b 	bl	8007052 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b9c:	f000 fdf4 	bl	8007788 <xTaskResumeAll>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d189      	bne.n	8006aba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ba6:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <xQueueReceive+0x1bc>)
 8006ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	e780      	b.n	8006aba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bba:	f000 fa4a 	bl	8007052 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bbe:	f000 fde3 	bl	8007788 <xTaskResumeAll>
 8006bc2:	e77a      	b.n	8006aba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bc6:	f000 fa44 	bl	8007052 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bca:	f000 fddd 	bl	8007788 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bd0:	f000 fa91 	bl	80070f6 <prvIsQueueEmpty>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f43f af6f 	beq.w	8006aba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3730      	adds	r7, #48	; 0x30
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08e      	sub	sp, #56	; 0x38
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	623b      	str	r3, [r7, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	61fb      	str	r3, [r7, #28]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c3c:	f001 f98a 	bl	8007f54 <xTaskGetSchedulerState>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <xQueueSemaphoreTake+0x60>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <xQueueSemaphoreTake+0x64>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e000      	b.n	8006c52 <xQueueSemaphoreTake+0x66>
 8006c50:	2300      	movs	r3, #0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	61bb      	str	r3, [r7, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c6c:	f001 ff5e 	bl	8008b2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d024      	beq.n	8006cc6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7e:	1e5a      	subs	r2, r3, #1
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d104      	bne.n	8006c96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006c8c:	f001 fae2 	bl	8008254 <pvTaskIncrementMutexHeldCount>
 8006c90:	4602      	mov	r2, r0
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00f      	beq.n	8006cbe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	3310      	adds	r3, #16
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 ff86 	bl	8007bb4 <xTaskRemoveFromEventList>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cae:	4b54      	ldr	r3, [pc, #336]	; (8006e00 <xQueueSemaphoreTake+0x214>)
 8006cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cbe:	f001 ff65 	bl	8008b8c <vPortExitCritical>
				return pdPASS;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e097      	b.n	8006df6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d111      	bne.n	8006cf0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	617b      	str	r3, [r7, #20]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ce8:	f001 ff50 	bl	8008b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cec:	2300      	movs	r3, #0
 8006cee:	e082      	b.n	8006df6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cf6:	f107 030c 	add.w	r3, r7, #12
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 ffbe 	bl	8007c7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d00:	2301      	movs	r3, #1
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d04:	f001 ff42 	bl	8008b8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d08:	f000 fd30 	bl	800776c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d0c:	f001 ff0e 	bl	8008b2c <vPortEnterCritical>
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d16:	b25b      	sxtb	r3, r3
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d103      	bne.n	8006d26 <xQueueSemaphoreTake+0x13a>
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d2c:	b25b      	sxtb	r3, r3
 8006d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d32:	d103      	bne.n	8006d3c <xQueueSemaphoreTake+0x150>
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d3c:	f001 ff26 	bl	8008b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d40:	463a      	mov	r2, r7
 8006d42:	f107 030c 	add.w	r3, r7, #12
 8006d46:	4611      	mov	r1, r2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 ffad 	bl	8007ca8 <xTaskCheckForTimeOut>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d132      	bne.n	8006dba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d56:	f000 f9ce 	bl	80070f6 <prvIsQueueEmpty>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d026      	beq.n	8006dae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006d68:	f001 fee0 	bl	8008b2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 f90d 	bl	8007f90 <xTaskPriorityInherit>
 8006d76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006d78:	f001 ff08 	bl	8008b8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	3324      	adds	r3, #36	; 0x24
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	4611      	mov	r1, r2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fec5 	bl	8007b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d8c:	f000 f961 	bl	8007052 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d90:	f000 fcfa 	bl	8007788 <xTaskResumeAll>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f47f af68 	bne.w	8006c6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006d9c:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <xQueueSemaphoreTake+0x214>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	e75e      	b.n	8006c6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006db0:	f000 f94f 	bl	8007052 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006db4:	f000 fce8 	bl	8007788 <xTaskResumeAll>
 8006db8:	e758      	b.n	8006c6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dbc:	f000 f949 	bl	8007052 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dc0:	f000 fce2 	bl	8007788 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dc6:	f000 f996 	bl	80070f6 <prvIsQueueEmpty>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f43f af4d 	beq.w	8006c6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00d      	beq.n	8006df4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006dd8:	f001 fea8 	bl	8008b2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dde:	f000 f891 	bl	8006f04 <prvGetDisinheritPriorityAfterTimeout>
 8006de2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 f9ac 	bl	8008148 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006df0:	f001 fecc 	bl	8008b8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006df4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3738      	adds	r7, #56	; 0x38
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	e000ed04 	.word	0xe000ed04

08006e04 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08e      	sub	sp, #56	; 0x38
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	623b      	str	r3, [r7, #32]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <xQueueReceiveFromISR+0x3a>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <xQueueReceiveFromISR+0x3e>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <xQueueReceiveFromISR+0x40>
 8006e42:	2300      	movs	r3, #0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	61fb      	str	r3, [r7, #28]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e5e:	f001 ff27 	bl	8008cb0 <vPortValidateInterruptPriority>
	__asm volatile
 8006e62:	f3ef 8211 	mrs	r2, BASEPRI
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	61ba      	str	r2, [r7, #24]
 8006e78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d02f      	beq.n	8006eea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e98:	f000 f8b5 	bl	8007006 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	1e5a      	subs	r2, r3, #1
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ea4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eac:	d112      	bne.n	8006ed4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d016      	beq.n	8006ee4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	3310      	adds	r3, #16
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fe7a 	bl	8007bb4 <xTaskRemoveFromEventList>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00e      	beq.n	8006ee4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	e007      	b.n	8006ee4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	b25a      	sxtb	r2, r3
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee8:	e001      	b.n	8006eee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	637b      	str	r3, [r7, #52]	; 0x34
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f383 8811 	msr	BASEPRI, r3
}
 8006ef8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3738      	adds	r7, #56	; 0x38
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d006      	beq.n	8006f22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	e001      	b.n	8006f26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f26:	68fb      	ldr	r3, [r7, #12]
	}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr

08006f32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10d      	bne.n	8006f6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d14d      	bne.n	8006ff4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 f885 	bl	800806c <xTaskPriorityDisinherit>
 8006f62:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	605a      	str	r2, [r3, #4]
 8006f6a:	e043      	b.n	8006ff4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d119      	bne.n	8006fa6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6898      	ldr	r0, [r3, #8]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	f002 f93d 	bl	80091fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	441a      	add	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d32b      	bcc.n	8006ff4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	609a      	str	r2, [r3, #8]
 8006fa4:	e026      	b.n	8006ff4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68d8      	ldr	r0, [r3, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	f002 f923 	bl	80091fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	425b      	negs	r3, r3
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d207      	bcs.n	8006fe2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	425b      	negs	r3, r3
 8006fdc:	441a      	add	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d105      	bne.n	8006ff4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ffc:	697b      	ldr	r3, [r7, #20]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	2b00      	cmp	r3, #0
 8007016:	d018      	beq.n	800704a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	441a      	add	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	429a      	cmp	r2, r3
 8007030:	d303      	bcc.n	800703a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68d9      	ldr	r1, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	461a      	mov	r2, r3
 8007044:	6838      	ldr	r0, [r7, #0]
 8007046:	f002 f8d9 	bl	80091fc <memcpy>
	}
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800705a:	f001 fd67 	bl	8008b2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007064:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007066:	e011      	b.n	800708c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3324      	adds	r3, #36	; 0x24
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fd9d 	bl	8007bb4 <xTaskRemoveFromEventList>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007080:	f000 fe74 	bl	8007d6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	3b01      	subs	r3, #1
 8007088:	b2db      	uxtb	r3, r3
 800708a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800708c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	dce9      	bgt.n	8007068 <prvUnlockQueue+0x16>
 8007094:	e000      	b.n	8007098 <prvUnlockQueue+0x46>
					break;
 8007096:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	22ff      	movs	r2, #255	; 0xff
 800709c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070a0:	f001 fd74 	bl	8008b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070a4:	f001 fd42 	bl	8008b2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070b0:	e011      	b.n	80070d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d012      	beq.n	80070e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3310      	adds	r3, #16
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fd78 	bl	8007bb4 <xTaskRemoveFromEventList>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070ca:	f000 fe4f 	bl	8007d6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	dce9      	bgt.n	80070b2 <prvUnlockQueue+0x60>
 80070de:	e000      	b.n	80070e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	22ff      	movs	r2, #255	; 0xff
 80070e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070ea:	f001 fd4f 	bl	8008b8c <vPortExitCritical>
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070fe:	f001 fd15 	bl	8008b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800710a:	2301      	movs	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	e001      	b.n	8007114 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007114:	f001 fd3a 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800712a:	f001 fcff 	bl	8008b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	429a      	cmp	r2, r3
 8007138:	d102      	bne.n	8007140 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800713a:	2301      	movs	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e001      	b.n	8007144 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007144:	f001 fd22 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 8007148:	68fb      	ldr	r3, [r7, #12]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e014      	b.n	800718e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007164:	4a0e      	ldr	r2, [pc, #56]	; (80071a0 <vQueueAddToRegistry+0x4c>)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10b      	bne.n	8007188 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007170:	490b      	ldr	r1, [pc, #44]	; (80071a0 <vQueueAddToRegistry+0x4c>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800717a:	4a09      	ldr	r2, [pc, #36]	; (80071a0 <vQueueAddToRegistry+0x4c>)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	4413      	add	r3, r2
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007186:	e006      	b.n	8007196 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3301      	adds	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b07      	cmp	r3, #7
 8007192:	d9e7      	bls.n	8007164 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr
 80071a0:	20000d0c 	.word	0x20000d0c

080071a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071b4:	f001 fcba 	bl	8008b2c <vPortEnterCritical>
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071be:	b25b      	sxtb	r3, r3
 80071c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c4:	d103      	bne.n	80071ce <vQueueWaitForMessageRestricted+0x2a>
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071da:	d103      	bne.n	80071e4 <vQueueWaitForMessageRestricted+0x40>
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071e4:	f001 fcd2 	bl	8008b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d106      	bne.n	80071fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	3324      	adds	r3, #36	; 0x24
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fcaf 	bl	8007b5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071fe:	6978      	ldr	r0, [r7, #20]
 8007200:	f7ff ff27 	bl	8007052 <prvUnlockQueue>
	}
 8007204:	bf00      	nop
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08e      	sub	sp, #56	; 0x38
 8007210:	af04      	add	r7, sp, #16
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800721a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10a      	bne.n	8007236 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	623b      	str	r3, [r7, #32]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <xTaskCreateStatic+0x46>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	61fb      	str	r3, [r7, #28]
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007252:	235c      	movs	r3, #92	; 0x5c
 8007254:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b5c      	cmp	r3, #92	; 0x5c
 800725a:	d00a      	beq.n	8007272 <xTaskCreateStatic+0x66>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	61bb      	str	r3, [r7, #24]
}
 800726e:	bf00      	nop
 8007270:	e7fe      	b.n	8007270 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01e      	beq.n	80072b6 <xTaskCreateStatic+0xaa>
 8007278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01b      	beq.n	80072b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007286:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007290:	2300      	movs	r3, #0
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	9302      	str	r3, [sp, #8]
 8007298:	f107 0314 	add.w	r3, r7, #20
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68b9      	ldr	r1, [r7, #8]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f850 	bl	800734e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072b0:	f000 f8d4 	bl	800745c <prvAddNewTaskToReadyList>
 80072b4:	e001      	b.n	80072ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072ba:	697b      	ldr	r3, [r7, #20]
	}
 80072bc:	4618      	mov	r0, r3
 80072be:	3728      	adds	r7, #40	; 0x28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08c      	sub	sp, #48	; 0x30
 80072c8:	af04      	add	r7, sp, #16
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	4613      	mov	r3, r2
 80072d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d4:	88fb      	ldrh	r3, [r7, #6]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fd27 	bl	8008d2c <pvPortMalloc>
 80072de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80072e6:	205c      	movs	r0, #92	; 0x5c
 80072e8:	f001 fd20 	bl	8008d2c <pvPortMalloc>
 80072ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
 80072fa:	e005      	b.n	8007308 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072fc:	6978      	ldr	r0, [r7, #20]
 80072fe:	f001 fdd9 	bl	8008eb4 <vPortFree>
 8007302:	e001      	b.n	8007308 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007304:	2300      	movs	r3, #0
 8007306:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d017      	beq.n	800733e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	2300      	movs	r3, #0
 800731a:	9303      	str	r3, [sp, #12]
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	9302      	str	r3, [sp, #8]
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f80e 	bl	800734e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007332:	69f8      	ldr	r0, [r7, #28]
 8007334:	f000 f892 	bl	800745c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007338:	2301      	movs	r3, #1
 800733a:	61bb      	str	r3, [r7, #24]
 800733c:	e002      	b.n	8007344 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800733e:	f04f 33ff 	mov.w	r3, #4294967295
 8007342:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007344:	69bb      	ldr	r3, [r7, #24]
	}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b088      	sub	sp, #32
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	607a      	str	r2, [r7, #4]
 800735a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	461a      	mov	r2, r3
 8007366:	21a5      	movs	r1, #165	; 0xa5
 8007368:	f001 ff14 	bl	8009194 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007376:	3b01      	subs	r3, #1
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f023 0307 	bic.w	r3, r3, #7
 8007384:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	617b      	str	r3, [r7, #20]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073a6:	2300      	movs	r3, #0
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	e012      	b.n	80073d2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	7819      	ldrb	r1, [r3, #0]
 80073b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	4413      	add	r3, r2
 80073ba:	3334      	adds	r3, #52	; 0x34
 80073bc:	460a      	mov	r2, r1
 80073be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	3301      	adds	r3, #1
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b0f      	cmp	r3, #15
 80073d6:	d9e9      	bls.n	80073ac <prvInitialiseNewTask+0x5e>
 80073d8:	e000      	b.n	80073dc <prvInitialiseNewTask+0x8e>
		{
			break;
 80073da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	2b37      	cmp	r3, #55	; 0x37
 80073e8:	d901      	bls.n	80073ee <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073ea:	2337      	movs	r3, #55	; 0x37
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2200      	movs	r2, #0
 80073fe:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	3304      	adds	r3, #4
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe fef2 	bl	80061ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	3318      	adds	r3, #24
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe feed 	bl	80061ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007418:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007428:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	2200      	movs	r2, #0
 800742e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	69b8      	ldr	r0, [r7, #24]
 800743e:	f001 fa83 	bl	8008948 <pxPortInitialiseStack>
 8007442:	4602      	mov	r2, r0
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007452:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007454:	bf00      	nop
 8007456:	3720      	adds	r7, #32
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007464:	f001 fb62 	bl	8008b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007468:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <prvAddNewTaskToReadyList+0xc4>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	4a2c      	ldr	r2, [pc, #176]	; (8007520 <prvAddNewTaskToReadyList+0xc4>)
 8007470:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007472:	4b2c      	ldr	r3, [pc, #176]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800747a:	4a2a      	ldr	r2, [pc, #168]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <prvAddNewTaskToReadyList+0xc4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d110      	bne.n	80074aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007488:	f000 fc94 	bl	8007db4 <prvInitialiseTaskLists>
 800748c:	e00d      	b.n	80074aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800748e:	4b26      	ldr	r3, [pc, #152]	; (8007528 <prvAddNewTaskToReadyList+0xcc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007496:	4b23      	ldr	r3, [pc, #140]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d802      	bhi.n	80074aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a4:	4a1f      	ldr	r2, [pc, #124]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074aa:	4b20      	ldr	r3, [pc, #128]	; (800752c <prvAddNewTaskToReadyList+0xd0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3301      	adds	r3, #1
 80074b0:	4a1e      	ldr	r2, [pc, #120]	; (800752c <prvAddNewTaskToReadyList+0xd0>)
 80074b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074b4:	4b1d      	ldr	r3, [pc, #116]	; (800752c <prvAddNewTaskToReadyList+0xd0>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	4b1b      	ldr	r3, [pc, #108]	; (8007530 <prvAddNewTaskToReadyList+0xd4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d903      	bls.n	80074d0 <prvAddNewTaskToReadyList+0x74>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a18      	ldr	r2, [pc, #96]	; (8007530 <prvAddNewTaskToReadyList+0xd4>)
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4a15      	ldr	r2, [pc, #84]	; (8007534 <prvAddNewTaskToReadyList+0xd8>)
 80074de:	441a      	add	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7fe fe8d 	bl	8006206 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074ec:	f001 fb4e 	bl	8008b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074f0:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <prvAddNewTaskToReadyList+0xcc>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074f8:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <prvAddNewTaskToReadyList+0xc8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	429a      	cmp	r2, r3
 8007504:	d207      	bcs.n	8007516 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007506:	4b0c      	ldr	r3, [pc, #48]	; (8007538 <prvAddNewTaskToReadyList+0xdc>)
 8007508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20001220 	.word	0x20001220
 8007524:	20000d4c 	.word	0x20000d4c
 8007528:	2000122c 	.word	0x2000122c
 800752c:	2000123c 	.word	0x2000123c
 8007530:	20001228 	.word	0x20001228
 8007534:	20000d50 	.word	0x20000d50
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007546:	2300      	movs	r3, #0
 8007548:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	617b      	str	r3, [r7, #20]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <vTaskDelayUntil+0x46>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	613b      	str	r3, [r7, #16]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007582:	4b2a      	ldr	r3, [pc, #168]	; (800762c <vTaskDelayUntil+0xf0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <vTaskDelayUntil+0x64>
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	60fb      	str	r3, [r7, #12]
}
 800759c:	bf00      	nop
 800759e:	e7fe      	b.n	800759e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80075a0:	f000 f8e4 	bl	800776c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80075a4:	4b22      	ldr	r3, [pc, #136]	; (8007630 <vTaskDelayUntil+0xf4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	4413      	add	r3, r2
 80075b2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6a3a      	ldr	r2, [r7, #32]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d20b      	bcs.n	80075d6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d211      	bcs.n	80075ec <vTaskDelayUntil+0xb0>
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d90d      	bls.n	80075ec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
 80075d4:	e00a      	b.n	80075ec <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d303      	bcc.n	80075e8 <vTaskDelayUntil+0xac>
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d901      	bls.n	80075ec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80075e8:	2301      	movs	r3, #1
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d006      	beq.n	8007606 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2100      	movs	r1, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fe3b 	bl	800827c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007606:	f000 f8bf 	bl	8007788 <xTaskResumeAll>
 800760a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d107      	bne.n	8007622 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007612:	4b08      	ldr	r3, [pc, #32]	; (8007634 <vTaskDelayUntil+0xf8>)
 8007614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007622:	bf00      	nop
 8007624:	3728      	adds	r7, #40	; 0x28
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20001248 	.word	0x20001248
 8007630:	20001224 	.word	0x20001224
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d017      	beq.n	800767a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800764a:	4b13      	ldr	r3, [pc, #76]	; (8007698 <vTaskDelay+0x60>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <vTaskDelay+0x30>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60bb      	str	r3, [r7, #8]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007668:	f000 f880 	bl	800776c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800766c:	2100      	movs	r1, #0
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fe04 	bl	800827c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007674:	f000 f888 	bl	8007788 <xTaskResumeAll>
 8007678:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d107      	bne.n	8007690 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007680:	4b06      	ldr	r3, [pc, #24]	; (800769c <vTaskDelay+0x64>)
 8007682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20001248 	.word	0x20001248
 800769c:	e000ed04 	.word	0xe000ed04

080076a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	; 0x28
 80076a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ae:	463a      	mov	r2, r7
 80076b0:	1d39      	adds	r1, r7, #4
 80076b2:	f107 0308 	add.w	r3, r7, #8
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fd48 	bl	800614c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	9202      	str	r2, [sp, #8]
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	2300      	movs	r3, #0
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	2300      	movs	r3, #0
 80076cc:	460a      	mov	r2, r1
 80076ce:	4921      	ldr	r1, [pc, #132]	; (8007754 <vTaskStartScheduler+0xb4>)
 80076d0:	4821      	ldr	r0, [pc, #132]	; (8007758 <vTaskStartScheduler+0xb8>)
 80076d2:	f7ff fd9b 	bl	800720c <xTaskCreateStatic>
 80076d6:	4603      	mov	r3, r0
 80076d8:	4a20      	ldr	r2, [pc, #128]	; (800775c <vTaskStartScheduler+0xbc>)
 80076da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076dc:	4b1f      	ldr	r3, [pc, #124]	; (800775c <vTaskStartScheduler+0xbc>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076e4:	2301      	movs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e001      	b.n	80076ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d102      	bne.n	80076fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076f4:	f000 fe16 	bl	8008324 <xTimerCreateTimerTask>
 80076f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d116      	bne.n	800772e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
}
 8007712:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007714:	4b12      	ldr	r3, [pc, #72]	; (8007760 <vTaskStartScheduler+0xc0>)
 8007716:	f04f 32ff 	mov.w	r2, #4294967295
 800771a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800771c:	4b11      	ldr	r3, [pc, #68]	; (8007764 <vTaskStartScheduler+0xc4>)
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007722:	4b11      	ldr	r3, [pc, #68]	; (8007768 <vTaskStartScheduler+0xc8>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007728:	f001 f98e 	bl	8008a48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800772c:	e00e      	b.n	800774c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007734:	d10a      	bne.n	800774c <vTaskStartScheduler+0xac>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60fb      	str	r3, [r7, #12]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <vTaskStartScheduler+0xaa>
}
 800774c:	bf00      	nop
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	080092d4 	.word	0x080092d4
 8007758:	08007d85 	.word	0x08007d85
 800775c:	20001244 	.word	0x20001244
 8007760:	20001240 	.word	0x20001240
 8007764:	2000122c 	.word	0x2000122c
 8007768:	20001224 	.word	0x20001224

0800776c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800776c:	b480      	push	{r7}
 800776e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007770:	4b04      	ldr	r3, [pc, #16]	; (8007784 <vTaskSuspendAll+0x18>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3301      	adds	r3, #1
 8007776:	4a03      	ldr	r2, [pc, #12]	; (8007784 <vTaskSuspendAll+0x18>)
 8007778:	6013      	str	r3, [r2, #0]
}
 800777a:	bf00      	nop
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20001248 	.word	0x20001248

08007788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007792:	2300      	movs	r3, #0
 8007794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007796:	4b42      	ldr	r3, [pc, #264]	; (80078a0 <xTaskResumeAll+0x118>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	603b      	str	r3, [r7, #0]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077b4:	f001 f9ba 	bl	8008b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077b8:	4b39      	ldr	r3, [pc, #228]	; (80078a0 <xTaskResumeAll+0x118>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3b01      	subs	r3, #1
 80077be:	4a38      	ldr	r2, [pc, #224]	; (80078a0 <xTaskResumeAll+0x118>)
 80077c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077c2:	4b37      	ldr	r3, [pc, #220]	; (80078a0 <xTaskResumeAll+0x118>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d162      	bne.n	8007890 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077ca:	4b36      	ldr	r3, [pc, #216]	; (80078a4 <xTaskResumeAll+0x11c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d05e      	beq.n	8007890 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077d2:	e02f      	b.n	8007834 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80077d4:	4b34      	ldr	r3, [pc, #208]	; (80078a8 <xTaskResumeAll+0x120>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3318      	adds	r3, #24
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe fd6b 	bl	80062bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fd66 	bl	80062bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	4b2d      	ldr	r3, [pc, #180]	; (80078ac <xTaskResumeAll+0x124>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d903      	bls.n	8007804 <xTaskResumeAll+0x7c>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a2a      	ldr	r2, [pc, #168]	; (80078ac <xTaskResumeAll+0x124>)
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4a27      	ldr	r2, [pc, #156]	; (80078b0 <xTaskResumeAll+0x128>)
 8007812:	441a      	add	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fe fcf3 	bl	8006206 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007824:	4b23      	ldr	r3, [pc, #140]	; (80078b4 <xTaskResumeAll+0x12c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	429a      	cmp	r2, r3
 800782c:	d302      	bcc.n	8007834 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800782e:	4b22      	ldr	r3, [pc, #136]	; (80078b8 <xTaskResumeAll+0x130>)
 8007830:	2201      	movs	r2, #1
 8007832:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007834:	4b1c      	ldr	r3, [pc, #112]	; (80078a8 <xTaskResumeAll+0x120>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1cb      	bne.n	80077d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007842:	f000 fb55 	bl	8007ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007846:	4b1d      	ldr	r3, [pc, #116]	; (80078bc <xTaskResumeAll+0x134>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d010      	beq.n	8007874 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007852:	f000 f845 	bl	80078e0 <xTaskIncrementTick>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800785c:	4b16      	ldr	r3, [pc, #88]	; (80078b8 <xTaskResumeAll+0x130>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3b01      	subs	r3, #1
 8007866:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f1      	bne.n	8007852 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <xTaskResumeAll+0x134>)
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007874:	4b10      	ldr	r3, [pc, #64]	; (80078b8 <xTaskResumeAll+0x130>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d009      	beq.n	8007890 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800787c:	2301      	movs	r3, #1
 800787e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007880:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <xTaskResumeAll+0x138>)
 8007882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007890:	f001 f97c 	bl	8008b8c <vPortExitCritical>

	return xAlreadyYielded;
 8007894:	68bb      	ldr	r3, [r7, #8]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20001248 	.word	0x20001248
 80078a4:	20001220 	.word	0x20001220
 80078a8:	200011e0 	.word	0x200011e0
 80078ac:	20001228 	.word	0x20001228
 80078b0:	20000d50 	.word	0x20000d50
 80078b4:	20000d4c 	.word	0x20000d4c
 80078b8:	20001234 	.word	0x20001234
 80078bc:	20001230 	.word	0x20001230
 80078c0:	e000ed04 	.word	0xe000ed04

080078c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <xTaskGetTickCount+0x18>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078d0:	687b      	ldr	r3, [r7, #4]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bc80      	pop	{r7}
 80078da:	4770      	bx	lr
 80078dc:	20001224 	.word	0x20001224

080078e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ea:	4b51      	ldr	r3, [pc, #324]	; (8007a30 <xTaskIncrementTick+0x150>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f040 808e 	bne.w	8007a10 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078f4:	4b4f      	ldr	r3, [pc, #316]	; (8007a34 <xTaskIncrementTick+0x154>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078fc:	4a4d      	ldr	r2, [pc, #308]	; (8007a34 <xTaskIncrementTick+0x154>)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d120      	bne.n	800794a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007908:	4b4b      	ldr	r3, [pc, #300]	; (8007a38 <xTaskIncrementTick+0x158>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <xTaskIncrementTick+0x48>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	603b      	str	r3, [r7, #0]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <xTaskIncrementTick+0x46>
 8007928:	4b43      	ldr	r3, [pc, #268]	; (8007a38 <xTaskIncrementTick+0x158>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]
 800792e:	4b43      	ldr	r3, [pc, #268]	; (8007a3c <xTaskIncrementTick+0x15c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a41      	ldr	r2, [pc, #260]	; (8007a38 <xTaskIncrementTick+0x158>)
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	4a41      	ldr	r2, [pc, #260]	; (8007a3c <xTaskIncrementTick+0x15c>)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	4b40      	ldr	r3, [pc, #256]	; (8007a40 <xTaskIncrementTick+0x160>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a3f      	ldr	r2, [pc, #252]	; (8007a40 <xTaskIncrementTick+0x160>)
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	f000 fad3 	bl	8007ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800794a:	4b3e      	ldr	r3, [pc, #248]	; (8007a44 <xTaskIncrementTick+0x164>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	429a      	cmp	r2, r3
 8007952:	d34e      	bcc.n	80079f2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007954:	4b38      	ldr	r3, [pc, #224]	; (8007a38 <xTaskIncrementTick+0x158>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <xTaskIncrementTick+0x82>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <xTaskIncrementTick+0x84>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007968:	4b36      	ldr	r3, [pc, #216]	; (8007a44 <xTaskIncrementTick+0x164>)
 800796a:	f04f 32ff 	mov.w	r2, #4294967295
 800796e:	601a      	str	r2, [r3, #0]
					break;
 8007970:	e03f      	b.n	80079f2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007972:	4b31      	ldr	r3, [pc, #196]	; (8007a38 <xTaskIncrementTick+0x158>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	429a      	cmp	r2, r3
 8007988:	d203      	bcs.n	8007992 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800798a:	4a2e      	ldr	r2, [pc, #184]	; (8007a44 <xTaskIncrementTick+0x164>)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6013      	str	r3, [r2, #0]
						break;
 8007990:	e02f      	b.n	80079f2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3304      	adds	r3, #4
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fc90 	bl	80062bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	3318      	adds	r3, #24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe fc87 	bl	80062bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	4b25      	ldr	r3, [pc, #148]	; (8007a48 <xTaskIncrementTick+0x168>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d903      	bls.n	80079c2 <xTaskIncrementTick+0xe2>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	4a22      	ldr	r2, [pc, #136]	; (8007a48 <xTaskIncrementTick+0x168>)
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4a1f      	ldr	r2, [pc, #124]	; (8007a4c <xTaskIncrementTick+0x16c>)
 80079d0:	441a      	add	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4619      	mov	r1, r3
 80079d8:	4610      	mov	r0, r2
 80079da:	f7fe fc14 	bl	8006206 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e2:	4b1b      	ldr	r3, [pc, #108]	; (8007a50 <xTaskIncrementTick+0x170>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d3b3      	bcc.n	8007954 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079ec:	2301      	movs	r3, #1
 80079ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079f0:	e7b0      	b.n	8007954 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079f2:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <xTaskIncrementTick+0x170>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f8:	4914      	ldr	r1, [pc, #80]	; (8007a4c <xTaskIncrementTick+0x16c>)
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d907      	bls.n	8007a1a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	e004      	b.n	8007a1a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a10:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <xTaskIncrementTick+0x174>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	4a0f      	ldr	r2, [pc, #60]	; (8007a54 <xTaskIncrementTick+0x174>)
 8007a18:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a1a:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <xTaskIncrementTick+0x178>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a26:	697b      	ldr	r3, [r7, #20]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20001248 	.word	0x20001248
 8007a34:	20001224 	.word	0x20001224
 8007a38:	200011d8 	.word	0x200011d8
 8007a3c:	200011dc 	.word	0x200011dc
 8007a40:	20001238 	.word	0x20001238
 8007a44:	20001240 	.word	0x20001240
 8007a48:	20001228 	.word	0x20001228
 8007a4c:	20000d50 	.word	0x20000d50
 8007a50:	20000d4c 	.word	0x20000d4c
 8007a54:	20001230 	.word	0x20001230
 8007a58:	20001234 	.word	0x20001234

08007a5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a62:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <vTaskSwitchContext+0xa4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a6a:	4b26      	ldr	r3, [pc, #152]	; (8007b04 <vTaskSwitchContext+0xa8>)
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a70:	e041      	b.n	8007af6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007a72:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <vTaskSwitchContext+0xa8>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a78:	4b23      	ldr	r3, [pc, #140]	; (8007b08 <vTaskSwitchContext+0xac>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e010      	b.n	8007aa2 <vTaskSwitchContext+0x46>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <vTaskSwitchContext+0x40>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	607b      	str	r3, [r7, #4]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <vTaskSwitchContext+0x3e>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
 8007aa2:	491a      	ldr	r1, [pc, #104]	; (8007b0c <vTaskSwitchContext+0xb0>)
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	440b      	add	r3, r1
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0e4      	beq.n	8007a80 <vTaskSwitchContext+0x24>
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4a12      	ldr	r2, [pc, #72]	; (8007b0c <vTaskSwitchContext+0xb0>)
 8007ac2:	4413      	add	r3, r2
 8007ac4:	60bb      	str	r3, [r7, #8]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d104      	bne.n	8007ae6 <vTaskSwitchContext+0x8a>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	605a      	str	r2, [r3, #4]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	4a08      	ldr	r2, [pc, #32]	; (8007b10 <vTaskSwitchContext+0xb4>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	4a05      	ldr	r2, [pc, #20]	; (8007b08 <vTaskSwitchContext+0xac>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6013      	str	r3, [r2, #0]
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr
 8007b00:	20001248 	.word	0x20001248
 8007b04:	20001234 	.word	0x20001234
 8007b08:	20001228 	.word	0x20001228
 8007b0c:	20000d50 	.word	0x20000d50
 8007b10:	20000d4c 	.word	0x20000d4c

08007b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10a      	bne.n	8007b3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	60fb      	str	r3, [r7, #12]
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <vTaskPlaceOnEventList+0x44>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3318      	adds	r3, #24
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fe fb82 	bl	800624c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b48:	2101      	movs	r1, #1
 8007b4a:	6838      	ldr	r0, [r7, #0]
 8007b4c:	f000 fb96 	bl	800827c <prvAddCurrentTaskToDelayedList>
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000d4c 	.word	0x20000d4c

08007b5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10a      	bne.n	8007b84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	617b      	str	r3, [r7, #20]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b84:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3318      	adds	r3, #24
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7fe fb3a 	bl	8006206 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b98:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68b8      	ldr	r0, [r7, #8]
 8007ba2:	f000 fb6b 	bl	800827c <prvAddCurrentTaskToDelayedList>
	}
 8007ba6:	bf00      	nop
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000d4c 	.word	0x20000d4c

08007bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	60fb      	str	r3, [r7, #12]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	3318      	adds	r3, #24
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe fb69 	bl	80062bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bea:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <xTaskRemoveFromEventList+0xb0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d11d      	bne.n	8007c2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fb60 	bl	80062bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c00:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <xTaskRemoveFromEventList+0xb4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d903      	bls.n	8007c10 <xTaskRemoveFromEventList+0x5c>
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <xTaskRemoveFromEventList+0xb4>)
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <xTaskRemoveFromEventList+0xb8>)
 8007c1e:	441a      	add	r2, r3
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3304      	adds	r3, #4
 8007c24:	4619      	mov	r1, r3
 8007c26:	4610      	mov	r0, r2
 8007c28:	f7fe faed 	bl	8006206 <vListInsertEnd>
 8007c2c:	e005      	b.n	8007c3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	3318      	adds	r3, #24
 8007c32:	4619      	mov	r1, r3
 8007c34:	480e      	ldr	r0, [pc, #56]	; (8007c70 <xTaskRemoveFromEventList+0xbc>)
 8007c36:	f7fe fae6 	bl	8006206 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <xTaskRemoveFromEventList+0xc0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d905      	bls.n	8007c54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <xTaskRemoveFromEventList+0xc4>)
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e001      	b.n	8007c58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c58:	697b      	ldr	r3, [r7, #20]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20001248 	.word	0x20001248
 8007c68:	20001228 	.word	0x20001228
 8007c6c:	20000d50 	.word	0x20000d50
 8007c70:	200011e0 	.word	0x200011e0
 8007c74:	20000d4c 	.word	0x20000d4c
 8007c78:	20001234 	.word	0x20001234

08007c7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c84:	4b06      	ldr	r3, [pc, #24]	; (8007ca0 <vTaskInternalSetTimeOutState+0x24>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c8c:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <vTaskInternalSetTimeOutState+0x28>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	605a      	str	r2, [r3, #4]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20001238 	.word	0x20001238
 8007ca4:	20001224 	.word	0x20001224

08007ca8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	613b      	str	r3, [r7, #16]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	60fb      	str	r3, [r7, #12]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007cea:	f000 ff1f 	bl	8008b2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cee:	4b1d      	ldr	r3, [pc, #116]	; (8007d64 <xTaskCheckForTimeOut+0xbc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d06:	d102      	bne.n	8007d0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e023      	b.n	8007d56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <xTaskCheckForTimeOut+0xc0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d007      	beq.n	8007d2a <xTaskCheckForTimeOut+0x82>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d302      	bcc.n	8007d2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d24:	2301      	movs	r3, #1
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	e015      	b.n	8007d56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d20b      	bcs.n	8007d4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	1ad2      	subs	r2, r2, r3
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ff9b 	bl	8007c7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
 8007d4a:	e004      	b.n	8007d56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d52:	2301      	movs	r3, #1
 8007d54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d56:	f000 ff19 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 8007d5a:	69fb      	ldr	r3, [r7, #28]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20001224 	.word	0x20001224
 8007d68:	20001238 	.word	0x20001238

08007d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d70:	4b03      	ldr	r3, [pc, #12]	; (8007d80 <vTaskMissedYield+0x14>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
}
 8007d76:	bf00      	nop
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	20001234 	.word	0x20001234

08007d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d8c:	f000 f852 	bl	8007e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <prvIdleTask+0x28>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d9f9      	bls.n	8007d8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <prvIdleTask+0x2c>)
 8007d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007da8:	e7f0      	b.n	8007d8c <prvIdleTask+0x8>
 8007daa:	bf00      	nop
 8007dac:	20000d50 	.word	0x20000d50
 8007db0:	e000ed04 	.word	0xe000ed04

08007db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dba:	2300      	movs	r3, #0
 8007dbc:	607b      	str	r3, [r7, #4]
 8007dbe:	e00c      	b.n	8007dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4a12      	ldr	r2, [pc, #72]	; (8007e14 <prvInitialiseTaskLists+0x60>)
 8007dcc:	4413      	add	r3, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe f9ee 	bl	80061b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b37      	cmp	r3, #55	; 0x37
 8007dde:	d9ef      	bls.n	8007dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007de0:	480d      	ldr	r0, [pc, #52]	; (8007e18 <prvInitialiseTaskLists+0x64>)
 8007de2:	f7fe f9e5 	bl	80061b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007de6:	480d      	ldr	r0, [pc, #52]	; (8007e1c <prvInitialiseTaskLists+0x68>)
 8007de8:	f7fe f9e2 	bl	80061b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dec:	480c      	ldr	r0, [pc, #48]	; (8007e20 <prvInitialiseTaskLists+0x6c>)
 8007dee:	f7fe f9df 	bl	80061b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007df2:	480c      	ldr	r0, [pc, #48]	; (8007e24 <prvInitialiseTaskLists+0x70>)
 8007df4:	f7fe f9dc 	bl	80061b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007df8:	480b      	ldr	r0, [pc, #44]	; (8007e28 <prvInitialiseTaskLists+0x74>)
 8007dfa:	f7fe f9d9 	bl	80061b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <prvInitialiseTaskLists+0x78>)
 8007e00:	4a05      	ldr	r2, [pc, #20]	; (8007e18 <prvInitialiseTaskLists+0x64>)
 8007e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e04:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <prvInitialiseTaskLists+0x7c>)
 8007e06:	4a05      	ldr	r2, [pc, #20]	; (8007e1c <prvInitialiseTaskLists+0x68>)
 8007e08:	601a      	str	r2, [r3, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000d50 	.word	0x20000d50
 8007e18:	200011b0 	.word	0x200011b0
 8007e1c:	200011c4 	.word	0x200011c4
 8007e20:	200011e0 	.word	0x200011e0
 8007e24:	200011f4 	.word	0x200011f4
 8007e28:	2000120c 	.word	0x2000120c
 8007e2c:	200011d8 	.word	0x200011d8
 8007e30:	200011dc 	.word	0x200011dc

08007e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e3a:	e019      	b.n	8007e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e3c:	f000 fe76 	bl	8008b2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e40:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <prvCheckTasksWaitingTermination+0x50>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fa35 	bl	80062bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e52:	4b0d      	ldr	r3, [pc, #52]	; (8007e88 <prvCheckTasksWaitingTermination+0x54>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	4a0b      	ldr	r2, [pc, #44]	; (8007e88 <prvCheckTasksWaitingTermination+0x54>)
 8007e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <prvCheckTasksWaitingTermination+0x58>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	4a0a      	ldr	r2, [pc, #40]	; (8007e8c <prvCheckTasksWaitingTermination+0x58>)
 8007e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e66:	f000 fe91 	bl	8008b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f810 	bl	8007e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <prvCheckTasksWaitingTermination+0x58>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e1      	bne.n	8007e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e78:	bf00      	nop
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	200011f4 	.word	0x200011f4
 8007e88:	20001220 	.word	0x20001220
 8007e8c:	20001208 	.word	0x20001208

08007e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d108      	bne.n	8007eb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 f804 	bl	8008eb4 <vPortFree>
				vPortFree( pxTCB );
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 f801 	bl	8008eb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007eb2:	e018      	b.n	8007ee6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d103      	bne.n	8007ec6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fff8 	bl	8008eb4 <vPortFree>
	}
 8007ec4:	e00f      	b.n	8007ee6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d00a      	beq.n	8007ee6 <prvDeleteTCB+0x56>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	60fb      	str	r3, [r7, #12]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <prvDeleteTCB+0x54>
	}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef6:	4b0e      	ldr	r3, [pc, #56]	; (8007f30 <prvResetNextTaskUnblockTime+0x40>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <prvResetNextTaskUnblockTime+0x14>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <prvResetNextTaskUnblockTime+0x16>
 8007f04:	2300      	movs	r3, #0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d004      	beq.n	8007f14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f0a:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <prvResetNextTaskUnblockTime+0x44>)
 8007f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f12:	e008      	b.n	8007f26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f14:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <prvResetNextTaskUnblockTime+0x40>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4a04      	ldr	r2, [pc, #16]	; (8007f34 <prvResetNextTaskUnblockTime+0x44>)
 8007f24:	6013      	str	r3, [r2, #0]
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc80      	pop	{r7}
 8007f2e:	4770      	bx	lr
 8007f30:	200011d8 	.word	0x200011d8
 8007f34:	20001240 	.word	0x20001240

08007f38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007f3e:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <xTaskGetCurrentTaskHandle+0x18>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007f44:	687b      	ldr	r3, [r7, #4]
	}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr
 8007f50:	20000d4c 	.word	0x20000d4c

08007f54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <xTaskGetSchedulerState+0x34>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f62:	2301      	movs	r3, #1
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	e008      	b.n	8007f7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f68:	4b08      	ldr	r3, [pc, #32]	; (8007f8c <xTaskGetSchedulerState+0x38>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f70:	2302      	movs	r3, #2
 8007f72:	607b      	str	r3, [r7, #4]
 8007f74:	e001      	b.n	8007f7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f76:	2300      	movs	r3, #0
 8007f78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f7a:	687b      	ldr	r3, [r7, #4]
	}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bc80      	pop	{r7}
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	2000122c 	.word	0x2000122c
 8007f8c:	20001248 	.word	0x20001248

08007f90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d056      	beq.n	8008054 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007faa:	4b2d      	ldr	r3, [pc, #180]	; (8008060 <xTaskPriorityInherit+0xd0>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d246      	bcs.n	8008042 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	db06      	blt.n	8007fca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fbc:	4b28      	ldr	r3, [pc, #160]	; (8008060 <xTaskPriorityInherit+0xd0>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6959      	ldr	r1, [r3, #20]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4a22      	ldr	r2, [pc, #136]	; (8008064 <xTaskPriorityInherit+0xd4>)
 8007fdc:	4413      	add	r3, r2
 8007fde:	4299      	cmp	r1, r3
 8007fe0:	d101      	bne.n	8007fe6 <xTaskPriorityInherit+0x56>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <xTaskPriorityInherit+0x58>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d022      	beq.n	8008032 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	3304      	adds	r3, #4
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fe f963 	bl	80062bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <xTaskPriorityInherit+0xd0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4b18      	ldr	r3, [pc, #96]	; (8008068 <xTaskPriorityInherit+0xd8>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d903      	bls.n	8008014 <xTaskPriorityInherit+0x84>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	4a15      	ldr	r2, [pc, #84]	; (8008068 <xTaskPriorityInherit+0xd8>)
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4a10      	ldr	r2, [pc, #64]	; (8008064 <xTaskPriorityInherit+0xd4>)
 8008022:	441a      	add	r2, r3
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3304      	adds	r3, #4
 8008028:	4619      	mov	r1, r3
 800802a:	4610      	mov	r0, r2
 800802c:	f7fe f8eb 	bl	8006206 <vListInsertEnd>
 8008030:	e004      	b.n	800803c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008032:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <xTaskPriorityInherit+0xd0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e008      	b.n	8008054 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008046:	4b06      	ldr	r3, [pc, #24]	; (8008060 <xTaskPriorityInherit+0xd0>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	429a      	cmp	r2, r3
 800804e:	d201      	bcs.n	8008054 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008050:	2301      	movs	r3, #1
 8008052:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008054:	68fb      	ldr	r3, [r7, #12]
	}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000d4c 	.word	0x20000d4c
 8008064:	20000d50 	.word	0x20000d50
 8008068:	20001228 	.word	0x20001228

0800806c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d056      	beq.n	8008130 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008082:	4b2e      	ldr	r3, [pc, #184]	; (800813c <xTaskPriorityDisinherit+0xd0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	429a      	cmp	r2, r3
 800808a:	d00a      	beq.n	80080a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	60fb      	str	r3, [r7, #12]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10a      	bne.n	80080c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	60bb      	str	r3, [r7, #8]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c4:	1e5a      	subs	r2, r3, #1
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d02c      	beq.n	8008130 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d128      	bne.n	8008130 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	3304      	adds	r3, #4
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7fe f8ea 	bl	80062bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008100:	4b0f      	ldr	r3, [pc, #60]	; (8008140 <xTaskPriorityDisinherit+0xd4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d903      	bls.n	8008110 <xTaskPriorityDisinherit+0xa4>
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	4a0c      	ldr	r2, [pc, #48]	; (8008140 <xTaskPriorityDisinherit+0xd4>)
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4a09      	ldr	r2, [pc, #36]	; (8008144 <xTaskPriorityDisinherit+0xd8>)
 800811e:	441a      	add	r2, r3
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f7fe f86d 	bl	8006206 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800812c:	2301      	movs	r3, #1
 800812e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008130:	697b      	ldr	r3, [r7, #20]
	}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000d4c 	.word	0x20000d4c
 8008140:	20001228 	.word	0x20001228
 8008144:	20000d50 	.word	0x20000d50

08008148 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008156:	2301      	movs	r3, #1
 8008158:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d06f      	beq.n	8008240 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10a      	bne.n	800817e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	60fb      	str	r3, [r7, #12]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d902      	bls.n	800818e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	61fb      	str	r3, [r7, #28]
 800818c:	e002      	b.n	8008194 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008192:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	429a      	cmp	r2, r3
 800819c:	d050      	beq.n	8008240 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d14b      	bne.n	8008240 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081a8:	4b27      	ldr	r3, [pc, #156]	; (8008248 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d10a      	bne.n	80081c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	60bb      	str	r3, [r7, #8]
}
 80081c4:	bf00      	nop
 80081c6:	e7fe      	b.n	80081c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	db04      	blt.n	80081e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	6959      	ldr	r1, [r3, #20]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4a15      	ldr	r2, [pc, #84]	; (800824c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081f6:	4413      	add	r3, r2
 80081f8:	4299      	cmp	r1, r3
 80081fa:	d101      	bne.n	8008200 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e000      	b.n	8008202 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008200:	2300      	movs	r3, #0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d01c      	beq.n	8008240 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	3304      	adds	r3, #4
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe f856 	bl	80062bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008214:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d903      	bls.n	8008224 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	4a0b      	ldr	r2, [pc, #44]	; (8008250 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4a06      	ldr	r2, [pc, #24]	; (800824c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008232:	441a      	add	r2, r3
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7fd ffe3 	bl	8006206 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008240:	bf00      	nop
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20000d4c 	.word	0x20000d4c
 800824c:	20000d50 	.word	0x20000d50
 8008250:	20001228 	.word	0x20001228

08008254 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008258:	4b07      	ldr	r3, [pc, #28]	; (8008278 <pvTaskIncrementMutexHeldCount+0x24>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <pvTaskIncrementMutexHeldCount+0x24>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008266:	3201      	adds	r2, #1
 8008268:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800826a:	4b03      	ldr	r3, [pc, #12]	; (8008278 <pvTaskIncrementMutexHeldCount+0x24>)
 800826c:	681b      	ldr	r3, [r3, #0]
	}
 800826e:	4618      	mov	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	bc80      	pop	{r7}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20000d4c 	.word	0x20000d4c

0800827c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008286:	4b21      	ldr	r3, [pc, #132]	; (800830c <prvAddCurrentTaskToDelayedList+0x90>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800828c:	4b20      	ldr	r3, [pc, #128]	; (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3304      	adds	r3, #4
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe f812 	bl	80062bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829e:	d10a      	bne.n	80082b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d007      	beq.n	80082b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a6:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4619      	mov	r1, r3
 80082ae:	4819      	ldr	r0, [pc, #100]	; (8008314 <prvAddCurrentTaskToDelayedList+0x98>)
 80082b0:	f7fd ffa9 	bl	8006206 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082b4:	e026      	b.n	8008304 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082be:	4b14      	ldr	r3, [pc, #80]	; (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d209      	bcs.n	80082e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ce:	4b12      	ldr	r3, [pc, #72]	; (8008318 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3304      	adds	r3, #4
 80082d8:	4619      	mov	r1, r3
 80082da:	4610      	mov	r0, r2
 80082dc:	f7fd ffb6 	bl	800624c <vListInsert>
}
 80082e0:	e010      	b.n	8008304 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082e2:	4b0e      	ldr	r3, [pc, #56]	; (800831c <prvAddCurrentTaskToDelayedList+0xa0>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <prvAddCurrentTaskToDelayedList+0x94>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f7fd ffac 	bl	800624c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082f4:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d202      	bcs.n	8008304 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082fe:	4a08      	ldr	r2, [pc, #32]	; (8008320 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6013      	str	r3, [r2, #0]
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20001224 	.word	0x20001224
 8008310:	20000d4c 	.word	0x20000d4c
 8008314:	2000120c 	.word	0x2000120c
 8008318:	200011dc 	.word	0x200011dc
 800831c:	200011d8 	.word	0x200011d8
 8008320:	20001240 	.word	0x20001240

08008324 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800832e:	f000 facb 	bl	80088c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008332:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <xTimerCreateTimerTask+0x80>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d021      	beq.n	800837e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008342:	1d3a      	adds	r2, r7, #4
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	f107 030c 	add.w	r3, r7, #12
 800834c:	4618      	mov	r0, r3
 800834e:	f7fd ff15 	bl	800617c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	9202      	str	r2, [sp, #8]
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	2302      	movs	r3, #2
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	2300      	movs	r3, #0
 8008362:	460a      	mov	r2, r1
 8008364:	4910      	ldr	r1, [pc, #64]	; (80083a8 <xTimerCreateTimerTask+0x84>)
 8008366:	4811      	ldr	r0, [pc, #68]	; (80083ac <xTimerCreateTimerTask+0x88>)
 8008368:	f7fe ff50 	bl	800720c <xTaskCreateStatic>
 800836c:	4603      	mov	r3, r0
 800836e:	4a10      	ldr	r2, [pc, #64]	; (80083b0 <xTimerCreateTimerTask+0x8c>)
 8008370:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008372:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <xTimerCreateTimerTask+0x8c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800837a:	2301      	movs	r3, #1
 800837c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	613b      	str	r3, [r7, #16]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800839a:	697b      	ldr	r3, [r7, #20]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	2000127c 	.word	0x2000127c
 80083a8:	080092dc 	.word	0x080092dc
 80083ac:	080084d1 	.word	0x080084d1
 80083b0:	20001280 	.word	0x20001280

080083b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08a      	sub	sp, #40	; 0x28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	623b      	str	r3, [r7, #32]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083e2:	4b1a      	ldr	r3, [pc, #104]	; (800844c <xTimerGenericCommand+0x98>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d02a      	beq.n	8008440 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b05      	cmp	r3, #5
 80083fa:	dc18      	bgt.n	800842e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083fc:	f7ff fdaa 	bl	8007f54 <xTaskGetSchedulerState>
 8008400:	4603      	mov	r3, r0
 8008402:	2b02      	cmp	r3, #2
 8008404:	d109      	bne.n	800841a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008406:	4b11      	ldr	r3, [pc, #68]	; (800844c <xTimerGenericCommand+0x98>)
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f107 0110 	add.w	r1, r7, #16
 800840e:	2300      	movs	r3, #0
 8008410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008412:	f7fe f975 	bl	8006700 <xQueueGenericSend>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24
 8008418:	e012      	b.n	8008440 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800841a:	4b0c      	ldr	r3, [pc, #48]	; (800844c <xTimerGenericCommand+0x98>)
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	f107 0110 	add.w	r1, r7, #16
 8008422:	2300      	movs	r3, #0
 8008424:	2200      	movs	r2, #0
 8008426:	f7fe f96b 	bl	8006700 <xQueueGenericSend>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24
 800842c:	e008      	b.n	8008440 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800842e:	4b07      	ldr	r3, [pc, #28]	; (800844c <xTimerGenericCommand+0x98>)
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	f107 0110 	add.w	r1, r7, #16
 8008436:	2300      	movs	r3, #0
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	f7fe fa5f 	bl	80068fc <xQueueGenericSendFromISR>
 800843e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008442:	4618      	mov	r0, r3
 8008444:	3728      	adds	r7, #40	; 0x28
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	2000127c 	.word	0x2000127c

08008450 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af02      	add	r7, sp, #8
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800845a:	4b1c      	ldr	r3, [pc, #112]	; (80084cc <prvProcessExpiredTimer+0x7c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	3304      	adds	r3, #4
 8008468:	4618      	mov	r0, r3
 800846a:	f7fd ff27 	bl	80062bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d122      	bne.n	80084bc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	18d1      	adds	r1, r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	6978      	ldr	r0, [r7, #20]
 8008484:	f000 f8c8 	bl	8008618 <prvInsertTimerInActiveList>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d016      	beq.n	80084bc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	2100      	movs	r1, #0
 8008498:	6978      	ldr	r0, [r7, #20]
 800849a:	f7ff ff8b 	bl	80083b4 <xTimerGenericCommand>
 800849e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	60fb      	str	r3, [r7, #12]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	6978      	ldr	r0, [r7, #20]
 80084c2:	4798      	blx	r3
}
 80084c4:	bf00      	nop
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20001274 	.word	0x20001274

080084d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084d8:	f107 0308 	add.w	r3, r7, #8
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 f857 	bl	8008590 <prvGetNextExpireTime>
 80084e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4619      	mov	r1, r3
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 f803 	bl	80084f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084ee:	f000 f8d5 	bl	800869c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084f2:	e7f1      	b.n	80084d8 <prvTimerTask+0x8>

080084f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084fe:	f7ff f935 	bl	800776c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008502:	f107 0308 	add.w	r3, r7, #8
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f866 	bl	80085d8 <prvSampleTimeNow>
 800850c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d130      	bne.n	8008576 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <prvProcessTimerOrBlockTask+0x3c>
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	429a      	cmp	r2, r3
 8008520:	d806      	bhi.n	8008530 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008522:	f7ff f931 	bl	8007788 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff ff91 	bl	8008450 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800852e:	e024      	b.n	800857a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008536:	4b13      	ldr	r3, [pc, #76]	; (8008584 <prvProcessTimerOrBlockTask+0x90>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	bf0c      	ite	eq
 8008540:	2301      	moveq	r3, #1
 8008542:	2300      	movne	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <prvProcessTimerOrBlockTask+0x94>)
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4619      	mov	r1, r3
 8008556:	f7fe fe25 	bl	80071a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800855a:	f7ff f915 	bl	8007788 <xTaskResumeAll>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008564:	4b09      	ldr	r3, [pc, #36]	; (800858c <prvProcessTimerOrBlockTask+0x98>)
 8008566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	f3bf 8f6f 	isb	sy
}
 8008574:	e001      	b.n	800857a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008576:	f7ff f907 	bl	8007788 <xTaskResumeAll>
}
 800857a:	bf00      	nop
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20001278 	.word	0x20001278
 8008588:	2000127c 	.word	0x2000127c
 800858c:	e000ed04 	.word	0xe000ed04

08008590 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008598:	4b0e      	ldr	r3, [pc, #56]	; (80085d4 <prvGetNextExpireTime+0x44>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bf0c      	ite	eq
 80085a2:	2301      	moveq	r3, #1
 80085a4:	2300      	movne	r3, #0
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	461a      	mov	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d105      	bne.n	80085c2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <prvGetNextExpireTime+0x44>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e001      	b.n	80085c6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085c6:	68fb      	ldr	r3, [r7, #12]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bc80      	pop	{r7}
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20001274 	.word	0x20001274

080085d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085e0:	f7ff f970 	bl	80078c4 <xTaskGetTickCount>
 80085e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085e6:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <prvSampleTimeNow+0x3c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d205      	bcs.n	80085fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085f0:	f000 f908 	bl	8008804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	e002      	b.n	8008602 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008602:	4a04      	ldr	r2, [pc, #16]	; (8008614 <prvSampleTimeNow+0x3c>)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008608:	68fb      	ldr	r3, [r7, #12]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20001284 	.word	0x20001284

08008618 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	429a      	cmp	r2, r3
 800863c:	d812      	bhi.n	8008664 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	1ad2      	subs	r2, r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	429a      	cmp	r2, r3
 800864a:	d302      	bcc.n	8008652 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800864c:	2301      	movs	r3, #1
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	e01b      	b.n	800868a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008652:	4b10      	ldr	r3, [pc, #64]	; (8008694 <prvInsertTimerInActiveList+0x7c>)
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3304      	adds	r3, #4
 800865a:	4619      	mov	r1, r3
 800865c:	4610      	mov	r0, r2
 800865e:	f7fd fdf5 	bl	800624c <vListInsert>
 8008662:	e012      	b.n	800868a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d206      	bcs.n	800867a <prvInsertTimerInActiveList+0x62>
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d302      	bcc.n	800867a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008674:	2301      	movs	r3, #1
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	e007      	b.n	800868a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <prvInsertTimerInActiveList+0x80>)
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3304      	adds	r3, #4
 8008682:	4619      	mov	r1, r3
 8008684:	4610      	mov	r0, r2
 8008686:	f7fd fde1 	bl	800624c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800868a:	697b      	ldr	r3, [r7, #20]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20001278 	.word	0x20001278
 8008698:	20001274 	.word	0x20001274

0800869c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08e      	sub	sp, #56	; 0x38
 80086a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086a2:	e09d      	b.n	80087e0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da18      	bge.n	80086dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086aa:	1d3b      	adds	r3, r7, #4
 80086ac:	3304      	adds	r3, #4
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	61fb      	str	r3, [r7, #28]
}
 80086c8:	bf00      	nop
 80086ca:	e7fe      	b.n	80086ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086d2:	6850      	ldr	r0, [r2, #4]
 80086d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086d6:	6892      	ldr	r2, [r2, #8]
 80086d8:	4611      	mov	r1, r2
 80086da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	db7e      	blt.n	80087e0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d004      	beq.n	80086f8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	3304      	adds	r3, #4
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fd fde2 	bl	80062bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086f8:	463b      	mov	r3, r7
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff ff6c 	bl	80085d8 <prvSampleTimeNow>
 8008700:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b09      	cmp	r3, #9
 8008706:	d86a      	bhi.n	80087de <prvProcessReceivedCommands+0x142>
 8008708:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <prvProcessReceivedCommands+0x74>)
 800870a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870e:	bf00      	nop
 8008710:	08008739 	.word	0x08008739
 8008714:	08008739 	.word	0x08008739
 8008718:	08008739 	.word	0x08008739
 800871c:	080087e1 	.word	0x080087e1
 8008720:	08008795 	.word	0x08008795
 8008724:	080087cd 	.word	0x080087cd
 8008728:	08008739 	.word	0x08008739
 800872c:	08008739 	.word	0x08008739
 8008730:	080087e1 	.word	0x080087e1
 8008734:	08008795 	.word	0x08008795
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	18d1      	adds	r1, r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008746:	f7ff ff67 	bl	8008618 <prvInsertTimerInActiveList>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d047      	beq.n	80087e0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008756:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d13f      	bne.n	80087e0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	441a      	add	r2, r3
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	2100      	movs	r1, #0
 8008770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008772:	f7ff fe1f 	bl	80083b4 <xTimerGenericCommand>
 8008776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d130      	bne.n	80087e0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61bb      	str	r3, [r7, #24]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	617b      	str	r3, [r7, #20]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	699a      	ldr	r2, [r3, #24]
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	18d1      	adds	r1, r2, r3
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c6:	f7ff ff27 	bl	8008618 <prvInsertTimerInActiveList>
					break;
 80087ca:	e009      	b.n	80087e0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80087d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d8:	f000 fb6c 	bl	8008eb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087dc:	e000      	b.n	80087e0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80087de:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <prvProcessReceivedCommands+0x164>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	1d39      	adds	r1, r7, #4
 80087e6:	2200      	movs	r2, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe f91f 	bl	8006a2c <xQueueReceive>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f47f af57 	bne.w	80086a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087f6:	bf00      	nop
 80087f8:	bf00      	nop
 80087fa:	3730      	adds	r7, #48	; 0x30
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	2000127c 	.word	0x2000127c

08008804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800880a:	e045      	b.n	8008898 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800880c:	4b2c      	ldr	r3, [pc, #176]	; (80088c0 <prvSwitchTimerLists+0xbc>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008816:	4b2a      	ldr	r3, [pc, #168]	; (80088c0 <prvSwitchTimerLists+0xbc>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3304      	adds	r3, #4
 8008824:	4618      	mov	r0, r3
 8008826:	f7fd fd49 	bl	80062bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d12e      	bne.n	8008898 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	4413      	add	r3, r2
 8008842:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	429a      	cmp	r2, r3
 800884a:	d90e      	bls.n	800886a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008858:	4b19      	ldr	r3, [pc, #100]	; (80088c0 <prvSwitchTimerLists+0xbc>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3304      	adds	r3, #4
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f7fd fcf2 	bl	800624c <vListInsert>
 8008868:	e016      	b.n	8008898 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800886a:	2300      	movs	r3, #0
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2300      	movs	r3, #0
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	2100      	movs	r1, #0
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff fd9d 	bl	80083b4 <xTimerGenericCommand>
 800887a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	603b      	str	r3, [r7, #0]
}
 8008894:	bf00      	nop
 8008896:	e7fe      	b.n	8008896 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008898:	4b09      	ldr	r3, [pc, #36]	; (80088c0 <prvSwitchTimerLists+0xbc>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1b4      	bne.n	800880c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088a2:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <prvSwitchTimerLists+0xbc>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088a8:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <prvSwitchTimerLists+0xc0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a04      	ldr	r2, [pc, #16]	; (80088c0 <prvSwitchTimerLists+0xbc>)
 80088ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088b0:	4a04      	ldr	r2, [pc, #16]	; (80088c4 <prvSwitchTimerLists+0xc0>)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	6013      	str	r3, [r2, #0]
}
 80088b6:	bf00      	nop
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20001274 	.word	0x20001274
 80088c4:	20001278 	.word	0x20001278

080088c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ce:	f000 f92d 	bl	8008b2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088d2:	4b15      	ldr	r3, [pc, #84]	; (8008928 <prvCheckForValidListAndQueue+0x60>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d120      	bne.n	800891c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088da:	4814      	ldr	r0, [pc, #80]	; (800892c <prvCheckForValidListAndQueue+0x64>)
 80088dc:	f7fd fc68 	bl	80061b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088e0:	4813      	ldr	r0, [pc, #76]	; (8008930 <prvCheckForValidListAndQueue+0x68>)
 80088e2:	f7fd fc65 	bl	80061b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088e6:	4b13      	ldr	r3, [pc, #76]	; (8008934 <prvCheckForValidListAndQueue+0x6c>)
 80088e8:	4a10      	ldr	r2, [pc, #64]	; (800892c <prvCheckForValidListAndQueue+0x64>)
 80088ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088ec:	4b12      	ldr	r3, [pc, #72]	; (8008938 <prvCheckForValidListAndQueue+0x70>)
 80088ee:	4a10      	ldr	r2, [pc, #64]	; (8008930 <prvCheckForValidListAndQueue+0x68>)
 80088f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088f2:	2300      	movs	r3, #0
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	4b11      	ldr	r3, [pc, #68]	; (800893c <prvCheckForValidListAndQueue+0x74>)
 80088f8:	4a11      	ldr	r2, [pc, #68]	; (8008940 <prvCheckForValidListAndQueue+0x78>)
 80088fa:	2110      	movs	r1, #16
 80088fc:	200a      	movs	r0, #10
 80088fe:	f7fd fd6f 	bl	80063e0 <xQueueGenericCreateStatic>
 8008902:	4603      	mov	r3, r0
 8008904:	4a08      	ldr	r2, [pc, #32]	; (8008928 <prvCheckForValidListAndQueue+0x60>)
 8008906:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008908:	4b07      	ldr	r3, [pc, #28]	; (8008928 <prvCheckForValidListAndQueue+0x60>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008910:	4b05      	ldr	r3, [pc, #20]	; (8008928 <prvCheckForValidListAndQueue+0x60>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	490b      	ldr	r1, [pc, #44]	; (8008944 <prvCheckForValidListAndQueue+0x7c>)
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fc1c 	bl	8007154 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800891c:	f000 f936 	bl	8008b8c <vPortExitCritical>
}
 8008920:	bf00      	nop
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	2000127c 	.word	0x2000127c
 800892c:	2000124c 	.word	0x2000124c
 8008930:	20001260 	.word	0x20001260
 8008934:	20001274 	.word	0x20001274
 8008938:	20001278 	.word	0x20001278
 800893c:	20001328 	.word	0x20001328
 8008940:	20001288 	.word	0x20001288
 8008944:	080092e4 	.word	0x080092e4

08008948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3b04      	subs	r3, #4
 8008958:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3b04      	subs	r3, #4
 8008966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f023 0201 	bic.w	r2, r3, #1
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3b04      	subs	r3, #4
 8008976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008978:	4a08      	ldr	r2, [pc, #32]	; (800899c <pxPortInitialiseStack+0x54>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b14      	subs	r3, #20
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3b20      	subs	r3, #32
 800898e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008990:	68fb      	ldr	r3, [r7, #12]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr
 800899c:	080089a1 	.word	0x080089a1

080089a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089aa:	4b12      	ldr	r3, [pc, #72]	; (80089f4 <prvTaskExitError+0x54>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	d00a      	beq.n	80089ca <prvTaskExitError+0x2a>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	60fb      	str	r3, [r7, #12]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <prvTaskExitError+0x28>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	60bb      	str	r3, [r7, #8]
}
 80089dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089de:	bf00      	nop
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0fc      	beq.n	80089e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bc80      	pop	{r7}
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20000014 	.word	0x20000014
	...

08008a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a00:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <pxCurrentTCBConst2>)
 8008a02:	6819      	ldr	r1, [r3, #0]
 8008a04:	6808      	ldr	r0, [r1, #0]
 8008a06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a0a:	f380 8809 	msr	PSP, r0
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8811 	msr	BASEPRI, r0
 8008a1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a1e:	4770      	bx	lr

08008a20 <pxCurrentTCBConst2>:
 8008a20:	20000d4c 	.word	0x20000d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop

08008a28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a28:	4806      	ldr	r0, [pc, #24]	; (8008a44 <prvPortStartFirstTask+0x1c>)
 8008a2a:	6800      	ldr	r0, [r0, #0]
 8008a2c:	6800      	ldr	r0, [r0, #0]
 8008a2e:	f380 8808 	msr	MSP, r0
 8008a32:	b662      	cpsie	i
 8008a34:	b661      	cpsie	f
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	df00      	svc	0
 8008a40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a42:	bf00      	nop
 8008a44:	e000ed08 	.word	0xe000ed08

08008a48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a4e:	4b32      	ldr	r3, [pc, #200]	; (8008b18 <xPortStartScheduler+0xd0>)
 8008a50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	22ff      	movs	r2, #255	; 0xff
 8008a5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	4b2a      	ldr	r3, [pc, #168]	; (8008b1c <xPortStartScheduler+0xd4>)
 8008a74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a76:	4b2a      	ldr	r3, [pc, #168]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008a78:	2207      	movs	r2, #7
 8008a7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a7c:	e009      	b.n	8008a92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a7e:	4b28      	ldr	r3, [pc, #160]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	4a26      	ldr	r2, [pc, #152]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008a86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9a:	2b80      	cmp	r3, #128	; 0x80
 8008a9c:	d0ef      	beq.n	8008a7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a9e:	4b20      	ldr	r3, [pc, #128]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f1c3 0307 	rsb	r3, r3, #7
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d00a      	beq.n	8008ac0 <xPortStartScheduler+0x78>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	60bb      	str	r3, [r7, #8]
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ac0:	4b17      	ldr	r3, [pc, #92]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	021b      	lsls	r3, r3, #8
 8008ac6:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008ac8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aca:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ad2:	4a13      	ldr	r2, [pc, #76]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008ad4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ade:	4b11      	ldr	r3, [pc, #68]	; (8008b24 <xPortStartScheduler+0xdc>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a10      	ldr	r2, [pc, #64]	; (8008b24 <xPortStartScheduler+0xdc>)
 8008ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008aea:	4b0e      	ldr	r3, [pc, #56]	; (8008b24 <xPortStartScheduler+0xdc>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a0d      	ldr	r2, [pc, #52]	; (8008b24 <xPortStartScheduler+0xdc>)
 8008af0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008af4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008af6:	f000 f8b9 	bl	8008c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008afa:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <xPortStartScheduler+0xe0>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b00:	f7ff ff92 	bl	8008a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b04:	f7fe ffaa 	bl	8007a5c <vTaskSwitchContext>
	prvTaskExitError();
 8008b08:	f7ff ff4a 	bl	80089a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000e400 	.word	0xe000e400
 8008b1c:	20001378 	.word	0x20001378
 8008b20:	2000137c 	.word	0x2000137c
 8008b24:	e000ed20 	.word	0xe000ed20
 8008b28:	20000014 	.word	0x20000014

08008b2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	607b      	str	r3, [r7, #4]
}
 8008b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b46:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <vPortEnterCritical+0x58>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	4a0d      	ldr	r2, [pc, #52]	; (8008b84 <vPortEnterCritical+0x58>)
 8008b4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b50:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <vPortEnterCritical+0x58>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d10f      	bne.n	8008b78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b58:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <vPortEnterCritical+0x5c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	603b      	str	r3, [r7, #0]
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <vPortEnterCritical+0x4a>
	}
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000014 	.word	0x20000014
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b92:	4b11      	ldr	r3, [pc, #68]	; (8008bd8 <vPortExitCritical+0x4c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <vPortExitCritical+0x24>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	607b      	str	r3, [r7, #4]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <vPortExitCritical+0x4c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <vPortExitCritical+0x4c>)
 8008bb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <vPortExitCritical+0x4c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <vPortExitCritical+0x42>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f383 8811 	msr	BASEPRI, r3
}
 8008bcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr
 8008bd8:	20000014 	.word	0x20000014
 8008bdc:	00000000 	.word	0x00000000

08008be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008be0:	f3ef 8009 	mrs	r0, PSP
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <pxCurrentTCBConst>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bf0:	6010      	str	r0, [r2, #0]
 8008bf2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008bf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bfa:	f380 8811 	msr	BASEPRI, r0
 8008bfe:	f7fe ff2d 	bl	8007a5c <vTaskSwitchContext>
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8811 	msr	BASEPRI, r0
 8008c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	6808      	ldr	r0, [r1, #0]
 8008c12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c16:	f380 8809 	msr	PSP, r0
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	4770      	bx	lr

08008c20 <pxCurrentTCBConst>:
 8008c20:	20000d4c 	.word	0x20000d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop

08008c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	607b      	str	r3, [r7, #4]
}
 8008c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c42:	f7fe fe4d 	bl	80078e0 <xTaskIncrementTick>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <SysTick_Handler+0x40>)
 8008c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	2300      	movs	r3, #0
 8008c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	f383 8811 	msr	BASEPRI, r3
}
 8008c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c70:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <vPortSetupTimerInterrupt+0x30>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c76:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <vPortSetupTimerInterrupt+0x34>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c7c:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <vPortSetupTimerInterrupt+0x38>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a09      	ldr	r2, [pc, #36]	; (8008ca8 <vPortSetupTimerInterrupt+0x3c>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	099b      	lsrs	r3, r3, #6
 8008c88:	4a08      	ldr	r2, [pc, #32]	; (8008cac <vPortSetupTimerInterrupt+0x40>)
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c8e:	4b03      	ldr	r3, [pc, #12]	; (8008c9c <vPortSetupTimerInterrupt+0x30>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	601a      	str	r2, [r3, #0]
}
 8008c94:	bf00      	nop
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	e000e010 	.word	0xe000e010
 8008ca0:	e000e018 	.word	0xe000e018
 8008ca4:	20000008 	.word	0x20000008
 8008ca8:	10624dd3 	.word	0x10624dd3
 8008cac:	e000e014 	.word	0xe000e014

08008cb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cb6:	f3ef 8305 	mrs	r3, IPSR
 8008cba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b0f      	cmp	r3, #15
 8008cc0:	d914      	bls.n	8008cec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cc2:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <vPortValidateInterruptPriority+0x6c>)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ccc:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <vPortValidateInterruptPriority+0x70>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	7afa      	ldrb	r2, [r7, #11]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d20a      	bcs.n	8008cec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	607b      	str	r3, [r7, #4]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <vPortValidateInterruptPriority+0x74>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cf4:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <vPortValidateInterruptPriority+0x78>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d90a      	bls.n	8008d12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	603b      	str	r3, [r7, #0]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <vPortValidateInterruptPriority+0x60>
	}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc80      	pop	{r7}
 8008d1a:	4770      	bx	lr
 8008d1c:	e000e3f0 	.word	0xe000e3f0
 8008d20:	20001378 	.word	0x20001378
 8008d24:	e000ed0c 	.word	0xe000ed0c
 8008d28:	2000137c 	.word	0x2000137c

08008d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08a      	sub	sp, #40	; 0x28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d38:	f7fe fd18 	bl	800776c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d3c:	4b58      	ldr	r3, [pc, #352]	; (8008ea0 <pvPortMalloc+0x174>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d44:	f000 f910 	bl	8008f68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d48:	4b56      	ldr	r3, [pc, #344]	; (8008ea4 <pvPortMalloc+0x178>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f040 808e 	bne.w	8008e72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01d      	beq.n	8008d98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d5c:	2208      	movs	r2, #8
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4413      	add	r3, r2
 8008d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d014      	beq.n	8008d98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f023 0307 	bic.w	r3, r3, #7
 8008d74:	3308      	adds	r3, #8
 8008d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <pvPortMalloc+0x6c>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	617b      	str	r3, [r7, #20]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d069      	beq.n	8008e72 <pvPortMalloc+0x146>
 8008d9e:	4b42      	ldr	r3, [pc, #264]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d864      	bhi.n	8008e72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008da8:	4b40      	ldr	r3, [pc, #256]	; (8008eac <pvPortMalloc+0x180>)
 8008daa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dac:	4b3f      	ldr	r3, [pc, #252]	; (8008eac <pvPortMalloc+0x180>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008db2:	e004      	b.n	8008dbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d903      	bls.n	8008dd0 <pvPortMalloc+0xa4>
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f1      	bne.n	8008db4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dd0:	4b33      	ldr	r3, [pc, #204]	; (8008ea0 <pvPortMalloc+0x174>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d04b      	beq.n	8008e72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2208      	movs	r2, #8
 8008de0:	4413      	add	r3, r2
 8008de2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	1ad2      	subs	r2, r2, r3
 8008df4:	2308      	movs	r3, #8
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d91f      	bls.n	8008e3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <pvPortMalloc+0xf8>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	613b      	str	r3, [r7, #16]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	1ad2      	subs	r2, r2, r3
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e36:	69b8      	ldr	r0, [r7, #24]
 8008e38:	f000 f8f8 	bl	800902c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e4a:	4b17      	ldr	r3, [pc, #92]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <pvPortMalloc+0x184>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d203      	bcs.n	8008e5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e56:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a15      	ldr	r2, [pc, #84]	; (8008eb0 <pvPortMalloc+0x184>)
 8008e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <pvPortMalloc+0x178>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	431a      	orrs	r2, r3
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e72:	f7fe fc89 	bl	8007788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	f003 0307 	and.w	r3, r3, #7
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <pvPortMalloc+0x16a>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60fb      	str	r3, [r7, #12]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <pvPortMalloc+0x168>
	return pvReturn;
 8008e96:	69fb      	ldr	r3, [r7, #28]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3728      	adds	r7, #40	; 0x28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20002328 	.word	0x20002328
 8008ea4:	20002334 	.word	0x20002334
 8008ea8:	2000232c 	.word	0x2000232c
 8008eac:	20002320 	.word	0x20002320
 8008eb0:	20002330 	.word	0x20002330

08008eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d048      	beq.n	8008f58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	425b      	negs	r3, r3
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4413      	add	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	4b21      	ldr	r3, [pc, #132]	; (8008f60 <vPortFree+0xac>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4013      	ands	r3, r2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10a      	bne.n	8008ef8 <vPortFree+0x44>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	60fb      	str	r3, [r7, #12]
}
 8008ef4:	bf00      	nop
 8008ef6:	e7fe      	b.n	8008ef6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00a      	beq.n	8008f16 <vPortFree+0x62>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	60bb      	str	r3, [r7, #8]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <vPortFree+0xac>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d019      	beq.n	8008f58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d115      	bne.n	8008f58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <vPortFree+0xac>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	43db      	mvns	r3, r3
 8008f36:	401a      	ands	r2, r3
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f3c:	f7fe fc16 	bl	800776c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <vPortFree+0xb0>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4413      	add	r3, r2
 8008f4a:	4a06      	ldr	r2, [pc, #24]	; (8008f64 <vPortFree+0xb0>)
 8008f4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f4e:	6938      	ldr	r0, [r7, #16]
 8008f50:	f000 f86c 	bl	800902c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f54:	f7fe fc18 	bl	8007788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f58:	bf00      	nop
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20002334 	.word	0x20002334
 8008f64:	2000232c 	.word	0x2000232c

08008f68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f6e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008f72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f74:	4b27      	ldr	r3, [pc, #156]	; (8009014 <prvHeapInit+0xac>)
 8008f76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00c      	beq.n	8008f9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3307      	adds	r3, #7
 8008f86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0307 	bic.w	r3, r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <prvHeapInit+0xac>)
 8008f98:	4413      	add	r3, r2
 8008f9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fa0:	4a1d      	ldr	r2, [pc, #116]	; (8009018 <prvHeapInit+0xb0>)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fa6:	4b1c      	ldr	r3, [pc, #112]	; (8009018 <prvHeapInit+0xb0>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0307 	bic.w	r3, r3, #7
 8008fc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a15      	ldr	r2, [pc, #84]	; (800901c <prvHeapInit+0xb4>)
 8008fc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fca:	4b14      	ldr	r3, [pc, #80]	; (800901c <prvHeapInit+0xb4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fd2:	4b12      	ldr	r3, [pc, #72]	; (800901c <prvHeapInit+0xb4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <prvHeapInit+0xb4>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	4a0a      	ldr	r2, [pc, #40]	; (8009020 <prvHeapInit+0xb8>)
 8008ff6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	4a09      	ldr	r2, [pc, #36]	; (8009024 <prvHeapInit+0xbc>)
 8008ffe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009000:	4b09      	ldr	r3, [pc, #36]	; (8009028 <prvHeapInit+0xc0>)
 8009002:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009006:	601a      	str	r2, [r3, #0]
}
 8009008:	bf00      	nop
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20001380 	.word	0x20001380
 8009018:	20002320 	.word	0x20002320
 800901c:	20002328 	.word	0x20002328
 8009020:	20002330 	.word	0x20002330
 8009024:	2000232c 	.word	0x2000232c
 8009028:	20002334 	.word	0x20002334

0800902c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009034:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <prvInsertBlockIntoFreeList+0xa8>)
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	e002      	b.n	8009040 <prvInsertBlockIntoFreeList+0x14>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	429a      	cmp	r2, r3
 8009048:	d8f7      	bhi.n	800903a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4413      	add	r3, r2
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d108      	bne.n	800906e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	441a      	add	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	441a      	add	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d118      	bne.n	80090b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <prvInsertBlockIntoFreeList+0xac>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d00d      	beq.n	80090aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e008      	b.n	80090bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090aa:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <prvInsertBlockIntoFreeList+0xac>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	e003      	b.n	80090bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d002      	beq.n	80090ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ca:	bf00      	nop
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bc80      	pop	{r7}
 80090d2:	4770      	bx	lr
 80090d4:	20002320 	.word	0x20002320
 80090d8:	20002328 	.word	0x20002328

080090dc <__itoa>:
 80090dc:	1e93      	subs	r3, r2, #2
 80090de:	2b22      	cmp	r3, #34	; 0x22
 80090e0:	b510      	push	{r4, lr}
 80090e2:	460c      	mov	r4, r1
 80090e4:	d904      	bls.n	80090f0 <__itoa+0x14>
 80090e6:	2300      	movs	r3, #0
 80090e8:	461c      	mov	r4, r3
 80090ea:	700b      	strb	r3, [r1, #0]
 80090ec:	4620      	mov	r0, r4
 80090ee:	bd10      	pop	{r4, pc}
 80090f0:	2a0a      	cmp	r2, #10
 80090f2:	d109      	bne.n	8009108 <__itoa+0x2c>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	da07      	bge.n	8009108 <__itoa+0x2c>
 80090f8:	232d      	movs	r3, #45	; 0x2d
 80090fa:	700b      	strb	r3, [r1, #0]
 80090fc:	2101      	movs	r1, #1
 80090fe:	4240      	negs	r0, r0
 8009100:	4421      	add	r1, r4
 8009102:	f000 f805 	bl	8009110 <__utoa>
 8009106:	e7f1      	b.n	80090ec <__itoa+0x10>
 8009108:	2100      	movs	r1, #0
 800910a:	e7f9      	b.n	8009100 <__itoa+0x24>

0800910c <itoa>:
 800910c:	f7ff bfe6 	b.w	80090dc <__itoa>

08009110 <__utoa>:
 8009110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009112:	b08b      	sub	sp, #44	; 0x2c
 8009114:	4605      	mov	r5, r0
 8009116:	460b      	mov	r3, r1
 8009118:	466e      	mov	r6, sp
 800911a:	4c1d      	ldr	r4, [pc, #116]	; (8009190 <__utoa+0x80>)
 800911c:	f104 0c20 	add.w	ip, r4, #32
 8009120:	4637      	mov	r7, r6
 8009122:	6820      	ldr	r0, [r4, #0]
 8009124:	6861      	ldr	r1, [r4, #4]
 8009126:	3408      	adds	r4, #8
 8009128:	c703      	stmia	r7!, {r0, r1}
 800912a:	4564      	cmp	r4, ip
 800912c:	463e      	mov	r6, r7
 800912e:	d1f7      	bne.n	8009120 <__utoa+0x10>
 8009130:	7921      	ldrb	r1, [r4, #4]
 8009132:	6820      	ldr	r0, [r4, #0]
 8009134:	7139      	strb	r1, [r7, #4]
 8009136:	1e91      	subs	r1, r2, #2
 8009138:	2922      	cmp	r1, #34	; 0x22
 800913a:	6038      	str	r0, [r7, #0]
 800913c:	f04f 0100 	mov.w	r1, #0
 8009140:	d904      	bls.n	800914c <__utoa+0x3c>
 8009142:	7019      	strb	r1, [r3, #0]
 8009144:	460b      	mov	r3, r1
 8009146:	4618      	mov	r0, r3
 8009148:	b00b      	add	sp, #44	; 0x2c
 800914a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914c:	1e58      	subs	r0, r3, #1
 800914e:	4684      	mov	ip, r0
 8009150:	fbb5 f7f2 	udiv	r7, r5, r2
 8009154:	fb02 5617 	mls	r6, r2, r7, r5
 8009158:	3628      	adds	r6, #40	; 0x28
 800915a:	446e      	add	r6, sp
 800915c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009160:	460c      	mov	r4, r1
 8009162:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009166:	462e      	mov	r6, r5
 8009168:	42b2      	cmp	r2, r6
 800916a:	463d      	mov	r5, r7
 800916c:	f101 0101 	add.w	r1, r1, #1
 8009170:	d9ee      	bls.n	8009150 <__utoa+0x40>
 8009172:	2200      	movs	r2, #0
 8009174:	545a      	strb	r2, [r3, r1]
 8009176:	1919      	adds	r1, r3, r4
 8009178:	1aa5      	subs	r5, r4, r2
 800917a:	42aa      	cmp	r2, r5
 800917c:	dae3      	bge.n	8009146 <__utoa+0x36>
 800917e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009182:	780e      	ldrb	r6, [r1, #0]
 8009184:	3201      	adds	r2, #1
 8009186:	7006      	strb	r6, [r0, #0]
 8009188:	f801 5901 	strb.w	r5, [r1], #-1
 800918c:	e7f4      	b.n	8009178 <__utoa+0x68>
 800918e:	bf00      	nop
 8009190:	08009c62 	.word	0x08009c62

08009194 <memset>:
 8009194:	4603      	mov	r3, r0
 8009196:	4402      	add	r2, r0
 8009198:	4293      	cmp	r3, r2
 800919a:	d100      	bne.n	800919e <memset+0xa>
 800919c:	4770      	bx	lr
 800919e:	f803 1b01 	strb.w	r1, [r3], #1
 80091a2:	e7f9      	b.n	8009198 <memset+0x4>

080091a4 <__libc_init_array>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	2600      	movs	r6, #0
 80091a8:	4d0c      	ldr	r5, [pc, #48]	; (80091dc <__libc_init_array+0x38>)
 80091aa:	4c0d      	ldr	r4, [pc, #52]	; (80091e0 <__libc_init_array+0x3c>)
 80091ac:	1b64      	subs	r4, r4, r5
 80091ae:	10a4      	asrs	r4, r4, #2
 80091b0:	42a6      	cmp	r6, r4
 80091b2:	d109      	bne.n	80091c8 <__libc_init_array+0x24>
 80091b4:	f000 f830 	bl	8009218 <_init>
 80091b8:	2600      	movs	r6, #0
 80091ba:	4d0a      	ldr	r5, [pc, #40]	; (80091e4 <__libc_init_array+0x40>)
 80091bc:	4c0a      	ldr	r4, [pc, #40]	; (80091e8 <__libc_init_array+0x44>)
 80091be:	1b64      	subs	r4, r4, r5
 80091c0:	10a4      	asrs	r4, r4, #2
 80091c2:	42a6      	cmp	r6, r4
 80091c4:	d105      	bne.n	80091d2 <__libc_init_array+0x2e>
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091cc:	4798      	blx	r3
 80091ce:	3601      	adds	r6, #1
 80091d0:	e7ee      	b.n	80091b0 <__libc_init_array+0xc>
 80091d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d6:	4798      	blx	r3
 80091d8:	3601      	adds	r6, #1
 80091da:	e7f2      	b.n	80091c2 <__libc_init_array+0x1e>
 80091dc:	08009c88 	.word	0x08009c88
 80091e0:	08009c88 	.word	0x08009c88
 80091e4:	08009c88 	.word	0x08009c88
 80091e8:	08009c8c 	.word	0x08009c8c

080091ec <strcpy>:
 80091ec:	4603      	mov	r3, r0
 80091ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091f2:	f803 2b01 	strb.w	r2, [r3], #1
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	d1f9      	bne.n	80091ee <strcpy+0x2>
 80091fa:	4770      	bx	lr

080091fc <memcpy>:
 80091fc:	440a      	add	r2, r1
 80091fe:	4291      	cmp	r1, r2
 8009200:	f100 33ff 	add.w	r3, r0, #4294967295
 8009204:	d100      	bne.n	8009208 <memcpy+0xc>
 8009206:	4770      	bx	lr
 8009208:	b510      	push	{r4, lr}
 800920a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920e:	4291      	cmp	r1, r2
 8009210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009214:	d1f9      	bne.n	800920a <memcpy+0xe>
 8009216:	bd10      	pop	{r4, pc}

08009218 <_init>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	bf00      	nop
 800921c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921e:	bc08      	pop	{r3}
 8009220:	469e      	mov	lr, r3
 8009222:	4770      	bx	lr

08009224 <_fini>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	bf00      	nop
 8009228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922a:	bc08      	pop	{r3}
 800922c:	469e      	mov	lr, r3
 800922e:	4770      	bx	lr
