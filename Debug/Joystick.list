
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  080097d0  080097d0  000197d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c4  0800a5c4  00020824  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5c4  0800a5c4  00020824  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5c4  0800a5c4  00020824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5c4  0800a5c4  0001a5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5c8  0800a5c8  0001a5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000824  20000000  0800a5cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025cc  20000824  0800adf0  00020824  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002df0  0800adf0  00022df0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020824  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002084d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027aca  00000000  00000000  00020890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004da1  00000000  00000000  0004835a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012e0a  00000000  00000000  0004d0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a38  00000000  00000000  0005ff08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000170a  00000000  00000000  00061940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bf90  00000000  00000000  0006304a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a6ae  00000000  00000000  0007efda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e412  00000000  00000000  000a9688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005740  00000000  00000000  00147a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000824 	.word	0x20000824
 800012c:	00000000 	.word	0x00000000
 8000130:	080097b8 	.word	0x080097b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000828 	.word	0x20000828
 800014c:	080097b8 	.word	0x080097b8

08000150 <getPlayer>:


//----------------------------------------------------------------------------------------------------------------------------------------------


player_t getPlayer(){
 8000150:	4603      	mov	r3, r0

	return Player;
 8000152:	4a03      	ldr	r2, [pc, #12]	; (8000160 <getPlayer+0x10>)
 8000154:	ca03      	ldmia	r2!, {r0, r1}
 8000156:	6018      	str	r0, [r3, #0]
 8000158:	6059      	str	r1, [r3, #4]
}
 800015a:	4618      	mov	r0, r3
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200008b4 	.word	0x200008b4

08000164 <getDisparodisparo>:

uint8_t getDisparodisparo(){
	return Disparo.disparo;
}
 8000164:	4b01      	ldr	r3, [pc, #4]	; (800016c <getDisparodisparo+0x8>)
 8000166:	7898      	ldrb	r0, [r3, #2]
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	200008ac 	.word	0x200008ac

08000170 <getCantidad_Aliens_Vivos>:

uint8_t getCantidad_Aliens_Vivos(){
	return movimiento_Aliens.cantidad_aliens_vivos;
}
 8000170:	4b01      	ldr	r3, [pc, #4]	; (8000178 <getCantidad_Aliens_Vivos+0x8>)
 8000172:	7998      	ldrb	r0, [r3, #6]
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	200008f4 	.word	0x200008f4

0800017c <actualizarPantalla>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void actualizarPantalla(){
 800017c:	b508      	push	{r3, lr}

    SSD1306_UpdateScreen(); // update screen
 800017e:	f002 fdd1 	bl	8002d24 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000182:	2000      	movs	r0, #0
 8000184:	f002 faa2 	bl	80026cc <SSD1306_Fill>
}
 8000188:	bd08      	pop	{r3, pc}
	...

0800018c <playerInit>:


void playerInit(){

	Player.posicion_X = 64;
 800018c:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <playerInit+0x18>)
 800018e:	2240      	movs	r2, #64	; 0x40
 8000190:	801a      	strh	r2, [r3, #0]
	Player.vivo = true;
 8000192:	2201      	movs	r2, #1
 8000194:	709a      	strb	r2, [r3, #2]
	Player.puntaje = 0;
 8000196:	2200      	movs	r2, #0
 8000198:	809a      	strh	r2, [r3, #4]
	Player.vidas = 3;
 800019a:	2103      	movs	r1, #3
 800019c:	70d9      	strb	r1, [r3, #3]
	Player.nivel = 0;
 800019e:	719a      	strb	r2, [r3, #6]

}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	200008b4 	.word	0x200008b4

080001a8 <plotPlayer>:

void plotPlayer(uint8_t direccion){
 80001a8:	b500      	push	{lr}
 80001aa:	b083      	sub	sp, #12

	if(Player.vivo == true){
 80001ac:	4b1c      	ldr	r3, [pc, #112]	; (8000220 <plotPlayer+0x78>)
 80001ae:	789b      	ldrb	r3, [r3, #2]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d128      	bne.n	8000206 <plotPlayer+0x5e>

		if(direccion == derecha){
 80001b4:	2802      	cmp	r0, #2
 80001b6:	d00f      	beq.n	80001d8 <plotPlayer+0x30>
			else{
				Player.posicion_X = Player.posicion_X + 4;
			}

		}
		else if(direccion == izquierda){
 80001b8:	2803      	cmp	r0, #3
 80001ba:	d019      	beq.n	80001f0 <plotPlayer+0x48>
			else{
				Player.posicion_X = Player.posicion_X - 4;
			}
		}

		SSD1306_DrawBitmap(Player.posicion_X, 56, nave, 8,8,1);
 80001bc:	2301      	movs	r3, #1
 80001be:	9301      	str	r3, [sp, #4]
 80001c0:	2308      	movs	r3, #8
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <plotPlayer+0x7c>)
 80001c6:	2138      	movs	r1, #56	; 0x38
 80001c8:	4815      	ldr	r0, [pc, #84]	; (8000220 <plotPlayer+0x78>)
 80001ca:	f9b0 0000 	ldrsh.w	r0, [r0]
 80001ce:	f002 fab5 	bl	800273c <SSD1306_DrawBitmap>

		SSD1306_DrawBitmap(Player.posicion_X, 56, nave_explotada, 8,8,1);
	}


}
 80001d2:	b003      	add	sp, #12
 80001d4:	f85d fb04 	ldr.w	pc, [sp], #4
			if(Player.posicion_X >= 120){
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <plotPlayer+0x78>)
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	2b77      	cmp	r3, #119	; 0x77
 80001de:	d903      	bls.n	80001e8 <plotPlayer+0x40>
				Player.posicion_X = 120;
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <plotPlayer+0x78>)
 80001e2:	2278      	movs	r2, #120	; 0x78
 80001e4:	801a      	strh	r2, [r3, #0]
 80001e6:	e7e9      	b.n	80001bc <plotPlayer+0x14>
				Player.posicion_X = Player.posicion_X + 4;
 80001e8:	3304      	adds	r3, #4
 80001ea:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <plotPlayer+0x78>)
 80001ec:	8013      	strh	r3, [r2, #0]
 80001ee:	e7e5      	b.n	80001bc <plotPlayer+0x14>
			if(Player.posicion_X <= 0){
 80001f0:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <plotPlayer+0x78>)
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	b91b      	cbnz	r3, 80001fe <plotPlayer+0x56>
				Player.posicion_X = 0;
 80001f6:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <plotPlayer+0x78>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	801a      	strh	r2, [r3, #0]
 80001fc:	e7de      	b.n	80001bc <plotPlayer+0x14>
				Player.posicion_X = Player.posicion_X - 4;
 80001fe:	3b04      	subs	r3, #4
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <plotPlayer+0x78>)
 8000202:	8013      	strh	r3, [r2, #0]
 8000204:	e7da      	b.n	80001bc <plotPlayer+0x14>
		SSD1306_DrawBitmap(Player.posicion_X, 56, nave_explotada, 8,8,1);
 8000206:	2301      	movs	r3, #1
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	2308      	movs	r3, #8
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	4a06      	ldr	r2, [pc, #24]	; (8000228 <plotPlayer+0x80>)
 8000210:	2138      	movs	r1, #56	; 0x38
 8000212:	4803      	ldr	r0, [pc, #12]	; (8000220 <plotPlayer+0x78>)
 8000214:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000218:	f002 fa90 	bl	800273c <SSD1306_DrawBitmap>
}
 800021c:	e7d9      	b.n	80001d2 <plotPlayer+0x2a>
 800021e:	bf00      	nop
 8000220:	200008b4 	.word	0x200008b4
 8000224:	08009fb8 	.word	0x08009fb8
 8000228:	08009fc0 	.word	0x08009fc0

0800022c <InvaderInit>:



void InvaderInit(){

	movimiento_Aliens.orientacion = mov_derecha;
 800022c:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <InvaderInit+0x98>)
 800022e:	f04f 0c00 	mov.w	ip, #0
 8000232:	f883 c000 	strb.w	ip, [r3]
	movimiento_Aliens.alien_columna_derecha = NUM_ALIEN_COLUMNA - 1;
 8000236:	2206      	movs	r2, #6
 8000238:	715a      	strb	r2, [r3, #5]
	movimiento_Aliens.alien_columna_izquierda = 0;
 800023a:	f883 c004 	strb.w	ip, [r3, #4]

	//Inicializacion cantidad aliens vivos.
	movimiento_Aliens.cantidad_aliens_vivos = 21;
 800023e:	2215      	movs	r2, #21
 8000240:	719a      	strb	r2, [r3, #6]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000242:	f1bc 0f02 	cmp.w	ip, #2
 8000246:	d836      	bhi.n	80002b6 <InvaderInit+0x8a>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000248:	2300      	movs	r3, #0
 800024a:	2b06      	cmp	r3, #6
 800024c:	d82e      	bhi.n	80002ac <InvaderInit+0x80>
void InvaderInit(){
 800024e:	b410      	push	{r4}
			Alien[y][x].posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 8000250:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000254:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000258:	320b      	adds	r2, #11
 800025a:	4c1b      	ldr	r4, [pc, #108]	; (80002c8 <InvaderInit+0x9c>)
 800025c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000260:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8000264:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000268:	4408      	add	r0, r1
 800026a:	1821      	adds	r1, r4, r0
 800026c:	5422      	strb	r2, [r4, r0]
			Alien[y][x].posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 800026e:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8000272:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8000276:	704a      	strb	r2, [r1, #1]
			Alien[y][x].vivo = true;
 8000278:	2201      	movs	r2, #1
 800027a:	708a      	strb	r2, [r1, #2]
			Alien[y][x].explosion = false;
 800027c:	2200      	movs	r2, #0
 800027e:	70ca      	strb	r2, [r1, #3]
			Alien[y][x].conteo_explosion = 2;
 8000280:	2202      	movs	r2, #2
 8000282:	710a      	strb	r2, [r1, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000284:	3301      	adds	r3, #1
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b06      	cmp	r3, #6
 800028a:	d9e1      	bls.n	8000250 <InvaderInit+0x24>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800028c:	f10c 0c01 	add.w	ip, ip, #1
 8000290:	fa5f fc8c 	uxtb.w	ip, ip
 8000294:	f1bc 0f02 	cmp.w	ip, #2
 8000298:	d801      	bhi.n	800029e <InvaderInit+0x72>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800029a:	2300      	movs	r3, #0
 800029c:	e7f4      	b.n	8000288 <InvaderInit+0x5c>
		}
	}


	//Reinicio velocidad horizontal de los aliens
	dificultad.velocidad_horizontal = 8;
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <InvaderInit+0xa0>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	701a      	strb	r2, [r3, #0]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 80002a4:	2202      	movs	r2, #2
 80002a6:	711a      	strb	r2, [r3, #4]


}
 80002a8:	bc10      	pop	{r4}
 80002aa:	4770      	bx	lr
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002ac:	f10c 0c01 	add.w	ip, ip, #1
 80002b0:	fa5f fc8c 	uxtb.w	ip, ip
 80002b4:	e7c5      	b.n	8000242 <InvaderInit+0x16>
	dificultad.velocidad_horizontal = 8;
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <InvaderInit+0xa0>)
 80002b8:	2208      	movs	r2, #8
 80002ba:	701a      	strb	r2, [r3, #0]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 80002bc:	2202      	movs	r2, #2
 80002be:	711a      	strb	r2, [r3, #4]
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	200008f4 	.word	0x200008f4
 80002c8:	20000840 	.word	0x20000840
 80002cc:	200008ec 	.word	0x200008ec

080002d0 <disparoInit>:


void disparoInit(){

	//Inicializacion del disparo del Player
	Disparo.posicion_x = 0;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <disparoInit+0x10>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80002d6:	2132      	movs	r1, #50	; 0x32
 80002d8:	7059      	strb	r1, [r3, #1]
	Disparo.disparo = false;
 80002da:	709a      	strb	r2, [r3, #2]

}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	200008ac 	.word	0x200008ac

080002e4 <disparar>:


void disparar(){
 80002e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002e8:	b083      	sub	sp, #12

			if(Disparo.disparo == true){
 80002ea:	4b65      	ldr	r3, [pc, #404]	; (8000480 <disparar+0x19c>)
 80002ec:	789b      	ldrb	r3, [r3, #2]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d001      	beq.n	80002f6 <disparar+0x12>
					tamano_alien = TAMANO_ALIEN_BOTTOM_ANCHURA;
					break;

				}

				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002f2:	2700      	movs	r7, #0
 80002f4:	e0b4      	b.n	8000460 <disparar+0x17c>
				SSD1306_DrawLine(Disparo.posicion_x + 4, Disparo.posicion_y, Disparo.posicion_x + 4, Disparo.posicion_y + 2, 1);
 80002f6:	4c62      	ldr	r4, [pc, #392]	; (8000480 <disparar+0x19c>)
 80002f8:	7820      	ldrb	r0, [r4, #0]
 80002fa:	3004      	adds	r0, #4
 80002fc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8000300:	b289      	uxth	r1, r1
 8000302:	1c8b      	adds	r3, r1, #2
 8000304:	2201      	movs	r2, #1
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	b29b      	uxth	r3, r3
 800030a:	4602      	mov	r2, r0
 800030c:	f002 fac5 	bl	800289a <SSD1306_DrawLine>
				Disparo.posicion_y = Disparo.posicion_y - VELOCIDAD_DISPARO_PLAYER;
 8000310:	7863      	ldrb	r3, [r4, #1]
 8000312:	3b04      	subs	r3, #4
 8000314:	b25b      	sxtb	r3, r3
 8000316:	7063      	strb	r3, [r4, #1]
				if(Disparo.posicion_y <= 0){
 8000318:	2b00      	cmp	r3, #0
 800031a:	dcea      	bgt.n	80002f2 <disparar+0xe>
					Disparo.disparo = false;
 800031c:	2200      	movs	r2, #0
 800031e:	70a2      	strb	r2, [r4, #2]
					Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 8000320:	2232      	movs	r2, #50	; 0x32
 8000322:	7062      	strb	r2, [r4, #1]
 8000324:	e7e5      	b.n	80002f2 <disparar+0xe>
					tamano_alien = TAMANO_ALIEN_MIDDLE_ANCHURA;
 8000326:	f04f 080b 	mov.w	r8, #11
 800032a:	e0a4      	b.n	8000476 <disparar+0x192>
				switch(y){
 800032c:	f04f 0808 	mov.w	r8, #8
 8000330:	e0a1      	b.n	8000476 <disparar+0x192>
									switch(y){
									case 0:
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_TOP + Player.nivel);
										break;
									case 1:
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_MIDDLE + Player.nivel);
 8000332:	4a54      	ldr	r2, [pc, #336]	; (8000484 <disparar+0x1a0>)
 8000334:	8893      	ldrh	r3, [r2, #4]
 8000336:	f892 c006 	ldrb.w	ip, [r2, #6]
 800033a:	4463      	add	r3, ip
 800033c:	3314      	adds	r3, #20
 800033e:	8093      	strh	r3, [r2, #4]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(Alien[y][x].explosion == true){
 8000340:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000344:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000348:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800034c:	4413      	add	r3, r2
 800034e:	4a4e      	ldr	r2, [pc, #312]	; (8000488 <disparar+0x1a4>)
 8000350:	4413      	add	r3, r2
 8000352:	78db      	ldrb	r3, [r3, #3]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d067      	beq.n	8000428 <disparar+0x144>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000358:	3401      	adds	r4, #1
 800035a:	b2e4      	uxtb	r4, r4
 800035c:	2c06      	cmp	r4, #6
 800035e:	d87d      	bhi.n	800045c <disparar+0x178>
					if( (Disparo.posicion_x + 1 >= Alien[y][x].posicion_X) &  (Disparo.posicion_x + 1 <= (Alien[y][x].posicion_X + tamano_alien))
 8000360:	4947      	ldr	r1, [pc, #284]	; (8000480 <disparar+0x19c>)
 8000362:	f891 c000 	ldrb.w	ip, [r1]
 8000366:	f10c 0e01 	add.w	lr, ip, #1
 800036a:	4626      	mov	r6, r4
 800036c:	4846      	ldr	r0, [pc, #280]	; (8000488 <disparar+0x1a4>)
 800036e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000372:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000376:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800037a:	4413      	add	r3, r2
 800037c:	18c2      	adds	r2, r0, r3
 800037e:	56c0      	ldrsb	r0, [r0, r3]
 8000380:	eb08 0900 	add.w	r9, r8, r0
 8000384:	4586      	cmp	lr, r0
 8000386:	bfb4      	ite	lt
 8000388:	2300      	movlt	r3, #0
 800038a:	2301      	movge	r3, #1
 800038c:	45cc      	cmp	ip, r9
 800038e:	bfa8      	it	ge
 8000390:	2300      	movge	r3, #0
							& ((Disparo.posicion_y) >= Alien[y][x].posicion_Y) & (Disparo.posicion_y <= Alien[y][x].posicion_Y + TAMANO_ALIEN_ALTURA)){
 8000392:	f991 c001 	ldrsb.w	ip, [r1, #1]
 8000396:	7851      	ldrb	r1, [r2, #1]
 8000398:	f101 0208 	add.w	r2, r1, #8
 800039c:	4594      	cmp	ip, r2
 800039e:	bfcc      	ite	gt
 80003a0:	2200      	movgt	r2, #0
 80003a2:	2201      	movle	r2, #1
					if( (Disparo.posicion_x + 1 >= Alien[y][x].posicion_X) &  (Disparo.posicion_x + 1 <= (Alien[y][x].posicion_X + tamano_alien))
 80003a4:	458c      	cmp	ip, r1
 80003a6:	bfb4      	ite	lt
 80003a8:	2300      	movlt	r3, #0
 80003aa:	f003 0301 	andge.w	r3, r3, #1
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0c6      	beq.n	8000340 <disparar+0x5c>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	d0c4      	beq.n	8000340 <disparar+0x5c>
								if(Alien[y][x].vivo == true){
 80003b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80003ba:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80003be:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80003c2:	4413      	add	r3, r2
 80003c4:	4a30      	ldr	r2, [pc, #192]	; (8000488 <disparar+0x1a4>)
 80003c6:	4413      	add	r3, r2
 80003c8:	789b      	ldrb	r3, [r3, #2]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d1b8      	bne.n	8000340 <disparar+0x5c>
									Alien[y][x].vivo = false;
 80003ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80003d2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80003d6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80003da:	4413      	add	r3, r2
 80003dc:	4a2a      	ldr	r2, [pc, #168]	; (8000488 <disparar+0x1a4>)
 80003de:	4413      	add	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	709a      	strb	r2, [r3, #2]
									Alien[y][x].explosion = true;
 80003e4:	f04f 0c01 	mov.w	ip, #1
 80003e8:	f883 c003 	strb.w	ip, [r3, #3]
									Disparo.disparo = false;
 80003ec:	4b24      	ldr	r3, [pc, #144]	; (8000480 <disparar+0x19c>)
 80003ee:	709a      	strb	r2, [r3, #2]
									Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80003f0:	2232      	movs	r2, #50	; 0x32
 80003f2:	705a      	strb	r2, [r3, #1]
									movimiento_Aliens.cantidad_aliens_vivos -=1;
 80003f4:	4a25      	ldr	r2, [pc, #148]	; (800048c <disparar+0x1a8>)
 80003f6:	7993      	ldrb	r3, [r2, #6]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	7193      	strb	r3, [r2, #6]
									switch(y){
 80003fc:	4567      	cmp	r7, ip
 80003fe:	d098      	beq.n	8000332 <disparar+0x4e>
 8000400:	2f02      	cmp	r7, #2
 8000402:	d009      	beq.n	8000418 <disparar+0x134>
 8000404:	2f00      	cmp	r7, #0
 8000406:	d19b      	bne.n	8000340 <disparar+0x5c>
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_TOP + Player.nivel);
 8000408:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <disparar+0x1a0>)
 800040a:	8893      	ldrh	r3, [r2, #4]
 800040c:	f892 c006 	ldrb.w	ip, [r2, #6]
 8000410:	4463      	add	r3, ip
 8000412:	331e      	adds	r3, #30
 8000414:	8093      	strh	r3, [r2, #4]
										break;
 8000416:	e793      	b.n	8000340 <disparar+0x5c>
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_BOTTOM + Player.nivel);
 8000418:	4a1a      	ldr	r2, [pc, #104]	; (8000484 <disparar+0x1a0>)
 800041a:	8893      	ldrh	r3, [r2, #4]
 800041c:	f892 c006 	ldrb.w	ip, [r2, #6]
 8000420:	4463      	add	r3, ip
 8000422:	330a      	adds	r3, #10
 8000424:	8093      	strh	r3, [r2, #4]
										break;
 8000426:	e78b      	b.n	8000340 <disparar+0x5c>
						SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,explosion,16,8,1);
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	2308      	movs	r3, #8
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2310      	movs	r3, #16
 8000430:	4a17      	ldr	r2, [pc, #92]	; (8000490 <disparar+0x1ac>)
 8000432:	f002 f983 	bl	800273c <SSD1306_DrawBitmap>
						Alien[y][x].conteo_explosion--;
 8000436:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800043a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800043e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000442:	4413      	add	r3, r2
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <disparar+0x1a4>)
 8000446:	441a      	add	r2, r3
 8000448:	7913      	ldrb	r3, [r2, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	b2db      	uxtb	r3, r3
 800044e:	7113      	strb	r3, [r2, #4]

						if(Alien[y][x].conteo_explosion == 0){
 8000450:	2b00      	cmp	r3, #0
 8000452:	d181      	bne.n	8000358 <disparar+0x74>
							Alien[y][x].explosion = false;
 8000454:	4613      	mov	r3, r2
 8000456:	2200      	movs	r2, #0
 8000458:	70da      	strb	r2, [r3, #3]
 800045a:	e77d      	b.n	8000358 <disparar+0x74>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800045c:	3701      	adds	r7, #1
 800045e:	b2ff      	uxtb	r7, r7
 8000460:	2f02      	cmp	r7, #2
 8000462:	d80a      	bhi.n	800047a <disparar+0x196>
				switch(y){
 8000464:	463d      	mov	r5, r7
 8000466:	2f01      	cmp	r7, #1
 8000468:	f43f af5d 	beq.w	8000326 <disparar+0x42>
 800046c:	2f02      	cmp	r7, #2
 800046e:	f47f af5d 	bne.w	800032c <disparar+0x48>
					tamano_alien = TAMANO_ALIEN_BOTTOM_ANCHURA;
 8000472:	f04f 080c 	mov.w	r8, #12
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000476:	2400      	movs	r4, #0
 8000478:	e770      	b.n	800035c <disparar+0x78>



				}
			}
}
 800047a:	b003      	add	sp, #12
 800047c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000480:	200008ac 	.word	0x200008ac
 8000484:	200008b4 	.word	0x200008b4
 8000488:	20000840 	.word	0x20000840
 800048c:	200008f4 	.word	0x200008f4
 8000490:	08009fa0 	.word	0x08009fa0

08000494 <disparoAliens>:


void disparoAliens(){


	if(movimiento_Aliens.cantidad_aliens_vivos != 0){	//Si no hay aliens vivos.
 8000494:	4b41      	ldr	r3, [pc, #260]	; (800059c <disparoAliens+0x108>)
 8000496:	799b      	ldrb	r3, [r3, #6]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d07e      	beq.n	800059a <disparoAliens+0x106>
void disparoAliens(){
 800049c:	b510      	push	{r4, lr}
 800049e:	b082      	sub	sp, #8

				if(Disparo_Aliens.disparo == true){
 80004a0:	4b3f      	ldr	r3, [pc, #252]	; (80005a0 <disparoAliens+0x10c>)
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d043      	beq.n	8000530 <disparoAliens+0x9c>
					uint8_t flag = false;

					while(flag != true){


						uint8_t fila = rand() % NUM_ALIEN_FILA;
 80004a8:	f008 f940 	bl	800872c <rand>
 80004ac:	4c3d      	ldr	r4, [pc, #244]	; (80005a4 <disparoAliens+0x110>)
 80004ae:	fb84 3400 	smull	r3, r4, r4, r0
 80004b2:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 80004b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80004ba:	1b04      	subs	r4, r0, r4
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 80004bc:	f008 f936 	bl	800872c <rand>
 80004c0:	4a39      	ldr	r2, [pc, #228]	; (80005a8 <disparoAliens+0x114>)
 80004c2:	fb82 3200 	smull	r3, r2, r2, r0
 80004c6:	4402      	add	r2, r0
 80004c8:	17c3      	asrs	r3, r0, #31
 80004ca:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80004ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80004d2:	1ac3      	subs	r3, r0, r3

						if(Alien[fila][columna].vivo == true){
 80004d4:	b2e4      	uxtb	r4, r4
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80004dc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80004e0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80004e4:	4411      	add	r1, r2
 80004e6:	4a31      	ldr	r2, [pc, #196]	; (80005ac <disparoAliens+0x118>)
 80004e8:	440a      	add	r2, r1
 80004ea:	7892      	ldrb	r2, [r2, #2]
 80004ec:	2a01      	cmp	r2, #1
 80004ee:	d1db      	bne.n	80004a8 <disparoAliens+0x14>
							flag = true;
							Disparo_Aliens.disparo = true;
 80004f0:	4a2b      	ldr	r2, [pc, #172]	; (80005a0 <disparoAliens+0x10c>)
 80004f2:	2101      	movs	r1, #1
 80004f4:	7091      	strb	r1, [r2, #2]

							Disparo_Aliens.posicion_x = Alien[fila][columna].posicion_X + (TAMANO_ALIEN/2);
 80004f6:	492d      	ldr	r1, [pc, #180]	; (80005ac <disparoAliens+0x118>)
 80004f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004fc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000500:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8000504:	4423      	add	r3, r4
 8000506:	18c8      	adds	r0, r1, r3
 8000508:	5ccb      	ldrb	r3, [r1, r3]
 800050a:	3304      	adds	r3, #4
 800050c:	7013      	strb	r3, [r2, #0]
							Disparo_Aliens.posicion_y = Alien[fila][columna].posicion_Y + (TAMANO_ALIEN/2);
 800050e:	7843      	ldrb	r3, [r0, #1]
 8000510:	3304      	adds	r3, #4
 8000512:	7053      	strb	r3, [r2, #1]
						}

					}
				}

				SSD1306_DrawBitmap(Disparo_Aliens.posicion_x, Disparo_Aliens.posicion_y, AlienBombGfx, 2, 4, 1);
 8000514:	4822      	ldr	r0, [pc, #136]	; (80005a0 <disparoAliens+0x10c>)
 8000516:	2301      	movs	r3, #1
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2304      	movs	r3, #4
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2302      	movs	r3, #2
 8000520:	4a23      	ldr	r2, [pc, #140]	; (80005b0 <disparoAliens+0x11c>)
 8000522:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8000526:	7800      	ldrb	r0, [r0, #0]
 8000528:	f002 f908 	bl	800273c <SSD1306_DrawBitmap>

	}

}
 800052c:	b002      	add	sp, #8
 800052e:	bd10      	pop	{r4, pc}
					Disparo_Aliens.posicion_y = Disparo_Aliens.posicion_y + dificultad.velocidad_disparo_aliens;
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <disparoAliens+0x10c>)
 8000532:	7853      	ldrb	r3, [r2, #1]
 8000534:	491f      	ldr	r1, [pc, #124]	; (80005b4 <disparoAliens+0x120>)
 8000536:	7889      	ldrb	r1, [r1, #2]
 8000538:	440b      	add	r3, r1
 800053a:	b25b      	sxtb	r3, r3
 800053c:	7053      	strb	r3, [r2, #1]
					if( (Disparo_Aliens.posicion_x + 1 >= Player.posicion_X) &  (Disparo_Aliens.posicion_x + 1 <= Player.posicion_X + TAMANO_PLAYER_ANCHURA)
 800053e:	7811      	ldrb	r1, [r2, #0]
 8000540:	1c4a      	adds	r2, r1, #1
 8000542:	481d      	ldr	r0, [pc, #116]	; (80005b8 <disparoAliens+0x124>)
 8000544:	8800      	ldrh	r0, [r0, #0]
 8000546:	1d44      	adds	r4, r0, #5
 8000548:	4282      	cmp	r2, r0
 800054a:	bfb4      	ite	lt
 800054c:	2200      	movlt	r2, #0
 800054e:	2201      	movge	r2, #1
 8000550:	42a1      	cmp	r1, r4
 8000552:	bfc8      	it	gt
 8000554:	2200      	movgt	r2, #0
							& ((Disparo_Aliens.posicion_y) >= TOTAL_PIXELES_Y-TAMANO_NAVE_Y) & (Disparo.posicion_y <= TOTAL_PIXELES_Y)){
 8000556:	4919      	ldr	r1, [pc, #100]	; (80005bc <disparoAliens+0x128>)
 8000558:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800055c:	2940      	cmp	r1, #64	; 0x40
 800055e:	bfcc      	ite	gt
 8000560:	2100      	movgt	r1, #0
 8000562:	2101      	movle	r1, #1
					if( (Disparo_Aliens.posicion_x + 1 >= Player.posicion_X) &  (Disparo_Aliens.posicion_x + 1 <= Player.posicion_X + TAMANO_PLAYER_ANCHURA)
 8000564:	2b37      	cmp	r3, #55	; 0x37
 8000566:	bfd4      	ite	le
 8000568:	2200      	movle	r2, #0
 800056a:	f002 0201 	andgt.w	r2, r2, #1
 800056e:	b172      	cbz	r2, 800058e <disparoAliens+0xfa>
 8000570:	b169      	cbz	r1, 800058e <disparoAliens+0xfa>
						Disparo_Aliens.disparo = false;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <disparoAliens+0x10c>)
 8000574:	2200      	movs	r2, #0
 8000576:	709a      	strb	r2, [r3, #2]
						Player.vidas = Player.vidas - 1;
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <disparoAliens+0x124>)
 800057a:	78d3      	ldrb	r3, [r2, #3]
 800057c:	3b01      	subs	r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	70d3      	strb	r3, [r2, #3]
						if(Player.vidas == 0){
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1c6      	bne.n	8000514 <disparoAliens+0x80>
							Player.vivo = false;
 8000586:	4613      	mov	r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	709a      	strb	r2, [r3, #2]
 800058c:	e7c2      	b.n	8000514 <disparoAliens+0x80>
					else if(Disparo_Aliens.posicion_y >= 60){
 800058e:	2b3b      	cmp	r3, #59	; 0x3b
 8000590:	ddc0      	ble.n	8000514 <disparoAliens+0x80>
						Disparo_Aliens.disparo = false;
 8000592:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <disparoAliens+0x10c>)
 8000594:	2200      	movs	r2, #0
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	e7bc      	b.n	8000514 <disparoAliens+0x80>
 800059a:	4770      	bx	lr
 800059c:	200008f4 	.word	0x200008f4
 80005a0:	200008b0 	.word	0x200008b0
 80005a4:	55555556 	.word	0x55555556
 80005a8:	92492493 	.word	0x92492493
 80005ac:	20000840 	.word	0x20000840
 80005b0:	08009f3c 	.word	0x08009f3c
 80005b4:	200008ec 	.word	0x200008ec
 80005b8:	200008b4 	.word	0x200008b4
 80005bc:	200008ac 	.word	0x200008ac

080005c0 <BasesProcesarDisparo>:


}


void BasesProcesarDisparo(disparo_t *disparo, uint8_t condicion){
 80005c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	4604      	mov	r4, r0
 80005c8:	460d      	mov	r5, r1

	uint16_t resultado_or[3] = {0x00, 0x00, 0x00};
 80005ca:	2100      	movs	r1, #0
 80005cc:	f8ad 1000 	strh.w	r1, [sp]
 80005d0:	f8ad 1002 	strh.w	r1, [sp, #2]
 80005d4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint16_t bases_16bits;
	uint8_t k = 0, conteo = 0;

	for(uint8_t i=0;i<3;i++){
 80005d8:	e024      	b.n	8000624 <BasesProcesarDisparo+0x64>
	    for(uint8_t j=0; j<16;j++){
	        resultado_or[i] |= (j % 2 == 0) ? (bases[i][j] << 8) : bases[i][j];
 80005da:	486d      	ldr	r0, [pc, #436]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 80005dc:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80005e0:	f810 e003 	ldrb.w	lr, [r0, r3]
 80005e4:	a802      	add	r0, sp, #8
 80005e6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80005ea:	ea4c 0c0e 	orr.w	ip, ip, lr
 80005ee:	f822 cc08 	strh.w	ip, [r2, #-8]
	    for(uint8_t j=0; j<16;j++){
 80005f2:	3301      	adds	r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d812      	bhi.n	8000620 <BasesProcesarDisparo+0x60>
	        resultado_or[i] |= (j % 2 == 0) ? (bases[i][j] << 8) : bases[i][j];
 80005fa:	460a      	mov	r2, r1
 80005fc:	a802      	add	r0, sp, #8
 80005fe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8000602:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8000606:	f013 0f01 	tst.w	r3, #1
 800060a:	d1e6      	bne.n	80005da <BasesProcesarDisparo+0x1a>
 800060c:	4860      	ldr	r0, [pc, #384]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 800060e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8000612:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000616:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800061a:	fa0f fe8e 	sxth.w	lr, lr
 800061e:	e7e1      	b.n	80005e4 <BasesProcesarDisparo+0x24>
	for(uint8_t i=0;i<3;i++){
 8000620:	3101      	adds	r1, #1
 8000622:	b2c9      	uxtb	r1, r1
 8000624:	2902      	cmp	r1, #2
 8000626:	d801      	bhi.n	800062c <BasesProcesarDisparo+0x6c>
	    for(uint8_t j=0; j<16;j++){
 8000628:	2300      	movs	r3, #0
 800062a:	e7e4      	b.n	80005f6 <BasesProcesarDisparo+0x36>

	    }
	}

	if (disparo->posicion_y >= LIMITE_ARRIBA_BASE && disparo->posicion_y < LIMITE_ABAJO_BASE) {
 800062c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000630:	3b26      	subs	r3, #38	; 0x26
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b06      	cmp	r3, #6
 8000636:	f200 80a7 	bhi.w	8000788 <BasesProcesarDisparo+0x1c8>

		uint8_t pos_x = disparo->posicion_x;
 800063a:	7823      	ldrb	r3, [r4, #0]
	    if (condicion == 1) pos_x += POS_OFF_DISPARO_PLAYER;
 800063c:	2d01      	cmp	r5, #1
 800063e:	d001      	beq.n	8000644 <BasesProcesarDisparo+0x84>

	    for (int i = 0; i < 3; ++i) {
 8000640:	2600      	movs	r6, #0
 8000642:	e076      	b.n	8000732 <BasesProcesarDisparo+0x172>
	    if (condicion == 1) pos_x += POS_OFF_DISPARO_PLAYER;
 8000644:	3304      	adds	r3, #4
 8000646:	b2db      	uxtb	r3, r3
 8000648:	e7fa      	b.n	8000640 <BasesProcesarDisparo+0x80>
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO - 1 - desplazamiento));
	            }

	            if ((resultado & resultado_or[i]) != 0) {

	            	disparo->disparo = false;
 800064a:	2300      	movs	r3, #0
 800064c:	70a3      	strb	r3, [r4, #2]


	            	uint8_t desplazamiento_horiz = (rand() % RANDOM_MAX_3) + DESPLAZAMIENTO_MINIMO;
 800064e:	f008 f86d 	bl	800872c <rand>
 8000652:	4b50      	ldr	r3, [pc, #320]	; (8000794 <BasesProcesarDisparo+0x1d4>)
 8000654:	fb83 1300 	smull	r1, r3, r3, r0
 8000658:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800065c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000660:	1ac3      	subs	r3, r0, r3
 8000662:	b2d9      	uxtb	r1, r3
 8000664:	3102      	adds	r1, #2
 8000666:	b2c9      	uxtb	r1, r1
	            	uint8_t jmin = 2;

	            	if (condicion != 0) {
 8000668:	b11d      	cbz	r5, 8000672 <BasesProcesarDisparo+0xb2>
	                    disparo->posicion_y = POSICION_INICIAL_DISPARO;
 800066a:	2332      	movs	r3, #50	; 0x32
 800066c:	7063      	strb	r3, [r4, #1]
	                    //disparo->numero_disparos = 0;
	                    jmin = 1;
 800066e:	2201      	movs	r2, #1
 8000670:	e012      	b.n	8000698 <BasesProcesarDisparo+0xd8>
	            	uint8_t jmin = 2;
 8000672:	2202      	movs	r2, #2
	                }


	                for (uint8_t j=jmin; j<desplazamiento_horiz; j++) {
 8000674:	e010      	b.n	8000698 <BasesProcesarDisparo+0xd8>
	                    resultado += (1 << (OFFSET_DESPLAZAMIENTO + j - desplazamiento));
 8000676:	f102 030f 	add.w	r3, r2, #15
 800067a:	1bdb      	subs	r3, r3, r7
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f303 	lsl.w	r3, r0, r3
 8000682:	4443      	add	r3, r8
 8000684:	b29b      	uxth	r3, r3
	                    resultado += (1 << (OFFSET_DESPLAZAMIENTO - j - desplazamiento));
 8000686:	f1c2 040f 	rsb	r4, r2, #15
 800068a:	1be4      	subs	r4, r4, r7
 800068c:	40a0      	lsls	r0, r4
 800068e:	4403      	add	r3, r0
 8000690:	fa1f f883 	uxth.w	r8, r3
	                for (uint8_t j=jmin; j<desplazamiento_horiz; j++) {
 8000694:	3201      	adds	r2, #1
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	428a      	cmp	r2, r1
 800069a:	d3ec      	bcc.n	8000676 <BasesProcesarDisparo+0xb6>
	                }


	                for (uint8_t j=0; j<16; j++) {
 800069c:	2300      	movs	r3, #0
	uint8_t k = 0, conteo = 0;
 800069e:	461a      	mov	r2, r3
 80006a0:	e023      	b.n	80006ea <BasesProcesarDisparo+0x12a>
	                                bases[i][j-1] &= ~(resultado>>8);
	                                bases[i][j] &= ~resultado;
	                                conteo++;
	                            }
	                        } else {
	                            bases_16bits = (bases[i][15-j]<<8) + (bases[i][15-j+1] & 0xff);
 80006a2:	f1c3 0c0f 	rsb	ip, r3, #15
 80006a6:	493a      	ldr	r1, [pc, #232]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 80006a8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80006ac:	f811 000c 	ldrb.w	r0, [r1, ip]
 80006b0:	f1c3 0410 	rsb	r4, r3, #16
 80006b4:	5d09      	ldrb	r1, [r1, r4]
 80006b6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	                            k++;
	                            if ((bases_16bits & resultado) != 0) {
 80006ba:	ea11 0f08 	tst.w	r1, r8
 80006be:	d010      	beq.n	80006e2 <BasesProcesarDisparo+0x122>
	                                bases[i][15-j] &= ~(resultado>>8);
 80006c0:	ea6f 2718 	mvn.w	r7, r8, lsr #8
 80006c4:	b27f      	sxtb	r7, r7
 80006c6:	4932      	ldr	r1, [pc, #200]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 80006c8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80006cc:	4038      	ands	r0, r7
 80006ce:	f801 000c 	strb.w	r0, [r1, ip]
	                                bases[i][15-j+1] &= ~resultado;
 80006d2:	ea6f 0708 	mvn.w	r7, r8
 80006d6:	b27f      	sxtb	r7, r7
 80006d8:	5d08      	ldrb	r0, [r1, r4]
 80006da:	4038      	ands	r0, r7
 80006dc:	5508      	strb	r0, [r1, r4]
	                                conteo++;
 80006de:	3201      	adds	r2, #1
 80006e0:	b2d2      	uxtb	r2, r2
	                            }
	                        }
	                        if (conteo == DESTRUCCION_MAXIMA_VERTICAL) break;
 80006e2:	2a02      	cmp	r2, #2
 80006e4:	d050      	beq.n	8000788 <BasesProcesarDisparo+0x1c8>
	                for (uint8_t j=0; j<16; j++) {
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d84c      	bhi.n	8000788 <BasesProcesarDisparo+0x1c8>
	                    if (j % 2 != 0) {
 80006ee:	f013 0f01 	tst.w	r3, #1
 80006f2:	d0f8      	beq.n	80006e6 <BasesProcesarDisparo+0x126>
	                        if (condicion == 0) {
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d1d4      	bne.n	80006a2 <BasesProcesarDisparo+0xe2>
	                            bases_16bits = (bases[i][j-1]<<8) + (bases[i][j] & 0xff);
 80006f8:	1e5f      	subs	r7, r3, #1
 80006fa:	4925      	ldr	r1, [pc, #148]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 80006fc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8000700:	5dc8      	ldrb	r0, [r1, r7]
 8000702:	5cc9      	ldrb	r1, [r1, r3]
 8000704:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	                            if ((bases_16bits & resultado) != 0) {
 8000708:	ea11 0f08 	tst.w	r1, r8
 800070c:	d0e9      	beq.n	80006e2 <BasesProcesarDisparo+0x122>
	                                bases[i][j-1] &= ~(resultado>>8);
 800070e:	ea6f 2418 	mvn.w	r4, r8, lsr #8
 8000712:	b264      	sxtb	r4, r4
 8000714:	491e      	ldr	r1, [pc, #120]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 8000716:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800071a:	4020      	ands	r0, r4
 800071c:	55c8      	strb	r0, [r1, r7]
	                                bases[i][j] &= ~resultado;
 800071e:	ea6f 0408 	mvn.w	r4, r8
 8000722:	b264      	sxtb	r4, r4
 8000724:	5cc8      	ldrb	r0, [r1, r3]
 8000726:	4020      	ands	r0, r4
 8000728:	54c8      	strb	r0, [r1, r3]
	                                conteo++;
 800072a:	3201      	adds	r2, #1
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	e7d8      	b.n	80006e2 <BasesProcesarDisparo+0x122>
	    for (int i = 0; i < 3; ++i) {
 8000730:	3601      	adds	r6, #1
 8000732:	2e02      	cmp	r6, #2
 8000734:	dc28      	bgt.n	8000788 <BasesProcesarDisparo+0x1c8>
	        if (pos_x >= limites_izquierda[i] && pos_x <= limites_derecha[i]) {
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <BasesProcesarDisparo+0x1d8>)
 8000738:	5d92      	ldrb	r2, [r2, r6]
 800073a:	429a      	cmp	r2, r3
 800073c:	d8f8      	bhi.n	8000730 <BasesProcesarDisparo+0x170>
 800073e:	4917      	ldr	r1, [pc, #92]	; (800079c <BasesProcesarDisparo+0x1dc>)
 8000740:	5d89      	ldrb	r1, [r1, r6]
 8000742:	4299      	cmp	r1, r3
 8000744:	d3f4      	bcc.n	8000730 <BasesProcesarDisparo+0x170>
	        	uint8_t desplazamiento = pos_x - limites_izquierda[i];
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	b2df      	uxtb	r7, r3
	            uint16_t resultado = (1 << (OFFSET_DESPLAZAMIENTO - desplazamiento));
 800074a:	f1c7 030f 	rsb	r3, r7, #15
 800074e:	f04f 0801 	mov.w	r8, #1
 8000752:	fa08 f803 	lsl.w	r8, r8, r3
 8000756:	fa1f f888 	uxth.w	r8, r8
	            if (condicion == 0){
 800075a:	b965      	cbnz	r5, 8000776 <BasesProcesarDisparo+0x1b6>
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO + 1 - desplazamiento));
 800075c:	f1c7 0310 	rsb	r3, r7, #16
 8000760:	2201      	movs	r2, #1
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	4443      	add	r3, r8
 8000768:	b29b      	uxth	r3, r3
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO - 1 - desplazamiento));
 800076a:	f1c7 010e 	rsb	r1, r7, #14
 800076e:	408a      	lsls	r2, r1
 8000770:	4413      	add	r3, r2
 8000772:	fa1f f883 	uxth.w	r8, r3
	            if ((resultado & resultado_or[i]) != 0) {
 8000776:	ab02      	add	r3, sp, #8
 8000778:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800077c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000780:	ea13 0f08 	tst.w	r3, r8
 8000784:	f47f af61 	bne.w	800064a <BasesProcesarDisparo+0x8a>
	            break;
	        }
	    }
	}

}
 8000788:	b002      	add	sp, #8
 800078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800078e:	bf00      	nop
 8000790:	200008bc 	.word	0x200008bc
 8000794:	55555556 	.word	0x55555556
 8000798:	08009fb4 	.word	0x08009fb4
 800079c:	08009fb0 	.word	0x08009fb0

080007a0 <plotBases>:
void plotBases(){
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	b082      	sub	sp, #8
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE1, LIMITE_ABAJO_BASE, bases[0], 16, 8, 1);
 80007a4:	4d12      	ldr	r5, [pc, #72]	; (80007f0 <plotBases+0x50>)
 80007a6:	2401      	movs	r4, #1
 80007a8:	9401      	str	r4, [sp, #4]
 80007aa:	2608      	movs	r6, #8
 80007ac:	9600      	str	r6, [sp, #0]
 80007ae:	2310      	movs	r3, #16
 80007b0:	462a      	mov	r2, r5
 80007b2:	212d      	movs	r1, #45	; 0x2d
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 ffc1 	bl	800273c <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE2, LIMITE_ABAJO_BASE, bases[1], 16, 8, 1);
 80007ba:	9401      	str	r4, [sp, #4]
 80007bc:	9600      	str	r6, [sp, #0]
 80007be:	2310      	movs	r3, #16
 80007c0:	18ea      	adds	r2, r5, r3
 80007c2:	212d      	movs	r1, #45	; 0x2d
 80007c4:	2038      	movs	r0, #56	; 0x38
 80007c6:	f001 ffb9 	bl	800273c <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE3, LIMITE_ABAJO_BASE, bases[2], 16, 8, 1);
 80007ca:	9401      	str	r4, [sp, #4]
 80007cc:	9600      	str	r6, [sp, #0]
 80007ce:	2310      	movs	r3, #16
 80007d0:	f105 0220 	add.w	r2, r5, #32
 80007d4:	212d      	movs	r1, #45	; 0x2d
 80007d6:	2060      	movs	r0, #96	; 0x60
 80007d8:	f001 ffb0 	bl	800273c <SSD1306_DrawBitmap>
	BasesProcesarDisparo(&Disparo_Aliens, 0);
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <plotBases+0x54>)
 80007e0:	f7ff feee 	bl	80005c0 <BasesProcesarDisparo>
	BasesProcesarDisparo(&Disparo, 1);
 80007e4:	4621      	mov	r1, r4
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <plotBases+0x58>)
 80007e8:	f7ff feea 	bl	80005c0 <BasesProcesarDisparo>
}
 80007ec:	b002      	add	sp, #8
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	200008bc 	.word	0x200008bc
 80007f4:	200008b0 	.word	0x200008b0
 80007f8:	200008ac 	.word	0x200008ac

080007fc <BasesInit>:



void BasesInit(){

	for(uint8_t i=0;i<3;i++){
 80007fc:	2000      	movs	r0, #0
 80007fe:	e00b      	b.n	8000818 <BasesInit+0x1c>
		for(uint8_t j=0; j<16; j++){

			bases[i][j] = BaseGfx[j];
 8000800:	4a08      	ldr	r2, [pc, #32]	; (8000824 <BasesInit+0x28>)
 8000802:	5cd1      	ldrb	r1, [r2, r3]
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <BasesInit+0x2c>)
 8000806:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800080a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j=0; j<16; j++){
 800080c:	3301      	adds	r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d9f5      	bls.n	8000800 <BasesInit+0x4>
	for(uint8_t i=0;i<3;i++){
 8000814:	3001      	adds	r0, #1
 8000816:	b2c0      	uxtb	r0, r0
 8000818:	2802      	cmp	r0, #2
 800081a:	d801      	bhi.n	8000820 <BasesInit+0x24>
		for(uint8_t j=0; j<16; j++){
 800081c:	2300      	movs	r3, #0
 800081e:	e7f7      	b.n	8000810 <BasesInit+0x14>
		}
	}

}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	08009f40 	.word	0x08009f40
 8000828:	200008bc 	.word	0x200008bc

0800082c <Dificultad_Init>:


void Dificultad_Init(){

	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 8;
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <Dificultad_Init+0x14>)
 800082e:	2208      	movs	r2, #8
 8000830:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 4;
 8000832:	2204      	movs	r2, #4
 8000834:	705a      	strb	r2, [r3, #1]
	dificultad.velocidad_disparo_aliens = 3;
 8000836:	2203      	movs	r2, #3
 8000838:	709a      	strb	r2, [r3, #2]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 800083a:	2202      	movs	r2, #2
 800083c:	711a      	strb	r2, [r3, #4]
}
 800083e:	4770      	bx	lr
 8000840:	200008ec 	.word	0x200008ec

08000844 <AumentoNivel>:

void AumentoNivel(){

	//Incremento de la dificultad (Aumento de la velocidad de los aliens y la velocidad de disparo)
	//Se aumenta la dificultad.
	dificultad.velocidad_bajada += 1;
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <AumentoNivel+0x3c>)
 8000846:	7853      	ldrb	r3, [r2, #1]
 8000848:	3301      	adds	r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	7053      	strb	r3, [r2, #1]
	if(dificultad.velocidad_bajada > 10){
 800084e:	2b0a      	cmp	r3, #10
 8000850:	d902      	bls.n	8000858 <AumentoNivel+0x14>
		dificultad.velocidad_bajada = 10;
 8000852:	4613      	mov	r3, r2
 8000854:	220a      	movs	r2, #10
 8000856:	705a      	strb	r2, [r3, #1]
	}


	dificultad.velocidad_disparo_aliens = 3;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <AumentoNivel+0x3c>)
 800085a:	2203      	movs	r2, #3
 800085c:	709a      	strb	r2, [r3, #2]


	//Se Reinicializa el Player.
	Player.posicion_X = 64;
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <AumentoNivel+0x40>)
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	8013      	strh	r3, [r2, #0]
	Player.vivo = true;
 8000864:	2301      	movs	r3, #1
 8000866:	7093      	strb	r3, [r2, #2]
	Player.nivel += 1;
 8000868:	7993      	ldrb	r3, [r2, #6]
 800086a:	3301      	adds	r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	7193      	strb	r3, [r2, #6]
	if(Player.nivel > 254){
 8000870:	2bff      	cmp	r3, #255	; 0xff
 8000872:	d000      	beq.n	8000876 <AumentoNivel+0x32>
		Player.nivel = 254;
	}

}
 8000874:	4770      	bx	lr
		Player.nivel = 254;
 8000876:	4613      	mov	r3, r2
 8000878:	22fe      	movs	r2, #254	; 0xfe
 800087a:	719a      	strb	r2, [r3, #6]
}
 800087c:	e7fa      	b.n	8000874 <AumentoNivel+0x30>
 800087e:	bf00      	nop
 8000880:	200008ec 	.word	0x200008ec
 8000884:	200008b4 	.word	0x200008b4

08000888 <AumentoVelocidadAliens>:

void AumentoVelocidadAliens(){


	//Cuando queden menos de 3 aliens (por ejemplo) que los aliens comiencen a moverse mas rapido.
	switch(movimiento_Aliens.cantidad_aliens_vivos){
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <AumentoVelocidadAliens+0x30>)
 800088a:	799b      	ldrb	r3, [r3, #6]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d00a      	beq.n	80008a6 <AumentoVelocidadAliens+0x1e>
 8000890:	2b03      	cmp	r3, #3
 8000892:	d002      	beq.n	800089a <AumentoVelocidadAliens+0x12>
 8000894:	2b01      	cmp	r3, #1
 8000896:	d00a      	beq.n	80008ae <AumentoVelocidadAliens+0x26>
		break;
	default:
		break;
	}

}
 8000898:	4770      	bx	lr
		dificultad.velocidad_horizontal = 2;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <AumentoVelocidadAliens+0x34>)
 800089c:	2202      	movs	r2, #2
 800089e:	701a      	strb	r2, [r3, #0]
		dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_4;
 80008a0:	2204      	movs	r2, #4
 80008a2:	711a      	strb	r2, [r3, #4]
		break;
 80008a4:	4770      	bx	lr
		dificultad.velocidad_horizontal = 1;
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <AumentoVelocidadAliens+0x34>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
		break;
 80008ac:	4770      	bx	lr
		dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_6;
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <AumentoVelocidadAliens+0x34>)
 80008b0:	2206      	movs	r2, #6
 80008b2:	711a      	strb	r2, [r3, #4]
}
 80008b4:	e7f0      	b.n	8000898 <AumentoVelocidadAliens+0x10>
 80008b6:	bf00      	nop
 80008b8:	200008f4 	.word	0x200008f4
 80008bc:	200008ec 	.word	0x200008ec

080008c0 <plotAliens>:
void plotAliens(){
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b083      	sub	sp, #12
	AumentoVelocidadAliens();
 80008c4:	f7ff ffe0 	bl	8000888 <AumentoVelocidadAliens>
	if(movimiento_Aliens.conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80008c8:	4b82      	ldr	r3, [pc, #520]	; (8000ad4 <plotAliens+0x214>)
 80008ca:	785c      	ldrb	r4, [r3, #1]
 80008cc:	4b82      	ldr	r3, [pc, #520]	; (8000ad8 <plotAliens+0x218>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	fbb4 f0f3 	udiv	r0, r4, r3
 80008d4:	fb03 4010 	mls	r0, r3, r0, r4
 80008d8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80008dc:	d124      	bne.n	8000928 <plotAliens+0x68>
		movimiento_Aliens.animacion = !movimiento_Aliens.animacion;
 80008de:	4a7d      	ldr	r2, [pc, #500]	; (8000ad4 <plotAliens+0x214>)
 80008e0:	78d3      	ldrb	r3, [r2, #3]
 80008e2:	fab3 f383 	clz	r3, r3
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	70d3      	strb	r3, [r2, #3]
			switch(movimiento_Aliens.orientacion){
 80008ea:	f892 c000 	ldrb.w	ip, [r2]
 80008ee:	f1bc 0f00 	cmp.w	ip, #0
 80008f2:	d037      	beq.n	8000964 <plotAliens+0xa4>
 80008f4:	f1bc 0f01 	cmp.w	ip, #1
 80008f8:	d04d      	beq.n	8000996 <plotAliens+0xd6>
			if( (Alien[0][movimiento_Aliens.alien_columna_derecha].posicion_X + TAMANO_ALIEN_BOTTOM_ANCHURA) >= LIMITE_PANTALLA_DER){
 80008fa:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <plotAliens+0x214>)
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000902:	4a76      	ldr	r2, [pc, #472]	; (8000adc <plotAliens+0x21c>)
 8000904:	56d3      	ldrsb	r3, [r2, r3]
 8000906:	2b72      	cmp	r3, #114	; 0x72
 8000908:	dd02      	ble.n	8000910 <plotAliens+0x50>
				movimiento_Aliens.orientacion = mov_izquierda;
 800090a:	4b72      	ldr	r3, [pc, #456]	; (8000ad4 <plotAliens+0x214>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
			if( (Alien[0][movimiento_Aliens.alien_columna_izquierda].posicion_X) <= LIMITE_PANTALLA_IZQ){
 8000910:	4b70      	ldr	r3, [pc, #448]	; (8000ad4 <plotAliens+0x214>)
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000918:	4a70      	ldr	r2, [pc, #448]	; (8000adc <plotAliens+0x21c>)
 800091a:	56d3      	ldrsb	r3, [r2, r3]
 800091c:	2b01      	cmp	r3, #1
 800091e:	dd3c      	ble.n	800099a <plotAliens+0xda>
			if(movimiento_Aliens.conteo_bajada == 10){
 8000920:	4b6c      	ldr	r3, [pc, #432]	; (8000ad4 <plotAliens+0x214>)
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	2b0a      	cmp	r3, #10
 8000926:	d05a      	beq.n	80009de <plotAliens+0x11e>
	movimiento_Aliens.conteo_horizontal++;
 8000928:	3401      	adds	r4, #1
 800092a:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <plotAliens+0x214>)
 800092c:	705c      	strb	r4, [r3, #1]
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800092e:	2500      	movs	r5, #0
	uint8_t conteo_columna_izquierda = 0;
 8000930:	462e      	mov	r6, r5
	uint8_t conteo_columna_derecha = 0;
 8000932:	462f      	mov	r7, r5
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000934:	e09a      	b.n	8000a6c <plotAliens+0x1ac>
								Alien[y][x].posicion_X  = Alien[y][x].posicion_X + dificultad.aumento_posicion_pixeles;
 8000936:	4d69      	ldr	r5, [pc, #420]	; (8000adc <plotAliens+0x21c>)
 8000938:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800093c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000940:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000944:	440a      	add	r2, r1
 8000946:	5ca9      	ldrb	r1, [r5, r2]
 8000948:	4f63      	ldr	r7, [pc, #396]	; (8000ad8 <plotAliens+0x218>)
 800094a:	793f      	ldrb	r7, [r7, #4]
 800094c:	4439      	add	r1, r7
 800094e:	54a9      	strb	r1, [r5, r2]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000950:	3301      	adds	r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b06      	cmp	r3, #6
 8000956:	d9ee      	bls.n	8000936 <plotAliens+0x76>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000958:	3601      	adds	r6, #1
 800095a:	b2f6      	uxtb	r6, r6
 800095c:	2e02      	cmp	r6, #2
 800095e:	d8cc      	bhi.n	80008fa <plotAliens+0x3a>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000960:	4663      	mov	r3, ip
 8000962:	e7f7      	b.n	8000954 <plotAliens+0x94>
			switch(movimiento_Aliens.orientacion){
 8000964:	4666      	mov	r6, ip
 8000966:	e7f9      	b.n	800095c <plotAliens+0x9c>
								Alien[y][x].posicion_X  -= dificultad.aumento_posicion_pixeles;
 8000968:	4a5b      	ldr	r2, [pc, #364]	; (8000ad8 <plotAliens+0x218>)
 800096a:	7917      	ldrb	r7, [r2, #4]
 800096c:	4d5b      	ldr	r5, [pc, #364]	; (8000adc <plotAliens+0x21c>)
 800096e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000972:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000976:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800097a:	440a      	add	r2, r1
 800097c:	5ca9      	ldrb	r1, [r5, r2]
 800097e:	1bc9      	subs	r1, r1, r7
 8000980:	54a9      	strb	r1, [r5, r2]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000982:	3301      	adds	r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b06      	cmp	r3, #6
 8000988:	d9ee      	bls.n	8000968 <plotAliens+0xa8>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800098a:	3601      	adds	r6, #1
 800098c:	b2f6      	uxtb	r6, r6
 800098e:	2e02      	cmp	r6, #2
 8000990:	d8b3      	bhi.n	80008fa <plotAliens+0x3a>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000992:	4603      	mov	r3, r0
 8000994:	e7f7      	b.n	8000986 <plotAliens+0xc6>
			switch(movimiento_Aliens.orientacion){
 8000996:	4606      	mov	r6, r0
 8000998:	e7f9      	b.n	800098e <plotAliens+0xce>
				movimiento_Aliens.orientacion = mov_derecha;
 800099a:	4b4e      	ldr	r3, [pc, #312]	; (8000ad4 <plotAliens+0x214>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
				movimiento_Aliens.conteo_bajada++;
 80009a0:	789a      	ldrb	r2, [r3, #2]
 80009a2:	3201      	adds	r2, #1
 80009a4:	709a      	strb	r2, [r3, #2]
 80009a6:	e7bb      	b.n	8000920 <plotAliens+0x60>
						Alien[y][x].posicion_Y  = Alien[y][x].posicion_Y + dificultad.velocidad_bajada;
 80009a8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80009ac:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80009b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80009b4:	4411      	add	r1, r2
 80009b6:	4a49      	ldr	r2, [pc, #292]	; (8000adc <plotAliens+0x21c>)
 80009b8:	440a      	add	r2, r1
 80009ba:	7851      	ldrb	r1, [r2, #1]
 80009bc:	4e46      	ldr	r6, [pc, #280]	; (8000ad8 <plotAliens+0x218>)
 80009be:	7876      	ldrb	r6, [r6, #1]
 80009c0:	4431      	add	r1, r6
 80009c2:	7051      	strb	r1, [r2, #1]
						movimiento_Aliens.conteo_bajada = 0;
 80009c4:	4a43      	ldr	r2, [pc, #268]	; (8000ad4 <plotAliens+0x214>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	7091      	strb	r1, [r2, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80009ca:	3301      	adds	r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d9ea      	bls.n	80009a8 <plotAliens+0xe8>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80009d2:	3501      	adds	r5, #1
 80009d4:	b2ed      	uxtb	r5, r5
 80009d6:	2d02      	cmp	r5, #2
 80009d8:	d8a6      	bhi.n	8000928 <plotAliens+0x68>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80009da:	4603      	mov	r3, r0
 80009dc:	e7f7      	b.n	80009ce <plotAliens+0x10e>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80009de:	4605      	mov	r5, r0
 80009e0:	e7f9      	b.n	80009d6 <plotAliens+0x116>
			            gfx = (y == 0) ? InvaderTopGfx : (y == 1) ? InvaderMiddleGfx : InvaderBottomGfx;
 80009e2:	b13d      	cbz	r5, 80009f4 <plotAliens+0x134>
 80009e4:	2d01      	cmp	r5, #1
 80009e6:	d001      	beq.n	80009ec <plotAliens+0x12c>
 80009e8:	4a3d      	ldr	r2, [pc, #244]	; (8000ae0 <plotAliens+0x220>)
 80009ea:	e006      	b.n	80009fa <plotAliens+0x13a>
 80009ec:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <plotAliens+0x224>)
 80009ee:	e004      	b.n	80009fa <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 80009f0:	4a3d      	ldr	r2, [pc, #244]	; (8000ae8 <plotAliens+0x228>)
 80009f2:	e002      	b.n	80009fa <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx : (y == 1) ? InvaderMiddleGfx : InvaderBottomGfx;
 80009f4:	4a3d      	ldr	r2, [pc, #244]	; (8000aec <plotAliens+0x22c>)
 80009f6:	e000      	b.n	80009fa <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 80009f8:	4a3d      	ldr	r2, [pc, #244]	; (8000af0 <plotAliens+0x230>)
			        SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y, gfx, (y == 0) ? 8 : 16, 8, 1);
 80009fa:	4b38      	ldr	r3, [pc, #224]	; (8000adc <plotAliens+0x21c>)
 80009fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000a00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000a04:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000a08:	4401      	add	r1, r0
 8000a0a:	eb03 0c01 	add.w	ip, r3, r1
 8000a0e:	5658      	ldrsb	r0, [r3, r1]
 8000a10:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8000a14:	b335      	cbz	r5, 8000a64 <plotAliens+0x1a4>
 8000a16:	2310      	movs	r3, #16
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	f8cd c004 	str.w	ip, [sp, #4]
 8000a20:	f04f 0c08 	mov.w	ip, #8
 8000a24:	f8cd c000 	str.w	ip, [sp]
 8000a28:	f001 fe88 	bl	800273c <SSD1306_DrawBitmap>
			for(uint8_t x = 0; x < NUM_ALIEN_COLUMNA; x++) {
 8000a2c:	3401      	adds	r4, #1
 8000a2e:	b2e4      	uxtb	r4, r4
 8000a30:	2c06      	cmp	r4, #6
 8000a32:	d819      	bhi.n	8000a68 <plotAliens+0x1a8>
			    if(Alien[y][x].vivo == true) {
 8000a34:	4628      	mov	r0, r5
 8000a36:	4621      	mov	r1, r4
 8000a38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a3c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000a40:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000a44:	4413      	add	r3, r2
 8000a46:	4a25      	ldr	r2, [pc, #148]	; (8000adc <plotAliens+0x21c>)
 8000a48:	4413      	add	r3, r2
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d1ed      	bne.n	8000a2c <plotAliens+0x16c>
			        if(movimiento_Aliens.animacion == true) {
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <plotAliens+0x214>)
 8000a52:	78db      	ldrb	r3, [r3, #3]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d0c4      	beq.n	80009e2 <plotAliens+0x122>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d0cd      	beq.n	80009f8 <plotAliens+0x138>
 8000a5c:	2d01      	cmp	r5, #1
 8000a5e:	d0c7      	beq.n	80009f0 <plotAliens+0x130>
 8000a60:	4a24      	ldr	r2, [pc, #144]	; (8000af4 <plotAliens+0x234>)
 8000a62:	e7ca      	b.n	80009fa <plotAliens+0x13a>
			        SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y, gfx, (y == 0) ? 8 : 16, 8, 1);
 8000a64:	2308      	movs	r3, #8
 8000a66:	e7d7      	b.n	8000a18 <plotAliens+0x158>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000a68:	3501      	adds	r5, #1
 8000a6a:	b2ed      	uxtb	r5, r5
 8000a6c:	2d02      	cmp	r5, #2
 8000a6e:	d821      	bhi.n	8000ab4 <plotAliens+0x1f4>
			if(movimiento_Aliens.alien_columna_derecha != movimiento_Aliens.alien_columna_izquierda){
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <plotAliens+0x214>)
 8000a72:	795a      	ldrb	r2, [r3, #5]
 8000a74:	791b      	ldrb	r3, [r3, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d01a      	beq.n	8000ab0 <plotAliens+0x1f0>
				if(Alien[y][movimiento_Aliens.alien_columna_derecha].vivo == false){
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000a80:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8000a84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000a88:	4402      	add	r2, r0
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <plotAliens+0x21c>)
 8000a8c:	4402      	add	r2, r0
 8000a8e:	7892      	ldrb	r2, [r2, #2]
 8000a90:	b90a      	cbnz	r2, 8000a96 <plotAliens+0x1d6>
					conteo_columna_derecha++;
 8000a92:	3701      	adds	r7, #1
 8000a94:	b2ff      	uxtb	r7, r7
				if(Alien[y][movimiento_Aliens.alien_columna_izquierda].vivo == false){
 8000a96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a9a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000a9e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <plotAliens+0x21c>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	789b      	ldrb	r3, [r3, #2]
 8000aaa:	b90b      	cbnz	r3, 8000ab0 <plotAliens+0x1f0>
					conteo_columna_izquierda++;
 8000aac:	3601      	adds	r6, #1
 8000aae:	b2f6      	uxtb	r6, r6
			for(uint8_t x = 0; x < NUM_ALIEN_COLUMNA; x++) {
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	e7bd      	b.n	8000a30 <plotAliens+0x170>
		if(conteo_columna_derecha == NUM_ALIEN_FILA){
 8000ab4:	2f03      	cmp	r7, #3
 8000ab6:	d003      	beq.n	8000ac0 <plotAliens+0x200>
		if(conteo_columna_izquierda == NUM_ALIEN_FILA){
 8000ab8:	2e03      	cmp	r6, #3
 8000aba:	d006      	beq.n	8000aca <plotAliens+0x20a>
}
 8000abc:	b003      	add	sp, #12
 8000abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			movimiento_Aliens.alien_columna_derecha--;
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <plotAliens+0x214>)
 8000ac2:	7953      	ldrb	r3, [r2, #5]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	7153      	strb	r3, [r2, #5]
 8000ac8:	e7f6      	b.n	8000ab8 <plotAliens+0x1f8>
			movimiento_Aliens.alien_columna_izquierda++;
 8000aca:	4a02      	ldr	r2, [pc, #8]	; (8000ad4 <plotAliens+0x214>)
 8000acc:	7913      	ldrb	r3, [r2, #4]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	7113      	strb	r3, [r2, #4]
}
 8000ad2:	e7f3      	b.n	8000abc <plotAliens+0x1fc>
 8000ad4:	200008f4 	.word	0x200008f4
 8000ad8:	200008ec 	.word	0x200008ec
 8000adc:	20000840 	.word	0x20000840
 8000ae0:	08009f50 	.word	0x08009f50
 8000ae4:	08009f70 	.word	0x08009f70
 8000ae8:	08009f80 	.word	0x08009f80
 8000aec:	08009f90 	.word	0x08009f90
 8000af0:	08009f98 	.word	0x08009f98
 8000af4:	08009f60 	.word	0x08009f60

08000af8 <disparoTrue>:


void disparoTrue(){

	Disparo.disparo = true;
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <disparoTrue+0x10>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	709a      	strb	r2, [r3, #2]
	Disparo.posicion_x = Player.posicion_X;
 8000afe:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <disparoTrue+0x14>)
 8000b00:	8812      	ldrh	r2, [r2, #0]
 8000b02:	701a      	strb	r2, [r3, #0]

}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200008ac 	.word	0x200008ac
 8000b0c:	200008b4 	.word	0x200008b4

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b14:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	2400      	movs	r4, #0
 8000b18:	9404      	str	r4, [sp, #16]
 8000b1a:	9405      	str	r4, [sp, #20]
 8000b1c:	9406      	str	r4, [sp, #24]
 8000b1e:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <MX_GPIO_Init+0xe0>)
 8000b22:	699a      	ldr	r2, [r3, #24]
 8000b24:	f042 0210 	orr.w	r2, r2, #16
 8000b28:	619a      	str	r2, [r3, #24]
 8000b2a:	699a      	ldr	r2, [r3, #24]
 8000b2c:	f002 0210 	and.w	r2, r2, #16
 8000b30:	9200      	str	r2, [sp, #0]
 8000b32:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	699a      	ldr	r2, [r3, #24]
 8000b36:	f042 0220 	orr.w	r2, r2, #32
 8000b3a:	619a      	str	r2, [r3, #24]
 8000b3c:	699a      	ldr	r2, [r3, #24]
 8000b3e:	f002 0220 	and.w	r2, r2, #32
 8000b42:	9201      	str	r2, [sp, #4]
 8000b44:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	f042 0204 	orr.w	r2, r2, #4
 8000b4c:	619a      	str	r2, [r3, #24]
 8000b4e:	699a      	ldr	r2, [r3, #24]
 8000b50:	f002 0204 	and.w	r2, r2, #4
 8000b54:	9202      	str	r2, [sp, #8]
 8000b56:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	f042 0208 	orr.w	r2, r2, #8
 8000b5e:	619a      	str	r2, [r3, #24]
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b6a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000bf4 <MX_GPIO_Init+0xe4>
 8000b6e:	4622      	mov	r2, r4
 8000b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b74:	4648      	mov	r0, r9
 8000b76:	f003 f876 	bl	8003c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b7a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000bf8 <MX_GPIO_Init+0xe8>
 8000b7e:	4622      	mov	r2, r4
 8000b80:	f24c 0120 	movw	r1, #49184	; 0xc020
 8000b84:	4640      	mov	r0, r8
 8000b86:	f003 f86e 	bl	8003c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b8a:	4e1c      	ldr	r6, [pc, #112]	; (8000bfc <MX_GPIO_Init+0xec>)
 8000b8c:	4622      	mov	r2, r4
 8000b8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b92:	4630      	mov	r0, r6
 8000b94:	f003 f867 	bl	8003c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2501      	movs	r5, #1
 8000ba0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2702      	movs	r7, #2
 8000ba6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	a904      	add	r1, sp, #16
 8000baa:	4648      	mov	r0, r9
 8000bac:	f002 ff42 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	a904      	add	r1, sp, #16
 8000bba:	4630      	mov	r0, r6
 8000bbc:	f002 ff3a 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8000bc0:	f24c 0320 	movw	r3, #49184	; 0xc020
 8000bc4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	a904      	add	r1, sp, #16
 8000bce:	4640      	mov	r0, r8
 8000bd0:	f002 ff30 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000bd4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bd8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	a904      	add	r1, sp, #16
 8000be2:	4630      	mov	r0, r6
 8000be4:	f002 ff26 	bl	8003a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	b009      	add	sp, #36	; 0x24
 8000bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40010c00 	.word	0x40010c00
 8000bfc:	40010800 	.word	0x40010800

08000c00 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	b082      	sub	sp, #8

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000c04:	f006 fcd2 	bl	80075ac <xTaskGetTickCount>
 8000c08:	9000      	str	r0, [sp, #0]
 8000c0a:	e02b      	b.n	8000c64 <entryJoystick+0x64>
	  HAL_ADC_Stop(&hadc2);

	  if(val_x > 2200){
		  joystick.x_value = derecha;
	  }
	  else if(val_x < 1600){
 8000c0c:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8000c10:	d203      	bcs.n	8000c1a <entryJoystick+0x1a>
		  joystick.x_value = izquierda;
 8000c12:	2303      	movs	r3, #3
 8000c14:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c18:	e049      	b.n	8000cae <entryJoystick+0xae>
	  }
	  else{
		  joystick.x_value = nulo;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c20:	e045      	b.n	8000cae <entryJoystick+0xae>


	  if(val_y > 2200){
		  joystick.y_value = abajo;
	  }
	  else if(val_y < 1600){
 8000c22:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8000c26:	d24a      	bcs.n	8000cbe <entryJoystick+0xbe>
		  joystick.y_value = arriba;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f88d 3005 	strb.w	r3, [sp, #5]
		  joystick.y_value = nulo;
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <entryJoystick+0xd0>)
 8000c32:	f003 f811 	bl	8003c58 <HAL_GPIO_ReadPin>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d145      	bne.n	8000cc6 <entryJoystick+0xc6>
		  joystick.boton = true;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f88d 3006 	strb.w	r3, [sp, #6]
	  else{
		  joystick.boton = false;
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000c40:	2300      	movs	r3, #0
 8000c42:	461a      	mov	r2, r3
 8000c44:	a901      	add	r1, sp, #4
 8000c46:	4823      	ldr	r0, [pc, #140]	; (8000cd4 <entryJoystick+0xd4>)
 8000c48:	6800      	ldr	r0, [r0, #0]
 8000c4a:	f005 fb43 	bl	80062d4 <osMessageQueuePut>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c4e:	b128      	cbz	r0, 8000c5c <entryJoystick+0x5c>
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <entryJoystick+0xd8>)
 8000c58:	f003 f805 	bl	8003c66 <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000c5c:	2132      	movs	r1, #50	; 0x32
 8000c5e:	4668      	mov	r0, sp
 8000c60:	f006 fdb2 	bl	80077c8 <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc1);
 8000c64:	4c1d      	ldr	r4, [pc, #116]	; (8000cdc <entryJoystick+0xdc>)
 8000c66:	4620      	mov	r0, r4
 8000c68:	f002 fd4e 	bl	8003708 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c6c:	210a      	movs	r1, #10
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f002 fba0 	bl	80033b4 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000c74:	4620      	mov	r0, r4
 8000c76:	f002 fc5f 	bl	8003538 <HAL_ADC_GetValue>
 8000c7a:	b286      	uxth	r6, r0
	  HAL_ADC_Stop(&hadc1);
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f002 fe67 	bl	8003950 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 8000c82:	4c17      	ldr	r4, [pc, #92]	; (8000ce0 <entryJoystick+0xe0>)
 8000c84:	4620      	mov	r0, r4
 8000c86:	f002 fd3f 	bl	8003708 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000c8a:	210a      	movs	r1, #10
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f002 fb91 	bl	80033b4 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f002 fc50 	bl	8003538 <HAL_ADC_GetValue>
 8000c98:	b285      	uxth	r5, r0
	  HAL_ADC_Stop(&hadc2);
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f002 fe58 	bl	8003950 <HAL_ADC_Stop>
	  if(val_x > 2200){
 8000ca0:	f640 0398 	movw	r3, #2200	; 0x898
 8000ca4:	429e      	cmp	r6, r3
 8000ca6:	d9b1      	bls.n	8000c0c <entryJoystick+0xc>
		  joystick.x_value = derecha;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	f88d 3004 	strb.w	r3, [sp, #4]
	  if(val_y > 2200){
 8000cae:	f640 0398 	movw	r3, #2200	; 0x898
 8000cb2:	429d      	cmp	r5, r3
 8000cb4:	d9b5      	bls.n	8000c22 <entryJoystick+0x22>
		  joystick.y_value = abajo;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cbc:	e7b7      	b.n	8000c2e <entryJoystick+0x2e>
		  joystick.y_value = nulo;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cc4:	e7b3      	b.n	8000c2e <entryJoystick+0x2e>
		  joystick.boton = false;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f88d 3006 	strb.w	r3, [sp, #6]
 8000ccc:	e7b8      	b.n	8000c40 <entryJoystick+0x40>
 8000cce:	bf00      	nop
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	20000ac0 	.word	0x20000ac0
 8000cd8:	40011000 	.word	0x40011000
 8000cdc:	20000910 	.word	0x20000910
 8000ce0:	20000940 	.word	0x20000940

08000ce4 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000ce4:	b500      	push	{lr}
 8000ce6:	b083      	sub	sp, #12

	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000ce8:	f001 f8a8 	bl	8001e3c <menuInit>
 8000cec:	e005      	b.n	8000cfa <entryPantalla+0x16>

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf4:	480e      	ldr	r0, [pc, #56]	; (8000d30 <entryPantalla+0x4c>)
 8000cf6:	f002 ffb6 	bl	8003c66 <HAL_GPIO_WritePin>
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	2200      	movs	r2, #0
 8000d00:	a901      	add	r1, sp, #4
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <entryPantalla+0x50>)
 8000d04:	6800      	ldr	r0, [r0, #0]
 8000d06:	f005 fb35 	bl	8006374 <osMessageQueueGet>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d1ef      	bne.n	8000cee <entryPantalla+0xa>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <entryPantalla+0x4c>)
 8000d16:	f002 ffa6 	bl	8003c66 <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000d1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000d1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000d22:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000d26:	f001 f8d1 	bl	8001ecc <menuActualizar>
		actualizarPantalla();
 8000d2a:	f7ff fa27 	bl	800017c <actualizarPantalla>
 8000d2e:	e7e4      	b.n	8000cfa <entryPantalla+0x16>
 8000d30:	40011000 	.word	0x40011000
 8000d34:	20000ac0 	.word	0x20000ac0

08000d38 <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000d38:	b508      	push	{r3, lr}
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
	//Se leen los datos desde la memoria.

	//Write_PuntajesEjemplos();

	memoriaInit();
 8000d3a:	f000 fbbd 	bl	80014b8 <memoriaInit>

  /* Infinite loop */
  for(;;)
  {
	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	2200      	movs	r2, #0
 8000d44:	2101      	movs	r1, #1
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <entryMemoria+0x30>)
 8000d48:	6800      	ldr	r0, [r0, #0]
 8000d4a:	f005 f93d 	bl	8005fc8 <osEventFlagsWait>

	      // Realiza acciones basadas en la notificación recibida
	      if (flags == NOTIFICATION_VALUE)
 8000d4e:	2801      	cmp	r0, #1
 8000d50:	d1f5      	bne.n	8000d3e <entryMemoria+0x6>
	      {

	    	  uint8_t permutaciones = Ordenamiento_Puntajes();
 8000d52:	f000 ffe5 	bl	8001d20 <Ordenamiento_Puntajes>

	    	  writeNuevosPuntajes(permutaciones);
 8000d56:	f000 fd61 	bl	800181c <writeNuevosPuntajes>


	    	  //Envio la notificacion 2 para que la tarea PantallaTask pueda pasar del menu guardado_nombre al menu de puntajes una vez que los puntajes ya se encuentran ordenadas y guardadas, ya que sin esta segunda sincronizacion, puede pasarse al menu puntajes sin que estos se encuentren ordenados. El ordenado se realiza en esta tarea MemoriaTask ya que las escrituras de puntajes se realizan solo en esta tarea.
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <entryMemoria+0x34>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	f005 f8f4 	bl	8005f4c <osEventFlagsSet>
 8000d64:	e7eb      	b.n	8000d3e <entryMemoria+0x6>
 8000d66:	bf00      	nop
 8000d68:	20000ab4 	.word	0x20000ab4
 8000d6c:	20000ab8 	.word	0x20000ab8

08000d70 <entrySonido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySonido */
void entrySonido(void *argument)
{
 8000d70:	b508      	push	{r3, lr}
 8000d72:	e005      	b.n	8000d80 <entrySonido+0x10>
  /* Infinite loop */
  for(;;)
  {
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick

	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7a:	481d      	ldr	r0, [pc, #116]	; (8000df0 <entrySonido+0x80>)
 8000d7c:	f002 ff73 	bl	8003c66 <HAL_GPIO_WritePin>
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	2200      	movs	r2, #0
 8000d86:	491b      	ldr	r1, [pc, #108]	; (8000df4 <entrySonido+0x84>)
 8000d88:	481b      	ldr	r0, [pc, #108]	; (8000df8 <entrySonido+0x88>)
 8000d8a:	6800      	ldr	r0, [r0, #0]
 8000d8c:	f005 faf2 	bl	8006374 <osMessageQueueGet>
	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d1ef      	bne.n	8000d74 <entrySonido+0x4>

	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <entrySonido+0x80>)
 8000d9c:	f002 ff63 	bl	8003c66 <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000da0:	2100      	movs	r1, #0
 8000da2:	4816      	ldr	r0, [pc, #88]	; (8000dfc <entrySonido+0x8c>)
 8000da4:	f004 ff66 	bl	8005c74 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000da8:	4815      	ldr	r0, [pc, #84]	; (8000e00 <entrySonido+0x90>)
 8000daa:	f004 fc4d 	bl	8005648 <HAL_TIM_Base_Stop_IT>

		  switch(musica){
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <entrySonido+0x84>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d018      	beq.n	8000de8 <entrySonido+0x78>
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d008      	beq.n	8000dcc <entrySonido+0x5c>
 8000dba:	b18b      	cbz	r3, 8000de0 <entrySonido+0x70>
		  default:
			  break;

		  }

		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <entrySonido+0x8c>)
 8000dc0:	f004 feea 	bl	8005b98 <HAL_TIM_PWM_Start>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <entrySonido+0x90>)
 8000dc6:	f004 fc0b 	bl	80055e0 <HAL_TIM_Base_Start_IT>
 8000dca:	e7d9      	b.n	8000d80 <entrySonido+0x10>
				tonos = f622;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <entrySonido+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
				conteo_musica = VECES_622HZ;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <entrySonido+0x98>)
 8000dd4:	22aa      	movs	r2, #170	; 0xaa
 8000dd6:	701a      	strb	r2, [r3, #0]
				puntero_musica = tono_622hz;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <entrySonido+0x9c>)
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <entrySonido+0xa0>)
 8000ddc:	601a      	str	r2, [r3, #0]
			  break;
 8000dde:	e7ed      	b.n	8000dbc <entrySonido+0x4c>
			  puntero_musica = audio_disparo;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <entrySonido+0x9c>)
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <entrySonido+0xa4>)
 8000de4:	601a      	str	r2, [r3, #0]
			  break;
 8000de6:	e7e9      	b.n	8000dbc <entrySonido+0x4c>
			  puntero_musica = audio_explosion;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <entrySonido+0x9c>)
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <entrySonido+0xa8>)
 8000dec:	601a      	str	r2, [r3, #0]
			  break;
 8000dee:	e7e5      	b.n	8000dbc <entrySonido+0x4c>
 8000df0:	40011000 	.word	0x40011000
 8000df4:	20000aac 	.word	0x20000aac
 8000df8:	20000ac4 	.word	0x20000ac4
 8000dfc:	20000a1c 	.word	0x20000a1c
 8000e00:	20000a64 	.word	0x20000a64
 8000e04:	20000ac8 	.word	0x20000ac8
 8000e08:	2000090c 	.word	0x2000090c
 8000e0c:	20000abc 	.word	0x20000abc
 8000e10:	20000450 	.word	0x20000450
 8000e14:	20000024 	.word	0x20000024
 8000e18:	200002a0 	.word	0x200002a0

08000e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b510      	push	{r4, lr}
 8000e1e:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e20:	6802      	ldr	r2, [r0, #0]
 8000e22:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d004      	beq.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */


  if (htim->Instance == TIM3) {
 8000e28:	6822      	ldr	r2, [r4, #0]
 8000e2a:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d003      	beq.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x1c>
						 break;
				 }
  }

  /* USER CODE END Callback 1 */
}
 8000e30:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000e32:	f002 fa99 	bl	8003368 <HAL_IncTick>
 8000e36:	e7f7      	b.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0xc>
		TIM2->CCR1 = *puntero_musica >> 1;
 8000e38:	4957      	ldr	r1, [pc, #348]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e3a:	680b      	ldr	r3, [r1, #0]
 8000e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e40:	0852      	lsrs	r2, r2, #1
 8000e42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e46:	6342      	str	r2, [r0, #52]	; 0x34
		puntero_musica++;
 8000e48:	600b      	str	r3, [r1, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4e:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8000e52:	f002 ff0e 	bl	8003c72 <HAL_GPIO_TogglePin>
		switch(musica){
 8000e56:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	f000 8089 	beq.w	8000f72 <HAL_TIM_PeriodElapsedCallback+0x156>
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d00f      	beq.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e3      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
						 if(puntero_musica == puntero_final_disparo){
 8000e68:	4b4b      	ldr	r3, [pc, #300]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d1dd      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	484b      	ldr	r0, [pc, #300]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e78:	f004 fefc 	bl	8005c74 <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8000e7c:	484a      	ldr	r0, [pc, #296]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e7e:	f004 fbe3 	bl	8005648 <HAL_TIM_Base_Stop_IT>
 8000e82:	e7d5      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
								switch(tonos){
 8000e84:	4b49      	ldr	r3, [pc, #292]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d02d      	beq.n	8000eea <HAL_TIM_PeriodElapsedCallback+0xce>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d03a      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0xec>
 8000e92:	b173      	cbz	r3, 8000eb2 <HAL_TIM_PeriodElapsedCallback+0x96>
									if(puntero_musica == puntero_musica_final_tonos){
 8000e94:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d10e      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tonos_variables;
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ea2:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ea4:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000ea6:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ea8:	7813      	ldrb	r3, [r2, #0]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	7013      	strb	r3, [r2, #0]
 8000eb0:	e005      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f622){
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0xbc>
									if(conteo_musica == 0){
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1b4      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
										switch(tonos){
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d8af      	bhi.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000ed0:	e8df f003 	tbb	[pc, r3]
 8000ed4:	473d3329 	.word	0x473d3329
											puntero_musica = tono_622hz;
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eda:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000edc:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000ede:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ee0:	7813      	ldrb	r3, [r2, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	7013      	strb	r3, [r2, #0]
 8000ee8:	e7e9      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f587){
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d1e3      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_587hz;
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ef8:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000efa:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000efc:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000efe:	7813      	ldrb	r3, [r2, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	7013      	strb	r3, [r2, #0]
 8000f06:	e7da      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f554){
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d1d4      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_554hz;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f16:	4a2e      	ldr	r2, [pc, #184]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f18:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f1c:	7813      	ldrb	r3, [r2, #0]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7013      	strb	r3, [r2, #0]
 8000f24:	e7cb      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_587hz;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f28:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f2a:	601a      	str	r2, [r3, #0]
											tonos = f587;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_587HZ;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f34:	22a0      	movs	r2, #160	; 0xa0
 8000f36:	701a      	strb	r2, [r3, #0]
											break;
 8000f38:	e77a      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tono_554hz;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f3c:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f3e:	601a      	str	r2, [r3, #0]
											tonos = f554;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_554HZ;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f48:	2296      	movs	r2, #150	; 0x96
 8000f4a:	701a      	strb	r2, [r3, #0]
											break;
 8000f4c:	e770      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tonos_variables;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f52:	601a      	str	r2, [r3, #0]
											tonos = variables;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_TONOS_VARIABLES;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f5c:	220a      	movs	r2, #10
 8000f5e:	701a      	strb	r2, [r3, #0]
											break;
 8000f60:	e766      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
											HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f62:	2100      	movs	r1, #0
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f66:	f004 fe85 	bl	8005c74 <HAL_TIM_PWM_Stop>
											HAL_TIM_Base_Stop_IT(&htim3);
 8000f6a:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f6c:	f004 fb6c 	bl	8005648 <HAL_TIM_Base_Stop_IT>
											break;
 8000f70:	e75e      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
						 if(puntero_musica == puntero_final_explosion){
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	f47f af58 	bne.w	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f80:	2100      	movs	r1, #0
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f84:	f004 fe76 	bl	8005c74 <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f8a:	f004 fb5d 	bl	8005648 <HAL_TIM_Base_Stop_IT>
}
 8000f8e:	e74f      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000f90:	40000800 	.word	0x40000800
 8000f94:	40000400 	.word	0x40000400
 8000f98:	20000abc 	.word	0x20000abc
 8000f9c:	20000aac 	.word	0x20000aac
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000a1c 	.word	0x20000a1c
 8000fa8:	20000a64 	.word	0x20000a64
 8000fac:	20000ac8 	.word	0x20000ac8
 8000fb0:	2000001c 	.word	0x2000001c
 8000fb4:	20000460 	.word	0x20000460
 8000fb8:	2000090c 	.word	0x2000090c
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	20000450 	.word	0x20000450
 8000fc4:	20000014 	.word	0x20000014
 8000fc8:	20000440 	.word	0x20000440
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	20000430 	.word	0x20000430
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fda:	e7fe      	b.n	8000fda <Error_Handler+0x2>

08000fdc <MX_ADC1_Init>:
{
 8000fdc:	b500      	push	{lr}
 8000fde:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <MX_ADC1_Init+0x50>)
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <MX_ADC1_Init+0x54>)
 8000fec:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fee:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff0:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ff8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffa:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001000:	f002 fc22 	bl	8003848 <HAL_ADC_Init>
 8001004:	b968      	cbnz	r0, 8001022 <MX_ADC1_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_3;
 8001006:	2303      	movs	r3, #3
 8001008:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100a:	2301      	movs	r3, #1
 800100c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800100e:	2300      	movs	r3, #0
 8001010:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001012:	a901      	add	r1, sp, #4
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_ADC1_Init+0x50>)
 8001016:	f002 fa93 	bl	8003540 <HAL_ADC_ConfigChannel>
 800101a:	b920      	cbnz	r0, 8001026 <MX_ADC1_Init+0x4a>
}
 800101c:	b005      	add	sp, #20
 800101e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001022:	f7ff ffd9 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001026:	f7ff ffd7 	bl	8000fd8 <Error_Handler>
 800102a:	bf00      	nop
 800102c:	20000910 	.word	0x20000910
 8001030:	40012400 	.word	0x40012400

08001034 <MX_I2C1_Init>:
{
 8001034:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001036:	480a      	ldr	r0, [pc, #40]	; (8001060 <MX_I2C1_Init+0x2c>)
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_I2C1_Init+0x30>)
 800103a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_I2C1_Init+0x34>)
 800103e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001040:	2300      	movs	r3, #0
 8001042:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001044:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001050:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001052:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001054:	f002 ffa8 	bl	8003fa8 <HAL_I2C_Init>
 8001058:	b900      	cbnz	r0, 800105c <MX_I2C1_Init+0x28>
}
 800105a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800105c:	f7ff ffbc 	bl	8000fd8 <Error_Handler>
 8001060:	20000970 	.word	0x20000970
 8001064:	40005400 	.word	0x40005400
 8001068:	00061a80 	.word	0x00061a80

0800106c <MX_SPI1_Init>:
{
 800106c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_SPI1_Init+0x38>)
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_SPI1_Init+0x3c>)
 8001072:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001074:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001078:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107a:	2300      	movs	r3, #0
 800107c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800107e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001080:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001082:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800108a:	2228      	movs	r2, #40	; 0x28
 800108c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001090:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001092:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001094:	230a      	movs	r3, #10
 8001096:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001098:	f003 fed8 	bl	8004e4c <HAL_SPI_Init>
 800109c:	b900      	cbnz	r0, 80010a0 <MX_SPI1_Init+0x34>
}
 800109e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010a0:	f7ff ff9a 	bl	8000fd8 <Error_Handler>
 80010a4:	200009c4 	.word	0x200009c4
 80010a8:	40013000 	.word	0x40013000

080010ac <MX_ADC2_Init>:
{
 80010ac:	b500      	push	{lr}
 80010ae:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b0:	2300      	movs	r3, #0
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	9303      	str	r3, [sp, #12]
  hadc2.Instance = ADC2;
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <MX_ADC2_Init+0x4c>)
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <MX_ADC2_Init+0x50>)
 80010bc:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010be:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c0:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010c2:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010c8:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010d0:	f002 fbba 	bl	8003848 <HAL_ADC_Init>
 80010d4:	b960      	cbnz	r0, 80010f0 <MX_ADC2_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010da:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010dc:	2300      	movs	r3, #0
 80010de:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010e0:	a901      	add	r1, sp, #4
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_ADC2_Init+0x4c>)
 80010e4:	f002 fa2c 	bl	8003540 <HAL_ADC_ConfigChannel>
 80010e8:	b920      	cbnz	r0, 80010f4 <MX_ADC2_Init+0x48>
}
 80010ea:	b005      	add	sp, #20
 80010ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010f0:	f7ff ff72 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 80010f4:	f7ff ff70 	bl	8000fd8 <Error_Handler>
 80010f8:	20000940 	.word	0x20000940
 80010fc:	40012800 	.word	0x40012800

08001100 <MX_TIM2_Init>:
{
 8001100:	b500      	push	{lr}
 8001102:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001104:	2300      	movs	r3, #0
 8001106:	930a      	str	r3, [sp, #40]	; 0x28
 8001108:	930b      	str	r3, [sp, #44]	; 0x2c
 800110a:	930c      	str	r3, [sp, #48]	; 0x30
 800110c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	9308      	str	r3, [sp, #32]
 8001110:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	9303      	str	r3, [sp, #12]
 8001118:	9304      	str	r3, [sp, #16]
 800111a:	9305      	str	r3, [sp, #20]
 800111c:	9306      	str	r3, [sp, #24]
 800111e:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8001120:	481d      	ldr	r0, [pc, #116]	; (8001198 <MX_TIM2_Init+0x98>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1-1;
 8001128:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 255-1;
 800112c:	22fe      	movs	r2, #254	; 0xfe
 800112e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001134:	f004 fb9e 	bl	8005874 <HAL_TIM_Base_Init>
 8001138:	bb20      	cbnz	r0, 8001184 <MX_TIM2_Init+0x84>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001140:	a90a      	add	r1, sp, #40	; 0x28
 8001142:	4815      	ldr	r0, [pc, #84]	; (8001198 <MX_TIM2_Init+0x98>)
 8001144:	f004 fc9a 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 8001148:	b9f0      	cbnz	r0, 8001188 <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800114a:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM2_Init+0x98>)
 800114c:	f004 fbbe 	bl	80058cc <HAL_TIM_PWM_Init>
 8001150:	b9e0      	cbnz	r0, 800118c <MX_TIM2_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001158:	a908      	add	r1, sp, #32
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <MX_TIM2_Init+0x98>)
 800115c:	f004 fdcc 	bl	8005cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	b9b0      	cbnz	r0, 8001190 <MX_TIM2_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001166:	2200      	movs	r2, #0
 8001168:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	a901      	add	r1, sp, #4
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <MX_TIM2_Init+0x98>)
 8001172:	f004 fc09 	bl	8005988 <HAL_TIM_PWM_ConfigChannel>
 8001176:	b968      	cbnz	r0, 8001194 <MX_TIM2_Init+0x94>
  HAL_TIM_MspPostInit(&htim2);
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM2_Init+0x98>)
 800117a:	f001 ffcb 	bl	8003114 <HAL_TIM_MspPostInit>
}
 800117e:	b00f      	add	sp, #60	; 0x3c
 8001180:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001184:	f7ff ff28 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001188:	f7ff ff26 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 800118c:	f7ff ff24 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001190:	f7ff ff22 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001194:	f7ff ff20 	bl	8000fd8 <Error_Handler>
 8001198:	20000a1c 	.word	0x20000a1c

0800119c <MX_TIM3_Init>:
{
 800119c:	b500      	push	{lr}
 800119e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a0:	2300      	movs	r3, #0
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	9303      	str	r3, [sp, #12]
 80011a6:	9304      	str	r3, [sp, #16]
 80011a8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 80011ae:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_TIM3_Init+0x60>)
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_TIM3_Init+0x64>)
 80011b2:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 80011b4:	2247      	movs	r2, #71	; 0x47
 80011b6:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 125-1;
 80011ba:	227c      	movs	r2, #124	; 0x7c
 80011bc:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c2:	f004 fb57 	bl	8005874 <HAL_TIM_Base_Init>
 80011c6:	b990      	cbnz	r0, 80011ee <MX_TIM3_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ce:	a902      	add	r1, sp, #8
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <MX_TIM3_Init+0x60>)
 80011d2:	f004 fc53 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 80011d6:	b960      	cbnz	r0, 80011f2 <MX_TIM3_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011de:	4669      	mov	r1, sp
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_TIM3_Init+0x60>)
 80011e2:	f004 fd89 	bl	8005cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	b930      	cbnz	r0, 80011f6 <MX_TIM3_Init+0x5a>
}
 80011e8:	b007      	add	sp, #28
 80011ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011ee:	f7ff fef3 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 80011f2:	f7ff fef1 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 80011f6:	f7ff feef 	bl	8000fd8 <Error_Handler>
 80011fa:	bf00      	nop
 80011fc:	20000a64 	.word	0x20000a64
 8001200:	40000400 	.word	0x40000400

08001204 <SystemClock_Config>:
{
 8001204:	b500      	push	{lr}
 8001206:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001208:	2228      	movs	r2, #40	; 0x28
 800120a:	2100      	movs	r1, #0
 800120c:	eb0d 0002 	add.w	r0, sp, r2
 8001210:	f007 fc11 	bl	8008a36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	2300      	movs	r3, #0
 8001216:	9305      	str	r3, [sp, #20]
 8001218:	9306      	str	r3, [sp, #24]
 800121a:	9307      	str	r3, [sp, #28]
 800121c:	9308      	str	r3, [sp, #32]
 800121e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	9303      	str	r3, [sp, #12]
 8001226:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001228:	2201      	movs	r2, #1
 800122a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001230:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001232:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2202      	movs	r2, #2
 8001236:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001238:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800123a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800123e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	a80a      	add	r0, sp, #40	; 0x28
 8001242:	f003 f92b 	bl	800449c <HAL_RCC_OscConfig>
 8001246:	b9c8      	cbnz	r0, 800127c <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2102      	movs	r1, #2
 800124e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125c:	a805      	add	r0, sp, #20
 800125e:	f003 fb4f 	bl	8004900 <HAL_RCC_ClockConfig>
 8001262:	b968      	cbnz	r0, 8001280 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001264:	2302      	movs	r3, #2
 8001266:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	a801      	add	r0, sp, #4
 8001270:	f003 fc40 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 8001274:	b930      	cbnz	r0, 8001284 <SystemClock_Config+0x80>
}
 8001276:	b015      	add	sp, #84	; 0x54
 8001278:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800127c:	f7ff feac 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001280:	f7ff feaa 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001284:	f7ff fea8 	bl	8000fd8 <Error_Handler>

08001288 <main>:
{
 8001288:	b508      	push	{r3, lr}
  HAL_Init();
 800128a:	f002 f85b 	bl	8003344 <HAL_Init>
  SystemClock_Config();
 800128e:	f7ff ffb9 	bl	8001204 <SystemClock_Config>
  MX_GPIO_Init();
 8001292:	f7ff fc3d 	bl	8000b10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001296:	f7ff fea1 	bl	8000fdc <MX_ADC1_Init>
  MX_I2C1_Init();
 800129a:	f7ff fecb 	bl	8001034 <MX_I2C1_Init>
  MX_SPI1_Init();
 800129e:	f7ff fee5 	bl	800106c <MX_SPI1_Init>
  MX_ADC2_Init();
 80012a2:	f7ff ff03 	bl	80010ac <MX_ADC2_Init>
  MX_TIM2_Init();
 80012a6:	f7ff ff2b 	bl	8001100 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012aa:	f7ff ff77 	bl	800119c <MX_TIM3_Init>
  osKernelInitialize();
 80012ae:	f004 fd5b 	bl	8005d68 <osKernelInitialize>
  myMutexPuntajeHandle = osMutexNew(&myMutexPuntaje_attributes);
 80012b2:	481e      	ldr	r0, [pc, #120]	; (800132c <main+0xa4>)
 80012b4:	f004 fed6 	bl	8006064 <osMutexNew>
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <main+0xa8>)
 80012ba:	6018      	str	r0, [r3, #0]
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 80012bc:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <main+0xac>)
 80012be:	2103      	movs	r1, #3
 80012c0:	200a      	movs	r0, #10
 80012c2:	f004 ffa9 	bl	8006218 <osMessageQueueNew>
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <main+0xb0>)
 80012c8:	6018      	str	r0, [r3, #0]
  queueSonidoMenuHandle = osMessageQueueNew (10, sizeof(musica_t), &queueSonidoMenu_attributes);
 80012ca:	4a1c      	ldr	r2, [pc, #112]	; (800133c <main+0xb4>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	200a      	movs	r0, #10
 80012d0:	f004 ffa2 	bl	8006218 <osMessageQueueNew>
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <main+0xb8>)
 80012d6:	6018      	str	r0, [r3, #0]
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 80012d8:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <main+0xbc>)
 80012da:	2100      	movs	r1, #0
 80012dc:	481a      	ldr	r0, [pc, #104]	; (8001348 <main+0xc0>)
 80012de:	f004 fd8b 	bl	8005df8 <osThreadNew>
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <main+0xc4>)
 80012e4:	6018      	str	r0, [r3, #0]
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 80012e6:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <main+0xc8>)
 80012e8:	2100      	movs	r1, #0
 80012ea:	481a      	ldr	r0, [pc, #104]	; (8001354 <main+0xcc>)
 80012ec:	f004 fd84 	bl	8005df8 <osThreadNew>
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <main+0xd0>)
 80012f2:	6018      	str	r0, [r3, #0]
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <main+0xd4>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <main+0xd8>)
 80012fa:	f004 fd7d 	bl	8005df8 <osThreadNew>
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <main+0xdc>)
 8001300:	6018      	str	r0, [r3, #0]
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <main+0xe0>)
 8001304:	2100      	movs	r1, #0
 8001306:	4819      	ldr	r0, [pc, #100]	; (800136c <main+0xe4>)
 8001308:	f004 fd76 	bl	8005df8 <osThreadNew>
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <main+0xe8>)
 800130e:	6018      	str	r0, [r3, #0]
  notificationFlag = osEventFlagsNew(NULL);
 8001310:	2000      	movs	r0, #0
 8001312:	f004 fde7 	bl	8005ee4 <osEventFlagsNew>
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <main+0xec>)
 8001318:	6018      	str	r0, [r3, #0]
  notificationFlag2 = osEventFlagsNew(NULL);
 800131a:	2000      	movs	r0, #0
 800131c:	f004 fde2 	bl	8005ee4 <osEventFlagsNew>
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <main+0xf0>)
 8001322:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001324:	f004 fd42 	bl	8005dac <osKernelStart>
  while (1)
 8001328:	e7fe      	b.n	8001328 <main+0xa0>
 800132a:	bf00      	nop
 800132c:	0800a0c0 	.word	0x0800a0c0
 8001330:	20000ab0 	.word	0x20000ab0
 8001334:	0800a0d0 	.word	0x0800a0d0
 8001338:	20000ac0 	.word	0x20000ac0
 800133c:	0800a0e8 	.word	0x0800a0e8
 8001340:	20000ac4 	.word	0x20000ac4
 8001344:	0800a030 	.word	0x0800a030
 8001348:	08000c01 	.word	0x08000c01
 800134c:	200008fc 	.word	0x200008fc
 8001350:	0800a078 	.word	0x0800a078
 8001354:	08000ce5 	.word	0x08000ce5
 8001358:	20000904 	.word	0x20000904
 800135c:	0800a054 	.word	0x0800a054
 8001360:	08000d39 	.word	0x08000d39
 8001364:	20000900 	.word	0x20000900
 8001368:	0800a09c 	.word	0x0800a09c
 800136c:	08000d71 	.word	0x08000d71
 8001370:	20000908 	.word	0x20000908
 8001374:	20000ab4 	.word	0x20000ab4
 8001378:	20000ab8 	.word	0x20000ab8

0800137c <getPuntajes>:
puntajes_t Puntajes[10];

puntajes_t *getPuntajes(uint8_t indice){

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
 800137c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 8001380:	4b01      	ldr	r3, [pc, #4]	; (8001388 <getPuntajes+0xc>)
 8001382:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001386:	4770      	bx	lr
 8001388:	20000acc 	.word	0x20000acc

0800138c <Write_Enable>:


void Write_Enable(){
 800138c:	b530      	push	{r4, r5, lr}
 800138e:	b083      	sub	sp, #12


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 8001390:	4c10      	ldr	r4, [pc, #64]	; (80013d4 <Write_Enable+0x48>)
 8001392:	2201      	movs	r2, #1
 8001394:	2120      	movs	r1, #32
 8001396:	4620      	mov	r0, r4
 8001398:	f002 fc65 	bl	8003c66 <HAL_GPIO_WritePin>

	uint8_t comando[2] = { 0x27 , 0xFF};
 800139c:	f64f 7327 	movw	r3, #65319	; 0xff27
 80013a0:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&hspi1, &comando[0], 1, HAL_MAX_DELAY);
 80013a4:	4d0c      	ldr	r5, [pc, #48]	; (80013d8 <Write_Enable+0x4c>)
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	2201      	movs	r2, #1
 80013ac:	a901      	add	r1, sp, #4
 80013ae:	4628      	mov	r0, r5
 80013b0:	f003 fda7 	bl	8004f02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &comando[1], 1, HAL_MAX_DELAY);
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	2201      	movs	r2, #1
 80013ba:	f10d 0105 	add.w	r1, sp, #5
 80013be:	4628      	mov	r0, r5
 80013c0:	f003 fd9f 	bl	8004f02 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2120      	movs	r1, #32
 80013c8:	4620      	mov	r0, r4
 80013ca:	f002 fc4c 	bl	8003c66 <HAL_GPIO_WritePin>


}
 80013ce:	b003      	add	sp, #12
 80013d0:	bd30      	pop	{r4, r5, pc}
 80013d2:	bf00      	nop
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	200009c4 	.word	0x200009c4

080013dc <Write_Memoria>:

void Write_Memoria(uint16_t address, uint8_t dato){
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	4604      	mov	r4, r0
 80013e2:	460d      	mov	r5, r1

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 80013e4:	4e0d      	ldr	r6, [pc, #52]	; (800141c <Write_Memoria+0x40>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	2120      	movs	r1, #32
 80013ea:	4630      	mov	r0, r6
 80013ec:	f002 fc3b 	bl	8003c66 <HAL_GPIO_WritePin>

	uint8_t comando[3] = { ((uint8_t)WRITE<<3) + (address>>8  & 0xFF), address & 0xFF, dato};
 80013f0:	0a23      	lsrs	r3, r4, #8
 80013f2:	3328      	adds	r3, #40	; 0x28
 80013f4:	f88d 3004 	strb.w	r3, [sp, #4]
 80013f8:	f88d 4005 	strb.w	r4, [sp, #5]
 80013fc:	f88d 5006 	strb.w	r5, [sp, #6]
	HAL_SPI_Transmit(&hspi1, comando, 3, HAL_MAX_DELAY);
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	2203      	movs	r2, #3
 8001406:	a901      	add	r1, sp, #4
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <Write_Memoria+0x44>)
 800140a:	f003 fd7a 	bl	8004f02 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2120      	movs	r1, #32
 8001412:	4630      	mov	r0, r6
 8001414:	f002 fc27 	bl	8003c66 <HAL_GPIO_WritePin>
}
 8001418:	b002      	add	sp, #8
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	40010c00 	.word	0x40010c00
 8001420:	200009c4 	.word	0x200009c4

08001424 <Read_all>:


	return ((dato_leido[0]<<1) + (dato_leido[1]>>7));
}

void Read_all(uint16_t address, uint16_t tamano, uint8_t *buffer){
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	4604      	mov	r4, r0
 800142a:	460e      	mov	r6, r1
 800142c:	4615      	mov	r5, r2


	uint8_t dato_actual, dato_anterior;


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2120      	movs	r1, #32
 8001432:	481f      	ldr	r0, [pc, #124]	; (80014b0 <Read_all+0x8c>)
 8001434:	f002 fc17 	bl	8003c66 <HAL_GPIO_WritePin>

	uint8_t comando[2] = { ((uint16_t)READ<<3) + (address>>8 & 0xFF), address & 0xFF};
 8001438:	0a23      	lsrs	r3, r4, #8
 800143a:	3330      	adds	r3, #48	; 0x30
 800143c:	f88d 3004 	strb.w	r3, [sp, #4]
 8001440:	f88d 4005 	strb.w	r4, [sp, #5]
	HAL_SPI_Transmit(&hspi1, comando, 2, 100);
 8001444:	4c1b      	ldr	r4, [pc, #108]	; (80014b4 <Read_all+0x90>)
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	2202      	movs	r2, #2
 800144a:	a901      	add	r1, sp, #4
 800144c:	4620      	mov	r0, r4
 800144e:	f003 fd58 	bl	8004f02 <HAL_SPI_Transmit>

	HAL_Delay(10);
 8001452:	200a      	movs	r0, #10
 8001454:	f001 ff9a 	bl	800338c <HAL_Delay>

	HAL_SPI_Receive(&hspi1, &dato_anterior, 1, HAL_MAX_DELAY);
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	2201      	movs	r2, #1
 800145e:	f10d 0106 	add.w	r1, sp, #6
 8001462:	4620      	mov	r0, r4
 8001464:	f003 ff4b 	bl	80052fe <HAL_SPI_Receive>


	for(uint16_t i=0; i< tamano; i++){
 8001468:	2400      	movs	r4, #0
 800146a:	e015      	b.n	8001498 <Read_all+0x74>

		HAL_SPI_Receive(&hspi1, &dato_actual, 1, HAL_MAX_DELAY);
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	2201      	movs	r2, #1
 8001472:	f10d 0107 	add.w	r1, sp, #7
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <Read_all+0x90>)
 8001478:	f003 ff41 	bl	80052fe <HAL_SPI_Receive>
		*buffer = (dato_anterior<<1) + (dato_actual>>7);
 800147c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001488:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 800148c:	f805 3b01 	strb.w	r3, [r5], #1
		buffer++;
		dato_anterior = dato_actual;
 8001490:	f88d 2006 	strb.w	r2, [sp, #6]
	for(uint16_t i=0; i< tamano; i++){
 8001494:	3401      	adds	r4, #1
 8001496:	b2a4      	uxth	r4, r4
 8001498:	42b4      	cmp	r4, r6
 800149a:	d3e7      	bcc.n	800146c <Read_all+0x48>
		//HAL_Delay(1);
	}

	HAL_Delay(10);
 800149c:	200a      	movs	r0, #10
 800149e:	f001 ff75 	bl	800338c <HAL_Delay>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2120      	movs	r1, #32
 80014a6:	4802      	ldr	r0, [pc, #8]	; (80014b0 <Read_all+0x8c>)
 80014a8:	f002 fbdd 	bl	8003c66 <HAL_GPIO_WritePin>

}
 80014ac:	b002      	add	sp, #8
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	200009c4 	.word	0x200009c4

080014b8 <memoriaInit>:



void memoriaInit(){
 80014b8:	b570      	push	{r4, r5, r6, lr}
 80014ba:	b09a      	sub	sp, #104	; 0x68


		char buff_nombre[NUM_MAX_POR_NOMBRE+1];
		strcpy(buff_nombre, "      ");
 80014bc:	4b74      	ldr	r3, [pc, #464]	; (8001690 <memoriaInit+0x1d8>)
 80014be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014c2:	9018      	str	r0, [sp, #96]	; 0x60
 80014c4:	f8ad 1064 	strh.w	r1, [sp, #100]	; 0x64
 80014c8:	0c09      	lsrs	r1, r1, #16
 80014ca:	f88d 1066 	strb.w	r1, [sp, #102]	; 0x66
		uint8_t puntaje_msb = 0;

		uint8_t buffer[TAMANO_TOTAL_PUNTAJES];


		Read_all(address, TAMANO_TOTAL_PUNTAJES, buffer);
 80014ce:	aa01      	add	r2, sp, #4
 80014d0:	215a      	movs	r1, #90	; 0x5a
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ffa6 	bl	8001424 <Read_all>
		uint8_t puntaje_msb = 0;
 80014d8:	2500      	movs	r5, #0
		uint8_t i=0;
 80014da:	462c      	mov	r4, r5
		uint8_t permiso = true;
 80014dc:	2101      	movs	r1, #1
		uint8_t j = 0;
 80014de:	4628      	mov	r0, r5
 80014e0:	e026      	b.n	8001530 <memoriaInit+0x78>
 80014e2:	f1a4 0219 	sub.w	r2, r4, #25
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	2301      	movs	r3, #1
 80014ea:	4093      	lsls	r3, r2
 80014ec:	4a69      	ldr	r2, [pc, #420]	; (8001694 <memoriaInit+0x1dc>)
 80014ee:	4213      	tst	r3, r2
 80014f0:	f040 809e 	bne.w	8001630 <memoriaInit+0x178>
 80014f4:	4a68      	ldr	r2, [pc, #416]	; (8001698 <memoriaInit+0x1e0>)
 80014f6:	4213      	tst	r3, r2
 80014f8:	d026      	beq.n	8001548 <memoriaInit+0x90>
 80014fa:	e00f      	b.n	800151c <memoriaInit+0x64>
 80014fc:	2c59      	cmp	r4, #89	; 0x59
 80014fe:	d823      	bhi.n	8001548 <memoriaInit+0x90>
 8001500:	2c3d      	cmp	r4, #61	; 0x3d
 8001502:	d321      	bcc.n	8001548 <memoriaInit+0x90>
 8001504:	f1a4 023d 	sub.w	r2, r4, #61	; 0x3d
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	2301      	movs	r3, #1
 800150c:	4093      	lsls	r3, r2
 800150e:	4a61      	ldr	r2, [pc, #388]	; (8001694 <memoriaInit+0x1dc>)
 8001510:	4213      	tst	r3, r2
 8001512:	f040 808d 	bne.w	8001630 <memoriaInit+0x178>
 8001516:	4a60      	ldr	r2, [pc, #384]	; (8001698 <memoriaInit+0x1e0>)
 8001518:	4213      	tst	r3, r2
 800151a:	d015      	beq.n	8001548 <memoriaInit+0x90>

		do{

			if( (i==7) || (i==16) || (i==25) || (i==34) || (i==43) || (i==52) || (i==61) || (i==70) || (i==79) || (i==88) ){

				puntaje_msb = buffer[i];
 800151c:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8001520:	446b      	add	r3, sp
 8001522:	f813 5c64 	ldrb.w	r5, [r3, #-100]
					else{
						j++;
					}
				}
			}
			i++;
 8001526:	3401      	adds	r4, #1
 8001528:	b2e4      	uxtb	r4, r4

		}while(i != TAMANO_TOTAL_PUNTAJES);
 800152a:	2c5a      	cmp	r4, #90	; 0x5a
 800152c:	f000 815e 	beq.w	80017ec <memoriaInit+0x334>
			if( (i==7) || (i==16) || (i==25) || (i==34) || (i==43) || (i==52) || (i==61) || (i==70) || (i==79) || (i==88) ){
 8001530:	2c07      	cmp	r4, #7
 8001532:	d0f3      	beq.n	800151c <memoriaInit+0x64>
 8001534:	2c35      	cmp	r4, #53	; 0x35
 8001536:	d8e1      	bhi.n	80014fc <memoriaInit+0x44>
 8001538:	2c19      	cmp	r4, #25
 800153a:	d2d2      	bcs.n	80014e2 <memoriaInit+0x2a>
 800153c:	2c10      	cmp	r4, #16
 800153e:	d0ed      	beq.n	800151c <memoriaInit+0x64>
 8001540:	2c11      	cmp	r4, #17
 8001542:	d075      	beq.n	8001630 <memoriaInit+0x178>
 8001544:	2c08      	cmp	r4, #8
 8001546:	d073      	beq.n	8001630 <memoriaInit+0x178>
				if( (buff_nombre[j] != '\0') && permiso==true){
 8001548:	f100 0368 	add.w	r3, r0, #104	; 0x68
 800154c:	446b      	add	r3, sp
 800154e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0e7      	beq.n	8001526 <memoriaInit+0x6e>
 8001556:	2901      	cmp	r1, #1
 8001558:	d1e5      	bne.n	8001526 <memoriaInit+0x6e>
					buff_nombre[j]  = buffer[i];;
 800155a:	f104 0368 	add.w	r3, r4, #104	; 0x68
 800155e:	446b      	add	r3, sp
 8001560:	f813 6c64 	ldrb.w	r6, [r3, #-100]
 8001564:	f100 0368 	add.w	r3, r0, #104	; 0x68
 8001568:	eb0d 0203 	add.w	r2, sp, r3
 800156c:	f802 6c08 	strb.w	r6, [r2, #-8]
					if(buff_nombre[j] == '\0'){
 8001570:	2e00      	cmp	r6, #0
 8001572:	f040 812f 	bne.w	80017d4 <memoriaInit+0x31c>
						if((i>=0 && i<7)){
 8001576:	2c57      	cmp	r4, #87	; 0x57
 8001578:	f200 80f6 	bhi.w	8001768 <memoriaInit+0x2b0>
 800157c:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001580:	00f000f0 	.word	0x00f000f0
 8001584:	00f000f0 	.word	0x00f000f0
 8001588:	00f000f0 	.word	0x00f000f0
 800158c:	00f400f0 	.word	0x00f400f0
 8001590:	00fd00f4 	.word	0x00fd00f4
 8001594:	00fd00fd 	.word	0x00fd00fd
 8001598:	00fd00fd 	.word	0x00fd00fd
 800159c:	00fd00fd 	.word	0x00fd00fd
 80015a0:	00f400f4 	.word	0x00f400f4
 80015a4:	01020102 	.word	0x01020102
 80015a8:	01020102 	.word	0x01020102
 80015ac:	01020102 	.word	0x01020102
 80015b0:	00f40102 	.word	0x00f40102
 80015b4:	010700f4 	.word	0x010700f4
 80015b8:	01070107 	.word	0x01070107
 80015bc:	01070107 	.word	0x01070107
 80015c0:	01070107 	.word	0x01070107
 80015c4:	00f400f4 	.word	0x00f400f4
 80015c8:	010c010c 	.word	0x010c010c
 80015cc:	010c010c 	.word	0x010c010c
 80015d0:	010c010c 	.word	0x010c010c
 80015d4:	00f4010c 	.word	0x00f4010c
 80015d8:	011100f4 	.word	0x011100f4
 80015dc:	01110111 	.word	0x01110111
 80015e0:	01110111 	.word	0x01110111
 80015e4:	01110111 	.word	0x01110111
 80015e8:	00f400f4 	.word	0x00f400f4
 80015ec:	01160116 	.word	0x01160116
 80015f0:	01160116 	.word	0x01160116
 80015f4:	01160116 	.word	0x01160116
 80015f8:	00f40116 	.word	0x00f40116
 80015fc:	011b00f4 	.word	0x011b00f4
 8001600:	011b011b 	.word	0x011b011b
 8001604:	011b011b 	.word	0x011b011b
 8001608:	011b011b 	.word	0x011b011b
 800160c:	00f400f4 	.word	0x00f400f4
 8001610:	01200120 	.word	0x01200120
 8001614:	01200120 	.word	0x01200120
 8001618:	01200120 	.word	0x01200120
 800161c:	00f40120 	.word	0x00f40120
 8001620:	012500f4 	.word	0x012500f4
 8001624:	01250125 	.word	0x01250125
 8001628:	01250125 	.word	0x01250125
 800162c:	01250125 	.word	0x01250125
				puntaje_lsb = buffer[i];
 8001630:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8001634:	446b      	add	r3, sp
 8001636:	f813 3c64 	ldrb.w	r3, [r3, #-100]
				switch(i){
 800163a:	2c23      	cmp	r4, #35	; 0x23
 800163c:	d922      	bls.n	8001684 <memoriaInit+0x1cc>
 800163e:	2c59      	cmp	r4, #89	; 0x59
 8001640:	f200 80d1 	bhi.w	80017e6 <memoriaInit+0x32e>
 8001644:	2c2c      	cmp	r4, #44	; 0x2c
 8001646:	d33e      	bcc.n	80016c6 <memoriaInit+0x20e>
 8001648:	f1a4 022c 	sub.w	r2, r4, #44	; 0x2c
 800164c:	2a2d      	cmp	r2, #45	; 0x2d
 800164e:	f200 80c4 	bhi.w	80017da <memoriaInit+0x322>
 8001652:	e8df f002 	tbb	[pc, r2]
 8001656:	c257      	.short	0xc257
 8001658:	c2c2c2c2 	.word	0xc2c2c2c2
 800165c:	5ec2c2c2 	.word	0x5ec2c2c2
 8001660:	c2c2c2c2 	.word	0xc2c2c2c2
 8001664:	c2c2c2c2 	.word	0xc2c2c2c2
 8001668:	c2c2c265 	.word	0xc2c2c265
 800166c:	c2c2c2c2 	.word	0xc2c2c2c2
 8001670:	c2c26dc2 	.word	0xc2c26dc2
 8001674:	c2c2c2c2 	.word	0xc2c2c2c2
 8001678:	c275c2c2 	.word	0xc275c2c2
 800167c:	c2c2c2c2 	.word	0xc2c2c2c2
 8001680:	7dc2c2c2 	.word	0x7dc2c2c2
 8001684:	2c08      	cmp	r4, #8
 8001686:	d209      	bcs.n	800169c <memoriaInit+0x1e4>
 8001688:	2500      	movs	r5, #0
 800168a:	2101      	movs	r1, #1
 800168c:	e74b      	b.n	8001526 <memoriaInit+0x6e>
 800168e:	bf00      	nop
 8001690:	0800a100 	.word	0x0800a100
 8001694:	10080402 	.word	0x10080402
 8001698:	08040201 	.word	0x08040201
 800169c:	f1a4 0208 	sub.w	r2, r4, #8
 80016a0:	2a1b      	cmp	r2, #27
 80016a2:	f200 809d 	bhi.w	80017e0 <memoriaInit+0x328>
 80016a6:	e8df f002 	tbb	[pc, r2]
 80016aa:	9b11      	.short	0x9b11
 80016ac:	9b9b9b9b 	.word	0x9b9b9b9b
 80016b0:	189b9b9b 	.word	0x189b9b9b
 80016b4:	9b9b9b9b 	.word	0x9b9b9b9b
 80016b8:	9b9b9b9b 	.word	0x9b9b9b9b
 80016bc:	9b9b9b1f 	.word	0x9b9b9b1f
 80016c0:	9b9b9b9b 	.word	0x9b9b9b9b
 80016c4:	269b      	.short	0x269b
 80016c6:	2500      	movs	r5, #0
 80016c8:	2101      	movs	r1, #1
 80016ca:	e72c      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[0].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80016cc:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80016d0:	4a47      	ldr	r2, [pc, #284]	; (80017f0 <memoriaInit+0x338>)
 80016d2:	8113      	strh	r3, [r2, #8]
				puntaje_msb = 0;
 80016d4:	2500      	movs	r5, #0
				permiso = true;
 80016d6:	2101      	movs	r1, #1
					break;
 80016d8:	e725      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[1].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80016da:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80016de:	4a44      	ldr	r2, [pc, #272]	; (80017f0 <memoriaInit+0x338>)
 80016e0:	8253      	strh	r3, [r2, #18]
				puntaje_msb = 0;
 80016e2:	2500      	movs	r5, #0
				permiso = true;
 80016e4:	2101      	movs	r1, #1
					break;
 80016e6:	e71e      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[2].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80016e8:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80016ec:	4a40      	ldr	r2, [pc, #256]	; (80017f0 <memoriaInit+0x338>)
 80016ee:	8393      	strh	r3, [r2, #28]
				puntaje_msb = 0;
 80016f0:	2500      	movs	r5, #0
				permiso = true;
 80016f2:	2101      	movs	r1, #1
					break;
 80016f4:	e717      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[3].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80016f6:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80016fa:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <memoriaInit+0x338>)
 80016fc:	84d3      	strh	r3, [r2, #38]	; 0x26
				puntaje_msb = 0;
 80016fe:	2500      	movs	r5, #0
				permiso = true;
 8001700:	2101      	movs	r1, #1
					break;
 8001702:	e710      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[4].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001704:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001708:	4a39      	ldr	r2, [pc, #228]	; (80017f0 <memoriaInit+0x338>)
 800170a:	8613      	strh	r3, [r2, #48]	; 0x30
				puntaje_msb = 0;
 800170c:	2500      	movs	r5, #0
				permiso = true;
 800170e:	2101      	movs	r1, #1
					break;
 8001710:	e709      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[5].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001712:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001716:	4a36      	ldr	r2, [pc, #216]	; (80017f0 <memoriaInit+0x338>)
 8001718:	8753      	strh	r3, [r2, #58]	; 0x3a
				puntaje_msb = 0;
 800171a:	2500      	movs	r5, #0
				permiso = true;
 800171c:	2101      	movs	r1, #1
					break;
 800171e:	e702      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[6].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001720:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001724:	4a32      	ldr	r2, [pc, #200]	; (80017f0 <memoriaInit+0x338>)
 8001726:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				puntaje_msb = 0;
 800172a:	2500      	movs	r5, #0
				permiso = true;
 800172c:	2101      	movs	r1, #1
					break;
 800172e:	e6fa      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[7].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001730:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001734:	4a2e      	ldr	r2, [pc, #184]	; (80017f0 <memoriaInit+0x338>)
 8001736:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				puntaje_msb = 0;
 800173a:	2500      	movs	r5, #0
				permiso = true;
 800173c:	2101      	movs	r1, #1
					break;
 800173e:	e6f2      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[8].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001740:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001744:	4a2a      	ldr	r2, [pc, #168]	; (80017f0 <memoriaInit+0x338>)
 8001746:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				puntaje_msb = 0;
 800174a:	2500      	movs	r5, #0
				permiso = true;
 800174c:	2101      	movs	r1, #1
					break;
 800174e:	e6ea      	b.n	8001526 <memoriaInit+0x6e>
					Puntajes[9].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001750:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001754:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <memoriaInit+0x338>)
 8001756:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
				puntaje_msb = 0;
 800175a:	2500      	movs	r5, #0
				permiso = true;
 800175c:	2101      	movs	r1, #1
					break;
 800175e:	e6e2      	b.n	8001526 <memoriaInit+0x6e>
							strcpy(Puntajes[0].nombre, buff_nombre);
 8001760:	a918      	add	r1, sp, #96	; 0x60
 8001762:	4823      	ldr	r0, [pc, #140]	; (80017f0 <memoriaInit+0x338>)
 8001764:	f007 f9e3 	bl	8008b2e <strcpy>
						strcpy(buff_nombre, "       ");
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <memoriaInit+0x33c>)
 800176a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800176e:	ab1a      	add	r3, sp, #104	; 0x68
 8001770:	e903 0003 	stmdb	r3, {r0, r1}
						permiso = false;
 8001774:	4631      	mov	r1, r6
						j = 0;
 8001776:	4630      	mov	r0, r6
 8001778:	e6d5      	b.n	8001526 <memoriaInit+0x6e>
							strcpy(Puntajes[1].nombre, buff_nombre);
 800177a:	a918      	add	r1, sp, #96	; 0x60
 800177c:	481e      	ldr	r0, [pc, #120]	; (80017f8 <memoriaInit+0x340>)
 800177e:	f007 f9d6 	bl	8008b2e <strcpy>
 8001782:	e7f1      	b.n	8001768 <memoriaInit+0x2b0>
							strcpy(Puntajes[2].nombre, buff_nombre);
 8001784:	a918      	add	r1, sp, #96	; 0x60
 8001786:	481d      	ldr	r0, [pc, #116]	; (80017fc <memoriaInit+0x344>)
 8001788:	f007 f9d1 	bl	8008b2e <strcpy>
 800178c:	e7ec      	b.n	8001768 <memoriaInit+0x2b0>
							strcpy(Puntajes[3].nombre, buff_nombre);
 800178e:	a918      	add	r1, sp, #96	; 0x60
 8001790:	481b      	ldr	r0, [pc, #108]	; (8001800 <memoriaInit+0x348>)
 8001792:	f007 f9cc 	bl	8008b2e <strcpy>
 8001796:	e7e7      	b.n	8001768 <memoriaInit+0x2b0>
							strcpy(Puntajes[4].nombre, buff_nombre);
 8001798:	a918      	add	r1, sp, #96	; 0x60
 800179a:	481a      	ldr	r0, [pc, #104]	; (8001804 <memoriaInit+0x34c>)
 800179c:	f007 f9c7 	bl	8008b2e <strcpy>
 80017a0:	e7e2      	b.n	8001768 <memoriaInit+0x2b0>
							strcpy(Puntajes[5].nombre, buff_nombre);
 80017a2:	a918      	add	r1, sp, #96	; 0x60
 80017a4:	4818      	ldr	r0, [pc, #96]	; (8001808 <memoriaInit+0x350>)
 80017a6:	f007 f9c2 	bl	8008b2e <strcpy>
 80017aa:	e7dd      	b.n	8001768 <memoriaInit+0x2b0>
							strcpy(Puntajes[6].nombre, buff_nombre);
 80017ac:	a918      	add	r1, sp, #96	; 0x60
 80017ae:	4817      	ldr	r0, [pc, #92]	; (800180c <memoriaInit+0x354>)
 80017b0:	f007 f9bd 	bl	8008b2e <strcpy>
 80017b4:	e7d8      	b.n	8001768 <memoriaInit+0x2b0>
							strcpy(Puntajes[7].nombre, buff_nombre);
 80017b6:	a918      	add	r1, sp, #96	; 0x60
 80017b8:	4815      	ldr	r0, [pc, #84]	; (8001810 <memoriaInit+0x358>)
 80017ba:	f007 f9b8 	bl	8008b2e <strcpy>
 80017be:	e7d3      	b.n	8001768 <memoriaInit+0x2b0>
							strcpy(Puntajes[8].nombre, buff_nombre);
 80017c0:	a918      	add	r1, sp, #96	; 0x60
 80017c2:	4814      	ldr	r0, [pc, #80]	; (8001814 <memoriaInit+0x35c>)
 80017c4:	f007 f9b3 	bl	8008b2e <strcpy>
 80017c8:	e7ce      	b.n	8001768 <memoriaInit+0x2b0>
							strcpy(Puntajes[9].nombre, buff_nombre);
 80017ca:	a918      	add	r1, sp, #96	; 0x60
 80017cc:	4812      	ldr	r0, [pc, #72]	; (8001818 <memoriaInit+0x360>)
 80017ce:	f007 f9ae 	bl	8008b2e <strcpy>
 80017d2:	e7c9      	b.n	8001768 <memoriaInit+0x2b0>
						j++;
 80017d4:	3001      	adds	r0, #1
 80017d6:	b2c0      	uxtb	r0, r0
 80017d8:	e6a5      	b.n	8001526 <memoriaInit+0x6e>
				switch(i){
 80017da:	2500      	movs	r5, #0
 80017dc:	2101      	movs	r1, #1
 80017de:	e6a2      	b.n	8001526 <memoriaInit+0x6e>
 80017e0:	2500      	movs	r5, #0
 80017e2:	2101      	movs	r1, #1
 80017e4:	e69f      	b.n	8001526 <memoriaInit+0x6e>
 80017e6:	2500      	movs	r5, #0
 80017e8:	2101      	movs	r1, #1
 80017ea:	e69c      	b.n	8001526 <memoriaInit+0x6e>


}
 80017ec:	b01a      	add	sp, #104	; 0x68
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	20000acc 	.word	0x20000acc
 80017f4:	0800a108 	.word	0x0800a108
 80017f8:	20000ad6 	.word	0x20000ad6
 80017fc:	20000ae0 	.word	0x20000ae0
 8001800:	20000aea 	.word	0x20000aea
 8001804:	20000af4 	.word	0x20000af4
 8001808:	20000afe 	.word	0x20000afe
 800180c:	20000b08 	.word	0x20000b08
 8001810:	20000b12 	.word	0x20000b12
 8001814:	20000b1c 	.word	0x20000b1c
 8001818:	20000b26 	.word	0x20000b26

0800181c <writeNuevosPuntajes>:



void writeNuevosPuntajes(uint8_t permutaciones){
 800181c:	b530      	push	{r4, r5, lr}
 800181e:	b099      	sub	sp, #100	; 0x64
 8001820:	4605      	mov	r5, r0

	uint8_t k=0;
	uint16_t address;


	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 8001822:	2300      	movs	r3, #0
	uint8_t k=0;
 8001824:	4619      	mov	r1, r3
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 8001826:	e0d8      	b.n	80019da <writeNuevosPuntajes+0x1be>

		if(i>=0 && i<7){

			buff_nuevosPuntajes[i] = Puntajes[0].nombre[k];
 8001828:	4a65      	ldr	r2, [pc, #404]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 800182a:	5c50      	ldrb	r0, [r2, r1]
 800182c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001830:	446a      	add	r2, sp
 8001832:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001836:	3101      	adds	r1, #1
 8001838:	b2c9      	uxtb	r1, r1
			buff_nuevosPuntajes[i] = Puntajes[9].nombre[k];
			k++;
		}


		switch(i){
 800183a:	1fda      	subs	r2, r3, #7
 800183c:	2a52      	cmp	r2, #82	; 0x52
 800183e:	f200 80ca 	bhi.w	80019d6 <writeNuevosPuntajes+0x1ba>
 8001842:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001846:	00bf      	.short	0x00bf
 8001848:	00c80183 	.word	0x00c80183
 800184c:	00c800c8 	.word	0x00c800c8
 8001850:	00c800c8 	.word	0x00c800c8
 8001854:	00c800c8 	.word	0x00c800c8
 8001858:	0195018b 	.word	0x0195018b
 800185c:	00c800c8 	.word	0x00c800c8
 8001860:	00c800c8 	.word	0x00c800c8
 8001864:	00c800c8 	.word	0x00c800c8
 8001868:	019d00c8 	.word	0x019d00c8
 800186c:	00c801a7 	.word	0x00c801a7
 8001870:	00c800c8 	.word	0x00c800c8
 8001874:	00c800c8 	.word	0x00c800c8
 8001878:	00c800c8 	.word	0x00c800c8
 800187c:	01b901af 	.word	0x01b901af
 8001880:	00c800c8 	.word	0x00c800c8
 8001884:	00c800c8 	.word	0x00c800c8
 8001888:	00c800c8 	.word	0x00c800c8
 800188c:	01c100c8 	.word	0x01c100c8
 8001890:	00c801cb 	.word	0x00c801cb
 8001894:	00c800c8 	.word	0x00c800c8
 8001898:	00c800c8 	.word	0x00c800c8
 800189c:	00c800c8 	.word	0x00c800c8
 80018a0:	01dd01d3 	.word	0x01dd01d3
 80018a4:	00c800c8 	.word	0x00c800c8
 80018a8:	00c800c8 	.word	0x00c800c8
 80018ac:	00c800c8 	.word	0x00c800c8
 80018b0:	01e500c8 	.word	0x01e500c8
 80018b4:	00c801f0 	.word	0x00c801f0
 80018b8:	00c800c8 	.word	0x00c800c8
 80018bc:	00c800c8 	.word	0x00c800c8
 80018c0:	00c800c8 	.word	0x00c800c8
 80018c4:	020401f9 	.word	0x020401f9
 80018c8:	00c800c8 	.word	0x00c800c8
 80018cc:	00c800c8 	.word	0x00c800c8
 80018d0:	00c800c8 	.word	0x00c800c8
 80018d4:	020d00c8 	.word	0x020d00c8
 80018d8:	00c80218 	.word	0x00c80218
 80018dc:	00c800c8 	.word	0x00c800c8
 80018e0:	00c800c8 	.word	0x00c800c8
 80018e4:	00c800c8 	.word	0x00c800c8
 80018e8:	022c0221 	.word	0x022c0221
			buff_nuevosPuntajes[i] = Puntajes[1].nombre[k];
 80018ec:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 80018ee:	440a      	add	r2, r1
 80018f0:	7a90      	ldrb	r0, [r2, #10]
 80018f2:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80018f6:	446a      	add	r2, sp
 80018f8:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 80018fc:	3101      	adds	r1, #1
 80018fe:	b2c9      	uxtb	r1, r1
 8001900:	e79b      	b.n	800183a <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[2].nombre[k];
 8001902:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 8001904:	440a      	add	r2, r1
 8001906:	7d10      	ldrb	r0, [r2, #20]
 8001908:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800190c:	446a      	add	r2, sp
 800190e:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001912:	3101      	adds	r1, #1
 8001914:	b2c9      	uxtb	r1, r1
 8001916:	e790      	b.n	800183a <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[3].nombre[k];
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 800191a:	440a      	add	r2, r1
 800191c:	7f90      	ldrb	r0, [r2, #30]
 800191e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001922:	446a      	add	r2, sp
 8001924:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001928:	3101      	adds	r1, #1
 800192a:	b2c9      	uxtb	r1, r1
 800192c:	e785      	b.n	800183a <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[4].nombre[k];
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 8001930:	440a      	add	r2, r1
 8001932:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8001936:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800193a:	446a      	add	r2, sp
 800193c:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001940:	3101      	adds	r1, #1
 8001942:	b2c9      	uxtb	r1, r1
 8001944:	e779      	b.n	800183a <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[5].nombre[k];
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 8001948:	440a      	add	r2, r1
 800194a:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
 800194e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001952:	446a      	add	r2, sp
 8001954:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001958:	3101      	adds	r1, #1
 800195a:	b2c9      	uxtb	r1, r1
 800195c:	e76d      	b.n	800183a <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[6].nombre[k];
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 8001960:	440a      	add	r2, r1
 8001962:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
 8001966:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800196a:	446a      	add	r2, sp
 800196c:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001970:	3101      	adds	r1, #1
 8001972:	b2c9      	uxtb	r1, r1
 8001974:	e761      	b.n	800183a <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[7].nombre[k];
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 8001978:	440a      	add	r2, r1
 800197a:	f892 0046 	ldrb.w	r0, [r2, #70]	; 0x46
 800197e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001982:	446a      	add	r2, sp
 8001984:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 8001988:	3101      	adds	r1, #1
 800198a:	b2c9      	uxtb	r1, r1
 800198c:	e755      	b.n	800183a <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[8].nombre[k];
 800198e:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 8001990:	440a      	add	r2, r1
 8001992:	f892 0050 	ldrb.w	r0, [r2, #80]	; 0x50
 8001996:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800199a:	446a      	add	r2, sp
 800199c:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 80019a0:	3101      	adds	r1, #1
 80019a2:	b2c9      	uxtb	r1, r1
 80019a4:	e749      	b.n	800183a <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[9].nombre[k];
 80019a6:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <writeNuevosPuntajes+0x1a4>)
 80019a8:	440a      	add	r2, r1
 80019aa:	f892 005a 	ldrb.w	r0, [r2, #90]	; 0x5a
 80019ae:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80019b2:	446a      	add	r2, sp
 80019b4:	f802 0c5c 	strb.w	r0, [r2, #-92]
			k++;
 80019b8:	3101      	adds	r1, #1
 80019ba:	b2c9      	uxtb	r1, r1
 80019bc:	e73d      	b.n	800183a <writeNuevosPuntajes+0x1e>
 80019be:	bf00      	nop
 80019c0:	20000acc 	.word	0x20000acc


		case 7:
			buff_nuevosPuntajes[i] = Puntajes[0].puntaje >>8;
 80019c4:	4acc      	ldr	r2, [pc, #816]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 80019c6:	8911      	ldrh	r1, [r2, #8]
 80019c8:	0a09      	lsrs	r1, r1, #8
 80019ca:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80019ce:	446a      	add	r2, sp
 80019d0:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 80019d4:	2100      	movs	r1, #0
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 80019d6:	3301      	adds	r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b59      	cmp	r3, #89	; 0x59
 80019dc:	f200 8168 	bhi.w	8001cb0 <writeNuevosPuntajes+0x494>
		if(i>=0 && i<7){
 80019e0:	2b57      	cmp	r3, #87	; 0x57
 80019e2:	f63f af2a 	bhi.w	800183a <writeNuevosPuntajes+0x1e>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <writeNuevosPuntajes+0x1d0>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	08001829 	.word	0x08001829
 80019f0:	08001829 	.word	0x08001829
 80019f4:	08001829 	.word	0x08001829
 80019f8:	08001829 	.word	0x08001829
 80019fc:	08001829 	.word	0x08001829
 8001a00:	08001829 	.word	0x08001829
 8001a04:	08001829 	.word	0x08001829
 8001a08:	0800183b 	.word	0x0800183b
 8001a0c:	0800183b 	.word	0x0800183b
 8001a10:	080018ed 	.word	0x080018ed
 8001a14:	080018ed 	.word	0x080018ed
 8001a18:	080018ed 	.word	0x080018ed
 8001a1c:	080018ed 	.word	0x080018ed
 8001a20:	080018ed 	.word	0x080018ed
 8001a24:	080018ed 	.word	0x080018ed
 8001a28:	080018ed 	.word	0x080018ed
 8001a2c:	0800183b 	.word	0x0800183b
 8001a30:	0800183b 	.word	0x0800183b
 8001a34:	08001903 	.word	0x08001903
 8001a38:	08001903 	.word	0x08001903
 8001a3c:	08001903 	.word	0x08001903
 8001a40:	08001903 	.word	0x08001903
 8001a44:	08001903 	.word	0x08001903
 8001a48:	08001903 	.word	0x08001903
 8001a4c:	08001903 	.word	0x08001903
 8001a50:	0800183b 	.word	0x0800183b
 8001a54:	0800183b 	.word	0x0800183b
 8001a58:	08001919 	.word	0x08001919
 8001a5c:	08001919 	.word	0x08001919
 8001a60:	08001919 	.word	0x08001919
 8001a64:	08001919 	.word	0x08001919
 8001a68:	08001919 	.word	0x08001919
 8001a6c:	08001919 	.word	0x08001919
 8001a70:	08001919 	.word	0x08001919
 8001a74:	0800183b 	.word	0x0800183b
 8001a78:	0800183b 	.word	0x0800183b
 8001a7c:	0800192f 	.word	0x0800192f
 8001a80:	0800192f 	.word	0x0800192f
 8001a84:	0800192f 	.word	0x0800192f
 8001a88:	0800192f 	.word	0x0800192f
 8001a8c:	0800192f 	.word	0x0800192f
 8001a90:	0800192f 	.word	0x0800192f
 8001a94:	0800192f 	.word	0x0800192f
 8001a98:	0800183b 	.word	0x0800183b
 8001a9c:	0800183b 	.word	0x0800183b
 8001aa0:	08001947 	.word	0x08001947
 8001aa4:	08001947 	.word	0x08001947
 8001aa8:	08001947 	.word	0x08001947
 8001aac:	08001947 	.word	0x08001947
 8001ab0:	08001947 	.word	0x08001947
 8001ab4:	08001947 	.word	0x08001947
 8001ab8:	08001947 	.word	0x08001947
 8001abc:	0800183b 	.word	0x0800183b
 8001ac0:	0800183b 	.word	0x0800183b
 8001ac4:	0800195f 	.word	0x0800195f
 8001ac8:	0800195f 	.word	0x0800195f
 8001acc:	0800195f 	.word	0x0800195f
 8001ad0:	0800195f 	.word	0x0800195f
 8001ad4:	0800195f 	.word	0x0800195f
 8001ad8:	0800195f 	.word	0x0800195f
 8001adc:	0800195f 	.word	0x0800195f
 8001ae0:	0800183b 	.word	0x0800183b
 8001ae4:	0800183b 	.word	0x0800183b
 8001ae8:	08001977 	.word	0x08001977
 8001aec:	08001977 	.word	0x08001977
 8001af0:	08001977 	.word	0x08001977
 8001af4:	08001977 	.word	0x08001977
 8001af8:	08001977 	.word	0x08001977
 8001afc:	08001977 	.word	0x08001977
 8001b00:	08001977 	.word	0x08001977
 8001b04:	0800183b 	.word	0x0800183b
 8001b08:	0800183b 	.word	0x0800183b
 8001b0c:	0800198f 	.word	0x0800198f
 8001b10:	0800198f 	.word	0x0800198f
 8001b14:	0800198f 	.word	0x0800198f
 8001b18:	0800198f 	.word	0x0800198f
 8001b1c:	0800198f 	.word	0x0800198f
 8001b20:	0800198f 	.word	0x0800198f
 8001b24:	0800198f 	.word	0x0800198f
 8001b28:	0800183b 	.word	0x0800183b
 8001b2c:	0800183b 	.word	0x0800183b
 8001b30:	080019a7 	.word	0x080019a7
 8001b34:	080019a7 	.word	0x080019a7
 8001b38:	080019a7 	.word	0x080019a7
 8001b3c:	080019a7 	.word	0x080019a7
 8001b40:	080019a7 	.word	0x080019a7
 8001b44:	080019a7 	.word	0x080019a7
 8001b48:	080019a7 	.word	0x080019a7
			break;
		case 8:
			buff_nuevosPuntajes[i] = Puntajes[0].puntaje & 0xFF;
 8001b4c:	4a6a      	ldr	r2, [pc, #424]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001b4e:	8910      	ldrh	r0, [r2, #8]
 8001b50:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001b54:	446a      	add	r2, sp
 8001b56:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001b5a:	e73c      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 16:
			buff_nuevosPuntajes[i] = Puntajes[1].puntaje >>8;
 8001b5c:	4a66      	ldr	r2, [pc, #408]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001b5e:	8a51      	ldrh	r1, [r2, #18]
 8001b60:	0a09      	lsrs	r1, r1, #8
 8001b62:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001b66:	446a      	add	r2, sp
 8001b68:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001b6c:	2100      	movs	r1, #0
			break;
 8001b6e:	e732      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 17:
			buff_nuevosPuntajes[i] = Puntajes[1].puntaje & 0xFF;
 8001b70:	4a61      	ldr	r2, [pc, #388]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001b72:	8a50      	ldrh	r0, [r2, #18]
 8001b74:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001b78:	446a      	add	r2, sp
 8001b7a:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001b7e:	e72a      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 25:
			buff_nuevosPuntajes[i] = Puntajes[2].puntaje >>8;
 8001b80:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001b82:	8b91      	ldrh	r1, [r2, #28]
 8001b84:	0a09      	lsrs	r1, r1, #8
 8001b86:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001b8a:	446a      	add	r2, sp
 8001b8c:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001b90:	2100      	movs	r1, #0
			break;
 8001b92:	e720      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 26:
			buff_nuevosPuntajes[i] = Puntajes[2].puntaje & 0xFF;
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001b96:	8b90      	ldrh	r0, [r2, #28]
 8001b98:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001b9c:	446a      	add	r2, sp
 8001b9e:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001ba2:	e718      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 34:
			buff_nuevosPuntajes[i] = Puntajes[3].puntaje >>8;
 8001ba4:	4a54      	ldr	r2, [pc, #336]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001ba6:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8001ba8:	0a09      	lsrs	r1, r1, #8
 8001baa:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001bae:	446a      	add	r2, sp
 8001bb0:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001bb4:	2100      	movs	r1, #0
			break;
 8001bb6:	e70e      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 35:
			buff_nuevosPuntajes[i] = Puntajes[3].puntaje & 0xFF;
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001bba:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8001bbc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001bc0:	446a      	add	r2, sp
 8001bc2:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001bc6:	e706      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 43:
			buff_nuevosPuntajes[i] = Puntajes[4].puntaje >>8;
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001bca:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 8001bcc:	0a09      	lsrs	r1, r1, #8
 8001bce:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001bd2:	446a      	add	r2, sp
 8001bd4:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001bd8:	2100      	movs	r1, #0
			break;
 8001bda:	e6fc      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 44:
			buff_nuevosPuntajes[i] = Puntajes[4].puntaje & 0xFF;
 8001bdc:	4a46      	ldr	r2, [pc, #280]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001bde:	8e10      	ldrh	r0, [r2, #48]	; 0x30
 8001be0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001be4:	446a      	add	r2, sp
 8001be6:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001bea:	e6f4      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 52:
			buff_nuevosPuntajes[i] = Puntajes[5].puntaje >>8;
 8001bec:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001bee:	8f51      	ldrh	r1, [r2, #58]	; 0x3a
 8001bf0:	0a09      	lsrs	r1, r1, #8
 8001bf2:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001bf6:	446a      	add	r2, sp
 8001bf8:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001bfc:	2100      	movs	r1, #0
			break;
 8001bfe:	e6ea      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 53:
			buff_nuevosPuntajes[i] = Puntajes[5].puntaje & 0xFF;
 8001c00:	4a3d      	ldr	r2, [pc, #244]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001c02:	8f50      	ldrh	r0, [r2, #58]	; 0x3a
 8001c04:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c08:	446a      	add	r2, sp
 8001c0a:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001c0e:	e6e2      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 61:
			buff_nuevosPuntajes[i] = Puntajes[6].puntaje >>8;
 8001c10:	4a39      	ldr	r2, [pc, #228]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001c12:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8001c16:	0a09      	lsrs	r1, r1, #8
 8001c18:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c1c:	446a      	add	r2, sp
 8001c1e:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001c22:	2100      	movs	r1, #0
			break;
 8001c24:	e6d7      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 62:
			buff_nuevosPuntajes[i] = Puntajes[6].puntaje & 0xFF;
 8001c26:	4a34      	ldr	r2, [pc, #208]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001c28:	f8b2 0044 	ldrh.w	r0, [r2, #68]	; 0x44
 8001c2c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c30:	446a      	add	r2, sp
 8001c32:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001c36:	e6ce      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 70:
			buff_nuevosPuntajes[i] = Puntajes[7].puntaje >>8;
 8001c38:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001c3a:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e
 8001c3e:	0a09      	lsrs	r1, r1, #8
 8001c40:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c44:	446a      	add	r2, sp
 8001c46:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001c4a:	2100      	movs	r1, #0
			break;
 8001c4c:	e6c3      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 71:
			buff_nuevosPuntajes[i] = Puntajes[7].puntaje & 0xFF;
 8001c4e:	4a2a      	ldr	r2, [pc, #168]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001c50:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
 8001c54:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c58:	446a      	add	r2, sp
 8001c5a:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001c5e:	e6ba      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 79:
			buff_nuevosPuntajes[i] = Puntajes[8].puntaje >>8;
 8001c60:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001c62:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 8001c66:	0a09      	lsrs	r1, r1, #8
 8001c68:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c6c:	446a      	add	r2, sp
 8001c6e:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001c72:	2100      	movs	r1, #0
			break;
 8001c74:	e6af      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 80:
			buff_nuevosPuntajes[i] = Puntajes[8].puntaje & 0xFF;
 8001c76:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001c78:	f8b2 0058 	ldrh.w	r0, [r2, #88]	; 0x58
 8001c7c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c80:	446a      	add	r2, sp
 8001c82:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001c86:	e6a6      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 88:
			buff_nuevosPuntajes[i] = Puntajes[9].puntaje >>8;
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001c8a:	f8b2 1062 	ldrh.w	r1, [r2, #98]	; 0x62
 8001c8e:	0a09      	lsrs	r1, r1, #8
 8001c90:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001c94:	446a      	add	r2, sp
 8001c96:	f802 1c5c 	strb.w	r1, [r2, #-92]
			k = 0;
 8001c9a:	2100      	movs	r1, #0
			break;
 8001c9c:	e69b      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
		case 89:
			buff_nuevosPuntajes[i] = Puntajes[9].puntaje & 0xFF;
 8001c9e:	4a16      	ldr	r2, [pc, #88]	; (8001cf8 <writeNuevosPuntajes+0x4dc>)
 8001ca0:	f8b2 0062 	ldrh.w	r0, [r2, #98]	; 0x62
 8001ca4:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001ca8:	446a      	add	r2, sp
 8001caa:	f802 0c5c 	strb.w	r0, [r2, #-92]
			break;
 8001cae:	e692      	b.n	80019d6 <writeNuevosPuntajes+0x1ba>
	//Ahora sí se realiza la escritura.
	//La escritura se realizará siempre que se realice mas de un cambio en las posiciones de los puntajes.
	//La reescritura de la posicion 5 (getPuntajes(4)) siempre se realizará.


	Write_Enable();
 8001cb0:	f7ff fb6c 	bl	800138c <Write_Enable>
	HAL_Delay(10);
 8001cb4:	200a      	movs	r0, #10
 8001cb6:	f001 fb69 	bl	800338c <HAL_Delay>


		if(permutaciones > 0){
 8001cba:	b1ad      	cbz	r5, 8001ce8 <writeNuevosPuntajes+0x4cc>

			address = MEMORIA_ADDRESS;

			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001cbc:	2400      	movs	r4, #0
			address = MEMORIA_ADDRESS;
 8001cbe:	4625      	mov	r5, r4
 8001cc0:	e00e      	b.n	8001ce0 <writeNuevosPuntajes+0x4c4>
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 8001cc2:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8001cc6:	446b      	add	r3, sp
 8001cc8:	f813 1c5c 	ldrb.w	r1, [r3, #-92]
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f7ff fb85 	bl	80013dc <Write_Memoria>
				HAL_Delay(10);
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f001 fb5a 	bl	800338c <HAL_Delay>
				address++;
 8001cd8:	3501      	adds	r5, #1
 8001cda:	b2ad      	uxth	r5, r5
			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001cdc:	3401      	adds	r4, #1
 8001cde:	b2e4      	uxtb	r4, r4
 8001ce0:	2c59      	cmp	r4, #89	; 0x59
 8001ce2:	d9ee      	bls.n	8001cc2 <writeNuevosPuntajes+0x4a6>

			}

		}

}
 8001ce4:	b019      	add	sp, #100	; 0x64
 8001ce6:	bd30      	pop	{r4, r5, pc}
			Write_Memoria(address, buff_nuevosPuntajes[OFFSET_ULTIMO_PUNTAJE]);
 8001ce8:	f89d 1055 	ldrb.w	r1, [sp, #85]	; 0x55
 8001cec:	2051      	movs	r0, #81	; 0x51
 8001cee:	f7ff fb75 	bl	80013dc <Write_Memoria>
			for(uint8_t i=OFFSET_ULTIMO_PUNTAJE; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001cf2:	2451      	movs	r4, #81	; 0x51
			address = MEMORIA_ADDRESS + OFFSET_ULTIMO_PUNTAJE;
 8001cf4:	4625      	mov	r5, r4
			for(uint8_t i=OFFSET_ULTIMO_PUNTAJE; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001cf6:	e010      	b.n	8001d1a <writeNuevosPuntajes+0x4fe>
 8001cf8:	20000acc 	.word	0x20000acc
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 8001cfc:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8001d00:	446b      	add	r3, sp
 8001d02:	f813 1c5c 	ldrb.w	r1, [r3, #-92]
 8001d06:	4628      	mov	r0, r5
 8001d08:	f7ff fb68 	bl	80013dc <Write_Memoria>
				HAL_Delay(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f001 fb3d 	bl	800338c <HAL_Delay>
				address++;
 8001d12:	3501      	adds	r5, #1
 8001d14:	b2ad      	uxth	r5, r5
			for(uint8_t i=OFFSET_ULTIMO_PUNTAJE; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001d16:	3401      	adds	r4, #1
 8001d18:	b2e4      	uxtb	r4, r4
 8001d1a:	2c59      	cmp	r4, #89	; 0x59
 8001d1c:	d9ee      	bls.n	8001cfc <writeNuevosPuntajes+0x4e0>
 8001d1e:	e7e1      	b.n	8001ce4 <writeNuevosPuntajes+0x4c8>

08001d20 <Ordenamiento_Puntajes>:


//Hay que corregir el ordenamiento de puntajes.

uint8_t Ordenamiento_Puntajes(){
 8001d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d24:	b09f      	sub	sp, #124	; 0x7c
	uint8_t indice_subvector = 1;
	uint16_t auxiliar;


	//Copio los nombres y los puntajes porque voy a reescribir getPuntajes()
	for(uint8_t i=0;i<NUM_MAX_PUNTAJES;i++){
 8001d26:	2400      	movs	r4, #0
 8001d28:	e016      	b.n	8001d58 <Ordenamiento_Puntajes+0x38>

		vector[i] = Puntajes[i].puntaje;
 8001d2a:	4943      	ldr	r1, [pc, #268]	; (8001e38 <Ordenamiento_Puntajes+0x118>)
 8001d2c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001d30:	0053      	lsls	r3, r2, #1
 8001d32:	440b      	add	r3, r1
 8001d34:	891a      	ldrh	r2, [r3, #8]
 8001d36:	ab1e      	add	r3, sp, #120	; 0x78
 8001d38:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001d3c:	f823 2c14 	strh.w	r2, [r3, #-20]
		strcpy(buff_nombre[i], Puntajes[i].nombre);
 8001d40:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8001d44:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001d48:	0053      	lsls	r3, r2, #1
 8001d4a:	4419      	add	r1, r3
 8001d4c:	ab07      	add	r3, sp, #28
 8001d4e:	4418      	add	r0, r3
 8001d50:	f006 feed 	bl	8008b2e <strcpy>
	for(uint8_t i=0;i<NUM_MAX_PUNTAJES;i++){
 8001d54:	3401      	adds	r4, #1
 8001d56:	b2e4      	uxtb	r4, r4
 8001d58:	2c09      	cmp	r4, #9
 8001d5a:	d9e6      	bls.n	8001d2a <Ordenamiento_Puntajes+0xa>
	uint8_t indice_subvector = 1;
 8001d5c:	2001      	movs	r0, #1
	uint8_t permutaciones = 0;
 8001d5e:	f04f 0900 	mov.w	r9, #0
 8001d62:	e021      	b.n	8001da8 <Ordenamiento_Puntajes+0x88>
	}

	//Ordenamiento de mayor a menor xd.
	do{

			for(uint8_t j=indice_subvector; j > 0; j--){
 8001d64:	3c01      	subs	r4, #1
 8001d66:	b2e4      	uxtb	r4, r4
 8001d68:	b1d4      	cbz	r4, 8001da0 <Ordenamiento_Puntajes+0x80>

					if(vector[j] > vector[j-1]){
 8001d6a:	ab1e      	add	r3, sp, #120	; 0x78
 8001d6c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001d70:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8001d74:	1e63      	subs	r3, r4, #1
 8001d76:	aa1e      	add	r2, sp, #120	; 0x78
 8001d78:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001d7c:	f832 2c14 	ldrh.w	r2, [r2, #-20]
 8001d80:	4291      	cmp	r1, r2
 8001d82:	d9ef      	bls.n	8001d64 <Ordenamiento_Puntajes+0x44>

						auxiliar = vector[j-1];
						vector[j-1] = vector[j];
 8001d84:	ad1e      	add	r5, sp, #120	; 0x78
 8001d86:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001d8a:	f823 1c14 	strh.w	r1, [r3, #-20]
						vector[j] = auxiliar;
 8001d8e:	eb05 0344 	add.w	r3, r5, r4, lsl #1
 8001d92:	f823 2c14 	strh.w	r2, [r3, #-20]

						permutaciones++;
 8001d96:	f109 0901 	add.w	r9, r9, #1
 8001d9a:	fa5f f989 	uxtb.w	r9, r9
 8001d9e:	e7e1      	b.n	8001d64 <Ordenamiento_Puntajes+0x44>

					}

			}

		indice_subvector++;
 8001da0:	3001      	adds	r0, #1
 8001da2:	b2c0      	uxtb	r0, r0

	}while(indice_subvector != NUM_MAX_PUNTAJES);
 8001da4:	280a      	cmp	r0, #10
 8001da6:	d001      	beq.n	8001dac <Ordenamiento_Puntajes+0x8c>
			for(uint8_t j=indice_subvector; j > 0; j--){
 8001da8:	4604      	mov	r4, r0
 8001daa:	e7dd      	b.n	8001d68 <Ordenamiento_Puntajes+0x48>

	uint8_t finalizado;
	char buff_aux[NUM_MAX_POR_NOMBRE];


	for(uint8_t k=0;k<NUM_MAX_PUNTAJES;k++){
 8001dac:	4625      	mov	r5, r4
 8001dae:	9402      	str	r4, [sp, #8]
 8001db0:	f8cd 900c 	str.w	r9, [sp, #12]
 8001db4:	e025      	b.n	8001e02 <Ordenamiento_Puntajes+0xe2>
			uint8_t j=0;
			do{

				if(Puntajes[j].puntaje == vector[k]){

					strcpy(buff_aux, Puntajes[k].nombre);
 8001db6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001e38 <Ordenamiento_Puntajes+0x118>
 8001dba:	00ab      	lsls	r3, r5, #2
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001dc2:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8001dc6:	44c1      	add	r9, r8
 8001dc8:	4649      	mov	r1, r9
 8001dca:	a805      	add	r0, sp, #20
 8001dcc:	f006 feaf 	bl	8008b2e <strcpy>
					strcpy(Puntajes[k].nombre, Puntajes[j].nombre);
 8001dd0:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8001dd4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8001dd8:	44c2      	add	sl, r8
 8001dda:	4651      	mov	r1, sl
 8001ddc:	4648      	mov	r0, r9
 8001dde:	f006 fea6 	bl	8008b2e <strcpy>
					strcpy(Puntajes[j].nombre, buff_aux);
 8001de2:	a905      	add	r1, sp, #20
 8001de4:	4650      	mov	r0, sl
 8001de6:	f006 fea2 	bl	8008b2e <strcpy>

					Puntajes[j].puntaje = Puntajes[k].puntaje;
 8001dea:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8001dee:	f8aa 2008 	strh.w	r2, [sl, #8]
					Puntajes[k].puntaje = vector[k];
 8001df2:	9b01      	ldr	r3, [sp, #4]
 8001df4:	442b      	add	r3, r5
 8001df6:	005a      	lsls	r2, r3, #1
 8001df8:	4490      	add	r8, r2
 8001dfa:	f8a8 4008 	strh.w	r4, [r8, #8]
	for(uint8_t k=0;k<NUM_MAX_PUNTAJES;k++){
 8001dfe:	3501      	adds	r5, #1
 8001e00:	b2ed      	uxtb	r5, r5
 8001e02:	2d09      	cmp	r5, #9
 8001e04:	d811      	bhi.n	8001e2a <Ordenamiento_Puntajes+0x10a>
			uint8_t j=0;
 8001e06:	9b02      	ldr	r3, [sp, #8]
				if(Puntajes[j].puntaje == vector[k]){
 8001e08:	461f      	mov	r7, r3
 8001e0a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001e0e:	0051      	lsls	r1, r2, #1
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <Ordenamiento_Puntajes+0x118>)
 8001e12:	440a      	add	r2, r1
 8001e14:	8912      	ldrh	r2, [r2, #8]
 8001e16:	a91e      	add	r1, sp, #120	; 0x78
 8001e18:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8001e1c:	f831 4c14 	ldrh.w	r4, [r1, #-20]
 8001e20:	42a2      	cmp	r2, r4
 8001e22:	d0c8      	beq.n	8001db6 <Ordenamiento_Puntajes+0x96>
					finalizado = false;
				}
				j++;
 8001e24:	3301      	adds	r3, #1
 8001e26:	b2db      	uxtb	r3, r3

			}while(finalizado);
 8001e28:	e7ee      	b.n	8001e08 <Ordenamiento_Puntajes+0xe8>
	}


	return permutaciones;

}
 8001e2a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001e2e:	4648      	mov	r0, r9
 8001e30:	b01f      	add	sp, #124	; 0x7c
 8001e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	20000acc 	.word	0x20000acc

08001e3c <menuInit>:

menu_t menu;

extern musica_t musica;

void menuInit(){
 8001e3c:	b508      	push	{r3, lr}

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8001e3e:	f000 ff9d 	bl	8002d7c <SSD1306_Init>
	SSD1306_Clear();
 8001e42:	f000 ff93 	bl	8002d6c <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8001e46:	f000 ff6d 	bl	8002d24 <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8001e4a:	f7fe f99f 	bl	800018c <playerInit>
	InvaderInit();
 8001e4e:	f7fe f9ed 	bl	800022c <InvaderInit>
	disparoInit();
 8001e52:	f7fe fa3d 	bl	80002d0 <disparoInit>
	BasesInit();
 8001e56:	f7fe fcd1 	bl	80007fc <BasesInit>

	//Se inicializan las dificultades
	Dificultad_Init();
 8001e5a:	f7fe fce7 	bl	800082c <Dificultad_Init>


	//Se inicializa el cursor de la pantalla principal.
	//menu.menuActual =  guardar_nombre;
	menu.menuActual = menu_principal;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <menuInit+0x3c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
	//menu.menuActual = juego;
	menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001e64:	2126      	movs	r1, #38	; 0x26
 8001e66:	7059      	strb	r1, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001e68:	2109      	movs	r1, #9
 8001e6a:	7119      	strb	r1, [r3, #4]
	menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001e6c:	211b      	movs	r1, #27
 8001e6e:	7159      	strb	r1, [r3, #5]
	menu.GuardarNombre.indice = 0;
 8001e70:	735a      	strb	r2, [r3, #13]



	//Para las variables de juego
	menu.juego.flag = 0;
 8001e72:	f883 2020 	strb.w	r2, [r3, #32]


}
 8001e76:	bd08      	pop	{r3, pc}
 8001e78:	20000b30 	.word	0x20000b30

08001e7c <menuReset>:
	}

}


void menuReset(){
 8001e7c:	b508      	push	{r3, lr}

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8001e7e:	f7fe f985 	bl	800018c <playerInit>
	InvaderInit();
 8001e82:	f7fe f9d3 	bl	800022c <InvaderInit>
	disparoInit();
 8001e86:	f7fe fa23 	bl	80002d0 <disparoInit>
	BasesInit();
 8001e8a:	f7fe fcb7 	bl	80007fc <BasesInit>

	//Se reinician las dificultades al nivel 1
	Dificultad_Init();
 8001e8e:	f7fe fccd 	bl	800082c <Dificultad_Init>


	//Para las variables de juego
	menu.juego.flag = 0;
 8001e92:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <menuReset+0x24>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2020 	strb.w	r2, [r3, #32]

	//Se inicializa el cursor de la pantalla principal.
	menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001e9a:	2226      	movs	r2, #38	; 0x26
 8001e9c:	705a      	strb	r2, [r3, #1]

}
 8001e9e:	bd08      	pop	{r3, pc}
 8001ea0:	20000b30 	.word	0x20000b30

08001ea4 <GuardarNombreReset>:


void GuardarNombreReset(){

	//Se inicializa el cursor de la pantalla Guardado de nombre
	menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <GuardarNombreReset+0x20>)
 8001ea6:	2209      	movs	r2, #9
 8001ea8:	711a      	strb	r2, [r3, #4]
	menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001eaa:	221b      	movs	r2, #27
 8001eac:	715a      	strb	r2, [r3, #5]
	menu.GuardarNombre.indice = 0;
 8001eae:	2200      	movs	r2, #0
 8001eb0:	735a      	strb	r2, [r3, #13]
	strcpy(menu.GuardarNombre.nombre,"      ");
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <GuardarNombreReset+0x24>)
 8001eb4:	6810      	ldr	r0, [r2, #0]
 8001eb6:	f8c3 0006 	str.w	r0, [r3, #6]
 8001eba:	8891      	ldrh	r1, [r2, #4]
 8001ebc:	7992      	ldrb	r2, [r2, #6]
 8001ebe:	8159      	strh	r1, [r3, #10]
 8001ec0:	731a      	strb	r2, [r3, #12]

}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000b30 	.word	0x20000b30
 8001ec8:	0800a100 	.word	0x0800a100

08001ecc <menuActualizar>:
void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8001ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed0:	b096      	sub	sp, #88	; 0x58
 8001ed2:	4607      	mov	r7, r0
 8001ed4:	460e      	mov	r6, r1
 8001ed6:	4690      	mov	r8, r2
	switch(menu.menuActual){
 8001ed8:	4bba      	ldr	r3, [pc, #744]	; (80021c4 <menuActualizar+0x2f8>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b06      	cmp	r3, #6
 8001ede:	f200 827f 	bhi.w	80023e0 <menuActualizar+0x514>
 8001ee2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001ee6:	0007      	.short	0x0007
 8001ee8:	00d10048 	.word	0x00d10048
 8001eec:	01830128 	.word	0x01830128
 8001ef0:	03d201cb 	.word	0x03d201cb
		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 8001ef4:	2401      	movs	r4, #1
 8001ef6:	9401      	str	r4, [sp, #4]
 8001ef8:	2320      	movs	r3, #32
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2340      	movs	r3, #64	; 0x40
 8001efe:	4ab2      	ldr	r2, [pc, #712]	; (80021c8 <menuActualizar+0x2fc>)
 8001f00:	2100      	movs	r1, #0
 8001f02:	2023      	movs	r0, #35	; 0x23
 8001f04:	f000 fc1a 	bl	800273c <SSD1306_DrawBitmap>
		SSD1306_GotoXY(45, 35);
 8001f08:	2123      	movs	r1, #35	; 0x23
 8001f0a:	202d      	movs	r0, #45	; 0x2d
 8001f0c:	f000 fc60 	bl	80027d0 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8001f10:	4dae      	ldr	r5, [pc, #696]	; (80021cc <menuActualizar+0x300>)
 8001f12:	4622      	mov	r2, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	48ae      	ldr	r0, [pc, #696]	; (80021d0 <menuActualizar+0x304>)
 8001f18:	f000 fcae 	bl	8002878 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 8001f1c:	212d      	movs	r1, #45	; 0x2d
 8001f1e:	4608      	mov	r0, r1
 8001f20:	f000 fc56 	bl	80027d0 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8001f24:	4622      	mov	r2, r4
 8001f26:	4629      	mov	r1, r5
 8001f28:	48aa      	ldr	r0, [pc, #680]	; (80021d4 <menuActualizar+0x308>)
 8001f2a:	f000 fca5 	bl	8002878 <SSD1306_Puts>
		if(y == arriba){
 8001f2e:	b9c6      	cbnz	r6, 8001f62 <menuActualizar+0x96>
			menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001f30:	4ba4      	ldr	r3, [pc, #656]	; (80021c4 <menuActualizar+0x2f8>)
 8001f32:	2226      	movs	r2, #38	; 0x26
 8001f34:	705a      	strb	r2, [r3, #1]
		SSD1306_DrawCircle(POSICION_CURSOR_X, menu.posicion_MenuPrincipal, 3, 1);
 8001f36:	2301      	movs	r3, #1
 8001f38:	2203      	movs	r2, #3
 8001f3a:	49a2      	ldr	r1, [pc, #648]	; (80021c4 <menuActualizar+0x2f8>)
 8001f3c:	7849      	ldrb	r1, [r1, #1]
 8001f3e:	2027      	movs	r0, #39	; 0x27
 8001f40:	f000 fd8a 	bl	8002a58 <SSD1306_DrawCircle>
		switch(boton){
 8001f44:	f1b8 0f01 	cmp.w	r8, #1
 8001f48:	f040 824a 	bne.w	80023e0 <menuActualizar+0x514>
			if(menu.posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 8001f4c:	4b9d      	ldr	r3, [pc, #628]	; (80021c4 <menuActualizar+0x2f8>)
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	2b26      	cmp	r3, #38	; 0x26
 8001f52:	d00c      	beq.n	8001f6e <menuActualizar+0xa2>
			else if(menu.posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8001f54:	2b30      	cmp	r3, #48	; 0x30
 8001f56:	f040 8243 	bne.w	80023e0 <menuActualizar+0x514>
			    menu.menuActual = puntajes;
 8001f5a:	4b9a      	ldr	r3, [pc, #616]	; (80021c4 <menuActualizar+0x2f8>)
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e23e      	b.n	80023e0 <menuActualizar+0x514>
		else if(y == abajo){
 8001f62:	2e01      	cmp	r6, #1
 8001f64:	d1e7      	bne.n	8001f36 <menuActualizar+0x6a>
			menu.posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 8001f66:	4b97      	ldr	r3, [pc, #604]	; (80021c4 <menuActualizar+0x2f8>)
 8001f68:	2230      	movs	r2, #48	; 0x30
 8001f6a:	705a      	strb	r2, [r3, #1]
 8001f6c:	e7e3      	b.n	8001f36 <menuActualizar+0x6a>
				menu.menuActual = juego;
 8001f6e:	4b95      	ldr	r3, [pc, #596]	; (80021c4 <menuActualizar+0x2f8>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e234      	b.n	80023e0 <menuActualizar+0x514>
		uint8_t numero_aliens = getCantidad_Aliens_Vivos();
 8001f76:	f7fe f8fb 	bl	8000170 <getCantidad_Aliens_Vivos>
 8001f7a:	4605      	mov	r5, r0
		plotBases();
 8001f7c:	f7fe fc10 	bl	80007a0 <plotBases>
		plotPlayer(x);
 8001f80:	4638      	mov	r0, r7
 8001f82:	f7fe f911 	bl	80001a8 <plotPlayer>
		plotAliens();
 8001f86:	f7fe fc9b 	bl	80008c0 <plotAliens>
		disparoAliens();
 8001f8a:	f7fe fa83 	bl	8000494 <disparoAliens>
		TickType_t Tiempo_Actual = xTaskGetTickCount();
 8001f8e:	f005 fb0d 	bl	80075ac <xTaskGetTickCount>
 8001f92:	4604      	mov	r4, r0
		if(menu.juego.flag == 0){
 8001f94:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <menuActualizar+0x2f8>)
 8001f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f9a:	b1d3      	cbz	r3, 8001fd2 <menuActualizar+0x106>
		if(Tiempo_Actual - menu.juego.retrasoJuego_GameOver > pdMS_TO_TICKS(500)){
 8001f9c:	4b89      	ldr	r3, [pc, #548]	; (80021c4 <menuActualizar+0x2f8>)
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	1ae4      	subs	r4, r4, r3
 8001fa2:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8001fa6:	d902      	bls.n	8001fae <menuActualizar+0xe2>
			menu.menuActual = game_over;
 8001fa8:	4b86      	ldr	r3, [pc, #536]	; (80021c4 <menuActualizar+0x2f8>)
 8001faa:	2206      	movs	r2, #6
 8001fac:	701a      	strb	r2, [r3, #0]
		if( (boton == true) && (getPlayer().vivo == true) && (getDisparodisparo() == false)){
 8001fae:	f1b8 0f01 	cmp.w	r8, #1
 8001fb2:	d031      	beq.n	8002018 <menuActualizar+0x14c>
		disparar();
 8001fb4:	f7fe f996 	bl	80002e4 <disparar>
		if(getCantidad_Aliens_Vivos() != numero_aliens && getPlayer().vivo == true){
 8001fb8:	f7fe f8da 	bl	8000170 <getCantidad_Aliens_Vivos>
 8001fbc:	42a8      	cmp	r0, r5
 8001fbe:	d14a      	bne.n	8002056 <menuActualizar+0x18a>
		if(getCantidad_Aliens_Vivos() == 0){
 8001fc0:	f7fe f8d6 	bl	8000170 <getCantidad_Aliens_Vivos>
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	f040 820b 	bne.w	80023e0 <menuActualizar+0x514>
			menu.menuActual = progresion_niveles;
 8001fca:	4b7e      	ldr	r3, [pc, #504]	; (80021c4 <menuActualizar+0x2f8>)
 8001fcc:	2202      	movs	r2, #2
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e206      	b.n	80023e0 <menuActualizar+0x514>
			if(getPlayer().vivo == false){
 8001fd2:	a80a      	add	r0, sp, #40	; 0x28
 8001fd4:	f7fe f8bc 	bl	8000150 <getPlayer>
 8001fd8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8001fdc:	b113      	cbz	r3, 8001fe4 <menuActualizar+0x118>
				menu.juego.retrasoJuego_GameOver = Tiempo_Actual;
 8001fde:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <menuActualizar+0x2f8>)
 8001fe0:	61dc      	str	r4, [r3, #28]
 8001fe2:	e7db      	b.n	8001f9c <menuActualizar+0xd0>
				menu.juego.retrasoJuego_GameOver = xTaskGetTickCount();
 8001fe4:	f005 fae2 	bl	80075ac <xTaskGetTickCount>
 8001fe8:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <menuActualizar+0x2f8>)
 8001fea:	61d8      	str	r0, [r3, #28]
				menu.juego.flag = 1;
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]
				musica_t musica_ = gameover_;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f88d 301c 	strb.w	r3, [sp, #28]
				osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	a907      	add	r1, sp, #28
 8001ffe:	4876      	ldr	r0, [pc, #472]	; (80021d8 <menuActualizar+0x30c>)
 8002000:	6800      	ldr	r0, [r0, #0]
 8002002:	f004 f967 	bl	80062d4 <osMessageQueuePut>
				if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002006:	2800      	cmp	r0, #0
 8002008:	d0c8      	beq.n	8001f9c <menuActualizar+0xd0>
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002010:	4872      	ldr	r0, [pc, #456]	; (80021dc <menuActualizar+0x310>)
 8002012:	f001 fe28 	bl	8003c66 <HAL_GPIO_WritePin>
 8002016:	e7c1      	b.n	8001f9c <menuActualizar+0xd0>
		if( (boton == true) && (getPlayer().vivo == true) && (getDisparodisparo() == false)){
 8002018:	a80c      	add	r0, sp, #48	; 0x30
 800201a:	f7fe f899 	bl	8000150 <getPlayer>
 800201e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8002022:	2b01      	cmp	r3, #1
 8002024:	d1c6      	bne.n	8001fb4 <menuActualizar+0xe8>
 8002026:	f7fe f89d 	bl	8000164 <getDisparodisparo>
 800202a:	2800      	cmp	r0, #0
 800202c:	d1c2      	bne.n	8001fb4 <menuActualizar+0xe8>
			disparoTrue();
 800202e:	f7fe fd63 	bl	8000af8 <disparoTrue>
			musica_t musica_ = disparo_;
 8002032:	2200      	movs	r2, #0
 8002034:	f88d 201c 	strb.w	r2, [sp, #28]
			osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8002038:	4613      	mov	r3, r2
 800203a:	a907      	add	r1, sp, #28
 800203c:	4866      	ldr	r0, [pc, #408]	; (80021d8 <menuActualizar+0x30c>)
 800203e:	6800      	ldr	r0, [r0, #0]
 8002040:	f004 f948 	bl	80062d4 <osMessageQueuePut>
			if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002044:	2800      	cmp	r0, #0
 8002046:	d0b5      	beq.n	8001fb4 <menuActualizar+0xe8>
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204e:	4863      	ldr	r0, [pc, #396]	; (80021dc <menuActualizar+0x310>)
 8002050:	f001 fe09 	bl	8003c66 <HAL_GPIO_WritePin>
 8002054:	e7ae      	b.n	8001fb4 <menuActualizar+0xe8>
		if(getCantidad_Aliens_Vivos() != numero_aliens && getPlayer().vivo == true){
 8002056:	a80e      	add	r0, sp, #56	; 0x38
 8002058:	f7fe f87a 	bl	8000150 <getPlayer>
 800205c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8002060:	2b01      	cmp	r3, #1
 8002062:	d1ad      	bne.n	8001fc0 <menuActualizar+0xf4>
			musica_t musica_ = explosion_;
 8002064:	f88d 301c 	strb.w	r3, [sp, #28]
			osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8002068:	2300      	movs	r3, #0
 800206a:	461a      	mov	r2, r3
 800206c:	a907      	add	r1, sp, #28
 800206e:	485a      	ldr	r0, [pc, #360]	; (80021d8 <menuActualizar+0x30c>)
 8002070:	6800      	ldr	r0, [r0, #0]
 8002072:	f004 f92f 	bl	80062d4 <osMessageQueuePut>
			if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002076:	2800      	cmp	r0, #0
 8002078:	d0a2      	beq.n	8001fc0 <menuActualizar+0xf4>
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002080:	4856      	ldr	r0, [pc, #344]	; (80021dc <menuActualizar+0x310>)
 8002082:	f001 fdf0 	bl	8003c66 <HAL_GPIO_WritePin>
 8002086:	e79b      	b.n	8001fc0 <menuActualizar+0xf4>
		SSD1306_GotoXY(25, 15);
 8002088:	210f      	movs	r1, #15
 800208a:	2019      	movs	r0, #25
 800208c:	f000 fba0 	bl	80027d0 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJE: ", &Font_7x10, 1);
 8002090:	4c4e      	ldr	r4, [pc, #312]	; (80021cc <menuActualizar+0x300>)
 8002092:	2201      	movs	r2, #1
 8002094:	4621      	mov	r1, r4
 8002096:	4852      	ldr	r0, [pc, #328]	; (80021e0 <menuActualizar+0x314>)
 8002098:	f000 fbee 	bl	8002878 <SSD1306_Puts>
		SSD1306_GotoXY(25, 35);
 800209c:	2123      	movs	r1, #35	; 0x23
 800209e:	2019      	movs	r0, #25
 80020a0:	f000 fb96 	bl	80027d0 <SSD1306_GotoXY>
		SSD1306_Puts("VIDAS", &Font_7x10, 1);
 80020a4:	2201      	movs	r2, #1
 80020a6:	4621      	mov	r1, r4
 80020a8:	484e      	ldr	r0, [pc, #312]	; (80021e4 <menuActualizar+0x318>)
 80020aa:	f000 fbe5 	bl	8002878 <SSD1306_Puts>
		SSD1306_DrawBitmap(65, 34, vida, 8, 8, 1);
 80020ae:	2501      	movs	r5, #1
 80020b0:	9501      	str	r5, [sp, #4]
 80020b2:	2308      	movs	r3, #8
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4a4c      	ldr	r2, [pc, #304]	; (80021e8 <menuActualizar+0x31c>)
 80020b8:	2122      	movs	r1, #34	; 0x22
 80020ba:	2041      	movs	r0, #65	; 0x41
 80020bc:	f000 fb3e 	bl	800273c <SSD1306_DrawBitmap>
		SSD1306_GotoXY(74, 34);
 80020c0:	2122      	movs	r1, #34	; 0x22
 80020c2:	204a      	movs	r0, #74	; 0x4a
 80020c4:	f000 fb84 	bl	80027d0 <SSD1306_GotoXY>
		SSD1306_Putc(':', &Font_7x10, 1);
 80020c8:	462a      	mov	r2, r5
 80020ca:	4621      	mov	r1, r4
 80020cc:	203a      	movs	r0, #58	; 0x3a
 80020ce:	f000 fb85 	bl	80027dc <SSD1306_Putc>
		SSD1306_GotoXY(90, 15);
 80020d2:	210f      	movs	r1, #15
 80020d4:	205a      	movs	r0, #90	; 0x5a
 80020d6:	f000 fb7b 	bl	80027d0 <SSD1306_GotoXY>
		itoa(getPlayer().puntaje,(char*)buffer_puntaje,10);
 80020da:	a810      	add	r0, sp, #64	; 0x40
 80020dc:	f7fe f838 	bl	8000150 <getPlayer>
 80020e0:	220a      	movs	r2, #10
 80020e2:	a907      	add	r1, sp, #28
 80020e4:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 80020e8:	f006 fb1e 	bl	8008728 <itoa>
		SSD1306_Puts((char *)buffer_puntaje, &Font_7x10, 1);
 80020ec:	462a      	mov	r2, r5
 80020ee:	4621      	mov	r1, r4
 80020f0:	a807      	add	r0, sp, #28
 80020f2:	f000 fbc1 	bl	8002878 <SSD1306_Puts>
		SSD1306_GotoXY(90, 34);
 80020f6:	2122      	movs	r1, #34	; 0x22
 80020f8:	205a      	movs	r0, #90	; 0x5a
 80020fa:	f000 fb69 	bl	80027d0 <SSD1306_GotoXY>
		itoa(getPlayer().vidas, &cantidad_vidas,10);
 80020fe:	a812      	add	r0, sp, #72	; 0x48
 8002100:	f7fe f826 	bl	8000150 <getPlayer>
 8002104:	220a      	movs	r2, #10
 8002106:	a904      	add	r1, sp, #16
 8002108:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 800210c:	f006 fb0c 	bl	8008728 <itoa>
		SSD1306_Puts(&cantidad_vidas, &Font_7x10, 1);
 8002110:	462a      	mov	r2, r5
 8002112:	4621      	mov	r1, r4
 8002114:	a804      	add	r0, sp, #16
 8002116:	f000 fbaf 	bl	8002878 <SSD1306_Puts>
		if(y == arriba){
 800211a:	2e00      	cmp	r6, #0
 800211c:	f040 8160 	bne.w	80023e0 <menuActualizar+0x514>
			AumentoNivel();		//Aqui se reinicializa el player y se aumenta la dificultad del nivel.
 8002120:	f7fe fb90 	bl	8000844 <AumentoNivel>
			InvaderInit();
 8002124:	f7fe f882 	bl	800022c <InvaderInit>
			disparoInit();
 8002128:	f7fe f8d2 	bl	80002d0 <disparoInit>
			BasesInit();
 800212c:	f7fe fb66 	bl	80007fc <BasesInit>
			menu.menuActual = juego;
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <menuActualizar+0x2f8>)
 8002132:	701d      	strb	r5, [r3, #0]
 8002134:	e154      	b.n	80023e0 <menuActualizar+0x514>
		SSD1306_GotoXY(35, 0);
 8002136:	2100      	movs	r1, #0
 8002138:	2023      	movs	r0, #35	; 0x23
 800213a:	f000 fb49 	bl	80027d0 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 800213e:	2201      	movs	r2, #1
 8002140:	4922      	ldr	r1, [pc, #136]	; (80021cc <menuActualizar+0x300>)
 8002142:	4824      	ldr	r0, [pc, #144]	; (80021d4 <menuActualizar+0x308>)
 8002144:	f000 fb98 	bl	8002878 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8002148:	2400      	movs	r4, #0
 800214a:	e011      	b.n	8002170 <menuActualizar+0x2a4>
			posicion = j*10 + 13;
 800214c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002150:	0049      	lsls	r1, r1, #1
 8002152:	b2c9      	uxtb	r1, r1
 8002154:	310d      	adds	r1, #13
			SSD1306_GotoXY(15, posicion);
 8002156:	b2c9      	uxtb	r1, r1
 8002158:	200f      	movs	r0, #15
 800215a:	f000 fb39 	bl	80027d0 <SSD1306_GotoXY>
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff f90c 	bl	800137c <getPuntajes>
 8002164:	2201      	movs	r2, #1
 8002166:	4919      	ldr	r1, [pc, #100]	; (80021cc <menuActualizar+0x300>)
 8002168:	f000 fb86 	bl	8002878 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 800216c:	3401      	adds	r4, #1
 800216e:	b2e4      	uxtb	r4, r4
 8002170:	2c04      	cmp	r4, #4
 8002172:	d9eb      	bls.n	800214c <menuActualizar+0x280>
		for(uint8_t j=0; j<5;j++){
 8002174:	2400      	movs	r4, #0
 8002176:	e017      	b.n	80021a8 <menuActualizar+0x2dc>
			posicion = j*10 + 13;
 8002178:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800217c:	0049      	lsls	r1, r1, #1
 800217e:	b2c9      	uxtb	r1, r1
 8002180:	310d      	adds	r1, #13
			SSD1306_GotoXY(90, posicion);
 8002182:	b2c9      	uxtb	r1, r1
 8002184:	205a      	movs	r0, #90	; 0x5a
 8002186:	f000 fb23 	bl	80027d0 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff f8f6 	bl	800137c <getPuntajes>
 8002190:	220a      	movs	r2, #10
 8002192:	a907      	add	r1, sp, #28
 8002194:	8900      	ldrh	r0, [r0, #8]
 8002196:	f006 fac7 	bl	8008728 <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 800219a:	2201      	movs	r2, #1
 800219c:	490b      	ldr	r1, [pc, #44]	; (80021cc <menuActualizar+0x300>)
 800219e:	a807      	add	r0, sp, #28
 80021a0:	f000 fb6a 	bl	8002878 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 80021a4:	3401      	adds	r4, #1
 80021a6:	b2e4      	uxtb	r4, r4
 80021a8:	2c04      	cmp	r4, #4
 80021aa:	d9e5      	bls.n	8002178 <menuActualizar+0x2ac>
		if(y == arriba){
 80021ac:	b916      	cbnz	r6, 80021b4 <menuActualizar+0x2e8>
			menu.menuActual = menu_principal;
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <menuActualizar+0x2f8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
		if(x == derecha){
 80021b4:	2f02      	cmp	r7, #2
 80021b6:	f040 8113 	bne.w	80023e0 <menuActualizar+0x514>
			menu.menuActual = puntajes2;
 80021ba:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <menuActualizar+0x2f8>)
 80021bc:	2204      	movs	r2, #4
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	e10e      	b.n	80023e0 <menuActualizar+0x514>
 80021c2:	bf00      	nop
 80021c4:	20000b30 	.word	0x20000b30
 80021c8:	0800a158 	.word	0x0800a158
 80021cc:	20000000 	.word	0x20000000
 80021d0:	0800a110 	.word	0x0800a110
 80021d4:	0800a118 	.word	0x0800a118
 80021d8:	20000ac4 	.word	0x20000ac4
 80021dc:	40011000 	.word	0x40011000
 80021e0:	0800a124 	.word	0x0800a124
 80021e4:	0800a130 	.word	0x0800a130
 80021e8:	0800a460 	.word	0x0800a460
	SSD1306_GotoXY(35, 0);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2023      	movs	r0, #35	; 0x23
 80021f0:	f000 faee 	bl	80027d0 <SSD1306_GotoXY>
	SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	49ad      	ldr	r1, [pc, #692]	; (80024ac <menuActualizar+0x5e0>)
 80021f8:	48ad      	ldr	r0, [pc, #692]	; (80024b0 <menuActualizar+0x5e4>)
 80021fa:	f000 fb3d 	bl	8002878 <SSD1306_Puts>
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 80021fe:	2405      	movs	r4, #5
	uint8_t k = 0;
 8002200:	2500      	movs	r5, #0
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 8002202:	e013      	b.n	800222c <menuActualizar+0x360>
		posicion_2 = k*10 + 13;
 8002204:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8002208:	0049      	lsls	r1, r1, #1
 800220a:	b2c9      	uxtb	r1, r1
 800220c:	310d      	adds	r1, #13
		SSD1306_GotoXY(15, posicion_2);
 800220e:	b2c9      	uxtb	r1, r1
 8002210:	200f      	movs	r0, #15
 8002212:	f000 fadd 	bl	80027d0 <SSD1306_GotoXY>
		SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 8002216:	4620      	mov	r0, r4
 8002218:	f7ff f8b0 	bl	800137c <getPuntajes>
 800221c:	2201      	movs	r2, #1
 800221e:	49a3      	ldr	r1, [pc, #652]	; (80024ac <menuActualizar+0x5e0>)
 8002220:	f000 fb2a 	bl	8002878 <SSD1306_Puts>
		k++;
 8002224:	3501      	adds	r5, #1
 8002226:	b2ed      	uxtb	r5, r5
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 8002228:	3401      	adds	r4, #1
 800222a:	b2e4      	uxtb	r4, r4
 800222c:	2c09      	cmp	r4, #9
 800222e:	d9e9      	bls.n	8002204 <menuActualizar+0x338>
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 8002230:	2405      	movs	r4, #5
	k = 0;
 8002232:	2500      	movs	r5, #0
 8002234:	e019      	b.n	800226a <menuActualizar+0x39e>
		posicion_2 = k*10 + 13;
 8002236:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800223a:	0049      	lsls	r1, r1, #1
 800223c:	b2c9      	uxtb	r1, r1
 800223e:	310d      	adds	r1, #13
		SSD1306_GotoXY(90, posicion_2);
 8002240:	b2c9      	uxtb	r1, r1
 8002242:	205a      	movs	r0, #90	; 0x5a
 8002244:	f000 fac4 	bl	80027d0 <SSD1306_GotoXY>
		itoa(getPuntajes(j)->puntaje,(char*)buffer_2,10);
 8002248:	4620      	mov	r0, r4
 800224a:	f7ff f897 	bl	800137c <getPuntajes>
 800224e:	220a      	movs	r2, #10
 8002250:	a907      	add	r1, sp, #28
 8002252:	8900      	ldrh	r0, [r0, #8]
 8002254:	f006 fa68 	bl	8008728 <itoa>
		SSD1306_Puts((char *)buffer_2, &Font_7x10, 1);
 8002258:	2201      	movs	r2, #1
 800225a:	4994      	ldr	r1, [pc, #592]	; (80024ac <menuActualizar+0x5e0>)
 800225c:	a807      	add	r0, sp, #28
 800225e:	f000 fb0b 	bl	8002878 <SSD1306_Puts>
		k++;
 8002262:	3501      	adds	r5, #1
 8002264:	b2ed      	uxtb	r5, r5
	for(uint8_t j=5; j<NUM_MAX_PUNTAJES;j++){
 8002266:	3401      	adds	r4, #1
 8002268:	b2e4      	uxtb	r4, r4
 800226a:	2c09      	cmp	r4, #9
 800226c:	d9e3      	bls.n	8002236 <menuActualizar+0x36a>
	if(x == izquierda){
 800226e:	2f03      	cmp	r7, #3
 8002270:	f040 80b6 	bne.w	80023e0 <menuActualizar+0x514>
		menu.menuActual = puntajes;
 8002274:	4b8f      	ldr	r3, [pc, #572]	; (80024b4 <menuActualizar+0x5e8>)
 8002276:	2203      	movs	r2, #3
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e0b1      	b.n	80023e0 <menuActualizar+0x514>
		char buff_qwerty[] = "qwertyuiop";
 800227c:	4a8e      	ldr	r2, [pc, #568]	; (80024b8 <menuActualizar+0x5ec>)
 800227e:	ab04      	add	r3, sp, #16
 8002280:	ca07      	ldmia	r2, {r0, r1, r2}
 8002282:	c303      	stmia	r3!, {r0, r1}
 8002284:	f823 2b02 	strh.w	r2, [r3], #2
 8002288:	0c12      	lsrs	r2, r2, #16
 800228a:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 800228c:	4a8b      	ldr	r2, [pc, #556]	; (80024bc <menuActualizar+0x5f0>)
 800228e:	ab07      	add	r3, sp, #28
 8002290:	ca07      	ldmia	r2, {r0, r1, r2}
 8002292:	c303      	stmia	r3!, {r0, r1}
 8002294:	f823 2b02 	strh.w	r2, [r3], #2
 8002298:	0c12      	lsrs	r2, r2, #16
 800229a:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 800229c:	4a88      	ldr	r2, [pc, #544]	; (80024c0 <menuActualizar+0x5f4>)
 800229e:	ab02      	add	r3, sp, #8
 80022a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022a4:	e883 0003 	stmia.w	r3, {r0, r1}
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 80022a8:	2301      	movs	r3, #1
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	230f      	movs	r3, #15
 80022ae:	223c      	movs	r2, #60	; 0x3c
 80022b0:	2100      	movs	r1, #0
 80022b2:	201e      	movs	r0, #30
 80022b4:	f000 fb91 	bl	80029da <SSD1306_DrawRectangle>
			for(uint8_t i=0;i<10;i++){
 80022b8:	2500      	movs	r5, #0
 80022ba:	e022      	b.n	8002302 <menuActualizar+0x436>
				posicion_x = i*(12) + 6;
 80022bc:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80022c0:	00a4      	lsls	r4, r4, #2
 80022c2:	b2e4      	uxtb	r4, r4
 80022c4:	3406      	adds	r4, #6
				SSD1306_GotoXY(posicion_x, 23);
 80022c6:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
 80022ca:	2117      	movs	r1, #23
 80022cc:	4620      	mov	r0, r4
 80022ce:	f000 fa7f 	bl	80027d0 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 80022d2:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 80024ac <menuActualizar+0x5e0>
 80022d6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80022da:	eb0d 0903 	add.w	r9, sp, r3
 80022de:	2201      	movs	r2, #1
 80022e0:	4651      	mov	r1, sl
 80022e2:	f819 0c48 	ldrb.w	r0, [r9, #-72]
 80022e6:	f000 fa79 	bl	80027dc <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 80022ea:	2126      	movs	r1, #38	; 0x26
 80022ec:	4620      	mov	r0, r4
 80022ee:	f000 fa6f 	bl	80027d0 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 80022f2:	2201      	movs	r2, #1
 80022f4:	4651      	mov	r1, sl
 80022f6:	f819 0c3c 	ldrb.w	r0, [r9, #-60]
 80022fa:	f000 fa6f 	bl	80027dc <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 80022fe:	3501      	adds	r5, #1
 8002300:	b2ed      	uxtb	r5, r5
 8002302:	2d09      	cmp	r5, #9
 8002304:	d9da      	bls.n	80022bc <menuActualizar+0x3f0>
			for(uint8_t i=0;i<7;i++){
 8002306:	2400      	movs	r4, #0
 8002308:	e014      	b.n	8002334 <menuActualizar+0x468>
				posicion_x = i*(12) + 26;
 800230a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800230e:	0080      	lsls	r0, r0, #2
 8002310:	b2c0      	uxtb	r0, r0
 8002312:	301a      	adds	r0, #26
				SSD1306_GotoXY(posicion_x, 53);
 8002314:	2135      	movs	r1, #53	; 0x35
 8002316:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800231a:	f000 fa59 	bl	80027d0 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 800231e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8002322:	446b      	add	r3, sp
 8002324:	2201      	movs	r2, #1
 8002326:	4961      	ldr	r1, [pc, #388]	; (80024ac <menuActualizar+0x5e0>)
 8002328:	f813 0c50 	ldrb.w	r0, [r3, #-80]
 800232c:	f000 fa56 	bl	80027dc <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 8002330:	3401      	adds	r4, #1
 8002332:	b2e4      	uxtb	r4, r4
 8002334:	2c06      	cmp	r4, #6
 8002336:	d9e8      	bls.n	800230a <menuActualizar+0x43e>
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 8002338:	2401      	movs	r4, #1
 800233a:	9400      	str	r4, [sp, #0]
 800233c:	2310      	movs	r3, #16
 800233e:	461a      	mov	r2, r3
 8002340:	2132      	movs	r1, #50	; 0x32
 8002342:	2003      	movs	r0, #3
 8002344:	f000 fb49 	bl	80029da <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 8002348:	2135      	movs	r1, #53	; 0x35
 800234a:	2008      	movs	r0, #8
 800234c:	f000 fa40 	bl	80027d0 <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 8002350:	4d56      	ldr	r5, [pc, #344]	; (80024ac <menuActualizar+0x5e0>)
 8002352:	4622      	mov	r2, r4
 8002354:	4629      	mov	r1, r5
 8002356:	2078      	movs	r0, #120	; 0x78
 8002358:	f000 fa40 	bl	80027dc <SSD1306_Putc>
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 800235c:	9400      	str	r4, [sp, #0]
 800235e:	2310      	movs	r3, #16
 8002360:	461a      	mov	r2, r3
 8002362:	2132      	movs	r1, #50	; 0x32
 8002364:	206c      	movs	r0, #108	; 0x6c
 8002366:	f000 fb38 	bl	80029da <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 800236a:	2135      	movs	r1, #53	; 0x35
 800236c:	2071      	movs	r0, #113	; 0x71
 800236e:	f000 fa2f 	bl	80027d0 <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 8002372:	4622      	mov	r2, r4
 8002374:	4629      	mov	r1, r5
 8002376:	203c      	movs	r0, #60	; 0x3c
 8002378:	f000 fa30 	bl	80027dc <SSD1306_Putc>
			switch(y){
 800237c:	b39e      	cbz	r6, 80023e6 <menuActualizar+0x51a>
 800237e:	42a6      	cmp	r6, r4
 8002380:	d133      	bne.n	80023ea <menuActualizar+0x51e>
					mov = abajo;
 8002382:	4634      	mov	r4, r6
			Timenow = xTaskGetTickCount();
 8002384:	f005 f912 	bl	80075ac <xTaskGetTickCount>
			if((Timenow - menu.GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8002388:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <menuActualizar+0x5e8>)
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	1ac0      	subs	r0, r0, r3
 800238e:	2896      	cmp	r0, #150	; 0x96
 8002390:	d901      	bls.n	8002396 <menuActualizar+0x4ca>
 8002392:	2e04      	cmp	r6, #4
 8002394:	d12b      	bne.n	80023ee <menuActualizar+0x522>
			Timenow = xTaskGetTickCount();
 8002396:	f005 f909 	bl	80075ac <xTaskGetTickCount>
		if((Timenow - menu.GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <menuActualizar+0x5e8>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	1ac0      	subs	r0, r0, r3
 80023a0:	2864      	cmp	r0, #100	; 0x64
 80023a2:	d902      	bls.n	80023aa <menuActualizar+0x4de>
 80023a4:	2f04      	cmp	r7, #4
 80023a6:	f040 808f 	bne.w	80024c8 <menuActualizar+0x5fc>
			Timenow = xTaskGetTickCount();
 80023aa:	f005 f8ff 	bl	80075ac <xTaskGetTickCount>
		if((Timenow - menu.GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 80023ae:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <menuActualizar+0x5e8>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	1ac0      	subs	r0, r0, r3
 80023b4:	2864      	cmp	r0, #100	; 0x64
 80023b6:	d903      	bls.n	80023c0 <menuActualizar+0x4f4>
 80023b8:	f1b8 0f00 	cmp.w	r8, #0
 80023bc:	f040 80cd 	bne.w	800255a <menuActualizar+0x68e>
				SSD1306_DrawFilledCircle(menu.GuardarNombre.posicion_x,  menu.GuardarNombre.posicion_y, 5, 1);
 80023c0:	4c3c      	ldr	r4, [pc, #240]	; (80024b4 <menuActualizar+0x5e8>)
 80023c2:	2301      	movs	r3, #1
 80023c4:	2205      	movs	r2, #5
 80023c6:	7961      	ldrb	r1, [r4, #5]
 80023c8:	7920      	ldrb	r0, [r4, #4]
 80023ca:	f000 fbe3 	bl	8002b94 <SSD1306_DrawFilledCircle>
				SSD1306_GotoXY(39, 5);
 80023ce:	2105      	movs	r1, #5
 80023d0:	2027      	movs	r0, #39	; 0x27
 80023d2:	f000 f9fd 	bl	80027d0 <SSD1306_GotoXY>
				SSD1306_Puts(menu.GuardarNombre.nombre, &Font_7x10, 1);
 80023d6:	2201      	movs	r2, #1
 80023d8:	4934      	ldr	r1, [pc, #208]	; (80024ac <menuActualizar+0x5e0>)
 80023da:	1da0      	adds	r0, r4, #6
 80023dc:	f000 fa4c 	bl	8002878 <SSD1306_Puts>
}
 80023e0:	b016      	add	sp, #88	; 0x58
 80023e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023e6:	4634      	mov	r4, r6
 80023e8:	e7cc      	b.n	8002384 <menuActualizar+0x4b8>
					mov = x;
 80023ea:	463c      	mov	r4, r7
 80023ec:	e7ca      	b.n	8002384 <menuActualizar+0x4b8>
				menu.GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 80023ee:	f005 f8dd 	bl	80075ac <xTaskGetTickCount>
 80023f2:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <menuActualizar+0x5e8>)
 80023f4:	6158      	str	r0, [r3, #20]
			switch(mov){
 80023f6:	b1cc      	cbz	r4, 800242c <menuActualizar+0x560>
 80023f8:	2c01      	cmp	r4, #1
 80023fa:	d1cc      	bne.n	8002396 <menuActualizar+0x4ca>
					switch(menu.GuardarNombre.posicion_y){
 80023fc:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <menuActualizar+0x5e8>)
 80023fe:	795b      	ldrb	r3, [r3, #5]
 8002400:	2b1b      	cmp	r3, #27
 8002402:	d03e      	beq.n	8002482 <menuActualizar+0x5b6>
 8002404:	2b2a      	cmp	r3, #42	; 0x2a
 8002406:	d1c6      	bne.n	8002396 <menuActualizar+0x4ca>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <menuActualizar+0x5e8>)
 800240a:	2239      	movs	r2, #57	; 0x39
 800240c:	715a      	strb	r2, [r3, #5]
							div = menu.GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 800240e:	791b      	ldrb	r3, [r3, #4]
 8002410:	3b09      	subs	r3, #9
 8002412:	b25b      	sxtb	r3, r3
							div = div/GUARDADO_OFFSET_X_CURSOR;
 8002414:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <menuActualizar+0x5f8>)
 8002416:	fb82 1203 	smull	r1, r2, r2, r3
 800241a:	17db      	asrs	r3, r3, #31
 800241c:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8002420:	b25b      	sxtb	r3, r3
							if(div == 0){
 8002422:	bb93      	cbnz	r3, 800248a <menuActualizar+0x5be>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <menuActualizar+0x5e8>)
 8002426:	220b      	movs	r2, #11
 8002428:	711a      	strb	r2, [r3, #4]
 800242a:	e7b4      	b.n	8002396 <menuActualizar+0x4ca>
					switch(menu.GuardarNombre.posicion_y){
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <menuActualizar+0x5e8>)
 800242e:	795b      	ldrb	r3, [r3, #5]
 8002430:	2b2a      	cmp	r3, #42	; 0x2a
 8002432:	d01a      	beq.n	800246a <menuActualizar+0x59e>
 8002434:	2b39      	cmp	r3, #57	; 0x39
 8002436:	d1ae      	bne.n	8002396 <menuActualizar+0x4ca>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <menuActualizar+0x5e8>)
 800243a:	222a      	movs	r2, #42	; 0x2a
 800243c:	715a      	strb	r2, [r3, #5]
							if(menu.GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 800243e:	791b      	ldrb	r3, [r3, #4]
 8002440:	2b1b      	cmp	r3, #27
 8002442:	d91a      	bls.n	800247a <menuActualizar+0x5ae>
								div = menu.GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 8002444:	3b1c      	subs	r3, #28
 8002446:	b25b      	sxtb	r3, r3
								if(div < 0) menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8002448:	2b00      	cmp	r3, #0
 800244a:	db12      	blt.n	8002472 <menuActualizar+0x5a6>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 800244c:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <menuActualizar+0x5f8>)
 800244e:	fb82 1203 	smull	r1, r2, r2, r3
 8002452:	17db      	asrs	r3, r3, #31
 8002454:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8002458:	b25b      	sxtb	r3, r3
									 menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 800245a:	3301      	adds	r3, #1
 800245c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	3309      	adds	r3, #9
 8002464:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <menuActualizar+0x5e8>)
 8002466:	7113      	strb	r3, [r2, #4]
 8002468:	e795      	b.n	8002396 <menuActualizar+0x4ca>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <menuActualizar+0x5e8>)
 800246c:	221b      	movs	r2, #27
 800246e:	715a      	strb	r2, [r3, #5]
							break;
 8002470:	e791      	b.n	8002396 <menuActualizar+0x4ca>
								if(div < 0) menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <menuActualizar+0x5e8>)
 8002474:	2209      	movs	r2, #9
 8002476:	711a      	strb	r2, [r3, #4]
 8002478:	e78d      	b.n	8002396 <menuActualizar+0x4ca>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <menuActualizar+0x5e8>)
 800247c:	2209      	movs	r2, #9
 800247e:	711a      	strb	r2, [r3, #4]
 8002480:	e789      	b.n	8002396 <menuActualizar+0x4ca>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <menuActualizar+0x5e8>)
 8002484:	222a      	movs	r2, #42	; 0x2a
 8002486:	715a      	strb	r2, [r3, #5]
							break;
 8002488:	e785      	b.n	8002396 <menuActualizar+0x4ca>
							else if(div == 8 || div == 9){
 800248a:	f1a3 0208 	sub.w	r2, r3, #8
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	2a01      	cmp	r2, #1
 8002492:	d907      	bls.n	80024a4 <menuActualizar+0x5d8>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 8002494:	3b01      	subs	r3, #1
 8002496:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	331c      	adds	r3, #28
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <menuActualizar+0x5e8>)
 80024a0:	7113      	strb	r3, [r2, #4]
 80024a2:	e778      	b.n	8002396 <menuActualizar+0x4ca>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <menuActualizar+0x5e8>)
 80024a6:	2274      	movs	r2, #116	; 0x74
 80024a8:	711a      	strb	r2, [r3, #4]
 80024aa:	e774      	b.n	8002396 <menuActualizar+0x4ca>
 80024ac:	20000000 	.word	0x20000000
 80024b0:	0800a118 	.word	0x0800a118
 80024b4:	20000b30 	.word	0x20000b30
 80024b8:	0800a138 	.word	0x0800a138
 80024bc:	0800a144 	.word	0x0800a144
 80024c0:	0800a150 	.word	0x0800a150
 80024c4:	2aaaaaab 	.word	0x2aaaaaab
			menu.GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 80024c8:	f005 f870 	bl	80075ac <xTaskGetTickCount>
 80024cc:	4b78      	ldr	r3, [pc, #480]	; (80026b0 <menuActualizar+0x7e4>)
 80024ce:	6118      	str	r0, [r3, #16]
			switch(mov){
 80024d0:	2c02      	cmp	r4, #2
 80024d2:	d020      	beq.n	8002516 <menuActualizar+0x64a>
 80024d4:	2c03      	cmp	r4, #3
 80024d6:	f47f af68 	bne.w	80023aa <menuActualizar+0x4de>
					menu.GuardarNombre.posicion_x = menu.GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 80024da:	461a      	mov	r2, r3
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	3b0c      	subs	r3, #12
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	7113      	strb	r3, [r2, #4]
					if(menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 80024e4:	7952      	ldrb	r2, [r2, #5]
 80024e6:	2a39      	cmp	r2, #57	; 0x39
 80024e8:	d006      	beq.n	80024f8 <menuActualizar+0x62c>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 80024ea:	2bfd      	cmp	r3, #253	; 0xfd
 80024ec:	f47f af5d 	bne.w	80023aa <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 80024f0:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <menuActualizar+0x7e4>)
 80024f2:	2275      	movs	r2, #117	; 0x75
 80024f4:	711a      	strb	r2, [r3, #4]
 80024f6:	e758      	b.n	80023aa <menuActualizar+0x4de>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR)
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d008      	beq.n	800250e <menuActualizar+0x642>
								|| menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 80024fc:	2bff      	cmp	r3, #255	; 0xff
 80024fe:	d006      	beq.n	800250e <menuActualizar+0x642>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 8002500:	2b68      	cmp	r3, #104	; 0x68
 8002502:	f47f af52 	bne.w	80023aa <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 8002506:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <menuActualizar+0x7e4>)
 8002508:	2264      	movs	r2, #100	; 0x64
 800250a:	711a      	strb	r2, [r3, #4]
 800250c:	e74d      	b.n	80023aa <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 800250e:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <menuActualizar+0x7e4>)
 8002510:	220b      	movs	r2, #11
 8002512:	711a      	strb	r2, [r3, #4]
 8002514:	e749      	b.n	80023aa <menuActualizar+0x4de>
					menu.GuardarNombre.posicion_x = menu.GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <menuActualizar+0x7e4>)
 8002518:	7913      	ldrb	r3, [r2, #4]
 800251a:	330c      	adds	r3, #12
 800251c:	b2db      	uxtb	r3, r3
 800251e:	7113      	strb	r3, [r2, #4]
					if(menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8002520:	7952      	ldrb	r2, [r2, #5]
 8002522:	2a39      	cmp	r2, #57	; 0x39
 8002524:	d006      	beq.n	8002534 <menuActualizar+0x668>
						if(menu.GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 8002526:	2b75      	cmp	r3, #117	; 0x75
 8002528:	f67f af3f 	bls.w	80023aa <menuActualizar+0x4de>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800252c:	4b60      	ldr	r3, [pc, #384]	; (80026b0 <menuActualizar+0x7e4>)
 800252e:	2209      	movs	r2, #9
 8002530:	711a      	strb	r2, [r3, #4]
 8002532:	e73a      	b.n	80023aa <menuActualizar+0x4de>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 8002534:	2b70      	cmp	r3, #112	; 0x70
 8002536:	d008      	beq.n	800254a <menuActualizar+0x67e>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d00a      	beq.n	8002552 <menuActualizar+0x686>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 800253c:	2b17      	cmp	r3, #23
 800253e:	f47f af34 	bne.w	80023aa <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <menuActualizar+0x7e4>)
 8002544:	221c      	movs	r2, #28
 8002546:	711a      	strb	r2, [r3, #4]
 8002548:	e72f      	b.n	80023aa <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 800254a:	4b59      	ldr	r3, [pc, #356]	; (80026b0 <menuActualizar+0x7e4>)
 800254c:	2274      	movs	r2, #116	; 0x74
 800254e:	711a      	strb	r2, [r3, #4]
 8002550:	e72b      	b.n	80023aa <menuActualizar+0x4de>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8002552:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <menuActualizar+0x7e4>)
 8002554:	220b      	movs	r2, #11
 8002556:	711a      	strb	r2, [r3, #4]
 8002558:	e727      	b.n	80023aa <menuActualizar+0x4de>
			menu.GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 800255a:	f005 f827 	bl	80075ac <xTaskGetTickCount>
 800255e:	4b54      	ldr	r3, [pc, #336]	; (80026b0 <menuActualizar+0x7e4>)
 8002560:	6198      	str	r0, [r3, #24]
			if((boton == true) && (menu.GuardarNombre.indice <= 6)){
 8002562:	f1b8 0f01 	cmp.w	r8, #1
 8002566:	f47f af2b 	bne.w	80023c0 <menuActualizar+0x4f4>
 800256a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800256e:	2b06      	cmp	r3, #6
 8002570:	f73f af26 	bgt.w	80023c0 <menuActualizar+0x4f4>
						if((menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 8002574:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <menuActualizar+0x7e4>)
 8002576:	7951      	ldrb	r1, [r2, #5]
 8002578:	2939      	cmp	r1, #57	; 0x39
 800257a:	d02f      	beq.n	80025dc <menuActualizar+0x710>
							div = menu.GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 800257c:	7912      	ldrb	r2, [r2, #4]
 800257e:	3a09      	subs	r2, #9
 8002580:	b252      	sxtb	r2, r2
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 8002582:	484c      	ldr	r0, [pc, #304]	; (80026b4 <menuActualizar+0x7e8>)
 8002584:	fb80 4002 	smull	r4, r0, r0, r2
 8002588:	17d2      	asrs	r2, r2, #31
 800258a:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 800258e:	b252      	sxtb	r2, r2
							if((menu.GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 8002590:	291b      	cmp	r1, #27
 8002592:	d00d      	beq.n	80025b0 <menuActualizar+0x6e4>
							else if((menu.GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 8002594:	292a      	cmp	r1, #42	; 0x2a
 8002596:	d016      	beq.n	80025c6 <menuActualizar+0x6fa>
						if(menu.GuardarNombre.indice > 6){
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <menuActualizar+0x7e4>)
 800259a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	f77f af0e 	ble.w	80023c0 <menuActualizar+0x4f4>
							menu.GuardarNombre.indice = 6;
 80025a4:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <menuActualizar+0x7e4>)
 80025a6:	2206      	movs	r2, #6
 80025a8:	735a      	strb	r2, [r3, #13]
							menu.GuardarNombre.nombre[6] = '\0';
 80025aa:	2200      	movs	r2, #0
 80025ac:	731a      	strb	r2, [r3, #12]
 80025ae:	e707      	b.n	80023c0 <menuActualizar+0x4f4>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_qwerty[div];
 80025b0:	3258      	adds	r2, #88	; 0x58
 80025b2:	446a      	add	r2, sp
 80025b4:	f812 0c48 	ldrb.w	r0, [r2, #-72]
 80025b8:	4a3d      	ldr	r2, [pc, #244]	; (80026b0 <menuActualizar+0x7e4>)
 80025ba:	18d1      	adds	r1, r2, r3
 80025bc:	7188      	strb	r0, [r1, #6]
								menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	7353      	strb	r3, [r2, #13]
 80025c4:	e7e8      	b.n	8002598 <menuActualizar+0x6cc>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_asdf[div];
 80025c6:	3258      	adds	r2, #88	; 0x58
 80025c8:	446a      	add	r2, sp
 80025ca:	f812 0c3c 	ldrb.w	r0, [r2, #-60]
 80025ce:	4a38      	ldr	r2, [pc, #224]	; (80026b0 <menuActualizar+0x7e4>)
 80025d0:	18d1      	adds	r1, r2, r3
 80025d2:	7188      	strb	r0, [r1, #6]
								menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	7353      	strb	r3, [r2, #13]
 80025da:	e7dd      	b.n	8002598 <menuActualizar+0x6cc>
							div = menu.GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 80025dc:	4a34      	ldr	r2, [pc, #208]	; (80026b0 <menuActualizar+0x7e4>)
 80025de:	7912      	ldrb	r2, [r2, #4]
 80025e0:	3a1c      	subs	r2, #28
 80025e2:	b252      	sxtb	r2, r2
							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 80025e4:	2a00      	cmp	r2, #0
 80025e6:	db0f      	blt.n	8002608 <menuActualizar+0x73c>
								div = div / GUARDADO_OFFSET_X_CURSOR;
 80025e8:	210c      	movs	r1, #12
 80025ea:	fb92 f2f1 	sdiv	r2, r2, r1
									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 80025ee:	2a07      	cmp	r2, #7
 80025f0:	d01c      	beq.n	800262c <menuActualizar+0x760>
										menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_zxc[div];
 80025f2:	3258      	adds	r2, #88	; 0x58
 80025f4:	446a      	add	r2, sp
 80025f6:	f812 0c50 	ldrb.w	r0, [r2, #-80]
 80025fa:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <menuActualizar+0x7e4>)
 80025fc:	18d1      	adds	r1, r2, r3
 80025fe:	7188      	strb	r0, [r1, #6]
										menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3301      	adds	r3, #1
 8002604:	7353      	strb	r3, [r2, #13]
 8002606:	e7c7      	b.n	8002598 <menuActualizar+0x6cc>
								menu.GuardarNombre.indice = menu.GuardarNombre.indice - 1;
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b25b      	sxtb	r3, r3
 800260e:	4a28      	ldr	r2, [pc, #160]	; (80026b0 <menuActualizar+0x7e4>)
 8002610:	7353      	strb	r3, [r2, #13]
								if(menu.GuardarNombre.indice < 0){
 8002612:	2b00      	cmp	r3, #0
 8002614:	db06      	blt.n	8002624 <menuActualizar+0x758>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = '\0';
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <menuActualizar+0x7e4>)
 8002618:	f993 200d 	ldrsb.w	r2, [r3, #13]
 800261c:	4413      	add	r3, r2
 800261e:	2200      	movs	r2, #0
 8002620:	719a      	strb	r2, [r3, #6]
 8002622:	e7b9      	b.n	8002598 <menuActualizar+0x6cc>
										menu.GuardarNombre.indice = 0;
 8002624:	4613      	mov	r3, r2
 8002626:	2200      	movs	r2, #0
 8002628:	735a      	strb	r2, [r3, #13]
 800262a:	e7f4      	b.n	8002616 <menuActualizar+0x74a>
										if((menu.GuardarNombre.indice != 0 )){
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0b3      	beq.n	8002598 <menuActualizar+0x6cc>
											osMutexAcquire(myMutexPuntajeHandle, osWaitForever);
 8002630:	4c21      	ldr	r4, [pc, #132]	; (80026b8 <menuActualizar+0x7ec>)
 8002632:	f04f 31ff 	mov.w	r1, #4294967295
 8002636:	6820      	ldr	r0, [r4, #0]
 8002638:	f003 fd72 	bl	8006120 <osMutexAcquire>
											getPuntajes(9)->puntaje  = getPlayer().puntaje;
 800263c:	a814      	add	r0, sp, #80	; 0x50
 800263e:	f7fd fd87 	bl	8000150 <getPlayer>
 8002642:	2009      	movs	r0, #9
 8002644:	f7fe fe9a 	bl	800137c <getPuntajes>
 8002648:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800264c:	8103      	strh	r3, [r0, #8]
											strcpy(getPuntajes(9)->nombre,menu.GuardarNombre.nombre);
 800264e:	2009      	movs	r0, #9
 8002650:	f7fe fe94 	bl	800137c <getPuntajes>
 8002654:	4919      	ldr	r1, [pc, #100]	; (80026bc <menuActualizar+0x7f0>)
 8002656:	f006 fa6a 	bl	8008b2e <strcpy>
											osMutexRelease(myMutexPuntajeHandle);
 800265a:	6820      	ldr	r0, [r4, #0]
 800265c:	f003 fda2 	bl	80061a4 <osMutexRelease>
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 8002660:	2101      	movs	r1, #1
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <menuActualizar+0x7f4>)
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	f003 fc71 	bl	8005f4c <osEventFlagsSet>
										    uint32_t flags = osEventFlagsWait(notificationFlag2, NOTIFICATION_VALUE2, osFlagsWaitAny, osWaitForever);
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	2200      	movs	r2, #0
 8002670:	2102      	movs	r1, #2
 8002672:	4814      	ldr	r0, [pc, #80]	; (80026c4 <menuActualizar+0x7f8>)
 8002674:	6800      	ldr	r0, [r0, #0]
 8002676:	f003 fca7 	bl	8005fc8 <osEventFlagsWait>
										    if (flags == NOTIFICATION_VALUE2){
 800267a:	2802      	cmp	r0, #2
 800267c:	d18c      	bne.n	8002598 <menuActualizar+0x6cc>
										    	menuReset();
 800267e:	f7ff fbfd 	bl	8001e7c <menuReset>
										    	menu.menuActual = puntajes;
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <menuActualizar+0x7e4>)
 8002684:	2203      	movs	r2, #3
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e786      	b.n	8002598 <menuActualizar+0x6cc>
		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 800268a:	2301      	movs	r3, #1
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2328      	movs	r3, #40	; 0x28
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2364      	movs	r3, #100	; 0x64
 8002694:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <menuActualizar+0x7fc>)
 8002696:	210a      	movs	r1, #10
 8002698:	200f      	movs	r0, #15
 800269a:	f000 f84f 	bl	800273c <SSD1306_DrawBitmap>
		if(y == arriba){
 800269e:	2e00      	cmp	r6, #0
 80026a0:	f47f ae9e 	bne.w	80023e0 <menuActualizar+0x514>
			GuardarNombreReset();
 80026a4:	f7ff fbfe 	bl	8001ea4 <GuardarNombreReset>
			menu.menuActual = guardar_nombre;
 80026a8:	4b01      	ldr	r3, [pc, #4]	; (80026b0 <menuActualizar+0x7e4>)
 80026aa:	2205      	movs	r2, #5
 80026ac:	701a      	strb	r2, [r3, #0]
}
 80026ae:	e697      	b.n	80023e0 <menuActualizar+0x514>
 80026b0:	20000b30 	.word	0x20000b30
 80026b4:	2aaaaaab 	.word	0x2aaaaaab
 80026b8:	20000ab0 	.word	0x20000ab0
 80026bc:	20000b36 	.word	0x20000b36
 80026c0:	20000ab4 	.word	0x20000ab4
 80026c4:	20000ab8 	.word	0x20000ab8
 80026c8:	0800a258 	.word	0x0800a258

080026cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80026cc:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80026ce:	b930      	cbnz	r0, 80026de <SSD1306_Fill+0x12>
 80026d0:	2100      	movs	r1, #0
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d6:	4803      	ldr	r0, [pc, #12]	; (80026e4 <SSD1306_Fill+0x18>)
 80026d8:	f006 f9ad 	bl	8008a36 <memset>
}
 80026dc:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80026de:	21ff      	movs	r1, #255	; 0xff
 80026e0:	e7f7      	b.n	80026d2 <SSD1306_Fill+0x6>
 80026e2:	bf00      	nop
 80026e4:	20000b5c 	.word	0x20000b5c

080026e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 80026e8:	287f      	cmp	r0, #127	; 0x7f
 80026ea:	d816      	bhi.n	800271a <SSD1306_DrawPixel+0x32>
		x >= SSD1306_WIDTH ||
 80026ec:	293f      	cmp	r1, #63	; 0x3f
 80026ee:	d814      	bhi.n	800271a <SSD1306_DrawPixel+0x32>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <SSD1306_DrawPixel+0x4c>)
 80026f2:	791b      	ldrb	r3, [r3, #4]
 80026f4:	b113      	cbz	r3, 80026fc <SSD1306_DrawPixel+0x14>
		color = (SSD1306_COLOR_t)!color;
 80026f6:	fab2 f282 	clz	r2, r2
 80026fa:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80026fc:	2a01      	cmp	r2, #1
 80026fe:	d00d      	beq.n	800271c <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002700:	08cb      	lsrs	r3, r1, #3
 8002702:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002706:	f001 0107 	and.w	r1, r1, #7
 800270a:	2301      	movs	r3, #1
 800270c:	408b      	lsls	r3, r1
 800270e:	43db      	mvns	r3, r3
 8002710:	b25b      	sxtb	r3, r3
 8002712:	4909      	ldr	r1, [pc, #36]	; (8002738 <SSD1306_DrawPixel+0x50>)
 8002714:	5c0a      	ldrb	r2, [r1, r0]
 8002716:	4013      	ands	r3, r2
 8002718:	540b      	strb	r3, [r1, r0]
	}
}
 800271a:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800271c:	08cb      	lsrs	r3, r1, #3
 800271e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8002722:	f001 0107 	and.w	r1, r1, #7
 8002726:	408a      	lsls	r2, r1
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <SSD1306_DrawPixel+0x50>)
 800272a:	5c0b      	ldrb	r3, [r1, r0]
 800272c:	4313      	orrs	r3, r2
 800272e:	540b      	strb	r3, [r1, r0]
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000b54 	.word	0x20000b54
 8002738:	20000b5c 	.word	0x20000b5c

0800273c <SSD1306_DrawBitmap>:
{
 800273c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002740:	b083      	sub	sp, #12
 8002742:	4683      	mov	fp, r0
 8002744:	4688      	mov	r8, r1
 8002746:	4692      	mov	sl, r2
 8002748:	461e      	mov	r6, r3
 800274a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8002754:	9300      	str	r3, [sp, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002756:	f116 0907 	adds.w	r9, r6, #7
 800275a:	d404      	bmi.n	8002766 <SSD1306_DrawBitmap+0x2a>
 800275c:	ea4f 09e9 	mov.w	r9, r9, asr #3
    for(int16_t j=0; j<h; j++, y++)
 8002760:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8002762:	463d      	mov	r5, r7
    for(int16_t j=0; j<h; j++, y++)
 8002764:	e02c      	b.n	80027c0 <SSD1306_DrawBitmap+0x84>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002766:	f109 0907 	add.w	r9, r9, #7
 800276a:	e7f7      	b.n	800275c <SSD1306_DrawBitmap+0x20>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800276c:	fb09 f107 	mul.w	r1, r9, r7
 8002770:	461a      	mov	r2, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	db12      	blt.n	800279c <SSD1306_DrawBitmap+0x60>
 8002776:	f342 02cf 	sbfx	r2, r2, #3, #16
 800277a:	188b      	adds	r3, r1, r2
 800277c:	f81a 5003 	ldrb.w	r5, [sl, r3]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002780:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002784:	d10c      	bne.n	80027a0 <SSD1306_DrawBitmap+0x64>
        for(int16_t i=0; i<w; i++)
 8002786:	3401      	adds	r4, #1
 8002788:	b223      	sxth	r3, r4
 800278a:	42b3      	cmp	r3, r6
 800278c:	da12      	bge.n	80027b4 <SSD1306_DrawBitmap+0x78>
            if(i & 7)
 800278e:	b29c      	uxth	r4, r3
 8002790:	f013 0f07 	tst.w	r3, #7
 8002794:	d0ea      	beq.n	800276c <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 8002796:	006d      	lsls	r5, r5, #1
 8002798:	b2ed      	uxtb	r5, r5
 800279a:	e7f1      	b.n	8002780 <SSD1306_DrawBitmap+0x44>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800279c:	1dda      	adds	r2, r3, #7
 800279e:	e7ea      	b.n	8002776 <SSD1306_DrawBitmap+0x3a>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80027a0:	eb04 000b 	add.w	r0, r4, fp
 80027a4:	f89d 2000 	ldrb.w	r2, [sp]
 80027a8:	fa1f f188 	uxth.w	r1, r8
 80027ac:	b280      	uxth	r0, r0
 80027ae:	f7ff ff9b 	bl	80026e8 <SSD1306_DrawPixel>
 80027b2:	e7e8      	b.n	8002786 <SSD1306_DrawBitmap+0x4a>
    for(int16_t j=0; j<h; j++, y++)
 80027b4:	3701      	adds	r7, #1
 80027b6:	b23f      	sxth	r7, r7
 80027b8:	f108 0801 	add.w	r8, r8, #1
 80027bc:	fa0f f888 	sxth.w	r8, r8
 80027c0:	9b01      	ldr	r3, [sp, #4]
 80027c2:	429f      	cmp	r7, r3
 80027c4:	da01      	bge.n	80027ca <SSD1306_DrawBitmap+0x8e>
        for(int16_t i=0; i<w; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	e7df      	b.n	800278a <SSD1306_DrawBitmap+0x4e>
}
 80027ca:	b003      	add	sp, #12
 80027cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80027d0:	4b01      	ldr	r3, [pc, #4]	; (80027d8 <SSD1306_GotoXY+0x8>)
 80027d2:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80027d4:	8059      	strh	r1, [r3, #2]
}
 80027d6:	4770      	bx	lr
 80027d8:	20000b54 	.word	0x20000b54

080027dc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027e0:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <SSD1306_Putc+0x98>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	780a      	ldrb	r2, [r1, #0]
 80027e8:	4413      	add	r3, r2
	if (
 80027ea:	2b7f      	cmp	r3, #127	; 0x7f
 80027ec:	dc3e      	bgt.n	800286c <SSD1306_Putc+0x90>
 80027ee:	4681      	mov	r9, r0
 80027f0:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <SSD1306_Putc+0x98>)
 80027f4:	885b      	ldrh	r3, [r3, #2]
 80027f6:	784a      	ldrb	r2, [r1, #1]
 80027f8:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80027fa:	2b3f      	cmp	r3, #63	; 0x3f
 80027fc:	dc38      	bgt.n	8002870 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80027fe:	2600      	movs	r6, #0
 8002800:	e020      	b.n	8002844 <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002802:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <SSD1306_Putc+0x98>)
 8002804:	8818      	ldrh	r0, [r3, #0]
 8002806:	8859      	ldrh	r1, [r3, #2]
 8002808:	4431      	add	r1, r6
 800280a:	4420      	add	r0, r4
 800280c:	fab8 f288 	clz	r2, r8
 8002810:	0952      	lsrs	r2, r2, #5
 8002812:	b289      	uxth	r1, r1
 8002814:	b280      	uxth	r0, r0
 8002816:	f7ff ff67 	bl	80026e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800281a:	3401      	adds	r4, #1
 800281c:	782b      	ldrb	r3, [r5, #0]
 800281e:	42a3      	cmp	r3, r4
 8002820:	d90f      	bls.n	8002842 <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 8002822:	fa07 f304 	lsl.w	r3, r7, r4
 8002826:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800282a:	d0ea      	beq.n	8002802 <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <SSD1306_Putc+0x98>)
 800282e:	8818      	ldrh	r0, [r3, #0]
 8002830:	8859      	ldrh	r1, [r3, #2]
 8002832:	4431      	add	r1, r6
 8002834:	4420      	add	r0, r4
 8002836:	4642      	mov	r2, r8
 8002838:	b289      	uxth	r1, r1
 800283a:	b280      	uxth	r0, r0
 800283c:	f7ff ff54 	bl	80026e8 <SSD1306_DrawPixel>
 8002840:	e7eb      	b.n	800281a <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002842:	3601      	adds	r6, #1
 8002844:	786a      	ldrb	r2, [r5, #1]
 8002846:	42b2      	cmp	r2, r6
 8002848:	d908      	bls.n	800285c <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800284a:	6869      	ldr	r1, [r5, #4]
 800284c:	f1a9 0320 	sub.w	r3, r9, #32
 8002850:	fb02 6303 	mla	r3, r2, r3, r6
 8002854:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8002858:	2400      	movs	r4, #0
 800285a:	e7df      	b.n	800281c <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800285c:	782b      	ldrb	r3, [r5, #0]
 800285e:	4a05      	ldr	r2, [pc, #20]	; (8002874 <SSD1306_Putc+0x98>)
 8002860:	8811      	ldrh	r1, [r2, #0]
 8002862:	440b      	add	r3, r1
 8002864:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8002866:	4648      	mov	r0, r9
}
 8002868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 800286c:	2000      	movs	r0, #0
 800286e:	e7fb      	b.n	8002868 <SSD1306_Putc+0x8c>
 8002870:	2000      	movs	r0, #0
 8002872:	e7f9      	b.n	8002868 <SSD1306_Putc+0x8c>
 8002874:	20000b54 	.word	0x20000b54

08002878 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	4604      	mov	r4, r0
 800287c:	460e      	mov	r6, r1
 800287e:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8002880:	e000      	b.n	8002884 <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8002882:	3401      	adds	r4, #1
	while (*str) {
 8002884:	7820      	ldrb	r0, [r4, #0]
 8002886:	b138      	cbz	r0, 8002898 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002888:	462a      	mov	r2, r5
 800288a:	4631      	mov	r1, r6
 800288c:	f7ff ffa6 	bl	80027dc <SSD1306_Putc>
 8002890:	4603      	mov	r3, r0
 8002892:	7820      	ldrb	r0, [r4, #0]
 8002894:	4283      	cmp	r3, r0
 8002896:	d0f4      	beq.n	8002882 <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8002898:	bd70      	pop	{r4, r5, r6, pc}

0800289a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800289a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	4604      	mov	r4, r0
 80028a2:	460e      	mov	r6, r1
 80028a4:	4617      	mov	r7, r2
 80028a6:	4698      	mov	r8, r3
 80028a8:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80028ac:	287f      	cmp	r0, #127	; 0x7f
 80028ae:	d900      	bls.n	80028b2 <SSD1306_DrawLine+0x18>
		x0 = SSD1306_WIDTH - 1;
 80028b0:	247f      	movs	r4, #127	; 0x7f
	}
	if (x1 >= SSD1306_WIDTH) {
 80028b2:	2f7f      	cmp	r7, #127	; 0x7f
 80028b4:	d900      	bls.n	80028b8 <SSD1306_DrawLine+0x1e>
		x1 = SSD1306_WIDTH - 1;
 80028b6:	277f      	movs	r7, #127	; 0x7f
	}
	if (y0 >= SSD1306_HEIGHT) {
 80028b8:	2e3f      	cmp	r6, #63	; 0x3f
 80028ba:	d900      	bls.n	80028be <SSD1306_DrawLine+0x24>
		y0 = SSD1306_HEIGHT - 1;
 80028bc:	263f      	movs	r6, #63	; 0x3f
	}
	if (y1 >= SSD1306_HEIGHT) {
 80028be:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 80028c2:	d901      	bls.n	80028c8 <SSD1306_DrawLine+0x2e>
		y1 = SSD1306_HEIGHT - 1;
 80028c4:	f04f 083f 	mov.w	r8, #63	; 0x3f
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80028c8:	42bc      	cmp	r4, r7
 80028ca:	d220      	bcs.n	800290e <SSD1306_DrawLine+0x74>
 80028cc:	eba7 0904 	sub.w	r9, r7, r4
 80028d0:	fa0f f989 	sxth.w	r9, r9
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80028d4:	4546      	cmp	r6, r8
 80028d6:	d21f      	bcs.n	8002918 <SSD1306_DrawLine+0x7e>
 80028d8:	eba8 0a06 	sub.w	sl, r8, r6
 80028dc:	fa0f fa8a 	sxth.w	sl, sl
	sx = (x0 < x1) ? 1 : -1; 
 80028e0:	42bc      	cmp	r4, r7
 80028e2:	d21e      	bcs.n	8002922 <SSD1306_DrawLine+0x88>
 80028e4:	2301      	movs	r3, #1
 80028e6:	461a      	mov	r2, r3
	sy = (y0 < y1) ? 1 : -1; 
 80028e8:	4546      	cmp	r6, r8
 80028ea:	d21e      	bcs.n	800292a <SSD1306_DrawLine+0x90>
 80028ec:	2301      	movs	r3, #1
 80028ee:	9300      	str	r3, [sp, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80028f0:	45d1      	cmp	r9, sl
 80028f2:	dd1e      	ble.n	8002932 <SSD1306_DrawLine+0x98>
 80028f4:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 80028f8:	106d      	asrs	r5, r5, #1

	if (dx == 0) {
 80028fa:	f1b9 0f00 	cmp.w	r9, #0
 80028fe:	d01e      	beq.n	800293e <SSD1306_DrawLine+0xa4>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 8002900:	f1ba 0f00 	cmp.w	sl, #0
 8002904:	d034      	beq.n	8002970 <SSD1306_DrawLine+0xd6>
 8002906:	f8cd 8004 	str.w	r8, [sp, #4]
 800290a:	4690      	mov	r8, r2
 800290c:	e054      	b.n	80029b8 <SSD1306_DrawLine+0x11e>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800290e:	eba4 0907 	sub.w	r9, r4, r7
 8002912:	fa0f f989 	sxth.w	r9, r9
 8002916:	e7dd      	b.n	80028d4 <SSD1306_DrawLine+0x3a>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002918:	eba6 0a08 	sub.w	sl, r6, r8
 800291c:	fa0f fa8a 	sxth.w	sl, sl
 8002920:	e7de      	b.n	80028e0 <SSD1306_DrawLine+0x46>
	sx = (x0 < x1) ? 1 : -1; 
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	461a      	mov	r2, r3
 8002928:	e7de      	b.n	80028e8 <SSD1306_DrawLine+0x4e>
	sy = (y0 < y1) ? 1 : -1; 
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	e7de      	b.n	80028f0 <SSD1306_DrawLine+0x56>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002932:	eb0a 75da 	add.w	r5, sl, sl, lsr #31
 8002936:	106d      	asrs	r5, r5, #1
 8002938:	426d      	negs	r5, r5
 800293a:	b22d      	sxth	r5, r5
 800293c:	e7dd      	b.n	80028fa <SSD1306_DrawLine+0x60>
		if (y1 < y0) {
 800293e:	4546      	cmp	r6, r8
 8002940:	d802      	bhi.n	8002948 <SSD1306_DrawLine+0xae>
 8002942:	4643      	mov	r3, r8
 8002944:	46b0      	mov	r8, r6
 8002946:	461e      	mov	r6, r3
		if (x1 < x0) {
 8002948:	42bc      	cmp	r4, r7
 800294a:	d800      	bhi.n	800294e <SSD1306_DrawLine+0xb4>
 800294c:	4627      	mov	r7, r4
		for (i = y0; i <= y1; i++) {
 800294e:	fa0f f888 	sxth.w	r8, r8
 8002952:	e00a      	b.n	800296a <SSD1306_DrawLine+0xd0>
			SSD1306_DrawPixel(x0, i, c);
 8002954:	fa1f f888 	uxth.w	r8, r8
 8002958:	465a      	mov	r2, fp
 800295a:	4641      	mov	r1, r8
 800295c:	4638      	mov	r0, r7
 800295e:	f7ff fec3 	bl	80026e8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002962:	f108 0801 	add.w	r8, r8, #1
 8002966:	fa0f f888 	sxth.w	r8, r8
 800296a:	45b0      	cmp	r8, r6
 800296c:	ddf2      	ble.n	8002954 <SSD1306_DrawLine+0xba>
 800296e:	e017      	b.n	80029a0 <SSD1306_DrawLine+0x106>
		if (y1 < y0) {
 8002970:	4546      	cmp	r6, r8
 8002972:	d800      	bhi.n	8002976 <SSD1306_DrawLine+0xdc>
 8002974:	46b0      	mov	r8, r6
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}
		
		if (x1 < x0) {
 8002976:	42bc      	cmp	r4, r7
 8002978:	d802      	bhi.n	8002980 <SSD1306_DrawLine+0xe6>
 800297a:	463b      	mov	r3, r7
 800297c:	4627      	mov	r7, r4
 800297e:	461c      	mov	r4, r3
			x1 = x0;
			x0 = tmp;
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002980:	b23f      	sxth	r7, r7
 8002982:	e007      	b.n	8002994 <SSD1306_DrawLine+0xfa>
			SSD1306_DrawPixel(i, y0, c);
 8002984:	b2bf      	uxth	r7, r7
 8002986:	465a      	mov	r2, fp
 8002988:	4641      	mov	r1, r8
 800298a:	4638      	mov	r0, r7
 800298c:	f7ff feac 	bl	80026e8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002990:	3701      	adds	r7, #1
 8002992:	b23f      	sxth	r7, r7
 8002994:	42a7      	cmp	r7, r4
 8002996:	ddf5      	ble.n	8002984 <SSD1306_DrawLine+0xea>
 8002998:	e002      	b.n	80029a0 <SSD1306_DrawLine+0x106>
		return;
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
 800299a:	9b01      	ldr	r3, [sp, #4]
 800299c:	429e      	cmp	r6, r3
 800299e:	d112      	bne.n	80029c6 <SSD1306_DrawLine+0x12c>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 80029a0:	b003      	add	sp, #12
 80029a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029a6:	462b      	mov	r3, r5
		if (e2 < dy) {
 80029a8:	4555      	cmp	r5, sl
 80029aa:	da04      	bge.n	80029b6 <SSD1306_DrawLine+0x11c>
			err += dx;
 80029ac:	444b      	add	r3, r9
 80029ae:	b21b      	sxth	r3, r3
			y0 += sy;
 80029b0:	9a00      	ldr	r2, [sp, #0]
 80029b2:	4416      	add	r6, r2
 80029b4:	b2b6      	uxth	r6, r6
		if (x1 < x0) {
 80029b6:	461d      	mov	r5, r3
		SSD1306_DrawPixel(x0, y0, c);
 80029b8:	465a      	mov	r2, fp
 80029ba:	4631      	mov	r1, r6
 80029bc:	4620      	mov	r0, r4
 80029be:	f7ff fe93 	bl	80026e8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80029c2:	42bc      	cmp	r4, r7
 80029c4:	d0e9      	beq.n	800299a <SSD1306_DrawLine+0x100>
		if (e2 > -dx) {
 80029c6:	f1c9 0300 	rsb	r3, r9, #0
 80029ca:	429d      	cmp	r5, r3
 80029cc:	ddeb      	ble.n	80029a6 <SSD1306_DrawLine+0x10c>
			err -= dy;
 80029ce:	eba5 030a 	sub.w	r3, r5, sl
 80029d2:	b21b      	sxth	r3, r3
			x0 += sx;
 80029d4:	4444      	add	r4, r8
 80029d6:	b2a4      	uxth	r4, r4
 80029d8:	e7e6      	b.n	80029a8 <SSD1306_DrawLine+0x10e>

080029da <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80029da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* Check input parameters */
	if (
 80029e4:	287f      	cmp	r0, #127	; 0x7f
 80029e6:	d834      	bhi.n	8002a52 <SSD1306_DrawRectangle+0x78>
 80029e8:	4606      	mov	r6, r0
 80029ea:	460f      	mov	r7, r1
 80029ec:	461d      	mov	r5, r3
		x >= SSD1306_WIDTH ||
 80029ee:	293f      	cmp	r1, #63	; 0x3f
 80029f0:	d82f      	bhi.n	8002a52 <SSD1306_DrawRectangle+0x78>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80029f2:	1883      	adds	r3, r0, r2
 80029f4:	2b7f      	cmp	r3, #127	; 0x7f
 80029f6:	dd02      	ble.n	80029fe <SSD1306_DrawRectangle+0x24>
		w = SSD1306_WIDTH - x;
 80029f8:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 80029fc:	b292      	uxth	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80029fe:	197b      	adds	r3, r7, r5
 8002a00:	2b3f      	cmp	r3, #63	; 0x3f
 8002a02:	dd02      	ble.n	8002a0a <SSD1306_DrawRectangle+0x30>
		h = SSD1306_HEIGHT - y;
 8002a04:	f1c7 0540 	rsb	r5, r7, #64	; 0x40
 8002a08:	b2ad      	uxth	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8002a0a:	1994      	adds	r4, r2, r6
 8002a0c:	b2a4      	uxth	r4, r4
 8002a0e:	f8cd 8000 	str.w	r8, [sp]
 8002a12:	463b      	mov	r3, r7
 8002a14:	4622      	mov	r2, r4
 8002a16:	4639      	mov	r1, r7
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f7ff ff3e 	bl	800289a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8002a1e:	443d      	add	r5, r7
 8002a20:	b2ad      	uxth	r5, r5
 8002a22:	f8cd 8000 	str.w	r8, [sp]
 8002a26:	462b      	mov	r3, r5
 8002a28:	4622      	mov	r2, r4
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f7ff ff34 	bl	800289a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8002a32:	f8cd 8000 	str.w	r8, [sp]
 8002a36:	462b      	mov	r3, r5
 8002a38:	4632      	mov	r2, r6
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	f7ff ff2c 	bl	800289a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8002a42:	f8cd 8000 	str.w	r8, [sp]
 8002a46:	462b      	mov	r3, r5
 8002a48:	4622      	mov	r2, r4
 8002a4a:	4639      	mov	r1, r7
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7ff ff24 	bl	800289a <SSD1306_DrawLine>
}
 8002a52:	b002      	add	sp, #8
 8002a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a58 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	9201      	str	r2, [sp, #4]
 8002a60:	461e      	mov	r6, r3
	int16_t f = 1 - r;
 8002a62:	b294      	uxth	r4, r2
 8002a64:	f1c4 0301 	rsb	r3, r4, #1
 8002a68:	fa0f f983 	sxth.w	r9, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8002a6c:	ebc4 33c4 	rsb	r3, r4, r4, lsl #15
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	b21b      	sxth	r3, r3
 8002a74:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002a76:	fa1f fb80 	uxth.w	fp, r0
 8002a7a:	fa1f fa81 	uxth.w	sl, r1
 8002a7e:	eb04 010a 	add.w	r1, r4, sl
 8002a82:	4632      	mov	r2, r6
 8002a84:	b289      	uxth	r1, r1
 8002a86:	4658      	mov	r0, fp
 8002a88:	f7ff fe2e 	bl	80026e8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002a8c:	ebaa 0104 	sub.w	r1, sl, r4
 8002a90:	4632      	mov	r2, r6
 8002a92:	b289      	uxth	r1, r1
 8002a94:	4658      	mov	r0, fp
 8002a96:	f7ff fe27 	bl	80026e8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002a9a:	eb04 000b 	add.w	r0, r4, fp
 8002a9e:	4632      	mov	r2, r6
 8002aa0:	4651      	mov	r1, sl
 8002aa2:	b280      	uxth	r0, r0
 8002aa4:	f7ff fe20 	bl	80026e8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002aa8:	ebab 0004 	sub.w	r0, fp, r4
 8002aac:	4632      	mov	r2, r6
 8002aae:	4651      	mov	r1, sl
 8002ab0:	b280      	uxth	r0, r0
 8002ab2:	f7ff fe19 	bl	80026e8 <SSD1306_DrawPixel>
	int16_t x = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	9302      	str	r3, [sp, #8]
	int16_t ddF_x = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	9303      	str	r3, [sp, #12]

    while (x < y) {
 8002abe:	e05e      	b.n	8002b7e <SSD1306_DrawCircle+0x126>
        if (f >= 0) {
            y--;
 8002ac0:	9b01      	ldr	r3, [sp, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b21b      	sxth	r3, r3
 8002ac6:	9301      	str	r3, [sp, #4]
            ddF_y += 2;
 8002ac8:	9a05      	ldr	r2, [sp, #20]
 8002aca:	3202      	adds	r2, #2
 8002acc:	b293      	uxth	r3, r2
 8002ace:	b212      	sxth	r2, r2
 8002ad0:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8002ad2:	444b      	add	r3, r9
 8002ad4:	fa0f f983 	sxth.w	r9, r3
        }
        x++;
 8002ad8:	9b02      	ldr	r3, [sp, #8]
 8002ada:	3301      	adds	r3, #1
 8002adc:	b29d      	uxth	r5, r3
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	9302      	str	r3, [sp, #8]
        ddF_x += 2;
 8002ae2:	9a03      	ldr	r2, [sp, #12]
 8002ae4:	3202      	adds	r2, #2
 8002ae6:	b293      	uxth	r3, r2
 8002ae8:	b212      	sxth	r2, r2
 8002aea:	9203      	str	r2, [sp, #12]
        f += ddF_x;
 8002aec:	444b      	add	r3, r9
 8002aee:	fa0f f983 	sxth.w	r9, r3

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8002af2:	eb0b 0305 	add.w	r3, fp, r5
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8002afc:	eb0a 0804 	add.w	r8, sl, r4
 8002b00:	fa1f f888 	uxth.w	r8, r8
 8002b04:	4632      	mov	r2, r6
 8002b06:	4641      	mov	r1, r8
 8002b08:	9304      	str	r3, [sp, #16]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fdec 	bl	80026e8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002b10:	ebab 0705 	sub.w	r7, fp, r5
 8002b14:	b2bf      	uxth	r7, r7
 8002b16:	4632      	mov	r2, r6
 8002b18:	4641      	mov	r1, r8
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	f7ff fde4 	bl	80026e8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002b20:	ebaa 0804 	sub.w	r8, sl, r4
 8002b24:	fa1f f888 	uxth.w	r8, r8
 8002b28:	4632      	mov	r2, r6
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	9804      	ldr	r0, [sp, #16]
 8002b2e:	f7ff fddb 	bl	80026e8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002b32:	4632      	mov	r2, r6
 8002b34:	4641      	mov	r1, r8
 8002b36:	4638      	mov	r0, r7
 8002b38:	f7ff fdd6 	bl	80026e8 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002b3c:	eb0b 0704 	add.w	r7, fp, r4
 8002b40:	b2bf      	uxth	r7, r7
 8002b42:	eb0a 0805 	add.w	r8, sl, r5
 8002b46:	fa1f f888 	uxth.w	r8, r8
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	4638      	mov	r0, r7
 8002b50:	f7ff fdca 	bl	80026e8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002b54:	ebab 0404 	sub.w	r4, fp, r4
 8002b58:	b2a4      	uxth	r4, r4
 8002b5a:	4632      	mov	r2, r6
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7ff fdc2 	bl	80026e8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002b64:	ebaa 0505 	sub.w	r5, sl, r5
 8002b68:	b2ad      	uxth	r5, r5
 8002b6a:	4632      	mov	r2, r6
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	4638      	mov	r0, r7
 8002b70:	f7ff fdba 	bl	80026e8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8002b74:	4632      	mov	r2, r6
 8002b76:	4629      	mov	r1, r5
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7ff fdb5 	bl	80026e8 <SSD1306_DrawPixel>
    while (x < y) {
 8002b7e:	9b02      	ldr	r3, [sp, #8]
 8002b80:	9a01      	ldr	r2, [sp, #4]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	da03      	bge.n	8002b8e <SSD1306_DrawCircle+0x136>
        if (f >= 0) {
 8002b86:	f1b9 0f00 	cmp.w	r9, #0
 8002b8a:	da99      	bge.n	8002ac0 <SSD1306_DrawCircle+0x68>
 8002b8c:	e7a4      	b.n	8002ad8 <SSD1306_DrawCircle+0x80>
    }
}
 8002b8e:	b007      	add	sp, #28
 8002b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002b94 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b98:	b087      	sub	sp, #28
 8002b9a:	9202      	str	r2, [sp, #8]
 8002b9c:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 8002b9e:	b295      	uxth	r5, r2
 8002ba0:	f1c5 0401 	rsb	r4, r5, #1
 8002ba4:	b224      	sxth	r4, r4
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8002ba6:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	b21b      	sxth	r3, r3
 8002bae:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002bb0:	fa1f fb80 	uxth.w	fp, r0
 8002bb4:	b28f      	uxth	r7, r1
 8002bb6:	19e9      	adds	r1, r5, r7
 8002bb8:	4652      	mov	r2, sl
 8002bba:	b289      	uxth	r1, r1
 8002bbc:	4658      	mov	r0, fp
 8002bbe:	f7ff fd93 	bl	80026e8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002bc2:	1b79      	subs	r1, r7, r5
 8002bc4:	4652      	mov	r2, sl
 8002bc6:	b289      	uxth	r1, r1
 8002bc8:	4658      	mov	r0, fp
 8002bca:	f7ff fd8d 	bl	80026e8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002bce:	eb05 060b 	add.w	r6, r5, fp
 8002bd2:	b2b6      	uxth	r6, r6
 8002bd4:	4652      	mov	r2, sl
 8002bd6:	4639      	mov	r1, r7
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f7ff fd85 	bl	80026e8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002bde:	ebab 0505 	sub.w	r5, fp, r5
 8002be2:	b2ad      	uxth	r5, r5
 8002be4:	4652      	mov	r2, sl
 8002be6:	4639      	mov	r1, r7
 8002be8:	4628      	mov	r0, r5
 8002bea:	f7ff fd7d 	bl	80026e8 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002bee:	f8cd a000 	str.w	sl, [sp]
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	4632      	mov	r2, r6
 8002bf6:	4639      	mov	r1, r7
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	f7ff fe4e 	bl	800289a <SSD1306_DrawLine>
	int16_t x = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9303      	str	r3, [sp, #12]
	int16_t ddF_x = 1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	9304      	str	r3, [sp, #16]

    while (x < y) {
 8002c06:	e04b      	b.n	8002ca0 <SSD1306_DrawFilledCircle+0x10c>
        if (f >= 0) {
            y--;
 8002c08:	9b02      	ldr	r3, [sp, #8]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b21b      	sxth	r3, r3
 8002c0e:	9302      	str	r3, [sp, #8]
            ddF_y += 2;
 8002c10:	9a05      	ldr	r2, [sp, #20]
 8002c12:	3202      	adds	r2, #2
 8002c14:	b293      	uxth	r3, r2
 8002c16:	b212      	sxth	r2, r2
 8002c18:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8002c1a:	4423      	add	r3, r4
 8002c1c:	b21c      	sxth	r4, r3
        }
        x++;
 8002c1e:	9b03      	ldr	r3, [sp, #12]
 8002c20:	3301      	adds	r3, #1
 8002c22:	b29d      	uxth	r5, r3
 8002c24:	b21b      	sxth	r3, r3
 8002c26:	9303      	str	r3, [sp, #12]
        ddF_x += 2;
 8002c28:	9a04      	ldr	r2, [sp, #16]
 8002c2a:	3202      	adds	r2, #2
 8002c2c:	b293      	uxth	r3, r2
 8002c2e:	b212      	sxth	r2, r2
 8002c30:	9204      	str	r2, [sp, #16]
        f += ddF_x;
 8002c32:	4423      	add	r3, r4
 8002c34:	b21c      	sxth	r4, r3

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002c36:	ebab 0905 	sub.w	r9, fp, r5
 8002c3a:	fa1f f989 	uxth.w	r9, r9
 8002c3e:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8002c42:	19b9      	adds	r1, r7, r6
 8002c44:	b289      	uxth	r1, r1
 8002c46:	eb0b 0805 	add.w	r8, fp, r5
 8002c4a:	fa1f f888 	uxth.w	r8, r8
 8002c4e:	f8cd a000 	str.w	sl, [sp]
 8002c52:	460b      	mov	r3, r1
 8002c54:	4642      	mov	r2, r8
 8002c56:	4648      	mov	r0, r9
 8002c58:	f7ff fe1f 	bl	800289a <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002c5c:	1bb9      	subs	r1, r7, r6
 8002c5e:	b289      	uxth	r1, r1
 8002c60:	f8cd a000 	str.w	sl, [sp]
 8002c64:	460b      	mov	r3, r1
 8002c66:	464a      	mov	r2, r9
 8002c68:	4640      	mov	r0, r8
 8002c6a:	f7ff fe16 	bl	800289a <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002c6e:	eb0b 0806 	add.w	r8, fp, r6
 8002c72:	fa1f f888 	uxth.w	r8, r8
 8002c76:	1979      	adds	r1, r7, r5
 8002c78:	b289      	uxth	r1, r1
 8002c7a:	ebab 0606 	sub.w	r6, fp, r6
 8002c7e:	b2b6      	uxth	r6, r6
 8002c80:	f8cd a000 	str.w	sl, [sp]
 8002c84:	460b      	mov	r3, r1
 8002c86:	4632      	mov	r2, r6
 8002c88:	4640      	mov	r0, r8
 8002c8a:	f7ff fe06 	bl	800289a <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002c8e:	1b79      	subs	r1, r7, r5
 8002c90:	b289      	uxth	r1, r1
 8002c92:	f8cd a000 	str.w	sl, [sp]
 8002c96:	460b      	mov	r3, r1
 8002c98:	4632      	mov	r2, r6
 8002c9a:	4640      	mov	r0, r8
 8002c9c:	f7ff fdfd 	bl	800289a <SSD1306_DrawLine>
    while (x < y) {
 8002ca0:	9b03      	ldr	r3, [sp, #12]
 8002ca2:	9a02      	ldr	r2, [sp, #8]
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	da02      	bge.n	8002cae <SSD1306_DrawFilledCircle+0x11a>
        if (f >= 0) {
 8002ca8:	2c00      	cmp	r4, #0
 8002caa:	daad      	bge.n	8002c08 <SSD1306_DrawFilledCircle+0x74>
 8002cac:	e7b7      	b.n	8002c1e <SSD1306_DrawFilledCircle+0x8a>
    }
}
 8002cae:	b007      	add	sp, #28
 8002cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002cb4 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002cb4:	b500      	push	{lr}
 8002cb6:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8002cb8:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8002cbc:	f04f 0c00 	mov.w	ip, #0
 8002cc0:	e009      	b.n	8002cd6 <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 8002cc2:	f10c 0e01 	add.w	lr, ip, #1
 8002cc6:	f812 100c 	ldrb.w	r1, [r2, ip]
 8002cca:	f10d 0c08 	add.w	ip, sp, #8
 8002cce:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 8002cd2:	fa5f fc8e 	uxtb.w	ip, lr
 8002cd6:	fa1f fe8c 	uxth.w	lr, ip
 8002cda:	459e      	cmp	lr, r3
 8002cdc:	d3f1      	bcc.n	8002cc2 <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002cde:	3301      	adds	r3, #1
 8002ce0:	220a      	movs	r2, #10
 8002ce2:	9200      	str	r2, [sp, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	aa02      	add	r2, sp, #8
 8002ce8:	4601      	mov	r1, r0
 8002cea:	4803      	ldr	r0, [pc, #12]	; (8002cf8 <ssd1306_I2C_WriteMulti+0x44>)
 8002cec:	f001 fa3a 	bl	8004164 <HAL_I2C_Master_Transmit>
}
 8002cf0:	b043      	add	sp, #268	; 0x10c
 8002cf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cf6:	bf00      	nop
 8002cf8:	20000970 	.word	0x20000970

08002cfc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002cfc:	b500      	push	{lr}
 8002cfe:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8002d00:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8002d04:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002d08:	230a      	movs	r3, #10
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	aa03      	add	r2, sp, #12
 8002d10:	4601      	mov	r1, r0
 8002d12:	4803      	ldr	r0, [pc, #12]	; (8002d20 <ssd1306_I2C_Write+0x24>)
 8002d14:	f001 fa26 	bl	8004164 <HAL_I2C_Master_Transmit>
}
 8002d18:	b005      	add	sp, #20
 8002d1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d1e:	bf00      	nop
 8002d20:	20000970 	.word	0x20000970

08002d24 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8002d24:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 8002d26:	2400      	movs	r4, #0
 8002d28:	e01a      	b.n	8002d60 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002d2a:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	2100      	movs	r1, #0
 8002d32:	2078      	movs	r0, #120	; 0x78
 8002d34:	f7ff ffe2 	bl	8002cfc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	2078      	movs	r0, #120	; 0x78
 8002d3e:	f7ff ffdd 	bl	8002cfc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002d42:	2210      	movs	r2, #16
 8002d44:	2100      	movs	r1, #0
 8002d46:	2078      	movs	r0, #120	; 0x78
 8002d48:	f7ff ffd8 	bl	8002cfc <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <SSD1306_UpdateScreen+0x44>)
 8002d50:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	2078      	movs	r0, #120	; 0x78
 8002d58:	f7ff ffac 	bl	8002cb4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002d5c:	3401      	adds	r4, #1
 8002d5e:	b2e4      	uxtb	r4, r4
 8002d60:	2c07      	cmp	r4, #7
 8002d62:	d9e2      	bls.n	8002d2a <SSD1306_UpdateScreen+0x6>
}
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	bf00      	nop
 8002d68:	20000b5c 	.word	0x20000b5c

08002d6c <SSD1306_Clear>:
{
 8002d6c:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7ff fcac 	bl	80026cc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002d74:	f7ff ffd6 	bl	8002d24 <SSD1306_UpdateScreen>
}
 8002d78:	bd08      	pop	{r3, pc}
	...

08002d7c <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002d7c:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002d7e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002d82:	2201      	movs	r2, #1
 8002d84:	2178      	movs	r1, #120	; 0x78
 8002d86:	4855      	ldr	r0, [pc, #340]	; (8002edc <SSD1306_Init+0x160>)
 8002d88:	f001 faa8 	bl	80042dc <HAL_I2C_IsDeviceReady>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	f040 80a3 	bne.w	8002ed8 <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 8002d92:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002d96:	e000      	b.n	8002d9a <SSD1306_Init+0x1e>
		p--;
 8002d98:	3b01      	subs	r3, #1
	while(p>0)
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1fc      	bne.n	8002d98 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002d9e:	22ae      	movs	r2, #174	; 0xae
 8002da0:	2100      	movs	r1, #0
 8002da2:	2078      	movs	r0, #120	; 0x78
 8002da4:	f7ff ffaa 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002da8:	2220      	movs	r2, #32
 8002daa:	2100      	movs	r1, #0
 8002dac:	2078      	movs	r0, #120	; 0x78
 8002dae:	f7ff ffa5 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002db2:	2210      	movs	r2, #16
 8002db4:	2100      	movs	r1, #0
 8002db6:	2078      	movs	r0, #120	; 0x78
 8002db8:	f7ff ffa0 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002dbc:	22b0      	movs	r2, #176	; 0xb0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2078      	movs	r0, #120	; 0x78
 8002dc2:	f7ff ff9b 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002dc6:	22c8      	movs	r2, #200	; 0xc8
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2078      	movs	r0, #120	; 0x78
 8002dcc:	f7ff ff96 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	2078      	movs	r0, #120	; 0x78
 8002dd6:	f7ff ff91 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002dda:	2210      	movs	r2, #16
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2078      	movs	r0, #120	; 0x78
 8002de0:	f7ff ff8c 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	2100      	movs	r1, #0
 8002de8:	2078      	movs	r0, #120	; 0x78
 8002dea:	f7ff ff87 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002dee:	2281      	movs	r2, #129	; 0x81
 8002df0:	2100      	movs	r1, #0
 8002df2:	2078      	movs	r0, #120	; 0x78
 8002df4:	f7ff ff82 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2078      	movs	r0, #120	; 0x78
 8002dfe:	f7ff ff7d 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002e02:	22a1      	movs	r2, #161	; 0xa1
 8002e04:	2100      	movs	r1, #0
 8002e06:	2078      	movs	r0, #120	; 0x78
 8002e08:	f7ff ff78 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002e0c:	22a6      	movs	r2, #166	; 0xa6
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2078      	movs	r0, #120	; 0x78
 8002e12:	f7ff ff73 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002e16:	22a8      	movs	r2, #168	; 0xa8
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2078      	movs	r0, #120	; 0x78
 8002e1c:	f7ff ff6e 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002e20:	223f      	movs	r2, #63	; 0x3f
 8002e22:	2100      	movs	r1, #0
 8002e24:	2078      	movs	r0, #120	; 0x78
 8002e26:	f7ff ff69 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e2a:	22a4      	movs	r2, #164	; 0xa4
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2078      	movs	r0, #120	; 0x78
 8002e30:	f7ff ff64 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002e34:	22d3      	movs	r2, #211	; 0xd3
 8002e36:	2100      	movs	r1, #0
 8002e38:	2078      	movs	r0, #120	; 0x78
 8002e3a:	f7ff ff5f 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002e3e:	2200      	movs	r2, #0
 8002e40:	4611      	mov	r1, r2
 8002e42:	2078      	movs	r0, #120	; 0x78
 8002e44:	f7ff ff5a 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e48:	22d5      	movs	r2, #213	; 0xd5
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	2078      	movs	r0, #120	; 0x78
 8002e4e:	f7ff ff55 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002e52:	22f0      	movs	r2, #240	; 0xf0
 8002e54:	2100      	movs	r1, #0
 8002e56:	2078      	movs	r0, #120	; 0x78
 8002e58:	f7ff ff50 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002e5c:	22d9      	movs	r2, #217	; 0xd9
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2078      	movs	r0, #120	; 0x78
 8002e62:	f7ff ff4b 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002e66:	2222      	movs	r2, #34	; 0x22
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2078      	movs	r0, #120	; 0x78
 8002e6c:	f7ff ff46 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002e70:	22da      	movs	r2, #218	; 0xda
 8002e72:	2100      	movs	r1, #0
 8002e74:	2078      	movs	r0, #120	; 0x78
 8002e76:	f7ff ff41 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002e7a:	2212      	movs	r2, #18
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2078      	movs	r0, #120	; 0x78
 8002e80:	f7ff ff3c 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002e84:	22db      	movs	r2, #219	; 0xdb
 8002e86:	2100      	movs	r1, #0
 8002e88:	2078      	movs	r0, #120	; 0x78
 8002e8a:	f7ff ff37 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002e8e:	2220      	movs	r2, #32
 8002e90:	2100      	movs	r1, #0
 8002e92:	2078      	movs	r0, #120	; 0x78
 8002e94:	f7ff ff32 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002e98:	228d      	movs	r2, #141	; 0x8d
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2078      	movs	r0, #120	; 0x78
 8002e9e:	f7ff ff2d 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002ea2:	2214      	movs	r2, #20
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2078      	movs	r0, #120	; 0x78
 8002ea8:	f7ff ff28 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002eac:	22af      	movs	r2, #175	; 0xaf
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2078      	movs	r0, #120	; 0x78
 8002eb2:	f7ff ff23 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002eb6:	222e      	movs	r2, #46	; 0x2e
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2078      	movs	r0, #120	; 0x78
 8002ebc:	f7ff ff1e 	bl	8002cfc <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7ff fc03 	bl	80026cc <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002ec6:	f7ff ff2d 	bl	8002d24 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SSD1306_Init+0x164>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002ed0:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	7158      	strb	r0, [r3, #5]
}
 8002ed6:	bd08      	pop	{r3, pc}
		return 0;
 8002ed8:	2000      	movs	r0, #0
 8002eda:	e7fc      	b.n	8002ed6 <SSD1306_Init+0x15a>
 8002edc:	20000970 	.word	0x20000970
 8002ee0:	20000b54 	.word	0x20000b54

08002ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ee4:	b500      	push	{lr}
 8002ee6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_MspInit+0x4c>)
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	619a      	str	r2, [r3, #24]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	f002 0201 	and.w	r2, r2, #1
 8002ef8:	9200      	str	r2, [sp, #0]
 8002efa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f02:	61da      	str	r2, [r3, #28]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	210f      	movs	r1, #15
 8002f12:	f06f 0001 	mvn.w	r0, #1
 8002f16:	f000 fd47 	bl	80039a8 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f1a:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <HAL_MspInit+0x50>)
 8002f1c:	6853      	ldr	r3, [r2, #4]
 8002f1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f26:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f28:	b003      	add	sp, #12
 8002f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40010000 	.word	0x40010000

08002f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f38:	b500      	push	{lr}
 8002f3a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9304      	str	r3, [sp, #16]
 8002f40:	9305      	str	r3, [sp, #20]
 8002f42:	9306      	str	r3, [sp, #24]
 8002f44:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002f46:	6803      	ldr	r3, [r0, #0]
 8002f48:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <HAL_ADC_MspInit+0x94>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d005      	beq.n	8002f5a <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002f4e:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <HAL_ADC_MspInit+0x98>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d01e      	beq.n	8002f92 <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f54:	b009      	add	sp, #36	; 0x24
 8002f56:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_ADC_MspInit+0x9c>)
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f62:	619a      	str	r2, [r3, #24]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002f6a:	9200      	str	r2, [sp, #0]
 8002f6c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	f042 0204 	orr.w	r2, r2, #4
 8002f74:	619a      	str	r2, [r3, #24]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f80:	2308      	movs	r3, #8
 8002f82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f84:	2303      	movs	r3, #3
 8002f86:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f88:	a904      	add	r1, sp, #16
 8002f8a:	4813      	ldr	r0, [pc, #76]	; (8002fd8 <HAL_ADC_MspInit+0xa0>)
 8002f8c:	f000 fd52 	bl	8003a34 <HAL_GPIO_Init>
 8002f90:	e7e0      	b.n	8002f54 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_ADC_MspInit+0x9c>)
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f9a:	619a      	str	r2, [r3, #24]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002fa2:	9202      	str	r2, [sp, #8]
 8002fa4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	f042 0204 	orr.w	r2, r2, #4
 8002fac:	619a      	str	r2, [r3, #24]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc0:	a904      	add	r1, sp, #16
 8002fc2:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <HAL_ADC_MspInit+0xa0>)
 8002fc4:	f000 fd36 	bl	8003a34 <HAL_GPIO_Init>
}
 8002fc8:	e7c4      	b.n	8002f54 <HAL_ADC_MspInit+0x1c>
 8002fca:	bf00      	nop
 8002fcc:	40012400 	.word	0x40012400
 8002fd0:	40012800 	.word	0x40012800
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010800 	.word	0x40010800

08002fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	9302      	str	r3, [sp, #8]
 8002fe4:	9303      	str	r3, [sp, #12]
 8002fe6:	9304      	str	r3, [sp, #16]
 8002fe8:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8002fea:	6802      	ldr	r2, [r0, #0]
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_I2C_MspInit+0x58>)
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	4c10      	ldr	r4, [pc, #64]	; (8003038 <HAL_I2C_MspInit+0x5c>)
 8002ff8:	69a3      	ldr	r3, [r4, #24]
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
 8002ffe:	61a3      	str	r3, [r4, #24]
 8003000:	69a3      	ldr	r3, [r4, #24]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800300a:	23c0      	movs	r3, #192	; 0xc0
 800300c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800300e:	2312      	movs	r3, #18
 8003010:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003016:	a902      	add	r1, sp, #8
 8003018:	4808      	ldr	r0, [pc, #32]	; (800303c <HAL_I2C_MspInit+0x60>)
 800301a:	f000 fd0b 	bl	8003a34 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800301e:	69e3      	ldr	r3, [r4, #28]
 8003020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003024:	61e3      	str	r3, [r4, #28]
 8003026:	69e3      	ldr	r3, [r4, #28]
 8003028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	9b01      	ldr	r3, [sp, #4]
}
 8003030:	e7df      	b.n	8002ff2 <HAL_I2C_MspInit+0x16>
 8003032:	bf00      	nop
 8003034:	40005400 	.word	0x40005400
 8003038:	40021000 	.word	0x40021000
 800303c:	40010c00 	.word	0x40010c00

08003040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003040:	b510      	push	{r4, lr}
 8003042:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	2300      	movs	r3, #0
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	9303      	str	r3, [sp, #12]
 800304a:	9304      	str	r3, [sp, #16]
 800304c:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 800304e:	6802      	ldr	r2, [r0, #0]
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_SPI_MspInit+0x6c>)
 8003052:	429a      	cmp	r2, r3
 8003054:	d001      	beq.n	800305a <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003056:	b006      	add	sp, #24
 8003058:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800305a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003064:	619a      	str	r2, [r3, #24]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800306c:	9200      	str	r2, [sp, #0]
 800306e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	f042 0204 	orr.w	r2, r2, #4
 8003076:	619a      	str	r2, [r3, #24]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003082:	23a0      	movs	r3, #160	; 0xa0
 8003084:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003086:	2302      	movs	r3, #2
 8003088:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	4c08      	ldr	r4, [pc, #32]	; (80030b0 <HAL_SPI_MspInit+0x70>)
 8003090:	a902      	add	r1, sp, #8
 8003092:	4620      	mov	r0, r4
 8003094:	f000 fcce 	bl	8003a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003098:	2340      	movs	r3, #64	; 0x40
 800309a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800309c:	2300      	movs	r3, #0
 800309e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a2:	a902      	add	r1, sp, #8
 80030a4:	4620      	mov	r0, r4
 80030a6:	f000 fcc5 	bl	8003a34 <HAL_GPIO_Init>
}
 80030aa:	e7d4      	b.n	8003056 <HAL_SPI_MspInit+0x16>
 80030ac:	40013000 	.word	0x40013000
 80030b0:	40010800 	.word	0x40010800

080030b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030b4:	b500      	push	{lr}
 80030b6:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 80030b8:	6803      	ldr	r3, [r0, #0]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030be:	d005      	beq.n	80030cc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80030c0:	4a12      	ldr	r2, [pc, #72]	; (800310c <HAL_TIM_Base_MspInit+0x58>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030c6:	b003      	add	sp, #12
 80030c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	61da      	str	r2, [r3, #28]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	9b00      	ldr	r3, [sp, #0]
 80030e2:	e7f0      	b.n	80030c6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_TIM_Base_MspInit+0x5c>)
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	f042 0202 	orr.w	r2, r2, #2
 80030ec:	61da      	str	r2, [r3, #28]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2105      	movs	r1, #5
 80030fc:	201d      	movs	r0, #29
 80030fe:	f000 fc53 	bl	80039a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003102:	201d      	movs	r0, #29
 8003104:	f000 fc88 	bl	8003a18 <HAL_NVIC_EnableIRQ>
}
 8003108:	e7dd      	b.n	80030c6 <HAL_TIM_Base_MspInit+0x12>
 800310a:	bf00      	nop
 800310c:	40000400 	.word	0x40000400
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003114:	b500      	push	{lr}
 8003116:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	2300      	movs	r3, #0
 800311a:	9302      	str	r3, [sp, #8]
 800311c:	9303      	str	r3, [sp, #12]
 800311e:	9304      	str	r3, [sp, #16]
 8003120:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8003122:	6803      	ldr	r3, [r0, #0]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d002      	beq.n	8003130 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800312a:	b007      	add	sp, #28
 800312c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003130:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	f042 0204 	orr.w	r2, r2, #4
 800313a:	619a      	str	r2, [r3, #24]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003146:	2301      	movs	r3, #1
 8003148:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	a902      	add	r1, sp, #8
 8003152:	4802      	ldr	r0, [pc, #8]	; (800315c <HAL_TIM_MspPostInit+0x48>)
 8003154:	f000 fc6e 	bl	8003a34 <HAL_GPIO_Init>
}
 8003158:	e7e7      	b.n	800312a <HAL_TIM_MspPostInit+0x16>
 800315a:	bf00      	nop
 800315c:	40010800 	.word	0x40010800

08003160 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003160:	b530      	push	{r4, r5, lr}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_InitTick+0x8c>)
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	f042 0204 	orr.w	r2, r2, #4
 800316e:	61da      	str	r2, [r3, #28]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800317a:	a902      	add	r1, sp, #8
 800317c:	a803      	add	r0, sp, #12
 800317e:	f001 fc9b 	bl	8004ab8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003182:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003184:	b9cb      	cbnz	r3, 80031ba <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003186:	f001 fc77 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 800318a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800318c:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_InitTick+0x90>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0c9b      	lsrs	r3, r3, #18
 8003194:	3b01      	subs	r3, #1

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003196:	4817      	ldr	r0, [pc, #92]	; (80031f4 <HAL_InitTick+0x94>)
 8003198:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <HAL_InitTick+0x98>)
 800319a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800319c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031a0:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80031a2:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a8:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031aa:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80031ac:	f002 fb62 	bl	8005874 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80031b0:	4605      	mov	r5, r0
 80031b2:	b130      	cbz	r0, 80031c2 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 80031b4:	4628      	mov	r0, r5
 80031b6:	b009      	add	sp, #36	; 0x24
 80031b8:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80031ba:	f001 fc5d 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 80031be:	0043      	lsls	r3, r0, #1
 80031c0:	e7e4      	b.n	800318c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 80031c2:	480c      	ldr	r0, [pc, #48]	; (80031f4 <HAL_InitTick+0x94>)
 80031c4:	f002 fa0c 	bl	80055e0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80031c8:	4605      	mov	r5, r0
 80031ca:	2800      	cmp	r0, #0
 80031cc:	d1f2      	bne.n	80031b4 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031ce:	201e      	movs	r0, #30
 80031d0:	f000 fc22 	bl	8003a18 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d4:	2c0f      	cmp	r4, #15
 80031d6:	d901      	bls.n	80031dc <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 80031d8:	2501      	movs	r5, #1
 80031da:	e7eb      	b.n	80031b4 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80031dc:	2200      	movs	r2, #0
 80031de:	4621      	mov	r1, r4
 80031e0:	201e      	movs	r0, #30
 80031e2:	f000 fbe1 	bl	80039a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_InitTick+0x9c>)
 80031e8:	601c      	str	r4, [r3, #0]
 80031ea:	e7e3      	b.n	80031b4 <HAL_InitTick+0x54>
 80031ec:	40021000 	.word	0x40021000
 80031f0:	431bde83 	.word	0x431bde83
 80031f4:	20000f5c 	.word	0x20000f5c
 80031f8:	40000800 	.word	0x40000800
 80031fc:	200007c0 	.word	0x200007c0

08003200 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <NMI_Handler>
	...

08003204 <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    // Leer el registro CFSR para obtener información sobre el fallo
    uint32_t cfsr = SCB->CFSR;
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <HardFault_Handler+0x8>)
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003208:	e7fe      	b.n	8003208 <HardFault_Handler+0x4>
 800320a:	bf00      	nop
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <MemManage_Handler>

08003212 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003212:	e7fe      	b.n	8003212 <BusFault_Handler>

08003214 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003214:	e7fe      	b.n	8003214 <UsageFault_Handler>

08003216 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003216:	4770      	bx	lr

08003218 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003218:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800321a:	4802      	ldr	r0, [pc, #8]	; (8003224 <TIM3_IRQHandler+0xc>)
 800321c:	f002 fa32 	bl	8005684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003220:	bd08      	pop	{r3, pc}
 8003222:	bf00      	nop
 8003224:	20000a64 	.word	0x20000a64

08003228 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003228:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800322a:	4802      	ldr	r0, [pc, #8]	; (8003234 <TIM4_IRQHandler+0xc>)
 800322c:	f002 fa2a 	bl	8005684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003230:	bd08      	pop	{r3, pc}
 8003232:	bf00      	nop
 8003234:	20000f5c 	.word	0x20000f5c

08003238 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003238:	2001      	movs	r0, #1
 800323a:	4770      	bx	lr

0800323c <_kill>:

int _kill(int pid, int sig)
{
 800323c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800323e:	f005 fc49 	bl	8008ad4 <__errno>
 8003242:	2316      	movs	r3, #22
 8003244:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003246:	f04f 30ff 	mov.w	r0, #4294967295
 800324a:	bd08      	pop	{r3, pc}

0800324c <_exit>:

void _exit (int status)
{
 800324c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800324e:	f04f 31ff 	mov.w	r1, #4294967295
 8003252:	f7ff fff3 	bl	800323c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003256:	e7fe      	b.n	8003256 <_exit+0xa>

08003258 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	460c      	mov	r4, r1
 800325c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	2500      	movs	r5, #0
 8003260:	e006      	b.n	8003270 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8003262:	f3af 8000 	nop.w
 8003266:	4621      	mov	r1, r4
 8003268:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800326c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800326e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003270:	42b5      	cmp	r5, r6
 8003272:	dbf6      	blt.n	8003262 <_read+0xa>
  }

  return len;
}
 8003274:	4630      	mov	r0, r6
 8003276:	bd70      	pop	{r4, r5, r6, pc}

08003278 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	460c      	mov	r4, r1
 800327c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327e:	2500      	movs	r5, #0
 8003280:	e004      	b.n	800328c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8003282:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003286:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328a:	3501      	adds	r5, #1
 800328c:	42b5      	cmp	r5, r6
 800328e:	dbf8      	blt.n	8003282 <_write+0xa>
  }
  return len;
}
 8003290:	4630      	mov	r0, r6
 8003292:	bd70      	pop	{r4, r5, r6, pc}

08003294 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	4770      	bx	lr

0800329a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800329a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800329e:	604b      	str	r3, [r1, #4]
  return 0;
}
 80032a0:	2000      	movs	r0, #0
 80032a2:	4770      	bx	lr

080032a4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80032a4:	2001      	movs	r0, #1
 80032a6:	4770      	bx	lr

080032a8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80032a8:	2000      	movs	r0, #0
 80032aa:	4770      	bx	lr

080032ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b0:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <_sbrk+0x38>)
 80032b2:	490d      	ldr	r1, [pc, #52]	; (80032e8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b4:	480d      	ldr	r0, [pc, #52]	; (80032ec <_sbrk+0x40>)
 80032b6:	6800      	ldr	r0, [r0, #0]
 80032b8:	b140      	cbz	r0, 80032cc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ba:	480c      	ldr	r0, [pc, #48]	; (80032ec <_sbrk+0x40>)
 80032bc:	6800      	ldr	r0, [r0, #0]
 80032be:	4403      	add	r3, r0
 80032c0:	1a52      	subs	r2, r2, r1
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d806      	bhi.n	80032d4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <_sbrk+0x40>)
 80032c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80032ca:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80032cc:	4807      	ldr	r0, [pc, #28]	; (80032ec <_sbrk+0x40>)
 80032ce:	4c08      	ldr	r4, [pc, #32]	; (80032f0 <_sbrk+0x44>)
 80032d0:	6004      	str	r4, [r0, #0]
 80032d2:	e7f2      	b.n	80032ba <_sbrk+0xe>
    errno = ENOMEM;
 80032d4:	f005 fbfe 	bl	8008ad4 <__errno>
 80032d8:	230c      	movs	r3, #12
 80032da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	e7f3      	b.n	80032ca <_sbrk+0x1e>
 80032e2:	bf00      	nop
 80032e4:	20005000 	.word	0x20005000
 80032e8:	00000400 	.word	0x00000400
 80032ec:	20000fa4 	.word	0x20000fa4
 80032f0:	20002df0 	.word	0x20002df0

080032f4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032f4:	4770      	bx	lr
	...

080032f8 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80032f8:	f7ff fffc 	bl	80032f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032fc:	480b      	ldr	r0, [pc, #44]	; (800332c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80032fe:	490c      	ldr	r1, [pc, #48]	; (8003330 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003300:	4a0c      	ldr	r2, [pc, #48]	; (8003334 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003304:	e002      	b.n	800330c <LoopCopyDataInit>

08003306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800330a:	3304      	adds	r3, #4

0800330c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800330c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003310:	d3f9      	bcc.n	8003306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003312:	4a09      	ldr	r2, [pc, #36]	; (8003338 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003314:	4c09      	ldr	r4, [pc, #36]	; (800333c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003318:	e001      	b.n	800331e <LoopFillZerobss>

0800331a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800331a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800331c:	3204      	adds	r2, #4

0800331e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003320:	d3fb      	bcc.n	800331a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003322:	f005 fbdd 	bl	8008ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003326:	f7fd ffaf 	bl	8001288 <main>
  bx lr
 800332a:	4770      	bx	lr
  ldr r0, =_sdata
 800332c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003330:	20000824 	.word	0x20000824
  ldr r2, =_sidata
 8003334:	0800a5cc 	.word	0x0800a5cc
  ldr r2, =_sbss
 8003338:	20000824 	.word	0x20000824
  ldr r4, =_ebss
 800333c:	20002df0 	.word	0x20002df0

08003340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <ADC1_2_IRQHandler>
	...

08003344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003344:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_Init+0x20>)
 8003348:	6813      	ldr	r3, [r2, #0]
 800334a:	f043 0310 	orr.w	r3, r3, #16
 800334e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003350:	2003      	movs	r0, #3
 8003352:	f000 fb17 	bl	8003984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003356:	200f      	movs	r0, #15
 8003358:	f7ff ff02 	bl	8003160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800335c:	f7ff fdc2 	bl	8002ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003360:	2000      	movs	r0, #0
 8003362:	bd08      	pop	{r3, pc}
 8003364:	40022000 	.word	0x40022000

08003368 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003368:	4a03      	ldr	r2, [pc, #12]	; (8003378 <HAL_IncTick+0x10>)
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_IncTick+0x14>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	440b      	add	r3, r1
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000fa8 	.word	0x20000fa8
 800337c:	200007bd 	.word	0x200007bd

08003380 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003380:	4b01      	ldr	r3, [pc, #4]	; (8003388 <HAL_GetTick+0x8>)
 8003382:	6818      	ldr	r0, [r3, #0]
}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000fa8 	.word	0x20000fa8

0800338c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff fff6 	bl	8003380 <HAL_GetTick>
 8003394:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003396:	f1b4 3fff 	cmp.w	r4, #4294967295
 800339a:	d002      	beq.n	80033a2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <HAL_Delay+0x24>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a2:	f7ff ffed 	bl	8003380 <HAL_GetTick>
 80033a6:	1b40      	subs	r0, r0, r5
 80033a8:	42a0      	cmp	r0, r4
 80033aa:	d3fa      	bcc.n	80033a2 <HAL_Delay+0x16>
  {
  }
}
 80033ac:	bd38      	pop	{r3, r4, r5, pc}
 80033ae:	bf00      	nop
 80033b0:	200007bd 	.word	0x200007bd

080033b4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b083      	sub	sp, #12
 80033b8:	4605      	mov	r5, r0
 80033ba:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80033c0:	f7ff ffde 	bl	8003380 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80033cc:	d123      	bne.n	8003416 <HAL_ADC_PollForConversion+0x62>
 80033ce:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80033d6:	d103      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80033da:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80033de:	d029      	beq.n	8003434 <HAL_ADC_PollForConversion+0x80>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80033e0:	4b50      	ldr	r3, [pc, #320]	; (8003524 <HAL_ADC_PollForConversion+0x170>)
 80033e2:	681e      	ldr	r6, [r3, #0]
 80033e4:	2002      	movs	r0, #2
 80033e6:	f001 fc11 	bl	8004c0c <HAL_RCCEx_GetPeriphCLKFreq>
 80033ea:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	4a4d      	ldr	r2, [pc, #308]	; (8003528 <HAL_ADC_PollForConversion+0x174>)
 80033f4:	4211      	tst	r1, r2
 80033f6:	d136      	bne.n	8003466 <HAL_ADC_PollForConversion+0xb2>
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80033fe:	4211      	tst	r1, r2
 8003400:	d131      	bne.n	8003466 <HAL_ADC_PollForConversion+0xb2>
 8003402:	6919      	ldr	r1, [r3, #16]
 8003404:	4a49      	ldr	r2, [pc, #292]	; (800352c <HAL_ADC_PollForConversion+0x178>)
 8003406:	4211      	tst	r1, r2
 8003408:	d140      	bne.n	800348c <HAL_ADC_PollForConversion+0xd8>
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	4b48      	ldr	r3, [pc, #288]	; (8003530 <HAL_ADC_PollForConversion+0x17c>)
 800340e:	421a      	tst	r2, r3
 8003410:	d03e      	beq.n	8003490 <HAL_ADC_PollForConversion+0xdc>
 8003412:	2329      	movs	r3, #41	; 0x29
 8003414:	e041      	b.n	800349a <HAL_ADC_PollForConversion+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003416:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003418:	f043 0320 	orr.w	r3, r3, #32
 800341c:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800341e:	2300      	movs	r3, #0
 8003420:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 8003424:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8003426:	b003      	add	sp, #12
 8003428:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f013 0f02 	tst.w	r3, #2
 8003432:	d00f      	beq.n	8003454 <HAL_ADC_PollForConversion+0xa0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f013 0f02 	tst.w	r3, #2
 800343c:	d14f      	bne.n	80034de <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 800343e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003442:	d0f7      	beq.n	8003434 <HAL_ADC_PollForConversion+0x80>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003444:	2c00      	cmp	r4, #0
 8003446:	d0f0      	beq.n	800342a <HAL_ADC_PollForConversion+0x76>
 8003448:	f7ff ff9a 	bl	8003380 <HAL_GetTick>
 800344c:	1bc3      	subs	r3, r0, r7
 800344e:	42a3      	cmp	r3, r4
 8003450:	d9f0      	bls.n	8003434 <HAL_ADC_PollForConversion+0x80>
 8003452:	e7ea      	b.n	800342a <HAL_ADC_PollForConversion+0x76>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003454:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800345c:	2300      	movs	r3, #0
 800345e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 8003462:	2003      	movs	r0, #3
 8003464:	e7df      	b.n	8003426 <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003466:	6919      	ldr	r1, [r3, #16]
 8003468:	4a30      	ldr	r2, [pc, #192]	; (800352c <HAL_ADC_PollForConversion+0x178>)
 800346a:	4211      	tst	r1, r2
 800346c:	d104      	bne.n	8003478 <HAL_ADC_PollForConversion+0xc4>
 800346e:	68d9      	ldr	r1, [r3, #12]
 8003470:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8003474:	4211      	tst	r1, r2
 8003476:	d00d      	beq.n	8003494 <HAL_ADC_PollForConversion+0xe0>
 8003478:	6919      	ldr	r1, [r3, #16]
 800347a:	4a2e      	ldr	r2, [pc, #184]	; (8003534 <HAL_ADC_PollForConversion+0x180>)
 800347c:	400a      	ands	r2, r1
 800347e:	b95a      	cbnz	r2, 8003498 <HAL_ADC_PollForConversion+0xe4>
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <HAL_ADC_PollForConversion+0x180>)
 8003484:	4013      	ands	r3, r2
 8003486:	b15b      	cbz	r3, 80034a0 <HAL_ADC_PollForConversion+0xec>
 8003488:	23fc      	movs	r3, #252	; 0xfc
 800348a:	e006      	b.n	800349a <HAL_ADC_PollForConversion+0xe6>
 800348c:	2329      	movs	r3, #41	; 0x29
 800348e:	e004      	b.n	800349a <HAL_ADC_PollForConversion+0xe6>
 8003490:	2314      	movs	r3, #20
 8003492:	e002      	b.n	800349a <HAL_ADC_PollForConversion+0xe6>
 8003494:	2354      	movs	r3, #84	; 0x54
 8003496:	e000      	b.n	800349a <HAL_ADC_PollForConversion+0xe6>
 8003498:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800349a:	fb03 f606 	mul.w	r6, r3, r6
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800349e:	e007      	b.n	80034b0 <HAL_ADC_PollForConversion+0xfc>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80034a0:	2354      	movs	r3, #84	; 0x54
 80034a2:	e7fa      	b.n	800349a <HAL_ADC_PollForConversion+0xe6>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	42b3      	cmp	r3, r6
 80034a8:	d310      	bcc.n	80034cc <HAL_ADC_PollForConversion+0x118>
      Conversion_Timeout_CPU_cycles ++;
 80034aa:	9b01      	ldr	r3, [sp, #4]
 80034ac:	3301      	adds	r3, #1
 80034ae:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80034b0:	9b01      	ldr	r3, [sp, #4]
 80034b2:	42b3      	cmp	r3, r6
 80034b4:	d213      	bcs.n	80034de <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 80034b6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80034ba:	d0f6      	beq.n	80034aa <HAL_ADC_PollForConversion+0xf6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80034bc:	2c00      	cmp	r4, #0
 80034be:	d0f1      	beq.n	80034a4 <HAL_ADC_PollForConversion+0xf0>
 80034c0:	f7ff ff5e 	bl	8003380 <HAL_GetTick>
 80034c4:	1bc0      	subs	r0, r0, r7
 80034c6:	42a0      	cmp	r0, r4
 80034c8:	d9ef      	bls.n	80034aa <HAL_ADC_PollForConversion+0xf6>
 80034ca:	e7eb      	b.n	80034a4 <HAL_ADC_PollForConversion+0xf0>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80034d4:	2300      	movs	r3, #0
 80034d6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 80034da:	2003      	movs	r0, #3
 80034dc:	e7a3      	b.n	8003426 <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	f06f 0212 	mvn.w	r2, #18
 80034e4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80034e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ec:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034ee:	682b      	ldr	r3, [r5, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034fa:	d001      	beq.n	8003500 <HAL_ADC_PollForConversion+0x14c>
  return HAL_OK;
 80034fc:	2000      	movs	r0, #0
 80034fe:	e792      	b.n	8003426 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003500:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003502:	b960      	cbnz	r0, 800351e <HAL_ADC_PollForConversion+0x16a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003504:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350a:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800350c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800350e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003512:	d188      	bne.n	8003426 <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003514:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	62ab      	str	r3, [r5, #40]	; 0x28
 800351c:	e783      	b.n	8003426 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 800351e:	2000      	movs	r0, #0
 8003520:	e781      	b.n	8003426 <HAL_ADC_PollForConversion+0x72>
 8003522:	bf00      	nop
 8003524:	20000020 	.word	0x20000020
 8003528:	24924924 	.word	0x24924924
 800352c:	12492492 	.word	0x12492492
 8003530:	00492492 	.word	0x00492492
 8003534:	00249249 	.word	0x00249249

08003538 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003538:	6803      	ldr	r3, [r0, #0]
 800353a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800353c:	4770      	bx	lr
	...

08003540 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003540:	b430      	push	{r4, r5}
 8003542:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003544:	2200      	movs	r2, #0
 8003546:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003548:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800354c:	2a01      	cmp	r2, #1
 800354e:	f000 808f 	beq.w	8003670 <HAL_ADC_ConfigChannel+0x130>
 8003552:	4603      	mov	r3, r0
 8003554:	2201      	movs	r2, #1
 8003556:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800355a:	684a      	ldr	r2, [r1, #4]
 800355c:	2a06      	cmp	r2, #6
 800355e:	d82d      	bhi.n	80035bc <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003560:	6804      	ldr	r4, [r0, #0]
 8003562:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003564:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003568:	3a05      	subs	r2, #5
 800356a:	f04f 0c1f 	mov.w	ip, #31
 800356e:	fa0c fc02 	lsl.w	ip, ip, r2
 8003572:	ea20 000c 	bic.w	r0, r0, ip
 8003576:	680d      	ldr	r5, [r1, #0]
 8003578:	fa05 f202 	lsl.w	r2, r5, r2
 800357c:	4302      	orrs	r2, r0
 800357e:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003580:	680a      	ldr	r2, [r1, #0]
 8003582:	2a09      	cmp	r2, #9
 8003584:	d938      	bls.n	80035f8 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003586:	681c      	ldr	r4, [r3, #0]
 8003588:	68e0      	ldr	r0, [r4, #12]
 800358a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800358e:	3a1e      	subs	r2, #30
 8003590:	f04f 0c07 	mov.w	ip, #7
 8003594:	fa0c fc02 	lsl.w	ip, ip, r2
 8003598:	ea20 000c 	bic.w	r0, r0, ip
 800359c:	688d      	ldr	r5, [r1, #8]
 800359e:	fa05 f202 	lsl.w	r2, r5, r2
 80035a2:	4302      	orrs	r2, r0
 80035a4:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035a6:	680a      	ldr	r2, [r1, #0]
 80035a8:	3a10      	subs	r2, #16
 80035aa:	2a01      	cmp	r2, #1
 80035ac:	d934      	bls.n	8003618 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ae:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80035b6:	b002      	add	sp, #8
 80035b8:	bc30      	pop	{r4, r5}
 80035ba:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80035bc:	2a0c      	cmp	r2, #12
 80035be:	d80d      	bhi.n	80035dc <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80035c0:	6805      	ldr	r5, [r0, #0]
 80035c2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80035c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035c8:	3a23      	subs	r2, #35	; 0x23
 80035ca:	241f      	movs	r4, #31
 80035cc:	4094      	lsls	r4, r2
 80035ce:	ea20 0004 	bic.w	r0, r0, r4
 80035d2:	680c      	ldr	r4, [r1, #0]
 80035d4:	4094      	lsls	r4, r2
 80035d6:	4320      	orrs	r0, r4
 80035d8:	6328      	str	r0, [r5, #48]	; 0x30
 80035da:	e7d1      	b.n	8003580 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80035dc:	6805      	ldr	r5, [r0, #0]
 80035de:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80035e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80035e4:	3a41      	subs	r2, #65	; 0x41
 80035e6:	241f      	movs	r4, #31
 80035e8:	4094      	lsls	r4, r2
 80035ea:	ea20 0004 	bic.w	r0, r0, r4
 80035ee:	680c      	ldr	r4, [r1, #0]
 80035f0:	4094      	lsls	r4, r2
 80035f2:	4320      	orrs	r0, r4
 80035f4:	62e8      	str	r0, [r5, #44]	; 0x2c
 80035f6:	e7c3      	b.n	8003580 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035f8:	681c      	ldr	r4, [r3, #0]
 80035fa:	6920      	ldr	r0, [r4, #16]
 80035fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003600:	f04f 0c07 	mov.w	ip, #7
 8003604:	fa0c fc02 	lsl.w	ip, ip, r2
 8003608:	ea20 000c 	bic.w	r0, r0, ip
 800360c:	688d      	ldr	r5, [r1, #8]
 800360e:	fa05 f202 	lsl.w	r2, r5, r2
 8003612:	4302      	orrs	r2, r0
 8003614:	6122      	str	r2, [r4, #16]
 8003616:	e7c6      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4816      	ldr	r0, [pc, #88]	; (8003674 <HAL_ADC_ConfigChannel+0x134>)
 800361c:	4282      	cmp	r2, r0
 800361e:	d005      	beq.n	800362c <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003622:	f042 0220 	orr.w	r2, r2, #32
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8003628:	2001      	movs	r0, #1
 800362a:	e7c1      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800362c:	6890      	ldr	r0, [r2, #8]
 800362e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003632:	d11b      	bne.n	800366c <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003634:	6890      	ldr	r0, [r2, #8]
 8003636:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800363a:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800363c:	680a      	ldr	r2, [r1, #0]
 800363e:	2a10      	cmp	r2, #16
 8003640:	d001      	beq.n	8003646 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003642:	2000      	movs	r0, #0
 8003644:	e7b4      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <HAL_ADC_ConfigChannel+0x138>)
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	490c      	ldr	r1, [pc, #48]	; (800367c <HAL_ADC_ConfigChannel+0x13c>)
 800364c:	fba1 1202 	umull	r1, r2, r1, r2
 8003650:	0c92      	lsrs	r2, r2, #18
 8003652:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003656:	0052      	lsls	r2, r2, #1
 8003658:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800365a:	e002      	b.n	8003662 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 800365c:	9a01      	ldr	r2, [sp, #4]
 800365e:	3a01      	subs	r2, #1
 8003660:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003662:	9a01      	ldr	r2, [sp, #4]
 8003664:	2a00      	cmp	r2, #0
 8003666:	d1f9      	bne.n	800365c <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003668:	2000      	movs	r0, #0
 800366a:	e7a1      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x70>
 800366c:	2000      	movs	r0, #0
 800366e:	e79f      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003670:	2002      	movs	r0, #2
 8003672:	e7a0      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x76>
 8003674:	40012400 	.word	0x40012400
 8003678:	20000020 	.word	0x20000020
 800367c:	431bde83 	.word	0x431bde83

08003680 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003680:	b530      	push	{r4, r5, lr}
 8003682:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003688:	6803      	ldr	r3, [r0, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	f012 0f01 	tst.w	r2, #1
 8003690:	d133      	bne.n	80036fa <ADC_Enable+0x7a>
 8003692:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <ADC_Enable+0x80>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a18      	ldr	r2, [pc, #96]	; (8003704 <ADC_Enable+0x84>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0c9b      	lsrs	r3, r3, #18
 80036a8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80036aa:	e002      	b.n	80036b2 <ADC_Enable+0x32>
    {
      wait_loop_index--;
 80036ac:	9b01      	ldr	r3, [sp, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80036b2:	9b01      	ldr	r3, [sp, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f9      	bne.n	80036ac <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036b8:	f7ff fe62 	bl	8003380 <HAL_GetTick>
 80036bc:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f013 0f01 	tst.w	r3, #1
 80036c6:	d116      	bne.n	80036f6 <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c8:	f7ff fe5a 	bl	8003380 <HAL_GetTick>
 80036cc:	1b43      	subs	r3, r0, r5
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d9f5      	bls.n	80036be <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f013 0f01 	tst.w	r3, #1
 80036da:	d1f0      	bne.n	80036be <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036de:	f043 0310 	orr.w	r3, r3, #16
 80036e2:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	62e3      	str	r3, [r4, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036ec:	2300      	movs	r3, #0
 80036ee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

          return HAL_ERROR;
 80036f2:	2001      	movs	r0, #1
 80036f4:	e002      	b.n	80036fc <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036f6:	2000      	movs	r0, #0
 80036f8:	e000      	b.n	80036fc <ADC_Enable+0x7c>
 80036fa:	2000      	movs	r0, #0
}
 80036fc:	b003      	add	sp, #12
 80036fe:	bd30      	pop	{r4, r5, pc}
 8003700:	20000020 	.word	0x20000020
 8003704:	431bde83 	.word	0x431bde83

08003708 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8003708:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800370c:	2b01      	cmp	r3, #1
 800370e:	d068      	beq.n	80037e2 <HAL_ADC_Start+0xda>
{
 8003710:	b510      	push	{r4, lr}
 8003712:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003714:	2301      	movs	r3, #1
 8003716:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800371a:	f7ff ffb1 	bl	8003680 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800371e:	2800      	cmp	r0, #0
 8003720:	d15b      	bne.n	80037da <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8003722:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003730:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <HAL_ADC_Start+0xe0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d027      	beq.n	800378a <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800373a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800373c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003740:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003748:	d005      	beq.n	8003756 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800374a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800374c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003750:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003754:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003756:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003758:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800375c:	d02b      	beq.n	80037b6 <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800375e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003760:	f022 0206 	bic.w	r2, r2, #6
 8003764:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8003766:	2200      	movs	r2, #0
 8003768:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800376c:	f06f 0202 	mvn.w	r2, #2
 8003770:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800377a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800377e:	d01d      	beq.n	80037bc <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	e02a      	b.n	80037e0 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800378a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800378e:	6852      	ldr	r2, [r2, #4]
 8003790:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8003794:	d0d1      	beq.n	800373a <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003796:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003798:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800379c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <HAL_ADC_Start+0xe4>)
 80037a0:	6852      	ldr	r2, [r2, #4]
 80037a2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80037a6:	d0d6      	beq.n	8003756 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80037ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037b2:	62a2      	str	r2, [r4, #40]	; 0x28
 80037b4:	e7cf      	b.n	8003756 <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 80037b6:	2200      	movs	r2, #0
 80037b8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80037ba:	e7d4      	b.n	8003766 <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037bc:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <HAL_ADC_Start+0xe0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	e009      	b.n	80037e0 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80037cc:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80037d0:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80037d2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80037d6:	d1d3      	bne.n	8003780 <HAL_ADC_Start+0x78>
 80037d8:	e7f3      	b.n	80037c2 <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 80037da:	2300      	movs	r3, #0
 80037dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80037e0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80037e2:	2002      	movs	r0, #2
}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40012800 	.word	0x40012800
 80037ec:	40012400 	.word	0x40012400

080037f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80037f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80037f2:	6803      	ldr	r3, [r0, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	f012 0f01 	tst.w	r2, #1
 80037fa:	d101      	bne.n	8003800 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037fc:	2000      	movs	r0, #0
}
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
 8003800:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800380a:	f7ff fdb9 	bl	8003380 <HAL_GetTick>
 800380e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f013 0f01 	tst.w	r3, #1
 8003818:	d013      	beq.n	8003842 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800381a:	f7ff fdb1 	bl	8003380 <HAL_GetTick>
 800381e:	1b43      	subs	r3, r0, r5
 8003820:	2b02      	cmp	r3, #2
 8003822:	d9f5      	bls.n	8003810 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003824:	6823      	ldr	r3, [r4, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f013 0f01 	tst.w	r3, #1
 800382c:	d0f0      	beq.n	8003810 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003830:	f043 0310 	orr.w	r3, r3, #16
 8003834:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800383e:	2001      	movs	r0, #1
 8003840:	e7dd      	b.n	80037fe <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8003842:	2000      	movs	r0, #0
 8003844:	e7db      	b.n	80037fe <ADC_ConversionStop_Disable+0xe>
	...

08003848 <HAL_ADC_Init>:
  if(hadc == NULL)
 8003848:	2800      	cmp	r0, #0
 800384a:	d07b      	beq.n	8003944 <HAL_ADC_Init+0xfc>
{
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003850:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d04d      	beq.n	80038f2 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003856:	4620      	mov	r0, r4
 8003858:	f7ff ffca 	bl	80037f0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800385c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800385e:	f013 0310 	ands.w	r3, r3, #16
 8003862:	d169      	bne.n	8003938 <HAL_ADC_Init+0xf0>
 8003864:	2800      	cmp	r0, #0
 8003866:	d167      	bne.n	8003938 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8003868:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800386a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800386e:	f022 0202 	bic.w	r2, r2, #2
 8003872:	f042 0202 	orr.w	r2, r2, #2
 8003876:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003878:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800387a:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800387c:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800387e:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003880:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003884:	68a5      	ldr	r5, [r4, #8]
 8003886:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800388a:	d002      	beq.n	8003892 <HAL_ADC_Init+0x4a>
 800388c:	2d01      	cmp	r5, #1
 800388e:	d036      	beq.n	80038fe <HAL_ADC_Init+0xb6>
 8003890:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003892:	7d26      	ldrb	r6, [r4, #20]
 8003894:	2e01      	cmp	r6, #1
 8003896:	d035      	beq.n	8003904 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8003898:	6826      	ldr	r6, [r4, #0]
 800389a:	6871      	ldr	r1, [r6, #4]
 800389c:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80038a0:	4329      	orrs	r1, r5
 80038a2:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80038a4:	6825      	ldr	r5, [r4, #0]
 80038a6:	68ae      	ldr	r6, [r5, #8]
 80038a8:	4927      	ldr	r1, [pc, #156]	; (8003948 <HAL_ADC_Init+0x100>)
 80038aa:	4031      	ands	r1, r6
 80038ac:	4311      	orrs	r1, r2
 80038ae:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80038b0:	68a1      	ldr	r1, [r4, #8]
 80038b2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80038b6:	d001      	beq.n	80038bc <HAL_ADC_Init+0x74>
 80038b8:	2901      	cmp	r1, #1
 80038ba:	d102      	bne.n	80038c2 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	3b01      	subs	r3, #1
 80038c0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80038c2:	6825      	ldr	r5, [r4, #0]
 80038c4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80038c6:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80038ca:	430b      	orrs	r3, r1
 80038cc:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_ADC_Init+0x104>)
 80038d4:	400b      	ands	r3, r1
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d025      	beq.n	8003926 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80038da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038dc:	f023 0312 	bic.w	r3, r3, #18
 80038e0:	f043 0310 	orr.w	r3, r3, #16
 80038e4:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80038ee:	2001      	movs	r0, #1
 80038f0:	e027      	b.n	8003942 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 80038f2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80038f4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80038f8:	f7ff fb1e 	bl	8002f38 <HAL_ADC_MspInit>
 80038fc:	e7ab      	b.n	8003856 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80038fe:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003902:	e7c6      	b.n	8003892 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003904:	b931      	cbnz	r1, 8003914 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003906:	69a1      	ldr	r1, [r4, #24]
 8003908:	3901      	subs	r1, #1
 800390a:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 800390e:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8003912:	e7c1      	b.n	8003898 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003914:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003916:	f041 0120 	orr.w	r1, r1, #32
 800391a:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800391e:	f041 0101 	orr.w	r1, r1, #1
 8003922:	62e1      	str	r1, [r4, #44]	; 0x2c
 8003924:	e7b8      	b.n	8003898 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8003926:	2300      	movs	r3, #0
 8003928:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800392a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800392c:	f023 0303 	bic.w	r3, r3, #3
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	62a3      	str	r3, [r4, #40]	; 0x28
 8003936:	e004      	b.n	8003942 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003938:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800393a:	f043 0310 	orr.w	r3, r3, #16
 800393e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003940:	2001      	movs	r0, #1
}
 8003942:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003944:	2001      	movs	r0, #1
}
 8003946:	4770      	bx	lr
 8003948:	ffe1f7fd 	.word	0xffe1f7fd
 800394c:	ff1f0efe 	.word	0xff1f0efe

08003950 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003950:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003954:	2b01      	cmp	r3, #1
 8003956:	d013      	beq.n	8003980 <HAL_ADC_Stop+0x30>
{
 8003958:	b510      	push	{r4, lr}
 800395a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800395c:	2301      	movs	r3, #1
 800395e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003962:	f7ff ff45 	bl	80037f0 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8003966:	b938      	cbnz	r0, 8003978 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8003968:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800396a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8003978:	2300      	movs	r3, #0
 800397a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800397e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003980:	2002      	movs	r0, #2
}
 8003982:	4770      	bx	lr

08003984 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003984:	4a07      	ldr	r2, [pc, #28]	; (80039a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003986:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003988:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800398c:	041b      	lsls	r3, r3, #16
 800398e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003990:	0200      	lsls	r0, r0, #8
 8003992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003996:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800399c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80039a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_NVIC_SetPriority+0x68>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b2:	f1c3 0c07 	rsb	ip, r3, #7
 80039b6:	f1bc 0f04 	cmp.w	ip, #4
 80039ba:	bf28      	it	cs
 80039bc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c0:	f103 0e04 	add.w	lr, r3, #4
 80039c4:	f1be 0f06 	cmp.w	lr, #6
 80039c8:	d918      	bls.n	80039fc <HAL_NVIC_SetPriority+0x54>
 80039ca:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039cc:	f04f 3eff 	mov.w	lr, #4294967295
 80039d0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80039d4:	ea21 010c 	bic.w	r1, r1, ip
 80039d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039da:	fa0e fe03 	lsl.w	lr, lr, r3
 80039de:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80039e4:	2800      	cmp	r0, #0
 80039e6:	db0b      	blt.n	8003a00 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	0112      	lsls	r2, r2, #4
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80039f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80039f4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80039f8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fc:	2300      	movs	r3, #0
 80039fe:	e7e5      	b.n	80039cc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a00:	f000 000f 	and.w	r0, r0, #15
 8003a04:	0112      	lsls	r2, r2, #4
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <HAL_NVIC_SetPriority+0x6c>)
 8003a0a:	541a      	strb	r2, [r3, r0]
 8003a0c:	e7f4      	b.n	80039f8 <HAL_NVIC_SetPriority+0x50>
 8003a0e:	bf00      	nop
 8003a10:	e000ed00 	.word	0xe000ed00
 8003a14:	e000ed14 	.word	0xe000ed14

08003a18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	db07      	blt.n	8003a2c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1c:	f000 021f 	and.w	r2, r0, #31
 8003a20:	0940      	lsrs	r0, r0, #5
 8003a22:	2301      	movs	r3, #1
 8003a24:	4093      	lsls	r3, r2
 8003a26:	4a02      	ldr	r2, [pc, #8]	; (8003a30 <HAL_NVIC_EnableIRQ+0x18>)
 8003a28:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e100 	.word	0xe000e100

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a38:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8003a3a:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a3c:	e0a6      	b.n	8003b8c <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a3e:	4d80      	ldr	r5, [pc, #512]	; (8003c40 <HAL_GPIO_Init+0x20c>)
 8003a40:	42ab      	cmp	r3, r5
 8003a42:	d010      	beq.n	8003a66 <HAL_GPIO_Init+0x32>
 8003a44:	d907      	bls.n	8003a56 <HAL_GPIO_Init+0x22>
 8003a46:	4d7f      	ldr	r5, [pc, #508]	; (8003c44 <HAL_GPIO_Init+0x210>)
 8003a48:	42ab      	cmp	r3, r5
 8003a4a:	d00c      	beq.n	8003a66 <HAL_GPIO_Init+0x32>
 8003a4c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8003a50:	42ab      	cmp	r3, r5
 8003a52:	d008      	beq.n	8003a66 <HAL_GPIO_Init+0x32>
 8003a54:	e013      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
 8003a56:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003a5a:	42ab      	cmp	r3, r5
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x32>
 8003a5e:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8003a62:	42ab      	cmp	r3, r5
 8003a64:	d107      	bne.n	8003a76 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a66:	688b      	ldr	r3, [r1, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d058      	beq.n	8003b1e <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d051      	beq.n	8003b14 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8003a70:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a72:	2408      	movs	r4, #8
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8003a76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003a7a:	42ab      	cmp	r3, r5
 8003a7c:	d0f3      	beq.n	8003a66 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a7e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8003a82:	d84e      	bhi.n	8003b22 <HAL_GPIO_Init+0xee>
 8003a84:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a86:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8003a8a:	d84c      	bhi.n	8003b26 <HAL_GPIO_Init+0xf2>
 8003a8c:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a90:	6833      	ldr	r3, [r6, #0]
 8003a92:	250f      	movs	r5, #15
 8003a94:	4095      	lsls	r5, r2
 8003a96:	ea23 0305 	bic.w	r3, r3, r5
 8003a9a:	fa04 f202 	lsl.w	r2, r4, r2
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aa2:	684b      	ldr	r3, [r1, #4]
 8003aa4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003aa8:	d06e      	beq.n	8003b88 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003aaa:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <HAL_GPIO_Init+0x214>)
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	619a      	str	r2, [r3, #24]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003abe:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8003ac2:	1c95      	adds	r5, r2, #2
 8003ac4:	4b61      	ldr	r3, [pc, #388]	; (8003c4c <HAL_GPIO_Init+0x218>)
 8003ac6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003aca:	f00c 0503 	and.w	r5, ip, #3
 8003ace:	00ad      	lsls	r5, r5, #2
 8003ad0:	230f      	movs	r3, #15
 8003ad2:	40ab      	lsls	r3, r5
 8003ad4:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ad8:	4b5d      	ldr	r3, [pc, #372]	; (8003c50 <HAL_GPIO_Init+0x21c>)
 8003ada:	4298      	cmp	r0, r3
 8003adc:	d029      	beq.n	8003b32 <HAL_GPIO_Init+0xfe>
 8003ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae2:	4298      	cmp	r0, r3
 8003ae4:	f000 808e 	beq.w	8003c04 <HAL_GPIO_Init+0x1d0>
 8003ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aec:	4298      	cmp	r0, r3
 8003aee:	f000 808b 	beq.w	8003c08 <HAL_GPIO_Init+0x1d4>
 8003af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003af6:	4298      	cmp	r0, r3
 8003af8:	d019      	beq.n	8003b2e <HAL_GPIO_Init+0xfa>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e01a      	b.n	8003b34 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003afe:	68cc      	ldr	r4, [r1, #12]
          break;
 8003b00:	e7bd      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b02:	68cc      	ldr	r4, [r1, #12]
 8003b04:	3404      	adds	r4, #4
          break;
 8003b06:	e7ba      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b08:	68cc      	ldr	r4, [r1, #12]
 8003b0a:	3408      	adds	r4, #8
          break;
 8003b0c:	e7b7      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b0e:	68cc      	ldr	r4, [r1, #12]
 8003b10:	340c      	adds	r4, #12
          break;
 8003b12:	e7b4      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8003b14:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b16:	2408      	movs	r4, #8
 8003b18:	e7b1      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b1a:	2400      	movs	r4, #0
 8003b1c:	e7af      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b1e:	2404      	movs	r4, #4
 8003b20:	e7ad      	b.n	8003a7e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b22:	1d06      	adds	r6, r0, #4
 8003b24:	e7af      	b.n	8003a86 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b26:	f1ac 0208 	sub.w	r2, ip, #8
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	e7b0      	b.n	8003a90 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e000      	b.n	8003b34 <HAL_GPIO_Init+0x100>
 8003b32:	2300      	movs	r3, #0
 8003b34:	40ab      	lsls	r3, r5
 8003b36:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8003b38:	3202      	adds	r2, #2
 8003b3a:	4d44      	ldr	r5, [pc, #272]	; (8003c4c <HAL_GPIO_Init+0x218>)
 8003b3c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b40:	684b      	ldr	r3, [r1, #4]
 8003b42:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003b46:	d061      	beq.n	8003c0c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b48:	4a42      	ldr	r2, [pc, #264]	; (8003c54 <HAL_GPIO_Init+0x220>)
 8003b4a:	6893      	ldr	r3, [r2, #8]
 8003b4c:	ea43 030e 	orr.w	r3, r3, lr
 8003b50:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b52:	684b      	ldr	r3, [r1, #4]
 8003b54:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003b58:	d05e      	beq.n	8003c18 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b5a:	4a3e      	ldr	r2, [pc, #248]	; (8003c54 <HAL_GPIO_Init+0x220>)
 8003b5c:	68d3      	ldr	r3, [r2, #12]
 8003b5e:	ea43 030e 	orr.w	r3, r3, lr
 8003b62:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b64:	684b      	ldr	r3, [r1, #4]
 8003b66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003b6a:	d05b      	beq.n	8003c24 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b6c:	4a39      	ldr	r2, [pc, #228]	; (8003c54 <HAL_GPIO_Init+0x220>)
 8003b6e:	6853      	ldr	r3, [r2, #4]
 8003b70:	ea43 030e 	orr.w	r3, r3, lr
 8003b74:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b76:	684b      	ldr	r3, [r1, #4]
 8003b78:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b7c:	d058      	beq.n	8003c30 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b7e:	4a35      	ldr	r2, [pc, #212]	; (8003c54 <HAL_GPIO_Init+0x220>)
 8003b80:	6813      	ldr	r3, [r2, #0]
 8003b82:	ea43 030e 	orr.w	r3, r3, lr
 8003b86:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8003b88:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b8c:	680b      	ldr	r3, [r1, #0]
 8003b8e:	fa33 f20c 	lsrs.w	r2, r3, ip
 8003b92:	d053      	beq.n	8003c3c <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8003b94:	2201      	movs	r2, #1
 8003b96:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b9a:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8003b9e:	ea32 0303 	bics.w	r3, r2, r3
 8003ba2:	d1f1      	bne.n	8003b88 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8003ba4:	684b      	ldr	r3, [r1, #4]
 8003ba6:	2b12      	cmp	r3, #18
 8003ba8:	f63f af49 	bhi.w	8003a3e <HAL_GPIO_Init+0xa>
 8003bac:	2b12      	cmp	r3, #18
 8003bae:	f63f af66 	bhi.w	8003a7e <HAL_GPIO_Init+0x4a>
 8003bb2:	a501      	add	r5, pc, #4	; (adr r5, 8003bb8 <HAL_GPIO_Init+0x184>)
 8003bb4:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8003bb8:	08003a67 	.word	0x08003a67
 8003bbc:	08003aff 	.word	0x08003aff
 8003bc0:	08003b09 	.word	0x08003b09
 8003bc4:	08003b1b 	.word	0x08003b1b
 8003bc8:	08003a7f 	.word	0x08003a7f
 8003bcc:	08003a7f 	.word	0x08003a7f
 8003bd0:	08003a7f 	.word	0x08003a7f
 8003bd4:	08003a7f 	.word	0x08003a7f
 8003bd8:	08003a7f 	.word	0x08003a7f
 8003bdc:	08003a7f 	.word	0x08003a7f
 8003be0:	08003a7f 	.word	0x08003a7f
 8003be4:	08003a7f 	.word	0x08003a7f
 8003be8:	08003a7f 	.word	0x08003a7f
 8003bec:	08003a7f 	.word	0x08003a7f
 8003bf0:	08003a7f 	.word	0x08003a7f
 8003bf4:	08003a7f 	.word	0x08003a7f
 8003bf8:	08003a7f 	.word	0x08003a7f
 8003bfc:	08003b03 	.word	0x08003b03
 8003c00:	08003b0f 	.word	0x08003b0f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c04:	2301      	movs	r3, #1
 8003c06:	e795      	b.n	8003b34 <HAL_GPIO_Init+0x100>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e793      	b.n	8003b34 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c0c:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <HAL_GPIO_Init+0x220>)
 8003c0e:	6893      	ldr	r3, [r2, #8]
 8003c10:	ea23 030e 	bic.w	r3, r3, lr
 8003c14:	6093      	str	r3, [r2, #8]
 8003c16:	e79c      	b.n	8003b52 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c18:	4a0e      	ldr	r2, [pc, #56]	; (8003c54 <HAL_GPIO_Init+0x220>)
 8003c1a:	68d3      	ldr	r3, [r2, #12]
 8003c1c:	ea23 030e 	bic.w	r3, r3, lr
 8003c20:	60d3      	str	r3, [r2, #12]
 8003c22:	e79f      	b.n	8003b64 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c24:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <HAL_GPIO_Init+0x220>)
 8003c26:	6853      	ldr	r3, [r2, #4]
 8003c28:	ea23 030e 	bic.w	r3, r3, lr
 8003c2c:	6053      	str	r3, [r2, #4]
 8003c2e:	e7a2      	b.n	8003b76 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c30:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_GPIO_Init+0x220>)
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	ea23 030e 	bic.w	r3, r3, lr
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e7a5      	b.n	8003b88 <HAL_GPIO_Init+0x154>
  }
}
 8003c3c:	b002      	add	sp, #8
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}
 8003c40:	10220000 	.word	0x10220000
 8003c44:	10310000 	.word	0x10310000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010800 	.word	0x40010800
 8003c54:	40010400 	.word	0x40010400

08003c58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c58:	6883      	ldr	r3, [r0, #8]
 8003c5a:	4219      	tst	r1, r3
 8003c5c:	d001      	beq.n	8003c62 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003c5e:	2001      	movs	r0, #1
 8003c60:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c62:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003c64:	4770      	bx	lr

08003c66 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c66:	b10a      	cbz	r2, 8003c6c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c68:	6101      	str	r1, [r0, #16]
 8003c6a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c6c:	0409      	lsls	r1, r1, #16
 8003c6e:	6101      	str	r1, [r0, #16]
  }
}
 8003c70:	4770      	bx	lr

08003c72 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c72:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c74:	ea01 0203 	and.w	r2, r1, r3
 8003c78:	ea21 0103 	bic.w	r1, r1, r3
 8003c7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003c80:	6101      	str	r1, [r0, #16]
}
 8003c82:	4770      	bx	lr

08003c84 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c84:	6803      	ldr	r3, [r0, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003c8c:	d101      	bne.n	8003c92 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003c8e:	2000      	movs	r0, #0
}
 8003c90:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c96:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003ca8:	f042 0204 	orr.w	r2, r2, #4
 8003cac:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003cae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	4770      	bx	lr

08003cb6 <I2C_WaitOnFlagUntilTimeout>:
{
 8003cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cba:	4606      	mov	r6, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	4617      	mov	r7, r2
 8003cc0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc2:	e03b      	b.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7ff fb5c 	bl	8003380 <HAL_GetTick>
 8003cc8:	9b06      	ldr	r3, [sp, #24]
 8003cca:	1ac0      	subs	r0, r0, r3
 8003ccc:	4540      	cmp	r0, r8
 8003cce:	d802      	bhi.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x20>
 8003cd0:	f1b8 0f00 	cmp.w	r8, #0
 8003cd4:	d132      	bne.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cd6:	2d01      	cmp	r5, #1
 8003cd8:	d018      	beq.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cda:	6833      	ldr	r3, [r6, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	ea24 0303 	bic.w	r3, r4, r3
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	429f      	cmp	r7, r3
 8003cec:	d126      	bne.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cf8:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cfc:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003cfe:	f042 0220 	orr.w	r2, r2, #32
 8003d02:	6432      	str	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003d04:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_ERROR;
 8003d08:	2001      	movs	r0, #1
 8003d0a:	e027      	b.n	8003d5c <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d0c:	6833      	ldr	r3, [r6, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	ea24 0303 	bic.w	r3, r4, r3
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	e7e5      	b.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d1e:	6833      	ldr	r3, [r6, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	ea24 0c03 	bic.w	ip, r4, r3
 8003d26:	fa1f fc8c 	uxth.w	ip, ip
 8003d2a:	fabc fc8c 	clz	ip, ip
 8003d2e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003d32:	4567      	cmp	r7, ip
 8003d34:	d111      	bne.n	8003d5a <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8003d36:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003d3a:	d1c3      	bne.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d3c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8003d40:	2d01      	cmp	r5, #1
 8003d42:	d0ec      	beq.n	8003d1e <I2C_WaitOnFlagUntilTimeout+0x68>
 8003d44:	6833      	ldr	r3, [r6, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	ea24 0c03 	bic.w	ip, r4, r3
 8003d4c:	fa1f fc8c 	uxth.w	ip, ip
 8003d50:	fabc fc8c 	clz	ip, ip
 8003d54:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003d58:	e7eb      	b.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8003d5a:	2000      	movs	r0, #0
}
 8003d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d64:	4605      	mov	r5, r0
 8003d66:	460e      	mov	r6, r1
 8003d68:	4690      	mov	r8, r2
 8003d6a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d6c:	e053      	b.n	8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d76:	682b      	ldr	r3, [r5, #0]
 8003d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d7c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d82:	2220      	movs	r2, #32
 8003d84:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d8c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003d8e:	f042 0204 	orr.w	r2, r2, #4
 8003d92:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d94:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
 8003d9a:	e04a      	b.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7ff faf0 	bl	8003380 <HAL_GetTick>
 8003da0:	eba0 0009 	sub.w	r0, r0, r9
 8003da4:	4540      	cmp	r0, r8
 8003da6:	d802      	bhi.n	8003dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8003da8:	f1b8 0f00 	cmp.w	r8, #0
 8003dac:	d133      	bne.n	8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dae:	2f01      	cmp	r7, #1
 8003db0:	d017      	beq.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8003db2:	682b      	ldr	r3, [r5, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	ea26 0303 	bic.w	r3, r6, r3
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b00      	subs	r3, #0
 8003dbe:	bf18      	it	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	b343      	cbz	r3, 8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dce:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003dd4:	f042 0220 	orr.w	r2, r2, #32
 8003dd8:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003dda:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003dde:	2001      	movs	r0, #1
 8003de0:	e027      	b.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003de2:	682b      	ldr	r3, [r5, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	ea26 0303 	bic.w	r3, r6, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b00      	subs	r3, #0
 8003dee:	bf18      	it	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	e7e6      	b.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	699c      	ldr	r4, [r3, #24]
 8003df8:	ea26 0404 	bic.w	r4, r6, r4
 8003dfc:	b2a4      	uxth	r4, r4
 8003dfe:	3c00      	subs	r4, #0
 8003e00:	bf18      	it	ne
 8003e02:	2401      	movne	r4, #1
 8003e04:	b1a4      	cbz	r4, 8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e06:	682b      	ldr	r3, [r5, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003e0e:	d1ae      	bne.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003e14:	d1c2      	bne.n	8003d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e16:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8003e1a:	2f01      	cmp	r7, #1
 8003e1c:	d1ea      	bne.n	8003df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	695c      	ldr	r4, [r3, #20]
 8003e22:	ea26 0404 	bic.w	r4, r6, r4
 8003e26:	b2a4      	uxth	r4, r4
 8003e28:	3c00      	subs	r4, #0
 8003e2a:	bf18      	it	ne
 8003e2c:	2401      	movne	r4, #1
 8003e2e:	e7e9      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8003e30:	2000      	movs	r0, #0
}
 8003e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08003e38 <I2C_MasterRequestWrite>:
{
 8003e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	460d      	mov	r5, r1
 8003e40:	4616      	mov	r6, r2
 8003e42:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d00d      	beq.n	8003e66 <I2C_MasterRequestWrite+0x2e>
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d00b      	beq.n	8003e66 <I2C_MasterRequestWrite+0x2e>
 8003e4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e52:	d008      	beq.n	8003e66 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e54:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003e56:	2b12      	cmp	r3, #18
 8003e58:	d10a      	bne.n	8003e70 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5a:	6802      	ldr	r2, [r0, #0]
 8003e5c:	6813      	ldr	r3, [r2, #0]
 8003e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	e004      	b.n	8003e70 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e70:	9700      	str	r7, [sp, #0]
 8003e72:	4633      	mov	r3, r6
 8003e74:	2200      	movs	r2, #0
 8003e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff ff1b 	bl	8003cb6 <I2C_WaitOnFlagUntilTimeout>
 8003e80:	b980      	cbnz	r0, 8003ea4 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e82:	6923      	ldr	r3, [r4, #16]
 8003e84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e88:	d116      	bne.n	8003eb8 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003e90:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e92:	463b      	mov	r3, r7
 8003e94:	4632      	mov	r2, r6
 8003e96:	4913      	ldr	r1, [pc, #76]	; (8003ee4 <I2C_MasterRequestWrite+0xac>)
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff ff61 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e9e:	b9f8      	cbnz	r0, 8003ee0 <I2C_MasterRequestWrite+0xa8>
}
 8003ea0:	b003      	add	sp, #12
 8003ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003eac:	d002      	beq.n	8003eb4 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eb2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003eb4:	2003      	movs	r0, #3
 8003eb6:	e7f3      	b.n	8003ea0 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003eb8:	11eb      	asrs	r3, r5, #7
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	f003 0306 	and.w	r3, r3, #6
 8003ec0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003ec4:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	4632      	mov	r2, r6
 8003eca:	4907      	ldr	r1, [pc, #28]	; (8003ee8 <I2C_MasterRequestWrite+0xb0>)
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f7ff ff47 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed2:	b918      	cbnz	r0, 8003edc <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	b2ed      	uxtb	r5, r5
 8003ed8:	611d      	str	r5, [r3, #16]
 8003eda:	e7da      	b.n	8003e92 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8003edc:	2001      	movs	r0, #1
 8003ede:	e7df      	b.n	8003ea0 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	e7dd      	b.n	8003ea0 <I2C_MasterRequestWrite+0x68>
 8003ee4:	00010002 	.word	0x00010002
 8003ee8:	00010008 	.word	0x00010008

08003eec <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4604      	mov	r4, r0
 8003ef0:	460d      	mov	r5, r1
 8003ef2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003efc:	d121      	bne.n	8003f42 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003efe:	4620      	mov	r0, r4
 8003f00:	f7ff fec0 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003f04:	b9f8      	cbnz	r0, 8003f46 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f0a:	d0f3      	beq.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0c:	f7ff fa38 	bl	8003380 <HAL_GetTick>
 8003f10:	1b80      	subs	r0, r0, r6
 8003f12:	42a8      	cmp	r0, r5
 8003f14:	d801      	bhi.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	d1ec      	bne.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f22:	d1e7      	bne.n	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f34:	f042 0220 	orr.w	r2, r2, #32
 8003f38:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003f3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003f3e:	2001      	movs	r0, #1
 8003f40:	e000      	b.n	8003f44 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8003f42:	2000      	movs	r0, #0
}
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003f46:	2001      	movs	r0, #1
 8003f48:	e7fc      	b.n	8003f44 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08003f4a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003f4a:	b570      	push	{r4, r5, r6, lr}
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	460d      	mov	r5, r1
 8003f50:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	f013 0f04 	tst.w	r3, #4
 8003f5a:	d121      	bne.n	8003fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff fe91 	bl	8003c84 <I2C_IsAcknowledgeFailed>
 8003f62:	b9f8      	cbnz	r0, 8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003f64:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f68:	d0f3      	beq.n	8003f52 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7ff fa09 	bl	8003380 <HAL_GetTick>
 8003f6e:	1b80      	subs	r0, r0, r6
 8003f70:	42a8      	cmp	r0, r5
 8003f72:	d801      	bhi.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	d1ec      	bne.n	8003f52 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f013 0f04 	tst.w	r3, #4
 8003f80:	d1e7      	bne.n	8003f52 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f86:	2220      	movs	r2, #32
 8003f88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f90:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003f98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	e000      	b.n	8003fa2 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8003fa0:	2000      	movs	r0, #0
}
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	e7fc      	b.n	8003fa2 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003fa8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	f000 80cc 	beq.w	8004146 <HAL_I2C_Init+0x19e>
{
 8003fae:	b570      	push	{r4, r5, r6, lr}
 8003fb0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d077      	beq.n	80040aa <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fba:	2324      	movs	r3, #36	; 0x24
 8003fbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	6813      	ldr	r3, [r2, #0]
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	6813      	ldr	r3, [r2, #0]
 8003fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fdc:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fde:	f000 fd4b 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe2:	6862      	ldr	r2, [r4, #4]
 8003fe4:	4b5a      	ldr	r3, [pc, #360]	; (8004150 <HAL_I2C_Init+0x1a8>)
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d864      	bhi.n	80040b4 <HAL_I2C_Init+0x10c>
 8003fea:	4b5a      	ldr	r3, [pc, #360]	; (8004154 <HAL_I2C_Init+0x1ac>)
 8003fec:	4298      	cmp	r0, r3
 8003fee:	bf8c      	ite	hi
 8003ff0:	2300      	movhi	r3, #0
 8003ff2:	2301      	movls	r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 80a8 	bne.w	800414a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8003ffa:	4957      	ldr	r1, [pc, #348]	; (8004158 <HAL_I2C_Init+0x1b0>)
 8003ffc:	fba1 3100 	umull	r3, r1, r1, r0
 8004000:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004002:	6825      	ldr	r5, [r4, #0]
 8004004:	686a      	ldr	r2, [r5, #4]
 8004006:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800400a:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800400e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004010:	6821      	ldr	r1, [r4, #0]
 8004012:	6a0a      	ldr	r2, [r1, #32]
 8004014:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004018:	6866      	ldr	r6, [r4, #4]
 800401a:	4d4d      	ldr	r5, [pc, #308]	; (8004150 <HAL_I2C_Init+0x1a8>)
 800401c:	42ae      	cmp	r6, r5
 800401e:	d84f      	bhi.n	80040c0 <HAL_I2C_Init+0x118>
 8004020:	3301      	adds	r3, #1
 8004022:	4313      	orrs	r3, r2
 8004024:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004026:	6821      	ldr	r1, [r4, #0]
 8004028:	69ca      	ldr	r2, [r1, #28]
 800402a:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 800402e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004032:	6865      	ldr	r5, [r4, #4]
 8004034:	4b46      	ldr	r3, [pc, #280]	; (8004150 <HAL_I2C_Init+0x1a8>)
 8004036:	429d      	cmp	r5, r3
 8004038:	d84c      	bhi.n	80040d4 <HAL_I2C_Init+0x12c>
 800403a:	1e43      	subs	r3, r0, #1
 800403c:	006d      	lsls	r5, r5, #1
 800403e:	fbb3 f3f5 	udiv	r3, r3, r5
 8004042:	3301      	adds	r3, #1
 8004044:	f640 70fc 	movw	r0, #4092	; 0xffc
 8004048:	4203      	tst	r3, r0
 800404a:	d078      	beq.n	800413e <HAL_I2C_Init+0x196>
 800404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004050:	431a      	orrs	r2, r3
 8004052:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004054:	6821      	ldr	r1, [r4, #0]
 8004056:	680b      	ldr	r3, [r1, #0]
 8004058:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800405c:	69e2      	ldr	r2, [r4, #28]
 800405e:	6a20      	ldr	r0, [r4, #32]
 8004060:	4302      	orrs	r2, r0
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004066:	6821      	ldr	r1, [r4, #0]
 8004068:	688b      	ldr	r3, [r1, #8]
 800406a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800406e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004072:	6922      	ldr	r2, [r4, #16]
 8004074:	68e0      	ldr	r0, [r4, #12]
 8004076:	4302      	orrs	r2, r0
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800407c:	6821      	ldr	r1, [r4, #0]
 800407e:	68cb      	ldr	r3, [r1, #12]
 8004080:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004084:	6962      	ldr	r2, [r4, #20]
 8004086:	69a0      	ldr	r0, [r4, #24]
 8004088:	4302      	orrs	r2, r0
 800408a:	4313      	orrs	r3, r2
 800408c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	6813      	ldr	r3, [r2, #0]
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004098:	2000      	movs	r0, #0
 800409a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800409c:	2320      	movs	r3, #32
 800409e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80040aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80040ae:	f7fe ff95 	bl	8002fdc <HAL_I2C_MspInit>
 80040b2:	e782      	b.n	8003fba <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040b4:	4b29      	ldr	r3, [pc, #164]	; (800415c <HAL_I2C_Init+0x1b4>)
 80040b6:	4298      	cmp	r0, r3
 80040b8:	bf8c      	ite	hi
 80040ba:	2300      	movhi	r3, #0
 80040bc:	2301      	movls	r3, #1
 80040be:	e799      	b.n	8003ff4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040c0:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80040c4:	fb05 f303 	mul.w	r3, r5, r3
 80040c8:	4d25      	ldr	r5, [pc, #148]	; (8004160 <HAL_I2C_Init+0x1b8>)
 80040ca:	fba5 5303 	umull	r5, r3, r5, r3
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	3301      	adds	r3, #1
 80040d2:	e7a6      	b.n	8004022 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d4:	68a6      	ldr	r6, [r4, #8]
 80040d6:	b9be      	cbnz	r6, 8004108 <HAL_I2C_Init+0x160>
 80040d8:	1e43      	subs	r3, r0, #1
 80040da:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80040de:	fbb3 f3fc 	udiv	r3, r3, ip
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	bb43      	cbnz	r3, 8004142 <HAL_I2C_Init+0x19a>
 80040f0:	b9c6      	cbnz	r6, 8004124 <HAL_I2C_Init+0x17c>
 80040f2:	1e43      	subs	r3, r0, #1
 80040f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040f8:	fbb3 f3f5 	udiv	r3, r3, r5
 80040fc:	3301      	adds	r3, #1
 80040fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004106:	e7a3      	b.n	8004050 <HAL_I2C_Init+0xa8>
 8004108:	1e43      	subs	r3, r0, #1
 800410a:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 800410e:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8004112:	fbb3 f3fc 	udiv	r3, r3, ip
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	e7e4      	b.n	80040ee <HAL_I2C_Init+0x146>
 8004124:	1e43      	subs	r3, r0, #1
 8004126:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800412a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800412e:	fbb3 f3f5 	udiv	r3, r3, r5
 8004132:	3301      	adds	r3, #1
 8004134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800413c:	e788      	b.n	8004050 <HAL_I2C_Init+0xa8>
 800413e:	2304      	movs	r3, #4
 8004140:	e786      	b.n	8004050 <HAL_I2C_Init+0xa8>
 8004142:	2301      	movs	r3, #1
 8004144:	e784      	b.n	8004050 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8004146:	2001      	movs	r0, #1
}
 8004148:	4770      	bx	lr
    return HAL_ERROR;
 800414a:	2001      	movs	r0, #1
 800414c:	e7ac      	b.n	80040a8 <HAL_I2C_Init+0x100>
 800414e:	bf00      	nop
 8004150:	000186a0 	.word	0x000186a0
 8004154:	001e847f 	.word	0x001e847f
 8004158:	431bde83 	.word	0x431bde83
 800415c:	003d08ff 	.word	0x003d08ff
 8004160:	10624dd3 	.word	0x10624dd3

08004164 <HAL_I2C_Master_Transmit>:
{
 8004164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004168:	b085      	sub	sp, #20
 800416a:	4604      	mov	r4, r0
 800416c:	460f      	mov	r7, r1
 800416e:	4691      	mov	r9, r2
 8004170:	4698      	mov	r8, r3
 8004172:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7ff f904 	bl	8003380 <HAL_GetTick>
 8004178:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800417a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800417e:	b2c0      	uxtb	r0, r0
 8004180:	2820      	cmp	r0, #32
 8004182:	d004      	beq.n	800418e <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8004184:	2702      	movs	r7, #2
}
 8004186:	4638      	mov	r0, r7
 8004188:	b005      	add	sp, #20
 800418a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418e:	9500      	str	r5, [sp, #0]
 8004190:	2319      	movs	r3, #25
 8004192:	2201      	movs	r2, #1
 8004194:	494f      	ldr	r1, [pc, #316]	; (80042d4 <HAL_I2C_Master_Transmit+0x170>)
 8004196:	4620      	mov	r0, r4
 8004198:	f7ff fd8d 	bl	8003cb6 <I2C_WaitOnFlagUntilTimeout>
 800419c:	2800      	cmp	r0, #0
 800419e:	f040 8092 	bne.w	80042c6 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 80041a2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	f000 808f 	beq.w	80042ca <HAL_I2C_Master_Transmit+0x166>
 80041ac:	2301      	movs	r3, #1
 80041ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f012 0f01 	tst.w	r2, #1
 80041ba:	d103      	bne.n	80041c4 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	6813      	ldr	r3, [r2, #0]
 80041c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041cc:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041ce:	2321      	movs	r3, #33	; 0x21
 80041d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041d4:	2310      	movs	r3, #16
 80041d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041da:	2300      	movs	r3, #0
 80041dc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80041de:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041e2:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041e8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ea:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_I2C_Master_Transmit+0x174>)
 80041ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041ee:	462b      	mov	r3, r5
 80041f0:	4632      	mov	r2, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff fe1f 	bl	8003e38 <I2C_MasterRequestWrite>
 80041fa:	4607      	mov	r7, r0
 80041fc:	2800      	cmp	r0, #0
 80041fe:	d166      	bne.n	80042ce <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004200:	2300      	movs	r3, #0
 8004202:	9303      	str	r3, [sp, #12]
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	9203      	str	r2, [sp, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	9303      	str	r3, [sp, #12]
 800420e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8004210:	e011      	b.n	8004236 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004214:	2b04      	cmp	r3, #4
 8004216:	d001      	beq.n	800421c <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8004218:	2701      	movs	r7, #1
 800421a:	e7b4      	b.n	8004186 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	6822      	ldr	r2, [r4, #0]
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e7f7      	b.n	8004218 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004228:	462a      	mov	r2, r5
 800422a:	4631      	mov	r1, r6
 800422c:	4620      	mov	r0, r4
 800422e:	f7ff fe8c 	bl	8003f4a <I2C_WaitOnBTFFlagUntilTimeout>
 8004232:	2800      	cmp	r0, #0
 8004234:	d12e      	bne.n	8004294 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8004236:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	d036      	beq.n	80042aa <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423c:	462a      	mov	r2, r5
 800423e:	4631      	mov	r1, r6
 8004240:	4620      	mov	r0, r4
 8004242:	f7ff fe53 	bl	8003eec <I2C_WaitOnTXEFlagUntilTimeout>
 8004246:	2800      	cmp	r0, #0
 8004248:	d1e3      	bne.n	8004212 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	7812      	ldrb	r2, [r2, #0]
 8004250:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004252:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004254:	1c43      	adds	r3, r0, #1
 8004256:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004258:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800425a:	b289      	uxth	r1, r1
 800425c:	3901      	subs	r1, #1
 800425e:	b289      	uxth	r1, r1
 8004260:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004262:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	6951      	ldr	r1, [r2, #20]
 800426e:	f011 0f04 	tst.w	r1, #4
 8004272:	d0d9      	beq.n	8004228 <HAL_I2C_Master_Transmit+0xc4>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0d7      	beq.n	8004228 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004278:	7843      	ldrb	r3, [r0, #1]
 800427a:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 800427c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800427e:	3301      	adds	r3, #1
 8004280:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004282:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800428c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	8523      	strh	r3, [r4, #40]	; 0x28
 8004292:	e7c9      	b.n	8004228 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004294:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004296:	2b04      	cmp	r3, #4
 8004298:	d001      	beq.n	800429e <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 800429a:	2701      	movs	r7, #1
 800429c:	e773      	b.n	8004186 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	6813      	ldr	r3, [r2, #0]
 80042a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	e7f7      	b.n	800429a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	6813      	ldr	r3, [r2, #0]
 80042ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	2320      	movs	r3, #32
 80042b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80042c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80042c4:	e75f      	b.n	8004186 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80042c6:	2702      	movs	r7, #2
 80042c8:	e75d      	b.n	8004186 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80042ca:	2702      	movs	r7, #2
 80042cc:	e75b      	b.n	8004186 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80042ce:	2701      	movs	r7, #1
 80042d0:	e759      	b.n	8004186 <HAL_I2C_Master_Transmit+0x22>
 80042d2:	bf00      	nop
 80042d4:	00100002 	.word	0x00100002
 80042d8:	ffff0000 	.word	0xffff0000

080042dc <HAL_I2C_IsDeviceReady>:
{
 80042dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042e0:	b085      	sub	sp, #20
 80042e2:	4604      	mov	r4, r0
 80042e4:	4688      	mov	r8, r1
 80042e6:	4691      	mov	r9, r2
 80042e8:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80042ea:	f7ff f849 	bl	8003380 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d003      	beq.n	8004300 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80042f8:	2002      	movs	r0, #2
}
 80042fa:	b005      	add	sp, #20
 80042fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004300:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004302:	9000      	str	r0, [sp, #0]
 8004304:	2319      	movs	r3, #25
 8004306:	2201      	movs	r2, #1
 8004308:	4957      	ldr	r1, [pc, #348]	; (8004468 <HAL_I2C_IsDeviceReady+0x18c>)
 800430a:	4620      	mov	r0, r4
 800430c:	f7ff fcd3 	bl	8003cb6 <I2C_WaitOnFlagUntilTimeout>
 8004310:	2800      	cmp	r0, #0
 8004312:	f040 80a0 	bne.w	8004456 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8004316:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	f000 809d 	beq.w	800445a <HAL_I2C_IsDeviceReady+0x17e>
 8004320:	2301      	movs	r3, #1
 8004322:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	f012 0f01 	tst.w	r2, #1
 800432e:	d103      	bne.n	8004338 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004338:	6822      	ldr	r2, [r4, #0]
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004340:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004342:	2324      	movs	r3, #36	; 0x24
 8004344:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	2700      	movs	r7, #0
 800434a:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800434c:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_I2C_IsDeviceReady+0x190>)
 800434e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004350:	e040      	b.n	80043d4 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f413 7f80 	tst.w	r3, #256	; 0x100
 800435a:	d002      	beq.n	8004362 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800435c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004360:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8004362:	2003      	movs	r0, #3
 8004364:	e7c9      	b.n	80042fa <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004366:	23a0      	movs	r3, #160	; 0xa0
 8004368:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	6953      	ldr	r3, [r2, #20]
 8004370:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004374:	6952      	ldr	r2, [r2, #20]
 8004376:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800437a:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 800437e:	fa5f fc8c 	uxtb.w	ip, ip
 8004382:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8004386:	d009      	beq.n	800439c <HAL_I2C_IsDeviceReady+0xc0>
 8004388:	b943      	cbnz	r3, 800439c <HAL_I2C_IsDeviceReady+0xc0>
 800438a:	b93a      	cbnz	r2, 800439c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800438c:	f7fe fff8 	bl	8003380 <HAL_GetTick>
 8004390:	1b80      	subs	r0, r0, r6
 8004392:	42a8      	cmp	r0, r5
 8004394:	d8e7      	bhi.n	8004366 <HAL_I2C_IsDeviceReady+0x8a>
 8004396:	2d00      	cmp	r5, #0
 8004398:	d1e8      	bne.n	800436c <HAL_I2C_IsDeviceReady+0x90>
 800439a:	e7e4      	b.n	8004366 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 800439c:	2320      	movs	r3, #32
 800439e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	f012 0f02 	tst.w	r2, #2
 80043aa:	d131      	bne.n	8004410 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ba:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043bc:	9600      	str	r6, [sp, #0]
 80043be:	2319      	movs	r3, #25
 80043c0:	2201      	movs	r2, #1
 80043c2:	4929      	ldr	r1, [pc, #164]	; (8004468 <HAL_I2C_IsDeviceReady+0x18c>)
 80043c4:	4620      	mov	r0, r4
 80043c6:	f7ff fc76 	bl	8003cb6 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d149      	bne.n	8004462 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 80043ce:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80043d0:	454f      	cmp	r7, r9
 80043d2:	d238      	bcs.n	8004446 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043dc:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043de:	9600      	str	r6, [sp, #0]
 80043e0:	462b      	mov	r3, r5
 80043e2:	2200      	movs	r2, #0
 80043e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043e8:	4620      	mov	r0, r4
 80043ea:	f7ff fc64 	bl	8003cb6 <I2C_WaitOnFlagUntilTimeout>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	d1af      	bne.n	8004352 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80043f8:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80043fa:	f7fe ffc1 	bl	8003380 <HAL_GetTick>
 80043fe:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	6953      	ldr	r3, [r2, #20]
 8004404:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	6952      	ldr	r2, [r2, #20]
 800440a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800440e:	e7b4      	b.n	800437a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004416:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004418:	2300      	movs	r3, #0
 800441a:	9303      	str	r3, [sp, #12]
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	9203      	str	r2, [sp, #12]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	9303      	str	r3, [sp, #12]
 8004426:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004428:	9600      	str	r6, [sp, #0]
 800442a:	2319      	movs	r3, #25
 800442c:	2201      	movs	r2, #1
 800442e:	490e      	ldr	r1, [pc, #56]	; (8004468 <HAL_I2C_IsDeviceReady+0x18c>)
 8004430:	4620      	mov	r0, r4
 8004432:	f7ff fc40 	bl	8003cb6 <I2C_WaitOnFlagUntilTimeout>
 8004436:	b990      	cbnz	r0, 800445e <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8004438:	2320      	movs	r3, #32
 800443a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800443e:	2300      	movs	r3, #0
 8004440:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8004444:	e759      	b.n	80042fa <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004446:	2320      	movs	r3, #32
 8004448:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800444c:	2300      	movs	r3, #0
 800444e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8004452:	2001      	movs	r0, #1
 8004454:	e751      	b.n	80042fa <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8004456:	2002      	movs	r0, #2
 8004458:	e74f      	b.n	80042fa <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800445a:	2002      	movs	r0, #2
 800445c:	e74d      	b.n	80042fa <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800445e:	2001      	movs	r0, #1
 8004460:	e74b      	b.n	80042fa <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8004462:	2001      	movs	r0, #1
 8004464:	e749      	b.n	80042fa <HAL_I2C_IsDeviceReady+0x1e>
 8004466:	bf00      	nop
 8004468:	00100002 	.word	0x00100002
 800446c:	ffff0000 	.word	0xffff0000

08004470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004470:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <RCC_Delay+0x24>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <RCC_Delay+0x28>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	0a5b      	lsrs	r3, r3, #9
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004484:	bf00      	nop
  }
  while (Delay --);
 8004486:	9b01      	ldr	r3, [sp, #4]
 8004488:	1e5a      	subs	r2, r3, #1
 800448a:	9201      	str	r2, [sp, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f9      	bne.n	8004484 <RCC_Delay+0x14>
}
 8004490:	b002      	add	sp, #8
 8004492:	4770      	bx	lr
 8004494:	20000020 	.word	0x20000020
 8004498:	10624dd3 	.word	0x10624dd3

0800449c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800449c:	2800      	cmp	r0, #0
 800449e:	f000 81f1 	beq.w	8004884 <HAL_RCC_OscConfig+0x3e8>
{
 80044a2:	b570      	push	{r4, r5, r6, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a8:	6803      	ldr	r3, [r0, #0]
 80044aa:	f013 0f01 	tst.w	r3, #1
 80044ae:	d02c      	beq.n	800450a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044b0:	4b99      	ldr	r3, [pc, #612]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d01d      	beq.n	80044f8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044bc:	4b96      	ldr	r3, [pc, #600]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d012      	beq.n	80044ee <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c8:	6863      	ldr	r3, [r4, #4]
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d041      	beq.n	8004554 <HAL_RCC_OscConfig+0xb8>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d155      	bne.n	8004580 <HAL_RCC_OscConfig+0xe4>
 80044d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044d8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e037      	b.n	800455e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044ee:	4b8a      	ldr	r3, [pc, #552]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80044f6:	d0e7      	beq.n	80044c8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	4b87      	ldr	r3, [pc, #540]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004500:	d003      	beq.n	800450a <HAL_RCC_OscConfig+0x6e>
 8004502:	6863      	ldr	r3, [r4, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 81bf 	beq.w	8004888 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	f013 0f02 	tst.w	r3, #2
 8004510:	d075      	beq.n	80045fe <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f013 0f0c 	tst.w	r3, #12
 800451a:	d05f      	beq.n	80045dc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800451c:	4b7e      	ldr	r3, [pc, #504]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f003 030c 	and.w	r3, r3, #12
 8004524:	2b08      	cmp	r3, #8
 8004526:	d054      	beq.n	80045d2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004528:	6923      	ldr	r3, [r4, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 808a 	beq.w	8004644 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8004530:	4b7a      	ldr	r3, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x280>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004536:	f7fe ff23 	bl	8003380 <HAL_GetTick>
 800453a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453c:	4b76      	ldr	r3, [pc, #472]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f013 0f02 	tst.w	r3, #2
 8004544:	d175      	bne.n	8004632 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004546:	f7fe ff1b 	bl	8003380 <HAL_GetTick>
 800454a:	1b40      	subs	r0, r0, r5
 800454c:	2802      	cmp	r0, #2
 800454e:	d9f5      	bls.n	800453c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8004550:	2003      	movs	r0, #3
 8004552:	e19e      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004554:	4a70      	ldr	r2, [pc, #448]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800455e:	6863      	ldr	r3, [r4, #4]
 8004560:	b343      	cbz	r3, 80045b4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8004562:	f7fe ff0d 	bl	8003380 <HAL_GetTick>
 8004566:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004568:	4b6b      	ldr	r3, [pc, #428]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004570:	d1cb      	bne.n	800450a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004572:	f7fe ff05 	bl	8003380 <HAL_GetTick>
 8004576:	1b40      	subs	r0, r0, r5
 8004578:	2864      	cmp	r0, #100	; 0x64
 800457a:	d9f5      	bls.n	8004568 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800457c:	2003      	movs	r0, #3
 800457e:	e188      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004584:	d009      	beq.n	800459a <HAL_RCC_OscConfig+0xfe>
 8004586:	4b64      	ldr	r3, [pc, #400]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e7e1      	b.n	800455e <HAL_RCC_OscConfig+0xc2>
 800459a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800459e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e7d4      	b.n	800455e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80045b4:	f7fe fee4 	bl	8003380 <HAL_GetTick>
 80045b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	4b57      	ldr	r3, [pc, #348]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045c2:	d0a2      	beq.n	800450a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fe fedc 	bl	8003380 <HAL_GetTick>
 80045c8:	1b40      	subs	r0, r0, r5
 80045ca:	2864      	cmp	r0, #100	; 0x64
 80045cc:	d9f5      	bls.n	80045ba <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80045ce:	2003      	movs	r0, #3
 80045d0:	e15f      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045d2:	4b51      	ldr	r3, [pc, #324]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045da:	d1a5      	bne.n	8004528 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045dc:	4b4e      	ldr	r3, [pc, #312]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f013 0f02 	tst.w	r3, #2
 80045e4:	d003      	beq.n	80045ee <HAL_RCC_OscConfig+0x152>
 80045e6:	6923      	ldr	r3, [r4, #16]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 814f 	bne.w	800488c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ee:	4a4a      	ldr	r2, [pc, #296]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80045f0:	6813      	ldr	r3, [r2, #0]
 80045f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045f6:	6961      	ldr	r1, [r4, #20]
 80045f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80045fc:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	f013 0f08 	tst.w	r3, #8
 8004604:	d033      	beq.n	800466e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004606:	69a3      	ldr	r3, [r4, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d05c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 800460c:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCC_OscConfig+0x280>)
 800460e:	2201      	movs	r2, #1
 8004610:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004614:	f7fe feb4 	bl	8003380 <HAL_GetTick>
 8004618:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f013 0f02 	tst.w	r3, #2
 8004622:	d121      	bne.n	8004668 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004624:	f7fe feac 	bl	8003380 <HAL_GetTick>
 8004628:	1b40      	subs	r0, r0, r5
 800462a:	2802      	cmp	r0, #2
 800462c:	d9f5      	bls.n	800461a <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800462e:	2003      	movs	r0, #3
 8004630:	e12f      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4a39      	ldr	r2, [pc, #228]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004634:	6813      	ldr	r3, [r2, #0]
 8004636:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800463a:	6961      	ldr	r1, [r4, #20]
 800463c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e7dc      	b.n	80045fe <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8004644:	4b35      	ldr	r3, [pc, #212]	; (800471c <HAL_RCC_OscConfig+0x280>)
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800464a:	f7fe fe99 	bl	8003380 <HAL_GetTick>
 800464e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f013 0f02 	tst.w	r3, #2
 8004658:	d0d1      	beq.n	80045fe <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465a:	f7fe fe91 	bl	8003380 <HAL_GetTick>
 800465e:	1b40      	subs	r0, r0, r5
 8004660:	2802      	cmp	r0, #2
 8004662:	d9f5      	bls.n	8004650 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8004664:	2003      	movs	r0, #3
 8004666:	e114      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8004668:	2001      	movs	r0, #1
 800466a:	f7ff ff01 	bl	8004470 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	f013 0f04 	tst.w	r3, #4
 8004674:	f000 8096 	beq.w	80047a4 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004680:	d134      	bne.n	80046ec <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	4b25      	ldr	r3, [pc, #148]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800468a:	61da      	str	r2, [r3, #28]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004696:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004698:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_RCC_OscConfig+0x284>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046a0:	d026      	beq.n	80046f0 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a2:	68e3      	ldr	r3, [r4, #12]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d03d      	beq.n	8004724 <HAL_RCC_OscConfig+0x288>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d153      	bne.n	8004754 <HAL_RCC_OscConfig+0x2b8>
 80046ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046b0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	621a      	str	r2, [r3, #32]
 80046bc:	6a1a      	ldr	r2, [r3, #32]
 80046be:	f022 0204 	bic.w	r2, r2, #4
 80046c2:	621a      	str	r2, [r3, #32]
 80046c4:	e033      	b.n	800472e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_RCC_OscConfig+0x280>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80046ce:	f7fe fe57 	bl	8003380 <HAL_GetTick>
 80046d2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d4:	4b10      	ldr	r3, [pc, #64]	; (8004718 <HAL_RCC_OscConfig+0x27c>)
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	f013 0f02 	tst.w	r3, #2
 80046dc:	d0c7      	beq.n	800466e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7fe fe4f 	bl	8003380 <HAL_GetTick>
 80046e2:	1b40      	subs	r0, r0, r5
 80046e4:	2802      	cmp	r0, #2
 80046e6:	d9f5      	bls.n	80046d4 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80046e8:	2003      	movs	r0, #3
 80046ea:	e0d2      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80046ec:	2500      	movs	r5, #0
 80046ee:	e7d3      	b.n	8004698 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f0:	4a0b      	ldr	r2, [pc, #44]	; (8004720 <HAL_RCC_OscConfig+0x284>)
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80046fa:	f7fe fe41 	bl	8003380 <HAL_GetTick>
 80046fe:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004700:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_RCC_OscConfig+0x284>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004708:	d1cb      	bne.n	80046a2 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470a:	f7fe fe39 	bl	8003380 <HAL_GetTick>
 800470e:	1b80      	subs	r0, r0, r6
 8004710:	2864      	cmp	r0, #100	; 0x64
 8004712:	d9f5      	bls.n	8004700 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8004714:	2003      	movs	r0, #3
 8004716:	e0bc      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
 8004718:	40021000 	.word	0x40021000
 800471c:	42420000 	.word	0x42420000
 8004720:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004724:	4a5f      	ldr	r2, [pc, #380]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 8004726:	6a13      	ldr	r3, [r2, #32]
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	b333      	cbz	r3, 8004780 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8004732:	f7fe fe25 	bl	8003380 <HAL_GetTick>
 8004736:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004738:	4b5a      	ldr	r3, [pc, #360]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f013 0f02 	tst.w	r3, #2
 8004740:	d12f      	bne.n	80047a2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fe fe1d 	bl	8003380 <HAL_GetTick>
 8004746:	1b80      	subs	r0, r0, r6
 8004748:	f241 3388 	movw	r3, #5000	; 0x1388
 800474c:	4298      	cmp	r0, r3
 800474e:	d9f3      	bls.n	8004738 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8004750:	2003      	movs	r0, #3
 8004752:	e09e      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004754:	2b05      	cmp	r3, #5
 8004756:	d009      	beq.n	800476c <HAL_RCC_OscConfig+0x2d0>
 8004758:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	621a      	str	r2, [r3, #32]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	f022 0204 	bic.w	r2, r2, #4
 8004768:	621a      	str	r2, [r3, #32]
 800476a:	e7e0      	b.n	800472e <HAL_RCC_OscConfig+0x292>
 800476c:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	f042 0204 	orr.w	r2, r2, #4
 8004774:	621a      	str	r2, [r3, #32]
 8004776:	6a1a      	ldr	r2, [r3, #32]
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	621a      	str	r2, [r3, #32]
 800477e:	e7d6      	b.n	800472e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8004780:	f7fe fdfe 	bl	8003380 <HAL_GetTick>
 8004784:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004786:	4b47      	ldr	r3, [pc, #284]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f013 0f02 	tst.w	r3, #2
 800478e:	d008      	beq.n	80047a2 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fe fdf6 	bl	8003380 <HAL_GetTick>
 8004794:	1b80      	subs	r0, r0, r6
 8004796:	f241 3388 	movw	r3, #5000	; 0x1388
 800479a:	4298      	cmp	r0, r3
 800479c:	d9f3      	bls.n	8004786 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800479e:	2003      	movs	r0, #3
 80047a0:	e077      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80047a2:	b9e5      	cbnz	r5, 80047de <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a4:	69e3      	ldr	r3, [r4, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d072      	beq.n	8004890 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047aa:	4a3e      	ldr	r2, [pc, #248]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 80047ac:	6852      	ldr	r2, [r2, #4]
 80047ae:	f002 020c 	and.w	r2, r2, #12
 80047b2:	2a08      	cmp	r2, #8
 80047b4:	d056      	beq.n	8004864 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d017      	beq.n	80047ea <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80047ba:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <HAL_RCC_OscConfig+0x40c>)
 80047bc:	2200      	movs	r2, #0
 80047be:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80047c0:	f7fe fdde 	bl	8003380 <HAL_GetTick>
 80047c4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047ce:	d047      	beq.n	8004860 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fe fdd6 	bl	8003380 <HAL_GetTick>
 80047d4:	1b00      	subs	r0, r0, r4
 80047d6:	2802      	cmp	r0, #2
 80047d8:	d9f5      	bls.n	80047c6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80047da:	2003      	movs	r0, #3
 80047dc:	e059      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4a31      	ldr	r2, [pc, #196]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 80047e0:	69d3      	ldr	r3, [r2, #28]
 80047e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e6:	61d3      	str	r3, [r2, #28]
 80047e8:	e7dc      	b.n	80047a4 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80047ea:	4b2f      	ldr	r3, [pc, #188]	; (80048a8 <HAL_RCC_OscConfig+0x40c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80047f0:	f7fe fdc6 	bl	8003380 <HAL_GetTick>
 80047f4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f6:	4b2b      	ldr	r3, [pc, #172]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047fe:	d006      	beq.n	800480e <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004800:	f7fe fdbe 	bl	8003380 <HAL_GetTick>
 8004804:	1b40      	subs	r0, r0, r5
 8004806:	2802      	cmp	r0, #2
 8004808:	d9f5      	bls.n	80047f6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800480a:	2003      	movs	r0, #3
 800480c:	e041      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800480e:	6a23      	ldr	r3, [r4, #32]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d01a      	beq.n	800484c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004816:	4923      	ldr	r1, [pc, #140]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 8004818:	684b      	ldr	r3, [r1, #4]
 800481a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800481e:	6a22      	ldr	r2, [r4, #32]
 8004820:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004822:	4302      	orrs	r2, r0
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004828:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <HAL_RCC_OscConfig+0x40c>)
 800482a:	2201      	movs	r2, #1
 800482c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800482e:	f7fe fda7 	bl	8003380 <HAL_GetTick>
 8004832:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004834:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800483c:	d10e      	bne.n	800485c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483e:	f7fe fd9f 	bl	8003380 <HAL_GetTick>
 8004842:	1b00      	subs	r0, r0, r4
 8004844:	2802      	cmp	r0, #2
 8004846:	d9f5      	bls.n	8004834 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8004848:	2003      	movs	r0, #3
 800484a:	e022      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800484c:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 800484e:	6853      	ldr	r3, [r2, #4]
 8004850:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004854:	68a1      	ldr	r1, [r4, #8]
 8004856:	430b      	orrs	r3, r1
 8004858:	6053      	str	r3, [r2, #4]
 800485a:	e7dc      	b.n	8004816 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 800485c:	2000      	movs	r0, #0
 800485e:	e018      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
 8004860:	2000      	movs	r0, #0
 8004862:	e016      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004864:	2b01      	cmp	r3, #1
 8004866:	d016      	beq.n	8004896 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <HAL_RCC_OscConfig+0x408>)
 800486a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004870:	6a22      	ldr	r2, [r4, #32]
 8004872:	4291      	cmp	r1, r2
 8004874:	d111      	bne.n	800489a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004876:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800487a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487c:	4293      	cmp	r3, r2
 800487e:	d10e      	bne.n	800489e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8004880:	2000      	movs	r0, #0
 8004882:	e006      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8004884:	2001      	movs	r0, #1
}
 8004886:	4770      	bx	lr
        return HAL_ERROR;
 8004888:	2001      	movs	r0, #1
 800488a:	e002      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 800488c:	2001      	movs	r0, #1
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8004890:	2000      	movs	r0, #0
}
 8004892:	b002      	add	sp, #8
 8004894:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004896:	2001      	movs	r0, #1
 8004898:	e7fb      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800489a:	2001      	movs	r0, #1
 800489c:	e7f9      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
 800489e:	2001      	movs	r0, #1
 80048a0:	e7f7      	b.n	8004892 <HAL_RCC_OscConfig+0x3f6>
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	42420000 	.word	0x42420000

080048ac <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_RCC_GetSysClockFreq+0x40>)
 80048ae:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80048b0:	f003 020c 	and.w	r2, r3, #12
 80048b4:	2a08      	cmp	r2, #8
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80048b8:	480d      	ldr	r0, [pc, #52]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80048ba:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048bc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80048c0:	490c      	ldr	r1, [pc, #48]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x48>)
 80048c2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80048c8:	d00b      	beq.n	80048e2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_RCC_GetSysClockFreq+0x40>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x4c>)
 80048d4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048d6:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x44>)
 80048d8:	fb02 f000 	mul.w	r0, r2, r0
 80048dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80048e0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048e2:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_RCC_GetSysClockFreq+0x50>)
 80048e4:	fb03 f000 	mul.w	r0, r3, r0
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000
 80048f0:	007a1200 	.word	0x007a1200
 80048f4:	0800a480 	.word	0x0800a480
 80048f8:	0800a490 	.word	0x0800a490
 80048fc:	003d0900 	.word	0x003d0900

08004900 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004900:	2800      	cmp	r0, #0
 8004902:	f000 80a0 	beq.w	8004a46 <HAL_RCC_ClockConfig+0x146>
{
 8004906:	b570      	push	{r4, r5, r6, lr}
 8004908:	460d      	mov	r5, r1
 800490a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b52      	ldr	r3, [pc, #328]	; (8004a58 <HAL_RCC_ClockConfig+0x158>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	428b      	cmp	r3, r1
 8004916:	d20b      	bcs.n	8004930 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004918:	4a4f      	ldr	r2, [pc, #316]	; (8004a58 <HAL_RCC_ClockConfig+0x158>)
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	f023 0307 	bic.w	r3, r3, #7
 8004920:	430b      	orrs	r3, r1
 8004922:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004924:	6813      	ldr	r3, [r2, #0]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	428b      	cmp	r3, r1
 800492c:	f040 808d 	bne.w	8004a4a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f013 0f02 	tst.w	r3, #2
 8004936:	d017      	beq.n	8004968 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	f013 0f04 	tst.w	r3, #4
 800493c:	d004      	beq.n	8004948 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800493e:	4a47      	ldr	r2, [pc, #284]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 8004940:	6853      	ldr	r3, [r2, #4]
 8004942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004946:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004948:	6823      	ldr	r3, [r4, #0]
 800494a:	f013 0f08 	tst.w	r3, #8
 800494e:	d004      	beq.n	800495a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004950:	4a42      	ldr	r2, [pc, #264]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 8004952:	6853      	ldr	r3, [r2, #4]
 8004954:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004958:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495a:	4a40      	ldr	r2, [pc, #256]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 800495c:	6853      	ldr	r3, [r2, #4]
 800495e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004962:	68a1      	ldr	r1, [r4, #8]
 8004964:	430b      	orrs	r3, r1
 8004966:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	f013 0f01 	tst.w	r3, #1
 800496e:	d031      	beq.n	80049d4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004970:	6863      	ldr	r3, [r4, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d020      	beq.n	80049b8 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004976:	2b02      	cmp	r3, #2
 8004978:	d025      	beq.n	80049c6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497a:	4a38      	ldr	r2, [pc, #224]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	f012 0f02 	tst.w	r2, #2
 8004982:	d064      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004984:	4935      	ldr	r1, [pc, #212]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 8004986:	684a      	ldr	r2, [r1, #4]
 8004988:	f022 0203 	bic.w	r2, r2, #3
 800498c:	4313      	orrs	r3, r2
 800498e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004990:	f7fe fcf6 	bl	8003380 <HAL_GetTick>
 8004994:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80049a4:	d016      	beq.n	80049d4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a6:	f7fe fceb 	bl	8003380 <HAL_GetTick>
 80049aa:	1b80      	subs	r0, r0, r6
 80049ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80049b0:	4298      	cmp	r0, r3
 80049b2:	d9f0      	bls.n	8004996 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80049b4:	2003      	movs	r0, #3
 80049b6:	e045      	b.n	8004a44 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b8:	4a28      	ldr	r2, [pc, #160]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80049c0:	d1e0      	bne.n	8004984 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80049c2:	2001      	movs	r0, #1
 80049c4:	e03e      	b.n	8004a44 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	4a25      	ldr	r2, [pc, #148]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80049ce:	d1d9      	bne.n	8004984 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80049d0:	2001      	movs	r0, #1
 80049d2:	e037      	b.n	8004a44 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d4:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_RCC_ClockConfig+0x158>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	42ab      	cmp	r3, r5
 80049de:	d90a      	bls.n	80049f6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e0:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <HAL_RCC_ClockConfig+0x158>)
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	432b      	orrs	r3, r5
 80049ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ec:	6813      	ldr	r3, [r2, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	42ab      	cmp	r3, r5
 80049f4:	d12d      	bne.n	8004a52 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	f013 0f04 	tst.w	r3, #4
 80049fc:	d006      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049fe:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 8004a00:	6853      	ldr	r3, [r2, #4]
 8004a02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a06:	68e1      	ldr	r1, [r4, #12]
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f013 0f08 	tst.w	r3, #8
 8004a12:	d007      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a14:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 8004a16:	6853      	ldr	r3, [r2, #4]
 8004a18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004a1c:	6921      	ldr	r1, [r4, #16]
 8004a1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a22:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a24:	f7ff ff42 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_RCC_ClockConfig+0x15c>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a30:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <HAL_RCC_ClockConfig+0x160>)
 8004a32:	5cd3      	ldrb	r3, [r2, r3]
 8004a34:	40d8      	lsrs	r0, r3
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_RCC_ClockConfig+0x164>)
 8004a38:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCC_ClockConfig+0x168>)
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	f7fe fb8f 	bl	8003160 <HAL_InitTick>
  return HAL_OK;
 8004a42:	2000      	movs	r0, #0
}
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004a46:	2001      	movs	r0, #1
}
 8004a48:	4770      	bx	lr
    return HAL_ERROR;
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	e7fa      	b.n	8004a44 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004a4e:	2001      	movs	r0, #1
 8004a50:	e7f8      	b.n	8004a44 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004a52:	2001      	movs	r0, #1
 8004a54:	e7f6      	b.n	8004a44 <HAL_RCC_ClockConfig+0x144>
 8004a56:	bf00      	nop
 8004a58:	40022000 	.word	0x40022000
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	0800a468 	.word	0x0800a468
 8004a64:	20000020 	.word	0x20000020
 8004a68:	200007c0 	.word	0x200007c0

08004a6c <HAL_RCC_GetHCLKFreq>:
}
 8004a6c:	4b01      	ldr	r3, [pc, #4]	; (8004a74 <HAL_RCC_GetHCLKFreq+0x8>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000020 	.word	0x20000020

08004a78 <HAL_RCC_GetPCLK1Freq>:
{
 8004a78:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a7a:	f7ff fff7 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004a86:	4a03      	ldr	r2, [pc, #12]	; (8004a94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004a88:	5cd3      	ldrb	r3, [r2, r3]
}
 8004a8a:	40d8      	lsrs	r0, r3
 8004a8c:	bd08      	pop	{r3, pc}
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000
 8004a94:	0800a478 	.word	0x0800a478

08004a98 <HAL_RCC_GetPCLK2Freq>:
{
 8004a98:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a9a:	f7ff ffe7 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a9e:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004aa6:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004aa8:	5cd3      	ldrb	r3, [r2, r3]
}
 8004aaa:	40d8      	lsrs	r0, r3
 8004aac:	bd08      	pop	{r3, pc}
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	0800a478 	.word	0x0800a478

08004ab8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ab8:	230f      	movs	r3, #15
 8004aba:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_GetClockConfig+0x34>)
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	f002 0203 	and.w	r2, r2, #3
 8004ac4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004acc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004ad4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	08db      	lsrs	r3, r3, #3
 8004ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ade:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ae0:	4b03      	ldr	r3, [pc, #12]	; (8004af0 <HAL_RCC_GetClockConfig+0x38>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	600b      	str	r3, [r1, #0]
}
 8004aea:	4770      	bx	lr
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40022000 	.word	0x40022000

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004afa:	6803      	ldr	r3, [r0, #0]
 8004afc:	f013 0f01 	tst.w	r3, #1
 8004b00:	d036      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b02:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004b0a:	d149      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0c:	4b3c      	ldr	r3, [pc, #240]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b14:	61da      	str	r2, [r3, #28]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004b20:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b38      	ldr	r3, [pc, #224]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b2a:	d03b      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b2c:	4b34      	ldr	r3, [pc, #208]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b30:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004b34:	d013      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004b36:	6862      	ldr	r2, [r4, #4]
 8004b38:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d00e      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b40:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004b42:	6a13      	ldr	r3, [r2, #32]
 8004b44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b48:	492f      	ldr	r1, [pc, #188]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004b4a:	2601      	movs	r6, #1
 8004b4c:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b50:	2600      	movs	r6, #0
 8004b52:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b56:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b58:	f013 0f01 	tst.w	r3, #1
 8004b5c:	d136      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b5e:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004b60:	6a13      	ldr	r3, [r2, #32]
 8004b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b66:	6861      	ldr	r1, [r4, #4]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b6c:	2d00      	cmp	r5, #0
 8004b6e:	d13e      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	f013 0f02 	tst.w	r3, #2
 8004b76:	d006      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b78:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004b7a:	6853      	ldr	r3, [r2, #4]
 8004b7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004b80:	68a1      	ldr	r1, [r4, #8]
 8004b82:	430b      	orrs	r3, r1
 8004b84:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	f013 0f10 	tst.w	r3, #16
 8004b8c:	d034      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004b90:	6853      	ldr	r3, [r2, #4]
 8004b92:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004b96:	68e1      	ldr	r1, [r4, #12]
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	e02c      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004ba0:	2500      	movs	r5, #0
 8004ba2:	e7be      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba4:	4a17      	ldr	r2, [pc, #92]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004bae:	f7fe fbe7 	bl	8003380 <HAL_GetTick>
 8004bb2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb4:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004bbc:	d1b6      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbe:	f7fe fbdf 	bl	8003380 <HAL_GetTick>
 8004bc2:	1b80      	subs	r0, r0, r6
 8004bc4:	2864      	cmp	r0, #100	; 0x64
 8004bc6:	d9f5      	bls.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004bc8:	2003      	movs	r0, #3
 8004bca:	e016      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8004bcc:	f7fe fbd8 	bl	8003380 <HAL_GetTick>
 8004bd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f013 0f02 	tst.w	r3, #2
 8004bda:	d1c0      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe fbd0 	bl	8003380 <HAL_GetTick>
 8004be0:	1b80      	subs	r0, r0, r6
 8004be2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004be6:	4298      	cmp	r0, r3
 8004be8:	d9f3      	bls.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8004bea:	2003      	movs	r0, #3
 8004bec:	e005      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bee:	69d3      	ldr	r3, [r2, #28]
 8004bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	61d3      	str	r3, [r2, #28]
 8004bf6:	e7bb      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8004bf8:	2000      	movs	r0, #0
}
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd70      	pop	{r4, r5, r6, pc}
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42420000 	.word	0x42420000

08004c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c0c:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004c0e:	2802      	cmp	r0, #2
 8004c10:	d04e      	beq.n	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8004c12:	2810      	cmp	r0, #16
 8004c14:	d003      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8004c16:	2801      	cmp	r0, #1
 8004c18:	d028      	beq.n	8004c6c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8004c1a:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004c1c:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8004c1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004c20:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004c28:	d0f8      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c2a:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004c2e:	4928      	ldr	r1, [pc, #160]	; (8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004c30:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c32:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004c36:	d015      	beq.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c38:	4b24      	ldr	r3, [pc, #144]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004c40:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8004c42:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004c44:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8004c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c4a:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004c4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004c56:	d1e1      	bne.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8004c58:	0040      	lsls	r0, r0, #1
 8004c5a:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8004c5c:	fba3 3000 	umull	r3, r0, r3, r0
 8004c60:	0840      	lsrs	r0, r0, #1
 8004c62:	e7db      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c64:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8004c66:	fb03 f000 	mul.w	r0, r3, r0
 8004c6a:	e7f0      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8004c6c:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004c70:	f240 3202 	movw	r2, #770	; 0x302
 8004c74:	401a      	ands	r2, r3
 8004c76:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004c7a:	d024      	beq.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d004      	beq.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c8a:	d009      	beq.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e7c5      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004c90:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004c92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c94:	f012 0f02 	tst.w	r2, #2
 8004c98:	d0f5      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8004c9a:	f649 4040 	movw	r0, #40000	; 0x9c40
 8004c9e:	e7bd      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004ca8:	d0b8      	beq.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 8004caa:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 8004cae:	e7b5      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004cb0:	f7ff fef2 	bl	8004a98 <HAL_RCC_GetPCLK2Freq>
 8004cb4:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004cc4:	e7aa      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 8004cc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004cca:	e7a7      	b.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	0800a494 	.word	0x0800a494
 8004cd4:	0800a4a4 	.word	0x0800a4a4
 8004cd8:	007a1200 	.word	0x007a1200
 8004cdc:	aaaaaaab 	.word	0xaaaaaaab
 8004ce0:	003d0900 	.word	0x003d0900

08004ce4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	4605      	mov	r5, r0
 8004cec:	4688      	mov	r8, r1
 8004cee:	4617      	mov	r7, r2
 8004cf0:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cf2:	f7fe fb45 	bl	8003380 <HAL_GetTick>
 8004cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf8:	1a1b      	subs	r3, r3, r0
 8004cfa:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8004cfe:	f7fe fb3f 	bl	8003380 <HAL_GetTick>
 8004d02:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d04:	4b2a      	ldr	r3, [pc, #168]	; (8004db0 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004d0c:	fb09 f303 	mul.w	r3, r9, r3
 8004d10:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d12:	682b      	ldr	r3, [r5, #0]
 8004d14:	689c      	ldr	r4, [r3, #8]
 8004d16:	ea38 0404 	bics.w	r4, r8, r4
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	42bb      	cmp	r3, r7
 8004d22:	d040      	beq.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d24:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004d28:	d0f3      	beq.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d2a:	f7fe fb29 	bl	8003380 <HAL_GetTick>
 8004d2e:	eba0 000a 	sub.w	r0, r0, sl
 8004d32:	4548      	cmp	r0, r9
 8004d34:	d20a      	bcs.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x68>
 8004d36:	f1b9 0f00 	cmp.w	r9, #0
 8004d3a:	d007      	beq.n	8004d4c <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d3c:	9a01      	ldr	r2, [sp, #4]
 8004d3e:	b102      	cbz	r2, 8004d42 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8004d40:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	4691      	mov	r9, r2
 8004d4a:	e7e2      	b.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d4c:	682a      	ldr	r2, [r5, #0]
 8004d4e:	6853      	ldr	r3, [r2, #4]
 8004d50:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004d54:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d56:	686b      	ldr	r3, [r5, #4]
 8004d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d5c:	d00b      	beq.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d64:	d014      	beq.n	8004d90 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8004d72:	2003      	movs	r0, #3
 8004d74:	e018      	b.n	8004da8 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d76:	68ab      	ldr	r3, [r5, #8]
 8004d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7c:	d002      	beq.n	8004d84 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	d1ec      	bne.n	8004d5e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004d84:	682a      	ldr	r2, [r5, #0]
 8004d86:	6813      	ldr	r3, [r2, #0]
 8004d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e7e6      	b.n	8004d5e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004d90:	682a      	ldr	r2, [r5, #0]
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	682a      	ldr	r2, [r5, #0]
 8004d9c:	6813      	ldr	r3, [r2, #0]
 8004d9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	e7df      	b.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8004da6:	2000      	movs	r0, #0
}
 8004da8:	b002      	add	sp, #8
 8004daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dae:	bf00      	nop
 8004db0:	20000020 	.word	0x20000020

08004db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b510      	push	{r4, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	4604      	mov	r4, r0
 8004dba:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbc:	9200      	str	r2, [sp, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2180      	movs	r1, #128	; 0x80
 8004dc2:	f7ff ff8f 	bl	8004ce4 <SPI_WaitFlagStateUntilTimeout>
 8004dc6:	b908      	cbnz	r0, 8004dcc <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004dce:	f043 0320 	orr.w	r3, r3, #32
 8004dd2:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8004dd4:	2003      	movs	r0, #3
 8004dd6:	e7f7      	b.n	8004dc8 <SPI_EndRxTxTransaction+0x14>

08004dd8 <SPI_EndRxTransaction>:
{
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	4604      	mov	r4, r0
 8004dde:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de0:	6841      	ldr	r1, [r0, #4]
 8004de2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004de6:	d010      	beq.n	8004e0a <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004de8:	6861      	ldr	r1, [r4, #4]
 8004dea:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004dee:	d103      	bne.n	8004df8 <SPI_EndRxTransaction+0x20>
 8004df0:	68a1      	ldr	r1, [r4, #8]
 8004df2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004df6:	d015      	beq.n	8004e24 <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df8:	9200      	str	r2, [sp, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f7ff ff70 	bl	8004ce4 <SPI_WaitFlagStateUntilTimeout>
 8004e04:	b9e0      	cbnz	r0, 8004e40 <SPI_EndRxTransaction+0x68>
}
 8004e06:	b002      	add	sp, #8
 8004e08:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0a:	6881      	ldr	r1, [r0, #8]
 8004e0c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004e10:	d002      	beq.n	8004e18 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e12:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e16:	d1e7      	bne.n	8004de8 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004e18:	6820      	ldr	r0, [r4, #0]
 8004e1a:	6801      	ldr	r1, [r0, #0]
 8004e1c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004e20:	6001      	str	r1, [r0, #0]
 8004e22:	e7e1      	b.n	8004de8 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e24:	9200      	str	r2, [sp, #0]
 8004e26:	2200      	movs	r2, #0
 8004e28:	2101      	movs	r1, #1
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f7ff ff5a 	bl	8004ce4 <SPI_WaitFlagStateUntilTimeout>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d0e8      	beq.n	8004e06 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e36:	f043 0320 	orr.w	r3, r3, #32
 8004e3a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e3c:	2003      	movs	r0, #3
 8004e3e:	e7e2      	b.n	8004e06 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e42:	f043 0320 	orr.w	r3, r3, #32
 8004e46:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e48:	2003      	movs	r0, #3
 8004e4a:	e7dc      	b.n	8004e06 <SPI_EndRxTransaction+0x2e>

08004e4c <HAL_SPI_Init>:
  if (hspi == NULL)
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d056      	beq.n	8004efe <HAL_SPI_Init+0xb2>
{
 8004e50:	b510      	push	{r4, lr}
 8004e52:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e56:	b933      	cbnz	r3, 8004e66 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e58:	6843      	ldr	r3, [r0, #4]
 8004e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5e:	d005      	beq.n	8004e6c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61c3      	str	r3, [r0, #28]
 8004e64:	e002      	b.n	8004e6c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e66:	2300      	movs	r3, #0
 8004e68:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e6a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e70:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d03c      	beq.n	8004ef2 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004e7e:	6822      	ldr	r2, [r4, #0]
 8004e80:	6813      	ldr	r3, [r2, #0]
 8004e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e86:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e88:	6863      	ldr	r3, [r4, #4]
 8004e8a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004e8e:	68a2      	ldr	r2, [r4, #8]
 8004e90:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8004e94:	4313      	orrs	r3, r2
 8004e96:	68e2      	ldr	r2, [r4, #12]
 8004e98:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	6922      	ldr	r2, [r4, #16]
 8004ea0:	f002 0202 	and.w	r2, r2, #2
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	6962      	ldr	r2, [r4, #20]
 8004ea8:	f002 0201 	and.w	r2, r2, #1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	69a2      	ldr	r2, [r4, #24]
 8004eb0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	69e2      	ldr	r2, [r4, #28]
 8004eb8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	6a22      	ldr	r2, [r4, #32]
 8004ec0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ec8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ecc:	6821      	ldr	r1, [r4, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ed2:	8b63      	ldrh	r3, [r4, #26]
 8004ed4:	6822      	ldr	r2, [r4, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004edc:	6822      	ldr	r2, [r4, #0]
 8004ede:	69d3      	ldr	r3, [r2, #28]
 8004ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004ef0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004ef2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7fe f8a2 	bl	8003040 <HAL_SPI_MspInit>
 8004efc:	e7bc      	b.n	8004e78 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004efe:	2001      	movs	r0, #1
}
 8004f00:	4770      	bx	lr

08004f02 <HAL_SPI_Transmit>:
{
 8004f02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f06:	b083      	sub	sp, #12
 8004f08:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004f0a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	f000 80d1 	beq.w	80050b6 <HAL_SPI_Transmit+0x1b4>
 8004f14:	4604      	mov	r4, r0
 8004f16:	4688      	mov	r8, r1
 8004f18:	4691      	mov	r9, r2
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004f20:	f7fe fa2e 	bl	8003380 <HAL_GetTick>
 8004f24:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004f26:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8004f2a:	b2f6      	uxtb	r6, r6
 8004f2c:	2e01      	cmp	r6, #1
 8004f2e:	f040 80ba 	bne.w	80050a6 <HAL_SPI_Transmit+0x1a4>
  if ((pData == NULL) || (Size == 0U))
 8004f32:	f1b8 0f00 	cmp.w	r8, #0
 8004f36:	f000 80b7 	beq.w	80050a8 <HAL_SPI_Transmit+0x1a6>
 8004f3a:	f1b9 0f00 	cmp.w	r9, #0
 8004f3e:	f000 80b3 	beq.w	80050a8 <HAL_SPI_Transmit+0x1a6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f42:	2303      	movs	r3, #3
 8004f44:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f4c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f50:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f54:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f58:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f5a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f5e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f60:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f62:	68a3      	ldr	r3, [r4, #8]
 8004f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f68:	d01e      	beq.n	8004fa8 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004f72:	d103      	bne.n	8004f7c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f7a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f7c:	68e3      	ldr	r3, [r4, #12]
 8004f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f82:	d01c      	beq.n	8004fbe <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f84:	6863      	ldr	r3, [r4, #4]
 8004f86:	b113      	cbz	r3, 8004f8e <HAL_SPI_Transmit+0x8c>
 8004f88:	f1b9 0f01 	cmp.w	r9, #1
 8004f8c:	d155      	bne.n	800503a <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f8e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	7812      	ldrb	r2, [r2, #0]
 8004f94:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f98:	3301      	adds	r3, #1
 8004f9a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004fa6:	e048      	b.n	800503a <HAL_SPI_Transmit+0x138>
    __HAL_SPI_DISABLE(hspi);
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	6813      	ldr	r3, [r2, #0]
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb0:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	6813      	ldr	r3, [r2, #0]
 8004fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	e7d5      	b.n	8004f6a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	b113      	cbz	r3, 8004fc8 <HAL_SPI_Transmit+0xc6>
 8004fc2:	f1b9 0f01 	cmp.w	r9, #1
 8004fc6:	d115      	bne.n	8004ff4 <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004fd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004fe0:	e008      	b.n	8004ff4 <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe2:	f7fe f9cd 	bl	8003380 <HAL_GetTick>
 8004fe6:	1bc0      	subs	r0, r0, r7
 8004fe8:	42a8      	cmp	r0, r5
 8004fea:	d302      	bcc.n	8004ff2 <HAL_SPI_Transmit+0xf0>
 8004fec:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ff0:	d115      	bne.n	800501e <HAL_SPI_Transmit+0x11c>
 8004ff2:	b1a5      	cbz	r5, 800501e <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8004ff4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d03c      	beq.n	8005076 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	f012 0f02 	tst.w	r2, #2
 8005004:	d0ed      	beq.n	8004fe2 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005006:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005008:	8812      	ldrh	r2, [r2, #0]
 800500a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800500c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800500e:	3302      	adds	r3, #2
 8005010:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800501c:	e7ea      	b.n	8004ff4 <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 800501e:	2301      	movs	r3, #1
 8005020:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8005024:	2603      	movs	r6, #3
          goto error;
 8005026:	e03f      	b.n	80050a8 <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005028:	f7fe f9aa 	bl	8003380 <HAL_GetTick>
 800502c:	1bc0      	subs	r0, r0, r7
 800502e:	42a8      	cmp	r0, r5
 8005030:	d302      	bcc.n	8005038 <HAL_SPI_Transmit+0x136>
 8005032:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005036:	d119      	bne.n	800506c <HAL_SPI_Transmit+0x16a>
 8005038:	b1c5      	cbz	r5, 800506c <HAL_SPI_Transmit+0x16a>
    while (hspi->TxXferCount > 0U)
 800503a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800503c:	b29b      	uxth	r3, r3
 800503e:	b1d3      	cbz	r3, 8005076 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	f012 0f02 	tst.w	r2, #2
 8005048:	d0ee      	beq.n	8005028 <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800504a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800504c:	7812      	ldrb	r2, [r2, #0]
 800504e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005050:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005052:	3301      	adds	r3, #1
 8005054:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005056:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 800505a:	fa1f fc8c 	uxth.w	ip, ip
 800505e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005062:	fa1f fc8c 	uxth.w	ip, ip
 8005066:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 800506a:	e7e6      	b.n	800503a <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 800506c:	2301      	movs	r3, #1
 800506e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8005072:	2603      	movs	r6, #3
          goto error;
 8005074:	e018      	b.n	80050a8 <HAL_SPI_Transmit+0x1a6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005076:	463a      	mov	r2, r7
 8005078:	4629      	mov	r1, r5
 800507a:	4620      	mov	r0, r4
 800507c:	f7ff fe9a 	bl	8004db4 <SPI_EndRxTxTransaction>
 8005080:	b108      	cbz	r0, 8005086 <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005082:	2320      	movs	r3, #32
 8005084:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005086:	68a3      	ldr	r3, [r4, #8]
 8005088:	b933      	cbnz	r3, 8005098 <HAL_SPI_Transmit+0x196>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	9201      	str	r2, [sp, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005098:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800509a:	b92b      	cbnz	r3, 80050a8 <HAL_SPI_Transmit+0x1a6>
    hspi->State = HAL_SPI_STATE_READY;
 800509c:	2301      	movs	r3, #1
 800509e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050a2:	2600      	movs	r6, #0
 80050a4:	e000      	b.n	80050a8 <HAL_SPI_Transmit+0x1a6>
    errorcode = HAL_BUSY;
 80050a6:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80050a8:	2300      	movs	r3, #0
 80050aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80050ae:	4630      	mov	r0, r6
 80050b0:	b003      	add	sp, #12
 80050b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80050b6:	2602      	movs	r6, #2
 80050b8:	e7f9      	b.n	80050ae <HAL_SPI_Transmit+0x1ac>

080050ba <HAL_SPI_TransmitReceive>:
{
 80050ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050be:	b083      	sub	sp, #12
 80050c0:	461f      	mov	r7, r3
 80050c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80050c4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	f000 8116 	beq.w	80052fa <HAL_SPI_TransmitReceive+0x240>
 80050ce:	4604      	mov	r4, r0
 80050d0:	4688      	mov	r8, r1
 80050d2:	4691      	mov	r9, r2
 80050d4:	2301      	movs	r3, #1
 80050d6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80050da:	f7fe f951 	bl	8003380 <HAL_GetTick>
 80050de:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80050e0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80050e4:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80050e6:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d00a      	beq.n	8005102 <HAL_SPI_TransmitReceive+0x48>
 80050ec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80050f0:	f040 80f0 	bne.w	80052d4 <HAL_SPI_TransmitReceive+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050f4:	68a2      	ldr	r2, [r4, #8]
 80050f6:	2a00      	cmp	r2, #0
 80050f8:	f040 80f3 	bne.w	80052e2 <HAL_SPI_TransmitReceive+0x228>
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	f040 80f2 	bne.w	80052e6 <HAL_SPI_TransmitReceive+0x22c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005102:	f1b8 0f00 	cmp.w	r8, #0
 8005106:	f000 80f0 	beq.w	80052ea <HAL_SPI_TransmitReceive+0x230>
 800510a:	f1b9 0f00 	cmp.w	r9, #0
 800510e:	f000 80ee 	beq.w	80052ee <HAL_SPI_TransmitReceive+0x234>
 8005112:	2f00      	cmp	r7, #0
 8005114:	f000 80ed 	beq.w	80052f2 <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005118:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b04      	cmp	r3, #4
 8005120:	d002      	beq.n	8005128 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005122:	2305      	movs	r3, #5
 8005124:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005128:	2300      	movs	r3, #0
 800512a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800512c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005130:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005132:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005134:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005138:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800513a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800513c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800513e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005148:	d103      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005150:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005158:	d011      	beq.n	800517e <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	b10b      	cbz	r3, 8005162 <HAL_SPI_TransmitReceive+0xa8>
 800515e:	2f01      	cmp	r7, #1
 8005160:	d10b      	bne.n	800517a <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005162:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800516a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800516c:	3301      	adds	r3, #1
 800516e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005170:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29b      	uxth	r3, r3
 8005178:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800517a:	2701      	movs	r7, #1
 800517c:	e06e      	b.n	800525c <HAL_SPI_TransmitReceive+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800517e:	6863      	ldr	r3, [r4, #4]
 8005180:	b10b      	cbz	r3, 8005186 <HAL_SPI_TransmitReceive+0xcc>
 8005182:	2f01      	cmp	r7, #1
 8005184:	d10b      	bne.n	800519e <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005186:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	8812      	ldrh	r2, [r2, #0]
 800518c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800518e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005190:	3302      	adds	r3, #2
 8005192:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005194:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800519e:	2701      	movs	r7, #1
 80051a0:	e01b      	b.n	80051da <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	f012 0f01 	tst.w	r2, #1
 80051aa:	d00e      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x110>
 80051ac:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80051ae:	b292      	uxth	r2, r2
 80051b0:	b15a      	cbz	r2, 80051ca <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051ba:	3302      	adds	r3, #2
 80051bc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80051be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80051c8:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051ca:	f7fe f8d9 	bl	8003380 <HAL_GetTick>
 80051ce:	1b80      	subs	r0, r0, r6
 80051d0:	42a8      	cmp	r0, r5
 80051d2:	d302      	bcc.n	80051da <HAL_SPI_TransmitReceive+0x120>
 80051d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80051d8:	d11e      	bne.n	8005218 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	b91b      	cbnz	r3, 80051e8 <HAL_SPI_TransmitReceive+0x12e>
 80051e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d05c      	beq.n	80052a2 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	f012 0f02 	tst.w	r2, #2
 80051f0:	d0d7      	beq.n	80051a2 <HAL_SPI_TransmitReceive+0xe8>
 80051f2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80051f4:	b292      	uxth	r2, r2
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	d0d3      	beq.n	80051a2 <HAL_SPI_TransmitReceive+0xe8>
 80051fa:	2f00      	cmp	r7, #0
 80051fc:	d0d1      	beq.n	80051a2 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005200:	8812      	ldrh	r2, [r2, #0]
 8005202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005204:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005206:	3302      	adds	r3, #2
 8005208:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800520a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29b      	uxth	r3, r3
 8005212:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005214:	2700      	movs	r7, #0
 8005216:	e7c4      	b.n	80051a2 <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8005218:	2301      	movs	r3, #1
 800521a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 800521e:	2003      	movs	r0, #3
        goto error;
 8005220:	e059      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	f012 0f01 	tst.w	r2, #1
 800522a:	d00e      	beq.n	800524a <HAL_SPI_TransmitReceive+0x190>
 800522c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800522e:	b292      	uxth	r2, r2
 8005230:	b15a      	cbz	r2, 800524a <HAL_SPI_TransmitReceive+0x190>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005236:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800523a:	3301      	adds	r3, #1
 800523c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800523e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29b      	uxth	r3, r3
 8005246:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005248:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800524a:	f7fe f899 	bl	8003380 <HAL_GetTick>
 800524e:	1b83      	subs	r3, r0, r6
 8005250:	42ab      	cmp	r3, r5
 8005252:	d302      	bcc.n	800525a <HAL_SPI_TransmitReceive+0x1a0>
 8005254:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005258:	d11e      	bne.n	8005298 <HAL_SPI_TransmitReceive+0x1de>
 800525a:	b1ed      	cbz	r5, 8005298 <HAL_SPI_TransmitReceive+0x1de>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800525c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	b913      	cbnz	r3, 8005268 <HAL_SPI_TransmitReceive+0x1ae>
 8005262:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	b1e3      	cbz	r3, 80052a2 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	f012 0f02 	tst.w	r2, #2
 8005270:	d0d7      	beq.n	8005222 <HAL_SPI_TransmitReceive+0x168>
 8005272:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005274:	b292      	uxth	r2, r2
 8005276:	2a00      	cmp	r2, #0
 8005278:	d0d3      	beq.n	8005222 <HAL_SPI_TransmitReceive+0x168>
 800527a:	2f00      	cmp	r7, #0
 800527c:	d0d1      	beq.n	8005222 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800527e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005280:	7812      	ldrb	r2, [r2, #0]
 8005282:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005284:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005286:	3301      	adds	r3, #1
 8005288:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800528a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29b      	uxth	r3, r3
 8005292:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005294:	2700      	movs	r7, #0
 8005296:	e7c4      	b.n	8005222 <HAL_SPI_TransmitReceive+0x168>
        hspi->State = HAL_SPI_STATE_READY;
 8005298:	2301      	movs	r3, #1
 800529a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 800529e:	2003      	movs	r0, #3
        goto error;
 80052a0:	e019      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a2:	4632      	mov	r2, r6
 80052a4:	4629      	mov	r1, r5
 80052a6:	4620      	mov	r0, r4
 80052a8:	f7ff fd84 	bl	8004db4 <SPI_EndRxTxTransaction>
 80052ac:	b970      	cbnz	r0, 80052cc <HAL_SPI_TransmitReceive+0x212>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ae:	68a3      	ldr	r3, [r4, #8]
 80052b0:	b933      	cbnz	r3, 80052c0 <HAL_SPI_TransmitReceive+0x206>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	9201      	str	r2, [sp, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052c2:	b9c3      	cbnz	r3, 80052f6 <HAL_SPI_TransmitReceive+0x23c>
    hspi->State = HAL_SPI_STATE_READY;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80052ca:	e004      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052cc:	2320      	movs	r3, #32
 80052ce:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80052d0:	2001      	movs	r0, #1
    goto error;
 80052d2:	e000      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_BUSY;
 80052d4:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80052d6:	2300      	movs	r3, #0
 80052d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80052dc:	b003      	add	sp, #12
 80052de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80052e2:	2002      	movs	r0, #2
 80052e4:	e7f7      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
 80052e6:	2002      	movs	r0, #2
 80052e8:	e7f5      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 80052ea:	2001      	movs	r0, #1
 80052ec:	e7f3      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
 80052ee:	2001      	movs	r0, #1
 80052f0:	e7f1      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
 80052f2:	2001      	movs	r0, #1
 80052f4:	e7ef      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 80052f6:	2001      	movs	r0, #1
 80052f8:	e7ed      	b.n	80052d6 <HAL_SPI_TransmitReceive+0x21c>
  __HAL_LOCK(hspi);
 80052fa:	2002      	movs	r0, #2
 80052fc:	e7ee      	b.n	80052dc <HAL_SPI_TransmitReceive+0x222>

080052fe <HAL_SPI_Receive>:
{
 80052fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005302:	b083      	sub	sp, #12
 8005304:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005306:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
 800530a:	b2f6      	uxtb	r6, r6
 800530c:	2e01      	cmp	r6, #1
 800530e:	f040 80ab 	bne.w	8005468 <HAL_SPI_Receive+0x16a>
 8005312:	4688      	mov	r8, r1
 8005314:	4691      	mov	r9, r2
 8005316:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005318:	6843      	ldr	r3, [r0, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800531e:	d032      	beq.n	8005386 <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8005320:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005324:	2b01      	cmp	r3, #1
 8005326:	f000 80a7 	beq.w	8005478 <HAL_SPI_Receive+0x17a>
 800532a:	2301      	movs	r3, #1
 800532c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005330:	f7fe f826 	bl	8003380 <HAL_GetTick>
 8005334:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8005336:	f1b8 0f00 	cmp.w	r8, #0
 800533a:	f000 8096 	beq.w	800546a <HAL_SPI_Receive+0x16c>
 800533e:	f1b9 0f00 	cmp.w	r9, #0
 8005342:	f000 8092 	beq.w	800546a <HAL_SPI_Receive+0x16c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005346:	2304      	movs	r3, #4
 8005348:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534c:	2300      	movs	r3, #0
 800534e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005350:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005354:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005358:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800535c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800535e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005360:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005362:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005364:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005366:	68a3      	ldr	r3, [r4, #8]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536c:	d018      	beq.n	80053a0 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005376:	d103      	bne.n	8005380 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800537e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005380:	68e3      	ldr	r3, [r4, #12]
 8005382:	b30b      	cbz	r3, 80053c8 <HAL_SPI_Receive+0xca>
 8005384:	e043      	b.n	800540e <HAL_SPI_Receive+0x110>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005386:	6883      	ldr	r3, [r0, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1c9      	bne.n	8005320 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800538c:	2304      	movs	r3, #4
 800538e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005392:	9500      	str	r5, [sp, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	460a      	mov	r2, r1
 8005398:	f7ff fe8f 	bl	80050ba <HAL_SPI_TransmitReceive>
 800539c:	4606      	mov	r6, r0
 800539e:	e067      	b.n	8005470 <HAL_SPI_Receive+0x172>
    __HAL_SPI_DISABLE(hspi);
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	6813      	ldr	r3, [r2, #0]
 80053a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	6813      	ldr	r3, [r2, #0]
 80053ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	e7db      	b.n	800536e <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b6:	f7fd ffe3 	bl	8003380 <HAL_GetTick>
 80053ba:	1bc0      	subs	r0, r0, r7
 80053bc:	42a8      	cmp	r0, r5
 80053be:	d302      	bcc.n	80053c6 <HAL_SPI_Receive+0xc8>
 80053c0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80053c4:	d115      	bne.n	80053f2 <HAL_SPI_Receive+0xf4>
 80053c6:	b1a5      	cbz	r5, 80053f2 <HAL_SPI_Receive+0xf4>
    while (hspi->RxXferCount > 0U)
 80053c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d03c      	beq.n	800544a <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	f012 0f01 	tst.w	r2, #1
 80053d8:	d0ed      	beq.n	80053b6 <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80053dc:	7b1b      	ldrb	r3, [r3, #12]
 80053de:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053e2:	3301      	adds	r3, #1
 80053e4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80053e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80053f0:	e7ea      	b.n	80053c8 <HAL_SPI_Receive+0xca>
          hspi->State = HAL_SPI_STATE_READY;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80053f8:	2603      	movs	r6, #3
          goto error;
 80053fa:	e036      	b.n	800546a <HAL_SPI_Receive+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fc:	f7fd ffc0 	bl	8003380 <HAL_GetTick>
 8005400:	1bc0      	subs	r0, r0, r7
 8005402:	42a8      	cmp	r0, r5
 8005404:	d302      	bcc.n	800540c <HAL_SPI_Receive+0x10e>
 8005406:	f1b5 3fff 	cmp.w	r5, #4294967295
 800540a:	d119      	bne.n	8005440 <HAL_SPI_Receive+0x142>
 800540c:	b1c5      	cbz	r5, 8005440 <HAL_SPI_Receive+0x142>
    while (hspi->RxXferCount > 0U)
 800540e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	b1d3      	cbz	r3, 800544a <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	f012 0f01 	tst.w	r2, #1
 800541c:	d0ee      	beq.n	80053fc <HAL_SPI_Receive+0xfe>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005422:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005424:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005426:	3302      	adds	r3, #2
 8005428:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800542a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800542e:	fa1f fc8c 	uxth.w	ip, ip
 8005432:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005436:	fa1f fc8c 	uxth.w	ip, ip
 800543a:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800543e:	e7e6      	b.n	800540e <HAL_SPI_Receive+0x110>
          hspi->State = HAL_SPI_STATE_READY;
 8005440:	2301      	movs	r3, #1
 8005442:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8005446:	2603      	movs	r6, #3
          goto error;
 8005448:	e00f      	b.n	800546a <HAL_SPI_Receive+0x16c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800544a:	463a      	mov	r2, r7
 800544c:	4629      	mov	r1, r5
 800544e:	4620      	mov	r0, r4
 8005450:	f7ff fcc2 	bl	8004dd8 <SPI_EndRxTransaction>
 8005454:	b108      	cbz	r0, 800545a <HAL_SPI_Receive+0x15c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005456:	2320      	movs	r3, #32
 8005458:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800545a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800545c:	b92b      	cbnz	r3, 800546a <HAL_SPI_Receive+0x16c>
    hspi->State = HAL_SPI_STATE_READY;
 800545e:	2301      	movs	r3, #1
 8005460:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005464:	2600      	movs	r6, #0
 8005466:	e000      	b.n	800546a <HAL_SPI_Receive+0x16c>
    errorcode = HAL_BUSY;
 8005468:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 800546a:	2300      	movs	r3, #0
 800546c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005470:	4630      	mov	r0, r6
 8005472:	b003      	add	sp, #12
 8005474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005478:	2602      	movs	r6, #2
 800547a:	e7f9      	b.n	8005470 <HAL_SPI_Receive+0x172>

0800547c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005480:	6a03      	ldr	r3, [r0, #32]
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800548c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005490:	680c      	ldr	r4, [r1, #0]
 8005492:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005494:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005498:	688b      	ldr	r3, [r1, #8]
 800549a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800549c:	4a0d      	ldr	r2, [pc, #52]	; (80054d4 <TIM_OC1_SetConfig+0x58>)
 800549e:	4290      	cmp	r0, r2
 80054a0:	d009      	beq.n	80054b6 <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a2:	4a0c      	ldr	r2, [pc, #48]	; (80054d4 <TIM_OC1_SetConfig+0x58>)
 80054a4:	4290      	cmp	r0, r2
 80054a6:	d00d      	beq.n	80054c4 <TIM_OC1_SetConfig+0x48>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054aa:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ac:	684a      	ldr	r2, [r1, #4]
 80054ae:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b0:	6203      	str	r3, [r0, #32]
}
 80054b2:	bc30      	pop	{r4, r5}
 80054b4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80054ba:	68ca      	ldr	r2, [r1, #12]
 80054bc:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80054be:	f022 0304 	bic.w	r3, r2, #4
 80054c2:	e7ee      	b.n	80054a2 <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054c4:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80054c8:	694a      	ldr	r2, [r1, #20]
 80054ca:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80054cc:	698d      	ldr	r5, [r1, #24]
 80054ce:	4315      	orrs	r5, r2
 80054d0:	e7ea      	b.n	80054a8 <TIM_OC1_SetConfig+0x2c>
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00

080054d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054dc:	6a02      	ldr	r2, [r0, #32]
 80054de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ec:	680d      	ldr	r5, [r1, #0]
 80054ee:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054f4:	688a      	ldr	r2, [r1, #8]
 80054f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054fa:	4a0f      	ldr	r2, [pc, #60]	; (8005538 <TIM_OC3_SetConfig+0x60>)
 80054fc:	4290      	cmp	r0, r2
 80054fe:	d009      	beq.n	8005514 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	4a0d      	ldr	r2, [pc, #52]	; (8005538 <TIM_OC3_SetConfig+0x60>)
 8005502:	4290      	cmp	r0, r2
 8005504:	d00e      	beq.n	8005524 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005506:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005508:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800550a:	684a      	ldr	r2, [r1, #4]
 800550c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550e:	6203      	str	r3, [r0, #32]
}
 8005510:	bc30      	pop	{r4, r5}
 8005512:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005518:	68ca      	ldr	r2, [r1, #12]
 800551a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800551e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005522:	e7ed      	b.n	8005500 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005524:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005528:	694a      	ldr	r2, [r1, #20]
 800552a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800552e:	698a      	ldr	r2, [r1, #24]
 8005530:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8005534:	e7e7      	b.n	8005506 <TIM_OC3_SetConfig+0x2e>
 8005536:	bf00      	nop
 8005538:	40012c00 	.word	0x40012c00

0800553c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005540:	6a02      	ldr	r2, [r0, #32]
 8005542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005546:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800554c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	680d      	ldr	r5, [r1, #0]
 8005552:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555a:	688d      	ldr	r5, [r1, #8]
 800555c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005560:	4d07      	ldr	r5, [pc, #28]	; (8005580 <TIM_OC4_SetConfig+0x44>)
 8005562:	42a8      	cmp	r0, r5
 8005564:	d006      	beq.n	8005574 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005566:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005568:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800556a:	684a      	ldr	r2, [r1, #4]
 800556c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556e:	6203      	str	r3, [r0, #32]
}
 8005570:	bc30      	pop	{r4, r5}
 8005572:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005574:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005578:	694d      	ldr	r5, [r1, #20]
 800557a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800557e:	e7f2      	b.n	8005566 <TIM_OC4_SetConfig+0x2a>
 8005580:	40012c00 	.word	0x40012c00

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005586:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005588:	6a04      	ldr	r4, [r0, #32]
 800558a:	f024 0401 	bic.w	r4, r4, #1
 800558e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005590:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005592:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005596:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800559a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800559e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80055a2:	6203      	str	r3, [r0, #32]
}
 80055a4:	bc10      	pop	{r4}
 80055a6:	4770      	bx	lr

080055a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055aa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ac:	6a04      	ldr	r4, [r0, #32]
 80055ae:	f024 0410 	bic.w	r4, r4, #16
 80055b2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b6:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ba:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80055c8:	6203      	str	r3, [r0, #32]
}
 80055ca:	bc10      	pop	{r4}
 80055cc:	4770      	bx	lr

080055ce <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055ce:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055d4:	430b      	orrs	r3, r1
 80055d6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055da:	6083      	str	r3, [r0, #8]
}
 80055dc:	4770      	bx	lr
	...

080055e0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80055e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d127      	bne.n	800563a <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80055ea:	2302      	movs	r3, #2
 80055ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055f0:	6802      	ldr	r2, [r0, #0]
 80055f2:	68d3      	ldr	r3, [r2, #12]
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fa:	6803      	ldr	r3, [r0, #0]
 80055fc:	4a11      	ldr	r2, [pc, #68]	; (8005644 <HAL_TIM_Base_Start_IT+0x64>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d010      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x44>
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d00d      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x44>
 8005608:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800560c:	4293      	cmp	r3, r2
 800560e:	d009      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x44>
 8005610:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005614:	4293      	cmp	r3, r2
 8005616:	d005      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005620:	2000      	movs	r0, #0
 8005622:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562a:	2a06      	cmp	r2, #6
 800562c:	d007      	beq.n	800563e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005636:	2000      	movs	r0, #0
 8005638:	4770      	bx	lr
    return HAL_ERROR;
 800563a:	2001      	movs	r0, #1
 800563c:	4770      	bx	lr
  return HAL_OK;
 800563e:	2000      	movs	r0, #0
}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00

08005648 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005648:	6802      	ldr	r2, [r0, #0]
 800564a:	68d3      	ldr	r3, [r2, #12]
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8005652:	6803      	ldr	r3, [r0, #0]
 8005654:	6a19      	ldr	r1, [r3, #32]
 8005656:	f241 1211 	movw	r2, #4369	; 0x1111
 800565a:	4211      	tst	r1, r2
 800565c:	d108      	bne.n	8005670 <HAL_TIM_Base_Stop_IT+0x28>
 800565e:	6a19      	ldr	r1, [r3, #32]
 8005660:	f240 4244 	movw	r2, #1092	; 0x444
 8005664:	4211      	tst	r1, r2
 8005666:	d103      	bne.n	8005670 <HAL_TIM_Base_Stop_IT+0x28>
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f022 0201 	bic.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005670:	2301      	movs	r3, #1
 8005672:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005676:	2000      	movs	r0, #0
 8005678:	4770      	bx	lr

0800567a <HAL_TIM_PWM_MspInit>:
}
 800567a:	4770      	bx	lr

0800567c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800567c:	4770      	bx	lr

0800567e <HAL_TIM_IC_CaptureCallback>:
}
 800567e:	4770      	bx	lr

08005680 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005680:	4770      	bx	lr

08005682 <HAL_TIM_TriggerCallback>:
}
 8005682:	4770      	bx	lr

08005684 <HAL_TIM_IRQHandler>:
{
 8005684:	b510      	push	{r4, lr}
 8005686:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005688:	6803      	ldr	r3, [r0, #0]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	f012 0f02 	tst.w	r2, #2
 8005690:	d011      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	f012 0f02 	tst.w	r2, #2
 8005698:	d00d      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800569a:	f06f 0202 	mvn.w	r2, #2
 800569e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a0:	2301      	movs	r3, #1
 80056a2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a4:	6803      	ldr	r3, [r0, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	f013 0f03 	tst.w	r3, #3
 80056ac:	d070      	beq.n	8005790 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	f7ff ffe6 	bl	800567e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	2300      	movs	r3, #0
 80056b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	f012 0f04 	tst.w	r2, #4
 80056be:	d012      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	f012 0f04 	tst.w	r2, #4
 80056c6:	d00e      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c8:	f06f 0204 	mvn.w	r2, #4
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ce:	2302      	movs	r3, #2
 80056d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80056da:	d05f      	beq.n	800579c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80056dc:	4620      	mov	r0, r4
 80056de:	f7ff ffce 	bl	800567e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	2300      	movs	r3, #0
 80056e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	f012 0f08 	tst.w	r2, #8
 80056ee:	d012      	beq.n	8005716 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	f012 0f08 	tst.w	r2, #8
 80056f6:	d00e      	beq.n	8005716 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f8:	f06f 0208 	mvn.w	r2, #8
 80056fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fe:	2304      	movs	r3, #4
 8005700:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f013 0f03 	tst.w	r3, #3
 800570a:	d04e      	beq.n	80057aa <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800570c:	4620      	mov	r0, r4
 800570e:	f7ff ffb6 	bl	800567e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	2300      	movs	r3, #0
 8005714:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	f012 0f10 	tst.w	r2, #16
 800571e:	d012      	beq.n	8005746 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	f012 0f10 	tst.w	r2, #16
 8005726:	d00e      	beq.n	8005746 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005728:	f06f 0210 	mvn.w	r2, #16
 800572c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800572e:	2308      	movs	r3, #8
 8005730:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f413 7f40 	tst.w	r3, #768	; 0x300
 800573a:	d03d      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800573c:	4620      	mov	r0, r4
 800573e:	f7ff ff9e 	bl	800567e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005742:	2300      	movs	r3, #0
 8005744:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	f012 0f01 	tst.w	r2, #1
 800574e:	d003      	beq.n	8005758 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	f012 0f01 	tst.w	r2, #1
 8005756:	d136      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005768:	d134      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005772:	d003      	beq.n	800577c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	f012 0f40 	tst.w	r2, #64	; 0x40
 800577a:	d132      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	f012 0f20 	tst.w	r2, #32
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	f012 0f20 	tst.w	r2, #32
 800578c:	d130      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x16c>
}
 800578e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005790:	f7ff ff74 	bl	800567c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	4620      	mov	r0, r4
 8005796:	f7ff ff73 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
 800579a:	e78a      	b.n	80056b2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579c:	4620      	mov	r0, r4
 800579e:	f7ff ff6d 	bl	800567c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a2:	4620      	mov	r0, r4
 80057a4:	f7ff ff6c 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
 80057a8:	e79b      	b.n	80056e2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057aa:	4620      	mov	r0, r4
 80057ac:	f7ff ff66 	bl	800567c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff ff65 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
 80057b6:	e7ac      	b.n	8005712 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b8:	4620      	mov	r0, r4
 80057ba:	f7ff ff5f 	bl	800567c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057be:	4620      	mov	r0, r4
 80057c0:	f7ff ff5e 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
 80057c4:	e7bd      	b.n	8005742 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c6:	f06f 0201 	mvn.w	r2, #1
 80057ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80057cc:	4620      	mov	r0, r4
 80057ce:	f7fb fb25 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
 80057d2:	e7c1      	b.n	8005758 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 fac3 	bl	8005d66 <HAL_TIMEx_BreakCallback>
 80057e0:	e7c3      	b.n	800576a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80057e8:	4620      	mov	r0, r4
 80057ea:	f7ff ff4a 	bl	8005682 <HAL_TIM_TriggerCallback>
 80057ee:	e7c5      	b.n	800577c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057f0:	f06f 0220 	mvn.w	r2, #32
 80057f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80057f6:	4620      	mov	r0, r4
 80057f8:	f000 fab4 	bl	8005d64 <HAL_TIMEx_CommutCallback>
}
 80057fc:	e7c7      	b.n	800578e <HAL_TIM_IRQHandler+0x10a>
	...

08005800 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005800:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005802:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <TIM_Base_SetConfig+0x70>)
 8005804:	4290      	cmp	r0, r2
 8005806:	d00a      	beq.n	800581e <TIM_Base_SetConfig+0x1e>
 8005808:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800580c:	d007      	beq.n	800581e <TIM_Base_SetConfig+0x1e>
 800580e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005812:	4290      	cmp	r0, r2
 8005814:	d003      	beq.n	800581e <TIM_Base_SetConfig+0x1e>
 8005816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800581a:	4290      	cmp	r0, r2
 800581c:	d103      	bne.n	8005826 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800581e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005822:	684a      	ldr	r2, [r1, #4]
 8005824:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <TIM_Base_SetConfig+0x70>)
 8005828:	4290      	cmp	r0, r2
 800582a:	d00a      	beq.n	8005842 <TIM_Base_SetConfig+0x42>
 800582c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005830:	d007      	beq.n	8005842 <TIM_Base_SetConfig+0x42>
 8005832:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005836:	4290      	cmp	r0, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0x42>
 800583a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800583e:	4290      	cmp	r0, r2
 8005840:	d103      	bne.n	800584a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005846:	68ca      	ldr	r2, [r1, #12]
 8005848:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800584a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800584e:	694a      	ldr	r2, [r1, #20]
 8005850:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005852:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005854:	688b      	ldr	r3, [r1, #8]
 8005856:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005858:	680b      	ldr	r3, [r1, #0]
 800585a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <TIM_Base_SetConfig+0x70>)
 800585e:	4298      	cmp	r0, r3
 8005860:	d002      	beq.n	8005868 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8005862:	2301      	movs	r3, #1
 8005864:	6143      	str	r3, [r0, #20]
}
 8005866:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005868:	690b      	ldr	r3, [r1, #16]
 800586a:	6303      	str	r3, [r0, #48]	; 0x30
 800586c:	e7f9      	b.n	8005862 <TIM_Base_SetConfig+0x62>
 800586e:	bf00      	nop
 8005870:	40012c00 	.word	0x40012c00

08005874 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005874:	b340      	cbz	r0, 80058c8 <HAL_TIM_Base_Init+0x54>
{
 8005876:	b510      	push	{r4, lr}
 8005878:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800587a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800587e:	b1f3      	cbz	r3, 80058be <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	2302      	movs	r3, #2
 8005882:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005886:	4621      	mov	r1, r4
 8005888:	f851 0b04 	ldr.w	r0, [r1], #4
 800588c:	f7ff ffb8 	bl	8005800 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005890:	2301      	movs	r3, #1
 8005892:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005896:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800589a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800589e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80058a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80058b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80058b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80058ba:	2000      	movs	r0, #0
}
 80058bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80058be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80058c2:	f7fd fbf7 	bl	80030b4 <HAL_TIM_Base_MspInit>
 80058c6:	e7db      	b.n	8005880 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80058c8:	2001      	movs	r0, #1
}
 80058ca:	4770      	bx	lr

080058cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80058cc:	b340      	cbz	r0, 8005920 <HAL_TIM_PWM_Init+0x54>
{
 80058ce:	b510      	push	{r4, lr}
 80058d0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80058d6:	b1f3      	cbz	r3, 8005916 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	2302      	movs	r3, #2
 80058da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058de:	4621      	mov	r1, r4
 80058e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80058e4:	f7ff ff8c 	bl	8005800 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80058f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80058f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80058fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005906:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800590a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800590e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005912:	2000      	movs	r0, #0
}
 8005914:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005916:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800591a:	f7ff feae 	bl	800567a <HAL_TIM_PWM_MspInit>
 800591e:	e7db      	b.n	80058d8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005920:	2001      	movs	r0, #1
}
 8005922:	4770      	bx	lr

08005924 <TIM_OC2_SetConfig>:
{
 8005924:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8005926:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005928:	6a02      	ldr	r2, [r0, #32]
 800592a:	f022 0210 	bic.w	r2, r2, #16
 800592e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005930:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005932:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005934:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005938:	680d      	ldr	r5, [r1, #0]
 800593a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800593e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005942:	688d      	ldr	r5, [r1, #8]
 8005944:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005948:	4d0e      	ldr	r5, [pc, #56]	; (8005984 <TIM_OC2_SetConfig+0x60>)
 800594a:	42a8      	cmp	r0, r5
 800594c:	d009      	beq.n	8005962 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594e:	4d0d      	ldr	r5, [pc, #52]	; (8005984 <TIM_OC2_SetConfig+0x60>)
 8005950:	42a8      	cmp	r0, r5
 8005952:	d00e      	beq.n	8005972 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8005954:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005956:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005958:	684a      	ldr	r2, [r1, #4]
 800595a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800595c:	6203      	str	r3, [r0, #32]
}
 800595e:	bc30      	pop	{r4, r5}
 8005960:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005966:	68cd      	ldr	r5, [r1, #12]
 8005968:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800596c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005970:	e7ed      	b.n	800594e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005972:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005976:	694d      	ldr	r5, [r1, #20]
 8005978:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800597c:	698d      	ldr	r5, [r1, #24]
 800597e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005982:	e7e7      	b.n	8005954 <TIM_OC2_SetConfig+0x30>
 8005984:	40012c00 	.word	0x40012c00

08005988 <HAL_TIM_PWM_ConfigChannel>:
{
 8005988:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800598a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800598e:	2b01      	cmp	r3, #1
 8005990:	d066      	beq.n	8005a60 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005992:	4604      	mov	r4, r0
 8005994:	460d      	mov	r5, r1
 8005996:	2301      	movs	r3, #1
 8005998:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800599c:	2a0c      	cmp	r2, #12
 800599e:	d85a      	bhi.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0xce>
 80059a0:	e8df f002 	tbb	[pc, r2]
 80059a4:	59595907 	.word	0x59595907
 80059a8:	5959591b 	.word	0x5959591b
 80059ac:	59595930 	.word	0x59595930
 80059b0:	44          	.byte	0x44
 80059b1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	f7ff fd62 	bl	800547c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059b8:	6822      	ldr	r2, [r4, #0]
 80059ba:	6993      	ldr	r3, [r2, #24]
 80059bc:	f043 0308 	orr.w	r3, r3, #8
 80059c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	6993      	ldr	r3, [r2, #24]
 80059c6:	f023 0304 	bic.w	r3, r3, #4
 80059ca:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059cc:	6822      	ldr	r2, [r4, #0]
 80059ce:	6993      	ldr	r3, [r2, #24]
 80059d0:	6929      	ldr	r1, [r5, #16]
 80059d2:	430b      	orrs	r3, r1
 80059d4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80059d6:	2000      	movs	r0, #0
      break;
 80059d8:	e03e      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059da:	6800      	ldr	r0, [r0, #0]
 80059dc:	f7ff ffa2 	bl	8005924 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	6993      	ldr	r3, [r2, #24]
 80059e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059e8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059ea:	6822      	ldr	r2, [r4, #0]
 80059ec:	6993      	ldr	r3, [r2, #24]
 80059ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059f2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059f4:	6822      	ldr	r2, [r4, #0]
 80059f6:	6993      	ldr	r3, [r2, #24]
 80059f8:	6929      	ldr	r1, [r5, #16]
 80059fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80059fe:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005a00:	2000      	movs	r0, #0
      break;
 8005a02:	e029      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a04:	6800      	ldr	r0, [r0, #0]
 8005a06:	f7ff fd67 	bl	80054d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	69d3      	ldr	r3, [r2, #28]
 8005a0e:	f043 0308 	orr.w	r3, r3, #8
 8005a12:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a14:	6822      	ldr	r2, [r4, #0]
 8005a16:	69d3      	ldr	r3, [r2, #28]
 8005a18:	f023 0304 	bic.w	r3, r3, #4
 8005a1c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	69d3      	ldr	r3, [r2, #28]
 8005a22:	6929      	ldr	r1, [r5, #16]
 8005a24:	430b      	orrs	r3, r1
 8005a26:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2000      	movs	r0, #0
      break;
 8005a2a:	e015      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a2c:	6800      	ldr	r0, [r0, #0]
 8005a2e:	f7ff fd85 	bl	800553c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	69d3      	ldr	r3, [r2, #28]
 8005a36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a3a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a3c:	6822      	ldr	r2, [r4, #0]
 8005a3e:	69d3      	ldr	r3, [r2, #28]
 8005a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a44:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	69d3      	ldr	r3, [r2, #28]
 8005a4a:	6929      	ldr	r1, [r5, #16]
 8005a4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a50:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2000      	movs	r0, #0
      break;
 8005a54:	e000      	b.n	8005a58 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8005a56:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005a60:	2002      	movs	r0, #2
 8005a62:	e7fc      	b.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0xd6>

08005a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a64:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a66:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a68:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a6c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005a70:	430a      	orrs	r2, r1
 8005a72:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a76:	6082      	str	r2, [r0, #8]
}
 8005a78:	bc10      	pop	{r4}
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005a7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d078      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0xfa>
{
 8005a84:	b510      	push	{r4, lr}
 8005a86:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005a94:	6802      	ldr	r2, [r0, #0]
 8005a96:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005aa0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005aa2:	680b      	ldr	r3, [r1, #0]
 8005aa4:	2b60      	cmp	r3, #96	; 0x60
 8005aa6:	d04c      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0xc6>
 8005aa8:	d829      	bhi.n	8005afe <HAL_TIM_ConfigClockSource+0x82>
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d054      	beq.n	8005b58 <HAL_TIM_ConfigClockSource+0xdc>
 8005aae:	d90c      	bls.n	8005aca <HAL_TIM_ConfigClockSource+0x4e>
 8005ab0:	2b50      	cmp	r3, #80	; 0x50
 8005ab2:	d122      	bne.n	8005afa <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab4:	68ca      	ldr	r2, [r1, #12]
 8005ab6:	6849      	ldr	r1, [r1, #4]
 8005ab8:	6800      	ldr	r0, [r0, #0]
 8005aba:	f7ff fd63 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005abe:	2150      	movs	r1, #80	; 0x50
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	f7ff fd84 	bl	80055ce <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2000      	movs	r0, #0
      break;
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d00d      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x6e>
 8005ace:	d909      	bls.n	8005ae4 <HAL_TIM_ConfigClockSource+0x68>
 8005ad0:	2b30      	cmp	r3, #48	; 0x30
 8005ad2:	d00a      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8005ad4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005adc:	2300      	movs	r3, #0
 8005ade:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005ae2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8005ae4:	b10b      	cbz	r3, 8005aea <HAL_TIM_ConfigClockSource+0x6e>
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d105      	bne.n	8005af6 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aea:	4619      	mov	r1, r3
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	f7ff fd6e 	bl	80055ce <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	2000      	movs	r0, #0
      break;
 8005af4:	e7ef      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005af6:	2001      	movs	r0, #1
 8005af8:	e7ed      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
 8005afa:	2001      	movs	r0, #1
 8005afc:	e7eb      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b02:	d034      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0xf2>
 8005b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b08:	d10c      	bne.n	8005b24 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005b0a:	68cb      	ldr	r3, [r1, #12]
 8005b0c:	684a      	ldr	r2, [r1, #4]
 8005b0e:	6889      	ldr	r1, [r1, #8]
 8005b10:	6800      	ldr	r0, [r0, #0]
 8005b12:	f7ff ffa7 	bl	8005a64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	6893      	ldr	r3, [r2, #8]
 8005b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b1e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b20:	2000      	movs	r0, #0
      break;
 8005b22:	e7d8      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005b24:	2b70      	cmp	r3, #112	; 0x70
 8005b26:	d124      	bne.n	8005b72 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005b28:	68cb      	ldr	r3, [r1, #12]
 8005b2a:	684a      	ldr	r2, [r1, #4]
 8005b2c:	6889      	ldr	r1, [r1, #8]
 8005b2e:	6800      	ldr	r0, [r0, #0]
 8005b30:	f7ff ff98 	bl	8005a64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005b3c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b3e:	2000      	movs	r0, #0
      break;
 8005b40:	e7c9      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b42:	68ca      	ldr	r2, [r1, #12]
 8005b44:	6849      	ldr	r1, [r1, #4]
 8005b46:	6800      	ldr	r0, [r0, #0]
 8005b48:	f7ff fd2e 	bl	80055a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b4c:	2160      	movs	r1, #96	; 0x60
 8005b4e:	6820      	ldr	r0, [r4, #0]
 8005b50:	f7ff fd3d 	bl	80055ce <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005b54:	2000      	movs	r0, #0
      break;
 8005b56:	e7be      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b58:	68ca      	ldr	r2, [r1, #12]
 8005b5a:	6849      	ldr	r1, [r1, #4]
 8005b5c:	6800      	ldr	r0, [r0, #0]
 8005b5e:	f7ff fd11 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b62:	2140      	movs	r1, #64	; 0x40
 8005b64:	6820      	ldr	r0, [r4, #0]
 8005b66:	f7ff fd32 	bl	80055ce <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005b6a:	2000      	movs	r0, #0
      break;
 8005b6c:	e7b3      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005b6e:	2000      	movs	r0, #0
 8005b70:	e7b1      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8005b72:	2001      	movs	r0, #1
 8005b74:	e7af      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8005b76:	2002      	movs	r0, #2
}
 8005b78:	4770      	bx	lr

08005b7a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b7a:	f001 011f 	and.w	r1, r1, #31
 8005b7e:	f04f 0c01 	mov.w	ip, #1
 8005b82:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b86:	6a03      	ldr	r3, [r0, #32]
 8005b88:	ea23 030c 	bic.w	r3, r3, ip
 8005b8c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b8e:	6a03      	ldr	r3, [r0, #32]
 8005b90:	408a      	lsls	r2, r1
 8005b92:	4313      	orrs	r3, r2
 8005b94:	6203      	str	r3, [r0, #32]
}
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIM_PWM_Start>:
{
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	bb51      	cbnz	r1, 8005bf6 <HAL_TIM_PWM_Start+0x5e>
 8005ba0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	bf18      	it	ne
 8005baa:	2301      	movne	r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d15b      	bne.n	8005c68 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d139      	bne.n	8005c28 <HAL_TIM_PWM_Start+0x90>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4601      	mov	r1, r0
 8005bbe:	6820      	ldr	r0, [r4, #0]
 8005bc0:	f7ff ffdb 	bl	8005b7a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <HAL_TIM_PWM_Start+0xd8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d03d      	beq.n	8005c48 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <HAL_TIM_PWM_Start+0xd8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d03e      	beq.n	8005c52 <HAL_TIM_PWM_Start+0xba>
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d03b      	beq.n	8005c52 <HAL_TIM_PWM_Start+0xba>
 8005bda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d037      	beq.n	8005c52 <HAL_TIM_PWM_Start+0xba>
 8005be2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d033      	beq.n	8005c52 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e039      	b.n	8005c6a <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bf6:	2904      	cmp	r1, #4
 8005bf8:	d008      	beq.n	8005c0c <HAL_TIM_PWM_Start+0x74>
 8005bfa:	2908      	cmp	r1, #8
 8005bfc:	d00d      	beq.n	8005c1a <HAL_TIM_PWM_Start+0x82>
 8005bfe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	bf18      	it	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	e7cf      	b.n	8005bac <HAL_TIM_PWM_Start+0x14>
 8005c0c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	bf18      	it	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	e7c8      	b.n	8005bac <HAL_TIM_PWM_Start+0x14>
 8005c1a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	bf18      	it	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	e7c1      	b.n	8005bac <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c28:	2804      	cmp	r0, #4
 8005c2a:	d005      	beq.n	8005c38 <HAL_TIM_PWM_Start+0xa0>
 8005c2c:	2808      	cmp	r0, #8
 8005c2e:	d007      	beq.n	8005c40 <HAL_TIM_PWM_Start+0xa8>
 8005c30:	2302      	movs	r3, #2
 8005c32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005c36:	e7c0      	b.n	8005bba <HAL_TIM_PWM_Start+0x22>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005c3e:	e7bc      	b.n	8005bba <HAL_TIM_PWM_Start+0x22>
 8005c40:	2302      	movs	r3, #2
 8005c42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005c46:	e7b8      	b.n	8005bba <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8005c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c4e:	645a      	str	r2, [r3, #68]	; 0x44
 8005c50:	e7bc      	b.n	8005bcc <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c58:	2a06      	cmp	r2, #6
 8005c5a:	d007      	beq.n	8005c6c <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005c64:	2000      	movs	r0, #0
 8005c66:	e000      	b.n	8005c6a <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8005c68:	2001      	movs	r0, #1
}
 8005c6a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e7fc      	b.n	8005c6a <HAL_TIM_PWM_Start+0xd2>
 8005c70:	40012c00 	.word	0x40012c00

08005c74 <HAL_TIM_PWM_Stop>:
{
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4604      	mov	r4, r0
 8005c78:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	6800      	ldr	r0, [r0, #0]
 8005c7e:	f7ff ff7c 	bl	8005b7a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	4a1b      	ldr	r2, [pc, #108]	; (8005cf4 <HAL_TIM_PWM_Stop+0x80>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d014      	beq.n	8005cb4 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	6a19      	ldr	r1, [r3, #32]
 8005c8e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005c92:	4211      	tst	r1, r2
 8005c94:	d108      	bne.n	8005ca8 <HAL_TIM_PWM_Stop+0x34>
 8005c96:	6a19      	ldr	r1, [r3, #32]
 8005c98:	f240 4244 	movw	r2, #1092	; 0x444
 8005c9c:	4211      	tst	r1, r2
 8005c9e:	d103      	bne.n	8005ca8 <HAL_TIM_PWM_Stop+0x34>
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	b99d      	cbnz	r5, 8005cd2 <HAL_TIM_PWM_Stop+0x5e>
 8005caa:	2301      	movs	r3, #1
 8005cac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005cb4:	6a19      	ldr	r1, [r3, #32]
 8005cb6:	f241 1211 	movw	r2, #4369	; 0x1111
 8005cba:	4211      	tst	r1, r2
 8005cbc:	d1e5      	bne.n	8005c8a <HAL_TIM_PWM_Stop+0x16>
 8005cbe:	6a19      	ldr	r1, [r3, #32]
 8005cc0:	f240 4244 	movw	r2, #1092	; 0x444
 8005cc4:	4211      	tst	r1, r2
 8005cc6:	d1e0      	bne.n	8005c8a <HAL_TIM_PWM_Stop+0x16>
 8005cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
 8005cd0:	e7db      	b.n	8005c8a <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	2d04      	cmp	r5, #4
 8005cd4:	d005      	beq.n	8005ce2 <HAL_TIM_PWM_Stop+0x6e>
 8005cd6:	2d08      	cmp	r5, #8
 8005cd8:	d007      	beq.n	8005cea <HAL_TIM_PWM_Stop+0x76>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005ce0:	e7e6      	b.n	8005cb0 <HAL_TIM_PWM_Stop+0x3c>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005ce8:	e7e2      	b.n	8005cb0 <HAL_TIM_PWM_Stop+0x3c>
 8005cea:	2301      	movs	r3, #1
 8005cec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cf0:	e7de      	b.n	8005cb0 <HAL_TIM_PWM_Stop+0x3c>
 8005cf2:	bf00      	nop
 8005cf4:	40012c00 	.word	0x40012c00

08005cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005cfc:	2a01      	cmp	r2, #1
 8005cfe:	d02c      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8005d00:	b410      	push	{r4}
 8005d02:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005d04:	2201      	movs	r2, #1
 8005d06:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d10:	6802      	ldr	r2, [r0, #0]
 8005d12:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d14:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d16:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d1a:	6808      	ldr	r0, [r1, #0]
 8005d1c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d20:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	480e      	ldr	r0, [pc, #56]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8005d26:	4282      	cmp	r2, r0
 8005d28:	d00a      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005d2a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005d2e:	d007      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005d30:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8005d34:	4282      	cmp	r2, r0
 8005d36:	d003      	beq.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005d38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005d3c:	4282      	cmp	r2, r0
 8005d3e:	d104      	bne.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d40:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d44:	6849      	ldr	r1, [r1, #4]
 8005d46:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d48:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	2000      	movs	r0, #0
 8005d52:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8005d56:	bc10      	pop	{r4}
 8005d58:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005d5a:	2002      	movs	r0, #2
}
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40012c00 	.word	0x40012c00

08005d64 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d64:	4770      	bx	lr

08005d66 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d66:	4770      	bx	lr

08005d68 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d68:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d6c:	b993      	cbnz	r3, 8005d94 <osKernelInitialize+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d72:	b993      	cbnz	r3, 8005d9a <osKernelInitialize+0x32>
 8005d74:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <osKernelInitialize+0x40>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	2802      	cmp	r0, #2
 8005d7a:	d004      	beq.n	8005d86 <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d7c:	b980      	cbnz	r0, 8005da0 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <osKernelInitialize+0x40>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d84:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d86:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f6      	beq.n	8005d7c <osKernelInitialize+0x14>
    stat = osErrorISR;
 8005d8e:	f06f 0005 	mvn.w	r0, #5
 8005d92:	4770      	bx	lr
 8005d94:	f06f 0005 	mvn.w	r0, #5
 8005d98:	4770      	bx	lr
 8005d9a:	f06f 0005 	mvn.w	r0, #5
 8005d9e:	4770      	bx	lr
    } else {
      stat = osError;
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20001210 	.word	0x20001210

08005dac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005dac:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dae:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005db2:	b9b3      	cbnz	r3, 8005de2 <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db4:	f3ef 8310 	mrs	r3, PRIMASK
 8005db8:	b9b3      	cbnz	r3, 8005de8 <osKernelStart+0x3c>
 8005dba:	4b0e      	ldr	r3, [pc, #56]	; (8005df4 <osKernelStart+0x48>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d008      	beq.n	8005dd4 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d113      	bne.n	8005dee <osKernelStart+0x42>
      KernelState = osKernelRunning;
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <osKernelStart+0x48>)
 8005dc8:	2202      	movs	r2, #2
 8005dca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005dcc:	f001 fb98 	bl	8007500 <vTaskStartScheduler>
      stat = osOK;
 8005dd0:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8005dd2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dd4:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005dd8:	2a00      	cmp	r2, #0
 8005dda:	d0f2      	beq.n	8005dc2 <osKernelStart+0x16>
    stat = osErrorISR;
 8005ddc:	f06f 0005 	mvn.w	r0, #5
 8005de0:	e7f7      	b.n	8005dd2 <osKernelStart+0x26>
 8005de2:	f06f 0005 	mvn.w	r0, #5
 8005de6:	e7f4      	b.n	8005dd2 <osKernelStart+0x26>
 8005de8:	f06f 0005 	mvn.w	r0, #5
 8005dec:	e7f1      	b.n	8005dd2 <osKernelStart+0x26>
      stat = osError;
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005df2:	e7ee      	b.n	8005dd2 <osKernelStart+0x26>
 8005df4:	20001210 	.word	0x20001210

08005df8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfa:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005dfc:	2400      	movs	r4, #0
 8005dfe:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e00:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005e04:	2c00      	cmp	r4, #0
 8005e06:	d143      	bne.n	8005e90 <osThreadNew+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e08:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d13f      	bne.n	8005e90 <osThreadNew+0x98>
 8005e10:	4b33      	ldr	r3, [pc, #204]	; (8005ee0 <osThreadNew+0xe8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d016      	beq.n	8005e46 <osThreadNew+0x4e>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d039      	beq.n	8005e90 <osThreadNew+0x98>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005e22:	b362      	cbz	r2, 8005e7e <osThreadNew+0x86>
      if (attr->name != NULL) {
 8005e24:	6815      	ldr	r5, [r2, #0]
 8005e26:	b195      	cbz	r5, 8005e4e <osThreadNew+0x56>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005e28:	6993      	ldr	r3, [r2, #24]
 8005e2a:	b903      	cbnz	r3, 8005e2e <osThreadNew+0x36>
    prio  = (UBaseType_t)osPriorityNormal;
 8005e2c:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e2e:	1e5c      	subs	r4, r3, #1
 8005e30:	2c37      	cmp	r4, #55	; 0x37
 8005e32:	d851      	bhi.n	8005ed8 <osThreadNew+0xe0>
 8005e34:	6854      	ldr	r4, [r2, #4]
 8005e36:	f014 0f01 	tst.w	r4, #1
 8005e3a:	d14f      	bne.n	8005edc <osThreadNew+0xe4>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005e3c:	6956      	ldr	r6, [r2, #20]
 8005e3e:	b14e      	cbz	r6, 8005e54 <osThreadNew+0x5c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e40:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 8005e44:	e008      	b.n	8005e58 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e46:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005e4a:	bb0b      	cbnz	r3, 8005e90 <osThreadNew+0x98>
 8005e4c:	e7e4      	b.n	8005e18 <osThreadNew+0x20>
    name  = &empty;
 8005e4e:	f10d 0517 	add.w	r5, sp, #23
 8005e52:	e7e9      	b.n	8005e28 <osThreadNew+0x30>
    stack = configMINIMAL_STACK_SIZE;
 8005e54:	f04f 0c80 	mov.w	ip, #128	; 0x80
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e58:	6894      	ldr	r4, [r2, #8]
 8005e5a:	b12c      	cbz	r4, 8005e68 <osThreadNew+0x70>
 8005e5c:	68d7      	ldr	r7, [r2, #12]
 8005e5e:	2f63      	cmp	r7, #99	; 0x63
 8005e60:	d902      	bls.n	8005e68 <osThreadNew+0x70>
 8005e62:	6917      	ldr	r7, [r2, #16]
 8005e64:	b107      	cbz	r7, 8005e68 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e66:	b9b6      	cbnz	r6, 8005e96 <osThreadNew+0x9e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e68:	b114      	cbz	r4, 8005e70 <osThreadNew+0x78>
    mem   = -1;
 8005e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e6e:	e00c      	b.n	8005e8a <osThreadNew+0x92>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e70:	68d4      	ldr	r4, [r2, #12]
 8005e72:	b994      	cbnz	r4, 8005e9a <osThreadNew+0xa2>
 8005e74:	6914      	ldr	r4, [r2, #16]
 8005e76:	b19c      	cbz	r4, 8005ea0 <osThreadNew+0xa8>
    mem   = -1;
 8005e78:	f04f 34ff 	mov.w	r4, #4294967295
 8005e7c:	e005      	b.n	8005e8a <osThreadNew+0x92>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8005e7e:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8005e80:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8005e82:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8005e86:	f10d 0517 	add.w	r5, sp, #23
    }

    if (mem == 1) {
 8005e8a:	2c01      	cmp	r4, #1
 8005e8c:	d00a      	beq.n	8005ea4 <osThreadNew+0xac>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005e8e:	b1ac      	cbz	r4, 8005ebc <osThreadNew+0xc4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e90:	9804      	ldr	r0, [sp, #16]
}
 8005e92:	b007      	add	sp, #28
 8005e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8005e96:	2401      	movs	r4, #1
 8005e98:	e7f7      	b.n	8005e8a <osThreadNew+0x92>
    mem   = -1;
 8005e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e9e:	e7f4      	b.n	8005e8a <osThreadNew+0x92>
          mem = 0;
 8005ea0:	2400      	movs	r4, #0
 8005ea2:	e7f2      	b.n	8005e8a <osThreadNew+0x92>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ea4:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ea6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ea8:	9202      	str	r2, [sp, #8]
 8005eaa:	9401      	str	r4, [sp, #4]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4662      	mov	r2, ip
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f001 fab6 	bl	8007424 <xTaskCreateStatic>
 8005eb8:	9004      	str	r0, [sp, #16]
 8005eba:	e7e9      	b.n	8005e90 <osThreadNew+0x98>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ebc:	aa04      	add	r2, sp, #16
 8005ebe:	9201      	str	r2, [sp, #4]
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	fa1f f28c 	uxth.w	r2, ip
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f001 fae5 	bl	8007498 <xTaskCreate>
 8005ece:	2801      	cmp	r0, #1
 8005ed0:	d0de      	beq.n	8005e90 <osThreadNew+0x98>
          hTask = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	e7db      	b.n	8005e90 <osThreadNew+0x98>
        return (NULL);
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e7da      	b.n	8005e92 <osThreadNew+0x9a>
 8005edc:	2000      	movs	r0, #0
 8005ede:	e7d8      	b.n	8005e92 <osThreadNew+0x9a>
 8005ee0:	20001210 	.word	0x20001210

08005ee4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005ee4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ee6:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8005eea:	bb33      	cbnz	r3, 8005f3a <osEventFlagsNew+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ef0:	bb2b      	cbnz	r3, 8005f3e <osEventFlagsNew+0x5a>
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <osEventFlagsNew+0x64>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d00c      	beq.n	8005f14 <osEventFlagsNew+0x30>
    mem = -1;

    if (attr != NULL) {
 8005efa:	b1d0      	cbz	r0, 8005f32 <osEventFlagsNew+0x4e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005efc:	6883      	ldr	r3, [r0, #8]
 8005efe:	b113      	cbz	r3, 8005f06 <osEventFlagsNew+0x22>
 8005f00:	68c2      	ldr	r2, [r0, #12]
 8005f02:	2a1f      	cmp	r2, #31
 8005f04:	d811      	bhi.n	8005f2a <osEventFlagsNew+0x46>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f06:	b15b      	cbz	r3, 8005f20 <osEventFlagsNew+0x3c>
    mem = -1;
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005f0c:	b9cb      	cbnz	r3, 8005f42 <osEventFlagsNew+0x5e>
        hEventGroup = xEventGroupCreate();
 8005f0e:	f000 fac9 	bl	80064a4 <xEventGroupCreate>
 8005f12:	e013      	b.n	8005f3c <osEventFlagsNew+0x58>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f14:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ee      	beq.n	8005efa <osEventFlagsNew+0x16>
  hEventGroup = NULL;
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e00d      	b.n	8005f3c <osEventFlagsNew+0x58>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f20:	68c3      	ldr	r3, [r0, #12]
 8005f22:	b143      	cbz	r3, 8005f36 <osEventFlagsNew+0x52>
    mem = -1;
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295
 8005f28:	e7f0      	b.n	8005f0c <osEventFlagsNew+0x28>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fa95 	bl	800645a <xEventGroupCreateStatic>
 8005f30:	e004      	b.n	8005f3c <osEventFlagsNew+0x58>
      mem = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e7ea      	b.n	8005f0c <osEventFlagsNew+0x28>
          mem = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e7e8      	b.n	8005f0c <osEventFlagsNew+0x28>
  hEventGroup = NULL;
 8005f3a:	2000      	movs	r0, #0
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 8005f3c:	bd08      	pop	{r3, pc}
  hEventGroup = NULL;
 8005f3e:	2000      	movs	r0, #0
 8005f40:	e7fc      	b.n	8005f3c <osEventFlagsNew+0x58>
 8005f42:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 8005f44:	e7fa      	b.n	8005f3c <osEventFlagsNew+0x58>
 8005f46:	bf00      	nop
 8005f48:	20001210 	.word	0x20001210

08005f4c <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005f4c:	b370      	cbz	r0, 8005fac <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005f4e:	b510      	push	{r4, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	460c      	mov	r4, r1
 8005f54:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005f56:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005f5a:	d12a      	bne.n	8005fb2 <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5c:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005f60:	b94a      	cbnz	r2, 8005f76 <osEventFlagsSet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f62:	f3ef 8210 	mrs	r2, PRIMASK
 8005f66:	b932      	cbnz	r2, 8005f76 <osEventFlagsSet+0x2a>
 8005f68:	4a16      	ldr	r2, [pc, #88]	; (8005fc4 <osEventFlagsSet+0x78>)
 8005f6a:	6812      	ldr	r2, [r2, #0]
 8005f6c:	2a02      	cmp	r2, #2
 8005f6e:	d118      	bne.n	8005fa2 <osEventFlagsSet+0x56>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f70:	f3ef 8211 	mrs	r2, BASEPRI
 8005f74:	b1aa      	cbz	r2, 8005fa2 <osEventFlagsSet+0x56>
    yield = pdFALSE;
 8005f76:	2200      	movs	r2, #0
 8005f78:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005f7a:	aa01      	add	r2, sp, #4
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fb6c 	bl	800665c <xEventGroupSetBitsFromISR>
 8005f84:	b9c8      	cbnz	r0, 8005fba <osEventFlagsSet+0x6e>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 8005f86:	9b01      	ldr	r3, [sp, #4]
 8005f88:	b1d3      	cbz	r3, 8005fc0 <osEventFlagsSet+0x74>
 8005f8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f92:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	f3bf 8f6f 	isb	sy
      rflags = flags;
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	e009      	b.n	8005fb6 <osEventFlagsSet+0x6a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fb0f 	bl	80065c8 <xEventGroupSetBits>
 8005faa:	e004      	b.n	8005fb6 <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8005fac:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 8005fb0:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 8005fb2:	f06f 0003 	mvn.w	r0, #3
}
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8005fba:	f06f 0002 	mvn.w	r0, #2
 8005fbe:	e7fa      	b.n	8005fb6 <osEventFlagsSet+0x6a>
      rflags = flags;
 8005fc0:	4620      	mov	r0, r4
  return (rflags);
 8005fc2:	e7f8      	b.n	8005fb6 <osEventFlagsSet+0x6a>
 8005fc4:	20001210 	.word	0x20001210

08005fc8 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005fc8:	b3b0      	cbz	r0, 8006038 <osEventFlagsWait+0x70>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005fca:	b570      	push	{r4, r5, r6, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	460c      	mov	r4, r1
 8005fd0:	461d      	mov	r5, r3
 8005fd2:	4684      	mov	ip, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005fd4:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005fd8:	d131      	bne.n	800603e <osEventFlagsWait+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fda:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005fde:	bb93      	cbnz	r3, 8006046 <osEventFlagsWait+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe4:	bb93      	cbnz	r3, 800604c <osEventFlagsWait+0x84>
 8005fe6:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <osEventFlagsWait+0x98>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d013      	beq.n	8006016 <osEventFlagsWait+0x4e>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 8005fee:	f012 0601 	ands.w	r6, r2, #1
 8005ff2:	d017      	beq.n	8006024 <osEventFlagsWait+0x5c>
      wait_all = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 8005ff6:	f012 0f02 	tst.w	r2, #2
 8005ffa:	d015      	beq.n	8006028 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8005ffc:	2200      	movs	r2, #0
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005ffe:	9500      	str	r5, [sp, #0]
 8006000:	4621      	mov	r1, r4
 8006002:	4660      	mov	r0, ip
 8006004:	f000 fa5c 	bl	80064c0 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 8006008:	b186      	cbz	r6, 800602c <osEventFlagsWait+0x64>
      if (flags != rflags) {
 800600a:	4284      	cmp	r4, r0
 800600c:	d019      	beq.n	8006042 <osEventFlagsWait+0x7a>
        if (timeout > 0U) {
 800600e:	b305      	cbz	r5, 8006052 <osEventFlagsWait+0x8a>
          rflags = (uint32_t)osErrorTimeout;
 8006010:	f06f 0001 	mvn.w	r0, #1
 8006014:	e015      	b.n	8006042 <osEventFlagsWait+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006016:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0e7      	beq.n	8005fee <osEventFlagsWait+0x26>
    rflags = (uint32_t)osErrorISR;
 800601e:	f06f 0005 	mvn.w	r0, #5
 8006022:	e00e      	b.n	8006042 <osEventFlagsWait+0x7a>
      wait_all = pdFAIL;
 8006024:	2300      	movs	r3, #0
 8006026:	e7e6      	b.n	8005ff6 <osEventFlagsWait+0x2e>
      exit_clr = pdTRUE;
 8006028:	2201      	movs	r2, #1
 800602a:	e7e8      	b.n	8005ffe <osEventFlagsWait+0x36>
          rflags = (uint32_t)osErrorResource;
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800602c:	4204      	tst	r4, r0
 800602e:	d108      	bne.n	8006042 <osEventFlagsWait+0x7a>
        if (timeout > 0U) {
 8006030:	b195      	cbz	r5, 8006058 <osEventFlagsWait+0x90>
          rflags = (uint32_t)osErrorTimeout;
 8006032:	f06f 0001 	mvn.w	r0, #1
 8006036:	e004      	b.n	8006042 <osEventFlagsWait+0x7a>
    rflags = (uint32_t)osErrorParameter;
 8006038:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 800603c:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 800603e:	f06f 0003 	mvn.w	r0, #3
}
 8006042:	b002      	add	sp, #8
 8006044:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8006046:	f06f 0005 	mvn.w	r0, #5
 800604a:	e7fa      	b.n	8006042 <osEventFlagsWait+0x7a>
 800604c:	f06f 0005 	mvn.w	r0, #5
 8006050:	e7f7      	b.n	8006042 <osEventFlagsWait+0x7a>
          rflags = (uint32_t)osErrorResource;
 8006052:	f06f 0002 	mvn.w	r0, #2
 8006056:	e7f4      	b.n	8006042 <osEventFlagsWait+0x7a>
          rflags = (uint32_t)osErrorResource;
 8006058:	f06f 0002 	mvn.w	r0, #2
  return (rflags);
 800605c:	e7f1      	b.n	8006042 <osEventFlagsWait+0x7a>
 800605e:	bf00      	nop
 8006060:	20001210 	.word	0x20001210

08006064 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006064:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006066:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800606a:	2b00      	cmp	r3, #0
 800606c:	d14e      	bne.n	800610c <osMutexNew+0xa8>
 800606e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006070:	f3ef 8210 	mrs	r2, PRIMASK
 8006074:	4613      	mov	r3, r2
 8006076:	2a00      	cmp	r2, #0
 8006078:	d14b      	bne.n	8006112 <osMutexNew+0xae>
 800607a:	4a28      	ldr	r2, [pc, #160]	; (800611c <osMutexNew+0xb8>)
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	2a02      	cmp	r2, #2
 8006080:	d023      	beq.n	80060ca <osMutexNew+0x66>
    if (attr != NULL) {
 8006082:	b104      	cbz	r4, 8006086 <osMutexNew+0x22>
      type = attr->attr_bits;
 8006084:	6863      	ldr	r3, [r4, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006086:	f013 0601 	ands.w	r6, r3, #1
 800608a:	d000      	beq.n	800608e <osMutexNew+0x2a>
      rmtx = 1U;
 800608c:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800608e:	f013 0f08 	tst.w	r3, #8
 8006092:	d140      	bne.n	8006116 <osMutexNew+0xb2>
      mem = -1;

      if (attr != NULL) {
 8006094:	b37c      	cbz	r4, 80060f6 <osMutexNew+0x92>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006096:	68a1      	ldr	r1, [r4, #8]
 8006098:	b111      	cbz	r1, 80060a0 <osMutexNew+0x3c>
 800609a:	68e3      	ldr	r3, [r4, #12]
 800609c:	2b4f      	cmp	r3, #79	; 0x4f
 800609e:	d81f      	bhi.n	80060e0 <osMutexNew+0x7c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80060a0:	b1c9      	cbz	r1, 80060d6 <osMutexNew+0x72>
      mem = -1;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 80060a6:	bb7b      	cbnz	r3, 8006108 <osMutexNew+0xa4>
          if (rmtx != 0U) {
 80060a8:	b34e      	cbz	r6, 80060fe <osMutexNew+0x9a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80060aa:	2004      	movs	r0, #4
 80060ac:	f000 fd60 	bl	8006b70 <xQueueCreateMutex>
 80060b0:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80060b2:	b12d      	cbz	r5, 80060c0 <osMutexNew+0x5c>
        if (attr != NULL) {
 80060b4:	b104      	cbz	r4, 80060b8 <osMutexNew+0x54>
          name = attr->name;
 80060b6:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80060b8:	4621      	mov	r1, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 fff2 	bl	80070a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80060c0:	b32d      	cbz	r5, 800610e <osMutexNew+0xaa>
 80060c2:	b326      	cbz	r6, 800610e <osMutexNew+0xaa>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80060c4:	f045 0501 	orr.w	r5, r5, #1
 80060c8:	e021      	b.n	800610e <osMutexNew+0xaa>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060ca:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	d0d7      	beq.n	8006082 <osMutexNew+0x1e>
  hMutex = NULL;
 80060d2:	2500      	movs	r5, #0
 80060d4:	e01b      	b.n	800610e <osMutexNew+0xaa>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80060d6:	68e3      	ldr	r3, [r4, #12]
 80060d8:	b17b      	cbz	r3, 80060fa <osMutexNew+0x96>
      mem = -1;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	e7e2      	b.n	80060a6 <osMutexNew+0x42>
        if (rmtx != 0U) {
 80060e0:	b126      	cbz	r6, 80060ec <osMutexNew+0x88>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80060e2:	2004      	movs	r0, #4
 80060e4:	f000 fd4f 	bl	8006b86 <xQueueCreateMutexStatic>
 80060e8:	4605      	mov	r5, r0
 80060ea:	e7e2      	b.n	80060b2 <osMutexNew+0x4e>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80060ec:	2001      	movs	r0, #1
 80060ee:	f000 fd4a 	bl	8006b86 <xQueueCreateMutexStatic>
 80060f2:	4605      	mov	r5, r0
 80060f4:	e7dd      	b.n	80060b2 <osMutexNew+0x4e>
        mem = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e7d5      	b.n	80060a6 <osMutexNew+0x42>
            mem = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e7d3      	b.n	80060a6 <osMutexNew+0x42>
            hMutex = xSemaphoreCreateMutex ();
 80060fe:	2001      	movs	r0, #1
 8006100:	f000 fd36 	bl	8006b70 <xQueueCreateMutex>
 8006104:	4605      	mov	r5, r0
 8006106:	e7d4      	b.n	80060b2 <osMutexNew+0x4e>
  hMutex = NULL;
 8006108:	2500      	movs	r5, #0
 800610a:	e7d9      	b.n	80060c0 <osMutexNew+0x5c>
 800610c:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800610e:	4628      	mov	r0, r5
 8006110:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8006112:	2500      	movs	r5, #0
 8006114:	e7fb      	b.n	800610e <osMutexNew+0xaa>
 8006116:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8006118:	e7f9      	b.n	800610e <osMutexNew+0xaa>
 800611a:	bf00      	nop
 800611c:	20001210 	.word	0x20001210

08006120 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006120:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006124:	bb42      	cbnz	r2, 8006178 <osMutexAcquire+0x58>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006126:	b510      	push	{r4, lr}
 8006128:	4603      	mov	r3, r0
 800612a:	460c      	mov	r4, r1
 800612c:	f020 0001 	bic.w	r0, r0, #1
 8006130:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006134:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8006138:	bb0a      	cbnz	r2, 800617e <osMutexAcquire+0x5e>
 800613a:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <osMutexAcquire+0x80>)
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	2a02      	cmp	r2, #2
 8006140:	d00a      	beq.n	8006158 <osMutexAcquire+0x38>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006142:	b1f8      	cbz	r0, 8006184 <osMutexAcquire+0x64>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8006144:	b17b      	cbz	r3, 8006166 <osMutexAcquire+0x46>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006146:	4621      	mov	r1, r4
 8006148:	f000 ff34 	bl	8006fb4 <xQueueTakeMutexRecursive>
 800614c:	2801      	cmp	r0, #1
 800614e:	d01c      	beq.n	800618a <osMutexAcquire+0x6a>
        if (timeout != 0U) {
 8006150:	b1ec      	cbz	r4, 800618e <osMutexAcquire+0x6e>
          stat = osErrorTimeout;
 8006152:	f06f 0001 	mvn.w	r0, #1
 8006156:	e019      	b.n	800618c <osMutexAcquire+0x6c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006158:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 800615c:	2a00      	cmp	r2, #0
 800615e:	d0f0      	beq.n	8006142 <osMutexAcquire+0x22>
    stat = osErrorISR;
 8006160:	f06f 0005 	mvn.w	r0, #5
 8006164:	e012      	b.n	800618c <osMutexAcquire+0x6c>
          stat = osErrorResource;
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006166:	4621      	mov	r1, r4
 8006168:	f000 fe51 	bl	8006e0e <xQueueSemaphoreTake>
 800616c:	2801      	cmp	r0, #1
 800616e:	d011      	beq.n	8006194 <osMutexAcquire+0x74>
        if (timeout != 0U) {
 8006170:	b194      	cbz	r4, 8006198 <osMutexAcquire+0x78>
          stat = osErrorTimeout;
 8006172:	f06f 0001 	mvn.w	r0, #1
 8006176:	e009      	b.n	800618c <osMutexAcquire+0x6c>
    stat = osErrorISR;
 8006178:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800617c:	4770      	bx	lr
    stat = osErrorISR;
 800617e:	f06f 0005 	mvn.w	r0, #5
 8006182:	e003      	b.n	800618c <osMutexAcquire+0x6c>
    stat = osErrorParameter;
 8006184:	f06f 0003 	mvn.w	r0, #3
 8006188:	e000      	b.n	800618c <osMutexAcquire+0x6c>
  stat = osOK;
 800618a:	2000      	movs	r0, #0
}
 800618c:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 800618e:	f06f 0002 	mvn.w	r0, #2
 8006192:	e7fb      	b.n	800618c <osMutexAcquire+0x6c>
  stat = osOK;
 8006194:	2000      	movs	r0, #0
 8006196:	e7f9      	b.n	800618c <osMutexAcquire+0x6c>
          stat = osErrorResource;
 8006198:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800619c:	e7f6      	b.n	800618c <osMutexAcquire+0x6c>
 800619e:	bf00      	nop
 80061a0:	20001210 	.word	0x20001210

080061a4 <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061a4:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80061a8:	bb22      	cbnz	r2, 80061f4 <osMutexRelease+0x50>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80061aa:	b508      	push	{r3, lr}
 80061ac:	4603      	mov	r3, r0
 80061ae:	f020 0001 	bic.w	r0, r0, #1
 80061b2:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b6:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80061ba:	b9f2      	cbnz	r2, 80061fa <osMutexRelease+0x56>
 80061bc:	4a15      	ldr	r2, [pc, #84]	; (8006214 <osMutexRelease+0x70>)
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	2a02      	cmp	r2, #2
 80061c2:	d007      	beq.n	80061d4 <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80061c4:	b1e0      	cbz	r0, 8006200 <osMutexRelease+0x5c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80061c6:	b163      	cbz	r3, 80061e2 <osMutexRelease+0x3e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80061c8:	f000 fcec 	bl	8006ba4 <xQueueGiveMutexRecursive>
 80061cc:	2801      	cmp	r0, #1
 80061ce:	d11a      	bne.n	8006206 <osMutexRelease+0x62>
  stat = osOK;
 80061d0:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80061d2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061d4:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80061d8:	2a00      	cmp	r2, #0
 80061da:	d0f3      	beq.n	80061c4 <osMutexRelease+0x20>
    stat = osErrorISR;
 80061dc:	f06f 0005 	mvn.w	r0, #5
 80061e0:	e7f7      	b.n	80061d2 <osMutexRelease+0x2e>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061e2:	2300      	movs	r3, #0
 80061e4:	461a      	mov	r2, r3
 80061e6:	4619      	mov	r1, r3
 80061e8:	f000 fbf2 	bl	80069d0 <xQueueGenericSend>
 80061ec:	2801      	cmp	r0, #1
 80061ee:	d10d      	bne.n	800620c <osMutexRelease+0x68>
  stat = osOK;
 80061f0:	2000      	movs	r0, #0
 80061f2:	e7ee      	b.n	80061d2 <osMutexRelease+0x2e>
    stat = osErrorISR;
 80061f4:	f06f 0005 	mvn.w	r0, #5
}
 80061f8:	4770      	bx	lr
    stat = osErrorISR;
 80061fa:	f06f 0005 	mvn.w	r0, #5
 80061fe:	e7e8      	b.n	80061d2 <osMutexRelease+0x2e>
    stat = osErrorParameter;
 8006200:	f06f 0003 	mvn.w	r0, #3
 8006204:	e7e5      	b.n	80061d2 <osMutexRelease+0x2e>
        stat = osErrorResource;
 8006206:	f06f 0002 	mvn.w	r0, #2
 800620a:	e7e2      	b.n	80061d2 <osMutexRelease+0x2e>
        stat = osErrorResource;
 800620c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8006210:	e7df      	b.n	80061d2 <osMutexRelease+0x2e>
 8006212:	bf00      	nop
 8006214:	20001210 	.word	0x20001210

08006218 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006218:	b530      	push	{r4, r5, lr}
 800621a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800621c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006220:	2b00      	cmp	r3, #0
 8006222:	d149      	bne.n	80062b8 <osMessageQueueNew+0xa0>
 8006224:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006226:	f3ef 8310 	mrs	r3, PRIMASK
 800622a:	2b00      	cmp	r3, #0
 800622c:	d148      	bne.n	80062c0 <osMessageQueueNew+0xa8>
 800622e:	4b28      	ldr	r3, [pc, #160]	; (80062d0 <osMessageQueueNew+0xb8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d021      	beq.n	800627a <osMessageQueueNew+0x62>
 8006236:	2800      	cmp	r0, #0
 8006238:	d044      	beq.n	80062c4 <osMessageQueueNew+0xac>
 800623a:	2900      	cmp	r1, #0
 800623c:	d044      	beq.n	80062c8 <osMessageQueueNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 800623e:	b3a5      	cbz	r5, 80062aa <osMessageQueueNew+0x92>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006240:	68ab      	ldr	r3, [r5, #8]
 8006242:	b153      	cbz	r3, 800625a <osMessageQueueNew+0x42>
 8006244:	68ea      	ldr	r2, [r5, #12]
 8006246:	2a4f      	cmp	r2, #79	; 0x4f
 8006248:	d907      	bls.n	800625a <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800624a:	692a      	ldr	r2, [r5, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800624c:	b12a      	cbz	r2, 800625a <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800624e:	fb01 f400 	mul.w	r4, r1, r0
 8006252:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8006256:	45a4      	cmp	ip, r4
 8006258:	d221      	bcs.n	800629e <osMessageQueueNew+0x86>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800625a:	b1a3      	cbz	r3, 8006286 <osMessageQueueNew+0x6e>
    mem = -1;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8006260:	bba3      	cbnz	r3, 80062cc <osMessageQueueNew+0xb4>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006262:	2200      	movs	r2, #0
 8006264:	f000 fb8d 	bl	8006982 <xQueueGenericCreate>
 8006268:	4604      	mov	r4, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800626a:	b334      	cbz	r4, 80062ba <osMessageQueueNew+0xa2>
      if (attr != NULL) {
 800626c:	b105      	cbz	r5, 8006270 <osMessageQueueNew+0x58>
        name = attr->name;
 800626e:	682d      	ldr	r5, [r5, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8006270:	4629      	mov	r1, r5
 8006272:	4620      	mov	r0, r4
 8006274:	f000 ff16 	bl	80070a4 <vQueueAddToRegistry>
 8006278:	e01f      	b.n	80062ba <osMessageQueueNew+0xa2>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800627a:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0d9      	beq.n	8006236 <osMessageQueueNew+0x1e>
  hQueue = NULL;
 8006282:	2400      	movs	r4, #0
 8006284:	e019      	b.n	80062ba <osMessageQueueNew+0xa2>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006286:	68eb      	ldr	r3, [r5, #12]
 8006288:	b98b      	cbnz	r3, 80062ae <osMessageQueueNew+0x96>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800628a:	692b      	ldr	r3, [r5, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800628c:	b113      	cbz	r3, 8006294 <osMessageQueueNew+0x7c>
    mem = -1;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	e7e5      	b.n	8006260 <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006294:	696b      	ldr	r3, [r5, #20]
 8006296:	b16b      	cbz	r3, 80062b4 <osMessageQueueNew+0x9c>
    mem = -1;
 8006298:	f04f 33ff 	mov.w	r3, #4294967295
 800629c:	e7e0      	b.n	8006260 <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800629e:	2400      	movs	r4, #0
 80062a0:	9400      	str	r4, [sp, #0]
 80062a2:	f000 fb25 	bl	80068f0 <xQueueGenericCreateStatic>
 80062a6:	4604      	mov	r4, r0
 80062a8:	e7df      	b.n	800626a <osMessageQueueNew+0x52>
      mem = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	e7d8      	b.n	8006260 <osMessageQueueNew+0x48>
    mem = -1;
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	e7d5      	b.n	8006260 <osMessageQueueNew+0x48>
          mem = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e7d3      	b.n	8006260 <osMessageQueueNew+0x48>
  hQueue = NULL;
 80062b8:	2400      	movs	r4, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80062ba:	4620      	mov	r0, r4
 80062bc:	b003      	add	sp, #12
 80062be:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 80062c0:	2400      	movs	r4, #0
 80062c2:	e7fa      	b.n	80062ba <osMessageQueueNew+0xa2>
 80062c4:	2400      	movs	r4, #0
 80062c6:	e7f8      	b.n	80062ba <osMessageQueueNew+0xa2>
 80062c8:	2400      	movs	r4, #0
 80062ca:	e7f6      	b.n	80062ba <osMessageQueueNew+0xa2>
 80062cc:	2400      	movs	r4, #0
  return ((osMessageQueueId_t)hQueue);
 80062ce:	e7f4      	b.n	80062ba <osMessageQueueNew+0xa2>
 80062d0:	20001210 	.word	0x20001210

080062d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80062d4:	b510      	push	{r4, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062da:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80062de:	b9b3      	cbnz	r3, 800630e <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e0:	f3ef 8310 	mrs	r3, PRIMASK
 80062e4:	b99b      	cbnz	r3, 800630e <osMessageQueuePut+0x3a>
 80062e6:	4b22      	ldr	r3, [pc, #136]	; (8006370 <osMessageQueuePut+0x9c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d00b      	beq.n	8006306 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80062ee:	b398      	cbz	r0, 8006358 <osMessageQueuePut+0x84>
 80062f0:	b3a9      	cbz	r1, 800635e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80062f2:	2300      	movs	r3, #0
 80062f4:	4622      	mov	r2, r4
 80062f6:	f000 fb6b 	bl	80069d0 <xQueueGenericSend>
 80062fa:	2801      	cmp	r0, #1
 80062fc:	d032      	beq.n	8006364 <osMessageQueuePut+0x90>
        if (timeout != 0U) {
 80062fe:	b39c      	cbz	r4, 8006368 <osMessageQueuePut+0x94>
          stat = osErrorTimeout;
 8006300:	f06f 0001 	mvn.w	r0, #1
 8006304:	e01a      	b.n	800633c <osMessageQueuePut+0x68>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006306:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0ef      	beq.n	80062ee <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800630e:	b1b8      	cbz	r0, 8006340 <osMessageQueuePut+0x6c>
 8006310:	b1c9      	cbz	r1, 8006346 <osMessageQueuePut+0x72>
 8006312:	b9dc      	cbnz	r4, 800634c <osMessageQueuePut+0x78>
      yield = pdFALSE;
 8006314:	2300      	movs	r3, #0
 8006316:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006318:	aa01      	add	r2, sp, #4
 800631a:	f000 fc63 	bl	8006be4 <xQueueGenericSendFromISR>
 800631e:	2801      	cmp	r0, #1
 8006320:	d117      	bne.n	8006352 <osMessageQueuePut+0x7e>
        portYIELD_FROM_ISR (yield);
 8006322:	9801      	ldr	r0, [sp, #4]
 8006324:	b150      	cbz	r0, 800633c <osMessageQueuePut+0x68>
 8006326:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800632a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800633a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800633c:	b002      	add	sp, #8
 800633e:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8006340:	f06f 0003 	mvn.w	r0, #3
 8006344:	e7fa      	b.n	800633c <osMessageQueuePut+0x68>
 8006346:	f06f 0003 	mvn.w	r0, #3
 800634a:	e7f7      	b.n	800633c <osMessageQueuePut+0x68>
 800634c:	f06f 0003 	mvn.w	r0, #3
 8006350:	e7f4      	b.n	800633c <osMessageQueuePut+0x68>
        stat = osErrorResource;
 8006352:	f06f 0002 	mvn.w	r0, #2
 8006356:	e7f1      	b.n	800633c <osMessageQueuePut+0x68>
      stat = osErrorParameter;
 8006358:	f06f 0003 	mvn.w	r0, #3
 800635c:	e7ee      	b.n	800633c <osMessageQueuePut+0x68>
 800635e:	f06f 0003 	mvn.w	r0, #3
 8006362:	e7eb      	b.n	800633c <osMessageQueuePut+0x68>
  stat = osOK;
 8006364:	2000      	movs	r0, #0
 8006366:	e7e9      	b.n	800633c <osMessageQueuePut+0x68>
          stat = osErrorResource;
 8006368:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800636c:	e7e6      	b.n	800633c <osMessageQueuePut+0x68>
 800636e:	bf00      	nop
 8006370:	20001210 	.word	0x20001210

08006374 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006374:	b510      	push	{r4, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800637a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800637e:	b9ab      	cbnz	r3, 80063ac <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006380:	f3ef 8310 	mrs	r3, PRIMASK
 8006384:	b993      	cbnz	r3, 80063ac <osMessageQueueGet+0x38>
 8006386:	4b21      	ldr	r3, [pc, #132]	; (800640c <osMessageQueueGet+0x98>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d00a      	beq.n	80063a4 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800638e:	b390      	cbz	r0, 80063f6 <osMessageQueueGet+0x82>
 8006390:	b3a1      	cbz	r1, 80063fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006392:	4622      	mov	r2, r4
 8006394:	f000 fc8c 	bl	8006cb0 <xQueueReceive>
 8006398:	2801      	cmp	r0, #1
 800639a:	d032      	beq.n	8006402 <osMessageQueueGet+0x8e>
        if (timeout != 0U) {
 800639c:	b39c      	cbz	r4, 8006406 <osMessageQueueGet+0x92>
          stat = osErrorTimeout;
 800639e:	f06f 0001 	mvn.w	r0, #1
 80063a2:	e01a      	b.n	80063da <osMessageQueueGet+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063a4:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f0      	beq.n	800638e <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063ac:	b1b8      	cbz	r0, 80063de <osMessageQueueGet+0x6a>
 80063ae:	b1c9      	cbz	r1, 80063e4 <osMessageQueueGet+0x70>
 80063b0:	b9dc      	cbnz	r4, 80063ea <osMessageQueueGet+0x76>
      yield = pdFALSE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80063b6:	aa01      	add	r2, sp, #4
 80063b8:	f000 fe1c 	bl	8006ff4 <xQueueReceiveFromISR>
 80063bc:	2801      	cmp	r0, #1
 80063be:	d117      	bne.n	80063f0 <osMessageQueueGet+0x7c>
        portYIELD_FROM_ISR (yield);
 80063c0:	9801      	ldr	r0, [sp, #4]
 80063c2:	b150      	cbz	r0, 80063da <osMessageQueueGet+0x66>
 80063c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80063d8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80063da:	b002      	add	sp, #8
 80063dc:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 80063de:	f06f 0003 	mvn.w	r0, #3
 80063e2:	e7fa      	b.n	80063da <osMessageQueueGet+0x66>
 80063e4:	f06f 0003 	mvn.w	r0, #3
 80063e8:	e7f7      	b.n	80063da <osMessageQueueGet+0x66>
 80063ea:	f06f 0003 	mvn.w	r0, #3
 80063ee:	e7f4      	b.n	80063da <osMessageQueueGet+0x66>
        stat = osErrorResource;
 80063f0:	f06f 0002 	mvn.w	r0, #2
 80063f4:	e7f1      	b.n	80063da <osMessageQueueGet+0x66>
      stat = osErrorParameter;
 80063f6:	f06f 0003 	mvn.w	r0, #3
 80063fa:	e7ee      	b.n	80063da <osMessageQueueGet+0x66>
 80063fc:	f06f 0003 	mvn.w	r0, #3
 8006400:	e7eb      	b.n	80063da <osMessageQueueGet+0x66>
  stat = osOK;
 8006402:	2000      	movs	r0, #0
 8006404:	e7e9      	b.n	80063da <osMessageQueueGet+0x66>
          stat = osErrorResource;
 8006406:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800640a:	e7e6      	b.n	80063da <osMessageQueueGet+0x66>
 800640c:	20001210 	.word	0x20001210

08006410 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006410:	4b03      	ldr	r3, [pc, #12]	; (8006420 <vApplicationGetIdleTaskMemory+0x10>)
 8006412:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <vApplicationGetIdleTaskMemory+0x14>)
 8006416:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006418:	2380      	movs	r3, #128	; 0x80
 800641a:	6013      	str	r3, [r2, #0]
}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	200011ac 	.word	0x200011ac
 8006424:	20000fac 	.word	0x20000fac

08006428 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006428:	4b03      	ldr	r3, [pc, #12]	; (8006438 <vApplicationGetTimerTaskMemory+0x10>)
 800642a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800642c:	4b03      	ldr	r3, [pc, #12]	; (800643c <vApplicationGetTimerTaskMemory+0x14>)
 800642e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006434:	6013      	str	r3, [r2, #0]
}
 8006436:	4770      	bx	lr
 8006438:	20001614 	.word	0x20001614
 800643c:	20001214 	.word	0x20001214

08006440 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8006440:	b91a      	cbnz	r2, 800644a <prvTestWaitCondition+0xa>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006442:	4208      	tst	r0, r1
 8006444:	d105      	bne.n	8006452 <prvTestWaitCondition+0x12>
BaseType_t xWaitConditionMet = pdFALSE;
 8006446:	4610      	mov	r0, r2
 8006448:	4770      	bx	lr
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800644a:	4381      	bics	r1, r0
 800644c:	d003      	beq.n	8006456 <prvTestWaitCondition+0x16>
BaseType_t xWaitConditionMet = pdFALSE;
 800644e:	2000      	movs	r0, #0
 8006450:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
 8006452:	2001      	movs	r0, #1
 8006454:	4770      	bx	lr
		{
			xWaitConditionMet = pdTRUE;
 8006456:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
 8006458:	4770      	bx	lr

0800645a <xEventGroupCreateStatic>:
		configASSERT( pxEventGroupBuffer );
 800645a:	b180      	cbz	r0, 800647e <xEventGroupCreateStatic+0x24>
	{
 800645c:	b510      	push	{r4, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	4604      	mov	r4, r0
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006462:	2320      	movs	r3, #32
 8006464:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006466:	9b01      	ldr	r3, [sp, #4]
 8006468:	2b20      	cmp	r3, #32
 800646a:	d011      	beq.n	8006490 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	e7fe      	b.n	800647c <xEventGroupCreateStatic+0x22>
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 800648e:	e7fe      	b.n	800648e <xEventGroupCreateStatic+0x34>
			pxEventBits->uxEventBits = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006496:	f000 f8eb 	bl	8006670 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800649a:	2301      	movs	r3, #1
 800649c:	7723      	strb	r3, [r4, #28]
	}
 800649e:	4620      	mov	r0, r4
 80064a0:	b002      	add	sp, #8
 80064a2:	bd10      	pop	{r4, pc}

080064a4 <xEventGroupCreate>:
	{
 80064a4:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80064a6:	2020      	movs	r0, #32
 80064a8:	f002 f876 	bl	8008598 <pvPortMalloc>
		if( pxEventBits != NULL )
 80064ac:	4604      	mov	r4, r0
 80064ae:	b128      	cbz	r0, 80064bc <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 80064b0:	2500      	movs	r5, #0
 80064b2:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80064b6:	f000 f8db 	bl	8006670 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80064ba:	7725      	strb	r5, [r4, #28]
	}
 80064bc:	4620      	mov	r0, r4
 80064be:	bd38      	pop	{r3, r4, r5, pc}

080064c0 <xEventGroupWaitBits>:
{
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 80064c4:	b178      	cbz	r0, 80064e6 <xEventGroupWaitBits+0x26>
 80064c6:	460c      	mov	r4, r1
 80064c8:	4616      	mov	r6, r2
 80064ca:	461d      	mov	r5, r3
 80064cc:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80064ce:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80064d2:	d011      	beq.n	80064f8 <xEventGroupWaitBits+0x38>
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	e7fe      	b.n	80064e4 <xEventGroupWaitBits+0x24>
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80064f6:	e7fe      	b.n	80064f6 <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 80064f8:	b941      	cbnz	r1, 800650c <xEventGroupWaitBits+0x4c>
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	e7fe      	b.n	800650a <xEventGroupWaitBits+0x4a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800650c:	f001 fb3c 	bl	8007b88 <xTaskGetSchedulerState>
 8006510:	b950      	cbnz	r0, 8006528 <xEventGroupWaitBits+0x68>
 8006512:	9b08      	ldr	r3, [sp, #32]
 8006514:	b143      	cbz	r3, 8006528 <xEventGroupWaitBits+0x68>
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	e7fe      	b.n	8006526 <xEventGroupWaitBits+0x66>
	vTaskSuspendAll();
 8006528:	f001 f838 	bl	800759c <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800652c:	f8d7 9000 	ldr.w	r9, [r7]
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006530:	462a      	mov	r2, r5
 8006532:	4621      	mov	r1, r4
 8006534:	4648      	mov	r0, r9
 8006536:	f7ff ff83 	bl	8006440 <prvTestWaitCondition>
		if( xWaitConditionMet != pdFALSE )
 800653a:	b1f0      	cbz	r0, 800657a <xEventGroupWaitBits+0xba>
			if( xClearOnExit != pdFALSE )
 800653c:	b116      	cbz	r6, 8006544 <xEventGroupWaitBits+0x84>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800653e:	ea29 0304 	bic.w	r3, r9, r4
 8006542:	603b      	str	r3, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8006544:	f001 f8c4 	bl	80076d0 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8006548:	f1b8 0f00 	cmp.w	r8, #0
 800654c:	d012      	beq.n	8006574 <xEventGroupWaitBits+0xb4>
		if( xAlreadyYielded == pdFALSE )
 800654e:	b948      	cbnz	r0, 8006564 <xEventGroupWaitBits+0xa4>
			portYIELD_WITHIN_API();
 8006550:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006558:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8006564:	f001 fc04 	bl	8007d70 <uxTaskResetEventItemValue>
 8006568:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800656a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800656e:	d01a      	beq.n	80065a6 <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006570:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 8006574:	4648      	mov	r0, r9
 8006576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800657a:	9b08      	ldr	r3, [sp, #32]
 800657c:	b183      	cbz	r3, 80065a0 <xEventGroupWaitBits+0xe0>
			if( xClearOnExit != pdFALSE )
 800657e:	b966      	cbnz	r6, 800659a <xEventGroupWaitBits+0xda>
EventBits_t uxReturn, uxControlBits = 0;
 8006580:	4641      	mov	r1, r8
			if( xWaitForAllBits != pdFALSE )
 8006582:	b10d      	cbz	r5, 8006588 <xEventGroupWaitBits+0xc8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006584:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006588:	9a08      	ldr	r2, [sp, #32]
 800658a:	4321      	orrs	r1, r4
 800658c:	1d38      	adds	r0, r7, #4
 800658e:	f001 f9cf 	bl	8007930 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;
 8006592:	46c1      	mov	r9, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006598:	e7d4      	b.n	8006544 <xEventGroupWaitBits+0x84>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800659a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800659e:	e7f0      	b.n	8006582 <xEventGroupWaitBits+0xc2>
 80065a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a4:	e7ce      	b.n	8006544 <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
 80065a6:	f001 fe7d 	bl	80082a4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80065aa:	f8d7 9000 	ldr.w	r9, [r7]
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80065ae:	462a      	mov	r2, r5
 80065b0:	4621      	mov	r1, r4
 80065b2:	4648      	mov	r0, r9
 80065b4:	f7ff ff44 	bl	8006440 <prvTestWaitCondition>
 80065b8:	b118      	cbz	r0, 80065c2 <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80065ba:	b116      	cbz	r6, 80065c2 <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80065bc:	ea29 0404 	bic.w	r4, r9, r4
 80065c0:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 80065c2:	f001 fe91 	bl	80082e8 <vPortExitCritical>
 80065c6:	e7d3      	b.n	8006570 <xEventGroupWaitBits+0xb0>

080065c8 <xEventGroupSetBits>:
{
 80065c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 80065ca:	b168      	cbz	r0, 80065e8 <xEventGroupSetBits+0x20>
 80065cc:	460d      	mov	r5, r1
 80065ce:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80065d0:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 80065d4:	d011      	beq.n	80065fa <xEventGroupSetBits+0x32>
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	e7fe      	b.n	80065e6 <xEventGroupSetBits+0x1e>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80065f8:	e7fe      	b.n	80065f8 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065fa:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 80065fe:	f000 ffcd 	bl	800759c <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006602:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	432b      	orrs	r3, r5
 8006608:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 800660a:	e00a      	b.n	8006622 <xEventGroupSetBits+0x5a>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800660c:	6821      	ldr	r1, [r4, #0]
 800660e:	ea32 0101 	bics.w	r1, r2, r1
 8006612:	d105      	bne.n	8006620 <xEventGroupSetBits+0x58>
 8006614:	e011      	b.n	800663a <xEventGroupSetBits+0x72>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006616:	6821      	ldr	r1, [r4, #0]
 8006618:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800661c:	f001 fa16 	bl	8007a4c <vTaskRemoveFromUnorderedEventList>
{
 8006620:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 8006622:	42b0      	cmp	r0, r6
 8006624:	d00e      	beq.n	8006644 <xEventGroupSetBits+0x7c>
			pxNext = listGET_NEXT( pxListItem );
 8006626:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006628:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800662a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800662e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8006632:	d1eb      	bne.n	800660c <xEventGroupSetBits+0x44>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006634:	6821      	ldr	r1, [r4, #0]
 8006636:	4211      	tst	r1, r2
 8006638:	d0f2      	beq.n	8006620 <xEventGroupSetBits+0x58>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800663a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800663e:	d0ea      	beq.n	8006616 <xEventGroupSetBits+0x4e>
					uxBitsToClear |= uxBitsWaitedFor;
 8006640:	4317      	orrs	r7, r2
 8006642:	e7e8      	b.n	8006616 <xEventGroupSetBits+0x4e>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	ea23 0307 	bic.w	r3, r3, r7
 800664a:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800664c:	f001 f840 	bl	80076d0 <xTaskResumeAll>
}
 8006650:	6820      	ldr	r0, [r4, #0]
 8006652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006654 <vEventGroupSetBitsCallback>:
{
 8006654:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8006656:	f7ff ffb7 	bl	80065c8 <xEventGroupSetBits>
}
 800665a:	bd08      	pop	{r3, pc}

0800665c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800665c:	b508      	push	{r3, lr}
 800665e:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8006660:	460a      	mov	r2, r1
 8006662:	4601      	mov	r1, r0
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <xEventGroupSetBitsFromISR+0x10>)
 8006666:	f001 fdb5 	bl	80081d4 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 800666a:	bd08      	pop	{r3, pc}
 800666c:	08006655 	.word	0x08006655

08006670 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006670:	f100 0308 	add.w	r3, r0, #8
 8006674:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006676:	f04f 32ff 	mov.w	r2, #4294967295
 800667a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006684:	4770      	bx	lr

08006686 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800668a:	4770      	bx	lr

0800668c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800668c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800668e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006694:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006696:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006698:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800669a:	6803      	ldr	r3, [r0, #0]
 800669c:	3301      	adds	r3, #1
 800669e:	6003      	str	r3, [r0, #0]
}
 80066a0:	4770      	bx	lr

080066a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066a2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066a4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066a6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80066aa:	d011      	beq.n	80066d0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ac:	f100 0308 	add.w	r3, r0, #8
 80066b0:	461c      	mov	r4, r3
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	42aa      	cmp	r2, r5
 80066b8:	d9fa      	bls.n	80066b0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066be:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066c0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80066c2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066c4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80066c6:	6803      	ldr	r3, [r0, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	6003      	str	r3, [r0, #0]
}
 80066cc:	bc30      	pop	{r4, r5}
 80066ce:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80066d0:	6904      	ldr	r4, [r0, #16]
 80066d2:	e7f2      	b.n	80066ba <vListInsert+0x18>

080066d4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80066d4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066d6:	6841      	ldr	r1, [r0, #4]
 80066d8:	6882      	ldr	r2, [r0, #8]
 80066da:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066dc:	6841      	ldr	r1, [r0, #4]
 80066de:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	4282      	cmp	r2, r0
 80066e4:	d006      	beq.n	80066f4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80066e6:	2200      	movs	r2, #0
 80066e8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	3a01      	subs	r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066f0:	6818      	ldr	r0, [r3, #0]
}
 80066f2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066f4:	6882      	ldr	r2, [r0, #8]
 80066f6:	605a      	str	r2, [r3, #4]
 80066f8:	e7f5      	b.n	80066e6 <uxListRemove+0x12>

080066fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80066fa:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80066fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80066fe:	b118      	cbz	r0, 8006708 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8006708:	4770      	bx	lr

0800670a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800670a:	b510      	push	{r4, lr}
 800670c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800670e:	f001 fdc9 	bl	80082a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006712:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006714:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006716:	429a      	cmp	r2, r3
 8006718:	d004      	beq.n	8006724 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800671a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800671c:	f001 fde4 	bl	80082e8 <vPortExitCritical>

	return xReturn;
}
 8006720:	4620      	mov	r0, r4
 8006722:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8006724:	2401      	movs	r4, #1
 8006726:	e7f9      	b.n	800671c <prvIsQueueFull+0x12>

08006728 <prvIsQueueEmpty>:
{
 8006728:	b510      	push	{r4, lr}
 800672a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800672c:	f001 fdba 	bl	80082a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006732:	b923      	cbnz	r3, 800673e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8006734:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8006736:	f001 fdd7 	bl	80082e8 <vPortExitCritical>
}
 800673a:	4620      	mov	r0, r4
 800673c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800673e:	2400      	movs	r4, #0
 8006740:	e7f9      	b.n	8006736 <prvIsQueueEmpty+0xe>

08006742 <prvCopyDataToQueue>:
{
 8006742:	b570      	push	{r4, r5, r6, lr}
 8006744:	4604      	mov	r4, r0
 8006746:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006748:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800674a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800674c:	b95a      	cbnz	r2, 8006766 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800674e:	6803      	ldr	r3, [r0, #0]
 8006750:	b11b      	cbz	r3, 800675a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8006752:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006754:	3601      	adds	r6, #1
 8006756:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8006758:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800675a:	6840      	ldr	r0, [r0, #4]
 800675c:	f001 fa70 	bl	8007c40 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	e7f6      	b.n	8006754 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8006766:	b96d      	cbnz	r5, 8006784 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006768:	6880      	ldr	r0, [r0, #8]
 800676a:	f002 f9e8 	bl	8008b3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800676e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006770:	68a3      	ldr	r3, [r4, #8]
 8006772:	4413      	add	r3, r2
 8006774:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006776:	6862      	ldr	r2, [r4, #4]
 8006778:	4293      	cmp	r3, r2
 800677a:	d319      	bcc.n	80067b0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8006780:	4628      	mov	r0, r5
 8006782:	e7e7      	b.n	8006754 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006784:	68c0      	ldr	r0, [r0, #12]
 8006786:	f002 f9da 	bl	8008b3e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800678a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800678c:	4251      	negs	r1, r2
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	4293      	cmp	r3, r2
 8006798:	d202      	bcs.n	80067a0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800679a:	6863      	ldr	r3, [r4, #4]
 800679c:	440b      	add	r3, r1
 800679e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80067a0:	2d02      	cmp	r5, #2
 80067a2:	d001      	beq.n	80067a8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80067a4:	2000      	movs	r0, #0
 80067a6:	e7d5      	b.n	8006754 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067a8:	b126      	cbz	r6, 80067b4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80067aa:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80067ac:	2000      	movs	r0, #0
 80067ae:	e7d1      	b.n	8006754 <prvCopyDataToQueue+0x12>
 80067b0:	4628      	mov	r0, r5
 80067b2:	e7cf      	b.n	8006754 <prvCopyDataToQueue+0x12>
 80067b4:	2000      	movs	r0, #0
 80067b6:	e7cd      	b.n	8006754 <prvCopyDataToQueue+0x12>

080067b8 <prvCopyDataFromQueue>:
{
 80067b8:	b508      	push	{r3, lr}
 80067ba:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80067be:	b162      	cbz	r2, 80067da <prvCopyDataFromQueue+0x22>
 80067c0:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80067c2:	68d9      	ldr	r1, [r3, #12]
 80067c4:	4411      	add	r1, r2
 80067c6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067c8:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80067cc:	4561      	cmp	r1, ip
 80067ce:	d301      	bcc.n	80067d4 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80067d0:	6819      	ldr	r1, [r3, #0]
 80067d2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80067d4:	68d9      	ldr	r1, [r3, #12]
 80067d6:	f002 f9b2 	bl	8008b3e <memcpy>
}
 80067da:	bd08      	pop	{r3, pc}

080067dc <prvUnlockQueue>:
{
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80067e0:	f001 fd60 	bl	80082a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80067e4:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80067e8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ea:	e001      	b.n	80067f0 <prvUnlockQueue+0x14>
			--cTxLock;
 80067ec:	3c01      	subs	r4, #1
 80067ee:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067f0:	2c00      	cmp	r4, #0
 80067f2:	dd0a      	ble.n	800680a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067f6:	b143      	cbz	r3, 800680a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067f8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80067fc:	f001 f8e0 	bl	80079c0 <xTaskRemoveFromEventList>
 8006800:	2800      	cmp	r0, #0
 8006802:	d0f3      	beq.n	80067ec <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8006804:	f001 f9b4 	bl	8007b70 <vTaskMissedYield>
 8006808:	e7f0      	b.n	80067ec <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800680a:	23ff      	movs	r3, #255	; 0xff
 800680c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006810:	f001 fd6a 	bl	80082e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006814:	f001 fd46 	bl	80082a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006818:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800681c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800681e:	e001      	b.n	8006824 <prvUnlockQueue+0x48>
				--cRxLock;
 8006820:	3c01      	subs	r4, #1
 8006822:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006824:	2c00      	cmp	r4, #0
 8006826:	dd0a      	ble.n	800683e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006828:	692b      	ldr	r3, [r5, #16]
 800682a:	b143      	cbz	r3, 800683e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800682c:	f105 0010 	add.w	r0, r5, #16
 8006830:	f001 f8c6 	bl	80079c0 <xTaskRemoveFromEventList>
 8006834:	2800      	cmp	r0, #0
 8006836:	d0f3      	beq.n	8006820 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8006838:	f001 f99a 	bl	8007b70 <vTaskMissedYield>
 800683c:	e7f0      	b.n	8006820 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800683e:	23ff      	movs	r3, #255	; 0xff
 8006840:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006844:	f001 fd50 	bl	80082e8 <vPortExitCritical>
}
 8006848:	bd38      	pop	{r3, r4, r5, pc}

0800684a <xQueueGenericReset>:
{
 800684a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800684c:	b1e0      	cbz	r0, 8006888 <xQueueGenericReset+0x3e>
 800684e:	460d      	mov	r5, r1
 8006850:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006852:	f001 fd27 	bl	80082a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800685a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800685c:	fb01 3002 	mla	r0, r1, r2, r3
 8006860:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006862:	2000      	movs	r0, #0
 8006864:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006866:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006868:	3a01      	subs	r2, #1
 800686a:	fb02 3301 	mla	r3, r2, r1, r3
 800686e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006870:	23ff      	movs	r3, #255	; 0xff
 8006872:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800687a:	b9fd      	cbnz	r5, 80068bc <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	b963      	cbnz	r3, 800689a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8006880:	f001 fd32 	bl	80082e8 <vPortExitCritical>
}
 8006884:	2001      	movs	r0, #1
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006898:	e7fe      	b.n	8006898 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800689a:	f104 0010 	add.w	r0, r4, #16
 800689e:	f001 f88f 	bl	80079c0 <xTaskRemoveFromEventList>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d0ec      	beq.n	8006880 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80068a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80068aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	e7e1      	b.n	8006880 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068bc:	f104 0010 	add.w	r0, r4, #16
 80068c0:	f7ff fed6 	bl	8006670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80068c8:	f7ff fed2 	bl	8006670 <vListInitialise>
 80068cc:	e7d8      	b.n	8006880 <xQueueGenericReset+0x36>

080068ce <prvInitialiseNewQueue>:
{
 80068ce:	b538      	push	{r3, r4, r5, lr}
 80068d0:	461d      	mov	r5, r3
 80068d2:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80068d4:	460b      	mov	r3, r1
 80068d6:	b949      	cbnz	r1, 80068ec <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068d8:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80068da:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068dc:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068de:	2101      	movs	r1, #1
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7ff ffb2 	bl	800684a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80068e6:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068ec:	6022      	str	r2, [r4, #0]
 80068ee:	e7f4      	b.n	80068da <prvInitialiseNewQueue+0xc>

080068f0 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068f0:	b940      	cbnz	r0, 8006904 <xQueueGenericCreateStatic+0x14>
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	e7fe      	b.n	8006902 <xQueueGenericCreateStatic+0x12>
	{
 8006904:	b510      	push	{r4, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	461c      	mov	r4, r3
 800690a:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800690c:	b153      	cbz	r3, 8006924 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800690e:	b192      	cbz	r2, 8006936 <xQueueGenericCreateStatic+0x46>
 8006910:	b989      	cbnz	r1, 8006936 <xQueueGenericCreateStatic+0x46>
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	e7fe      	b.n	8006922 <xQueueGenericCreateStatic+0x32>
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006934:	e7fe      	b.n	8006934 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006936:	b16a      	cbz	r2, 8006954 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006938:	2350      	movs	r3, #80	; 0x50
 800693a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	2b50      	cmp	r3, #80	; 0x50
 8006940:	d013      	beq.n	800696a <xQueueGenericCreateStatic+0x7a>
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	e7fe      	b.n	8006952 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006954:	2900      	cmp	r1, #0
 8006956:	d0ef      	beq.n	8006938 <xQueueGenericCreateStatic+0x48>
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	e7fe      	b.n	8006968 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800696a:	2301      	movs	r3, #1
 800696c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006970:	9400      	str	r4, [sp, #0]
 8006972:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006976:	4660      	mov	r0, ip
 8006978:	f7ff ffa9 	bl	80068ce <prvInitialiseNewQueue>
	}
 800697c:	4620      	mov	r0, r4
 800697e:	b004      	add	sp, #16
 8006980:	bd10      	pop	{r4, pc}

08006982 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006982:	b940      	cbnz	r0, 8006996 <xQueueGenericCreate+0x14>
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	e7fe      	b.n	8006994 <xQueueGenericCreate+0x12>
	{
 8006996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006998:	b083      	sub	sp, #12
 800699a:	460c      	mov	r4, r1
 800699c:	4615      	mov	r5, r2
 800699e:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 80069a0:	b1a1      	cbz	r1, 80069cc <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069a2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80069a6:	3050      	adds	r0, #80	; 0x50
 80069a8:	f001 fdf6 	bl	8008598 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80069ac:	4606      	mov	r6, r0
 80069ae:	b150      	cbz	r0, 80069c6 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069b6:	9000      	str	r0, [sp, #0]
 80069b8:	462b      	mov	r3, r5
 80069ba:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80069be:	4621      	mov	r1, r4
 80069c0:	4638      	mov	r0, r7
 80069c2:	f7ff ff84 	bl	80068ce <prvInitialiseNewQueue>
	}
 80069c6:	4630      	mov	r0, r6
 80069c8:	b003      	add	sp, #12
 80069ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 80069cc:	4608      	mov	r0, r1
 80069ce:	e7ea      	b.n	80069a6 <xQueueGenericCreate+0x24>

080069d0 <xQueueGenericSend>:
{
 80069d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d2:	b085      	sub	sp, #20
 80069d4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80069d6:	b188      	cbz	r0, 80069fc <xQueueGenericSend+0x2c>
 80069d8:	460f      	mov	r7, r1
 80069da:	461d      	mov	r5, r3
 80069dc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069de:	b1b1      	cbz	r1, 8006a0e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069e0:	2d02      	cmp	r5, #2
 80069e2:	d120      	bne.n	8006a26 <xQueueGenericSend+0x56>
 80069e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d01d      	beq.n	8006a26 <xQueueGenericSend+0x56>
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	e7fe      	b.n	80069fa <xQueueGenericSend+0x2a>
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0e5      	beq.n	80069e0 <xQueueGenericSend+0x10>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a26:	f001 f8af 	bl	8007b88 <xTaskGetSchedulerState>
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	b958      	cbnz	r0, 8006a46 <xQueueGenericSend+0x76>
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d048      	beq.n	8006ac6 <xQueueGenericSend+0xf6>
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericSend+0x74>
 8006a46:	2600      	movs	r6, #0
 8006a48:	e03d      	b.n	8006ac6 <xQueueGenericSend+0xf6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	4639      	mov	r1, r7
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f7ff fe77 	bl	8006742 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a56:	b97b      	cbnz	r3, 8006a78 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8006a58:	b148      	cbz	r0, 8006a6e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8006a5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a62:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006a6e:	f001 fc3b 	bl	80082e8 <vPortExitCritical>
				return pdPASS;
 8006a72:	2001      	movs	r0, #1
}
 8006a74:	b005      	add	sp, #20
 8006a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006a7c:	f000 ffa0 	bl	80079c0 <xTaskRemoveFromEventList>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d0f4      	beq.n	8006a6e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8006a84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	e7e9      	b.n	8006a6e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8006a9a:	f001 fc25 	bl	80082e8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e7e8      	b.n	8006a74 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa2:	a802      	add	r0, sp, #8
 8006aa4:	f001 f816 	bl	8007ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aa8:	2601      	movs	r6, #1
 8006aaa:	e019      	b.n	8006ae0 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8006aac:	2300      	movs	r3, #0
 8006aae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006ab2:	e021      	b.n	8006af8 <xQueueGenericSend+0x128>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006aba:	e023      	b.n	8006b04 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7ff fe8d 	bl	80067dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac2:	f000 fe05 	bl	80076d0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006ac6:	f001 fbed 	bl	80082a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006acc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d3bb      	bcc.n	8006a4a <xQueueGenericSend+0x7a>
 8006ad2:	2d02      	cmp	r5, #2
 8006ad4:	d0b9      	beq.n	8006a4a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad6:	9b01      	ldr	r3, [sp, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0de      	beq.n	8006a9a <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8006adc:	2e00      	cmp	r6, #0
 8006ade:	d0e0      	beq.n	8006aa2 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8006ae0:	f001 fc02 	bl	80082e8 <vPortExitCritical>
		vTaskSuspendAll();
 8006ae4:	f000 fd5a 	bl	800759c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ae8:	f001 fbdc 	bl	80082a4 <vPortEnterCritical>
 8006aec:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8006af0:	b252      	sxtb	r2, r2
 8006af2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006af6:	d0d9      	beq.n	8006aac <xQueueGenericSend+0xdc>
 8006af8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8006afc:	b252      	sxtb	r2, r2
 8006afe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006b02:	d0d7      	beq.n	8006ab4 <xQueueGenericSend+0xe4>
 8006b04:	f001 fbf0 	bl	80082e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b08:	a901      	add	r1, sp, #4
 8006b0a:	a802      	add	r0, sp, #8
 8006b0c:	f000 ffee 	bl	8007aec <xTaskCheckForTimeOut>
 8006b10:	b9d8      	cbnz	r0, 8006b4a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b12:	4620      	mov	r0, r4
 8006b14:	f7ff fdf9 	bl	800670a <prvIsQueueFull>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d0cf      	beq.n	8006abc <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b1c:	9901      	ldr	r1, [sp, #4]
 8006b1e:	f104 0010 	add.w	r0, r4, #16
 8006b22:	f000 feed 	bl	8007900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b26:	4620      	mov	r0, r4
 8006b28:	f7ff fe58 	bl	80067dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b2c:	f000 fdd0 	bl	80076d0 <xTaskResumeAll>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d1c8      	bne.n	8006ac6 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8006b34:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	e7bd      	b.n	8006ac6 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7ff fe46 	bl	80067dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b50:	f000 fdbe 	bl	80076d0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006b54:	2000      	movs	r0, #0
 8006b56:	e78d      	b.n	8006a74 <xQueueGenericSend+0xa4>

08006b58 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8006b58:	b148      	cbz	r0, 8006b6e <prvInitialiseMutex+0x16>
	{
 8006b5a:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b60:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006b62:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b64:	460b      	mov	r3, r1
 8006b66:	460a      	mov	r2, r1
 8006b68:	f7ff ff32 	bl	80069d0 <xQueueGenericSend>
	}
 8006b6c:	bd08      	pop	{r3, pc}
 8006b6e:	4770      	bx	lr

08006b70 <xQueueCreateMutex>:
	{
 8006b70:	b510      	push	{r4, lr}
 8006b72:	4602      	mov	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b74:	2100      	movs	r1, #0
 8006b76:	2001      	movs	r0, #1
 8006b78:	f7ff ff03 	bl	8006982 <xQueueGenericCreate>
 8006b7c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8006b7e:	f7ff ffeb 	bl	8006b58 <prvInitialiseMutex>
	}
 8006b82:	4620      	mov	r0, r4
 8006b84:	bd10      	pop	{r4, pc}

08006b86 <xQueueCreateMutexStatic>:
	{
 8006b86:	b510      	push	{r4, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b8c:	9000      	str	r0, [sp, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4611      	mov	r1, r2
 8006b92:	2001      	movs	r0, #1
 8006b94:	f7ff feac 	bl	80068f0 <xQueueGenericCreateStatic>
 8006b98:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8006b9a:	f7ff ffdd 	bl	8006b58 <prvInitialiseMutex>
	}
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd10      	pop	{r4, pc}

08006ba4 <xQueueGiveMutexRecursive>:
	{
 8006ba4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006ba6:	b138      	cbz	r0, 8006bb8 <xQueueGiveMutexRecursive+0x14>
 8006ba8:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8006baa:	6845      	ldr	r5, [r0, #4]
 8006bac:	f000 ffe6 	bl	8007b7c <xTaskGetCurrentTaskHandle>
 8006bb0:	4285      	cmp	r5, r0
 8006bb2:	d00a      	beq.n	8006bca <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8006bb4:	2000      	movs	r0, #0
	}
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8006bc8:	e7fe      	b.n	8006bc8 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 8006bca:	68e3      	ldr	r3, [r4, #12]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006bd0:	b10b      	cbz	r3, 8006bd6 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8006bd2:	2001      	movs	r0, #1
		return xReturn;
 8006bd4:	e7ef      	b.n	8006bb6 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f7ff fef8 	bl	80069d0 <xQueueGenericSend>
			xReturn = pdPASS;
 8006be0:	2001      	movs	r0, #1
 8006be2:	e7e8      	b.n	8006bb6 <xQueueGiveMutexRecursive+0x12>

08006be4 <xQueueGenericSendFromISR>:
{
 8006be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006be8:	b190      	cbz	r0, 8006c10 <xQueueGenericSendFromISR+0x2c>
 8006bea:	460f      	mov	r7, r1
 8006bec:	4616      	mov	r6, r2
 8006bee:	461c      	mov	r4, r3
 8006bf0:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf2:	b1b1      	cbz	r1, 8006c22 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bf4:	2c02      	cmp	r4, #2
 8006bf6:	d120      	bne.n	8006c3a <xQueueGenericSendFromISR+0x56>
 8006bf8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d01d      	beq.n	8006c3a <xQueueGenericSendFromISR+0x56>
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	e7fe      	b.n	8006c0e <xQueueGenericSendFromISR+0x2a>
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006c20:	e7fe      	b.n	8006c20 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0e5      	beq.n	8006bf4 <xQueueGenericSendFromISR+0x10>
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	e7fe      	b.n	8006c38 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c3a:	f001 fc1d 	bl	8008478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c3e:	f3ef 8811 	mrs	r8, BASEPRI
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c52:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006c54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d306      	bcc.n	8006c68 <xQueueGenericSendFromISR+0x84>
 8006c5a:	2c02      	cmp	r4, #2
 8006c5c:	d004      	beq.n	8006c68 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8006c5e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c60:	f388 8811 	msr	BASEPRI, r8
}
 8006c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c68:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8006c6c:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c70:	4622      	mov	r2, r4
 8006c72:	4639      	mov	r1, r7
 8006c74:	4628      	mov	r0, r5
 8006c76:	f7ff fd64 	bl	8006742 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006c7a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006c7e:	d006      	beq.n	8006c8e <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c80:	f109 0301 	add.w	r3, r9, #1
 8006c84:	b25b      	sxtb	r3, r3
 8006c86:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e7e8      	b.n	8006c60 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c90:	b90b      	cbnz	r3, 8006c96 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8006c92:	2001      	movs	r0, #1
 8006c94:	e7e4      	b.n	8006c60 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c96:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006c9a:	f000 fe91 	bl	80079c0 <xTaskRemoveFromEventList>
 8006c9e:	b118      	cbz	r0, 8006ca8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006ca0:	b126      	cbz	r6, 8006cac <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	6030      	str	r0, [r6, #0]
 8006ca6:	e7db      	b.n	8006c60 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8006ca8:	2001      	movs	r0, #1
 8006caa:	e7d9      	b.n	8006c60 <xQueueGenericSendFromISR+0x7c>
 8006cac:	2001      	movs	r0, #1
 8006cae:	e7d7      	b.n	8006c60 <xQueueGenericSendFromISR+0x7c>

08006cb0 <xQueueReceive>:
{
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006cb6:	b190      	cbz	r0, 8006cde <xQueueReceive+0x2e>
 8006cb8:	460f      	mov	r7, r1
 8006cba:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cbc:	b1c1      	cbz	r1, 8006cf0 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cbe:	f000 ff63 	bl	8007b88 <xTaskGetSchedulerState>
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	bb00      	cbnz	r0, 8006d08 <xQueueReceive+0x58>
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d05e      	beq.n	8006d8a <xQueueReceive+0xda>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	e7fe      	b.n	8006cdc <xQueueReceive+0x2c>
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006cee:	e7fe      	b.n	8006cee <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cf0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0e3      	beq.n	8006cbe <xQueueReceive+0xe>
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	e7fe      	b.n	8006d06 <xQueueReceive+0x56>
 8006d08:	2600      	movs	r6, #0
 8006d0a:	e03e      	b.n	8006d8a <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff fd52 	bl	80067b8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d14:	3d01      	subs	r5, #1
 8006d16:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	b923      	cbnz	r3, 8006d26 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8006d1c:	f001 fae4 	bl	80082e8 <vPortExitCritical>
				return pdPASS;
 8006d20:	2001      	movs	r0, #1
}
 8006d22:	b005      	add	sp, #20
 8006d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d26:	f104 0010 	add.w	r0, r4, #16
 8006d2a:	f000 fe49 	bl	80079c0 <xTaskRemoveFromEventList>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d0f4      	beq.n	8006d1c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8006d32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	e7e9      	b.n	8006d1c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8006d48:	f001 face 	bl	80082e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	e7e8      	b.n	8006d22 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d50:	a802      	add	r0, sp, #8
 8006d52:	f000 febf 	bl	8007ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d56:	2601      	movs	r6, #1
 8006d58:	e021      	b.n	8006d9e <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006d60:	e029      	b.n	8006db6 <xQueueReceive+0x106>
 8006d62:	2300      	movs	r3, #0
 8006d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d68:	e02b      	b.n	8006dc2 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f7ff fd36 	bl	80067dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d70:	f000 fcae 	bl	80076d0 <xTaskResumeAll>
 8006d74:	e009      	b.n	8006d8a <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7ff fd30 	bl	80067dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d7c:	f000 fca8 	bl	80076d0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d80:	4620      	mov	r0, r4
 8006d82:	f7ff fcd1 	bl	8006728 <prvIsQueueEmpty>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d13f      	bne.n	8006e0a <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8006d8a:	f001 fa8b 	bl	80082a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d8e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d90:	2d00      	cmp	r5, #0
 8006d92:	d1bb      	bne.n	8006d0c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0d6      	beq.n	8006d48 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8006d9a:	2e00      	cmp	r6, #0
 8006d9c:	d0d8      	beq.n	8006d50 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8006d9e:	f001 faa3 	bl	80082e8 <vPortExitCritical>
		vTaskSuspendAll();
 8006da2:	f000 fbfb 	bl	800759c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006da6:	f001 fa7d 	bl	80082a4 <vPortEnterCritical>
 8006daa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006dae:	b25b      	sxtb	r3, r3
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d0d1      	beq.n	8006d5a <xQueueReceive+0xaa>
 8006db6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006dba:	b25b      	sxtb	r3, r3
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d0cf      	beq.n	8006d62 <xQueueReceive+0xb2>
 8006dc2:	f001 fa91 	bl	80082e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dc6:	a901      	add	r1, sp, #4
 8006dc8:	a802      	add	r0, sp, #8
 8006dca:	f000 fe8f 	bl	8007aec <xTaskCheckForTimeOut>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d1d1      	bne.n	8006d76 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f7ff fca8 	bl	8006728 <prvIsQueueEmpty>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d0c6      	beq.n	8006d6a <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ddc:	9901      	ldr	r1, [sp, #4]
 8006dde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006de2:	f000 fd8d 	bl	8007900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7ff fcf8 	bl	80067dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dec:	f000 fc70 	bl	80076d0 <xTaskResumeAll>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d1ca      	bne.n	8006d8a <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8006df4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	e7bf      	b.n	8006d8a <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e789      	b.n	8006d22 <xQueueReceive+0x72>

08006e0e <xQueueSemaphoreTake>:
{
 8006e0e:	b570      	push	{r4, r5, r6, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006e14:	b158      	cbz	r0, 8006e2e <xQueueSemaphoreTake+0x20>
 8006e16:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e18:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e1a:	b18b      	cbz	r3, 8006e40 <xQueueSemaphoreTake+0x32>
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	e7fe      	b.n	8006e2c <xQueueSemaphoreTake+0x1e>
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006e3e:	e7fe      	b.n	8006e3e <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e40:	f000 fea2 	bl	8007b88 <xTaskGetSchedulerState>
 8006e44:	4605      	mov	r5, r0
 8006e46:	b950      	cbnz	r0, 8006e5e <xQueueSemaphoreTake+0x50>
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	b15b      	cbz	r3, 8006e64 <xQueueSemaphoreTake+0x56>
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	e7fe      	b.n	8006e5c <xQueueSemaphoreTake+0x4e>
 8006e5e:	2600      	movs	r6, #0
 8006e60:	4635      	mov	r5, r6
 8006e62:	e055      	b.n	8006f10 <xQueueSemaphoreTake+0x102>
 8006e64:	4606      	mov	r6, r0
 8006e66:	e053      	b.n	8006f10 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	b13b      	cbz	r3, 8006e80 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e70:	6923      	ldr	r3, [r4, #16]
 8006e72:	b94b      	cbnz	r3, 8006e88 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8006e74:	f001 fa38 	bl	80082e8 <vPortExitCritical>
				return pdPASS;
 8006e78:	2601      	movs	r6, #1
}
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	b004      	add	sp, #16
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006e80:	f000 ff82 	bl	8007d88 <pvTaskIncrementMutexHeldCount>
 8006e84:	6060      	str	r0, [r4, #4]
 8006e86:	e7f3      	b.n	8006e70 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e88:	f104 0010 	add.w	r0, r4, #16
 8006e8c:	f000 fd98 	bl	80079c0 <xTaskRemoveFromEventList>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d0ef      	beq.n	8006e74 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8006e94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	e7e4      	b.n	8006e74 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006eaa:	b146      	cbz	r6, 8006ebe <xQueueSemaphoreTake+0xb0>
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	e7fe      	b.n	8006ebc <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8006ebe:	f001 fa13 	bl	80082e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006ec2:	e7da      	b.n	8006e7a <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ec4:	a802      	add	r0, sp, #8
 8006ec6:	f000 fe05 	bl	8007ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eca:	2501      	movs	r5, #1
 8006ecc:	e02a      	b.n	8006f24 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006ed4:	e032      	b.n	8006f3c <xQueueSemaphoreTake+0x12e>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006edc:	e034      	b.n	8006f48 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8006ede:	f001 f9e1 	bl	80082a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006ee2:	6860      	ldr	r0, [r4, #4]
 8006ee4:	f000 fe60 	bl	8007ba8 <xTaskPriorityInherit>
 8006ee8:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8006eea:	f001 f9fd 	bl	80082e8 <vPortExitCritical>
 8006eee:	e03b      	b.n	8006f68 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff fc73 	bl	80067dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ef6:	f000 fbeb 	bl	80076d0 <xTaskResumeAll>
 8006efa:	e009      	b.n	8006f10 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 8006efc:	4620      	mov	r0, r4
 8006efe:	f7ff fc6d 	bl	80067dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f02:	f000 fbe5 	bl	80076d0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f06:	4620      	mov	r0, r4
 8006f08:	f7ff fc0e 	bl	8006728 <prvIsQueueEmpty>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d142      	bne.n	8006f96 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8006f10:	f001 f9c8 	bl	80082a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1a6      	bne.n	8006e68 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f1a:	9b01      	ldr	r3, [sp, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0c4      	beq.n	8006eaa <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	d0cf      	beq.n	8006ec4 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8006f24:	f001 f9e0 	bl	80082e8 <vPortExitCritical>
		vTaskSuspendAll();
 8006f28:	f000 fb38 	bl	800759c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f2c:	f001 f9ba 	bl	80082a4 <vPortEnterCritical>
 8006f30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d0c8      	beq.n	8006ece <xQueueSemaphoreTake+0xc0>
 8006f3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006f40:	b25b      	sxtb	r3, r3
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d0c6      	beq.n	8006ed6 <xQueueSemaphoreTake+0xc8>
 8006f48:	f001 f9ce 	bl	80082e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f4c:	a901      	add	r1, sp, #4
 8006f4e:	a802      	add	r0, sp, #8
 8006f50:	f000 fdcc 	bl	8007aec <xTaskCheckForTimeOut>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d1d1      	bne.n	8006efc <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff fbe5 	bl	8006728 <prvIsQueueEmpty>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d0c6      	beq.n	8006ef0 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0ba      	beq.n	8006ede <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f68:	9901      	ldr	r1, [sp, #4]
 8006f6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f6e:	f000 fcc7 	bl	8007900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f72:	4620      	mov	r0, r4
 8006f74:	f7ff fc32 	bl	80067dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f78:	f000 fbaa 	bl	80076d0 <xTaskResumeAll>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d1c7      	bne.n	8006f10 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8006f80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f88:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	e7bc      	b.n	8006f10 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8006f96:	b90e      	cbnz	r6, 8006f9c <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8006f98:	2600      	movs	r6, #0
 8006f9a:	e76e      	b.n	8006e7a <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8006f9c:	f001 f982 	bl	80082a4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f7ff fbaa 	bl	80066fa <prvGetDisinheritPriorityAfterTimeout>
 8006fa6:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006fa8:	6860      	ldr	r0, [r4, #4]
 8006faa:	f000 fe91 	bl	8007cd0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006fae:	f001 f99b 	bl	80082e8 <vPortExitCritical>
 8006fb2:	e7f1      	b.n	8006f98 <xQueueSemaphoreTake+0x18a>

08006fb4 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8006fb4:	b180      	cbz	r0, 8006fd8 <xQueueTakeMutexRecursive+0x24>
	{
 8006fb6:	b570      	push	{r4, r5, r6, lr}
 8006fb8:	460c      	mov	r4, r1
 8006fba:	4605      	mov	r5, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006fbc:	6846      	ldr	r6, [r0, #4]
 8006fbe:	f000 fddd 	bl	8007b7c <xTaskGetCurrentTaskHandle>
 8006fc2:	4286      	cmp	r6, r0
 8006fc4:	d011      	beq.n	8006fea <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f7ff ff20 	bl	8006e0e <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006fce:	b180      	cbz	r0, 8006ff2 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.uxRecursiveCallCount )++;
 8006fd0:	68eb      	ldr	r3, [r5, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8006fd6:	e00c      	b.n	8006ff2 <xQueueTakeMutexRecursive+0x3e>
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8006fe8:	e7fe      	b.n	8006fe8 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.uxRecursiveCallCount )++;
 8006fea:	68eb      	ldr	r3, [r5, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8006ff0:	2001      	movs	r0, #1
	}
 8006ff2:	bd70      	pop	{r4, r5, r6, pc}

08006ff4 <xQueueReceiveFromISR>:
{
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006ff8:	b1b0      	cbz	r0, 8007028 <xQueueReceiveFromISR+0x34>
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	4690      	mov	r8, r2
 8006ffe:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007000:	b1d9      	cbz	r1, 800703a <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007002:	f001 fa39 	bl	8008478 <vPortValidateInterruptPriority>
	__asm volatile
 8007006:	f3ef 8711 	mrs	r7, BASEPRI
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800701a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800701c:	b9ce      	cbnz	r6, 8007052 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800701e:	2000      	movs	r0, #0
	__asm volatile
 8007020:	f387 8811 	msr	BASEPRI, r7
}
 8007024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007038:	e7fe      	b.n	8007038 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800703a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0e0      	beq.n	8007002 <xQueueReceiveFromISR+0xe>
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	e7fe      	b.n	8007050 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007052:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8007056:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800705a:	4629      	mov	r1, r5
 800705c:	4620      	mov	r0, r4
 800705e:	f7ff fbab 	bl	80067b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007062:	1e73      	subs	r3, r6, #1
 8007064:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007066:	f1b9 3fff 	cmp.w	r9, #4294967295
 800706a:	d006      	beq.n	800707a <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800706c:	f109 0301 	add.w	r3, r9, #1
 8007070:	b25b      	sxtb	r3, r3
 8007072:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8007076:	2001      	movs	r0, #1
 8007078:	e7d2      	b.n	8007020 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	b90b      	cbnz	r3, 8007082 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800707e:	2001      	movs	r0, #1
 8007080:	e7ce      	b.n	8007020 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007082:	f104 0010 	add.w	r0, r4, #16
 8007086:	f000 fc9b 	bl	80079c0 <xTaskRemoveFromEventList>
 800708a:	b130      	cbz	r0, 800709a <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800708c:	f1b8 0f00 	cmp.w	r8, #0
 8007090:	d005      	beq.n	800709e <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007092:	2001      	movs	r0, #1
 8007094:	f8c8 0000 	str.w	r0, [r8]
 8007098:	e7c2      	b.n	8007020 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800709a:	2001      	movs	r0, #1
 800709c:	e7c0      	b.n	8007020 <xQueueReceiveFromISR+0x2c>
 800709e:	2001      	movs	r0, #1
 80070a0:	e7be      	b.n	8007020 <xQueueReceiveFromISR+0x2c>
	...

080070a4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b07      	cmp	r3, #7
 80070a8:	d80c      	bhi.n	80070c4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070aa:	4a07      	ldr	r2, [pc, #28]	; (80070c8 <vQueueAddToRegistry+0x24>)
 80070ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80070b0:	b10a      	cbz	r2, 80070b6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070b2:	3301      	adds	r3, #1
 80070b4:	e7f7      	b.n	80070a6 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070b6:	4a04      	ldr	r2, [pc, #16]	; (80070c8 <vQueueAddToRegistry+0x24>)
 80070b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80070c0:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070c2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20001678 	.word	0x20001678

080070cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4604      	mov	r4, r0
 80070d0:	460d      	mov	r5, r1
 80070d2:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070d4:	f001 f8e6 	bl	80082a4 <vPortEnterCritical>
 80070d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80070dc:	b25b      	sxtb	r3, r3
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	d00d      	beq.n	8007100 <vQueueWaitForMessageRestricted+0x34>
 80070e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80070e8:	b25b      	sxtb	r3, r3
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d00b      	beq.n	8007108 <vQueueWaitForMessageRestricted+0x3c>
 80070f0:	f001 f8fa 	bl	80082e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070f6:	b15b      	cbz	r3, 8007110 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070f8:	4620      	mov	r0, r4
 80070fa:	f7ff fb6f 	bl	80067dc <prvUnlockQueue>
	}
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8007100:	2300      	movs	r3, #0
 8007102:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007106:	e7ed      	b.n	80070e4 <vQueueWaitForMessageRestricted+0x18>
 8007108:	2300      	movs	r3, #0
 800710a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800710e:	e7ef      	b.n	80070f0 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007110:	4632      	mov	r2, r6
 8007112:	4629      	mov	r1, r5
 8007114:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007118:	f000 fc36 	bl	8007988 <vTaskPlaceOnEventListRestricted>
 800711c:	e7ec      	b.n	80070f8 <vQueueWaitForMessageRestricted+0x2c>
	...

08007120 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007120:	4b08      	ldr	r3, [pc, #32]	; (8007144 <prvResetNextTaskUnblockTime+0x24>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	b923      	cbnz	r3, 8007132 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <prvResetNextTaskUnblockTime+0x28>)
 800712a:	f04f 32ff 	mov.w	r2, #4294967295
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007132:	4b04      	ldr	r3, [pc, #16]	; (8007144 <prvResetNextTaskUnblockTime+0x24>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	4b02      	ldr	r3, [pc, #8]	; (8007148 <prvResetNextTaskUnblockTime+0x28>)
 800713e:	601a      	str	r2, [r3, #0]
	}
}
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	200016bc 	.word	0x200016bc
 8007148:	20001b68 	.word	0x20001b68

0800714c <prvInitialiseNewTask>:
{
 800714c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007150:	4680      	mov	r8, r0
 8007152:	460d      	mov	r5, r1
 8007154:	4617      	mov	r7, r2
 8007156:	4699      	mov	r9, r3
 8007158:	9e08      	ldr	r6, [sp, #32]
 800715a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800715e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007160:	0092      	lsls	r2, r2, #2
 8007162:	21a5      	movs	r1, #165	; 0xa5
 8007164:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007166:	f001 fc66 	bl	8008a36 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800716a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800716c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8007170:	3a01      	subs	r2, #1
 8007172:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007176:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800717a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800717c:	f04f 0c00 	mov.w	ip, #0
 8007180:	f1bc 0f0f 	cmp.w	ip, #15
 8007184:	d809      	bhi.n	800719a <prvInitialiseNewTask+0x4e>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007186:	f815 300c 	ldrb.w	r3, [r5, ip]
 800718a:	eb04 020c 	add.w	r2, r4, ip
 800718e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8007192:	b113      	cbz	r3, 800719a <prvInitialiseNewTask+0x4e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007194:	f10c 0c01 	add.w	ip, ip, #1
 8007198:	e7f2      	b.n	8007180 <prvInitialiseNewTask+0x34>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800719a:	2300      	movs	r3, #0
 800719c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071a0:	2e37      	cmp	r6, #55	; 0x37
 80071a2:	d900      	bls.n	80071a6 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071a4:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80071a6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80071a8:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80071aa:	2500      	movs	r5, #0
 80071ac:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071ae:	1d20      	adds	r0, r4, #4
 80071b0:	f7ff fa69 	bl	8006686 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071b4:	f104 0018 	add.w	r0, r4, #24
 80071b8:	f7ff fa65 	bl	8006686 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071bc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071be:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 80071c2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071c4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80071c6:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 80071c8:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071ca:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ce:	464a      	mov	r2, r9
 80071d0:	4641      	mov	r1, r8
 80071d2:	4638      	mov	r0, r7
 80071d4:	f001 f842 	bl	800825c <pxPortInitialiseStack>
 80071d8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80071da:	f1ba 0f00 	cmp.w	sl, #0
 80071de:	d001      	beq.n	80071e4 <prvInitialiseNewTask+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071e0:	f8ca 4000 	str.w	r4, [sl]
}
 80071e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080071e8 <prvInitialiseTaskLists>:
{
 80071e8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071ea:	2400      	movs	r4, #0
 80071ec:	e007      	b.n	80071fe <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071ee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80071f2:	0093      	lsls	r3, r2, #2
 80071f4:	480e      	ldr	r0, [pc, #56]	; (8007230 <prvInitialiseTaskLists+0x48>)
 80071f6:	4418      	add	r0, r3
 80071f8:	f7ff fa3a 	bl	8006670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071fc:	3401      	adds	r4, #1
 80071fe:	2c37      	cmp	r4, #55	; 0x37
 8007200:	d9f5      	bls.n	80071ee <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8007202:	4d0c      	ldr	r5, [pc, #48]	; (8007234 <prvInitialiseTaskLists+0x4c>)
 8007204:	4628      	mov	r0, r5
 8007206:	f7ff fa33 	bl	8006670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800720a:	4c0b      	ldr	r4, [pc, #44]	; (8007238 <prvInitialiseTaskLists+0x50>)
 800720c:	4620      	mov	r0, r4
 800720e:	f7ff fa2f 	bl	8006670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007212:	480a      	ldr	r0, [pc, #40]	; (800723c <prvInitialiseTaskLists+0x54>)
 8007214:	f7ff fa2c 	bl	8006670 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007218:	4809      	ldr	r0, [pc, #36]	; (8007240 <prvInitialiseTaskLists+0x58>)
 800721a:	f7ff fa29 	bl	8006670 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800721e:	4809      	ldr	r0, [pc, #36]	; (8007244 <prvInitialiseTaskLists+0x5c>)
 8007220:	f7ff fa26 	bl	8006670 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007224:	4b08      	ldr	r3, [pc, #32]	; (8007248 <prvInitialiseTaskLists+0x60>)
 8007226:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007228:	4b08      	ldr	r3, [pc, #32]	; (800724c <prvInitialiseTaskLists+0x64>)
 800722a:	601c      	str	r4, [r3, #0]
}
 800722c:	bd38      	pop	{r3, r4, r5, pc}
 800722e:	bf00      	nop
 8007230:	200016c4 	.word	0x200016c4
 8007234:	20001b3c 	.word	0x20001b3c
 8007238:	20001b50 	.word	0x20001b50
 800723c:	20001b70 	.word	0x20001b70
 8007240:	20001b9c 	.word	0x20001b9c
 8007244:	20001b88 	.word	0x20001b88
 8007248:	200016bc 	.word	0x200016bc
 800724c:	200016c0 	.word	0x200016c0

08007250 <prvAddNewTaskToReadyList>:
{
 8007250:	b510      	push	{r4, lr}
 8007252:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007254:	f001 f826 	bl	80082a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007258:	4a22      	ldr	r2, [pc, #136]	; (80072e4 <prvAddNewTaskToReadyList+0x94>)
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	3301      	adds	r3, #1
 800725e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007260:	4b21      	ldr	r3, [pc, #132]	; (80072e8 <prvAddNewTaskToReadyList+0x98>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b15b      	cbz	r3, 800727e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8007266:	4b21      	ldr	r3, [pc, #132]	; (80072ec <prvAddNewTaskToReadyList+0x9c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	b96b      	cbnz	r3, 8007288 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800726c:	4b1e      	ldr	r3, [pc, #120]	; (80072e8 <prvAddNewTaskToReadyList+0x98>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007274:	429a      	cmp	r2, r3
 8007276:	d807      	bhi.n	8007288 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8007278:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <prvAddNewTaskToReadyList+0x98>)
 800727a:	601c      	str	r4, [r3, #0]
 800727c:	e004      	b.n	8007288 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800727e:	4b1a      	ldr	r3, [pc, #104]	; (80072e8 <prvAddNewTaskToReadyList+0x98>)
 8007280:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007282:	6813      	ldr	r3, [r2, #0]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d029      	beq.n	80072dc <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8007288:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <prvAddNewTaskToReadyList+0xa0>)
 800728a:	6813      	ldr	r3, [r2, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007290:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8007292:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007294:	4b17      	ldr	r3, [pc, #92]	; (80072f4 <prvAddNewTaskToReadyList+0xa4>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4298      	cmp	r0, r3
 800729a:	d901      	bls.n	80072a0 <prvAddNewTaskToReadyList+0x50>
 800729c:	4b15      	ldr	r3, [pc, #84]	; (80072f4 <prvAddNewTaskToReadyList+0xa4>)
 800729e:	6018      	str	r0, [r3, #0]
 80072a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80072a4:	1d21      	adds	r1, r4, #4
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <prvAddNewTaskToReadyList+0xa8>)
 80072a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072ac:	f7ff f9ee 	bl	800668c <vListInsertEnd>
	taskEXIT_CRITICAL();
 80072b0:	f001 f81a 	bl	80082e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <prvAddNewTaskToReadyList+0x9c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	b17b      	cbz	r3, 80072da <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <prvAddNewTaskToReadyList+0x98>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d209      	bcs.n	80072da <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80072c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80072ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
}
 80072da:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80072dc:	f7ff ff84 	bl	80071e8 <prvInitialiseTaskLists>
 80072e0:	e7d2      	b.n	8007288 <prvAddNewTaskToReadyList+0x38>
 80072e2:	bf00      	nop
 80072e4:	20001b24 	.word	0x20001b24
 80072e8:	200016b8 	.word	0x200016b8
 80072ec:	20001b84 	.word	0x20001b84
 80072f0:	20001b34 	.word	0x20001b34
 80072f4:	20001b38 	.word	0x20001b38
 80072f8:	200016c4 	.word	0x200016c4

080072fc <prvDeleteTCB>:
	{
 80072fc:	b510      	push	{r4, lr}
 80072fe:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007300:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8007304:	b163      	cbz	r3, 8007320 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007306:	2b01      	cmp	r3, #1
 8007308:	d011      	beq.n	800732e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800730a:	2b02      	cmp	r3, #2
 800730c:	d00e      	beq.n	800732c <prvDeleteTCB+0x30>
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	e7fe      	b.n	800731e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8007320:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007322:	f001 f9b1 	bl	8008688 <vPortFree>
				vPortFree( pxTCB );
 8007326:	4620      	mov	r0, r4
 8007328:	f001 f9ae 	bl	8008688 <vPortFree>
	}
 800732c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800732e:	f001 f9ab 	bl	8008688 <vPortFree>
 8007332:	e7fb      	b.n	800732c <prvDeleteTCB+0x30>

08007334 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007334:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <prvCheckTasksWaitingTermination+0x40>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	b1d3      	cbz	r3, 8007370 <prvCheckTasksWaitingTermination+0x3c>
{
 800733a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800733c:	f000 ffb2 	bl	80082a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <prvCheckTasksWaitingTermination+0x44>)
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007346:	1d20      	adds	r0, r4, #4
 8007348:	f7ff f9c4 	bl	80066d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800734c:	4a0b      	ldr	r2, [pc, #44]	; (800737c <prvCheckTasksWaitingTermination+0x48>)
 800734e:	6813      	ldr	r3, [r2, #0]
 8007350:	3b01      	subs	r3, #1
 8007352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007354:	4a07      	ldr	r2, [pc, #28]	; (8007374 <prvCheckTasksWaitingTermination+0x40>)
 8007356:	6813      	ldr	r3, [r2, #0]
 8007358:	3b01      	subs	r3, #1
 800735a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800735c:	f000 ffc4 	bl	80082e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007360:	4620      	mov	r0, r4
 8007362:	f7ff ffcb 	bl	80072fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007366:	4b03      	ldr	r3, [pc, #12]	; (8007374 <prvCheckTasksWaitingTermination+0x40>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e6      	bne.n	800733c <prvCheckTasksWaitingTermination+0x8>
}
 800736e:	bd10      	pop	{r4, pc}
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	20001b28 	.word	0x20001b28
 8007378:	20001b9c 	.word	0x20001b9c
 800737c:	20001b24 	.word	0x20001b24

08007380 <prvIdleTask>:
{
 8007380:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8007382:	f7ff ffd7 	bl	8007334 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007386:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <prvIdleTask+0x24>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d9f9      	bls.n	8007382 <prvIdleTask+0x2>
				taskYIELD();
 800738e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007396:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	e7ee      	b.n	8007382 <prvIdleTask+0x2>
 80073a4:	200016c4 	.word	0x200016c4

080073a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073a8:	b570      	push	{r4, r5, r6, lr}
 80073aa:	4604      	mov	r4, r0
 80073ac:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ae:	4b17      	ldr	r3, [pc, #92]	; (800740c <prvAddCurrentTaskToDelayedList+0x64>)
 80073b0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b2:	4b17      	ldr	r3, [pc, #92]	; (8007410 <prvAddCurrentTaskToDelayedList+0x68>)
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	3004      	adds	r0, #4
 80073b8:	f7ff f98c 	bl	80066d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80073c0:	d00d      	beq.n	80073de <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073c2:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073c4:	4b12      	ldr	r3, [pc, #72]	; (8007410 <prvAddCurrentTaskToDelayedList+0x68>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80073ca:	42a6      	cmp	r6, r4
 80073cc:	d910      	bls.n	80073f0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ce:	4b11      	ldr	r3, [pc, #68]	; (8007414 <prvAddCurrentTaskToDelayedList+0x6c>)
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	4b0f      	ldr	r3, [pc, #60]	; (8007410 <prvAddCurrentTaskToDelayedList+0x68>)
 80073d4:	6819      	ldr	r1, [r3, #0]
 80073d6:	3104      	adds	r1, #4
 80073d8:	f7ff f963 	bl	80066a2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073dc:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073de:	2d00      	cmp	r5, #0
 80073e0:	d0ef      	beq.n	80073c2 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e2:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <prvAddCurrentTaskToDelayedList+0x68>)
 80073e4:	6819      	ldr	r1, [r3, #0]
 80073e6:	3104      	adds	r1, #4
 80073e8:	480b      	ldr	r0, [pc, #44]	; (8007418 <prvAddCurrentTaskToDelayedList+0x70>)
 80073ea:	f7ff f94f 	bl	800668c <vListInsertEnd>
 80073ee:	e7f5      	b.n	80073dc <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <prvAddCurrentTaskToDelayedList+0x74>)
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <prvAddCurrentTaskToDelayedList+0x68>)
 80073f6:	6819      	ldr	r1, [r3, #0]
 80073f8:	3104      	adds	r1, #4
 80073fa:	f7ff f952 	bl	80066a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073fe:	4b08      	ldr	r3, [pc, #32]	; (8007420 <prvAddCurrentTaskToDelayedList+0x78>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	42a3      	cmp	r3, r4
 8007404:	d9ea      	bls.n	80073dc <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8007406:	4b06      	ldr	r3, [pc, #24]	; (8007420 <prvAddCurrentTaskToDelayedList+0x78>)
 8007408:	601c      	str	r4, [r3, #0]
}
 800740a:	e7e7      	b.n	80073dc <prvAddCurrentTaskToDelayedList+0x34>
 800740c:	20001bb0 	.word	0x20001bb0
 8007410:	200016b8 	.word	0x200016b8
 8007414:	200016c0 	.word	0x200016c0
 8007418:	20001b88 	.word	0x20001b88
 800741c:	200016bc 	.word	0x200016bc
 8007420:	20001b68 	.word	0x20001b68

08007424 <xTaskCreateStatic>:
	{
 8007424:	b530      	push	{r4, r5, lr}
 8007426:	b087      	sub	sp, #28
 8007428:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800742a:	b17c      	cbz	r4, 800744c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800742c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800742e:	b1b5      	cbz	r5, 800745e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007430:	2564      	movs	r5, #100	; 0x64
 8007432:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007434:	9d04      	ldr	r5, [sp, #16]
 8007436:	2d64      	cmp	r5, #100	; 0x64
 8007438:	d01a      	beq.n	8007470 <xTaskCreateStatic+0x4c>
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	e7fe      	b.n	800744a <xTaskCreateStatic+0x26>
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800745c:	e7fe      	b.n	800745c <xTaskCreateStatic+0x38>
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800746e:	e7fe      	b.n	800746e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007470:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007472:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007474:	2402      	movs	r4, #2
 8007476:	f885 4061 	strb.w	r4, [r5, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800747a:	2400      	movs	r4, #0
 800747c:	9403      	str	r4, [sp, #12]
 800747e:	9502      	str	r5, [sp, #8]
 8007480:	ac05      	add	r4, sp, #20
 8007482:	9401      	str	r4, [sp, #4]
 8007484:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007486:	9400      	str	r4, [sp, #0]
 8007488:	f7ff fe60 	bl	800714c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800748c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800748e:	f7ff fedf 	bl	8007250 <prvAddNewTaskToReadyList>
	}
 8007492:	9805      	ldr	r0, [sp, #20]
 8007494:	b007      	add	sp, #28
 8007496:	bd30      	pop	{r4, r5, pc}

08007498 <xTaskCreate>:
	{
 8007498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800749c:	b085      	sub	sp, #20
 800749e:	4607      	mov	r7, r0
 80074a0:	4688      	mov	r8, r1
 80074a2:	4614      	mov	r4, r2
 80074a4:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a6:	0090      	lsls	r0, r2, #2
 80074a8:	f001 f876 	bl	8008598 <pvPortMalloc>
			if( pxStack != NULL )
 80074ac:	b300      	cbz	r0, 80074f0 <xTaskCreate+0x58>
 80074ae:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80074b0:	2064      	movs	r0, #100	; 0x64
 80074b2:	f001 f871 	bl	8008598 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80074b6:	4605      	mov	r5, r0
 80074b8:	b1b0      	cbz	r0, 80074e8 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80074ba:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80074be:	b1e5      	cbz	r5, 80074fa <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074c0:	2300      	movs	r3, #0
 80074c2:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074c6:	9303      	str	r3, [sp, #12]
 80074c8:	9502      	str	r5, [sp, #8]
 80074ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	4633      	mov	r3, r6
 80074d4:	4622      	mov	r2, r4
 80074d6:	4641      	mov	r1, r8
 80074d8:	4638      	mov	r0, r7
 80074da:	f7ff fe37 	bl	800714c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074de:	4628      	mov	r0, r5
 80074e0:	f7ff feb6 	bl	8007250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074e4:	2001      	movs	r0, #1
 80074e6:	e005      	b.n	80074f4 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 80074e8:	4648      	mov	r0, r9
 80074ea:	f001 f8cd 	bl	8008688 <vPortFree>
 80074ee:	e7e6      	b.n	80074be <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80074f4:	b005      	add	sp, #20
 80074f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074fa:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80074fe:	e7f9      	b.n	80074f4 <xTaskCreate+0x5c>

08007500 <vTaskStartScheduler>:
{
 8007500:	b510      	push	{r4, lr}
 8007502:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007504:	2400      	movs	r4, #0
 8007506:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007508:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800750a:	aa07      	add	r2, sp, #28
 800750c:	a906      	add	r1, sp, #24
 800750e:	a805      	add	r0, sp, #20
 8007510:	f7fe ff7e 	bl	8006410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007514:	9b05      	ldr	r3, [sp, #20]
 8007516:	9302      	str	r3, [sp, #8]
 8007518:	9b06      	ldr	r3, [sp, #24]
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	9400      	str	r4, [sp, #0]
 800751e:	4623      	mov	r3, r4
 8007520:	9a07      	ldr	r2, [sp, #28]
 8007522:	4918      	ldr	r1, [pc, #96]	; (8007584 <vTaskStartScheduler+0x84>)
 8007524:	4818      	ldr	r0, [pc, #96]	; (8007588 <vTaskStartScheduler+0x88>)
 8007526:	f7ff ff7d 	bl	8007424 <xTaskCreateStatic>
 800752a:	4b18      	ldr	r3, [pc, #96]	; (800758c <vTaskStartScheduler+0x8c>)
 800752c:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800752e:	b140      	cbz	r0, 8007542 <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8007530:	f000 fca4 	bl	8007e7c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007534:	2801      	cmp	r0, #1
 8007536:	d006      	beq.n	8007546 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007538:	f1b0 3fff 	cmp.w	r0, #4294967295
 800753c:	d018      	beq.n	8007570 <vTaskStartScheduler+0x70>
}
 800753e:	b008      	add	sp, #32
 8007540:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8007542:	2000      	movs	r0, #0
 8007544:	e7f6      	b.n	8007534 <vTaskStartScheduler+0x34>
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007556:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <vTaskStartScheduler+0x90>)
 8007558:	f04f 32ff 	mov.w	r2, #4294967295
 800755c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800755e:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <vTaskStartScheduler+0x94>)
 8007560:	2201      	movs	r2, #1
 8007562:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007564:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <vTaskStartScheduler+0x98>)
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800756a:	f000 ff25 	bl	80083b8 <xPortStartScheduler>
 800756e:	e7e6      	b.n	800753e <vTaskStartScheduler+0x3e>
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007580:	e7fe      	b.n	8007580 <vTaskStartScheduler+0x80>
 8007582:	bf00      	nop
 8007584:	0800a4a8 	.word	0x0800a4a8
 8007588:	08007381 	.word	0x08007381
 800758c:	20001b64 	.word	0x20001b64
 8007590:	20001b68 	.word	0x20001b68
 8007594:	20001b84 	.word	0x20001b84
 8007598:	20001bb0 	.word	0x20001bb0

0800759c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800759c:	4a02      	ldr	r2, [pc, #8]	; (80075a8 <vTaskSuspendAll+0xc>)
 800759e:	6813      	ldr	r3, [r2, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	6013      	str	r3, [r2, #0]
}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20001b30 	.word	0x20001b30

080075ac <xTaskGetTickCount>:
		xTicks = xTickCount;
 80075ac:	4b01      	ldr	r3, [pc, #4]	; (80075b4 <xTaskGetTickCount+0x8>)
 80075ae:	6818      	ldr	r0, [r3, #0]
}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20001bb0 	.word	0x20001bb0

080075b8 <xTaskIncrementTick>:
{
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ba:	4b3a      	ldr	r3, [pc, #232]	; (80076a4 <xTaskIncrementTick+0xec>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d164      	bne.n	800768c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075c2:	4b39      	ldr	r3, [pc, #228]	; (80076a8 <xTaskIncrementTick+0xf0>)
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80075c8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ca:	b9c5      	cbnz	r5, 80075fe <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80075cc:	4b37      	ldr	r3, [pc, #220]	; (80076ac <xTaskIncrementTick+0xf4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	b143      	cbz	r3, 80075e6 <xTaskIncrementTick+0x2e>
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	e7fe      	b.n	80075e4 <xTaskIncrementTick+0x2c>
 80075e6:	4a31      	ldr	r2, [pc, #196]	; (80076ac <xTaskIncrementTick+0xf4>)
 80075e8:	6811      	ldr	r1, [r2, #0]
 80075ea:	4b31      	ldr	r3, [pc, #196]	; (80076b0 <xTaskIncrementTick+0xf8>)
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	6010      	str	r0, [r2, #0]
 80075f0:	6019      	str	r1, [r3, #0]
 80075f2:	4a30      	ldr	r2, [pc, #192]	; (80076b4 <xTaskIncrementTick+0xfc>)
 80075f4:	6813      	ldr	r3, [r2, #0]
 80075f6:	3301      	adds	r3, #1
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	f7ff fd91 	bl	8007120 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075fe:	4b2e      	ldr	r3, [pc, #184]	; (80076b8 <xTaskIncrementTick+0x100>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	42ab      	cmp	r3, r5
 8007604:	d938      	bls.n	8007678 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8007606:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007608:	4b2c      	ldr	r3, [pc, #176]	; (80076bc <xTaskIncrementTick+0x104>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007612:	009a      	lsls	r2, r3, #2
 8007614:	4b2a      	ldr	r3, [pc, #168]	; (80076c0 <xTaskIncrementTick+0x108>)
 8007616:	589b      	ldr	r3, [r3, r2]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d93c      	bls.n	8007696 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800761c:	2701      	movs	r7, #1
 800761e:	e03a      	b.n	8007696 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8007620:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007622:	4b22      	ldr	r3, [pc, #136]	; (80076ac <xTaskIncrementTick+0xf4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	b343      	cbz	r3, 800767c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <xTaskIncrementTick+0xf4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007632:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8007634:	429d      	cmp	r5, r3
 8007636:	d326      	bcc.n	8007686 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007638:	1d26      	adds	r6, r4, #4
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff f84a 	bl	80066d4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007640:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007642:	b11b      	cbz	r3, 800764c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007644:	f104 0018 	add.w	r0, r4, #24
 8007648:	f7ff f844 	bl	80066d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800764c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800764e:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <xTaskIncrementTick+0x10c>)
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	4293      	cmp	r3, r2
 8007654:	d901      	bls.n	800765a <xTaskIncrementTick+0xa2>
 8007656:	4a1b      	ldr	r2, [pc, #108]	; (80076c4 <xTaskIncrementTick+0x10c>)
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800765e:	009a      	lsls	r2, r3, #2
 8007660:	4631      	mov	r1, r6
 8007662:	4817      	ldr	r0, [pc, #92]	; (80076c0 <xTaskIncrementTick+0x108>)
 8007664:	4410      	add	r0, r2
 8007666:	f7ff f811 	bl	800668c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800766a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800766c:	4b13      	ldr	r3, [pc, #76]	; (80076bc <xTaskIncrementTick+0x104>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	429a      	cmp	r2, r3
 8007674:	d2d4      	bcs.n	8007620 <xTaskIncrementTick+0x68>
 8007676:	e7d4      	b.n	8007622 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8007678:	2700      	movs	r7, #0
 800767a:	e7d2      	b.n	8007622 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800767c:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <xTaskIncrementTick+0x100>)
 800767e:	f04f 32ff 	mov.w	r2, #4294967295
 8007682:	601a      	str	r2, [r3, #0]
					break;
 8007684:	e7c0      	b.n	8007608 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8007686:	4a0c      	ldr	r2, [pc, #48]	; (80076b8 <xTaskIncrementTick+0x100>)
 8007688:	6013      	str	r3, [r2, #0]
						break;
 800768a:	e7bd      	b.n	8007608 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800768c:	4a0e      	ldr	r2, [pc, #56]	; (80076c8 <xTaskIncrementTick+0x110>)
 800768e:	6813      	ldr	r3, [r2, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007694:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <xTaskIncrementTick+0x114>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	b103      	cbz	r3, 800769e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800769c:	2701      	movs	r7, #1
}
 800769e:	4638      	mov	r0, r7
 80076a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20001b30 	.word	0x20001b30
 80076a8:	20001bb0 	.word	0x20001bb0
 80076ac:	200016bc 	.word	0x200016bc
 80076b0:	200016c0 	.word	0x200016c0
 80076b4:	20001b6c 	.word	0x20001b6c
 80076b8:	20001b68 	.word	0x20001b68
 80076bc:	200016b8 	.word	0x200016b8
 80076c0:	200016c4 	.word	0x200016c4
 80076c4:	20001b38 	.word	0x20001b38
 80076c8:	20001b2c 	.word	0x20001b2c
 80076cc:	20001bb4 	.word	0x20001bb4

080076d0 <xTaskResumeAll>:
{
 80076d0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80076d2:	4b35      	ldr	r3, [pc, #212]	; (80077a8 <xTaskResumeAll+0xd8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	b943      	cbnz	r3, 80076ea <xTaskResumeAll+0x1a>
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	e7fe      	b.n	80076e8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80076ea:	f000 fddb 	bl	80082a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80076ee:	4b2e      	ldr	r3, [pc, #184]	; (80077a8 <xTaskResumeAll+0xd8>)
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	3a01      	subs	r2, #1
 80076f4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d14f      	bne.n	800779c <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076fc:	4b2b      	ldr	r3, [pc, #172]	; (80077ac <xTaskResumeAll+0xdc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	b90b      	cbnz	r3, 8007706 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8007702:	2400      	movs	r4, #0
 8007704:	e04b      	b.n	800779e <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8007706:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007708:	4b29      	ldr	r3, [pc, #164]	; (80077b0 <xTaskResumeAll+0xe0>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	b31b      	cbz	r3, 8007756 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800770e:	4b28      	ldr	r3, [pc, #160]	; (80077b0 <xTaskResumeAll+0xe0>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007714:	f104 0018 	add.w	r0, r4, #24
 8007718:	f7fe ffdc 	bl	80066d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800771c:	1d25      	adds	r5, r4, #4
 800771e:	4628      	mov	r0, r5
 8007720:	f7fe ffd8 	bl	80066d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007724:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007726:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <xTaskResumeAll+0xe4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4298      	cmp	r0, r3
 800772c:	d901      	bls.n	8007732 <xTaskResumeAll+0x62>
 800772e:	4b21      	ldr	r3, [pc, #132]	; (80077b4 <xTaskResumeAll+0xe4>)
 8007730:	6018      	str	r0, [r3, #0]
 8007732:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007736:	4629      	mov	r1, r5
 8007738:	4b1f      	ldr	r3, [pc, #124]	; (80077b8 <xTaskResumeAll+0xe8>)
 800773a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800773e:	f7fe ffa5 	bl	800668c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007742:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007744:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <xTaskResumeAll+0xec>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	429a      	cmp	r2, r3
 800774c:	d3dc      	bcc.n	8007708 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800774e:	4b1c      	ldr	r3, [pc, #112]	; (80077c0 <xTaskResumeAll+0xf0>)
 8007750:	2201      	movs	r2, #1
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e7d8      	b.n	8007708 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8007756:	b10c      	cbz	r4, 800775c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8007758:	f7ff fce2 	bl	8007120 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800775c:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <xTaskResumeAll+0xf4>)
 800775e:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007760:	b984      	cbnz	r4, 8007784 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8007762:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <xTaskResumeAll+0xf0>)
 8007764:	681c      	ldr	r4, [r3, #0]
 8007766:	b1d4      	cbz	r4, 800779e <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8007768:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800776c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007770:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800777c:	2401      	movs	r4, #1
 800777e:	e00e      	b.n	800779e <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007780:	3c01      	subs	r4, #1
 8007782:	d007      	beq.n	8007794 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8007784:	f7ff ff18 	bl	80075b8 <xTaskIncrementTick>
 8007788:	2800      	cmp	r0, #0
 800778a:	d0f9      	beq.n	8007780 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800778c:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <xTaskResumeAll+0xf0>)
 800778e:	2201      	movs	r2, #1
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e7f5      	b.n	8007780 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <xTaskResumeAll+0xf4>)
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e7e2      	b.n	8007762 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800779c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800779e:	f000 fda3 	bl	80082e8 <vPortExitCritical>
}
 80077a2:	4620      	mov	r0, r4
 80077a4:	bd38      	pop	{r3, r4, r5, pc}
 80077a6:	bf00      	nop
 80077a8:	20001b30 	.word	0x20001b30
 80077ac:	20001b24 	.word	0x20001b24
 80077b0:	20001b70 	.word	0x20001b70
 80077b4:	20001b38 	.word	0x20001b38
 80077b8:	200016c4 	.word	0x200016c4
 80077bc:	200016b8 	.word	0x200016b8
 80077c0:	20001bb4 	.word	0x20001bb4
 80077c4:	20001b2c 	.word	0x20001b2c

080077c8 <vTaskDelayUntil>:
	{
 80077c8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 80077ca:	b158      	cbz	r0, 80077e4 <vTaskDelayUntil+0x1c>
 80077cc:	460c      	mov	r4, r1
 80077ce:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 80077d0:	b989      	cbnz	r1, 80077f6 <vTaskDelayUntil+0x2e>
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	e7fe      	b.n	80077e2 <vTaskDelayUntil+0x1a>
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 80077f4:	e7fe      	b.n	80077f4 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 80077f6:	4b1b      	ldr	r3, [pc, #108]	; (8007864 <vTaskDelayUntil+0x9c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	b143      	cbz	r3, 800780e <vTaskDelayUntil+0x46>
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	e7fe      	b.n	800780c <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 800780e:	f7ff fec5 	bl	800759c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8007812:	4b15      	ldr	r3, [pc, #84]	; (8007868 <vTaskDelayUntil+0xa0>)
 8007814:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007816:	682b      	ldr	r3, [r5, #0]
 8007818:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 800781a:	4283      	cmp	r3, r0
 800781c:	d909      	bls.n	8007832 <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800781e:	42a3      	cmp	r3, r4
 8007820:	d801      	bhi.n	8007826 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 8007822:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8007824:	e00e      	b.n	8007844 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007826:	42a0      	cmp	r0, r4
 8007828:	d301      	bcc.n	800782e <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
 800782a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800782c:	e00a      	b.n	8007844 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 800782e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8007830:	e004      	b.n	800783c <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007832:	42a3      	cmp	r3, r4
 8007834:	d801      	bhi.n	800783a <vTaskDelayUntil+0x72>
 8007836:	42a0      	cmp	r0, r4
 8007838:	d212      	bcs.n	8007860 <vTaskDelayUntil+0x98>
			*pxPreviousWakeTime = xTimeToWake;
 800783a:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800783c:	2100      	movs	r1, #0
 800783e:	1a20      	subs	r0, r4, r0
 8007840:	f7ff fdb2 	bl	80073a8 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8007844:	f7ff ff44 	bl	80076d0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007848:	b948      	cbnz	r0, 800785e <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 800784a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800784e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007852:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	f3bf 8f6f 	isb	sy
	}
 800785e:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 8007860:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8007862:	e7ef      	b.n	8007844 <vTaskDelayUntil+0x7c>
 8007864:	20001b30 	.word	0x20001b30
 8007868:	20001bb0 	.word	0x20001bb0

0800786c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800786c:	4b1f      	ldr	r3, [pc, #124]	; (80078ec <vTaskSwitchContext+0x80>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	b11b      	cbz	r3, 800787a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8007872:	4b1f      	ldr	r3, [pc, #124]	; (80078f0 <vTaskSwitchContext+0x84>)
 8007874:	2201      	movs	r2, #1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800787a:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <vTaskSwitchContext+0x84>)
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007880:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <vTaskSwitchContext+0x88>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007888:	008a      	lsls	r2, r1, #2
 800788a:	491b      	ldr	r1, [pc, #108]	; (80078f8 <vTaskSwitchContext+0x8c>)
 800788c:	588a      	ldr	r2, [r1, r2]
 800788e:	b95a      	cbnz	r2, 80078a8 <vTaskSwitchContext+0x3c>
 8007890:	b10b      	cbz	r3, 8007896 <vTaskSwitchContext+0x2a>
 8007892:	3b01      	subs	r3, #1
 8007894:	e7f6      	b.n	8007884 <vTaskSwitchContext+0x18>
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	e7fe      	b.n	80078a6 <vTaskSwitchContext+0x3a>
 80078a8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80078ac:	0082      	lsls	r2, r0, #2
 80078ae:	440a      	add	r2, r1
 80078b0:	6850      	ldr	r0, [r2, #4]
 80078b2:	6840      	ldr	r0, [r0, #4]
 80078b4:	6050      	str	r0, [r2, #4]
 80078b6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80078ba:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80078be:	3208      	adds	r2, #8
 80078c0:	4411      	add	r1, r2
 80078c2:	4288      	cmp	r0, r1
 80078c4:	d00b      	beq.n	80078de <vTaskSwitchContext+0x72>
 80078c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80078ca:	0091      	lsls	r1, r2, #2
 80078cc:	4a0a      	ldr	r2, [pc, #40]	; (80078f8 <vTaskSwitchContext+0x8c>)
 80078ce:	440a      	add	r2, r1
 80078d0:	6852      	ldr	r2, [r2, #4]
 80078d2:	68d1      	ldr	r1, [r2, #12]
 80078d4:	4a09      	ldr	r2, [pc, #36]	; (80078fc <vTaskSwitchContext+0x90>)
 80078d6:	6011      	str	r1, [r2, #0]
 80078d8:	4a06      	ldr	r2, [pc, #24]	; (80078f4 <vTaskSwitchContext+0x88>)
 80078da:	6013      	str	r3, [r2, #0]
}
 80078dc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078de:	6840      	ldr	r0, [r0, #4]
 80078e0:	4662      	mov	r2, ip
 80078e2:	0091      	lsls	r1, r2, #2
 80078e4:	4a04      	ldr	r2, [pc, #16]	; (80078f8 <vTaskSwitchContext+0x8c>)
 80078e6:	440a      	add	r2, r1
 80078e8:	6050      	str	r0, [r2, #4]
 80078ea:	e7ec      	b.n	80078c6 <vTaskSwitchContext+0x5a>
 80078ec:	20001b30 	.word	0x20001b30
 80078f0:	20001bb4 	.word	0x20001bb4
 80078f4:	20001b38 	.word	0x20001b38
 80078f8:	200016c4 	.word	0x200016c4
 80078fc:	200016b8 	.word	0x200016b8

08007900 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007900:	b158      	cbz	r0, 800791a <vTaskPlaceOnEventList+0x1a>
{
 8007902:	b510      	push	{r4, lr}
 8007904:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007906:	4a09      	ldr	r2, [pc, #36]	; (800792c <vTaskPlaceOnEventList+0x2c>)
 8007908:	6811      	ldr	r1, [r2, #0]
 800790a:	3118      	adds	r1, #24
 800790c:	f7fe fec9 	bl	80066a2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007910:	2101      	movs	r1, #1
 8007912:	4620      	mov	r0, r4
 8007914:	f7ff fd48 	bl	80073a8 <prvAddCurrentTaskToDelayedList>
}
 8007918:	bd10      	pop	{r4, pc}
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800792a:	e7fe      	b.n	800792a <vTaskPlaceOnEventList+0x2a>
 800792c:	200016b8 	.word	0x200016b8

08007930 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8007930:	b170      	cbz	r0, 8007950 <vTaskPlaceOnUnorderedEventList+0x20>
{
 8007932:	b510      	push	{r4, lr}
 8007934:	4614      	mov	r4, r2
 8007936:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8007938:	4b11      	ldr	r3, [pc, #68]	; (8007980 <vTaskPlaceOnUnorderedEventList+0x50>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	b98b      	cbnz	r3, 8007962 <vTaskPlaceOnUnorderedEventList+0x32>
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	e7fe      	b.n	800794e <vTaskPlaceOnUnorderedEventList+0x1e>
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007960:	e7fe      	b.n	8007960 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007962:	4b08      	ldr	r3, [pc, #32]	; (8007984 <vTaskPlaceOnUnorderedEventList+0x54>)
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800796a:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800796c:	6819      	ldr	r1, [r3, #0]
 800796e:	3118      	adds	r1, #24
 8007970:	4610      	mov	r0, r2
 8007972:	f7fe fe8b 	bl	800668c <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007976:	2101      	movs	r1, #1
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff fd15 	bl	80073a8 <prvAddCurrentTaskToDelayedList>
}
 800797e:	bd10      	pop	{r4, pc}
 8007980:	20001b30 	.word	0x20001b30
 8007984:	200016b8 	.word	0x200016b8

08007988 <vTaskPlaceOnEventListRestricted>:
	{
 8007988:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800798a:	b170      	cbz	r0, 80079aa <vTaskPlaceOnEventListRestricted+0x22>
 800798c:	460d      	mov	r5, r1
 800798e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007990:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <vTaskPlaceOnEventListRestricted+0x34>)
 8007992:	6811      	ldr	r1, [r2, #0]
 8007994:	3118      	adds	r1, #24
 8007996:	f7fe fe79 	bl	800668c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800799a:	b10c      	cbz	r4, 80079a0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800799c:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7ff fd00 	bl	80073a8 <prvAddCurrentTaskToDelayedList>
	}
 80079a8:	bd38      	pop	{r3, r4, r5, pc}
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80079ba:	e7fe      	b.n	80079ba <vTaskPlaceOnEventListRestricted+0x32>
 80079bc:	200016b8 	.word	0x200016b8

080079c0 <xTaskRemoveFromEventList>:
{
 80079c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80079c2:	68c3      	ldr	r3, [r0, #12]
 80079c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80079c6:	b324      	cbz	r4, 8007a12 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079c8:	f104 0518 	add.w	r5, r4, #24
 80079cc:	4628      	mov	r0, r5
 80079ce:	f7fe fe81 	bl	80066d4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079d2:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <xTaskRemoveFromEventList+0x74>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	bb2b      	cbnz	r3, 8007a24 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079d8:	1d25      	adds	r5, r4, #4
 80079da:	4628      	mov	r0, r5
 80079dc:	f7fe fe7a 	bl	80066d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <xTaskRemoveFromEventList+0x78>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4298      	cmp	r0, r3
 80079e8:	d901      	bls.n	80079ee <xTaskRemoveFromEventList+0x2e>
 80079ea:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <xTaskRemoveFromEventList+0x78>)
 80079ec:	6018      	str	r0, [r3, #0]
 80079ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80079f2:	4629      	mov	r1, r5
 80079f4:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <xTaskRemoveFromEventList+0x7c>)
 80079f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80079fa:	f7fe fe47 	bl	800668c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a00:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <xTaskRemoveFromEventList+0x80>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d911      	bls.n	8007a2e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <xTaskRemoveFromEventList+0x84>)
 8007a0e:	6018      	str	r0, [r3, #0]
}
 8007a10:	bd38      	pop	{r3, r4, r5, pc}
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007a22:	e7fe      	b.n	8007a22 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a24:	4629      	mov	r1, r5
 8007a26:	4808      	ldr	r0, [pc, #32]	; (8007a48 <xTaskRemoveFromEventList+0x88>)
 8007a28:	f7fe fe30 	bl	800668c <vListInsertEnd>
 8007a2c:	e7e7      	b.n	80079fe <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8007a2e:	2000      	movs	r0, #0
	return xReturn;
 8007a30:	e7ee      	b.n	8007a10 <xTaskRemoveFromEventList+0x50>
 8007a32:	bf00      	nop
 8007a34:	20001b30 	.word	0x20001b30
 8007a38:	20001b38 	.word	0x20001b38
 8007a3c:	200016c4 	.word	0x200016c4
 8007a40:	200016b8 	.word	0x200016b8
 8007a44:	20001bb4 	.word	0x20001bb4
 8007a48:	20001b70 	.word	0x20001b70

08007a4c <vTaskRemoveFromUnorderedEventList>:
{
 8007a4c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <vTaskRemoveFromUnorderedEventList+0x74>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	b943      	cbnz	r3, 8007a66 <vTaskRemoveFromUnorderedEventList+0x1a>
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	e7fe      	b.n	8007a64 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007a66:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007a6a:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007a6c:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8007a6e:	b1f4      	cbz	r4, 8007aae <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8007a70:	f7fe fe30 	bl	80066d4 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a74:	1d25      	adds	r5, r4, #4
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7fe fe2c 	bl	80066d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007a7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007a7e:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <vTaskRemoveFromUnorderedEventList+0x78>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4298      	cmp	r0, r3
 8007a84:	d901      	bls.n	8007a8a <vTaskRemoveFromUnorderedEventList+0x3e>
 8007a86:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <vTaskRemoveFromUnorderedEventList+0x78>)
 8007a88:	6018      	str	r0, [r3, #0]
 8007a8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007a8e:	4629      	mov	r1, r5
 8007a90:	4b0d      	ldr	r3, [pc, #52]	; (8007ac8 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8007a92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a96:	f7fe fdf9 	bl	800668c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <vTaskRemoveFromUnorderedEventList+0x80>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d902      	bls.n	8007aac <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <vTaskRemoveFromUnorderedEventList+0x84>)
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
}
 8007aac:	bd38      	pop	{r3, r4, r5, pc}
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007abe:	e7fe      	b.n	8007abe <vTaskRemoveFromUnorderedEventList+0x72>
 8007ac0:	20001b30 	.word	0x20001b30
 8007ac4:	20001b38 	.word	0x20001b38
 8007ac8:	200016c4 	.word	0x200016c4
 8007acc:	200016b8 	.word	0x200016b8
 8007ad0:	20001bb4 	.word	0x20001bb4

08007ad4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ad4:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <vTaskInternalSetTimeOutState+0x10>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ada:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <vTaskInternalSetTimeOutState+0x14>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6043      	str	r3, [r0, #4]
}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	20001b6c 	.word	0x20001b6c
 8007ae8:	20001bb0 	.word	0x20001bb0

08007aec <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8007aec:	b1d8      	cbz	r0, 8007b26 <xTaskCheckForTimeOut+0x3a>
{
 8007aee:	b570      	push	{r4, r5, r6, lr}
 8007af0:	460c      	mov	r4, r1
 8007af2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8007af4:	b301      	cbz	r1, 8007b38 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8007af6:	f000 fbd5 	bl	80082a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007afa:	4b1b      	ldr	r3, [pc, #108]	; (8007b68 <xTaskCheckForTimeOut+0x7c>)
 8007afc:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007afe:	686b      	ldr	r3, [r5, #4]
 8007b00:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b08:	d027      	beq.n	8007b5a <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b0a:	4e18      	ldr	r6, [pc, #96]	; (8007b6c <xTaskCheckForTimeOut+0x80>)
 8007b0c:	6836      	ldr	r6, [r6, #0]
 8007b0e:	f8d5 c000 	ldr.w	ip, [r5]
 8007b12:	45b4      	cmp	ip, r6
 8007b14:	d001      	beq.n	8007b1a <xTaskCheckForTimeOut+0x2e>
 8007b16:	428b      	cmp	r3, r1
 8007b18:	d924      	bls.n	8007b64 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b1a:	4282      	cmp	r2, r0
 8007b1c:	d815      	bhi.n	8007b4a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007b22:	2401      	movs	r4, #1
 8007b24:	e01a      	b.n	8007b5c <xTaskCheckForTimeOut+0x70>
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007b36:	e7fe      	b.n	8007b36 <xTaskCheckForTimeOut+0x4a>
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007b48:	e7fe      	b.n	8007b48 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8007b4a:	1a5b      	subs	r3, r3, r1
 8007b4c:	4413      	add	r3, r2
 8007b4e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b50:	4628      	mov	r0, r5
 8007b52:	f7ff ffbf 	bl	8007ad4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b56:	2400      	movs	r4, #0
 8007b58:	e000      	b.n	8007b5c <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8007b5a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007b5c:	f000 fbc4 	bl	80082e8 <vPortExitCritical>
}
 8007b60:	4620      	mov	r0, r4
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8007b64:	2401      	movs	r4, #1
 8007b66:	e7f9      	b.n	8007b5c <xTaskCheckForTimeOut+0x70>
 8007b68:	20001bb0 	.word	0x20001bb0
 8007b6c:	20001b6c 	.word	0x20001b6c

08007b70 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007b70:	4b01      	ldr	r3, [pc, #4]	; (8007b78 <vTaskMissedYield+0x8>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
}
 8007b76:	4770      	bx	lr
 8007b78:	20001bb4 	.word	0x20001bb4

08007b7c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007b7c:	4b01      	ldr	r3, [pc, #4]	; (8007b84 <xTaskGetCurrentTaskHandle+0x8>)
 8007b7e:	6818      	ldr	r0, [r3, #0]
	}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	200016b8 	.word	0x200016b8

08007b88 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <xTaskGetSchedulerState+0x18>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	b133      	cbz	r3, 8007b9c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <xTaskGetSchedulerState+0x1c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	b10b      	cbz	r3, 8007b98 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b94:	2000      	movs	r0, #0
	}
 8007b96:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8007b98:	2002      	movs	r0, #2
 8007b9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	4770      	bx	lr
 8007ba0:	20001b84 	.word	0x20001b84
 8007ba4:	20001b30 	.word	0x20001b30

08007ba8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d03f      	beq.n	8007c2c <xTaskPriorityInherit+0x84>
	{
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007bb0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007bb2:	4a20      	ldr	r2, [pc, #128]	; (8007c34 <xTaskPriorityInherit+0x8c>)
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d22f      	bcs.n	8007c1c <xTaskPriorityInherit+0x74>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bbc:	6982      	ldr	r2, [r0, #24]
 8007bbe:	2a00      	cmp	r2, #0
 8007bc0:	db05      	blt.n	8007bce <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc2:	4a1c      	ldr	r2, [pc, #112]	; (8007c34 <xTaskPriorityInherit+0x8c>)
 8007bc4:	6812      	ldr	r2, [r2, #0]
 8007bc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bc8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007bcc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007bce:	6961      	ldr	r1, [r4, #20]
 8007bd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007bd4:	4a18      	ldr	r2, [pc, #96]	; (8007c38 <xTaskPriorityInherit+0x90>)
 8007bd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bda:	4299      	cmp	r1, r3
 8007bdc:	d005      	beq.n	8007bea <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bde:	4b15      	ldr	r3, [pc, #84]	; (8007c34 <xTaskPriorityInherit+0x8c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8007be6:	2001      	movs	r0, #1
	}
 8007be8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bea:	1d25      	adds	r5, r4, #4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f7fe fd71 	bl	80066d4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007bf2:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <xTaskPriorityInherit+0x8c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007bf8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <xTaskPriorityInherit+0x94>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4298      	cmp	r0, r3
 8007c00:	d809      	bhi.n	8007c16 <xTaskPriorityInherit+0x6e>
 8007c02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007c06:	4629      	mov	r1, r5
 8007c08:	4b0b      	ldr	r3, [pc, #44]	; (8007c38 <xTaskPriorityInherit+0x90>)
 8007c0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c0e:	f7fe fd3d 	bl	800668c <vListInsertEnd>
				xReturn = pdTRUE;
 8007c12:	2001      	movs	r0, #1
 8007c14:	e7e8      	b.n	8007be8 <xTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007c16:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <xTaskPriorityInherit+0x94>)
 8007c18:	6018      	str	r0, [r3, #0]
 8007c1a:	e7f2      	b.n	8007c02 <xTaskPriorityInherit+0x5a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007c1c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <xTaskPriorityInherit+0x8c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d303      	bcc.n	8007c30 <xTaskPriorityInherit+0x88>
	BaseType_t xReturn = pdFALSE;
 8007c28:	2000      	movs	r0, #0
 8007c2a:	e7dd      	b.n	8007be8 <xTaskPriorityInherit+0x40>
 8007c2c:	2000      	movs	r0, #0
	}
 8007c2e:	4770      	bx	lr
					xReturn = pdTRUE;
 8007c30:	2001      	movs	r0, #1
		return xReturn;
 8007c32:	e7d9      	b.n	8007be8 <xTaskPriorityInherit+0x40>
 8007c34:	200016b8 	.word	0x200016b8
 8007c38:	200016c4 	.word	0x200016c4
 8007c3c:	20001b38 	.word	0x20001b38

08007c40 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d03b      	beq.n	8007cbc <xTaskPriorityDisinherit+0x7c>
	{
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007c48:	4b1e      	ldr	r3, [pc, #120]	; (8007cc4 <xTaskPriorityDisinherit+0x84>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4283      	cmp	r3, r0
 8007c4e:	d008      	beq.n	8007c62 <xTaskPriorityDisinherit+0x22>
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	e7fe      	b.n	8007c60 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c62:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007c64:	b943      	cbnz	r3, 8007c78 <xTaskPriorityDisinherit+0x38>
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	e7fe      	b.n	8007c76 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c7c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007c7e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007c80:	4291      	cmp	r1, r2
 8007c82:	d01d      	beq.n	8007cc0 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c84:	b10b      	cbz	r3, 8007c8a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8007c86:	2000      	movs	r0, #0
	}
 8007c88:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c8a:	1d05      	adds	r5, r0, #4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f7fe fd21 	bl	80066d4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c92:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8007c94:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c96:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8007c9a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <xTaskPriorityDisinherit+0x88>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4298      	cmp	r0, r3
 8007ca2:	d901      	bls.n	8007ca8 <xTaskPriorityDisinherit+0x68>
 8007ca4:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <xTaskPriorityDisinherit+0x88>)
 8007ca6:	6018      	str	r0, [r3, #0]
 8007ca8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007cac:	4629      	mov	r1, r5
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <xTaskPriorityDisinherit+0x8c>)
 8007cb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007cb4:	f7fe fcea 	bl	800668c <vListInsertEnd>
					xReturn = pdTRUE;
 8007cb8:	2001      	movs	r0, #1
 8007cba:	e7e5      	b.n	8007c88 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8007cbc:	2000      	movs	r0, #0
	}
 8007cbe:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	e7e1      	b.n	8007c88 <xTaskPriorityDisinherit+0x48>
 8007cc4:	200016b8 	.word	0x200016b8
 8007cc8:	20001b38 	.word	0x20001b38
 8007ccc:	200016c4 	.word	0x200016c4

08007cd0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d046      	beq.n	8007d62 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8007cd8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007cda:	b943      	cbnz	r3, 8007cee <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	e7fe      	b.n	8007cec <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007cee:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007cf0:	428a      	cmp	r2, r1
 8007cf2:	d200      	bcs.n	8007cf6 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007cf4:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007cf6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007cf8:	4291      	cmp	r1, r2
 8007cfa:	d001      	beq.n	8007d00 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d000      	beq.n	8007d02 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8007d02:	4b18      	ldr	r3, [pc, #96]	; (8007d64 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	d022      	beq.n	8007d50 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8007d0a:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d0c:	69a3      	ldr	r3, [r4, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	db02      	blt.n	8007d18 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d12:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007d16:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d18:	6962      	ldr	r2, [r4, #20]
 8007d1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007d20:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d1eb      	bne.n	8007d00 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d28:	1d25      	adds	r5, r4, #4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f7fe fcd2 	bl	80066d4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007d30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007d32:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4298      	cmp	r0, r3
 8007d38:	d901      	bls.n	8007d3e <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8007d3a:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007d3c:	6018      	str	r0, [r3, #0]
 8007d3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007d42:	4629      	mov	r1, r5
 8007d44:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007d46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d4a:	f7fe fc9f 	bl	800668c <vListInsertEnd>
	}
 8007d4e:	e7d7      	b.n	8007d00 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8007d60:	e7fe      	b.n	8007d60 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8007d62:	4770      	bx	lr
 8007d64:	200016b8 	.word	0x200016b8
 8007d68:	200016c4 	.word	0x200016c4
 8007d6c:	20001b38 	.word	0x20001b38

08007d70 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007d70:	4a04      	ldr	r2, [pc, #16]	; (8007d84 <uxTaskResetEventItemValue+0x14>)
 8007d72:	6813      	ldr	r3, [r2, #0]
 8007d74:	6998      	ldr	r0, [r3, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d76:	6813      	ldr	r3, [r2, #0]
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d80:	6193      	str	r3, [r2, #24]
}
 8007d82:	4770      	bx	lr
 8007d84:	200016b8 	.word	0x200016b8

08007d88 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <pvTaskIncrementMutexHeldCount+0x18>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	b123      	cbz	r3, 8007d98 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <pvTaskIncrementMutexHeldCount+0x18>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d94:	3301      	adds	r3, #1
 8007d96:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 8007d98:	4b01      	ldr	r3, [pc, #4]	; (8007da0 <pvTaskIncrementMutexHeldCount+0x18>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
	}
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	200016b8 	.word	0x200016b8

08007da4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007da4:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <prvGetNextExpireTime+0x1c>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	6813      	ldr	r3, [r2, #0]
 8007daa:	fab3 f383 	clz	r3, r3
 8007dae:	095b      	lsrs	r3, r3, #5
 8007db0:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007db2:	b913      	cbnz	r3, 8007dba <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007db4:	68d3      	ldr	r3, [r2, #12]
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dba:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20001bb8 	.word	0x20001bb8

08007dc4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007dc4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007dc6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dc8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	d80c      	bhi.n	8007de8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dce:	1ad2      	subs	r2, r2, r3
 8007dd0:	6983      	ldr	r3, [r0, #24]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d301      	bcc.n	8007dda <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007dd6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8007dd8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007dda:	1d01      	adds	r1, r0, #4
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <prvInsertTimerInActiveList+0x40>)
 8007dde:	6818      	ldr	r0, [r3, #0]
 8007de0:	f7fe fc5f 	bl	80066a2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007de4:	2000      	movs	r0, #0
 8007de6:	e7f7      	b.n	8007dd8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d201      	bcs.n	8007df0 <prvInsertTimerInActiveList+0x2c>
 8007dec:	4299      	cmp	r1, r3
 8007dee:	d206      	bcs.n	8007dfe <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007df0:	1d01      	adds	r1, r0, #4
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <prvInsertTimerInActiveList+0x44>)
 8007df4:	6818      	ldr	r0, [r3, #0]
 8007df6:	f7fe fc54 	bl	80066a2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e7ec      	b.n	8007dd8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8007dfe:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007e00:	e7ea      	b.n	8007dd8 <prvInsertTimerInActiveList+0x14>
 8007e02:	bf00      	nop
 8007e04:	20001bbc 	.word	0x20001bbc
 8007e08:	20001bb8 	.word	0x20001bb8

08007e0c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e0c:	b530      	push	{r4, r5, lr}
 8007e0e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e10:	f000 fa48 	bl	80082a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e14:	4b11      	ldr	r3, [pc, #68]	; (8007e5c <prvCheckForValidListAndQueue+0x50>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	b11b      	cbz	r3, 8007e22 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e1a:	f000 fa65 	bl	80082e8 <vPortExitCritical>
}
 8007e1e:	b003      	add	sp, #12
 8007e20:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8007e22:	4d0f      	ldr	r5, [pc, #60]	; (8007e60 <prvCheckForValidListAndQueue+0x54>)
 8007e24:	4628      	mov	r0, r5
 8007e26:	f7fe fc23 	bl	8006670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e2a:	4c0e      	ldr	r4, [pc, #56]	; (8007e64 <prvCheckForValidListAndQueue+0x58>)
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7fe fc1f 	bl	8006670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <prvCheckForValidListAndQueue+0x5c>)
 8007e34:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e36:	4b0d      	ldr	r3, [pc, #52]	; (8007e6c <prvCheckForValidListAndQueue+0x60>)
 8007e38:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <prvCheckForValidListAndQueue+0x64>)
 8007e40:	4a0c      	ldr	r2, [pc, #48]	; (8007e74 <prvCheckForValidListAndQueue+0x68>)
 8007e42:	2110      	movs	r1, #16
 8007e44:	200a      	movs	r0, #10
 8007e46:	f7fe fd53 	bl	80068f0 <xQueueGenericCreateStatic>
 8007e4a:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <prvCheckForValidListAndQueue+0x50>)
 8007e4c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0e3      	beq.n	8007e1a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e52:	4909      	ldr	r1, [pc, #36]	; (8007e78 <prvCheckForValidListAndQueue+0x6c>)
 8007e54:	f7ff f926 	bl	80070a4 <vQueueAddToRegistry>
 8007e58:	e7df      	b.n	8007e1a <prvCheckForValidListAndQueue+0xe>
 8007e5a:	bf00      	nop
 8007e5c:	20001cdc 	.word	0x20001cdc
 8007e60:	20001c60 	.word	0x20001c60
 8007e64:	20001c74 	.word	0x20001c74
 8007e68:	20001bb8 	.word	0x20001bb8
 8007e6c:	20001bbc 	.word	0x20001bbc
 8007e70:	20001c8c 	.word	0x20001c8c
 8007e74:	20001bc0 	.word	0x20001bc0
 8007e78:	0800a4b0 	.word	0x0800a4b0

08007e7c <xTimerCreateTimerTask>:
{
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007e80:	f7ff ffc4 	bl	8007e0c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007e84:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <xTimerCreateTimerTask+0x54>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	b1cb      	cbz	r3, 8007ebe <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e8a:	2400      	movs	r4, #0
 8007e8c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e8e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e90:	aa07      	add	r2, sp, #28
 8007e92:	a906      	add	r1, sp, #24
 8007e94:	a805      	add	r0, sp, #20
 8007e96:	f7fe fac7 	bl	8006428 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e9a:	9b05      	ldr	r3, [sp, #20]
 8007e9c:	9302      	str	r3, [sp, #8]
 8007e9e:	9b06      	ldr	r3, [sp, #24]
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	4623      	mov	r3, r4
 8007ea8:	9a07      	ldr	r2, [sp, #28]
 8007eaa:	490a      	ldr	r1, [pc, #40]	; (8007ed4 <xTimerCreateTimerTask+0x58>)
 8007eac:	480a      	ldr	r0, [pc, #40]	; (8007ed8 <xTimerCreateTimerTask+0x5c>)
 8007eae:	f7ff fab9 	bl	8007424 <xTaskCreateStatic>
 8007eb2:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <xTimerCreateTimerTask+0x60>)
 8007eb4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007eb6:	b110      	cbz	r0, 8007ebe <xTimerCreateTimerTask+0x42>
}
 8007eb8:	2001      	movs	r0, #1
 8007eba:	b008      	add	sp, #32
 8007ebc:	bd10      	pop	{r4, pc}
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007ece:	e7fe      	b.n	8007ece <xTimerCreateTimerTask+0x52>
 8007ed0:	20001cdc 	.word	0x20001cdc
 8007ed4:	0800a4b8 	.word	0x0800a4b8
 8007ed8:	080081bd 	.word	0x080081bd
 8007edc:	20001ce0 	.word	0x20001ce0

08007ee0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007ee0:	b1b8      	cbz	r0, 8007f12 <xTimerGenericCommand+0x32>
 8007ee2:	469c      	mov	ip, r3
 8007ee4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8007ee6:	4818      	ldr	r0, [pc, #96]	; (8007f48 <xTimerGenericCommand+0x68>)
 8007ee8:	6800      	ldr	r0, [r0, #0]
 8007eea:	b358      	cbz	r0, 8007f44 <xTimerGenericCommand+0x64>
{
 8007eec:	b500      	push	{lr}
 8007eee:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8007ef0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ef2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007ef4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ef6:	2905      	cmp	r1, #5
 8007ef8:	dc1c      	bgt.n	8007f34 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007efa:	f7ff fe45 	bl	8007b88 <xTaskGetSchedulerState>
 8007efe:	2802      	cmp	r0, #2
 8007f00:	d010      	beq.n	8007f24 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f02:	2300      	movs	r3, #0
 8007f04:	461a      	mov	r2, r3
 8007f06:	4669      	mov	r1, sp
 8007f08:	480f      	ldr	r0, [pc, #60]	; (8007f48 <xTimerGenericCommand+0x68>)
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	f7fe fd60 	bl	80069d0 <xQueueGenericSend>
 8007f10:	e015      	b.n	8007f3e <xTimerGenericCommand+0x5e>
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007f22:	e7fe      	b.n	8007f22 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f24:	2300      	movs	r3, #0
 8007f26:	9a06      	ldr	r2, [sp, #24]
 8007f28:	4669      	mov	r1, sp
 8007f2a:	4807      	ldr	r0, [pc, #28]	; (8007f48 <xTimerGenericCommand+0x68>)
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f7fe fd4f 	bl	80069d0 <xQueueGenericSend>
 8007f32:	e004      	b.n	8007f3e <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f34:	2300      	movs	r3, #0
 8007f36:	4662      	mov	r2, ip
 8007f38:	4669      	mov	r1, sp
 8007f3a:	f7fe fe53 	bl	8006be4 <xQueueGenericSendFromISR>
}
 8007f3e:	b005      	add	sp, #20
 8007f40:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8007f44:	2000      	movs	r0, #0
}
 8007f46:	4770      	bx	lr
 8007f48:	20001cdc 	.word	0x20001cdc

08007f4c <prvSwitchTimerLists>:
{
 8007f4c:	b570      	push	{r4, r5, r6, lr}
 8007f4e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f50:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <prvSwitchTimerLists+0x70>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	b352      	cbz	r2, 8007fae <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f5c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f5e:	1d25      	adds	r5, r4, #4
 8007f60:	4628      	mov	r0, r5
 8007f62:	f7fe fbb7 	bl	80066d4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f68:	4620      	mov	r0, r4
 8007f6a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f6c:	69e3      	ldr	r3, [r4, #28]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d1ee      	bne.n	8007f50 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f72:	69a3      	ldr	r3, [r4, #24]
 8007f74:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8007f76:	429e      	cmp	r6, r3
 8007f78:	d207      	bcs.n	8007f8a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f7a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f7c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f7e:	4629      	mov	r1, r5
 8007f80:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <prvSwitchTimerLists+0x70>)
 8007f82:	6818      	ldr	r0, [r3, #0]
 8007f84:	f7fe fb8d 	bl	80066a2 <vListInsert>
 8007f88:	e7e2      	b.n	8007f50 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	9100      	str	r1, [sp, #0]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4632      	mov	r2, r6
 8007f92:	4620      	mov	r0, r4
 8007f94:	f7ff ffa4 	bl	8007ee0 <xTimerGenericCommand>
				configASSERT( xResult );
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d1d9      	bne.n	8007f50 <prvSwitchTimerLists+0x4>
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	e7fe      	b.n	8007fac <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8007fae:	4a04      	ldr	r2, [pc, #16]	; (8007fc0 <prvSwitchTimerLists+0x74>)
 8007fb0:	6810      	ldr	r0, [r2, #0]
 8007fb2:	4902      	ldr	r1, [pc, #8]	; (8007fbc <prvSwitchTimerLists+0x70>)
 8007fb4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8007fb6:	6013      	str	r3, [r2, #0]
}
 8007fb8:	b002      	add	sp, #8
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	20001bb8 	.word	0x20001bb8
 8007fc0:	20001bbc 	.word	0x20001bbc

08007fc4 <prvSampleTimeNow>:
{
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8007fc8:	f7ff faf0 	bl	80075ac <xTaskGetTickCount>
 8007fcc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8007fce:	4b07      	ldr	r3, [pc, #28]	; (8007fec <prvSampleTimeNow+0x28>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4283      	cmp	r3, r0
 8007fd4:	d805      	bhi.n	8007fe2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8007fda:	4b04      	ldr	r3, [pc, #16]	; (8007fec <prvSampleTimeNow+0x28>)
 8007fdc:	601c      	str	r4, [r3, #0]
}
 8007fde:	4620      	mov	r0, r4
 8007fe0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8007fe2:	f7ff ffb3 	bl	8007f4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	e7f6      	b.n	8007fda <prvSampleTimeNow+0x16>
 8007fec:	20001c88 	.word	0x20001c88

08007ff0 <prvProcessExpiredTimer>:
{
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ff8:	4914      	ldr	r1, [pc, #80]	; (800804c <prvProcessExpiredTimer+0x5c>)
 8007ffa:	6809      	ldr	r1, [r1, #0]
 8007ffc:	68c9      	ldr	r1, [r1, #12]
 8007ffe:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008000:	1d20      	adds	r0, r4, #4
 8008002:	f7fe fb67 	bl	80066d4 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008006:	69e1      	ldr	r1, [r4, #28]
 8008008:	2901      	cmp	r1, #1
 800800a:	d004      	beq.n	8008016 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800800c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800800e:	4620      	mov	r0, r4
 8008010:	4798      	blx	r3
}
 8008012:	b002      	add	sp, #8
 8008014:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008016:	69a1      	ldr	r1, [r4, #24]
 8008018:	4633      	mov	r3, r6
 800801a:	462a      	mov	r2, r5
 800801c:	4431      	add	r1, r6
 800801e:	4620      	mov	r0, r4
 8008020:	f7ff fed0 	bl	8007dc4 <prvInsertTimerInActiveList>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0f1      	beq.n	800800c <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008028:	2100      	movs	r1, #0
 800802a:	9100      	str	r1, [sp, #0]
 800802c:	460b      	mov	r3, r1
 800802e:	4632      	mov	r2, r6
 8008030:	4620      	mov	r0, r4
 8008032:	f7ff ff55 	bl	8007ee0 <xTimerGenericCommand>
			configASSERT( xResult );
 8008036:	2800      	cmp	r0, #0
 8008038:	d1e8      	bne.n	800800c <prvProcessExpiredTimer+0x1c>
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	e7fe      	b.n	800804a <prvProcessExpiredTimer+0x5a>
 800804c:	20001bb8 	.word	0x20001bb8

08008050 <prvProcessTimerOrBlockTask>:
{
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	4606      	mov	r6, r0
 8008056:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8008058:	f7ff faa0 	bl	800759c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800805c:	a801      	add	r0, sp, #4
 800805e:	f7ff ffb1 	bl	8007fc4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	bb2b      	cbnz	r3, 80080b2 <prvProcessTimerOrBlockTask+0x62>
 8008066:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008068:	b90c      	cbnz	r4, 800806e <prvProcessTimerOrBlockTask+0x1e>
 800806a:	42b0      	cmp	r0, r6
 800806c:	d21a      	bcs.n	80080a4 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800806e:	b12c      	cbz	r4, 800807c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008070:	4b12      	ldr	r3, [pc, #72]	; (80080bc <prvProcessTimerOrBlockTask+0x6c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681c      	ldr	r4, [r3, #0]
 8008076:	fab4 f484 	clz	r4, r4
 800807a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800807c:	4622      	mov	r2, r4
 800807e:	1b71      	subs	r1, r6, r5
 8008080:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <prvProcessTimerOrBlockTask+0x70>)
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	f7ff f822 	bl	80070cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008088:	f7ff fb22 	bl	80076d0 <xTaskResumeAll>
 800808c:	b998      	cbnz	r0, 80080b6 <prvProcessTimerOrBlockTask+0x66>
					portYIELD_WITHIN_API();
 800808e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008096:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	e008      	b.n	80080b6 <prvProcessTimerOrBlockTask+0x66>
				( void ) xTaskResumeAll();
 80080a4:	f7ff fb14 	bl	80076d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ffa0 	bl	8007ff0 <prvProcessExpiredTimer>
 80080b0:	e001      	b.n	80080b6 <prvProcessTimerOrBlockTask+0x66>
			( void ) xTaskResumeAll();
 80080b2:	f7ff fb0d 	bl	80076d0 <xTaskResumeAll>
}
 80080b6:	b002      	add	sp, #8
 80080b8:	bd70      	pop	{r4, r5, r6, pc}
 80080ba:	bf00      	nop
 80080bc:	20001bbc 	.word	0x20001bbc
 80080c0:	20001cdc 	.word	0x20001cdc

080080c4 <prvProcessReceivedCommands>:
{
 80080c4:	b510      	push	{r4, lr}
 80080c6:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080c8:	e002      	b.n	80080d0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080ca:	9b04      	ldr	r3, [sp, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	da0f      	bge.n	80080f0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080d0:	2200      	movs	r2, #0
 80080d2:	a904      	add	r1, sp, #16
 80080d4:	4b38      	ldr	r3, [pc, #224]	; (80081b8 <prvProcessReceivedCommands+0xf4>)
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	f7fe fdea 	bl	8006cb0 <xQueueReceive>
 80080dc:	2800      	cmp	r0, #0
 80080de:	d069      	beq.n	80081b4 <prvProcessReceivedCommands+0xf0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	daf1      	bge.n	80080ca <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080e6:	9907      	ldr	r1, [sp, #28]
 80080e8:	9806      	ldr	r0, [sp, #24]
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	4798      	blx	r3
 80080ee:	e7ec      	b.n	80080ca <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080f0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080f2:	6963      	ldr	r3, [r4, #20]
 80080f4:	b113      	cbz	r3, 80080fc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080f6:	1d20      	adds	r0, r4, #4
 80080f8:	f7fe faec 	bl	80066d4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080fc:	a803      	add	r0, sp, #12
 80080fe:	f7ff ff61 	bl	8007fc4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	2b09      	cmp	r3, #9
 8008106:	d8e3      	bhi.n	80080d0 <prvProcessReceivedCommands+0xc>
 8008108:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <prvProcessReceivedCommands+0x4c>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	08008139 	.word	0x08008139
 8008114:	08008139 	.word	0x08008139
 8008118:	08008139 	.word	0x08008139
 800811c:	080080d1 	.word	0x080080d1
 8008120:	0800817f 	.word	0x0800817f
 8008124:	080081a5 	.word	0x080081a5
 8008128:	08008139 	.word	0x08008139
 800812c:	08008139 	.word	0x08008139
 8008130:	080080d1 	.word	0x080080d1
 8008134:	0800817f 	.word	0x0800817f
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008138:	9b05      	ldr	r3, [sp, #20]
 800813a:	69a1      	ldr	r1, [r4, #24]
 800813c:	4602      	mov	r2, r0
 800813e:	4419      	add	r1, r3
 8008140:	4620      	mov	r0, r4
 8008142:	f7ff fe3f 	bl	8007dc4 <prvInsertTimerInActiveList>
 8008146:	2800      	cmp	r0, #0
 8008148:	d0c2      	beq.n	80080d0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800814a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800814c:	4620      	mov	r0, r4
 800814e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008150:	69e3      	ldr	r3, [r4, #28]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d1bc      	bne.n	80080d0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008156:	69a2      	ldr	r2, [r4, #24]
 8008158:	2100      	movs	r1, #0
 800815a:	9100      	str	r1, [sp, #0]
 800815c:	460b      	mov	r3, r1
 800815e:	9805      	ldr	r0, [sp, #20]
 8008160:	4402      	add	r2, r0
 8008162:	4620      	mov	r0, r4
 8008164:	f7ff febc 	bl	8007ee0 <xTimerGenericCommand>
							configASSERT( xResult );
 8008168:	2800      	cmp	r0, #0
 800816a:	d1b1      	bne.n	80080d0 <prvProcessReceivedCommands+0xc>
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	e7fe      	b.n	800817c <prvProcessReceivedCommands+0xb8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800817e:	9905      	ldr	r1, [sp, #20]
 8008180:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008182:	b131      	cbz	r1, 8008192 <prvProcessReceivedCommands+0xce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008184:	4603      	mov	r3, r0
 8008186:	4602      	mov	r2, r0
 8008188:	4401      	add	r1, r0
 800818a:	4620      	mov	r0, r4
 800818c:	f7ff fe1a 	bl	8007dc4 <prvInsertTimerInActiveList>
					break;
 8008190:	e79e      	b.n	80080d0 <prvProcessReceivedCommands+0xc>
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081a2:	e7fe      	b.n	80081a2 <prvProcessReceivedCommands+0xde>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80081a4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d191      	bne.n	80080d0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fa6b 	bl	8008688 <vPortFree>
 80081b2:	e78d      	b.n	80080d0 <prvProcessReceivedCommands+0xc>
}
 80081b4:	b008      	add	sp, #32
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	20001cdc 	.word	0x20001cdc

080081bc <prvTimerTask>:
{
 80081bc:	b500      	push	{lr}
 80081be:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081c0:	a801      	add	r0, sp, #4
 80081c2:	f7ff fdef 	bl	8007da4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081c6:	9901      	ldr	r1, [sp, #4]
 80081c8:	f7ff ff42 	bl	8008050 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80081cc:	f7ff ff7a 	bl	80080c4 <prvProcessReceivedCommands>
	for( ;; )
 80081d0:	e7f6      	b.n	80081c0 <prvTimerTask+0x4>
	...

080081d4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80081d4:	b510      	push	{r4, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	4614      	mov	r4, r2
 80081da:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80081dc:	f06f 0301 	mvn.w	r3, #1
 80081e0:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80081e2:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80081e4:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80081e6:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081e8:	2300      	movs	r3, #0
 80081ea:	4669      	mov	r1, sp
 80081ec:	4802      	ldr	r0, [pc, #8]	; (80081f8 <xTimerPendFunctionCallFromISR+0x24>)
 80081ee:	6800      	ldr	r0, [r0, #0]
 80081f0:	f7fe fcf8 	bl	8006be4 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 80081f4:	b004      	add	sp, #16
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	20001cdc 	.word	0x20001cdc

080081fc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081fc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80081fe:	2300      	movs	r3, #0
 8008200:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008202:	4b0d      	ldr	r3, [pc, #52]	; (8008238 <prvTaskExitError+0x3c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d008      	beq.n	800821e <prvTaskExitError+0x22>
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	e7fe      	b.n	800821c <prvTaskExitError+0x20>
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800822e:	9b01      	ldr	r3, [sp, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0fc      	beq.n	800822e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008234:	b002      	add	sp, #8
 8008236:	4770      	bx	lr
 8008238:	200007c4 	.word	0x200007c4

0800823c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800823c:	4806      	ldr	r0, [pc, #24]	; (8008258 <prvPortStartFirstTask+0x1c>)
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	6800      	ldr	r0, [r0, #0]
 8008242:	f380 8808 	msr	MSP, r0
 8008246:	b662      	cpsie	i
 8008248:	b661      	cpsie	f
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	df00      	svc	0
 8008254:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008256:	0000      	.short	0x0000
 8008258:	e000ed08 	.word	0xe000ed08

0800825c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800825c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008260:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008264:	f021 0101 	bic.w	r1, r1, #1
 8008268:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800826c:	4b03      	ldr	r3, [pc, #12]	; (800827c <pxPortInitialiseStack+0x20>)
 800826e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008272:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008276:	3840      	subs	r0, #64	; 0x40
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	080081fd 	.word	0x080081fd

08008280 <SVC_Handler>:
	__asm volatile (
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <pxCurrentTCBConst2>)
 8008282:	6819      	ldr	r1, [r3, #0]
 8008284:	6808      	ldr	r0, [r1, #0]
 8008286:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800828a:	f380 8809 	msr	PSP, r0
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8811 	msr	BASEPRI, r0
 800829a:	f04e 0e0d 	orr.w	lr, lr, #13
 800829e:	4770      	bx	lr

080082a0 <pxCurrentTCBConst2>:
 80082a0:	200016b8 	.word	0x200016b8

080082a4 <vPortEnterCritical>:
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082b4:	4a0b      	ldr	r2, [pc, #44]	; (80082e4 <vPortEnterCritical+0x40>)
 80082b6:	6813      	ldr	r3, [r2, #0]
 80082b8:	3301      	adds	r3, #1
 80082ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d000      	beq.n	80082c2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80082c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082c6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80082ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082ce:	d0f7      	beq.n	80082c0 <vPortEnterCritical+0x1c>
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	e7fe      	b.n	80082e0 <vPortEnterCritical+0x3c>
 80082e2:	bf00      	nop
 80082e4:	200007c4 	.word	0x200007c4

080082e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80082e8:	4b09      	ldr	r3, [pc, #36]	; (8008310 <vPortExitCritical+0x28>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	b943      	cbnz	r3, 8008300 <vPortExitCritical+0x18>
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	e7fe      	b.n	80082fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008300:	3b01      	subs	r3, #1
 8008302:	4a03      	ldr	r2, [pc, #12]	; (8008310 <vPortExitCritical+0x28>)
 8008304:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008306:	b90b      	cbnz	r3, 800830c <vPortExitCritical+0x24>
	__asm volatile
 8008308:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	200007c4 	.word	0x200007c4
	...

08008320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008320:	f3ef 8009 	mrs	r0, PSP
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <pxCurrentTCBConst>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008330:	6010      	str	r0, [r2, #0]
 8008332:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008336:	f04f 0050 	mov.w	r0, #80	; 0x50
 800833a:	f380 8811 	msr	BASEPRI, r0
 800833e:	f7ff fa95 	bl	800786c <vTaskSwitchContext>
 8008342:	f04f 0000 	mov.w	r0, #0
 8008346:	f380 8811 	msr	BASEPRI, r0
 800834a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800834e:	6819      	ldr	r1, [r3, #0]
 8008350:	6808      	ldr	r0, [r1, #0]
 8008352:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008356:	f380 8809 	msr	PSP, r0
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	4770      	bx	lr

08008360 <pxCurrentTCBConst>:
 8008360:	200016b8 	.word	0x200016b8

08008364 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008364:	b508      	push	{r3, lr}
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008376:	f7ff f91f 	bl	80075b8 <xTaskIncrementTick>
 800837a:	b128      	cbz	r0, 8008388 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800837c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008384:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008388:	2300      	movs	r3, #0
 800838a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800838e:	bd08      	pop	{r3, pc}

08008390 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008390:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8008394:	2300      	movs	r3, #0
 8008396:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008398:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <vPortSetupTimerInterrupt+0x20>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4905      	ldr	r1, [pc, #20]	; (80083b4 <vPortSetupTimerInterrupt+0x24>)
 80083a0:	fba1 1303 	umull	r1, r3, r1, r3
 80083a4:	099b      	lsrs	r3, r3, #6
 80083a6:	3b01      	subs	r3, #1
 80083a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083aa:	2307      	movs	r3, #7
 80083ac:	6113      	str	r3, [r2, #16]
}
 80083ae:	4770      	bx	lr
 80083b0:	20000020 	.word	0x20000020
 80083b4:	10624dd3 	.word	0x10624dd3

080083b8 <xPortStartScheduler>:
{
 80083b8:	b510      	push	{r4, lr}
 80083ba:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083bc:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <xPortStartScheduler+0xb0>)
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	b2d2      	uxtb	r2, r2
 80083c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083c4:	22ff      	movs	r2, #255	; 0xff
 80083c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80083d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083d8:	4a24      	ldr	r2, [pc, #144]	; (800846c <xPortStartScheduler+0xb4>)
 80083da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083dc:	4b24      	ldr	r3, [pc, #144]	; (8008470 <xPortStartScheduler+0xb8>)
 80083de:	2207      	movs	r2, #7
 80083e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083e2:	e009      	b.n	80083f8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80083e4:	4a22      	ldr	r2, [pc, #136]	; (8008470 <xPortStartScheduler+0xb8>)
 80083e6:	6813      	ldr	r3, [r2, #0]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80083fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008400:	d1f0      	bne.n	80083e4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008402:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <xPortStartScheduler+0xb8>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b03      	cmp	r3, #3
 8008408:	d008      	beq.n	800841c <xPortStartScheduler+0x64>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	e7fe      	b.n	800841a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	4a14      	ldr	r2, [pc, #80]	; (8008470 <xPortStartScheduler+0xb8>)
 8008420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008422:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008426:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008428:	9b01      	ldr	r3, [sp, #4]
 800842a:	b2db      	uxtb	r3, r3
 800842c:	4a0e      	ldr	r2, [pc, #56]	; (8008468 <xPortStartScheduler+0xb0>)
 800842e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008430:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008434:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008438:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800843c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008440:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008444:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008448:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800844c:	f7ff ffa0 	bl	8008390 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008450:	2400      	movs	r4, #0
 8008452:	4b08      	ldr	r3, [pc, #32]	; (8008474 <xPortStartScheduler+0xbc>)
 8008454:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8008456:	f7ff fef1 	bl	800823c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800845a:	f7ff fa07 	bl	800786c <vTaskSwitchContext>
	prvTaskExitError();
 800845e:	f7ff fecd 	bl	80081fc <prvTaskExitError>
}
 8008462:	4620      	mov	r0, r4
 8008464:	b002      	add	sp, #8
 8008466:	bd10      	pop	{r4, pc}
 8008468:	e000e400 	.word	0xe000e400
 800846c:	20001ce4 	.word	0x20001ce4
 8008470:	20001ce8 	.word	0x20001ce8
 8008474:	200007c4 	.word	0x200007c4

08008478 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008478:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800847c:	2b0f      	cmp	r3, #15
 800847e:	d90f      	bls.n	80084a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008480:	4a11      	ldr	r2, [pc, #68]	; (80084c8 <vPortValidateInterruptPriority+0x50>)
 8008482:	5c9b      	ldrb	r3, [r3, r2]
 8008484:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008486:	4a11      	ldr	r2, [pc, #68]	; (80084cc <vPortValidateInterruptPriority+0x54>)
 8008488:	7812      	ldrb	r2, [r2, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d908      	bls.n	80084a0 <vPortValidateInterruptPriority+0x28>
 800848e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	e7fe      	b.n	800849e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084a4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80084a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ac:	4a08      	ldr	r2, [pc, #32]	; (80084d0 <vPortValidateInterruptPriority+0x58>)
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d908      	bls.n	80084c6 <vPortValidateInterruptPriority+0x4e>
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	e7fe      	b.n	80084c4 <vPortValidateInterruptPriority+0x4c>
	}
 80084c6:	4770      	bx	lr
 80084c8:	e000e3f0 	.word	0xe000e3f0
 80084cc:	20001ce4 	.word	0x20001ce4
 80084d0:	20001ce8 	.word	0x20001ce8

080084d4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084d4:	4a12      	ldr	r2, [pc, #72]	; (8008520 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d6:	f012 0f07 	tst.w	r2, #7
 80084da:	d01e      	beq.n	800851a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084dc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084de:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084e2:	f5c1 637a 	rsb	r3, r1, #4000	; 0xfa0
 80084e6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084ea:	480e      	ldr	r0, [pc, #56]	; (8008524 <prvHeapInit+0x50>)
 80084ec:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084ee:	2100      	movs	r1, #0
 80084f0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084f2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80084f4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80084fa:	480b      	ldr	r0, [pc, #44]	; (8008528 <prvHeapInit+0x54>)
 80084fc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80084fe:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008500:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008502:	1a99      	subs	r1, r3, r2
 8008504:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008506:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008508:	4b08      	ldr	r3, [pc, #32]	; (800852c <prvHeapInit+0x58>)
 800850a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800850c:	4b08      	ldr	r3, [pc, #32]	; (8008530 <prvHeapInit+0x5c>)
 800850e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008510:	4b08      	ldr	r3, [pc, #32]	; (8008534 <prvHeapInit+0x60>)
 8008512:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008516:	601a      	str	r2, [r3, #0]
}
 8008518:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800851a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800851e:	e7e4      	b.n	80084ea <prvHeapInit+0x16>
 8008520:	20001cf0 	.word	0x20001cf0
 8008524:	20002c9c 	.word	0x20002c9c
 8008528:	20001cec 	.word	0x20001cec
 800852c:	20002c98 	.word	0x20002c98
 8008530:	20002c94 	.word	0x20002c94
 8008534:	20002c90 	.word	0x20002c90

08008538 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008538:	4b15      	ldr	r3, [pc, #84]	; (8008590 <prvInsertBlockIntoFreeList+0x58>)
 800853a:	461a      	mov	r2, r3
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4283      	cmp	r3, r0
 8008540:	d3fb      	bcc.n	800853a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008542:	6851      	ldr	r1, [r2, #4]
 8008544:	eb02 0c01 	add.w	ip, r2, r1
 8008548:	4584      	cmp	ip, r0
 800854a:	d009      	beq.n	8008560 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800854c:	6841      	ldr	r1, [r0, #4]
 800854e:	eb00 0c01 	add.w	ip, r0, r1
 8008552:	4563      	cmp	r3, ip
 8008554:	d009      	beq.n	800856a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008556:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008558:	4290      	cmp	r0, r2
 800855a:	d018      	beq.n	800858e <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800855c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800855e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008560:	6840      	ldr	r0, [r0, #4]
 8008562:	4401      	add	r1, r0
 8008564:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8008566:	4610      	mov	r0, r2
 8008568:	e7f0      	b.n	800854c <prvInsertBlockIntoFreeList+0x14>
{
 800856a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800856c:	4c09      	ldr	r4, [pc, #36]	; (8008594 <prvInsertBlockIntoFreeList+0x5c>)
 800856e:	6824      	ldr	r4, [r4, #0]
 8008570:	42a3      	cmp	r3, r4
 8008572:	d00a      	beq.n	800858a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4419      	add	r1, r3
 8008578:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8008580:	4290      	cmp	r0, r2
 8008582:	d000      	beq.n	8008586 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008584:	6010      	str	r0, [r2, #0]
	}
}
 8008586:	bc10      	pop	{r4}
 8008588:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800858a:	6004      	str	r4, [r0, #0]
 800858c:	e7f8      	b.n	8008580 <prvInsertBlockIntoFreeList+0x48>
 800858e:	4770      	bx	lr
 8008590:	20002c9c 	.word	0x20002c9c
 8008594:	20001cec 	.word	0x20001cec

08008598 <pvPortMalloc>:
{
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800859c:	f7fe fffe 	bl	800759c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80085a0:	4b34      	ldr	r3, [pc, #208]	; (8008674 <pvPortMalloc+0xdc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	b1a3      	cbz	r3, 80085d0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085a6:	4b34      	ldr	r3, [pc, #208]	; (8008678 <pvPortMalloc+0xe0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	421d      	tst	r5, r3
 80085ac:	d14a      	bne.n	8008644 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 80085ae:	b135      	cbz	r5, 80085be <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80085b0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085b2:	f015 0f07 	tst.w	r5, #7
 80085b6:	d002      	beq.n	80085be <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085b8:	f025 0507 	bic.w	r5, r5, #7
 80085bc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085be:	2d00      	cmp	r5, #0
 80085c0:	d042      	beq.n	8008648 <pvPortMalloc+0xb0>
 80085c2:	4b2e      	ldr	r3, [pc, #184]	; (800867c <pvPortMalloc+0xe4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	42ab      	cmp	r3, r5
 80085c8:	d34d      	bcc.n	8008666 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 80085ca:	4a2d      	ldr	r2, [pc, #180]	; (8008680 <pvPortMalloc+0xe8>)
 80085cc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085ce:	e004      	b.n	80085da <pvPortMalloc+0x42>
			prvHeapInit();
 80085d0:	f7ff ff80 	bl	80084d4 <prvHeapInit>
 80085d4:	e7e7      	b.n	80085a6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80085d6:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80085d8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80085da:	6863      	ldr	r3, [r4, #4]
 80085dc:	42ab      	cmp	r3, r5
 80085de:	d202      	bcs.n	80085e6 <pvPortMalloc+0x4e>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f7      	bne.n	80085d6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80085e6:	4b23      	ldr	r3, [pc, #140]	; (8008674 <pvPortMalloc+0xdc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	42a3      	cmp	r3, r4
 80085ec:	d03d      	beq.n	800866a <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085ee:	6816      	ldr	r6, [r2, #0]
 80085f0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085f6:	6863      	ldr	r3, [r4, #4]
 80085f8:	1b5b      	subs	r3, r3, r5
 80085fa:	2b10      	cmp	r3, #16
 80085fc:	d910      	bls.n	8008620 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085fe:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008600:	f010 0f07 	tst.w	r0, #7
 8008604:	d008      	beq.n	8008618 <pvPortMalloc+0x80>
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	e7fe      	b.n	8008616 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008618:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800861a:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800861c:	f7ff ff8c 	bl	8008538 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008620:	6862      	ldr	r2, [r4, #4]
 8008622:	4916      	ldr	r1, [pc, #88]	; (800867c <pvPortMalloc+0xe4>)
 8008624:	680b      	ldr	r3, [r1, #0]
 8008626:	1a9b      	subs	r3, r3, r2
 8008628:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800862a:	4916      	ldr	r1, [pc, #88]	; (8008684 <pvPortMalloc+0xec>)
 800862c:	6809      	ldr	r1, [r1, #0]
 800862e:	428b      	cmp	r3, r1
 8008630:	d201      	bcs.n	8008636 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008632:	4914      	ldr	r1, [pc, #80]	; (8008684 <pvPortMalloc+0xec>)
 8008634:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008636:	4b10      	ldr	r3, [pc, #64]	; (8008678 <pvPortMalloc+0xe0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4313      	orrs	r3, r2
 800863c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	e002      	b.n	800864a <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8008644:	2600      	movs	r6, #0
 8008646:	e000      	b.n	800864a <pvPortMalloc+0xb2>
 8008648:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800864a:	f7ff f841 	bl	80076d0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800864e:	f016 0f07 	tst.w	r6, #7
 8008652:	d00c      	beq.n	800866e <pvPortMalloc+0xd6>
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	e7fe      	b.n	8008664 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 8008666:	2600      	movs	r6, #0
 8008668:	e7ef      	b.n	800864a <pvPortMalloc+0xb2>
 800866a:	2600      	movs	r6, #0
 800866c:	e7ed      	b.n	800864a <pvPortMalloc+0xb2>
}
 800866e:	4630      	mov	r0, r6
 8008670:	bd70      	pop	{r4, r5, r6, pc}
 8008672:	bf00      	nop
 8008674:	20001cec 	.word	0x20001cec
 8008678:	20002c90 	.word	0x20002c90
 800867c:	20002c94 	.word	0x20002c94
 8008680:	20002c9c 	.word	0x20002c9c
 8008684:	20002c98 	.word	0x20002c98

08008688 <vPortFree>:
	if( pv != NULL )
 8008688:	b380      	cbz	r0, 80086ec <vPortFree+0x64>
{
 800868a:	b538      	push	{r3, r4, r5, lr}
 800868c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800868e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008692:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008696:	4a16      	ldr	r2, [pc, #88]	; (80086f0 <vPortFree+0x68>)
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	4213      	tst	r3, r2
 800869c:	d108      	bne.n	80086b0 <vPortFree+0x28>
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	e7fe      	b.n	80086ae <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086b0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80086b4:	b141      	cbz	r1, 80086c8 <vPortFree+0x40>
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	e7fe      	b.n	80086c6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086c8:	ea23 0302 	bic.w	r3, r3, r2
 80086cc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80086d0:	f7fe ff64 	bl	800759c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086d4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80086d8:	4a06      	ldr	r2, [pc, #24]	; (80086f4 <vPortFree+0x6c>)
 80086da:	6813      	ldr	r3, [r2, #0]
 80086dc:	440b      	add	r3, r1
 80086de:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086e0:	4628      	mov	r0, r5
 80086e2:	f7ff ff29 	bl	8008538 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80086e6:	f7fe fff3 	bl	80076d0 <xTaskResumeAll>
}
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20002c90 	.word	0x20002c90
 80086f4:	20002c94 	.word	0x20002c94

080086f8 <__itoa>:
 80086f8:	1e93      	subs	r3, r2, #2
 80086fa:	2b22      	cmp	r3, #34	; 0x22
 80086fc:	b510      	push	{r4, lr}
 80086fe:	460c      	mov	r4, r1
 8008700:	d904      	bls.n	800870c <__itoa+0x14>
 8008702:	2300      	movs	r3, #0
 8008704:	461c      	mov	r4, r3
 8008706:	700b      	strb	r3, [r1, #0]
 8008708:	4620      	mov	r0, r4
 800870a:	bd10      	pop	{r4, pc}
 800870c:	2a0a      	cmp	r2, #10
 800870e:	d109      	bne.n	8008724 <__itoa+0x2c>
 8008710:	2800      	cmp	r0, #0
 8008712:	da07      	bge.n	8008724 <__itoa+0x2c>
 8008714:	232d      	movs	r3, #45	; 0x2d
 8008716:	700b      	strb	r3, [r1, #0]
 8008718:	2101      	movs	r1, #1
 800871a:	4240      	negs	r0, r0
 800871c:	4421      	add	r1, r4
 800871e:	f000 f843 	bl	80087a8 <__utoa>
 8008722:	e7f1      	b.n	8008708 <__itoa+0x10>
 8008724:	2100      	movs	r1, #0
 8008726:	e7f9      	b.n	800871c <__itoa+0x24>

08008728 <itoa>:
 8008728:	f7ff bfe6 	b.w	80086f8 <__itoa>

0800872c <rand>:
 800872c:	4b16      	ldr	r3, [pc, #88]	; (8008788 <rand+0x5c>)
 800872e:	b510      	push	{r4, lr}
 8008730:	681c      	ldr	r4, [r3, #0]
 8008732:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008734:	b9b3      	cbnz	r3, 8008764 <rand+0x38>
 8008736:	2018      	movs	r0, #24
 8008738:	f000 fa76 	bl	8008c28 <malloc>
 800873c:	4602      	mov	r2, r0
 800873e:	6320      	str	r0, [r4, #48]	; 0x30
 8008740:	b920      	cbnz	r0, 800874c <rand+0x20>
 8008742:	2152      	movs	r1, #82	; 0x52
 8008744:	4b11      	ldr	r3, [pc, #68]	; (800878c <rand+0x60>)
 8008746:	4812      	ldr	r0, [pc, #72]	; (8008790 <rand+0x64>)
 8008748:	f000 fa08 	bl	8008b5c <__assert_func>
 800874c:	4911      	ldr	r1, [pc, #68]	; (8008794 <rand+0x68>)
 800874e:	4b12      	ldr	r3, [pc, #72]	; (8008798 <rand+0x6c>)
 8008750:	e9c0 1300 	strd	r1, r3, [r0]
 8008754:	4b11      	ldr	r3, [pc, #68]	; (800879c <rand+0x70>)
 8008756:	2100      	movs	r1, #0
 8008758:	6083      	str	r3, [r0, #8]
 800875a:	230b      	movs	r3, #11
 800875c:	8183      	strh	r3, [r0, #12]
 800875e:	2001      	movs	r0, #1
 8008760:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008764:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008766:	480e      	ldr	r0, [pc, #56]	; (80087a0 <rand+0x74>)
 8008768:	690b      	ldr	r3, [r1, #16]
 800876a:	694c      	ldr	r4, [r1, #20]
 800876c:	4358      	muls	r0, r3
 800876e:	4a0d      	ldr	r2, [pc, #52]	; (80087a4 <rand+0x78>)
 8008770:	fb02 0004 	mla	r0, r2, r4, r0
 8008774:	fba3 3202 	umull	r3, r2, r3, r2
 8008778:	3301      	adds	r3, #1
 800877a:	eb40 0002 	adc.w	r0, r0, r2
 800877e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008782:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008786:	bd10      	pop	{r4, pc}
 8008788:	20000820 	.word	0x20000820
 800878c:	0800a4c0 	.word	0x0800a4c0
 8008790:	0800a4d7 	.word	0x0800a4d7
 8008794:	abcd330e 	.word	0xabcd330e
 8008798:	e66d1234 	.word	0xe66d1234
 800879c:	0005deec 	.word	0x0005deec
 80087a0:	5851f42d 	.word	0x5851f42d
 80087a4:	4c957f2d 	.word	0x4c957f2d

080087a8 <__utoa>:
 80087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087aa:	b08b      	sub	sp, #44	; 0x2c
 80087ac:	4605      	mov	r5, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	466e      	mov	r6, sp
 80087b2:	4c1d      	ldr	r4, [pc, #116]	; (8008828 <__utoa+0x80>)
 80087b4:	f104 0c20 	add.w	ip, r4, #32
 80087b8:	4637      	mov	r7, r6
 80087ba:	6820      	ldr	r0, [r4, #0]
 80087bc:	6861      	ldr	r1, [r4, #4]
 80087be:	3408      	adds	r4, #8
 80087c0:	c703      	stmia	r7!, {r0, r1}
 80087c2:	4564      	cmp	r4, ip
 80087c4:	463e      	mov	r6, r7
 80087c6:	d1f7      	bne.n	80087b8 <__utoa+0x10>
 80087c8:	7921      	ldrb	r1, [r4, #4]
 80087ca:	6820      	ldr	r0, [r4, #0]
 80087cc:	7139      	strb	r1, [r7, #4]
 80087ce:	1e91      	subs	r1, r2, #2
 80087d0:	2922      	cmp	r1, #34	; 0x22
 80087d2:	6038      	str	r0, [r7, #0]
 80087d4:	f04f 0100 	mov.w	r1, #0
 80087d8:	d904      	bls.n	80087e4 <__utoa+0x3c>
 80087da:	7019      	strb	r1, [r3, #0]
 80087dc:	460b      	mov	r3, r1
 80087de:	4618      	mov	r0, r3
 80087e0:	b00b      	add	sp, #44	; 0x2c
 80087e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e4:	1e58      	subs	r0, r3, #1
 80087e6:	4684      	mov	ip, r0
 80087e8:	fbb5 f7f2 	udiv	r7, r5, r2
 80087ec:	fb02 5617 	mls	r6, r2, r7, r5
 80087f0:	3628      	adds	r6, #40	; 0x28
 80087f2:	446e      	add	r6, sp
 80087f4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80087f8:	460c      	mov	r4, r1
 80087fa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80087fe:	462e      	mov	r6, r5
 8008800:	42b2      	cmp	r2, r6
 8008802:	463d      	mov	r5, r7
 8008804:	f101 0101 	add.w	r1, r1, #1
 8008808:	d9ee      	bls.n	80087e8 <__utoa+0x40>
 800880a:	2200      	movs	r2, #0
 800880c:	545a      	strb	r2, [r3, r1]
 800880e:	1919      	adds	r1, r3, r4
 8008810:	1aa5      	subs	r5, r4, r2
 8008812:	42aa      	cmp	r2, r5
 8008814:	dae3      	bge.n	80087de <__utoa+0x36>
 8008816:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800881a:	780e      	ldrb	r6, [r1, #0]
 800881c:	3201      	adds	r2, #1
 800881e:	7006      	strb	r6, [r0, #0]
 8008820:	f801 5901 	strb.w	r5, [r1], #-1
 8008824:	e7f4      	b.n	8008810 <__utoa+0x68>
 8008826:	bf00      	nop
 8008828:	0800a52f 	.word	0x0800a52f

0800882c <std>:
 800882c:	2300      	movs	r3, #0
 800882e:	b510      	push	{r4, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	e9c0 3300 	strd	r3, r3, [r0]
 8008836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800883a:	6083      	str	r3, [r0, #8]
 800883c:	8181      	strh	r1, [r0, #12]
 800883e:	6643      	str	r3, [r0, #100]	; 0x64
 8008840:	81c2      	strh	r2, [r0, #14]
 8008842:	6183      	str	r3, [r0, #24]
 8008844:	4619      	mov	r1, r3
 8008846:	2208      	movs	r2, #8
 8008848:	305c      	adds	r0, #92	; 0x5c
 800884a:	f000 f8f4 	bl	8008a36 <memset>
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <std+0x58>)
 8008850:	6224      	str	r4, [r4, #32]
 8008852:	6263      	str	r3, [r4, #36]	; 0x24
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <std+0x5c>)
 8008856:	62a3      	str	r3, [r4, #40]	; 0x28
 8008858:	4b0c      	ldr	r3, [pc, #48]	; (800888c <std+0x60>)
 800885a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800885c:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <std+0x64>)
 800885e:	6323      	str	r3, [r4, #48]	; 0x30
 8008860:	4b0c      	ldr	r3, [pc, #48]	; (8008894 <std+0x68>)
 8008862:	429c      	cmp	r4, r3
 8008864:	d006      	beq.n	8008874 <std+0x48>
 8008866:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800886a:	4294      	cmp	r4, r2
 800886c:	d002      	beq.n	8008874 <std+0x48>
 800886e:	33d0      	adds	r3, #208	; 0xd0
 8008870:	429c      	cmp	r4, r3
 8008872:	d105      	bne.n	8008880 <std+0x54>
 8008874:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800887c:	f000 b954 	b.w	8008b28 <__retarget_lock_init_recursive>
 8008880:	bd10      	pop	{r4, pc}
 8008882:	bf00      	nop
 8008884:	080089b1 	.word	0x080089b1
 8008888:	080089d3 	.word	0x080089d3
 800888c:	08008a0b 	.word	0x08008a0b
 8008890:	08008a2f 	.word	0x08008a2f
 8008894:	20002ca4 	.word	0x20002ca4

08008898 <stdio_exit_handler>:
 8008898:	4a02      	ldr	r2, [pc, #8]	; (80088a4 <stdio_exit_handler+0xc>)
 800889a:	4903      	ldr	r1, [pc, #12]	; (80088a8 <stdio_exit_handler+0x10>)
 800889c:	4803      	ldr	r0, [pc, #12]	; (80088ac <stdio_exit_handler+0x14>)
 800889e:	f000 b869 	b.w	8008974 <_fwalk_sglue>
 80088a2:	bf00      	nop
 80088a4:	200007c8 	.word	0x200007c8
 80088a8:	08008e95 	.word	0x08008e95
 80088ac:	200007d4 	.word	0x200007d4

080088b0 <cleanup_stdio>:
 80088b0:	6841      	ldr	r1, [r0, #4]
 80088b2:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <cleanup_stdio+0x34>)
 80088b4:	b510      	push	{r4, lr}
 80088b6:	4299      	cmp	r1, r3
 80088b8:	4604      	mov	r4, r0
 80088ba:	d001      	beq.n	80088c0 <cleanup_stdio+0x10>
 80088bc:	f000 faea 	bl	8008e94 <_fflush_r>
 80088c0:	68a1      	ldr	r1, [r4, #8]
 80088c2:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <cleanup_stdio+0x38>)
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d002      	beq.n	80088ce <cleanup_stdio+0x1e>
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fae3 	bl	8008e94 <_fflush_r>
 80088ce:	68e1      	ldr	r1, [r4, #12]
 80088d0:	4b06      	ldr	r3, [pc, #24]	; (80088ec <cleanup_stdio+0x3c>)
 80088d2:	4299      	cmp	r1, r3
 80088d4:	d004      	beq.n	80088e0 <cleanup_stdio+0x30>
 80088d6:	4620      	mov	r0, r4
 80088d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088dc:	f000 bada 	b.w	8008e94 <_fflush_r>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	bf00      	nop
 80088e4:	20002ca4 	.word	0x20002ca4
 80088e8:	20002d0c 	.word	0x20002d0c
 80088ec:	20002d74 	.word	0x20002d74

080088f0 <global_stdio_init.part.0>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <global_stdio_init.part.0+0x30>)
 80088f4:	4c0b      	ldr	r4, [pc, #44]	; (8008924 <global_stdio_init.part.0+0x34>)
 80088f6:	4a0c      	ldr	r2, [pc, #48]	; (8008928 <global_stdio_init.part.0+0x38>)
 80088f8:	4620      	mov	r0, r4
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	2104      	movs	r1, #4
 80088fe:	2200      	movs	r2, #0
 8008900:	f7ff ff94 	bl	800882c <std>
 8008904:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008908:	2201      	movs	r2, #1
 800890a:	2109      	movs	r1, #9
 800890c:	f7ff ff8e 	bl	800882c <std>
 8008910:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008914:	2202      	movs	r2, #2
 8008916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891a:	2112      	movs	r1, #18
 800891c:	f7ff bf86 	b.w	800882c <std>
 8008920:	20002ddc 	.word	0x20002ddc
 8008924:	20002ca4 	.word	0x20002ca4
 8008928:	08008899 	.word	0x08008899

0800892c <__sfp_lock_acquire>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__sfp_lock_acquire+0x8>)
 800892e:	f000 b8fc 	b.w	8008b2a <__retarget_lock_acquire_recursive>
 8008932:	bf00      	nop
 8008934:	20002de5 	.word	0x20002de5

08008938 <__sfp_lock_release>:
 8008938:	4801      	ldr	r0, [pc, #4]	; (8008940 <__sfp_lock_release+0x8>)
 800893a:	f000 b8f7 	b.w	8008b2c <__retarget_lock_release_recursive>
 800893e:	bf00      	nop
 8008940:	20002de5 	.word	0x20002de5

08008944 <__sinit>:
 8008944:	b510      	push	{r4, lr}
 8008946:	4604      	mov	r4, r0
 8008948:	f7ff fff0 	bl	800892c <__sfp_lock_acquire>
 800894c:	6a23      	ldr	r3, [r4, #32]
 800894e:	b11b      	cbz	r3, 8008958 <__sinit+0x14>
 8008950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008954:	f7ff bff0 	b.w	8008938 <__sfp_lock_release>
 8008958:	4b04      	ldr	r3, [pc, #16]	; (800896c <__sinit+0x28>)
 800895a:	6223      	str	r3, [r4, #32]
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <__sinit+0x2c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f5      	bne.n	8008950 <__sinit+0xc>
 8008964:	f7ff ffc4 	bl	80088f0 <global_stdio_init.part.0>
 8008968:	e7f2      	b.n	8008950 <__sinit+0xc>
 800896a:	bf00      	nop
 800896c:	080088b1 	.word	0x080088b1
 8008970:	20002ddc 	.word	0x20002ddc

08008974 <_fwalk_sglue>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	4607      	mov	r7, r0
 800897a:	4688      	mov	r8, r1
 800897c:	4614      	mov	r4, r2
 800897e:	2600      	movs	r6, #0
 8008980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008984:	f1b9 0901 	subs.w	r9, r9, #1
 8008988:	d505      	bpl.n	8008996 <_fwalk_sglue+0x22>
 800898a:	6824      	ldr	r4, [r4, #0]
 800898c:	2c00      	cmp	r4, #0
 800898e:	d1f7      	bne.n	8008980 <_fwalk_sglue+0xc>
 8008990:	4630      	mov	r0, r6
 8008992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d907      	bls.n	80089ac <_fwalk_sglue+0x38>
 800899c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089a0:	3301      	adds	r3, #1
 80089a2:	d003      	beq.n	80089ac <_fwalk_sglue+0x38>
 80089a4:	4629      	mov	r1, r5
 80089a6:	4638      	mov	r0, r7
 80089a8:	47c0      	blx	r8
 80089aa:	4306      	orrs	r6, r0
 80089ac:	3568      	adds	r5, #104	; 0x68
 80089ae:	e7e9      	b.n	8008984 <_fwalk_sglue+0x10>

080089b0 <__sread>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b8:	f000 f868 	bl	8008a8c <_read_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	bfab      	itete	ge
 80089c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089c2:	89a3      	ldrhlt	r3, [r4, #12]
 80089c4:	181b      	addge	r3, r3, r0
 80089c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ca:	bfac      	ite	ge
 80089cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ce:	81a3      	strhlt	r3, [r4, #12]
 80089d0:	bd10      	pop	{r4, pc}

080089d2 <__swrite>:
 80089d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d6:	461f      	mov	r7, r3
 80089d8:	898b      	ldrh	r3, [r1, #12]
 80089da:	4605      	mov	r5, r0
 80089dc:	05db      	lsls	r3, r3, #23
 80089de:	460c      	mov	r4, r1
 80089e0:	4616      	mov	r6, r2
 80089e2:	d505      	bpl.n	80089f0 <__swrite+0x1e>
 80089e4:	2302      	movs	r3, #2
 80089e6:	2200      	movs	r2, #0
 80089e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ec:	f000 f83c 	bl	8008a68 <_lseek_r>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	4632      	mov	r2, r6
 80089f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	4628      	mov	r0, r5
 80089fc:	463b      	mov	r3, r7
 80089fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a06:	f000 b853 	b.w	8008ab0 <_write_r>

08008a0a <__sseek>:
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a12:	f000 f829 	bl	8008a68 <_lseek_r>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	bf15      	itete	ne
 8008a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a26:	81a3      	strheq	r3, [r4, #12]
 8008a28:	bf18      	it	ne
 8008a2a:	81a3      	strhne	r3, [r4, #12]
 8008a2c:	bd10      	pop	{r4, pc}

08008a2e <__sclose>:
 8008a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a32:	f000 b809 	b.w	8008a48 <_close_r>

08008a36 <memset>:
 8008a36:	4603      	mov	r3, r0
 8008a38:	4402      	add	r2, r0
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d100      	bne.n	8008a40 <memset+0xa>
 8008a3e:	4770      	bx	lr
 8008a40:	f803 1b01 	strb.w	r1, [r3], #1
 8008a44:	e7f9      	b.n	8008a3a <memset+0x4>
	...

08008a48 <_close_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4d05      	ldr	r5, [pc, #20]	; (8008a64 <_close_r+0x1c>)
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	602b      	str	r3, [r5, #0]
 8008a54:	f7fa fc1e 	bl	8003294 <_close>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_close_r+0x1a>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_close_r+0x1a>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	20002de0 	.word	0x20002de0

08008a68 <_lseek_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	4611      	mov	r1, r2
 8008a70:	2200      	movs	r2, #0
 8008a72:	4d05      	ldr	r5, [pc, #20]	; (8008a88 <_lseek_r+0x20>)
 8008a74:	602a      	str	r2, [r5, #0]
 8008a76:	461a      	mov	r2, r3
 8008a78:	f7fa fc16 	bl	80032a8 <_lseek>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_lseek_r+0x1e>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_lseek_r+0x1e>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	20002de0 	.word	0x20002de0

08008a8c <_read_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	4611      	mov	r1, r2
 8008a94:	2200      	movs	r2, #0
 8008a96:	4d05      	ldr	r5, [pc, #20]	; (8008aac <_read_r+0x20>)
 8008a98:	602a      	str	r2, [r5, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f7fa fbdc 	bl	8003258 <_read>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_read_r+0x1e>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_read_r+0x1e>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	20002de0 	.word	0x20002de0

08008ab0 <_write_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4d05      	ldr	r5, [pc, #20]	; (8008ad0 <_write_r+0x20>)
 8008abc:	602a      	str	r2, [r5, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f7fa fbda 	bl	8003278 <_write>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_write_r+0x1e>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_write_r+0x1e>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	20002de0 	.word	0x20002de0

08008ad4 <__errno>:
 8008ad4:	4b01      	ldr	r3, [pc, #4]	; (8008adc <__errno+0x8>)
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	20000820 	.word	0x20000820

08008ae0 <__libc_init_array>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	4d0c      	ldr	r5, [pc, #48]	; (8008b18 <__libc_init_array+0x38>)
 8008ae6:	4c0d      	ldr	r4, [pc, #52]	; (8008b1c <__libc_init_array+0x3c>)
 8008ae8:	1b64      	subs	r4, r4, r5
 8008aea:	10a4      	asrs	r4, r4, #2
 8008aec:	42a6      	cmp	r6, r4
 8008aee:	d109      	bne.n	8008b04 <__libc_init_array+0x24>
 8008af0:	f000 fe62 	bl	80097b8 <_init>
 8008af4:	2600      	movs	r6, #0
 8008af6:	4d0a      	ldr	r5, [pc, #40]	; (8008b20 <__libc_init_array+0x40>)
 8008af8:	4c0a      	ldr	r4, [pc, #40]	; (8008b24 <__libc_init_array+0x44>)
 8008afa:	1b64      	subs	r4, r4, r5
 8008afc:	10a4      	asrs	r4, r4, #2
 8008afe:	42a6      	cmp	r6, r4
 8008b00:	d105      	bne.n	8008b0e <__libc_init_array+0x2e>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b08:	4798      	blx	r3
 8008b0a:	3601      	adds	r6, #1
 8008b0c:	e7ee      	b.n	8008aec <__libc_init_array+0xc>
 8008b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b12:	4798      	blx	r3
 8008b14:	3601      	adds	r6, #1
 8008b16:	e7f2      	b.n	8008afe <__libc_init_array+0x1e>
 8008b18:	0800a5c4 	.word	0x0800a5c4
 8008b1c:	0800a5c4 	.word	0x0800a5c4
 8008b20:	0800a5c4 	.word	0x0800a5c4
 8008b24:	0800a5c8 	.word	0x0800a5c8

08008b28 <__retarget_lock_init_recursive>:
 8008b28:	4770      	bx	lr

08008b2a <__retarget_lock_acquire_recursive>:
 8008b2a:	4770      	bx	lr

08008b2c <__retarget_lock_release_recursive>:
 8008b2c:	4770      	bx	lr

08008b2e <strcpy>:
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b34:	f803 2b01 	strb.w	r2, [r3], #1
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d1f9      	bne.n	8008b30 <strcpy+0x2>
 8008b3c:	4770      	bx	lr

08008b3e <memcpy>:
 8008b3e:	440a      	add	r2, r1
 8008b40:	4291      	cmp	r1, r2
 8008b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b46:	d100      	bne.n	8008b4a <memcpy+0xc>
 8008b48:	4770      	bx	lr
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b50:	4291      	cmp	r1, r2
 8008b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b56:	d1f9      	bne.n	8008b4c <memcpy+0xe>
 8008b58:	bd10      	pop	{r4, pc}
	...

08008b5c <__assert_func>:
 8008b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b5e:	4614      	mov	r4, r2
 8008b60:	461a      	mov	r2, r3
 8008b62:	4b09      	ldr	r3, [pc, #36]	; (8008b88 <__assert_func+0x2c>)
 8008b64:	4605      	mov	r5, r0
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68d8      	ldr	r0, [r3, #12]
 8008b6a:	b14c      	cbz	r4, 8008b80 <__assert_func+0x24>
 8008b6c:	4b07      	ldr	r3, [pc, #28]	; (8008b8c <__assert_func+0x30>)
 8008b6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b72:	9100      	str	r1, [sp, #0]
 8008b74:	462b      	mov	r3, r5
 8008b76:	4906      	ldr	r1, [pc, #24]	; (8008b90 <__assert_func+0x34>)
 8008b78:	f000 f9b4 	bl	8008ee4 <fiprintf>
 8008b7c:	f000 f9d4 	bl	8008f28 <abort>
 8008b80:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <__assert_func+0x38>)
 8008b82:	461c      	mov	r4, r3
 8008b84:	e7f3      	b.n	8008b6e <__assert_func+0x12>
 8008b86:	bf00      	nop
 8008b88:	20000820 	.word	0x20000820
 8008b8c:	0800a554 	.word	0x0800a554
 8008b90:	0800a561 	.word	0x0800a561
 8008b94:	0800a58f 	.word	0x0800a58f

08008b98 <_free_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d040      	beq.n	8008c22 <_free_r+0x8a>
 8008ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba4:	1f0c      	subs	r4, r1, #4
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	bfb8      	it	lt
 8008baa:	18e4      	addlt	r4, r4, r3
 8008bac:	f000 f8e4 	bl	8008d78 <__malloc_lock>
 8008bb0:	4a1c      	ldr	r2, [pc, #112]	; (8008c24 <_free_r+0x8c>)
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	b933      	cbnz	r3, 8008bc4 <_free_r+0x2c>
 8008bb6:	6063      	str	r3, [r4, #4]
 8008bb8:	6014      	str	r4, [r2, #0]
 8008bba:	4628      	mov	r0, r5
 8008bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bc0:	f000 b8e0 	b.w	8008d84 <__malloc_unlock>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d908      	bls.n	8008bda <_free_r+0x42>
 8008bc8:	6820      	ldr	r0, [r4, #0]
 8008bca:	1821      	adds	r1, r4, r0
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf01      	itttt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	1809      	addeq	r1, r1, r0
 8008bd6:	6021      	streq	r1, [r4, #0]
 8008bd8:	e7ed      	b.n	8008bb6 <_free_r+0x1e>
 8008bda:	461a      	mov	r2, r3
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b10b      	cbz	r3, 8008be4 <_free_r+0x4c>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d9fa      	bls.n	8008bda <_free_r+0x42>
 8008be4:	6811      	ldr	r1, [r2, #0]
 8008be6:	1850      	adds	r0, r2, r1
 8008be8:	42a0      	cmp	r0, r4
 8008bea:	d10b      	bne.n	8008c04 <_free_r+0x6c>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	4401      	add	r1, r0
 8008bf0:	1850      	adds	r0, r2, r1
 8008bf2:	4283      	cmp	r3, r0
 8008bf4:	6011      	str	r1, [r2, #0]
 8008bf6:	d1e0      	bne.n	8008bba <_free_r+0x22>
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4408      	add	r0, r1
 8008bfe:	6010      	str	r0, [r2, #0]
 8008c00:	6053      	str	r3, [r2, #4]
 8008c02:	e7da      	b.n	8008bba <_free_r+0x22>
 8008c04:	d902      	bls.n	8008c0c <_free_r+0x74>
 8008c06:	230c      	movs	r3, #12
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	e7d6      	b.n	8008bba <_free_r+0x22>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	1821      	adds	r1, r4, r0
 8008c10:	428b      	cmp	r3, r1
 8008c12:	bf01      	itttt	eq
 8008c14:	6819      	ldreq	r1, [r3, #0]
 8008c16:	685b      	ldreq	r3, [r3, #4]
 8008c18:	1809      	addeq	r1, r1, r0
 8008c1a:	6021      	streq	r1, [r4, #0]
 8008c1c:	6063      	str	r3, [r4, #4]
 8008c1e:	6054      	str	r4, [r2, #4]
 8008c20:	e7cb      	b.n	8008bba <_free_r+0x22>
 8008c22:	bd38      	pop	{r3, r4, r5, pc}
 8008c24:	20002de8 	.word	0x20002de8

08008c28 <malloc>:
 8008c28:	4b02      	ldr	r3, [pc, #8]	; (8008c34 <malloc+0xc>)
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	f000 b823 	b.w	8008c78 <_malloc_r>
 8008c32:	bf00      	nop
 8008c34:	20000820 	.word	0x20000820

08008c38 <sbrk_aligned>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	4e0e      	ldr	r6, [pc, #56]	; (8008c74 <sbrk_aligned+0x3c>)
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	6831      	ldr	r1, [r6, #0]
 8008c40:	4605      	mov	r5, r0
 8008c42:	b911      	cbnz	r1, 8008c4a <sbrk_aligned+0x12>
 8008c44:	f000 f960 	bl	8008f08 <_sbrk_r>
 8008c48:	6030      	str	r0, [r6, #0]
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f000 f95b 	bl	8008f08 <_sbrk_r>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	d00a      	beq.n	8008c6c <sbrk_aligned+0x34>
 8008c56:	1cc4      	adds	r4, r0, #3
 8008c58:	f024 0403 	bic.w	r4, r4, #3
 8008c5c:	42a0      	cmp	r0, r4
 8008c5e:	d007      	beq.n	8008c70 <sbrk_aligned+0x38>
 8008c60:	1a21      	subs	r1, r4, r0
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 f950 	bl	8008f08 <_sbrk_r>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d101      	bne.n	8008c70 <sbrk_aligned+0x38>
 8008c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c70:	4620      	mov	r0, r4
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	20002dec 	.word	0x20002dec

08008c78 <_malloc_r>:
 8008c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	1ccd      	adds	r5, r1, #3
 8008c7e:	f025 0503 	bic.w	r5, r5, #3
 8008c82:	3508      	adds	r5, #8
 8008c84:	2d0c      	cmp	r5, #12
 8008c86:	bf38      	it	cc
 8008c88:	250c      	movcc	r5, #12
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	db01      	blt.n	8008c94 <_malloc_r+0x1c>
 8008c90:	42a9      	cmp	r1, r5
 8008c92:	d905      	bls.n	8008ca0 <_malloc_r+0x28>
 8008c94:	230c      	movs	r3, #12
 8008c96:	2600      	movs	r6, #0
 8008c98:	603b      	str	r3, [r7, #0]
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d74 <_malloc_r+0xfc>
 8008ca4:	f000 f868 	bl	8008d78 <__malloc_lock>
 8008ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cac:	461c      	mov	r4, r3
 8008cae:	bb5c      	cbnz	r4, 8008d08 <_malloc_r+0x90>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4638      	mov	r0, r7
 8008cb4:	f7ff ffc0 	bl	8008c38 <sbrk_aligned>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	4604      	mov	r4, r0
 8008cbc:	d155      	bne.n	8008d6a <_malloc_r+0xf2>
 8008cbe:	f8d8 4000 	ldr.w	r4, [r8]
 8008cc2:	4626      	mov	r6, r4
 8008cc4:	2e00      	cmp	r6, #0
 8008cc6:	d145      	bne.n	8008d54 <_malloc_r+0xdc>
 8008cc8:	2c00      	cmp	r4, #0
 8008cca:	d048      	beq.n	8008d5e <_malloc_r+0xe6>
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	4631      	mov	r1, r6
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	eb04 0903 	add.w	r9, r4, r3
 8008cd6:	f000 f917 	bl	8008f08 <_sbrk_r>
 8008cda:	4581      	cmp	r9, r0
 8008cdc:	d13f      	bne.n	8008d5e <_malloc_r+0xe6>
 8008cde:	6821      	ldr	r1, [r4, #0]
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	1a6d      	subs	r5, r5, r1
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7ff ffa7 	bl	8008c38 <sbrk_aligned>
 8008cea:	3001      	adds	r0, #1
 8008cec:	d037      	beq.n	8008d5e <_malloc_r+0xe6>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	442b      	add	r3, r5
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d038      	beq.n	8008d6e <_malloc_r+0xf6>
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	42a2      	cmp	r2, r4
 8008d00:	d12b      	bne.n	8008d5a <_malloc_r+0xe2>
 8008d02:	2200      	movs	r2, #0
 8008d04:	605a      	str	r2, [r3, #4]
 8008d06:	e00f      	b.n	8008d28 <_malloc_r+0xb0>
 8008d08:	6822      	ldr	r2, [r4, #0]
 8008d0a:	1b52      	subs	r2, r2, r5
 8008d0c:	d41f      	bmi.n	8008d4e <_malloc_r+0xd6>
 8008d0e:	2a0b      	cmp	r2, #11
 8008d10:	d917      	bls.n	8008d42 <_malloc_r+0xca>
 8008d12:	1961      	adds	r1, r4, r5
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	6025      	str	r5, [r4, #0]
 8008d18:	bf18      	it	ne
 8008d1a:	6059      	strne	r1, [r3, #4]
 8008d1c:	6863      	ldr	r3, [r4, #4]
 8008d1e:	bf08      	it	eq
 8008d20:	f8c8 1000 	streq.w	r1, [r8]
 8008d24:	5162      	str	r2, [r4, r5]
 8008d26:	604b      	str	r3, [r1, #4]
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f104 060b 	add.w	r6, r4, #11
 8008d2e:	f000 f829 	bl	8008d84 <__malloc_unlock>
 8008d32:	f026 0607 	bic.w	r6, r6, #7
 8008d36:	1d23      	adds	r3, r4, #4
 8008d38:	1af2      	subs	r2, r6, r3
 8008d3a:	d0ae      	beq.n	8008c9a <_malloc_r+0x22>
 8008d3c:	1b9b      	subs	r3, r3, r6
 8008d3e:	50a3      	str	r3, [r4, r2]
 8008d40:	e7ab      	b.n	8008c9a <_malloc_r+0x22>
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	6862      	ldr	r2, [r4, #4]
 8008d46:	d1dd      	bne.n	8008d04 <_malloc_r+0x8c>
 8008d48:	f8c8 2000 	str.w	r2, [r8]
 8008d4c:	e7ec      	b.n	8008d28 <_malloc_r+0xb0>
 8008d4e:	4623      	mov	r3, r4
 8008d50:	6864      	ldr	r4, [r4, #4]
 8008d52:	e7ac      	b.n	8008cae <_malloc_r+0x36>
 8008d54:	4634      	mov	r4, r6
 8008d56:	6876      	ldr	r6, [r6, #4]
 8008d58:	e7b4      	b.n	8008cc4 <_malloc_r+0x4c>
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	e7cc      	b.n	8008cf8 <_malloc_r+0x80>
 8008d5e:	230c      	movs	r3, #12
 8008d60:	4638      	mov	r0, r7
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	f000 f80e 	bl	8008d84 <__malloc_unlock>
 8008d68:	e797      	b.n	8008c9a <_malloc_r+0x22>
 8008d6a:	6025      	str	r5, [r4, #0]
 8008d6c:	e7dc      	b.n	8008d28 <_malloc_r+0xb0>
 8008d6e:	605b      	str	r3, [r3, #4]
 8008d70:	deff      	udf	#255	; 0xff
 8008d72:	bf00      	nop
 8008d74:	20002de8 	.word	0x20002de8

08008d78 <__malloc_lock>:
 8008d78:	4801      	ldr	r0, [pc, #4]	; (8008d80 <__malloc_lock+0x8>)
 8008d7a:	f7ff bed6 	b.w	8008b2a <__retarget_lock_acquire_recursive>
 8008d7e:	bf00      	nop
 8008d80:	20002de4 	.word	0x20002de4

08008d84 <__malloc_unlock>:
 8008d84:	4801      	ldr	r0, [pc, #4]	; (8008d8c <__malloc_unlock+0x8>)
 8008d86:	f7ff bed1 	b.w	8008b2c <__retarget_lock_release_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	20002de4 	.word	0x20002de4

08008d90 <__sflush_r>:
 8008d90:	898a      	ldrh	r2, [r1, #12]
 8008d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d94:	4605      	mov	r5, r0
 8008d96:	0710      	lsls	r0, r2, #28
 8008d98:	460c      	mov	r4, r1
 8008d9a:	d457      	bmi.n	8008e4c <__sflush_r+0xbc>
 8008d9c:	684b      	ldr	r3, [r1, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	dc04      	bgt.n	8008dac <__sflush_r+0x1c>
 8008da2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dc01      	bgt.n	8008dac <__sflush_r+0x1c>
 8008da8:	2000      	movs	r0, #0
 8008daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dae:	2e00      	cmp	r6, #0
 8008db0:	d0fa      	beq.n	8008da8 <__sflush_r+0x18>
 8008db2:	2300      	movs	r3, #0
 8008db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008db8:	682f      	ldr	r7, [r5, #0]
 8008dba:	6a21      	ldr	r1, [r4, #32]
 8008dbc:	602b      	str	r3, [r5, #0]
 8008dbe:	d032      	beq.n	8008e26 <__sflush_r+0x96>
 8008dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	075a      	lsls	r2, r3, #29
 8008dc6:	d505      	bpl.n	8008dd4 <__sflush_r+0x44>
 8008dc8:	6863      	ldr	r3, [r4, #4]
 8008dca:	1ac0      	subs	r0, r0, r3
 8008dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dce:	b10b      	cbz	r3, 8008dd4 <__sflush_r+0x44>
 8008dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dd2:	1ac0      	subs	r0, r0, r3
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dda:	4628      	mov	r0, r5
 8008ddc:	6a21      	ldr	r1, [r4, #32]
 8008dde:	47b0      	blx	r6
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	d106      	bne.n	8008df4 <__sflush_r+0x64>
 8008de6:	6829      	ldr	r1, [r5, #0]
 8008de8:	291d      	cmp	r1, #29
 8008dea:	d82b      	bhi.n	8008e44 <__sflush_r+0xb4>
 8008dec:	4a28      	ldr	r2, [pc, #160]	; (8008e90 <__sflush_r+0x100>)
 8008dee:	410a      	asrs	r2, r1
 8008df0:	07d6      	lsls	r6, r2, #31
 8008df2:	d427      	bmi.n	8008e44 <__sflush_r+0xb4>
 8008df4:	2200      	movs	r2, #0
 8008df6:	6062      	str	r2, [r4, #4]
 8008df8:	6922      	ldr	r2, [r4, #16]
 8008dfa:	04d9      	lsls	r1, r3, #19
 8008dfc:	6022      	str	r2, [r4, #0]
 8008dfe:	d504      	bpl.n	8008e0a <__sflush_r+0x7a>
 8008e00:	1c42      	adds	r2, r0, #1
 8008e02:	d101      	bne.n	8008e08 <__sflush_r+0x78>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b903      	cbnz	r3, 8008e0a <__sflush_r+0x7a>
 8008e08:	6560      	str	r0, [r4, #84]	; 0x54
 8008e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e0c:	602f      	str	r7, [r5, #0]
 8008e0e:	2900      	cmp	r1, #0
 8008e10:	d0ca      	beq.n	8008da8 <__sflush_r+0x18>
 8008e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e16:	4299      	cmp	r1, r3
 8008e18:	d002      	beq.n	8008e20 <__sflush_r+0x90>
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f7ff febc 	bl	8008b98 <_free_r>
 8008e20:	2000      	movs	r0, #0
 8008e22:	6360      	str	r0, [r4, #52]	; 0x34
 8008e24:	e7c1      	b.n	8008daa <__sflush_r+0x1a>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4628      	mov	r0, r5
 8008e2a:	47b0      	blx	r6
 8008e2c:	1c41      	adds	r1, r0, #1
 8008e2e:	d1c8      	bne.n	8008dc2 <__sflush_r+0x32>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0c5      	beq.n	8008dc2 <__sflush_r+0x32>
 8008e36:	2b1d      	cmp	r3, #29
 8008e38:	d001      	beq.n	8008e3e <__sflush_r+0xae>
 8008e3a:	2b16      	cmp	r3, #22
 8008e3c:	d101      	bne.n	8008e42 <__sflush_r+0xb2>
 8008e3e:	602f      	str	r7, [r5, #0]
 8008e40:	e7b2      	b.n	8008da8 <__sflush_r+0x18>
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e48:	81a3      	strh	r3, [r4, #12]
 8008e4a:	e7ae      	b.n	8008daa <__sflush_r+0x1a>
 8008e4c:	690f      	ldr	r7, [r1, #16]
 8008e4e:	2f00      	cmp	r7, #0
 8008e50:	d0aa      	beq.n	8008da8 <__sflush_r+0x18>
 8008e52:	0793      	lsls	r3, r2, #30
 8008e54:	bf18      	it	ne
 8008e56:	2300      	movne	r3, #0
 8008e58:	680e      	ldr	r6, [r1, #0]
 8008e5a:	bf08      	it	eq
 8008e5c:	694b      	ldreq	r3, [r1, #20]
 8008e5e:	1bf6      	subs	r6, r6, r7
 8008e60:	600f      	str	r7, [r1, #0]
 8008e62:	608b      	str	r3, [r1, #8]
 8008e64:	2e00      	cmp	r6, #0
 8008e66:	dd9f      	ble.n	8008da8 <__sflush_r+0x18>
 8008e68:	4633      	mov	r3, r6
 8008e6a:	463a      	mov	r2, r7
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	6a21      	ldr	r1, [r4, #32]
 8008e70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008e74:	47e0      	blx	ip
 8008e76:	2800      	cmp	r0, #0
 8008e78:	dc06      	bgt.n	8008e88 <__sflush_r+0xf8>
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	e790      	b.n	8008daa <__sflush_r+0x1a>
 8008e88:	4407      	add	r7, r0
 8008e8a:	1a36      	subs	r6, r6, r0
 8008e8c:	e7ea      	b.n	8008e64 <__sflush_r+0xd4>
 8008e8e:	bf00      	nop
 8008e90:	dfbffffe 	.word	0xdfbffffe

08008e94 <_fflush_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	690b      	ldr	r3, [r1, #16]
 8008e98:	4605      	mov	r5, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	b913      	cbnz	r3, 8008ea4 <_fflush_r+0x10>
 8008e9e:	2500      	movs	r5, #0
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	b118      	cbz	r0, 8008eae <_fflush_r+0x1a>
 8008ea6:	6a03      	ldr	r3, [r0, #32]
 8008ea8:	b90b      	cbnz	r3, 8008eae <_fflush_r+0x1a>
 8008eaa:	f7ff fd4b 	bl	8008944 <__sinit>
 8008eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0f3      	beq.n	8008e9e <_fflush_r+0xa>
 8008eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008eb8:	07d0      	lsls	r0, r2, #31
 8008eba:	d404      	bmi.n	8008ec6 <_fflush_r+0x32>
 8008ebc:	0599      	lsls	r1, r3, #22
 8008ebe:	d402      	bmi.n	8008ec6 <_fflush_r+0x32>
 8008ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ec2:	f7ff fe32 	bl	8008b2a <__retarget_lock_acquire_recursive>
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	4621      	mov	r1, r4
 8008eca:	f7ff ff61 	bl	8008d90 <__sflush_r>
 8008ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	07da      	lsls	r2, r3, #31
 8008ed4:	d4e4      	bmi.n	8008ea0 <_fflush_r+0xc>
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	059b      	lsls	r3, r3, #22
 8008eda:	d4e1      	bmi.n	8008ea0 <_fflush_r+0xc>
 8008edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ede:	f7ff fe25 	bl	8008b2c <__retarget_lock_release_recursive>
 8008ee2:	e7dd      	b.n	8008ea0 <_fflush_r+0xc>

08008ee4 <fiprintf>:
 8008ee4:	b40e      	push	{r1, r2, r3}
 8008ee6:	b503      	push	{r0, r1, lr}
 8008ee8:	4601      	mov	r1, r0
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	4805      	ldr	r0, [pc, #20]	; (8008f04 <fiprintf+0x20>)
 8008eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef2:	6800      	ldr	r0, [r0, #0]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	f000 f845 	bl	8008f84 <_vfiprintf_r>
 8008efa:	b002      	add	sp, #8
 8008efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f00:	b003      	add	sp, #12
 8008f02:	4770      	bx	lr
 8008f04:	20000820 	.word	0x20000820

08008f08 <_sbrk_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	4d05      	ldr	r5, [pc, #20]	; (8008f24 <_sbrk_r+0x1c>)
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	602b      	str	r3, [r5, #0]
 8008f14:	f7fa f9ca 	bl	80032ac <_sbrk>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_sbrk_r+0x1a>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_sbrk_r+0x1a>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	20002de0 	.word	0x20002de0

08008f28 <abort>:
 8008f28:	2006      	movs	r0, #6
 8008f2a:	b508      	push	{r3, lr}
 8008f2c:	f000 fb96 	bl	800965c <raise>
 8008f30:	2001      	movs	r0, #1
 8008f32:	f7fa f98b 	bl	800324c <_exit>

08008f36 <__sfputc_r>:
 8008f36:	6893      	ldr	r3, [r2, #8]
 8008f38:	b410      	push	{r4}
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	6093      	str	r3, [r2, #8]
 8008f40:	da07      	bge.n	8008f52 <__sfputc_r+0x1c>
 8008f42:	6994      	ldr	r4, [r2, #24]
 8008f44:	42a3      	cmp	r3, r4
 8008f46:	db01      	blt.n	8008f4c <__sfputc_r+0x16>
 8008f48:	290a      	cmp	r1, #10
 8008f4a:	d102      	bne.n	8008f52 <__sfputc_r+0x1c>
 8008f4c:	bc10      	pop	{r4}
 8008f4e:	f000 bac7 	b.w	80094e0 <__swbuf_r>
 8008f52:	6813      	ldr	r3, [r2, #0]
 8008f54:	1c58      	adds	r0, r3, #1
 8008f56:	6010      	str	r0, [r2, #0]
 8008f58:	7019      	strb	r1, [r3, #0]
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	bc10      	pop	{r4}
 8008f5e:	4770      	bx	lr

08008f60 <__sfputs_r>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	4606      	mov	r6, r0
 8008f64:	460f      	mov	r7, r1
 8008f66:	4614      	mov	r4, r2
 8008f68:	18d5      	adds	r5, r2, r3
 8008f6a:	42ac      	cmp	r4, r5
 8008f6c:	d101      	bne.n	8008f72 <__sfputs_r+0x12>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e007      	b.n	8008f82 <__sfputs_r+0x22>
 8008f72:	463a      	mov	r2, r7
 8008f74:	4630      	mov	r0, r6
 8008f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7a:	f7ff ffdc 	bl	8008f36 <__sfputc_r>
 8008f7e:	1c43      	adds	r3, r0, #1
 8008f80:	d1f3      	bne.n	8008f6a <__sfputs_r+0xa>
 8008f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f84 <_vfiprintf_r>:
 8008f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f88:	460d      	mov	r5, r1
 8008f8a:	4614      	mov	r4, r2
 8008f8c:	4698      	mov	r8, r3
 8008f8e:	4606      	mov	r6, r0
 8008f90:	b09d      	sub	sp, #116	; 0x74
 8008f92:	b118      	cbz	r0, 8008f9c <_vfiprintf_r+0x18>
 8008f94:	6a03      	ldr	r3, [r0, #32]
 8008f96:	b90b      	cbnz	r3, 8008f9c <_vfiprintf_r+0x18>
 8008f98:	f7ff fcd4 	bl	8008944 <__sinit>
 8008f9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f9e:	07d9      	lsls	r1, r3, #31
 8008fa0:	d405      	bmi.n	8008fae <_vfiprintf_r+0x2a>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	059a      	lsls	r2, r3, #22
 8008fa6:	d402      	bmi.n	8008fae <_vfiprintf_r+0x2a>
 8008fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008faa:	f7ff fdbe 	bl	8008b2a <__retarget_lock_acquire_recursive>
 8008fae:	89ab      	ldrh	r3, [r5, #12]
 8008fb0:	071b      	lsls	r3, r3, #28
 8008fb2:	d501      	bpl.n	8008fb8 <_vfiprintf_r+0x34>
 8008fb4:	692b      	ldr	r3, [r5, #16]
 8008fb6:	b99b      	cbnz	r3, 8008fe0 <_vfiprintf_r+0x5c>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f000 face 	bl	800955c <__swsetup_r>
 8008fc0:	b170      	cbz	r0, 8008fe0 <_vfiprintf_r+0x5c>
 8008fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fc4:	07dc      	lsls	r4, r3, #31
 8008fc6:	d504      	bpl.n	8008fd2 <_vfiprintf_r+0x4e>
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	b01d      	add	sp, #116	; 0x74
 8008fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	0598      	lsls	r0, r3, #22
 8008fd6:	d4f7      	bmi.n	8008fc8 <_vfiprintf_r+0x44>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fda:	f7ff fda7 	bl	8008b2c <__retarget_lock_release_recursive>
 8008fde:	e7f3      	b.n	8008fc8 <_vfiprintf_r+0x44>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe4:	2320      	movs	r3, #32
 8008fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fea:	2330      	movs	r3, #48	; 0x30
 8008fec:	f04f 0901 	mov.w	r9, #1
 8008ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ff4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80091a4 <_vfiprintf_r+0x220>
 8008ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	469a      	mov	sl, r3
 8009000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009004:	b10a      	cbz	r2, 800900a <_vfiprintf_r+0x86>
 8009006:	2a25      	cmp	r2, #37	; 0x25
 8009008:	d1f9      	bne.n	8008ffe <_vfiprintf_r+0x7a>
 800900a:	ebba 0b04 	subs.w	fp, sl, r4
 800900e:	d00b      	beq.n	8009028 <_vfiprintf_r+0xa4>
 8009010:	465b      	mov	r3, fp
 8009012:	4622      	mov	r2, r4
 8009014:	4629      	mov	r1, r5
 8009016:	4630      	mov	r0, r6
 8009018:	f7ff ffa2 	bl	8008f60 <__sfputs_r>
 800901c:	3001      	adds	r0, #1
 800901e:	f000 80a9 	beq.w	8009174 <_vfiprintf_r+0x1f0>
 8009022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009024:	445a      	add	r2, fp
 8009026:	9209      	str	r2, [sp, #36]	; 0x24
 8009028:	f89a 3000 	ldrb.w	r3, [sl]
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 80a1 	beq.w	8009174 <_vfiprintf_r+0x1f0>
 8009032:	2300      	movs	r3, #0
 8009034:	f04f 32ff 	mov.w	r2, #4294967295
 8009038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800903c:	f10a 0a01 	add.w	sl, sl, #1
 8009040:	9304      	str	r3, [sp, #16]
 8009042:	9307      	str	r3, [sp, #28]
 8009044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009048:	931a      	str	r3, [sp, #104]	; 0x68
 800904a:	4654      	mov	r4, sl
 800904c:	2205      	movs	r2, #5
 800904e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009052:	4854      	ldr	r0, [pc, #336]	; (80091a4 <_vfiprintf_r+0x220>)
 8009054:	f000 fb1e 	bl	8009694 <memchr>
 8009058:	9a04      	ldr	r2, [sp, #16]
 800905a:	b9d8      	cbnz	r0, 8009094 <_vfiprintf_r+0x110>
 800905c:	06d1      	lsls	r1, r2, #27
 800905e:	bf44      	itt	mi
 8009060:	2320      	movmi	r3, #32
 8009062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009066:	0713      	lsls	r3, r2, #28
 8009068:	bf44      	itt	mi
 800906a:	232b      	movmi	r3, #43	; 0x2b
 800906c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009070:	f89a 3000 	ldrb.w	r3, [sl]
 8009074:	2b2a      	cmp	r3, #42	; 0x2a
 8009076:	d015      	beq.n	80090a4 <_vfiprintf_r+0x120>
 8009078:	4654      	mov	r4, sl
 800907a:	2000      	movs	r0, #0
 800907c:	f04f 0c0a 	mov.w	ip, #10
 8009080:	9a07      	ldr	r2, [sp, #28]
 8009082:	4621      	mov	r1, r4
 8009084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009088:	3b30      	subs	r3, #48	; 0x30
 800908a:	2b09      	cmp	r3, #9
 800908c:	d94d      	bls.n	800912a <_vfiprintf_r+0x1a6>
 800908e:	b1b0      	cbz	r0, 80090be <_vfiprintf_r+0x13a>
 8009090:	9207      	str	r2, [sp, #28]
 8009092:	e014      	b.n	80090be <_vfiprintf_r+0x13a>
 8009094:	eba0 0308 	sub.w	r3, r0, r8
 8009098:	fa09 f303 	lsl.w	r3, r9, r3
 800909c:	4313      	orrs	r3, r2
 800909e:	46a2      	mov	sl, r4
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	e7d2      	b.n	800904a <_vfiprintf_r+0xc6>
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	1d19      	adds	r1, r3, #4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	9103      	str	r1, [sp, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bfbb      	ittet	lt
 80090b0:	425b      	neglt	r3, r3
 80090b2:	f042 0202 	orrlt.w	r2, r2, #2
 80090b6:	9307      	strge	r3, [sp, #28]
 80090b8:	9307      	strlt	r3, [sp, #28]
 80090ba:	bfb8      	it	lt
 80090bc:	9204      	strlt	r2, [sp, #16]
 80090be:	7823      	ldrb	r3, [r4, #0]
 80090c0:	2b2e      	cmp	r3, #46	; 0x2e
 80090c2:	d10c      	bne.n	80090de <_vfiprintf_r+0x15a>
 80090c4:	7863      	ldrb	r3, [r4, #1]
 80090c6:	2b2a      	cmp	r3, #42	; 0x2a
 80090c8:	d134      	bne.n	8009134 <_vfiprintf_r+0x1b0>
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	3402      	adds	r4, #2
 80090ce:	1d1a      	adds	r2, r3, #4
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	9203      	str	r2, [sp, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	bfb8      	it	lt
 80090d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80090dc:	9305      	str	r3, [sp, #20]
 80090de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091a8 <_vfiprintf_r+0x224>
 80090e2:	2203      	movs	r2, #3
 80090e4:	4650      	mov	r0, sl
 80090e6:	7821      	ldrb	r1, [r4, #0]
 80090e8:	f000 fad4 	bl	8009694 <memchr>
 80090ec:	b138      	cbz	r0, 80090fe <_vfiprintf_r+0x17a>
 80090ee:	2240      	movs	r2, #64	; 0x40
 80090f0:	9b04      	ldr	r3, [sp, #16]
 80090f2:	eba0 000a 	sub.w	r0, r0, sl
 80090f6:	4082      	lsls	r2, r0
 80090f8:	4313      	orrs	r3, r2
 80090fa:	3401      	adds	r4, #1
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009102:	2206      	movs	r2, #6
 8009104:	4829      	ldr	r0, [pc, #164]	; (80091ac <_vfiprintf_r+0x228>)
 8009106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800910a:	f000 fac3 	bl	8009694 <memchr>
 800910e:	2800      	cmp	r0, #0
 8009110:	d03f      	beq.n	8009192 <_vfiprintf_r+0x20e>
 8009112:	4b27      	ldr	r3, [pc, #156]	; (80091b0 <_vfiprintf_r+0x22c>)
 8009114:	bb1b      	cbnz	r3, 800915e <_vfiprintf_r+0x1da>
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	3307      	adds	r3, #7
 800911a:	f023 0307 	bic.w	r3, r3, #7
 800911e:	3308      	adds	r3, #8
 8009120:	9303      	str	r3, [sp, #12]
 8009122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009124:	443b      	add	r3, r7
 8009126:	9309      	str	r3, [sp, #36]	; 0x24
 8009128:	e768      	b.n	8008ffc <_vfiprintf_r+0x78>
 800912a:	460c      	mov	r4, r1
 800912c:	2001      	movs	r0, #1
 800912e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009132:	e7a6      	b.n	8009082 <_vfiprintf_r+0xfe>
 8009134:	2300      	movs	r3, #0
 8009136:	f04f 0c0a 	mov.w	ip, #10
 800913a:	4619      	mov	r1, r3
 800913c:	3401      	adds	r4, #1
 800913e:	9305      	str	r3, [sp, #20]
 8009140:	4620      	mov	r0, r4
 8009142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009146:	3a30      	subs	r2, #48	; 0x30
 8009148:	2a09      	cmp	r2, #9
 800914a:	d903      	bls.n	8009154 <_vfiprintf_r+0x1d0>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d0c6      	beq.n	80090de <_vfiprintf_r+0x15a>
 8009150:	9105      	str	r1, [sp, #20]
 8009152:	e7c4      	b.n	80090de <_vfiprintf_r+0x15a>
 8009154:	4604      	mov	r4, r0
 8009156:	2301      	movs	r3, #1
 8009158:	fb0c 2101 	mla	r1, ip, r1, r2
 800915c:	e7f0      	b.n	8009140 <_vfiprintf_r+0x1bc>
 800915e:	ab03      	add	r3, sp, #12
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	462a      	mov	r2, r5
 8009164:	4630      	mov	r0, r6
 8009166:	4b13      	ldr	r3, [pc, #76]	; (80091b4 <_vfiprintf_r+0x230>)
 8009168:	a904      	add	r1, sp, #16
 800916a:	f3af 8000 	nop.w
 800916e:	4607      	mov	r7, r0
 8009170:	1c78      	adds	r0, r7, #1
 8009172:	d1d6      	bne.n	8009122 <_vfiprintf_r+0x19e>
 8009174:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009176:	07d9      	lsls	r1, r3, #31
 8009178:	d405      	bmi.n	8009186 <_vfiprintf_r+0x202>
 800917a:	89ab      	ldrh	r3, [r5, #12]
 800917c:	059a      	lsls	r2, r3, #22
 800917e:	d402      	bmi.n	8009186 <_vfiprintf_r+0x202>
 8009180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009182:	f7ff fcd3 	bl	8008b2c <__retarget_lock_release_recursive>
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	065b      	lsls	r3, r3, #25
 800918a:	f53f af1d 	bmi.w	8008fc8 <_vfiprintf_r+0x44>
 800918e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009190:	e71c      	b.n	8008fcc <_vfiprintf_r+0x48>
 8009192:	ab03      	add	r3, sp, #12
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	462a      	mov	r2, r5
 8009198:	4630      	mov	r0, r6
 800919a:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <_vfiprintf_r+0x230>)
 800919c:	a904      	add	r1, sp, #16
 800919e:	f000 f87d 	bl	800929c <_printf_i>
 80091a2:	e7e4      	b.n	800916e <_vfiprintf_r+0x1ea>
 80091a4:	0800a590 	.word	0x0800a590
 80091a8:	0800a596 	.word	0x0800a596
 80091ac:	0800a59a 	.word	0x0800a59a
 80091b0:	00000000 	.word	0x00000000
 80091b4:	08008f61 	.word	0x08008f61

080091b8 <_printf_common>:
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	4616      	mov	r6, r2
 80091be:	4699      	mov	r9, r3
 80091c0:	688a      	ldr	r2, [r1, #8]
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	4607      	mov	r7, r0
 80091c6:	4293      	cmp	r3, r2
 80091c8:	bfb8      	it	lt
 80091ca:	4613      	movlt	r3, r2
 80091cc:	6033      	str	r3, [r6, #0]
 80091ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091d2:	460c      	mov	r4, r1
 80091d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091d8:	b10a      	cbz	r2, 80091de <_printf_common+0x26>
 80091da:	3301      	adds	r3, #1
 80091dc:	6033      	str	r3, [r6, #0]
 80091de:	6823      	ldr	r3, [r4, #0]
 80091e0:	0699      	lsls	r1, r3, #26
 80091e2:	bf42      	ittt	mi
 80091e4:	6833      	ldrmi	r3, [r6, #0]
 80091e6:	3302      	addmi	r3, #2
 80091e8:	6033      	strmi	r3, [r6, #0]
 80091ea:	6825      	ldr	r5, [r4, #0]
 80091ec:	f015 0506 	ands.w	r5, r5, #6
 80091f0:	d106      	bne.n	8009200 <_printf_common+0x48>
 80091f2:	f104 0a19 	add.w	sl, r4, #25
 80091f6:	68e3      	ldr	r3, [r4, #12]
 80091f8:	6832      	ldr	r2, [r6, #0]
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	42ab      	cmp	r3, r5
 80091fe:	dc2b      	bgt.n	8009258 <_printf_common+0xa0>
 8009200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009204:	1e13      	subs	r3, r2, #0
 8009206:	6822      	ldr	r2, [r4, #0]
 8009208:	bf18      	it	ne
 800920a:	2301      	movne	r3, #1
 800920c:	0692      	lsls	r2, r2, #26
 800920e:	d430      	bmi.n	8009272 <_printf_common+0xba>
 8009210:	4649      	mov	r1, r9
 8009212:	4638      	mov	r0, r7
 8009214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009218:	47c0      	blx	r8
 800921a:	3001      	adds	r0, #1
 800921c:	d023      	beq.n	8009266 <_printf_common+0xae>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	6922      	ldr	r2, [r4, #16]
 8009222:	f003 0306 	and.w	r3, r3, #6
 8009226:	2b04      	cmp	r3, #4
 8009228:	bf14      	ite	ne
 800922a:	2500      	movne	r5, #0
 800922c:	6833      	ldreq	r3, [r6, #0]
 800922e:	f04f 0600 	mov.w	r6, #0
 8009232:	bf08      	it	eq
 8009234:	68e5      	ldreq	r5, [r4, #12]
 8009236:	f104 041a 	add.w	r4, r4, #26
 800923a:	bf08      	it	eq
 800923c:	1aed      	subeq	r5, r5, r3
 800923e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009242:	bf08      	it	eq
 8009244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009248:	4293      	cmp	r3, r2
 800924a:	bfc4      	itt	gt
 800924c:	1a9b      	subgt	r3, r3, r2
 800924e:	18ed      	addgt	r5, r5, r3
 8009250:	42b5      	cmp	r5, r6
 8009252:	d11a      	bne.n	800928a <_printf_common+0xd2>
 8009254:	2000      	movs	r0, #0
 8009256:	e008      	b.n	800926a <_printf_common+0xb2>
 8009258:	2301      	movs	r3, #1
 800925a:	4652      	mov	r2, sl
 800925c:	4649      	mov	r1, r9
 800925e:	4638      	mov	r0, r7
 8009260:	47c0      	blx	r8
 8009262:	3001      	adds	r0, #1
 8009264:	d103      	bne.n	800926e <_printf_common+0xb6>
 8009266:	f04f 30ff 	mov.w	r0, #4294967295
 800926a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926e:	3501      	adds	r5, #1
 8009270:	e7c1      	b.n	80091f6 <_printf_common+0x3e>
 8009272:	2030      	movs	r0, #48	; 0x30
 8009274:	18e1      	adds	r1, r4, r3
 8009276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009280:	4422      	add	r2, r4
 8009282:	3302      	adds	r3, #2
 8009284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009288:	e7c2      	b.n	8009210 <_printf_common+0x58>
 800928a:	2301      	movs	r3, #1
 800928c:	4622      	mov	r2, r4
 800928e:	4649      	mov	r1, r9
 8009290:	4638      	mov	r0, r7
 8009292:	47c0      	blx	r8
 8009294:	3001      	adds	r0, #1
 8009296:	d0e6      	beq.n	8009266 <_printf_common+0xae>
 8009298:	3601      	adds	r6, #1
 800929a:	e7d9      	b.n	8009250 <_printf_common+0x98>

0800929c <_printf_i>:
 800929c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	7e0f      	ldrb	r7, [r1, #24]
 80092a2:	4691      	mov	r9, r2
 80092a4:	2f78      	cmp	r7, #120	; 0x78
 80092a6:	4680      	mov	r8, r0
 80092a8:	460c      	mov	r4, r1
 80092aa:	469a      	mov	sl, r3
 80092ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092b2:	d807      	bhi.n	80092c4 <_printf_i+0x28>
 80092b4:	2f62      	cmp	r7, #98	; 0x62
 80092b6:	d80a      	bhi.n	80092ce <_printf_i+0x32>
 80092b8:	2f00      	cmp	r7, #0
 80092ba:	f000 80d5 	beq.w	8009468 <_printf_i+0x1cc>
 80092be:	2f58      	cmp	r7, #88	; 0x58
 80092c0:	f000 80c1 	beq.w	8009446 <_printf_i+0x1aa>
 80092c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092cc:	e03a      	b.n	8009344 <_printf_i+0xa8>
 80092ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092d2:	2b15      	cmp	r3, #21
 80092d4:	d8f6      	bhi.n	80092c4 <_printf_i+0x28>
 80092d6:	a101      	add	r1, pc, #4	; (adr r1, 80092dc <_printf_i+0x40>)
 80092d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092dc:	08009335 	.word	0x08009335
 80092e0:	08009349 	.word	0x08009349
 80092e4:	080092c5 	.word	0x080092c5
 80092e8:	080092c5 	.word	0x080092c5
 80092ec:	080092c5 	.word	0x080092c5
 80092f0:	080092c5 	.word	0x080092c5
 80092f4:	08009349 	.word	0x08009349
 80092f8:	080092c5 	.word	0x080092c5
 80092fc:	080092c5 	.word	0x080092c5
 8009300:	080092c5 	.word	0x080092c5
 8009304:	080092c5 	.word	0x080092c5
 8009308:	0800944f 	.word	0x0800944f
 800930c:	08009375 	.word	0x08009375
 8009310:	08009409 	.word	0x08009409
 8009314:	080092c5 	.word	0x080092c5
 8009318:	080092c5 	.word	0x080092c5
 800931c:	08009471 	.word	0x08009471
 8009320:	080092c5 	.word	0x080092c5
 8009324:	08009375 	.word	0x08009375
 8009328:	080092c5 	.word	0x080092c5
 800932c:	080092c5 	.word	0x080092c5
 8009330:	08009411 	.word	0x08009411
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	1d1a      	adds	r2, r3, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	602a      	str	r2, [r5, #0]
 800933c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009344:	2301      	movs	r3, #1
 8009346:	e0a0      	b.n	800948a <_printf_i+0x1ee>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	682b      	ldr	r3, [r5, #0]
 800934c:	0607      	lsls	r7, r0, #24
 800934e:	f103 0104 	add.w	r1, r3, #4
 8009352:	6029      	str	r1, [r5, #0]
 8009354:	d501      	bpl.n	800935a <_printf_i+0xbe>
 8009356:	681e      	ldr	r6, [r3, #0]
 8009358:	e003      	b.n	8009362 <_printf_i+0xc6>
 800935a:	0646      	lsls	r6, r0, #25
 800935c:	d5fb      	bpl.n	8009356 <_printf_i+0xba>
 800935e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009362:	2e00      	cmp	r6, #0
 8009364:	da03      	bge.n	800936e <_printf_i+0xd2>
 8009366:	232d      	movs	r3, #45	; 0x2d
 8009368:	4276      	negs	r6, r6
 800936a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800936e:	230a      	movs	r3, #10
 8009370:	4859      	ldr	r0, [pc, #356]	; (80094d8 <_printf_i+0x23c>)
 8009372:	e012      	b.n	800939a <_printf_i+0xfe>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	6820      	ldr	r0, [r4, #0]
 8009378:	1d19      	adds	r1, r3, #4
 800937a:	6029      	str	r1, [r5, #0]
 800937c:	0605      	lsls	r5, r0, #24
 800937e:	d501      	bpl.n	8009384 <_printf_i+0xe8>
 8009380:	681e      	ldr	r6, [r3, #0]
 8009382:	e002      	b.n	800938a <_printf_i+0xee>
 8009384:	0641      	lsls	r1, r0, #25
 8009386:	d5fb      	bpl.n	8009380 <_printf_i+0xe4>
 8009388:	881e      	ldrh	r6, [r3, #0]
 800938a:	2f6f      	cmp	r7, #111	; 0x6f
 800938c:	bf0c      	ite	eq
 800938e:	2308      	moveq	r3, #8
 8009390:	230a      	movne	r3, #10
 8009392:	4851      	ldr	r0, [pc, #324]	; (80094d8 <_printf_i+0x23c>)
 8009394:	2100      	movs	r1, #0
 8009396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800939a:	6865      	ldr	r5, [r4, #4]
 800939c:	2d00      	cmp	r5, #0
 800939e:	bfa8      	it	ge
 80093a0:	6821      	ldrge	r1, [r4, #0]
 80093a2:	60a5      	str	r5, [r4, #8]
 80093a4:	bfa4      	itt	ge
 80093a6:	f021 0104 	bicge.w	r1, r1, #4
 80093aa:	6021      	strge	r1, [r4, #0]
 80093ac:	b90e      	cbnz	r6, 80093b2 <_printf_i+0x116>
 80093ae:	2d00      	cmp	r5, #0
 80093b0:	d04b      	beq.n	800944a <_printf_i+0x1ae>
 80093b2:	4615      	mov	r5, r2
 80093b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80093b8:	fb03 6711 	mls	r7, r3, r1, r6
 80093bc:	5dc7      	ldrb	r7, [r0, r7]
 80093be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093c2:	4637      	mov	r7, r6
 80093c4:	42bb      	cmp	r3, r7
 80093c6:	460e      	mov	r6, r1
 80093c8:	d9f4      	bls.n	80093b4 <_printf_i+0x118>
 80093ca:	2b08      	cmp	r3, #8
 80093cc:	d10b      	bne.n	80093e6 <_printf_i+0x14a>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	07de      	lsls	r6, r3, #31
 80093d2:	d508      	bpl.n	80093e6 <_printf_i+0x14a>
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	6861      	ldr	r1, [r4, #4]
 80093d8:	4299      	cmp	r1, r3
 80093da:	bfde      	ittt	le
 80093dc:	2330      	movle	r3, #48	; 0x30
 80093de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093e6:	1b52      	subs	r2, r2, r5
 80093e8:	6122      	str	r2, [r4, #16]
 80093ea:	464b      	mov	r3, r9
 80093ec:	4621      	mov	r1, r4
 80093ee:	4640      	mov	r0, r8
 80093f0:	f8cd a000 	str.w	sl, [sp]
 80093f4:	aa03      	add	r2, sp, #12
 80093f6:	f7ff fedf 	bl	80091b8 <_printf_common>
 80093fa:	3001      	adds	r0, #1
 80093fc:	d14a      	bne.n	8009494 <_printf_i+0x1f8>
 80093fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009402:	b004      	add	sp, #16
 8009404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	f043 0320 	orr.w	r3, r3, #32
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	2778      	movs	r7, #120	; 0x78
 8009412:	4832      	ldr	r0, [pc, #200]	; (80094dc <_printf_i+0x240>)
 8009414:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	6829      	ldr	r1, [r5, #0]
 800941c:	061f      	lsls	r7, r3, #24
 800941e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009422:	d402      	bmi.n	800942a <_printf_i+0x18e>
 8009424:	065f      	lsls	r7, r3, #25
 8009426:	bf48      	it	mi
 8009428:	b2b6      	uxthmi	r6, r6
 800942a:	07df      	lsls	r7, r3, #31
 800942c:	bf48      	it	mi
 800942e:	f043 0320 	orrmi.w	r3, r3, #32
 8009432:	6029      	str	r1, [r5, #0]
 8009434:	bf48      	it	mi
 8009436:	6023      	strmi	r3, [r4, #0]
 8009438:	b91e      	cbnz	r6, 8009442 <_printf_i+0x1a6>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f023 0320 	bic.w	r3, r3, #32
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	2310      	movs	r3, #16
 8009444:	e7a6      	b.n	8009394 <_printf_i+0xf8>
 8009446:	4824      	ldr	r0, [pc, #144]	; (80094d8 <_printf_i+0x23c>)
 8009448:	e7e4      	b.n	8009414 <_printf_i+0x178>
 800944a:	4615      	mov	r5, r2
 800944c:	e7bd      	b.n	80093ca <_printf_i+0x12e>
 800944e:	682b      	ldr	r3, [r5, #0]
 8009450:	6826      	ldr	r6, [r4, #0]
 8009452:	1d18      	adds	r0, r3, #4
 8009454:	6961      	ldr	r1, [r4, #20]
 8009456:	6028      	str	r0, [r5, #0]
 8009458:	0635      	lsls	r5, r6, #24
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	d501      	bpl.n	8009462 <_printf_i+0x1c6>
 800945e:	6019      	str	r1, [r3, #0]
 8009460:	e002      	b.n	8009468 <_printf_i+0x1cc>
 8009462:	0670      	lsls	r0, r6, #25
 8009464:	d5fb      	bpl.n	800945e <_printf_i+0x1c2>
 8009466:	8019      	strh	r1, [r3, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	4615      	mov	r5, r2
 800946c:	6123      	str	r3, [r4, #16]
 800946e:	e7bc      	b.n	80093ea <_printf_i+0x14e>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	2100      	movs	r1, #0
 8009474:	1d1a      	adds	r2, r3, #4
 8009476:	602a      	str	r2, [r5, #0]
 8009478:	681d      	ldr	r5, [r3, #0]
 800947a:	6862      	ldr	r2, [r4, #4]
 800947c:	4628      	mov	r0, r5
 800947e:	f000 f909 	bl	8009694 <memchr>
 8009482:	b108      	cbz	r0, 8009488 <_printf_i+0x1ec>
 8009484:	1b40      	subs	r0, r0, r5
 8009486:	6060      	str	r0, [r4, #4]
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	2300      	movs	r3, #0
 800948e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009492:	e7aa      	b.n	80093ea <_printf_i+0x14e>
 8009494:	462a      	mov	r2, r5
 8009496:	4649      	mov	r1, r9
 8009498:	4640      	mov	r0, r8
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	47d0      	blx	sl
 800949e:	3001      	adds	r0, #1
 80094a0:	d0ad      	beq.n	80093fe <_printf_i+0x162>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	079b      	lsls	r3, r3, #30
 80094a6:	d413      	bmi.n	80094d0 <_printf_i+0x234>
 80094a8:	68e0      	ldr	r0, [r4, #12]
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	4298      	cmp	r0, r3
 80094ae:	bfb8      	it	lt
 80094b0:	4618      	movlt	r0, r3
 80094b2:	e7a6      	b.n	8009402 <_printf_i+0x166>
 80094b4:	2301      	movs	r3, #1
 80094b6:	4632      	mov	r2, r6
 80094b8:	4649      	mov	r1, r9
 80094ba:	4640      	mov	r0, r8
 80094bc:	47d0      	blx	sl
 80094be:	3001      	adds	r0, #1
 80094c0:	d09d      	beq.n	80093fe <_printf_i+0x162>
 80094c2:	3501      	adds	r5, #1
 80094c4:	68e3      	ldr	r3, [r4, #12]
 80094c6:	9903      	ldr	r1, [sp, #12]
 80094c8:	1a5b      	subs	r3, r3, r1
 80094ca:	42ab      	cmp	r3, r5
 80094cc:	dcf2      	bgt.n	80094b4 <_printf_i+0x218>
 80094ce:	e7eb      	b.n	80094a8 <_printf_i+0x20c>
 80094d0:	2500      	movs	r5, #0
 80094d2:	f104 0619 	add.w	r6, r4, #25
 80094d6:	e7f5      	b.n	80094c4 <_printf_i+0x228>
 80094d8:	0800a5a1 	.word	0x0800a5a1
 80094dc:	0800a5b2 	.word	0x0800a5b2

080094e0 <__swbuf_r>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	460e      	mov	r6, r1
 80094e4:	4614      	mov	r4, r2
 80094e6:	4605      	mov	r5, r0
 80094e8:	b118      	cbz	r0, 80094f2 <__swbuf_r+0x12>
 80094ea:	6a03      	ldr	r3, [r0, #32]
 80094ec:	b90b      	cbnz	r3, 80094f2 <__swbuf_r+0x12>
 80094ee:	f7ff fa29 	bl	8008944 <__sinit>
 80094f2:	69a3      	ldr	r3, [r4, #24]
 80094f4:	60a3      	str	r3, [r4, #8]
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	071a      	lsls	r2, r3, #28
 80094fa:	d525      	bpl.n	8009548 <__swbuf_r+0x68>
 80094fc:	6923      	ldr	r3, [r4, #16]
 80094fe:	b31b      	cbz	r3, 8009548 <__swbuf_r+0x68>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	6922      	ldr	r2, [r4, #16]
 8009504:	b2f6      	uxtb	r6, r6
 8009506:	1a98      	subs	r0, r3, r2
 8009508:	6963      	ldr	r3, [r4, #20]
 800950a:	4637      	mov	r7, r6
 800950c:	4283      	cmp	r3, r0
 800950e:	dc04      	bgt.n	800951a <__swbuf_r+0x3a>
 8009510:	4621      	mov	r1, r4
 8009512:	4628      	mov	r0, r5
 8009514:	f7ff fcbe 	bl	8008e94 <_fflush_r>
 8009518:	b9e0      	cbnz	r0, 8009554 <__swbuf_r+0x74>
 800951a:	68a3      	ldr	r3, [r4, #8]
 800951c:	3b01      	subs	r3, #1
 800951e:	60a3      	str	r3, [r4, #8]
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	6022      	str	r2, [r4, #0]
 8009526:	701e      	strb	r6, [r3, #0]
 8009528:	6962      	ldr	r2, [r4, #20]
 800952a:	1c43      	adds	r3, r0, #1
 800952c:	429a      	cmp	r2, r3
 800952e:	d004      	beq.n	800953a <__swbuf_r+0x5a>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	07db      	lsls	r3, r3, #31
 8009534:	d506      	bpl.n	8009544 <__swbuf_r+0x64>
 8009536:	2e0a      	cmp	r6, #10
 8009538:	d104      	bne.n	8009544 <__swbuf_r+0x64>
 800953a:	4621      	mov	r1, r4
 800953c:	4628      	mov	r0, r5
 800953e:	f7ff fca9 	bl	8008e94 <_fflush_r>
 8009542:	b938      	cbnz	r0, 8009554 <__swbuf_r+0x74>
 8009544:	4638      	mov	r0, r7
 8009546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009548:	4621      	mov	r1, r4
 800954a:	4628      	mov	r0, r5
 800954c:	f000 f806 	bl	800955c <__swsetup_r>
 8009550:	2800      	cmp	r0, #0
 8009552:	d0d5      	beq.n	8009500 <__swbuf_r+0x20>
 8009554:	f04f 37ff 	mov.w	r7, #4294967295
 8009558:	e7f4      	b.n	8009544 <__swbuf_r+0x64>
	...

0800955c <__swsetup_r>:
 800955c:	b538      	push	{r3, r4, r5, lr}
 800955e:	4b2a      	ldr	r3, [pc, #168]	; (8009608 <__swsetup_r+0xac>)
 8009560:	4605      	mov	r5, r0
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	460c      	mov	r4, r1
 8009566:	b118      	cbz	r0, 8009570 <__swsetup_r+0x14>
 8009568:	6a03      	ldr	r3, [r0, #32]
 800956a:	b90b      	cbnz	r3, 8009570 <__swsetup_r+0x14>
 800956c:	f7ff f9ea 	bl	8008944 <__sinit>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009576:	0718      	lsls	r0, r3, #28
 8009578:	d422      	bmi.n	80095c0 <__swsetup_r+0x64>
 800957a:	06d9      	lsls	r1, r3, #27
 800957c:	d407      	bmi.n	800958e <__swsetup_r+0x32>
 800957e:	2309      	movs	r3, #9
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009586:	f04f 30ff 	mov.w	r0, #4294967295
 800958a:	81a3      	strh	r3, [r4, #12]
 800958c:	e034      	b.n	80095f8 <__swsetup_r+0x9c>
 800958e:	0758      	lsls	r0, r3, #29
 8009590:	d512      	bpl.n	80095b8 <__swsetup_r+0x5c>
 8009592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009594:	b141      	cbz	r1, 80095a8 <__swsetup_r+0x4c>
 8009596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800959a:	4299      	cmp	r1, r3
 800959c:	d002      	beq.n	80095a4 <__swsetup_r+0x48>
 800959e:	4628      	mov	r0, r5
 80095a0:	f7ff fafa 	bl	8008b98 <_free_r>
 80095a4:	2300      	movs	r3, #0
 80095a6:	6363      	str	r3, [r4, #52]	; 0x34
 80095a8:	89a3      	ldrh	r3, [r4, #12]
 80095aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	2300      	movs	r3, #0
 80095b2:	6063      	str	r3, [r4, #4]
 80095b4:	6923      	ldr	r3, [r4, #16]
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f043 0308 	orr.w	r3, r3, #8
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	b94b      	cbnz	r3, 80095d8 <__swsetup_r+0x7c>
 80095c4:	89a3      	ldrh	r3, [r4, #12]
 80095c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ce:	d003      	beq.n	80095d8 <__swsetup_r+0x7c>
 80095d0:	4621      	mov	r1, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 f891 	bl	80096fa <__smakebuf_r>
 80095d8:	89a0      	ldrh	r0, [r4, #12]
 80095da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095de:	f010 0301 	ands.w	r3, r0, #1
 80095e2:	d00a      	beq.n	80095fa <__swsetup_r+0x9e>
 80095e4:	2300      	movs	r3, #0
 80095e6:	60a3      	str	r3, [r4, #8]
 80095e8:	6963      	ldr	r3, [r4, #20]
 80095ea:	425b      	negs	r3, r3
 80095ec:	61a3      	str	r3, [r4, #24]
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	b943      	cbnz	r3, 8009604 <__swsetup_r+0xa8>
 80095f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095f6:	d1c4      	bne.n	8009582 <__swsetup_r+0x26>
 80095f8:	bd38      	pop	{r3, r4, r5, pc}
 80095fa:	0781      	lsls	r1, r0, #30
 80095fc:	bf58      	it	pl
 80095fe:	6963      	ldrpl	r3, [r4, #20]
 8009600:	60a3      	str	r3, [r4, #8]
 8009602:	e7f4      	b.n	80095ee <__swsetup_r+0x92>
 8009604:	2000      	movs	r0, #0
 8009606:	e7f7      	b.n	80095f8 <__swsetup_r+0x9c>
 8009608:	20000820 	.word	0x20000820

0800960c <_raise_r>:
 800960c:	291f      	cmp	r1, #31
 800960e:	b538      	push	{r3, r4, r5, lr}
 8009610:	4604      	mov	r4, r0
 8009612:	460d      	mov	r5, r1
 8009614:	d904      	bls.n	8009620 <_raise_r+0x14>
 8009616:	2316      	movs	r3, #22
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009622:	b112      	cbz	r2, 800962a <_raise_r+0x1e>
 8009624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009628:	b94b      	cbnz	r3, 800963e <_raise_r+0x32>
 800962a:	4620      	mov	r0, r4
 800962c:	f000 f830 	bl	8009690 <_getpid_r>
 8009630:	462a      	mov	r2, r5
 8009632:	4601      	mov	r1, r0
 8009634:	4620      	mov	r0, r4
 8009636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800963a:	f000 b817 	b.w	800966c <_kill_r>
 800963e:	2b01      	cmp	r3, #1
 8009640:	d00a      	beq.n	8009658 <_raise_r+0x4c>
 8009642:	1c59      	adds	r1, r3, #1
 8009644:	d103      	bne.n	800964e <_raise_r+0x42>
 8009646:	2316      	movs	r3, #22
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	2001      	movs	r0, #1
 800964c:	e7e7      	b.n	800961e <_raise_r+0x12>
 800964e:	2400      	movs	r4, #0
 8009650:	4628      	mov	r0, r5
 8009652:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009656:	4798      	blx	r3
 8009658:	2000      	movs	r0, #0
 800965a:	e7e0      	b.n	800961e <_raise_r+0x12>

0800965c <raise>:
 800965c:	4b02      	ldr	r3, [pc, #8]	; (8009668 <raise+0xc>)
 800965e:	4601      	mov	r1, r0
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	f7ff bfd3 	b.w	800960c <_raise_r>
 8009666:	bf00      	nop
 8009668:	20000820 	.word	0x20000820

0800966c <_kill_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	2300      	movs	r3, #0
 8009670:	4d06      	ldr	r5, [pc, #24]	; (800968c <_kill_r+0x20>)
 8009672:	4604      	mov	r4, r0
 8009674:	4608      	mov	r0, r1
 8009676:	4611      	mov	r1, r2
 8009678:	602b      	str	r3, [r5, #0]
 800967a:	f7f9 fddf 	bl	800323c <_kill>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d102      	bne.n	8009688 <_kill_r+0x1c>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	b103      	cbz	r3, 8009688 <_kill_r+0x1c>
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	bd38      	pop	{r3, r4, r5, pc}
 800968a:	bf00      	nop
 800968c:	20002de0 	.word	0x20002de0

08009690 <_getpid_r>:
 8009690:	f7f9 bdd2 	b.w	8003238 <_getpid>

08009694 <memchr>:
 8009694:	4603      	mov	r3, r0
 8009696:	b510      	push	{r4, lr}
 8009698:	b2c9      	uxtb	r1, r1
 800969a:	4402      	add	r2, r0
 800969c:	4293      	cmp	r3, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	d101      	bne.n	80096a6 <memchr+0x12>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e003      	b.n	80096ae <memchr+0x1a>
 80096a6:	7804      	ldrb	r4, [r0, #0]
 80096a8:	3301      	adds	r3, #1
 80096aa:	428c      	cmp	r4, r1
 80096ac:	d1f6      	bne.n	800969c <memchr+0x8>
 80096ae:	bd10      	pop	{r4, pc}

080096b0 <__swhatbuf_r>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	460c      	mov	r4, r1
 80096b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b8:	4615      	mov	r5, r2
 80096ba:	2900      	cmp	r1, #0
 80096bc:	461e      	mov	r6, r3
 80096be:	b096      	sub	sp, #88	; 0x58
 80096c0:	da0c      	bge.n	80096dc <__swhatbuf_r+0x2c>
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	2100      	movs	r1, #0
 80096c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096ca:	bf0c      	ite	eq
 80096cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096d0:	2340      	movne	r3, #64	; 0x40
 80096d2:	2000      	movs	r0, #0
 80096d4:	6031      	str	r1, [r6, #0]
 80096d6:	602b      	str	r3, [r5, #0]
 80096d8:	b016      	add	sp, #88	; 0x58
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	466a      	mov	r2, sp
 80096de:	f000 f849 	bl	8009774 <_fstat_r>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	dbed      	blt.n	80096c2 <__swhatbuf_r+0x12>
 80096e6:	9901      	ldr	r1, [sp, #4]
 80096e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096f0:	4259      	negs	r1, r3
 80096f2:	4159      	adcs	r1, r3
 80096f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096f8:	e7eb      	b.n	80096d2 <__swhatbuf_r+0x22>

080096fa <__smakebuf_r>:
 80096fa:	898b      	ldrh	r3, [r1, #12]
 80096fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096fe:	079d      	lsls	r5, r3, #30
 8009700:	4606      	mov	r6, r0
 8009702:	460c      	mov	r4, r1
 8009704:	d507      	bpl.n	8009716 <__smakebuf_r+0x1c>
 8009706:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	2301      	movs	r3, #1
 8009710:	6163      	str	r3, [r4, #20]
 8009712:	b002      	add	sp, #8
 8009714:	bd70      	pop	{r4, r5, r6, pc}
 8009716:	466a      	mov	r2, sp
 8009718:	ab01      	add	r3, sp, #4
 800971a:	f7ff ffc9 	bl	80096b0 <__swhatbuf_r>
 800971e:	9900      	ldr	r1, [sp, #0]
 8009720:	4605      	mov	r5, r0
 8009722:	4630      	mov	r0, r6
 8009724:	f7ff faa8 	bl	8008c78 <_malloc_r>
 8009728:	b948      	cbnz	r0, 800973e <__smakebuf_r+0x44>
 800972a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972e:	059a      	lsls	r2, r3, #22
 8009730:	d4ef      	bmi.n	8009712 <__smakebuf_r+0x18>
 8009732:	f023 0303 	bic.w	r3, r3, #3
 8009736:	f043 0302 	orr.w	r3, r3, #2
 800973a:	81a3      	strh	r3, [r4, #12]
 800973c:	e7e3      	b.n	8009706 <__smakebuf_r+0xc>
 800973e:	89a3      	ldrh	r3, [r4, #12]
 8009740:	6020      	str	r0, [r4, #0]
 8009742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	9b00      	ldr	r3, [sp, #0]
 800974a:	6120      	str	r0, [r4, #16]
 800974c:	6163      	str	r3, [r4, #20]
 800974e:	9b01      	ldr	r3, [sp, #4]
 8009750:	b15b      	cbz	r3, 800976a <__smakebuf_r+0x70>
 8009752:	4630      	mov	r0, r6
 8009754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009758:	f000 f81e 	bl	8009798 <_isatty_r>
 800975c:	b128      	cbz	r0, 800976a <__smakebuf_r+0x70>
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	f023 0303 	bic.w	r3, r3, #3
 8009764:	f043 0301 	orr.w	r3, r3, #1
 8009768:	81a3      	strh	r3, [r4, #12]
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	431d      	orrs	r5, r3
 800976e:	81a5      	strh	r5, [r4, #12]
 8009770:	e7cf      	b.n	8009712 <__smakebuf_r+0x18>
	...

08009774 <_fstat_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	2300      	movs	r3, #0
 8009778:	4d06      	ldr	r5, [pc, #24]	; (8009794 <_fstat_r+0x20>)
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	4611      	mov	r1, r2
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	f7f9 fd8a 	bl	800329a <_fstat>
 8009786:	1c43      	adds	r3, r0, #1
 8009788:	d102      	bne.n	8009790 <_fstat_r+0x1c>
 800978a:	682b      	ldr	r3, [r5, #0]
 800978c:	b103      	cbz	r3, 8009790 <_fstat_r+0x1c>
 800978e:	6023      	str	r3, [r4, #0]
 8009790:	bd38      	pop	{r3, r4, r5, pc}
 8009792:	bf00      	nop
 8009794:	20002de0 	.word	0x20002de0

08009798 <_isatty_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	2300      	movs	r3, #0
 800979c:	4d05      	ldr	r5, [pc, #20]	; (80097b4 <_isatty_r+0x1c>)
 800979e:	4604      	mov	r4, r0
 80097a0:	4608      	mov	r0, r1
 80097a2:	602b      	str	r3, [r5, #0]
 80097a4:	f7f9 fd7e 	bl	80032a4 <_isatty>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	d102      	bne.n	80097b2 <_isatty_r+0x1a>
 80097ac:	682b      	ldr	r3, [r5, #0]
 80097ae:	b103      	cbz	r3, 80097b2 <_isatty_r+0x1a>
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	bd38      	pop	{r3, r4, r5, pc}
 80097b4:	20002de0 	.word	0x20002de0

080097b8 <_init>:
 80097b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ba:	bf00      	nop
 80097bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097be:	bc08      	pop	{r3}
 80097c0:	469e      	mov	lr, r3
 80097c2:	4770      	bx	lr

080097c4 <_fini>:
 80097c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c6:	bf00      	nop
 80097c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ca:	bc08      	pop	{r3}
 80097cc:	469e      	mov	lr, r3
 80097ce:	4770      	bx	lr
