
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d28  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001034  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e6c  08009e6c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009e6c  08009e6c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e6c  08009e6c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000274c  20000078  08009eec  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027c4  08009eec  000227c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000279fd  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005218  00000000  00000000  00047ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012df8  00000000  00000000  0004ccf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001868  00000000  00000000  0005faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001682  00000000  00000000  00061360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c030  00000000  00000000  000629e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00029052  00000000  00000000  0007ea12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e51d  00000000  00000000  000a7a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005228  00000000  00000000  00145f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014b1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e20 	.word	0x08008e20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008e20 	.word	0x08008e20

08000150 <getPlayer>:


player_t *getPlayer(){

	return &Player;
}
 8000150:	4800      	ldr	r0, [pc, #0]	; (8000154 <getPlayer+0x4>)
 8000152:	4770      	bx	lr
 8000154:	20000108 	.word	0x20000108

08000158 <getDisparo>:
	return &movimiento_Aliens;
}

disparo_t *getDisparo(){
	return &Disparo;
}
 8000158:	4800      	ldr	r0, [pc, #0]	; (800015c <getDisparo+0x4>)
 800015a:	4770      	bx	lr
 800015c:	20000100 	.word	0x20000100

08000160 <getDisparoAliens>:

disparo_t *getDisparoAliens(){
	return &Disparo_Aliens;
}
 8000160:	4800      	ldr	r0, [pc, #0]	; (8000164 <getDisparoAliens+0x4>)
 8000162:	4770      	bx	lr
 8000164:	20000104 	.word	0x20000104

08000168 <getDificultad>:

dificultad_t *getDificultad(){

	return &dificultad;
}
 8000168:	4800      	ldr	r0, [pc, #0]	; (800016c <getDificultad+0x4>)
 800016a:	4770      	bx	lr
 800016c:	2000010c 	.word	0x2000010c

08000170 <actualizarPantalla>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void actualizarPantalla(){
 8000170:	b508      	push	{r3, lr}

    SSD1306_UpdateScreen(); // update screen
 8000172:	f001 ffc5 	bl	8002100 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000176:	2000      	movs	r0, #0
 8000178:	f001 fc8a 	bl	8001a90 <SSD1306_Fill>
}
 800017c:	bd08      	pop	{r3, pc}
	...

08000180 <playerInit>:



void playerInit(){

	Player.posicion_X = 64;
 8000180:	4b01      	ldr	r3, [pc, #4]	; (8000188 <playerInit+0x8>)
 8000182:	2240      	movs	r2, #64	; 0x40
 8000184:	705a      	strb	r2, [r3, #1]

}
 8000186:	4770      	bx	lr
 8000188:	20000108 	.word	0x20000108

0800018c <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 800018c:	b500      	push	{lr}
 800018e:	b083      	sub	sp, #12
 8000190:	468c      	mov	ip, r1

	if(direccion == derecha){
 8000192:	2802      	cmp	r0, #2
 8000194:	d00e      	beq.n	80001b4 <plotPlayer+0x28>
		else{
			player->posicion_X = player->posicion_X + 4;
		}

	}
	else if(direccion == izquierda){
 8000196:	2803      	cmp	r0, #3
 8000198:	d013      	beq.n	80001c2 <plotPlayer+0x36>
		else{
			player->posicion_X = player->posicion_X - 4;
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 800019a:	2301      	movs	r3, #1
 800019c:	9301      	str	r3, [sp, #4]
 800019e:	2308      	movs	r3, #8
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	4a0b      	ldr	r2, [pc, #44]	; (80001d0 <plotPlayer+0x44>)
 80001a4:	2138      	movs	r1, #56	; 0x38
 80001a6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80001aa:	f001 fca9 	bl	8001b00 <SSD1306_DrawBitmap>
}
 80001ae:	b003      	add	sp, #12
 80001b0:	f85d fb04 	ldr.w	pc, [sp], #4
		if(player->posicion_X >= 120){
 80001b4:	784b      	ldrb	r3, [r1, #1]
 80001b6:	2b77      	cmp	r3, #119	; 0x77
			player->posicion_X = 120;
 80001b8:	bf8c      	ite	hi
 80001ba:	2378      	movhi	r3, #120	; 0x78
			player->posicion_X = player->posicion_X + 4;
 80001bc:	3304      	addls	r3, #4
 80001be:	704b      	strb	r3, [r1, #1]
 80001c0:	e7eb      	b.n	800019a <plotPlayer+0xe>
		if(player->posicion_X <= 0){
 80001c2:	784b      	ldrb	r3, [r1, #1]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0e8      	beq.n	800019a <plotPlayer+0xe>
			player->posicion_X = player->posicion_X - 4;
 80001c8:	3b04      	subs	r3, #4
 80001ca:	704b      	strb	r3, [r1, #1]
 80001cc:	e7e5      	b.n	800019a <plotPlayer+0xe>
 80001ce:	bf00      	nop
 80001d0:	08009610 	.word	0x08009610

080001d4 <InvaderInit>:



void InvaderInit(){
 80001d4:	b510      	push	{r4, lr}

	movimiento_Aliens.orientacion = mov_derecha;
 80001d6:	2100      	movs	r1, #0
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <InvaderInit+0x38>)
 80001da:	7019      	strb	r1, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80001dc:	4c0c      	ldr	r4, [pc, #48]	; (8000210 <InvaderInit+0x3c>)
void InvaderInit(){
 80001de:	f04f 0e0a 	mov.w	lr, #10
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
			getAlien(y, x)->vivo = true;
 80001e2:	f04f 0c01 	mov.w	ip, #1
			getAlien(y, x)->conteo_explosion = 2;
 80001e6:	2002      	movs	r0, #2
void InvaderInit(){
 80001e8:	4622      	mov	r2, r4
 80001ea:	4673      	mov	r3, lr
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 80001ec:	7013      	strb	r3, [r2, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 80001ee:	7051      	strb	r1, [r2, #1]
			getAlien(y, x)->vivo = true;
 80001f0:	f882 c002 	strb.w	ip, [r2, #2]
			getAlien(y, x)->conteo_explosion = 2;
 80001f4:	7110      	strb	r0, [r2, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80001f6:	330d      	adds	r3, #13
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	3205      	adds	r2, #5
 80001fc:	2b65      	cmp	r3, #101	; 0x65
 80001fe:	d1f5      	bne.n	80001ec <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000200:	3423      	adds	r4, #35	; 0x23
 8000202:	310b      	adds	r1, #11
 8000204:	b2c9      	uxtb	r1, r1
 8000206:	2921      	cmp	r1, #33	; 0x21
 8000208:	d1ee      	bne.n	80001e8 <InvaderInit+0x14>
		}
	}

}
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000110 	.word	0x20000110
 8000210:	20000094 	.word	0x20000094

08000214 <plotAliens>:

void plotAliens(){
 8000214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000218:	b083      	sub	sp, #12


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 800021a:	4b6b      	ldr	r3, [pc, #428]	; (80003c8 <plotAliens+0x1b4>)
 800021c:	7859      	ldrb	r1, [r3, #1]
 800021e:	4b6b      	ldr	r3, [pc, #428]	; (80003cc <plotAliens+0x1b8>)
 8000220:	781a      	ldrb	r2, [r3, #0]
 8000222:	fbb1 f3f2 	udiv	r3, r1, r2
 8000226:	fb02 1313 	mls	r3, r2, r3, r1
 800022a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800022e:	d13c      	bne.n	80002aa <plotAliens+0x96>
		/*getMovAliens()->animacion = getMovAliens()->animacion + 1;
		if(getMovAliens()->animacion >= 8){
			getMovAliens()->animacion = 0;
		}*/

		getMovAliens()->animacion = !getMovAliens()->animacion;
 8000230:	4a65      	ldr	r2, [pc, #404]	; (80003c8 <plotAliens+0x1b4>)
 8000232:	78d3      	ldrb	r3, [r2, #3]
 8000234:	fab3 f383 	clz	r3, r3
 8000238:	095b      	lsrs	r3, r3, #5
 800023a:	70d3      	strb	r3, [r2, #3]

			switch(getMovAliens()->orientacion){
 800023c:	7813      	ldrb	r3, [r2, #0]
 800023e:	b18b      	cbz	r3, 8000264 <plotAliens+0x50>
 8000240:	2b01      	cmp	r3, #1
 8000242:	d11e      	bne.n	8000282 <plotAliens+0x6e>
 8000244:	4c62      	ldr	r4, [pc, #392]	; (80003d0 <plotAliens+0x1bc>)
 8000246:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800024a:	348c      	adds	r4, #140	; 0x8c
					break;

				case mov_izquierda:

						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800024c:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23

								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 2;
 8000250:	781a      	ldrb	r2, [r3, #0]
 8000252:	3a02      	subs	r2, #2
 8000254:	f803 2b05 	strb.w	r2, [r3], #5
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000258:	4283      	cmp	r3, r0
 800025a:	d1f9      	bne.n	8000250 <plotAliens+0x3c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800025c:	3023      	adds	r0, #35	; 0x23
 800025e:	42a0      	cmp	r0, r4
 8000260:	d1f4      	bne.n	800024c <plotAliens+0x38>
 8000262:	e00e      	b.n	8000282 <plotAliens+0x6e>
 8000264:	4c5a      	ldr	r4, [pc, #360]	; (80003d0 <plotAliens+0x1bc>)
 8000266:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800026a:	348c      	adds	r4, #140	; 0x8c
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800026c:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 2;
 8000270:	781a      	ldrb	r2, [r3, #0]
 8000272:	3202      	adds	r2, #2
 8000274:	f803 2b05 	strb.w	r2, [r3], #5
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000278:	4283      	cmp	r3, r0
 800027a:	d1f9      	bne.n	8000270 <plotAliens+0x5c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800027c:	3023      	adds	r0, #35	; 0x23
 800027e:	42a0      	cmp	r0, r4
 8000280:	d1f4      	bne.n	800026c <plotAliens+0x58>
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 8000282:	4b53      	ldr	r3, [pc, #332]	; (80003d0 <plotAliens+0x1bc>)
 8000284:	7f9b      	ldrb	r3, [r3, #30]
 8000286:	2b72      	cmp	r3, #114	; 0x72
 8000288:	d902      	bls.n	8000290 <plotAliens+0x7c>

				getMovAliens()->orientacion = mov_izquierda;
 800028a:	4b4f      	ldr	r3, [pc, #316]	; (80003c8 <plotAliens+0x1b4>)
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 8000290:	4b4f      	ldr	r3, [pc, #316]	; (80003d0 <plotAliens+0x1bc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b92b      	cbnz	r3, 80002a2 <plotAliens+0x8e>
				getMovAliens()->orientacion = mov_derecha;
 8000296:	4b4c      	ldr	r3, [pc, #304]	; (80003c8 <plotAliens+0x1b4>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 800029c:	789a      	ldrb	r2, [r3, #2]
 800029e:	3201      	adds	r2, #1
 80002a0:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 80002a2:	4b49      	ldr	r3, [pc, #292]	; (80003c8 <plotAliens+0x1b4>)
 80002a4:	789b      	ldrb	r3, [r3, #2]
 80002a6:	2b0a      	cmp	r3, #10
 80002a8:	d009      	beq.n	80002be <plotAliens+0xaa>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 80002aa:	3101      	adds	r1, #1
 80002ac:	4b46      	ldr	r3, [pc, #280]	; (80003c8 <plotAliens+0x1b4>)
 80002ae:	7059      	strb	r1, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002b0:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80003d0 <plotAliens+0x1bc>
	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 80002b4:	46d9      	mov	r9, fp
 80002b6:	f04f 0800 	mov.w	r8, #0
					switch(y){

					case 0:
						if(getAlien(y,x)->vivo == true){

							if(getMovAliens()->animacion == true ){
 80002ba:	469a      	mov	sl, r3
 80002bc:	e07a      	b.n	80003b4 <plotAliens+0x1a0>
						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 80002be:	4b43      	ldr	r3, [pc, #268]	; (80003cc <plotAliens+0x1b8>)
 80002c0:	785c      	ldrb	r4, [r3, #1]
 80002c2:	4d43      	ldr	r5, [pc, #268]	; (80003d0 <plotAliens+0x1bc>)
 80002c4:	f105 0023 	add.w	r0, r5, #35	; 0x23
 80002c8:	358c      	adds	r5, #140	; 0x8c
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002ca:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 80002ce:	785a      	ldrb	r2, [r3, #1]
 80002d0:	4422      	add	r2, r4
 80002d2:	705a      	strb	r2, [r3, #1]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002d4:	3305      	adds	r3, #5
 80002d6:	4283      	cmp	r3, r0
 80002d8:	d1f9      	bne.n	80002ce <plotAliens+0xba>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002da:	3023      	adds	r0, #35	; 0x23
 80002dc:	42a8      	cmp	r0, r5
 80002de:	d1f4      	bne.n	80002ca <plotAliens+0xb6>
 80002e0:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <plotAliens+0x1b4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	709a      	strb	r2, [r3, #2]
 80002e6:	e7e0      	b.n	80002aa <plotAliens+0x96>
						if(getAlien(y,x)->vivo == true){
 80002e8:	78a3      	ldrb	r3, [r4, #2]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d019      	beq.n	8000322 <plotAliens+0x10e>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002ee:	3405      	adds	r4, #5
 80002f0:	3505      	adds	r5, #5
 80002f2:	42a7      	cmp	r7, r4
 80002f4:	d057      	beq.n	80003a6 <plotAliens+0x192>
					switch(y){
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0f6      	beq.n	80002e8 <plotAliens+0xd4>
 80002fa:	2e01      	cmp	r6, #1
 80002fc:	d028      	beq.n	8000350 <plotAliens+0x13c>
								//getMovAliens()->animacion = true;
							}
						}
						break;
					default:
						if(getAlien(y,x)->vivo == true){
 80002fe:	78ab      	ldrb	r3, [r5, #2]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d1f4      	bne.n	80002ee <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 8000304:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d042      	beq.n	8000392 <plotAliens+0x17e>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
							}
							else{
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx2,16,8,1);
 800030c:	2301      	movs	r3, #1
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	2308      	movs	r3, #8
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	2310      	movs	r3, #16
 8000316:	4a2f      	ldr	r2, [pc, #188]	; (80003d4 <plotAliens+0x1c0>)
 8000318:	7869      	ldrb	r1, [r5, #1]
 800031a:	7828      	ldrb	r0, [r5, #0]
 800031c:	f001 fbf0 	bl	8001b00 <SSD1306_DrawBitmap>
 8000320:	e7e5      	b.n	80002ee <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 8000322:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d009      	beq.n	800033e <plotAliens+0x12a>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderTopGfx2,8,8,1);
 800032a:	2301      	movs	r3, #1
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2308      	movs	r3, #8
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <plotAliens+0x1c4>)
 8000334:	7861      	ldrb	r1, [r4, #1]
 8000336:	7820      	ldrb	r0, [r4, #0]
 8000338:	f001 fbe2 	bl	8001b00 <SSD1306_DrawBitmap>
 800033c:	e7d7      	b.n	80002ee <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderTopGfx,8,8,1);
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	2308      	movs	r3, #8
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	4a25      	ldr	r2, [pc, #148]	; (80003dc <plotAliens+0x1c8>)
 8000346:	7861      	ldrb	r1, [r4, #1]
 8000348:	7820      	ldrb	r0, [r4, #0]
 800034a:	f001 fbd9 	bl	8001b00 <SSD1306_DrawBitmap>
 800034e:	e7ce      	b.n	80002ee <plotAliens+0xda>
						if(getAlien(y,x)->vivo == true){
 8000350:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8000354:	2b01      	cmp	r3, #1
 8000356:	d1ca      	bne.n	80002ee <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 8000358:	f89a 3003 	ldrb.w	r3, [sl, #3]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d00c      	beq.n	800037a <plotAliens+0x166>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx2,16,8,1);
 8000360:	2301      	movs	r3, #1
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	2308      	movs	r3, #8
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2310      	movs	r3, #16
 800036a:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <plotAliens+0x1cc>)
 800036c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8000370:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8000374:	f001 fbc4 	bl	8001b00 <SSD1306_DrawBitmap>
 8000378:	e7b9      	b.n	80002ee <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	2308      	movs	r3, #8
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	2310      	movs	r3, #16
 8000382:	4a18      	ldr	r2, [pc, #96]	; (80003e4 <plotAliens+0x1d0>)
 8000384:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8000388:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800038c:	f001 fbb8 	bl	8001b00 <SSD1306_DrawBitmap>
 8000390:	e7ad      	b.n	80002ee <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	2308      	movs	r3, #8
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2310      	movs	r3, #16
 800039a:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <plotAliens+0x1d4>)
 800039c:	7869      	ldrb	r1, [r5, #1]
 800039e:	7828      	ldrb	r0, [r5, #0]
 80003a0:	f001 fbae 	bl	8001b00 <SSD1306_DrawBitmap>
 80003a4:	e7a3      	b.n	80002ee <plotAliens+0xda>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003a6:	f108 0801 	add.w	r8, r8, #1
 80003aa:	f109 0923 	add.w	r9, r9, #35	; 0x23
 80003ae:	f1b8 0f03 	cmp.w	r8, #3
 80003b2:	d006      	beq.n	80003c2 <plotAliens+0x1ae>
 80003b4:	fa5f f688 	uxtb.w	r6, r8
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003b8:	f10b 0723 	add.w	r7, fp, #35	; 0x23
void plotAliens(){
 80003bc:	464d      	mov	r5, r9
 80003be:	465c      	mov	r4, fp
 80003c0:	e799      	b.n	80002f6 <plotAliens+0xe2>
					}
			}

		}

}
 80003c2:	b003      	add	sp, #12
 80003c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003c8:	20000110 	.word	0x20000110
 80003cc:	2000010c 	.word	0x2000010c
 80003d0:	20000094 	.word	0x20000094
 80003d4:	080095c0 	.word	0x080095c0
 80003d8:	080095f8 	.word	0x080095f8
 80003dc:	080095f0 	.word	0x080095f0
 80003e0:	080095e0 	.word	0x080095e0
 80003e4:	080095d0 	.word	0x080095d0
 80003e8:	080095b0 	.word	0x080095b0

080003ec <disparoInit>:

void disparoInit(){


	//Inicializacion del disparo del Player
	Disparo.posicion_x = 0;
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <disparoInit+0x14>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80003f2:	2132      	movs	r1, #50	; 0x32
 80003f4:	7059      	strb	r1, [r3, #1]
	Disparo.disparo = false;
 80003f6:	709a      	strb	r2, [r3, #2]


	//Inicializacion del Disparo de los Aliens
	getDisparoAliens()->numero_disparos = 21;
 80003f8:	4b02      	ldr	r3, [pc, #8]	; (8000404 <disparoInit+0x18>)
 80003fa:	2215      	movs	r2, #21
 80003fc:	70da      	strb	r2, [r3, #3]
}
 80003fe:	4770      	bx	lr
 8000400:	20000100 	.word	0x20000100
 8000404:	20000104 	.word	0x20000104

08000408 <disparar>:


void disparar(){
 8000408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800040c:	b083      	sub	sp, #12


			if(getDisparo()->numero_disparos == 1){
 800040e:	4b45      	ldr	r3, [pc, #276]	; (8000524 <disparar+0x11c>)
 8000410:	78db      	ldrb	r3, [r3, #3]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d00e      	beq.n	8000434 <disparar+0x2c>
				getDisparo()->disparo = true;
				getDisparo()->posicion_x = getPlayer()->posicion_X;
			}


			if(getDisparo()->disparo == true){
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <disparar+0x11c>)
 8000418:	789b      	ldrb	r3, [r3, #2]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d010      	beq.n	8000440 <disparar+0x38>
			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){

				uint8_t tamano_alien = TAMANO_ALIEN_TOP;

				switch(y){
 800041e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000528 <disparar+0x120>
 8000422:	f04f 0900 	mov.w	r9, #0
				uint8_t tamano_alien = TAMANO_ALIEN_TOP;
 8000426:	2708      	movs	r7, #8

				}

				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){

					if( (getDisparo()->posicion_x + 1 >= getAlien(y,x)->posicion_X) &  (getDisparo()->posicion_x + 1 <= (getAlien(y,x)->posicion_X + tamano_alien)) & ((getDisparo()->posicion_y) >= getAlien(y,x)->posicion_Y) & (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + tamano_alien)){
 8000428:	4e3e      	ldr	r6, [pc, #248]	; (8000524 <disparar+0x11c>)
									getDisparo()->numero_disparos = 0;


									//Conteo de la cantidad de aliens eliminados (esto para la funcion disparoAliens())
									//getDisparoAliens()->numero_disparos se interpretará como aliens eliminados.
									getDisparoAliens()->numero_disparos = getDisparoAliens()->numero_disparos - 1;
 800042a:	f8df b100 	ldr.w	fp, [pc, #256]	; 800052c <disparar+0x124>

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 800042e:	f04f 0a01 	mov.w	sl, #1
 8000432:	e070      	b.n	8000516 <disparar+0x10e>
				getDisparo()->disparo = true;
 8000434:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <disparar+0x11c>)
 8000436:	2201      	movs	r2, #1
 8000438:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 800043a:	4a3d      	ldr	r2, [pc, #244]	; (8000530 <disparar+0x128>)
 800043c:	7852      	ldrb	r2, [r2, #1]
 800043e:	701a      	strb	r2, [r3, #0]
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 2, 1);
 8000440:	4c38      	ldr	r4, [pc, #224]	; (8000524 <disparar+0x11c>)
 8000442:	7820      	ldrb	r0, [r4, #0]
 8000444:	3004      	adds	r0, #4
 8000446:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800044a:	b289      	uxth	r1, r1
 800044c:	1c8b      	adds	r3, r1, #2
 800044e:	2201      	movs	r2, #1
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	b29b      	uxth	r3, r3
 8000454:	4602      	mov	r2, r0
 8000456:	f001 fc04 	bl	8001c62 <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800045a:	7863      	ldrb	r3, [r4, #1]
 800045c:	3b04      	subs	r3, #4
 800045e:	b25b      	sxtb	r3, r3
 8000460:	7063      	strb	r3, [r4, #1]
				if(getDisparo()->posicion_y <= 0){
 8000462:	2b00      	cmp	r3, #0
 8000464:	dcdb      	bgt.n	800041e <disparar+0x16>
					getDisparo()->disparo = false;
 8000466:	2200      	movs	r2, #0
 8000468:	70a2      	strb	r2, [r4, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800046a:	2132      	movs	r1, #50	; 0x32
 800046c:	7061      	strb	r1, [r4, #1]
					getDisparo()->numero_disparos = 0;
 800046e:	70e2      	strb	r2, [r4, #3]
 8000470:	e7d5      	b.n	800041e <disparar+0x16>
				switch(y){
 8000472:	270b      	movs	r7, #11
 8000474:	e04d      	b.n	8000512 <disparar+0x10a>
					if(getAlien(y,x)->explosion == true){
 8000476:	78eb      	ldrb	r3, [r5, #3]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d02b      	beq.n	80004d4 <disparar+0xcc>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800047c:	3405      	adds	r4, #5
 800047e:	4544      	cmp	r4, r8
 8000480:	d038      	beq.n	80004f4 <disparar+0xec>
					if( (getDisparo()->posicion_x + 1 >= getAlien(y,x)->posicion_X) &  (getDisparo()->posicion_x + 1 <= (getAlien(y,x)->posicion_X + tamano_alien)) & ((getDisparo()->posicion_y) >= getAlien(y,x)->posicion_Y) & (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + tamano_alien)){
 8000482:	7832      	ldrb	r2, [r6, #0]
 8000484:	4625      	mov	r5, r4
 8000486:	7820      	ldrb	r0, [r4, #0]
 8000488:	f996 c001 	ldrsb.w	ip, [r6, #1]
 800048c:	7861      	ldrb	r1, [r4, #1]
 800048e:	1c53      	adds	r3, r2, #1
 8000490:	4283      	cmp	r3, r0
 8000492:	bfa8      	it	ge
 8000494:	458c      	cmpge	ip, r1
 8000496:	bfac      	ite	ge
 8000498:	2301      	movge	r3, #1
 800049a:	2300      	movlt	r3, #0
 800049c:	eb00 0e07 	add.w	lr, r0, r7
 80004a0:	4572      	cmp	r2, lr
 80004a2:	bfac      	ite	ge
 80004a4:	2300      	movge	r3, #0
 80004a6:	f003 0301 	andlt.w	r3, r3, #1
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0e3      	beq.n	8000476 <disparar+0x6e>
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	459c      	cmp	ip, r3
 80004b2:	dce0      	bgt.n	8000476 <disparar+0x6e>
								if(getAlien(y,x)->vivo == true){
 80004b4:	78a3      	ldrb	r3, [r4, #2]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d1dd      	bne.n	8000476 <disparar+0x6e>
									getAlien(y,x)->vivo = false;
 80004ba:	2300      	movs	r3, #0
 80004bc:	70a3      	strb	r3, [r4, #2]
									getAlien(y,x)->explosion = true;
 80004be:	f884 a003 	strb.w	sl, [r4, #3]
									getDisparo()->disparo = false;
 80004c2:	70b3      	strb	r3, [r6, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 80004c4:	2232      	movs	r2, #50	; 0x32
 80004c6:	7072      	strb	r2, [r6, #1]
									getDisparo()->numero_disparos = 0;
 80004c8:	70f3      	strb	r3, [r6, #3]
									getDisparoAliens()->numero_disparos = getDisparoAliens()->numero_disparos - 1;
 80004ca:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	f88b 3003 	strb.w	r3, [fp, #3]
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 80004d4:	f8cd a004 	str.w	sl, [sp, #4]
 80004d8:	2308      	movs	r3, #8
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2310      	movs	r3, #16
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <disparar+0x12c>)
 80004e0:	f001 fb0e 	bl	8001b00 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 80004e4:	792b      	ldrb	r3, [r5, #4]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	712b      	strb	r3, [r5, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1c5      	bne.n	800047c <disparar+0x74>
							getAlien(y,x)->explosion = false;
 80004f0:	70eb      	strb	r3, [r5, #3]
 80004f2:	e7c3      	b.n	800047c <disparar+0x74>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80004f4:	f109 0901 	add.w	r9, r9, #1
 80004f8:	fa5f f989 	uxtb.w	r9, r9
 80004fc:	f1b9 0f03 	cmp.w	r9, #3
 8000500:	d00c      	beq.n	800051c <disparar+0x114>
				switch(y){
 8000502:	f1b9 0f01 	cmp.w	r9, #1
 8000506:	d0b4      	beq.n	8000472 <disparar+0x6a>
					tamano_alien = TAMANO_ALIEN_BOTTOM;
 8000508:	f1b9 0f02 	cmp.w	r9, #2
 800050c:	bf14      	ite	ne
 800050e:	2708      	movne	r7, #8
 8000510:	270c      	moveq	r7, #12
 8000512:	f108 0823 	add.w	r8, r8, #35	; 0x23
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000516:	f1a8 0423 	sub.w	r4, r8, #35	; 0x23
 800051a:	e7b2      	b.n	8000482 <disparar+0x7a>
						}
					}
				}
			}
}
 800051c:	b003      	add	sp, #12
 800051e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000522:	bf00      	nop
 8000524:	20000100 	.word	0x20000100
 8000528:	200000b7 	.word	0x200000b7
 800052c:	20000104 	.word	0x20000104
 8000530:	20000108 	.word	0x20000108
 8000534:	08009600 	.word	0x08009600

08000538 <disparoAliens>:


void disparoAliens(){


	if(getDisparoAliens()->numero_disparos != 0){
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <disparoAliens+0xbc>)
 800053a:	78db      	ldrb	r3, [r3, #3]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d057      	beq.n	80005f0 <disparoAliens+0xb8>
void disparoAliens(){
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	b083      	sub	sp, #12

				if(getDisparoAliens()->disparo == true){
 8000544:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <disparoAliens+0xbc>)
 8000546:	789b      	ldrb	r3, [r3, #2]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d044      	beq.n	80005d6 <disparoAliens+0x9e>
					uint8_t flag = false;

					while(flag != true){


						uint8_t fila = rand() % NUM_ALIEN_FILA;
 800054c:	4f2a      	ldr	r7, [pc, #168]	; (80005f8 <disparoAliens+0xc0>)
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 800054e:	4e2b      	ldr	r6, [pc, #172]	; (80005fc <disparoAliens+0xc4>)

						if(getAlien(fila, columna)->vivo == true){
 8000550:	4d2b      	ldr	r5, [pc, #172]	; (8000600 <disparoAliens+0xc8>)
						uint8_t fila = rand() % NUM_ALIEN_FILA;
 8000552:	f007 fc1f 	bl	8007d94 <rand>
 8000556:	4604      	mov	r4, r0
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 8000558:	f007 fc1c 	bl	8007d94 <rand>
						uint8_t fila = rand() % NUM_ALIEN_FILA;
 800055c:	fb87 1204 	smull	r1, r2, r7, r4
 8000560:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8000564:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	b2e4      	uxtb	r4, r4
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 800056c:	fb86 2100 	smull	r2, r1, r6, r0
 8000570:	4401      	add	r1, r0
 8000572:	17c2      	asrs	r2, r0, #31
 8000574:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8000578:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800057c:	1a83      	subs	r3, r0, r2
 800057e:	b2db      	uxtb	r3, r3
						if(getAlien(fila, columna)->vivo == true){
 8000580:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000584:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000588:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800058c:	440a      	add	r2, r1
 800058e:	442a      	add	r2, r5
 8000590:	7892      	ldrb	r2, [r2, #2]
 8000592:	2a01      	cmp	r2, #1
 8000594:	d1dd      	bne.n	8000552 <disparoAliens+0x1a>
							flag = true;
							getDisparoAliens()->disparo = true;
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <disparoAliens+0xbc>)
 8000598:	2101      	movs	r1, #1
 800059a:	7091      	strb	r1, [r2, #2]

							getDisparoAliens()->posicion_x = getAlien(fila, columna)->posicion_X + (TAMANO_ALIEN/2);
 800059c:	4918      	ldr	r1, [pc, #96]	; (8000600 <disparoAliens+0xc8>)
 800059e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80005a6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80005aa:	4423      	add	r3, r4
 80005ac:	18c8      	adds	r0, r1, r3
 80005ae:	5ccb      	ldrb	r3, [r1, r3]
 80005b0:	3304      	adds	r3, #4
 80005b2:	7013      	strb	r3, [r2, #0]
							getDisparoAliens()->posicion_y = getAlien(fila, columna)->posicion_Y + (TAMANO_ALIEN/2);
 80005b4:	7843      	ldrb	r3, [r0, #1]
 80005b6:	3304      	adds	r3, #4
 80005b8:	7053      	strb	r3, [r2, #1]
						}

					}
				}

				SSD1306_DrawBitmap(getDisparoAliens()->posicion_x, getDisparoAliens()->posicion_y, AlienBombGfx, 2, 4, 1);
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <disparoAliens+0xbc>)
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2304      	movs	r3, #4
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2302      	movs	r3, #2
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <disparoAliens+0xcc>)
 80005c8:	f990 1001 	ldrsb.w	r1, [r0, #1]
 80005cc:	7800      	ldrb	r0, [r0, #0]
 80005ce:	f001 fa97 	bl	8001b00 <SSD1306_DrawBitmap>

	}

}
 80005d2:	b003      	add	sp, #12
 80005d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					getDisparoAliens()->posicion_y = getDisparoAliens()->posicion_y + dificultad.velocidad_disparo_aliens;
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <disparoAliens+0xbc>)
 80005d8:	7853      	ldrb	r3, [r2, #1]
 80005da:	490b      	ldr	r1, [pc, #44]	; (8000608 <disparoAliens+0xd0>)
 80005dc:	7889      	ldrb	r1, [r1, #2]
 80005de:	440b      	add	r3, r1
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	7053      	strb	r3, [r2, #1]
					if(getDisparoAliens()->posicion_y >= 60){
 80005e4:	2b3b      	cmp	r3, #59	; 0x3b
 80005e6:	dde8      	ble.n	80005ba <disparoAliens+0x82>
						getDisparoAliens()->disparo = false;
 80005e8:	4613      	mov	r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	709a      	strb	r2, [r3, #2]
 80005ee:	e7e4      	b.n	80005ba <disparoAliens+0x82>
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000104 	.word	0x20000104
 80005f8:	55555556 	.word	0x55555556
 80005fc:	92492493 	.word	0x92492493
 8000600:	20000094 	.word	0x20000094
 8000604:	080095ac 	.word	0x080095ac
 8000608:	2000010c 	.word	0x2000010c

0800060c <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 800060c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000610:	b083      	sub	sp, #12

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000612:	f006 fb0d 	bl	8006c30 <xTaskGetTickCount>
 8000616:	9000      	str	r0, [sp, #0]

  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  HAL_ADC_Start(&hadc1);
 8000618:	4d2c      	ldr	r5, [pc, #176]	; (80006cc <entryJoystick+0xc0>)
		  joystick.y_value = nulo;
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 800061a:	4e2d      	ldr	r6, [pc, #180]	; (80006d0 <entryJoystick+0xc4>)
		  joystick.boton = false;
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800061c:	4f2d      	ldr	r7, [pc, #180]	; (80006d4 <entryJoystick+0xc8>)
 800061e:	e01f      	b.n	8000660 <entryJoystick+0x54>
 8000620:	2302      	movs	r3, #2
 8000622:	e045      	b.n	80006b0 <entryJoystick+0xa4>
 8000624:	2401      	movs	r4, #1
		  joystick.y_value = abajo;
 8000626:	f88d 4005 	strb.w	r4, [sp, #5]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 800062a:	2104      	movs	r1, #4
 800062c:	4630      	mov	r0, r6
 800062e:	f002 fd2d 	bl	800308c <HAL_GPIO_ReadPin>
 8000632:	fab0 f080 	clz	r0, r0
 8000636:	0940      	lsrs	r0, r0, #5
 8000638:	f88d 0006 	strb.w	r0, [sp, #6]
	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 800063c:	2300      	movs	r3, #0
 800063e:	461a      	mov	r2, r3
 8000640:	a901      	add	r1, sp, #4
 8000642:	4825      	ldr	r0, [pc, #148]	; (80006d8 <entryJoystick+0xcc>)
 8000644:	6800      	ldr	r0, [r0, #0]
 8000646:	f005 f8f5 	bl	8005834 <osMessageQueuePut>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800064a:	b128      	cbz	r0, 8000658 <entryJoystick+0x4c>
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4638      	mov	r0, r7
 8000654:	f002 fd20 	bl	8003098 <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000658:	2132      	movs	r1, #50	; 0x32
 800065a:	4668      	mov	r0, sp
 800065c:	f006 fc0a 	bl	8006e74 <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc1);
 8000660:	4628      	mov	r0, r5
 8000662:	f002 fa41 	bl	8002ae8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000666:	210a      	movs	r1, #10
 8000668:	4628      	mov	r0, r5
 800066a:	f002 f887 	bl	800277c <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 800066e:	4628      	mov	r0, r5
 8000670:	f002 f946 	bl	8002900 <HAL_ADC_GetValue>
 8000674:	fa1f f980 	uxth.w	r9, r0
	  HAL_ADC_Stop(&hadc1);
 8000678:	4628      	mov	r0, r5
 800067a:	f002 fb5d 	bl	8002d38 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 800067e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80006dc <entryJoystick+0xd0>
 8000682:	4640      	mov	r0, r8
 8000684:	f002 fa30 	bl	8002ae8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000688:	210a      	movs	r1, #10
 800068a:	4640      	mov	r0, r8
 800068c:	f002 f876 	bl	800277c <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000690:	4640      	mov	r0, r8
 8000692:	f002 f935 	bl	8002900 <HAL_ADC_GetValue>
 8000696:	b284      	uxth	r4, r0
	  HAL_ADC_Stop(&hadc2);
 8000698:	4640      	mov	r0, r8
 800069a:	f002 fb4d 	bl	8002d38 <HAL_ADC_Stop>
	  if(val_x > 2200){
 800069e:	f640 0398 	movw	r3, #2200	; 0x898
 80006a2:	4599      	cmp	r9, r3
 80006a4:	d8bc      	bhi.n	8000620 <entryJoystick+0x14>
	  else if(val_x < 1600){
 80006a6:	f5b9 6fc8 	cmp.w	r9, #1600	; 0x640
 80006aa:	bf2c      	ite	cs
 80006ac:	2304      	movcs	r3, #4
 80006ae:	2303      	movcc	r3, #3
		  joystick.x_value = derecha;
 80006b0:	f88d 3004 	strb.w	r3, [sp, #4]
	  if(val_y > 2200){
 80006b4:	f640 0398 	movw	r3, #2200	; 0x898
 80006b8:	429c      	cmp	r4, r3
 80006ba:	d8b3      	bhi.n	8000624 <entryJoystick+0x18>
	  else if(val_y < 1600){
 80006bc:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 80006c0:	bf34      	ite	cc
 80006c2:	2400      	movcc	r4, #0
 80006c4:	2401      	movcs	r4, #1
 80006c6:	00a4      	lsls	r4, r4, #2
 80006c8:	e7ad      	b.n	8000626 <entryJoystick+0x1a>
 80006ca:	bf00      	nop
 80006cc:	20000328 	.word	0x20000328
 80006d0:	40010800 	.word	0x40010800
 80006d4:	40011000 	.word	0x40011000
 80006d8:	200004e8 	.word	0x200004e8
 80006dc:	20000358 	.word	0x20000358

080006e0 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 80006e0:	b530      	push	{r4, r5, lr}
 80006e2:	b083      	sub	sp, #12

	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 80006e4:	f000 fe8c 	bl	8001400 <menuInit>


  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 80006e8:	4d11      	ldr	r5, [pc, #68]	; (8000730 <entryPantalla+0x50>)

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 80006ea:	4c12      	ldr	r4, [pc, #72]	; (8000734 <entryPantalla+0x54>)
 80006ec:	e005      	b.n	80006fa <entryPantalla+0x1a>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f4:	4620      	mov	r0, r4
 80006f6:	f002 fccf 	bl	8003098 <HAL_GPIO_WritePin>
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	2200      	movs	r2, #0
 8000700:	a901      	add	r1, sp, #4
 8000702:	6828      	ldr	r0, [r5, #0]
 8000704:	f005 f8e6 	bl	80058d4 <osMessageQueueGet>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000708:	2800      	cmp	r0, #0
 800070a:	d1f0      	bne.n	80006ee <entryPantalla+0xe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	4620      	mov	r0, r4
 8000714:	f002 fcc0 	bl	8003098 <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000718:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800071c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000720:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000724:	f000 fe94 	bl	8001450 <menuActualizar>
		actualizarPantalla();
 8000728:	f7ff fd22 	bl	8000170 <actualizarPantalla>
 800072c:	e7e5      	b.n	80006fa <entryPantalla+0x1a>
 800072e:	bf00      	nop
 8000730:	200004e8 	.word	0x200004e8
 8000734:	40011000 	.word	0x40011000

08000738 <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800073c:	b084      	sub	sp, #16
//	HAL_TIM_Base_Start_IT(&htim3);

	uint8_t dataBuffer[TAMANO_PAGINA];
	uint16_t address = MEMORIA_ADDRESS;

	char buff[] = {'a','x','e','l','\0','\0','a','a'};
 800073e:	4b3c      	ldr	r3, [pc, #240]	; (8000830 <entryMemoria+0xf8>)
 8000740:	ac02      	add	r4, sp, #8
 8000742:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000746:	e884 0003 	stmia.w	r4, {r0, r1}

	osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 800074a:	f04f 31ff 	mov.w	r1, #4294967295
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <entryMemoria+0xfc>)
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	f004 fea3 	bl	800549c <osMutexAcquire>

	address = MEMORIA_ADDRESS + 32;
	//Write_Memoria(address, buff_nuevosPuntajes[32]);

	uint8_t data[3];
	data[0] = WRITE;
 8000756:	2302      	movs	r3, #2
 8000758:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = address>>8;
 800075c:	2700      	movs	r7, #0
 800075e:	f88d 7005 	strb.w	r7, [sp, #5]
	data[2] = address;
 8000762:	2520      	movs	r5, #32
 8000764:	f88d 5006 	strb.w	r5, [sp, #6]
	//data[4] = value;

	uint8_t wren = WREN;
 8000768:	2306      	movs	r3, #6
 800076a:	f88d 3003 	strb.w	r3, [sp, #3]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 800076e:	4e32      	ldr	r6, [pc, #200]	; (8000838 <entryMemoria+0x100>)
 8000770:	463a      	mov	r2, r7
 8000772:	4629      	mov	r1, r5
 8000774:	4630      	mov	r0, r6
 8000776:	f002 fc8f 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &wren, 1, 100);  // write data to register
 800077a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800083c <entryMemoria+0x104>
 800077e:	2364      	movs	r3, #100	; 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	f10d 0103 	add.w	r1, sp, #3
 8000786:	4640      	mov	r0, r8
 8000788:	f003 fd8c 	bl	80042a4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 800078c:	2201      	movs	r2, #1
 800078e:	4629      	mov	r1, r5
 8000790:	4630      	mov	r0, r6
 8000792:	f002 fc81 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000796:	200a      	movs	r0, #10
 8000798:	f001 ffdc 	bl	8002754 <HAL_Delay>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 800079c:	463a      	mov	r2, r7
 800079e:	4629      	mov	r1, r5
 80007a0:	4630      	mov	r0, r6
 80007a2:	f002 fc79 	bl	8003098 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // write data to register
 80007a6:	2364      	movs	r3, #100	; 0x64
 80007a8:	2203      	movs	r2, #3
 80007aa:	a901      	add	r1, sp, #4
 80007ac:	4640      	mov	r0, r8
 80007ae:	f003 fd79 	bl	80042a4 <HAL_SPI_Transmit>



	for(uint8_t i=0; i<8;i++){
 80007b2:	f10d 0810 	add.w	r8, sp, #16
		//Write_Memoria(address, buff[i]);
		//HAL_Delay(10);
		HAL_SPI_Transmit (&hspi1, (uint8_t *)&buff[i], 1, HAL_MAX_DELAY);  // write data to register
 80007b6:	4f21      	ldr	r7, [pc, #132]	; (800083c <entryMemoria+0x104>)
 80007b8:	f04f 36ff 	mov.w	r6, #4294967295
 80007bc:	2501      	movs	r5, #1
 80007be:	4633      	mov	r3, r6
 80007c0:	462a      	mov	r2, r5
 80007c2:	4621      	mov	r1, r4
 80007c4:	4638      	mov	r0, r7
 80007c6:	f003 fd6d 	bl	80042a4 <HAL_SPI_Transmit>
	for(uint8_t i=0; i<8;i++){
 80007ca:	3401      	adds	r4, #1
 80007cc:	4544      	cmp	r4, r8
 80007ce:	d1f6      	bne.n	80007be <entryMemoria+0x86>
		//address++;

	}


	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 80007d0:	2201      	movs	r2, #1
 80007d2:	2120      	movs	r1, #32
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <entryMemoria+0x100>)
 80007d6:	f002 fc5f 	bl	8003098 <HAL_GPIO_WritePin>
 80007da:	2400      	movs	r4, #0

	address = MEMORIA_ADDRESS;

	for(uint8_t i=0; i<TAMANO_PAGINA;i++){

		dataBuffer[i] = Read_memoria(address);
 80007dc:	b2a0      	uxth	r0, r4
 80007de:	f000 fbe3 	bl	8000fa8 <Read_memoria>
	for(uint8_t i=0; i<TAMANO_PAGINA;i++){
 80007e2:	3401      	adds	r4, #1
 80007e4:	2c40      	cmp	r4, #64	; 0x40
 80007e6:	d1f9      	bne.n	80007dc <entryMemoria+0xa4>


	//EEPROM_ReadPage_DMA(MEMORIA_ADDRESS, dataBuffer);

	//puntajesActualizar();
	memoriaInit();
 80007e8:	f000 fc0a 	bl	8001000 <memoriaInit>
	//Ordenamiento_Puntajes();

	osMutexRelease(mutexPuntajesHandle);
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <entryMemoria+0xfc>)
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	f004 fe96 	bl	8005520 <osMutexRelease>
  for(;;)
  {

	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado
	  //del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 80007f4:	4f12      	ldr	r7, [pc, #72]	; (8000840 <entryMemoria+0x108>)
 80007f6:	f04f 35ff 	mov.w	r5, #4294967295
 80007fa:	2401      	movs	r4, #1
 80007fc:	2600      	movs	r6, #0
 80007fe:	462b      	mov	r3, r5
 8000800:	4632      	mov	r2, r6
 8000802:	4621      	mov	r1, r4
 8000804:	6838      	ldr	r0, [r7, #0]
 8000806:	f004 fdab 	bl	8005360 <osEventFlagsWait>

	      // Realiza acciones basadas en la notificación recibida
	      if (flags == NOTIFICATION_VALUE)
 800080a:	2801      	cmp	r0, #1
 800080c:	d1f7      	bne.n	80007fe <entryMemoria+0xc6>
	      {
	    	  //Acceso al mutex, ya que se comparte el periférico SPI con la tarea SonidoTask.
	    	  osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 800080e:	4e09      	ldr	r6, [pc, #36]	; (8000834 <entryMemoria+0xfc>)
 8000810:	4629      	mov	r1, r5
 8000812:	6830      	ldr	r0, [r6, #0]
 8000814:	f004 fe42 	bl	800549c <osMutexAcquire>

	    	  //Ordenamiento_Puntajes();
	    	  writeNuevosPuntajes(1);
 8000818:	4620      	mov	r0, r4
 800081a:	f000 fcdd 	bl	80011d8 <writeNuevosPuntajes>
	    	  //guardarNuevosPuntaje();

	    	  osMutexRelease(mutexPuntajesHandle);
 800081e:	6830      	ldr	r0, [r6, #0]
 8000820:	f004 fe7e 	bl	8005520 <osMutexRelease>


	    	  //Envio la notificacion 2 para que la tarea PantallaTask pueda pasar del menu guardado_nombre al menu de puntajes una vez que los puntajes
	    	  //ya se encuentran ordenadas y guardadas, ya que sin esta segunda sincronizacion, puede pasarse al menu puntajes sin que estos se encuentren
	    	  //ordenados. El ordenado se realiza en esta tarea MemoriaTask ya que las escrituras de puntajes se realizan solo en esta tarea.
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 8000824:	2102      	movs	r1, #2
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <entryMemoria+0x10c>)
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	f004 fd5b 	bl	80052e4 <osEventFlagsSet>
 800082e:	e7e5      	b.n	80007fc <entryMemoria+0xc4>
 8000830:	08008e38 	.word	0x08008e38
 8000834:	200004c4 	.word	0x200004c4
 8000838:	40010c00 	.word	0x40010c00
 800083c:	200003dc 	.word	0x200003dc
 8000840:	200004cc 	.word	0x200004cc
 8000844:	200004d0 	.word	0x200004d0

08000848 <SystemClock_Config>:
{
 8000848:	b500      	push	{lr}
 800084a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084c:	2300      	movs	r3, #0
 800084e:	930c      	str	r3, [sp, #48]	; 0x30
 8000850:	930d      	str	r3, [sp, #52]	; 0x34
 8000852:	930f      	str	r3, [sp, #60]	; 0x3c
 8000854:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000856:	9305      	str	r3, [sp, #20]
 8000858:	9306      	str	r3, [sp, #24]
 800085a:	9307      	str	r3, [sp, #28]
 800085c:	9308      	str	r3, [sp, #32]
 800085e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	9303      	str	r3, [sp, #12]
 8000866:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2201      	movs	r2, #1
 800086a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000870:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000872:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2202      	movs	r2, #2
 8000876:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000878:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800087a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800087e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	a80a      	add	r0, sp, #40	; 0x28
 8000882:	f002 ffcb 	bl	800381c <HAL_RCC_OscConfig>
 8000886:	b9c8      	cbnz	r0, 80008bc <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2102      	movs	r1, #2
 800088e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	a805      	add	r0, sp, #20
 800089e:	f003 f9fd 	bl	8003c9c <HAL_RCC_ClockConfig>
 80008a2:	b968      	cbnz	r0, 80008c0 <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008a4:	2302      	movs	r3, #2
 80008a6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ac:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ae:	a801      	add	r0, sp, #4
 80008b0:	f003 faea 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 80008b4:	b930      	cbnz	r0, 80008c4 <SystemClock_Config+0x7c>
}
 80008b6:	b015      	add	sp, #84	; 0x54
 80008b8:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008be:	e7fe      	b.n	80008be <SystemClock_Config+0x76>
 80008c0:	b672      	cpsid	i
 80008c2:	e7fe      	b.n	80008c2 <SystemClock_Config+0x7a>
 80008c4:	b672      	cpsid	i
 80008c6:	e7fe      	b.n	80008c6 <SystemClock_Config+0x7e>

080008c8 <main>:
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 80008cc:	f001 ff1e 	bl	800270c <HAL_Init>
  SystemClock_Config();
 80008d0:	f7ff ffba 	bl	8000848 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	2400      	movs	r4, #0
 80008d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80008d8:	940c      	str	r4, [sp, #48]	; 0x30
 80008da:	940d      	str	r4, [sp, #52]	; 0x34
 80008dc:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4ba8      	ldr	r3, [pc, #672]	; (8000b80 <main+0x2b8>)
 80008e0:	699a      	ldr	r2, [r3, #24]
 80008e2:	f042 0210 	orr.w	r2, r2, #16
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	f002 0210 	and.w	r2, r2, #16
 80008ee:	9201      	str	r2, [sp, #4]
 80008f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	f042 0220 	orr.w	r2, r2, #32
 80008f8:	619a      	str	r2, [r3, #24]
 80008fa:	699a      	ldr	r2, [r3, #24]
 80008fc:	f002 0220 	and.w	r2, r2, #32
 8000900:	9202      	str	r2, [sp, #8]
 8000902:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	f042 0204 	orr.w	r2, r2, #4
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	699a      	ldr	r2, [r3, #24]
 800090e:	f002 0204 	and.w	r2, r2, #4
 8000912:	9203      	str	r2, [sp, #12]
 8000914:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	f042 0208 	orr.w	r2, r2, #8
 800091c:	619a      	str	r2, [r3, #24]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	9304      	str	r3, [sp, #16]
 8000926:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000928:	f8df 9258 	ldr.w	r9, [pc, #600]	; 8000b84 <main+0x2bc>
 800092c:	4622      	mov	r2, r4
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	4648      	mov	r0, r9
 8000934:	f002 fbb0 	bl	8003098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 8000938:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8000b88 <main+0x2c0>
 800093c:	4622      	mov	r2, r4
 800093e:	f24c 0120 	movw	r1, #49184	; 0xc020
 8000942:	4640      	mov	r0, r8
 8000944:	f002 fba8 	bl	8003098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000948:	4e90      	ldr	r6, [pc, #576]	; (8000b8c <main+0x2c4>)
 800094a:	4622      	mov	r2, r4
 800094c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000950:	4630      	mov	r0, r6
 8000952:	f002 fba1 	bl	8003098 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2501      	movs	r5, #1
 800095e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2702      	movs	r7, #2
 8000964:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	a90b      	add	r1, sp, #44	; 0x2c
 8000968:	4648      	mov	r0, r9
 800096a:	f002 fa55 	bl	8002e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096e:	2304      	movs	r3, #4
 8000970:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000974:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	a90b      	add	r1, sp, #44	; 0x2c
 8000978:	4630      	mov	r0, r6
 800097a:	f002 fa4d 	bl	8002e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 800097e:	f24c 0320 	movw	r3, #49184	; 0xc020
 8000982:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	a90b      	add	r1, sp, #44	; 0x2c
 800098c:	4640      	mov	r0, r8
 800098e:	f002 fa43 	bl	8002e18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000992:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000996:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	a90b      	add	r1, sp, #44	; 0x2c
 80009a0:	4630      	mov	r0, r6
 80009a2:	f002 fa39 	bl	8002e18 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80009a8:	940c      	str	r4, [sp, #48]	; 0x30
 80009aa:	940d      	str	r4, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 80009ac:	4878      	ldr	r0, [pc, #480]	; (8000b90 <main+0x2c8>)
 80009ae:	4b79      	ldr	r3, [pc, #484]	; (8000b94 <main+0x2cc>)
 80009b0:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b2:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009b4:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b6:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80009bc:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009c0:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c2:	f002 f935 	bl	8002c30 <HAL_ADC_Init>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	f040 8132 	bne.w	8000c30 <main+0x368>
  sConfig.Channel = ADC_CHANNEL_3;
 80009cc:	2303      	movs	r3, #3
 80009ce:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009d4:	2300      	movs	r3, #0
 80009d6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	a90b      	add	r1, sp, #44	; 0x2c
 80009da:	486d      	ldr	r0, [pc, #436]	; (8000b90 <main+0x2c8>)
 80009dc:	f001 ff94 	bl	8002908 <HAL_ADC_ConfigChannel>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	f040 8127 	bne.w	8000c34 <main+0x36c>
  hi2c1.Instance = I2C1;
 80009e6:	486c      	ldr	r0, [pc, #432]	; (8000b98 <main+0x2d0>)
 80009e8:	4b6c      	ldr	r3, [pc, #432]	; (8000b9c <main+0x2d4>)
 80009ea:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009ec:	4b6c      	ldr	r3, [pc, #432]	; (8000ba0 <main+0x2d8>)
 80009ee:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f0:	2300      	movs	r3, #0
 80009f2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fa:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a02:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a04:	f002 fc6e 	bl	80032e4 <HAL_I2C_Init>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	f040 8115 	bne.w	8000c38 <main+0x370>
  hspi1.Instance = SPI1;
 8000a0e:	4865      	ldr	r0, [pc, #404]	; (8000ba4 <main+0x2dc>)
 8000a10:	4b65      	ldr	r3, [pc, #404]	; (8000ba8 <main+0x2e0>)
 8000a12:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a14:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a18:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a20:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a22:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a28:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a2a:	2218      	movs	r2, #24
 8000a2c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a30:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a32:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a34:	230a      	movs	r3, #10
 8000a36:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a38:	f003 fbd9 	bl	80041ee <HAL_SPI_Init>
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	f040 80fd 	bne.w	8000c3c <main+0x374>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a42:	2300      	movs	r3, #0
 8000a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a46:	930c      	str	r3, [sp, #48]	; 0x30
 8000a48:	930d      	str	r3, [sp, #52]	; 0x34
  hadc2.Instance = ADC2;
 8000a4a:	4858      	ldr	r0, [pc, #352]	; (8000bac <main+0x2e4>)
 8000a4c:	4a58      	ldr	r2, [pc, #352]	; (8000bb0 <main+0x2e8>)
 8000a4e:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a50:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a52:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a54:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a5a:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5c:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a62:	f002 f8e5 	bl	8002c30 <HAL_ADC_Init>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	f040 80ea 	bne.w	8000c40 <main+0x378>
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a72:	2300      	movs	r3, #0
 8000a74:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a76:	a90b      	add	r1, sp, #44	; 0x2c
 8000a78:	484c      	ldr	r0, [pc, #304]	; (8000bac <main+0x2e4>)
 8000a7a:	f001 ff45 	bl	8002908 <HAL_ADC_ConfigChannel>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	f040 80e0 	bne.w	8000c44 <main+0x37c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	9307      	str	r3, [sp, #28]
 8000a88:	9308      	str	r3, [sp, #32]
 8000a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a8c:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	9305      	str	r3, [sp, #20]
 8000a90:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a94:	930c      	str	r3, [sp, #48]	; 0x30
 8000a96:	930d      	str	r3, [sp, #52]	; 0x34
 8000a98:	930e      	str	r3, [sp, #56]	; 0x38
 8000a9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a9c:	9310      	str	r3, [sp, #64]	; 0x40
 8000a9e:	9311      	str	r3, [sp, #68]	; 0x44
  htim2.Instance = TIM2;
 8000aa0:	4844      	ldr	r0, [pc, #272]	; (8000bb4 <main+0x2ec>)
 8000aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1-1;
 8000aa8:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 255-1;
 8000aac:	22fe      	movs	r2, #254	; 0xfe
 8000aae:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab4:	f004 f89c 	bl	8004bf0 <HAL_TIM_Base_Init>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	f040 80c5 	bne.w	8000c48 <main+0x380>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac4:	a907      	add	r1, sp, #28
 8000ac6:	483b      	ldr	r0, [pc, #236]	; (8000bb4 <main+0x2ec>)
 8000ac8:	f004 f992 	bl	8004df0 <HAL_TIM_ConfigClockSource>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	f040 80bd 	bne.w	8000c4c <main+0x384>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad2:	4838      	ldr	r0, [pc, #224]	; (8000bb4 <main+0x2ec>)
 8000ad4:	f004 f8b8 	bl	8004c48 <HAL_TIM_PWM_Init>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	f040 80b9 	bne.w	8000c50 <main+0x388>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	a905      	add	r1, sp, #20
 8000ae6:	4833      	ldr	r0, [pc, #204]	; (8000bb4 <main+0x2ec>)
 8000ae8:	f004 faec 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	f040 80b1 	bne.w	8000c54 <main+0x38c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af2:	2360      	movs	r3, #96	; 0x60
 8000af4:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000af6:	2200      	movs	r2, #0
 8000af8:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afa:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afc:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afe:	a90b      	add	r1, sp, #44	; 0x2c
 8000b00:	482c      	ldr	r0, [pc, #176]	; (8000bb4 <main+0x2ec>)
 8000b02:	f004 f8fb 	bl	8004cfc <HAL_TIM_PWM_ConfigChannel>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	f040 80a6 	bne.w	8000c58 <main+0x390>
  HAL_TIM_MspPostInit(&htim2);
 8000b0c:	4829      	ldr	r0, [pc, #164]	; (8000bb4 <main+0x2ec>)
 8000b0e:	f001 fcef 	bl	80024f0 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	2300      	movs	r3, #0
 8000b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b16:	930c      	str	r3, [sp, #48]	; 0x30
 8000b18:	930d      	str	r3, [sp, #52]	; 0x34
 8000b1a:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	9307      	str	r3, [sp, #28]
 8000b1e:	9308      	str	r3, [sp, #32]
  htim3.Instance = TIM3;
 8000b20:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <main+0x2f0>)
 8000b22:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <main+0x2f4>)
 8000b24:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 8000b26:	2247      	movs	r2, #71	; 0x47
 8000b28:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 125-1;
 8000b2c:	227c      	movs	r2, #124	; 0x7c
 8000b2e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b34:	f004 f85c 	bl	8004bf0 <HAL_TIM_Base_Init>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	f040 808f 	bne.w	8000c5c <main+0x394>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b44:	a90b      	add	r1, sp, #44	; 0x2c
 8000b46:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <main+0x2f0>)
 8000b48:	f004 f952 	bl	8004df0 <HAL_TIM_ConfigClockSource>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	f040 8087 	bne.w	8000c60 <main+0x398>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b58:	a907      	add	r1, sp, #28
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <main+0x2f0>)
 8000b5c:	f004 fab2 	bl	80050c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d17f      	bne.n	8000c64 <main+0x39c>
  osKernelInitialize();
 8000b64:	f004 fae4 	bl	8005130 <osKernelInitialize>
  mutexPuntajesHandle = osMutexNew(&mutexPuntajes_attributes);
 8000b68:	4815      	ldr	r0, [pc, #84]	; (8000bc0 <main+0x2f8>)
 8000b6a:	f004 fc43 	bl	80053f4 <osMutexNew>
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <main+0x2fc>)
 8000b70:	6018      	str	r0, [r3, #0]
  mySem01Handle = osSemaphoreNew(1, 1, &mySem01_attributes);
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <main+0x300>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	4608      	mov	r0, r1
 8000b78:	f004 fd0a 	bl	8005590 <osSemaphoreNew>
 8000b7c:	e026      	b.n	8000bcc <main+0x304>
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	20000328 	.word	0x20000328
 8000b94:	40012400 	.word	0x40012400
 8000b98:	20000388 	.word	0x20000388
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	00061a80 	.word	0x00061a80
 8000ba4:	200003dc 	.word	0x200003dc
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	20000358 	.word	0x20000358
 8000bb0:	40012800 	.word	0x40012800
 8000bb4:	20000434 	.word	0x20000434
 8000bb8:	2000047c 	.word	0x2000047c
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	08009984 	.word	0x08009984
 8000bc4:	200004c4 	.word	0x200004c4
 8000bc8:	08009994 	.word	0x08009994
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <main+0x3a0>)
 8000bce:	6018      	str	r0, [r3, #0]
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <main+0x3a4>)
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f004 fdd1 	bl	800577c <osMessageQueueNew>
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <main+0x3a8>)
 8000bdc:	6018      	str	r0, [r3, #0]
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000bde:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <main+0x3ac>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	4825      	ldr	r0, [pc, #148]	; (8000c78 <main+0x3b0>)
 8000be4:	f004 faf0 	bl	80051c8 <osThreadNew>
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <main+0x3b4>)
 8000bea:	6018      	str	r0, [r3, #0]
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8000bec:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <main+0x3b8>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4824      	ldr	r0, [pc, #144]	; (8000c84 <main+0x3bc>)
 8000bf2:	f004 fae9 	bl	80051c8 <osThreadNew>
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x3c0>)
 8000bf8:	6018      	str	r0, [r3, #0]
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 8000bfa:	4a24      	ldr	r2, [pc, #144]	; (8000c8c <main+0x3c4>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4824      	ldr	r0, [pc, #144]	; (8000c90 <main+0x3c8>)
 8000c00:	f004 fae2 	bl	80051c8 <osThreadNew>
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <main+0x3cc>)
 8000c06:	6018      	str	r0, [r3, #0]
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 8000c08:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <main+0x3d0>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4823      	ldr	r0, [pc, #140]	; (8000c9c <main+0x3d4>)
 8000c0e:	f004 fadb 	bl	80051c8 <osThreadNew>
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <main+0x3d8>)
 8000c14:	6018      	str	r0, [r3, #0]
  notificationFlag = osEventFlagsNew(NULL);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f004 fb3c 	bl	8005294 <osEventFlagsNew>
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <main+0x3dc>)
 8000c1e:	6018      	str	r0, [r3, #0]
  notificationFlag2 = osEventFlagsNew(NULL);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f004 fb37 	bl	8005294 <osEventFlagsNew>
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <main+0x3e0>)
 8000c28:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c2a:	f004 faa5 	bl	8005178 <osKernelStart>
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <main+0x366>
 8000c30:	b672      	cpsid	i
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <main+0x36a>
 8000c34:	b672      	cpsid	i
 8000c36:	e7fe      	b.n	8000c36 <main+0x36e>
 8000c38:	b672      	cpsid	i
 8000c3a:	e7fe      	b.n	8000c3a <main+0x372>
 8000c3c:	b672      	cpsid	i
 8000c3e:	e7fe      	b.n	8000c3e <main+0x376>
 8000c40:	b672      	cpsid	i
 8000c42:	e7fe      	b.n	8000c42 <main+0x37a>
 8000c44:	b672      	cpsid	i
 8000c46:	e7fe      	b.n	8000c46 <main+0x37e>
 8000c48:	b672      	cpsid	i
 8000c4a:	e7fe      	b.n	8000c4a <main+0x382>
 8000c4c:	b672      	cpsid	i
 8000c4e:	e7fe      	b.n	8000c4e <main+0x386>
 8000c50:	b672      	cpsid	i
 8000c52:	e7fe      	b.n	8000c52 <main+0x38a>
 8000c54:	b672      	cpsid	i
 8000c56:	e7fe      	b.n	8000c56 <main+0x38e>
 8000c58:	b672      	cpsid	i
 8000c5a:	e7fe      	b.n	8000c5a <main+0x392>
 8000c5c:	b672      	cpsid	i
 8000c5e:	e7fe      	b.n	8000c5e <main+0x396>
 8000c60:	b672      	cpsid	i
 8000c62:	e7fe      	b.n	8000c62 <main+0x39a>
 8000c64:	b672      	cpsid	i
 8000c66:	e7fe      	b.n	8000c66 <main+0x39e>
 8000c68:	200004c8 	.word	0x200004c8
 8000c6c:	080099a4 	.word	0x080099a4
 8000c70:	200004e8 	.word	0x200004e8
 8000c74:	08009678 	.word	0x08009678
 8000c78:	0800060d 	.word	0x0800060d
 8000c7c:	20000114 	.word	0x20000114
 8000c80:	080096c0 	.word	0x080096c0
 8000c84:	080006e1 	.word	0x080006e1
 8000c88:	2000011c 	.word	0x2000011c
 8000c8c:	0800969c 	.word	0x0800969c
 8000c90:	08000739 	.word	0x08000739
 8000c94:	20000118 	.word	0x20000118
 8000c98:	080096e4 	.word	0x080096e4
 8000c9c:	08000d9d 	.word	0x08000d9d
 8000ca0:	20000120 	.word	0x20000120
 8000ca4:	200004cc 	.word	0x200004cc
 8000ca8:	200004d0 	.word	0x200004d0

08000cac <swapp>:
	if(cual_apunto == 1){	//Escritura en el buffer PING y lectura en el PONG
 8000cac:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <swapp+0xc4>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d017      	beq.n	8000ce6 <swapp+0x3a>
		puntero_lectura  = buffer_ping;
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <swapp+0xc8>)
 8000cb8:	4a2f      	ldr	r2, [pc, #188]	; (8000d78 <swapp+0xcc>)
 8000cba:	601a      	str	r2, [r3, #0]
		puntero_escritura = buffer_pong;
 8000cbc:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <swapp+0xd0>)
 8000cbe:	4a30      	ldr	r2, [pc, #192]	; (8000d80 <swapp+0xd4>)
 8000cc0:	601a      	str	r2, [r3, #0]
				if(veces == 1){
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <swapp+0xd8>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d03a      	beq.n	8000d42 <swapp+0x96>
				else if(veces == 0){
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <swapp+0xd8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d140      	bne.n	8000d58 <swapp+0xac>
					puntero_lectura = buffer_ping + resto;
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <swapp+0xdc>)
 8000cd8:	881a      	ldrh	r2, [r3, #0]
 8000cda:	b292      	uxth	r2, r2
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <swapp+0xcc>)
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a24      	ldr	r2, [pc, #144]	; (8000d74 <swapp+0xc8>)
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4770      	bx	lr
		puntero_escritura = buffer_ping;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <swapp+0xd0>)
 8000ce8:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <swapp+0xcc>)
 8000cea:	601a      	str	r2, [r3, #0]
		puntero_lectura = buffer_pong;
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <swapp+0xc8>)
 8000cee:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <swapp+0xd4>)
 8000cf0:	601a      	str	r2, [r3, #0]
				if(veces == 1){
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <swapp+0xd8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b25b      	sxtb	r3, r3
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d00b      	beq.n	8000d14 <swapp+0x68>
				else if(veces == 0){
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <swapp+0xd8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	b993      	cbnz	r3, 8000d2a <swapp+0x7e>
					puntero_final_lectura = buffer_pong + resto;
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <swapp+0xdc>)
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	b292      	uxth	r2, r2
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <swapp+0xd4>)
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <swapp+0xe0>)
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4770      	bx	lr
					puntero_final_escritura = buffer_ping + resto;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <swapp+0xdc>)
 8000d16:	881a      	ldrh	r2, [r3, #0]
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <swapp+0xcc>)
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <swapp+0xe4>)
 8000d20:	6013      	str	r3, [r2, #0]
					puntero_final_lectura = buffer_pong + TAMANO;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <swapp+0xe0>)
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <swapp+0xe8>)
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	4770      	bx	lr
				else if(veces > 1){
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <swapp+0xd8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	dd1c      	ble.n	8000d6e <swapp+0xc2>
					puntero_final_escritura = buffer_ping + TAMANO;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <swapp+0xe4>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <swapp+0xec>)
 8000d38:	601a      	str	r2, [r3, #0]
					puntero_final_lectura = buffer_pong + TAMANO;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <swapp+0xe0>)
 8000d3c:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <swapp+0xe8>)
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	4770      	bx	lr
					puntero_final_escritura = buffer_pong + resto;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <swapp+0xdc>)
 8000d44:	881a      	ldrh	r2, [r3, #0]
 8000d46:	b292      	uxth	r2, r2
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <swapp+0xd4>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <swapp+0xe4>)
 8000d4e:	6013      	str	r3, [r2, #0]
					puntero_final_lectura = buffer_ping + TAMANO;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <swapp+0xe0>)
 8000d52:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <swapp+0xec>)
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	4770      	bx	lr
				else if(veces > 1){
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <swapp+0xd8>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	dd05      	ble.n	8000d6e <swapp+0xc2>
					puntero_final_escritura = buffer_pong + TAMANO;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <swapp+0xe4>)
 8000d64:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <swapp+0xe8>)
 8000d66:	601a      	str	r2, [r3, #0]
					puntero_final_lectura = buffer_ping + TAMANO;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <swapp+0xe0>)
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <swapp+0xec>)
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	4770      	bx	lr
 8000d70:	20000324 	.word	0x20000324
 8000d74:	200004e4 	.word	0x200004e4
 8000d78:	20000124 	.word	0x20000124
 8000d7c:	200004d8 	.word	0x200004d8
 8000d80:	20000224 	.word	0x20000224
 8000d84:	20000008 	.word	0x20000008
 8000d88:	200004ec 	.word	0x200004ec
 8000d8c:	200004e0 	.word	0x200004e0
 8000d90:	200004dc 	.word	0x200004dc
 8000d94:	20000324 	.word	0x20000324
 8000d98:	20000224 	.word	0x20000224

08000d9c <entrySonido>:
{
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cual_apunto = 1;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <entrySonido+0xa4>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
	swapp();
 8000da4:	f7ff ff82 	bl	8000cac <swapp>
	resto = (TAMANO_ARCHIVO - veces*TAMANO);
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <entrySonido+0xa8>)
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	b252      	sxtb	r2, r2
 8000dae:	f240 237a 	movw	r3, #634	; 0x27a
 8000db2:	eba3 2302 	sub.w	r3, r3, r2, lsl #8
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <entrySonido+0xac>)
 8000dba:	8013      	strh	r3, [r2, #0]
	  osSemaphoreAcquire(mySem01Handle, osWaitForever);
 8000dbc:	4e23      	ldr	r6, [pc, #140]	; (8000e4c <entrySonido+0xb0>)
				  if(veces > 1){
 8000dbe:	4d21      	ldr	r5, [pc, #132]	; (8000e44 <entrySonido+0xa8>)
						  *puntero_escritura = audio_disparo[i + offset*((uint16_t)TAMANO)];
 8000dc0:	4c23      	ldr	r4, [pc, #140]	; (8000e50 <entrySonido+0xb4>)
 8000dc2:	e006      	b.n	8000dd2 <entrySonido+0x36>
				  else if(veces == 1){			//Se lee el resto
 8000dc4:	782b      	ldrb	r3, [r5, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d01c      	beq.n	8000e06 <entrySonido+0x6a>
				  offset++;
 8000dcc:	7823      	ldrb	r3, [r4, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	7023      	strb	r3, [r4, #0]
	  osSemaphoreAcquire(mySem01Handle, osWaitForever);
 8000dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd6:	6830      	ldr	r0, [r6, #0]
 8000dd8:	f004 fc4e 	bl	8005678 <osSemaphoreAcquire>
				  if(veces > 1){
 8000ddc:	782b      	ldrb	r3, [r5, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	ddef      	ble.n	8000dc4 <entrySonido+0x28>
 8000de4:	2300      	movs	r3, #0
						  *puntero_escritura = audio_disparo[i + offset*((uint16_t)TAMANO)];
 8000de6:	491b      	ldr	r1, [pc, #108]	; (8000e54 <entrySonido+0xb8>)
 8000de8:	4f1b      	ldr	r7, [pc, #108]	; (8000e58 <entrySonido+0xbc>)
 8000dea:	6808      	ldr	r0, [r1, #0]
 8000dec:	7822      	ldrb	r2, [r4, #0]
 8000dee:	eb07 2202 	add.w	r2, r7, r2, lsl #8
 8000df2:	5cd2      	ldrb	r2, [r2, r3]
 8000df4:	7002      	strb	r2, [r0, #0]
						  puntero_escritura++;
 8000df6:	680a      	ldr	r2, [r1, #0]
 8000df8:	3201      	adds	r2, #1
 8000dfa:	600a      	str	r2, [r1, #0]
					  for(uint16_t i=0; i<TAMANO; i++){
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e02:	d1f2      	bne.n	8000dea <entrySonido+0x4e>
 8000e04:	e7e2      	b.n	8000dcc <entrySonido+0x30>
					  for(uint16_t i=0; i<resto; i++){
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <entrySonido+0xac>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0dd      	beq.n	8000dcc <entrySonido+0x30>
 8000e10:	2300      	movs	r3, #0
						  *puntero_escritura = audio_disparo[i + offset*((uint16_t)TAMANO)];
 8000e12:	4910      	ldr	r1, [pc, #64]	; (8000e54 <entrySonido+0xb8>)
 8000e14:	f8df c040 	ldr.w	ip, [pc, #64]	; 8000e58 <entrySonido+0xbc>
					  for(uint16_t i=0; i<resto; i++){
 8000e18:	4f0b      	ldr	r7, [pc, #44]	; (8000e48 <entrySonido+0xac>)
						  *puntero_escritura = audio_disparo[i + offset*((uint16_t)TAMANO)];
 8000e1a:	6808      	ldr	r0, [r1, #0]
 8000e1c:	7822      	ldrb	r2, [r4, #0]
 8000e1e:	fa1f fe83 	uxth.w	lr, r3
 8000e22:	eb0c 2202 	add.w	r2, ip, r2, lsl #8
 8000e26:	f812 200e 	ldrb.w	r2, [r2, lr]
 8000e2a:	7002      	strb	r2, [r0, #0]
						  puntero_escritura++;
 8000e2c:	680a      	ldr	r2, [r1, #0]
 8000e2e:	3201      	adds	r2, #1
 8000e30:	600a      	str	r2, [r1, #0]
					  for(uint16_t i=0; i<resto; i++){
 8000e32:	883a      	ldrh	r2, [r7, #0]
 8000e34:	b292      	uxth	r2, r2
 8000e36:	3301      	adds	r3, #1
 8000e38:	b298      	uxth	r0, r3
 8000e3a:	4282      	cmp	r2, r0
 8000e3c:	d8ed      	bhi.n	8000e1a <entrySonido+0x7e>
 8000e3e:	e7c5      	b.n	8000dcc <entrySonido+0x30>
 8000e40:	20000324 	.word	0x20000324
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200004ec 	.word	0x200004ec
 8000e4c:	200004c8 	.word	0x200004c8
 8000e50:	200004d4 	.word	0x200004d4
 8000e54:	200004d8 	.word	0x200004d8
 8000e58:	08009708 	.word	0x08009708

08000e5c <HAL_TIM_PeriodElapsedCallback>:
{
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	4604      	mov	r4, r0
  if (htim->Instance == TIM4) {
 8000e60:	6802      	ldr	r2, [r0, #0]
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d004      	beq.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM3) {
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d003      	beq.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8000e70:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000e72:	f001 fc5d 	bl	8002730 <HAL_IncTick>
 8000e76:	e7f7      	b.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0xc>
		TIM2->CCR1 = *puntero_lectura;
 8000e78:	4c1e      	ldr	r4, [pc, #120]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000e86:	634a      	str	r2, [r1, #52]	; 0x34
		puntero_lectura++;
 8000e88:	6023      	str	r3, [r4, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8e:	481a      	ldr	r0, [pc, #104]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e90:	f002 f908 	bl	80030a4 <HAL_GPIO_TogglePin>
		 if(puntero_lectura == puntero_final_lectura){
 8000e94:	6822      	ldr	r2, [r4, #0]
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d1e8      	bne.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0x14>
				 cual_apunto = !cual_apunto;
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ea0:	7813      	ldrb	r3, [r2, #0]
 8000ea2:	fab3 f383 	clz	r3, r3
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	7013      	strb	r3, [r2, #0]
				 veces--;
 8000eaa:	4c16      	ldr	r4, [pc, #88]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000eac:	7823      	ldrb	r3, [r4, #0]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	7023      	strb	r3, [r4, #0]
				 swapp();
 8000eb4:	f7ff fefa 	bl	8000cac <swapp>
				 if(veces < 0 ){
 8000eb8:	7823      	ldrb	r3, [r4, #0]
 8000eba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ebe:	d104      	bne.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x6e>
				 osSemaphoreRelease (mySem01Handle);
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	f004 fc1c 	bl	8005700 <osSemaphoreRelease>
}
 8000ec8:	e7d2      	b.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0x14>
						HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ece:	f004 f8b7 	bl	8005040 <HAL_TIM_PWM_Stop>
						HAL_TIM_Base_Stop_IT(&htim3);
 8000ed2:	480f      	ldr	r0, [pc, #60]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000ed4:	f003 fd62 	bl	800499c <HAL_TIM_Base_Stop_IT>
						offset = 0;
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
						cual_apunto = 1;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
						swapp();
 8000ee4:	f7ff fee2 	bl	8000cac <swapp>
 8000ee8:	e7ea      	b.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000eea:	bf00      	nop
 8000eec:	40000800 	.word	0x40000800
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	200004e4 	.word	0x200004e4
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	200004e0 	.word	0x200004e0
 8000f00:	20000324 	.word	0x20000324
 8000f04:	20000008 	.word	0x20000008
 8000f08:	200004c8 	.word	0x200004c8
 8000f0c:	20000434 	.word	0x20000434
 8000f10:	2000047c 	.word	0x2000047c
 8000f14:	200004d4 	.word	0x200004d4

08000f18 <getPuntajes>:

puntajes_t *getPuntajes(uint8_t indice){

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
}
 8000f18:	4b01      	ldr	r3, [pc, #4]	; (8000f20 <getPuntajes+0x8>)
 8000f1a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000f1e:	4770      	bx	lr
 8000f20:	200004f0 	.word	0x200004f0

08000f24 <Write_Memoria>:

void Write_Memoria(uint16_t address, uint8_t value){
 8000f24:	b530      	push	{r4, r5, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	f88d 1007 	strb.w	r1, [sp, #7]

	uint8_t data[3];
	data[0] = WRITE;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1] = address>>8;
 8000f32:	0a03      	lsrs	r3, r0, #8
 8000f34:	f88d 300d 	strb.w	r3, [sp, #13]
	data[2] = address;
 8000f38:	f88d 000e 	strb.w	r0, [sp, #14]
	//data[4] = value;

	uint8_t wren = WREN;
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	f88d 300b 	strb.w	r3, [sp, #11]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000f42:	4c17      	ldr	r4, [pc, #92]	; (8000fa0 <Write_Memoria+0x7c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	2120      	movs	r1, #32
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f002 f8a5 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &wren, 1, 100);  // write data to register
 8000f4e:	4d15      	ldr	r5, [pc, #84]	; (8000fa4 <Write_Memoria+0x80>)
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	2201      	movs	r2, #1
 8000f54:	f10d 010b 	add.w	r1, sp, #11
 8000f58:	4628      	mov	r0, r5
 8000f5a:	f003 f9a3 	bl	80042a4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2120      	movs	r1, #32
 8000f62:	4620      	mov	r0, r4
 8000f64:	f002 f898 	bl	8003098 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f001 fbf3 	bl	8002754 <HAL_Delay>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	4620      	mov	r0, r4
 8000f74:	f002 f890 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // write data to register
 8000f78:	2364      	movs	r3, #100	; 0x64
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	a903      	add	r1, sp, #12
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f003 f990 	bl	80042a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit (&hspi1, &value, 1, 100);  // write data to register
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	2201      	movs	r2, #1
 8000f88:	f10d 0107 	add.w	r1, sp, #7
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	f003 f989 	bl	80042a4 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000f92:	2201      	movs	r2, #1
 8000f94:	2120      	movs	r1, #32
 8000f96:	4620      	mov	r0, r4
 8000f98:	f002 f87e 	bl	8003098 <HAL_GPIO_WritePin>
}
 8000f9c:	b005      	add	sp, #20
 8000f9e:	bd30      	pop	{r4, r5, pc}
 8000fa0:	40010c00 	.word	0x40010c00
 8000fa4:	200003dc 	.word	0x200003dc

08000fa8 <Read_memoria>:


uint8_t Read_memoria(uint16_t address)
{
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	b082      	sub	sp, #8
	uint8_t data_rec;
	uint8_t data[3];
	data[0] = READ;
 8000fac:	2603      	movs	r6, #3
 8000fae:	f88d 6004 	strb.w	r6, [sp, #4]
	data[1] = address>>8;
 8000fb2:	0a03      	lsrs	r3, r0, #8
 8000fb4:	f88d 3005 	strb.w	r3, [sp, #5]
	data[2] = address;
 8000fb8:	f88d 0006 	strb.w	r0, [sp, #6]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the pin low
 8000fbc:	4c0e      	ldr	r4, [pc, #56]	; (8000ff8 <Read_memoria+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f002 f868 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // send address
 8000fc8:	4d0c      	ldr	r5, [pc, #48]	; (8000ffc <Read_memoria+0x54>)
 8000fca:	2364      	movs	r3, #100	; 0x64
 8000fcc:	4632      	mov	r2, r6
 8000fce:	a901      	add	r1, sp, #4
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f003 f967 	bl	80042a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, &data_rec, 1, 100);  // receive 6 bytes data
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f10d 0107 	add.w	r1, sp, #7
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f003 fb62 	bl	80046a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the pin high
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f002 f855 	bl	8003098 <HAL_GPIO_WritePin>

	return data_rec;
}
 8000fee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd70      	pop	{r4, r5, r6, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40010c00 	.word	0x40010c00
 8000ffc:	200003dc 	.word	0x200003dc

08001000 <memoriaInit>:



void memoriaInit(){
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b085      	sub	sp, #20
 8001006:	2700      	movs	r7, #0
		uint8_t puntaje_lsb;
		uint8_t puntaje_msb;
		//uint8_t byte_dumb;


		buff_nombre[0]  = Read_memoria(address);
 8001008:	4638      	mov	r0, r7
 800100a:	f7ff ffcd 	bl	8000fa8 <Read_memoria>
		HAL_Delay(3);
 800100e:	2003      	movs	r0, #3
 8001010:	f001 fba0 	bl	8002754 <HAL_Delay>

		strcpy(buff_nombre, "      ");
 8001014:	4b6e      	ldr	r3, [pc, #440]	; (80011d0 <memoriaInit+0x1d0>)
 8001016:	e893 0003 	ldmia.w	r3, {r0, r1}
 800101a:	9002      	str	r0, [sp, #8]
 800101c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8001020:	0c09      	lsrs	r1, r1, #16
 8001022:	f88d 100e 	strb.w	r1, [sp, #14]
 8001026:	2501      	movs	r5, #1
 8001028:	463e      	mov	r6, r7
		uint8_t permiso = true;
 800102a:	46a9      	mov	r9, r5
		uint8_t j = 0;
 800102c:	46b8      	mov	r8, r7
				HAL_Delay(3);

				switch(i){

				case 7:
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 800102e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80011d4 <memoriaInit+0x1d4>
						}
						else if((i>=24 && i<30)){
							strcpy(getPuntajes(3)->nombre, buff_nombre);
						}
						else if((i>=32 && i<38)){
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8001032:	f10a 0320 	add.w	r3, sl, #32
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	e00b      	b.n	8001052 <memoriaInit+0x52>
				puntaje_msb = Read_memoria(address);
 800103a:	f7ff ffb5 	bl	8000fa8 <Read_memoria>
 800103e:	4607      	mov	r7, r0
				HAL_Delay(3);
 8001040:	2003      	movs	r0, #3
 8001042:	f001 fb87 	bl	8002754 <HAL_Delay>
			}
			i++;
			address++;
			//HAL_Delay(3);

		}while(i != 40);
 8001046:	b2eb      	uxtb	r3, r5
 8001048:	2b28      	cmp	r3, #40	; 0x28
 800104a:	d05a      	beq.n	8001102 <memoriaInit+0x102>
 800104c:	3601      	adds	r6, #1
 800104e:	3501      	adds	r5, #1
 8001050:	b2ad      	uxth	r5, r5
 8001052:	b2f4      	uxtb	r4, r6
 8001054:	b2b0      	uxth	r0, r6
			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 8001056:	2c06      	cmp	r4, #6
 8001058:	d0ef      	beq.n	800103a <memoriaInit+0x3a>
 800105a:	2c07      	cmp	r4, #7
 800105c:	f000 80a9 	beq.w	80011b2 <memoriaInit+0x1b2>
 8001060:	f1a4 030e 	sub.w	r3, r4, #14
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b19      	cmp	r3, #25
 8001068:	d80a      	bhi.n	8001080 <memoriaInit+0x80>
 800106a:	f1a4 020e 	sub.w	r2, r4, #14
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	2301      	movs	r3, #1
 8001072:	4093      	lsls	r3, r2
 8001074:	f013 3f02 	tst.w	r3, #33686018	; 0x2020202
 8001078:	d113      	bne.n	80010a2 <memoriaInit+0xa2>
 800107a:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 800107e:	d1dc      	bne.n	800103a <memoriaInit+0x3a>
				if( (buff_nombre[j] != '\0') && permiso==true){
 8001080:	f8cd 8000 	str.w	r8, [sp]
 8001084:	f108 0310 	add.w	r3, r8, #16
 8001088:	446b      	add	r3, sp
 800108a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800108e:	b113      	cbz	r3, 8001096 <memoriaInit+0x96>
 8001090:	f1b9 0f01 	cmp.w	r9, #1
 8001094:	d038      	beq.n	8001108 <memoriaInit+0x108>
					Read_memoria(address);
 8001096:	f7ff ff87 	bl	8000fa8 <Read_memoria>
					HAL_Delay(3);
 800109a:	2003      	movs	r0, #3
 800109c:	f001 fb5a 	bl	8002754 <HAL_Delay>
 80010a0:	e7d1      	b.n	8001046 <memoriaInit+0x46>
				puntaje_lsb = Read_memoria(address);
 80010a2:	f7ff ff81 	bl	8000fa8 <Read_memoria>
 80010a6:	4681      	mov	r9, r0
				HAL_Delay(3);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f001 fb53 	bl	8002754 <HAL_Delay>
				switch(i){
 80010ae:	3c07      	subs	r4, #7
 80010b0:	2c20      	cmp	r4, #32
 80010b2:	d87a      	bhi.n	80011aa <memoriaInit+0x1aa>
 80010b4:	e8df f004 	tbb	[pc, r4]
 80010b8:	79797983 	.word	0x79797983
 80010bc:	79797979 	.word	0x79797979
 80010c0:	79797911 	.word	0x79797911
 80010c4:	79797979 	.word	0x79797979
 80010c8:	79797916 	.word	0x79797916
 80010cc:	79797979 	.word	0x79797979
 80010d0:	7979791b 	.word	0x7979791b
 80010d4:	79797979 	.word	0x79797979
 80010d8:	20          	.byte	0x20
 80010d9:	00          	.byte	0x00
					getPuntajes(1)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010da:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 80010de:	f8aa 900e 	strh.w	r9, [sl, #14]
					break;
 80010e2:	e070      	b.n	80011c6 <memoriaInit+0x1c6>
					getPuntajes(2)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010e4:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 80010e8:	f8aa 9016 	strh.w	r9, [sl, #22]
					break;
 80010ec:	e06b      	b.n	80011c6 <memoriaInit+0x1c6>
					getPuntajes(3)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010ee:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 80010f2:	f8aa 901e 	strh.w	r9, [sl, #30]
					break;
 80010f6:	e066      	b.n	80011c6 <memoriaInit+0x1c6>
					getPuntajes(4)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010f8:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <memoriaInit+0x1d4>)
 80010fe:	f8a3 9026 	strh.w	r9, [r3, #38]	; 0x26



}
 8001102:	b005      	add	sp, #20
 8001104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					buff_nombre[j]  = Read_memoria(address);
 8001108:	f7ff ff4e 	bl	8000fa8 <Read_memoria>
 800110c:	4683      	mov	fp, r0
 800110e:	9b00      	ldr	r3, [sp, #0]
 8001110:	3310      	adds	r3, #16
 8001112:	446b      	add	r3, sp
 8001114:	f803 0c08 	strb.w	r0, [r3, #-8]
					HAL_Delay(3);
 8001118:	2003      	movs	r0, #3
 800111a:	f001 fb1b 	bl	8002754 <HAL_Delay>
					if(buff_nombre[j] == '\0'){
 800111e:	f1bb 0f00 	cmp.w	fp, #0
 8001122:	d13d      	bne.n	80011a0 <memoriaInit+0x1a0>
						if((i>=0 && i<6)){
 8001124:	2c25      	cmp	r4, #37	; 0x25
 8001126:	d818      	bhi.n	800115a <memoriaInit+0x15a>
 8001128:	e8df f004 	tbb	[pc, r4]
 800112c:	13131313 	.word	0x13131313
 8001130:	17171313 	.word	0x17171313
 8001134:	23232323 	.word	0x23232323
 8001138:	17172323 	.word	0x17172323
 800113c:	29292929 	.word	0x29292929
 8001140:	17172929 	.word	0x17172929
 8001144:	2f2f2f2f 	.word	0x2f2f2f2f
 8001148:	17172f2f 	.word	0x17172f2f
 800114c:	35353535 	.word	0x35353535
 8001150:	3535      	.short	0x3535
							strcpy(getPuntajes(0)->nombre, buff_nombre);
 8001152:	a902      	add	r1, sp, #8
 8001154:	4650      	mov	r0, sl
 8001156:	f007 f81e 	bl	8008196 <strcpy>
						strcpy(buff_nombre, "      ");
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <memoriaInit+0x1d0>)
 800115c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001160:	9002      	str	r0, [sp, #8]
 8001162:	f8ad 100c 	strh.w	r1, [sp, #12]
 8001166:	0c09      	lsrs	r1, r1, #16
 8001168:	f88d 100e 	strb.w	r1, [sp, #14]
						permiso = false;
 800116c:	46d9      	mov	r9, fp
						j = 0;
 800116e:	46d8      	mov	r8, fp
 8001170:	e769      	b.n	8001046 <memoriaInit+0x46>
							strcpy(getPuntajes(1)->nombre, buff_nombre);
 8001172:	a902      	add	r1, sp, #8
 8001174:	f10a 0008 	add.w	r0, sl, #8
 8001178:	f007 f80d 	bl	8008196 <strcpy>
 800117c:	e7ed      	b.n	800115a <memoriaInit+0x15a>
							strcpy(getPuntajes(2)->nombre, buff_nombre);
 800117e:	a902      	add	r1, sp, #8
 8001180:	f10a 0010 	add.w	r0, sl, #16
 8001184:	f007 f807 	bl	8008196 <strcpy>
 8001188:	e7e7      	b.n	800115a <memoriaInit+0x15a>
							strcpy(getPuntajes(3)->nombre, buff_nombre);
 800118a:	a902      	add	r1, sp, #8
 800118c:	f10a 0018 	add.w	r0, sl, #24
 8001190:	f007 f801 	bl	8008196 <strcpy>
 8001194:	e7e1      	b.n	800115a <memoriaInit+0x15a>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8001196:	a902      	add	r1, sp, #8
 8001198:	9801      	ldr	r0, [sp, #4]
 800119a:	f006 fffc 	bl	8008196 <strcpy>
 800119e:	e7dc      	b.n	800115a <memoriaInit+0x15a>
						j++;
 80011a0:	f108 0801 	add.w	r8, r8, #1
 80011a4:	fa5f f888 	uxtb.w	r8, r8
 80011a8:	e74d      	b.n	8001046 <memoriaInit+0x46>
				switch(i){
 80011aa:	2700      	movs	r7, #0
 80011ac:	f04f 0901 	mov.w	r9, #1
 80011b0:	e749      	b.n	8001046 <memoriaInit+0x46>
				puntaje_lsb = Read_memoria(address);
 80011b2:	f7ff fef9 	bl	8000fa8 <Read_memoria>
 80011b6:	4681      	mov	r9, r0
				HAL_Delay(3);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f001 facb 	bl	8002754 <HAL_Delay>
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80011be:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 80011c2:	f8aa 9006 	strh.w	r9, [sl, #6]
						j = 0;
 80011c6:	2700      	movs	r7, #0
 80011c8:	f04f 0901 	mov.w	r9, #1
 80011cc:	e73e      	b.n	800104c <memoriaInit+0x4c>
 80011ce:	bf00      	nop
 80011d0:	080099bc 	.word	0x080099bc
 80011d4:	200004f0 	.word	0x200004f0

080011d8 <writeNuevosPuntajes>:



void writeNuevosPuntajes(uint8_t cambios){
 80011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011dc:	b08f      	sub	sp, #60	; 0x3c
 80011de:	9003      	str	r0, [sp, #12]
			break;
		case 31:
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje && 0xFF;
			break;
		case 38:
			buff_nuevosPuntajes[i] = getPuntajes(4)->puntaje >>8;
 80011e0:	4b86      	ldr	r3, [pc, #536]	; (80013fc <writeNuevosPuntajes+0x224>)
 80011e2:	f8b3 c026 	ldrh.w	ip, [r3, #38]	; 0x26
 80011e6:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje && 0xFF;
 80011ea:	8bde      	ldrh	r6, [r3, #30]
 80011ec:	f1b6 0900 	subs.w	r9, r6, #0
 80011f0:	bf18      	it	ne
 80011f2:	f04f 0901 	movne.w	r9, #1
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje >>8;
 80011f6:	0a36      	lsrs	r6, r6, #8
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje && 0xFF;
 80011f8:	8add      	ldrh	r5, [r3, #22]
 80011fa:	f1b5 0800 	subs.w	r8, r5, #0
 80011fe:	bf18      	it	ne
 8001200:	f04f 0801 	movne.w	r8, #1
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje >>8;
 8001204:	0a2d      	lsrs	r5, r5, #8
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje && 0xFF;
 8001206:	f8b3 e00e 	ldrh.w	lr, [r3, #14]
 800120a:	f1be 0700 	subs.w	r7, lr, #0
 800120e:	bf18      	it	ne
 8001210:	2701      	movne	r7, #1
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje >>8;
 8001212:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje && 0xFF;
 8001216:	88db      	ldrh	r3, [r3, #6]
 8001218:	1e1a      	subs	r2, r3, #0
 800121a:	bf18      	it	ne
 800121c:	2201      	movne	r2, #1
 800121e:	9202      	str	r2, [sp, #8]
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje >>8;
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	a804      	add	r0, sp, #16
 8001226:	2201      	movs	r2, #1
	uint8_t k=0;
 8001228:	2100      	movs	r1, #0
			buff_nuevosPuntajes[i] = getPuntajes(4)->nombre[k];
 800122a:	4c74      	ldr	r4, [pc, #464]	; (80013fc <writeNuevosPuntajes+0x224>)
 800122c:	e07f      	b.n	800132e <writeNuevosPuntajes+0x156>
			buff_nuevosPuntajes[i] = getPuntajes(0)->nombre[k];
 800122e:	f814 b001 	ldrb.w	fp, [r4, r1]
 8001232:	f880 b000 	strb.w	fp, [r0]
			k++;
 8001236:	3101      	adds	r1, #1
 8001238:	b2c9      	uxtb	r1, r1
		switch(i){
 800123a:	3b06      	subs	r3, #6
 800123c:	2b21      	cmp	r3, #33	; 0x21
 800123e:	d871      	bhi.n	8001324 <writeNuevosPuntajes+0x14c>
 8001240:	e8df f003 	tbb	[pc, r3]
 8001244:	70703a35 	.word	0x70703a35
 8001248:	70707070 	.word	0x70707070
 800124c:	7070423e 	.word	0x7070423e
 8001250:	70707070 	.word	0x70707070
 8001254:	70704945 	.word	0x70704945
 8001258:	70707070 	.word	0x70707070
 800125c:	7070504c 	.word	0x7070504c
 8001260:	70707070 	.word	0x70707070
 8001264:	5753      	.short	0x5753
			buff_nuevosPuntajes[i] = getPuntajes(1)->nombre[k];
 8001266:	eb04 0b01 	add.w	fp, r4, r1
 800126a:	f89b b008 	ldrb.w	fp, [fp, #8]
 800126e:	f880 b000 	strb.w	fp, [r0]
			k++;
 8001272:	3101      	adds	r1, #1
 8001274:	b2c9      	uxtb	r1, r1
 8001276:	e7e0      	b.n	800123a <writeNuevosPuntajes+0x62>
			buff_nuevosPuntajes[i] = getPuntajes(2)->nombre[k];
 8001278:	eb04 0b01 	add.w	fp, r4, r1
 800127c:	f89b b010 	ldrb.w	fp, [fp, #16]
 8001280:	f880 b000 	strb.w	fp, [r0]
			k++;
 8001284:	3101      	adds	r1, #1
 8001286:	b2c9      	uxtb	r1, r1
 8001288:	e7d7      	b.n	800123a <writeNuevosPuntajes+0x62>
			buff_nuevosPuntajes[i] = getPuntajes(3)->nombre[k];
 800128a:	eb04 0b01 	add.w	fp, r4, r1
 800128e:	f89b b018 	ldrb.w	fp, [fp, #24]
 8001292:	f880 b000 	strb.w	fp, [r0]
			k++;
 8001296:	3101      	adds	r1, #1
 8001298:	b2c9      	uxtb	r1, r1
 800129a:	e7ce      	b.n	800123a <writeNuevosPuntajes+0x62>
			buff_nuevosPuntajes[i] = getPuntajes(4)->nombre[k];
 800129c:	eb04 0b01 	add.w	fp, r4, r1
 80012a0:	f89b b020 	ldrb.w	fp, [fp, #32]
 80012a4:	f880 b000 	strb.w	fp, [r0]
			k++;
 80012a8:	3101      	adds	r1, #1
 80012aa:	b2c9      	uxtb	r1, r1
 80012ac:	e7c5      	b.n	800123a <writeNuevosPuntajes+0x62>
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje >>8;
 80012ae:	9b01      	ldr	r3, [sp, #4]
 80012b0:	f88d 3016 	strb.w	r3, [sp, #22]
			k = 0;
 80012b4:	2100      	movs	r1, #0
			break;
 80012b6:	e037      	b.n	8001328 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje && 0xFF;
 80012b8:	9b02      	ldr	r3, [sp, #8]
 80012ba:	f88d 3017 	strb.w	r3, [sp, #23]
			break;
 80012be:	e033      	b.n	8001328 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje >>8;
 80012c0:	f88d e01e 	strb.w	lr, [sp, #30]
			k = 0;
 80012c4:	2100      	movs	r1, #0
			break;
 80012c6:	e02f      	b.n	8001328 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje && 0xFF;
 80012c8:	f88d 701f 	strb.w	r7, [sp, #31]
			break;
 80012cc:	e02c      	b.n	8001328 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje >>8;
 80012ce:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
			k = 0;
 80012d2:	2100      	movs	r1, #0
			break;
 80012d4:	e028      	b.n	8001328 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje && 0xFF;
 80012d6:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
			break;
 80012da:	e025      	b.n	8001328 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje >>8;
 80012dc:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
			k = 0;
 80012e0:	2100      	movs	r1, #0
			break;
 80012e2:	e021      	b.n	8001328 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje && 0xFF;
 80012e4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
			break;
 80012e8:	e01e      	b.n	8001328 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(4)->puntaje >>8;
 80012ea:	f88d a036 	strb.w	sl, [sp, #54]	; 0x36
			k = 0;
 80012ee:	2100      	movs	r1, #0
			break;
 80012f0:	e01a      	b.n	8001328 <writeNuevosPuntajes+0x150>
		case 39:
			buff_nuevosPuntajes[i] = getPuntajes(4)->puntaje && 0xFF;
 80012f2:	f1bc 0c00 	subs.w	ip, ip, #0
 80012f6:	bf18      	it	ne
 80012f8:	f04f 0c01 	movne.w	ip, #1
 80012fc:	f88d c037 	strb.w	ip, [sp, #55]	; 0x37
	//Ahora sí se realiza la escritura.
	//La escritura se realizará siempre que se realice mas de un cambio en las posiciones de los puntajes.
	//La reescritura de la posicion 5 (getPuntajes(4)) siempre se realizará.


		if(cambios > 1){
 8001300:	9b03      	ldr	r3, [sp, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d968      	bls.n	80013d8 <writeNuevosPuntajes+0x200>
 8001306:	f10d 050f 	add.w	r5, sp, #15

			address = MEMORIA_ADDRESS;
 800130a:	2400      	movs	r4, #0

			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 800130c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff fe07 	bl	8000f24 <Write_Memoria>
				address++;
 8001316:	3401      	adds	r4, #1
 8001318:	b2a4      	uxth	r4, r4
			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 800131a:	2c28      	cmp	r4, #40	; 0x28
 800131c:	d1f6      	bne.n	800130c <writeNuevosPuntajes+0x134>

			}

		}

}
 800131e:	b00f      	add	sp, #60	; 0x3c
 8001320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 8001324:	2a27      	cmp	r2, #39	; 0x27
 8001326:	d8eb      	bhi.n	8001300 <writeNuevosPuntajes+0x128>
 8001328:	3201      	adds	r2, #1
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	3001      	adds	r0, #1
 800132e:	1e53      	subs	r3, r2, #1
 8001330:	b2db      	uxtb	r3, r3
		if(i>=0 && i<6){
 8001332:	2b25      	cmp	r3, #37	; 0x25
 8001334:	d881      	bhi.n	800123a <writeNuevosPuntajes+0x62>
 8001336:	f20f 0b08 	addw	fp, pc, #8
 800133a:	f85b f023 	ldr.w	pc, [fp, r3, lsl #2]
 800133e:	bf00      	nop
 8001340:	0800122f 	.word	0x0800122f
 8001344:	0800122f 	.word	0x0800122f
 8001348:	0800122f 	.word	0x0800122f
 800134c:	0800122f 	.word	0x0800122f
 8001350:	0800122f 	.word	0x0800122f
 8001354:	0800122f 	.word	0x0800122f
 8001358:	0800123b 	.word	0x0800123b
 800135c:	0800123b 	.word	0x0800123b
 8001360:	08001267 	.word	0x08001267
 8001364:	08001267 	.word	0x08001267
 8001368:	08001267 	.word	0x08001267
 800136c:	08001267 	.word	0x08001267
 8001370:	08001267 	.word	0x08001267
 8001374:	08001267 	.word	0x08001267
 8001378:	0800123b 	.word	0x0800123b
 800137c:	0800123b 	.word	0x0800123b
 8001380:	08001279 	.word	0x08001279
 8001384:	08001279 	.word	0x08001279
 8001388:	08001279 	.word	0x08001279
 800138c:	08001279 	.word	0x08001279
 8001390:	08001279 	.word	0x08001279
 8001394:	08001279 	.word	0x08001279
 8001398:	0800123b 	.word	0x0800123b
 800139c:	0800123b 	.word	0x0800123b
 80013a0:	0800128b 	.word	0x0800128b
 80013a4:	0800128b 	.word	0x0800128b
 80013a8:	0800128b 	.word	0x0800128b
 80013ac:	0800128b 	.word	0x0800128b
 80013b0:	0800128b 	.word	0x0800128b
 80013b4:	0800128b 	.word	0x0800128b
 80013b8:	0800123b 	.word	0x0800123b
 80013bc:	0800123b 	.word	0x0800123b
 80013c0:	0800129d 	.word	0x0800129d
 80013c4:	0800129d 	.word	0x0800129d
 80013c8:	0800129d 	.word	0x0800129d
 80013cc:	0800129d 	.word	0x0800129d
 80013d0:	0800129d 	.word	0x0800129d
 80013d4:	0800129d 	.word	0x0800129d
			Write_Memoria(address, buff_nuevosPuntajes[32]);
 80013d8:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80013dc:	2020      	movs	r0, #32
 80013de:	f7ff fda1 	bl	8000f24 <Write_Memoria>
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 80013e2:	f10d 052f 	add.w	r5, sp, #47	; 0x2f
			address = MEMORIA_ADDRESS + 32;
 80013e6:	2420      	movs	r4, #32
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 80013e8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80013ec:	4620      	mov	r0, r4
 80013ee:	f7ff fd99 	bl	8000f24 <Write_Memoria>
				address++;
 80013f2:	3401      	adds	r4, #1
 80013f4:	b2a4      	uxth	r4, r4
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 80013f6:	2c28      	cmp	r4, #40	; 0x28
 80013f8:	d1f6      	bne.n	80013e8 <writeNuevosPuntajes+0x210>
 80013fa:	e790      	b.n	800131e <writeNuevosPuntajes+0x146>
 80013fc:	200004f0 	.word	0x200004f0

08001400 <menuInit>:

	return &menu;
}


void menuInit(){
 8001400:	b508      	push	{r3, lr}

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8001402:	f000 feab 	bl	800215c <SSD1306_Init>
	SSD1306_Clear();
 8001406:	f000 fea1 	bl	800214c <SSD1306_Clear>
	SSD1306_UpdateScreen();
 800140a:	f000 fe79 	bl	8002100 <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 800140e:	f7fe feb7 	bl	8000180 <playerInit>
	InvaderInit();
 8001412:	f7fe fedf 	bl	80001d4 <InvaderInit>
	disparoInit();
 8001416:	f7fe ffe9 	bl	80003ec <disparoInit>

	//Se inicializan las dificultades
	getDificultad()->velocidad_horizontal = 8;
 800141a:	f7fe fea5 	bl	8000168 <getDificultad>
 800141e:	2308      	movs	r3, #8
 8001420:	7003      	strb	r3, [r0, #0]
	getDificultad()->velocidad_bajada = 1;
 8001422:	f7fe fea1 	bl	8000168 <getDificultad>
 8001426:	2301      	movs	r3, #1
 8001428:	7043      	strb	r3, [r0, #1]
	getDificultad()->velocidad_disparo_aliens = 3;
 800142a:	f7fe fe9d 	bl	8000168 <getDificultad>
 800142e:	2303      	movs	r3, #3
 8001430:	7083      	strb	r3, [r0, #2]


	//Se inicializa el cursor de la pantalla principal.
	getMenu()->menuActual =  guardar_nombre;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <menuInit+0x4c>)
 8001434:	2204      	movs	r2, #4
 8001436:	701a      	strb	r2, [r3, #0]
	//getMenu()->menuActual = menu_principal;
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001438:	2226      	movs	r2, #38	; 0x26
 800143a:	705a      	strb	r2, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800143c:	2209      	movs	r2, #9
 800143e:	711a      	strb	r2, [r3, #4]
	getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001440:	221b      	movs	r2, #27
 8001442:	715a      	strb	r2, [r3, #5]
	getMenu()->GuardarNombre.indice = 0;
 8001444:	2200      	movs	r2, #0
 8001446:	731a      	strb	r2, [r3, #12]

}
 8001448:	bd08      	pop	{r3, pc}
 800144a:	bf00      	nop
 800144c:	20000518 	.word	0x20000518

08001450 <menuActualizar>:

void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8001450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001454:	b08d      	sub	sp, #52	; 0x34
 8001456:	9003      	str	r0, [sp, #12]
 8001458:	460d      	mov	r5, r1
 800145a:	4616      	mov	r6, r2


	switch(getMenu()->menuActual){
 800145c:	4b71      	ldr	r3, [pc, #452]	; (8001624 <menuActualizar+0x1d4>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b05      	cmp	r3, #5
 8001462:	f200 81a0 	bhi.w	80017a6 <menuActualizar+0x356>
 8001466:	e8df f013 	tbh	[pc, r3, lsl #1]
 800146a:	0006      	.short	0x0006
 800146c:	00780046 	.word	0x00780046
 8001470:	00f1009a 	.word	0x00f1009a
 8001474:	02af      	.short	0x02af

//--------------------------------------------------------------MENU PRINCIPAL-----------------------------------------------------------------------------
	case menu_principal:

		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 8001476:	2401      	movs	r4, #1
 8001478:	9401      	str	r4, [sp, #4]
 800147a:	2320      	movs	r3, #32
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2340      	movs	r3, #64	; 0x40
 8001480:	4a69      	ldr	r2, [pc, #420]	; (8001628 <menuActualizar+0x1d8>)
 8001482:	2100      	movs	r1, #0
 8001484:	2023      	movs	r0, #35	; 0x23
 8001486:	f000 fb3b 	bl	8001b00 <SSD1306_DrawBitmap>

		SSD1306_GotoXY(45, 35);
 800148a:	2123      	movs	r1, #35	; 0x23
 800148c:	202d      	movs	r0, #45	; 0x2d
 800148e:	f000 fb83 	bl	8001b98 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8001492:	4f66      	ldr	r7, [pc, #408]	; (800162c <menuActualizar+0x1dc>)
 8001494:	4622      	mov	r2, r4
 8001496:	4639      	mov	r1, r7
 8001498:	4865      	ldr	r0, [pc, #404]	; (8001630 <menuActualizar+0x1e0>)
 800149a:	f000 fbcf 	bl	8001c3c <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 800149e:	212d      	movs	r1, #45	; 0x2d
 80014a0:	4608      	mov	r0, r1
 80014a2:	f000 fb79 	bl	8001b98 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80014a6:	4622      	mov	r2, r4
 80014a8:	4639      	mov	r1, r7
 80014aa:	4862      	ldr	r0, [pc, #392]	; (8001634 <menuActualizar+0x1e4>)
 80014ac:	f000 fbc6 	bl	8001c3c <SSD1306_Puts>


		if(y == arriba){
 80014b0:	b9bd      	cbnz	r5, 80014e2 <menuActualizar+0x92>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <menuActualizar+0x1d4>)
 80014b4:	2226      	movs	r2, #38	; 0x26
 80014b6:	705a      	strb	r2, [r3, #1]
		}
		else if(y == abajo){
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
		}

		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 80014b8:	2301      	movs	r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	4959      	ldr	r1, [pc, #356]	; (8001624 <menuActualizar+0x1d4>)
 80014be:	7849      	ldrb	r1, [r1, #1]
 80014c0:	2027      	movs	r0, #39	; 0x27
 80014c2:	f000 fcbb 	bl	8001e3c <SSD1306_DrawCircle>


		switch(boton){
 80014c6:	2e01      	cmp	r6, #1
 80014c8:	f040 816d 	bne.w	80017a6 <menuActualizar+0x356>
		case true:
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <menuActualizar+0x1d4>)
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	2b26      	cmp	r3, #38	; 0x26
 80014d2:	d00c      	beq.n	80014ee <menuActualizar+0x9e>
				getMenu()->menuActual = juego;
			}
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 80014d4:	2b30      	cmp	r3, #48	; 0x30
 80014d6:	f040 8166 	bne.w	80017a6 <menuActualizar+0x356>
				getMenu()->menuActual = puntajes;
 80014da:	4b52      	ldr	r3, [pc, #328]	; (8001624 <menuActualizar+0x1d4>)
 80014dc:	2203      	movs	r2, #3
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e161      	b.n	80017a6 <menuActualizar+0x356>
		else if(y == abajo){
 80014e2:	2d01      	cmp	r5, #1
 80014e4:	d1e8      	bne.n	80014b8 <menuActualizar+0x68>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 80014e6:	4b4f      	ldr	r3, [pc, #316]	; (8001624 <menuActualizar+0x1d4>)
 80014e8:	2230      	movs	r2, #48	; 0x30
 80014ea:	705a      	strb	r2, [r3, #1]
 80014ec:	e7e4      	b.n	80014b8 <menuActualizar+0x68>
				getMenu()->menuActual = juego;
 80014ee:	4b4d      	ldr	r3, [pc, #308]	; (8001624 <menuActualizar+0x1d4>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e157      	b.n	80017a6 <menuActualizar+0x356>
//--------------------------------------------------------------  JUEGO -----------------------------------------------------------------------------

	case juego:

		//Se grafican el player, aliens y disparo.
		plotPlayer(x, getPlayer());
 80014f6:	f7fe fe2b 	bl	8000150 <getPlayer>
 80014fa:	4601      	mov	r1, r0
 80014fc:	9803      	ldr	r0, [sp, #12]
 80014fe:	f7fe fe45 	bl	800018c <plotPlayer>
		plotAliens();
 8001502:	f7fe fe87 	bl	8000214 <plotAliens>
		disparoAliens();
 8001506:	f7ff f817 	bl	8000538 <disparoAliens>

		disparar();
 800150a:	f7fe ff7d 	bl	8000408 <disparar>

		if( getDisparoAliens()->numero_disparos == 0){
 800150e:	f7fe fe27 	bl	8000160 <getDisparoAliens>
 8001512:	78c3      	ldrb	r3, [r0, #3]
 8001514:	b913      	cbnz	r3, 800151c <menuActualizar+0xcc>

			getMenu()->menuActual = progresion_niveles;
 8001516:	4b43      	ldr	r3, [pc, #268]	; (8001624 <menuActualizar+0x1d4>)
 8001518:	2202      	movs	r2, #2
 800151a:	701a      	strb	r2, [r3, #0]
		}


		//Prender led si se apretó el boton
		if(boton == true){
 800151c:	2e01      	cmp	r6, #1
 800151e:	f040 8142 	bne.w	80017a6 <menuActualizar+0x356>
			//xTimenow = xTaskGetTickCount();

			//if(xTimenow - tiempo_boton_juego > pdMS_TO_TICKS(100)){

				//tiempo_boton_juego = xTaskGetTickCount();
				getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 8001522:	f7fe fe19 	bl	8000158 <getDisparo>
 8001526:	78c4      	ldrb	r4, [r0, #3]
 8001528:	f7fe fe16 	bl	8000158 <getDisparo>
 800152c:	3401      	adds	r4, #1
 800152e:	70c4      	strb	r4, [r0, #3]

				if(getDisparo()->numero_disparos == 1){
 8001530:	f7fe fe12 	bl	8000158 <getDisparo>
 8001534:	78c3      	ldrb	r3, [r0, #3]
 8001536:	2b01      	cmp	r3, #1
 8001538:	f040 8135 	bne.w	80017a6 <menuActualizar+0x356>
					  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800153c:	2100      	movs	r1, #0
 800153e:	483e      	ldr	r0, [pc, #248]	; (8001638 <menuActualizar+0x1e8>)
 8001540:	f003 fd1a 	bl	8004f78 <HAL_TIM_PWM_Start>
					  HAL_TIM_Base_Start_IT(&htim3);
 8001544:	483d      	ldr	r0, [pc, #244]	; (800163c <menuActualizar+0x1ec>)
 8001546:	f003 f9f5 	bl	8004934 <HAL_TIM_Base_Start_IT>
					  veces = 4;
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <menuActualizar+0x1f0>)
 800154c:	2204      	movs	r2, #4
 800154e:	701a      	strb	r2, [r3, #0]
					  osSemaphoreRelease (mySem01Handle);
 8001550:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <menuActualizar+0x1f4>)
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	f004 f8d4 	bl	8005700 <osSemaphoreRelease>
 8001558:	e125      	b.n	80017a6 <menuActualizar+0x356>

//-------------------------------------------------------- PROGRESION DE NIVELES ----------------------------------------------------------------

	case progresion_niveles:

		SSD1306_GotoXY(15, 15);
 800155a:	210f      	movs	r1, #15
 800155c:	4608      	mov	r0, r1
 800155e:	f000 fb1b 	bl	8001b98 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJE ACTUAL", &Font_7x10, 1);
 8001562:	2201      	movs	r2, #1
 8001564:	4931      	ldr	r1, [pc, #196]	; (800162c <menuActualizar+0x1dc>)
 8001566:	4838      	ldr	r0, [pc, #224]	; (8001648 <menuActualizar+0x1f8>)
 8001568:	f000 fb68 	bl	8001c3c <SSD1306_Puts>

		//Incremento de la dificultad (Aumento de la velocidad de los aliens y la velocidad de disparo)
		//...

		//Se inicializan las dificultades
		getDificultad()->velocidad_horizontal = 6;
 800156c:	f7fe fdfc 	bl	8000168 <getDificultad>
 8001570:	2306      	movs	r3, #6
 8001572:	7003      	strb	r3, [r0, #0]
		getDificultad()->velocidad_bajada = 2;
 8001574:	f7fe fdf8 	bl	8000168 <getDificultad>
 8001578:	2302      	movs	r3, #2
 800157a:	7043      	strb	r3, [r0, #1]
		getDificultad()->velocidad_disparo_aliens = 3;
 800157c:	f7fe fdf4 	bl	8000168 <getDificultad>
 8001580:	2303      	movs	r3, #3
 8001582:	7083      	strb	r3, [r0, #2]


		//Se REinicializan las posiciones iniciales del player y de los aliens.
		playerInit();
 8001584:	f7fe fdfc 	bl	8000180 <playerInit>
		InvaderInit();
 8001588:	f7fe fe24 	bl	80001d4 <InvaderInit>
		disparoInit();
 800158c:	f7fe ff2e 	bl	80003ec <disparoInit>

		if(y == arriba){
 8001590:	2d00      	cmp	r5, #0
 8001592:	f040 8108 	bne.w	80017a6 <menuActualizar+0x356>

			getMenu()->menuActual = juego;
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <menuActualizar+0x1d4>)
 8001598:	2201      	movs	r2, #1
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	e103      	b.n	80017a6 <menuActualizar+0x356>

//-------------------------------------------------------------- PUNTAJES-----------------------------------------------------------------------------
	case puntajes:

		//Titulo 'Puntajes'
		SSD1306_GotoXY(35, 0);
 800159e:	2100      	movs	r1, #0
 80015a0:	2023      	movs	r0, #35	; 0x23
 80015a2:	f000 faf9 	bl	8001b98 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	4920      	ldr	r1, [pc, #128]	; (800162c <menuActualizar+0x1dc>)
 80015aa:	4822      	ldr	r0, [pc, #136]	; (8001634 <menuActualizar+0x1e4>)
 80015ac:	f000 fb46 	bl	8001c3c <SSD1306_Puts>
 80015b0:	240d      	movs	r4, #13
 80015b2:	2600      	movs	r6, #0

		for(uint8_t j=0; j<5;j++){

			posicion = j*10 + 13;

			SSD1306_GotoXY(15, posicion);
 80015b4:	f04f 090f 	mov.w	r9, #15
			//strcpy(buff_retorno[j], "jdsa");
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 80015b8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800162c <menuActualizar+0x1dc>
 80015bc:	2701      	movs	r7, #1
			SSD1306_GotoXY(15, posicion);
 80015be:	4621      	mov	r1, r4
 80015c0:	4648      	mov	r0, r9
 80015c2:	f000 fae9 	bl	8001b98 <SSD1306_GotoXY>
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 80015c6:	b2f0      	uxtb	r0, r6
 80015c8:	f7ff fca6 	bl	8000f18 <getPuntajes>
 80015cc:	463a      	mov	r2, r7
 80015ce:	4641      	mov	r1, r8
 80015d0:	f000 fb34 	bl	8001c3c <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 80015d4:	3601      	adds	r6, #1
 80015d6:	340a      	adds	r4, #10
 80015d8:	b2a4      	uxth	r4, r4
 80015da:	2e05      	cmp	r6, #5
 80015dc:	d1ef      	bne.n	80015be <menuActualizar+0x16e>
 80015de:	240d      	movs	r4, #13
 80015e0:	2600      	movs	r6, #0
		//Puntuaciones
		for(uint8_t j=0; j<5;j++){

			posicion = j*10 + 13;

			SSD1306_GotoXY(90, posicion);
 80015e2:	f04f 085a 	mov.w	r8, #90	; 0x5a
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 80015e6:	4f11      	ldr	r7, [pc, #68]	; (800162c <menuActualizar+0x1dc>)
			SSD1306_GotoXY(90, posicion);
 80015e8:	4621      	mov	r1, r4
 80015ea:	4640      	mov	r0, r8
 80015ec:	f000 fad4 	bl	8001b98 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 80015f0:	b2f0      	uxtb	r0, r6
 80015f2:	f7ff fc91 	bl	8000f18 <getPuntajes>
 80015f6:	220a      	movs	r2, #10
 80015f8:	a909      	add	r1, sp, #36	; 0x24
 80015fa:	88c0      	ldrh	r0, [r0, #6]
 80015fc:	f006 fbc8 	bl	8007d90 <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	4639      	mov	r1, r7
 8001604:	a809      	add	r0, sp, #36	; 0x24
 8001606:	f000 fb19 	bl	8001c3c <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 800160a:	3601      	adds	r6, #1
 800160c:	340a      	adds	r4, #10
 800160e:	b2a4      	uxth	r4, r4
 8001610:	2e05      	cmp	r6, #5
 8001612:	d1e9      	bne.n	80015e8 <menuActualizar+0x198>
		}


		switch(y){
 8001614:	2d00      	cmp	r5, #0
 8001616:	f040 80c6 	bne.w	80017a6 <menuActualizar+0x356>
		case arriba:
				getMenu()->menuActual = menu_principal;
 800161a:	4b02      	ldr	r3, [pc, #8]	; (8001624 <menuActualizar+0x1d4>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
			break;
 8001620:	e0c1      	b.n	80017a6 <menuActualizar+0x356>
 8001622:	bf00      	nop
 8001624:	20000518 	.word	0x20000518
 8001628:	08009a08 	.word	0x08009a08
 800162c:	20000000 	.word	0x20000000
 8001630:	080099c4 	.word	0x080099c4
 8001634:	080099cc 	.word	0x080099cc
 8001638:	20000434 	.word	0x20000434
 800163c:	2000047c 	.word	0x2000047c
 8001640:	20000008 	.word	0x20000008
 8001644:	200004c8 	.word	0x200004c8
 8001648:	080099d8 	.word	0x080099d8


//-------------------------------------------------------------- GUARDADO DEL NOMBRE-----------------------------------------------------------------------------
	case guardar_nombre:

		char buff_qwerty[] = "qwertyuiop";
 800164c:	4ab0      	ldr	r2, [pc, #704]	; (8001910 <menuActualizar+0x4c0>)
 800164e:	ab06      	add	r3, sp, #24
 8001650:	ca07      	ldmia	r2, {r0, r1, r2}
 8001652:	c303      	stmia	r3!, {r0, r1}
 8001654:	f823 2b02 	strh.w	r2, [r3], #2
 8001658:	0c12      	lsrs	r2, r2, #16
 800165a:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 800165c:	4aad      	ldr	r2, [pc, #692]	; (8001914 <menuActualizar+0x4c4>)
 800165e:	ab09      	add	r3, sp, #36	; 0x24
 8001660:	ca07      	ldmia	r2, {r0, r1, r2}
 8001662:	c303      	stmia	r3!, {r0, r1}
 8001664:	f823 2b02 	strh.w	r2, [r3], #2
 8001668:	0c12      	lsrs	r2, r2, #16
 800166a:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 800166c:	4aaa      	ldr	r2, [pc, #680]	; (8001918 <menuActualizar+0x4c8>)
 800166e:	ab04      	add	r3, sp, #16
 8001670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001674:	e883 0003 	stmia.w	r3, {r0, r1}
		char enter = '<';
		char borrar = 'x';

		uint8_t posicion_x;

		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8001678:	2301      	movs	r3, #1
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	230f      	movs	r3, #15
 800167e:	223c      	movs	r2, #60	; 0x3c
 8001680:	2100      	movs	r1, #0
 8001682:	201e      	movs	r0, #30
 8001684:	f000 fb9d 	bl	8001dc2 <SSD1306_DrawRectangle>
		//SSD1306_GotoXY(43, 5);
		//SSD1306_Puts("capaz", &Font_7x10, 1);


			for(uint8_t i=0;i<10;i++){
 8001688:	f10d 0a18 	add.w	sl, sp, #24
 800168c:	f10d 0924 	add.w	r9, sp, #36	; 0x24
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8001690:	2406      	movs	r4, #6

				posicion_x = i*(12) + 6;

				SSD1306_GotoXY(posicion_x, 23);
 8001692:	f04f 0b17 	mov.w	fp, #23
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 8001696:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800191c <menuActualizar+0x4cc>
 800169a:	2701      	movs	r7, #1
				SSD1306_GotoXY(posicion_x, 23);
 800169c:	4659      	mov	r1, fp
 800169e:	4620      	mov	r0, r4
 80016a0:	f000 fa7a 	bl	8001b98 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 80016a4:	463a      	mov	r2, r7
 80016a6:	4641      	mov	r1, r8
 80016a8:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80016ac:	f000 fa7a 	bl	8001ba4 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 80016b0:	2126      	movs	r1, #38	; 0x26
 80016b2:	4620      	mov	r0, r4
 80016b4:	f000 fa70 	bl	8001b98 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 80016b8:	463a      	mov	r2, r7
 80016ba:	4641      	mov	r1, r8
 80016bc:	f819 0b01 	ldrb.w	r0, [r9], #1
 80016c0:	f000 fa70 	bl	8001ba4 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 80016c4:	340c      	adds	r4, #12
 80016c6:	b2a4      	uxth	r4, r4
 80016c8:	2c7e      	cmp	r4, #126	; 0x7e
 80016ca:	d1e7      	bne.n	800169c <menuActualizar+0x24c>
 80016cc:	f10d 070f 	add.w	r7, sp, #15
 80016d0:	241a      	movs	r4, #26

			for(uint8_t i=0;i<7;i++){

				posicion_x = i*(12) + 26;

				SSD1306_GotoXY(posicion_x, 53);
 80016d2:	f04f 0a35 	mov.w	sl, #53	; 0x35
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 80016d6:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800191c <menuActualizar+0x4cc>
 80016da:	f04f 0801 	mov.w	r8, #1
				SSD1306_GotoXY(posicion_x, 53);
 80016de:	4651      	mov	r1, sl
 80016e0:	4620      	mov	r0, r4
 80016e2:	f000 fa59 	bl	8001b98 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 80016e6:	4642      	mov	r2, r8
 80016e8:	4649      	mov	r1, r9
 80016ea:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 80016ee:	f000 fa59 	bl	8001ba4 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 80016f2:	340c      	adds	r4, #12
 80016f4:	b2a4      	uxth	r4, r4
 80016f6:	2c6e      	cmp	r4, #110	; 0x6e
 80016f8:	d1f1      	bne.n	80016de <menuActualizar+0x28e>
			}

			//BOTON BORRAR
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 80016fa:	2401      	movs	r4, #1
 80016fc:	9400      	str	r4, [sp, #0]
 80016fe:	2310      	movs	r3, #16
 8001700:	461a      	mov	r2, r3
 8001702:	2132      	movs	r1, #50	; 0x32
 8001704:	2003      	movs	r0, #3
 8001706:	f000 fb5c 	bl	8001dc2 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 800170a:	2135      	movs	r1, #53	; 0x35
 800170c:	2008      	movs	r0, #8
 800170e:	f000 fa43 	bl	8001b98 <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 8001712:	4f82      	ldr	r7, [pc, #520]	; (800191c <menuActualizar+0x4cc>)
 8001714:	4622      	mov	r2, r4
 8001716:	4639      	mov	r1, r7
 8001718:	2078      	movs	r0, #120	; 0x78
 800171a:	f000 fa43 	bl	8001ba4 <SSD1306_Putc>

			//BOTON ENTER
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 800171e:	9400      	str	r4, [sp, #0]
 8001720:	2310      	movs	r3, #16
 8001722:	461a      	mov	r2, r3
 8001724:	2132      	movs	r1, #50	; 0x32
 8001726:	206c      	movs	r0, #108	; 0x6c
 8001728:	f000 fb4b 	bl	8001dc2 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 800172c:	2135      	movs	r1, #53	; 0x35
 800172e:	2071      	movs	r0, #113	; 0x71
 8001730:	f000 fa32 	bl	8001b98 <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 8001734:	4622      	mov	r2, r4
 8001736:	4639      	mov	r1, r7
 8001738:	203c      	movs	r0, #60	; 0x3c
 800173a:	f000 fa33 	bl	8001ba4 <SSD1306_Putc>

			//Esto es algo "raro" que hice. En lugar de procesar el eje x y el eje y del joystick a la vez, voy a definir una variable mov
			//la cual solo puede tomar el valor de x o el valor de y, es decir, tomara los valores de (arriba, abajo, der,izq, nulo)

			uint8_t mov;
			switch(y){
 800173e:	2d00      	cmp	r5, #0
 8001740:	f000 8169 	beq.w	8001a16 <menuActualizar+0x5c6>
 8001744:	42a5      	cmp	r5, r4
 8001746:	f000 8150 	beq.w	80019ea <menuActualizar+0x59a>

			int8_t div;


			TickType_t Timenow;
			Timenow = xTaskGetTickCount();
 800174a:	f005 fa71 	bl	8006c30 <xTaskGetTickCount>

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 800174e:	4b74      	ldr	r3, [pc, #464]	; (8001920 <menuActualizar+0x4d0>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	1ac0      	subs	r0, r0, r3
 8001754:	2896      	cmp	r0, #150	; 0x96
 8001756:	d965      	bls.n	8001824 <menuActualizar+0x3d4>
 8001758:	2d04      	cmp	r5, #4
 800175a:	d127      	bne.n	80017ac <menuActualizar+0x35c>
 800175c:	9d03      	ldr	r5, [sp, #12]
					break;
				}

			}

			Timenow = xTaskGetTickCount();
 800175e:	f005 fa67 	bl	8006c30 <xTaskGetTickCount>

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 8001762:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <menuActualizar+0x4d0>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	1ac0      	subs	r0, r0, r3
 8001768:	2864      	cmp	r0, #100	; 0x64
 800176a:	d902      	bls.n	8001772 <menuActualizar+0x322>
 800176c:	9b03      	ldr	r3, [sp, #12]
 800176e:	2b04      	cmp	r3, #4
 8001770:	d15a      	bne.n	8001828 <menuActualizar+0x3d8>
				}

		}


			Timenow = xTaskGetTickCount();
 8001772:	f005 fa5d 	bl	8006c30 <xTaskGetTickCount>

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 8001776:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <menuActualizar+0x4d0>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	1ac0      	subs	r0, r0, r3
 800177c:	2864      	cmp	r0, #100	; 0x64
 800177e:	d902      	bls.n	8001786 <menuActualizar+0x336>
 8001780:	2e00      	cmp	r6, #0
 8001782:	f040 809b 	bne.w	80018bc <menuActualizar+0x46c>




				//Se actualiza el cursor
				SSD1306_DrawFilledCircle(getMenu()->GuardarNombre.posicion_x,  getMenu()->GuardarNombre.posicion_y, 5, 1);
 8001786:	4c66      	ldr	r4, [pc, #408]	; (8001920 <menuActualizar+0x4d0>)
 8001788:	2301      	movs	r3, #1
 800178a:	2205      	movs	r2, #5
 800178c:	7961      	ldrb	r1, [r4, #5]
 800178e:	7920      	ldrb	r0, [r4, #4]
 8001790:	f000 fbef 	bl	8001f72 <SSD1306_DrawFilledCircle>

				//Se actualiza el nombre en el recuadro.
				SSD1306_GotoXY(43, 5);
 8001794:	2105      	movs	r1, #5
 8001796:	202b      	movs	r0, #43	; 0x2b
 8001798:	f000 f9fe 	bl	8001b98 <SSD1306_GotoXY>
				SSD1306_Puts(getMenu()->GuardarNombre.nombre, &Font_7x10, 1);
 800179c:	2201      	movs	r2, #1
 800179e:	495f      	ldr	r1, [pc, #380]	; (800191c <menuActualizar+0x4cc>)
 80017a0:	1da0      	adds	r0, r4, #6
 80017a2:	f000 fa4b 	bl	8001c3c <SSD1306_Puts>
		break;
	default:
		break;
	}

}
 80017a6:	b00d      	add	sp, #52	; 0x34
 80017a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ac:	9d03      	ldr	r5, [sp, #12]
 80017ae:	e13a      	b.n	8001a26 <menuActualizar+0x5d6>
 80017b0:	2d01      	cmp	r5, #1
 80017b2:	d1d4      	bne.n	800175e <menuActualizar+0x30e>
 80017b4:	e125      	b.n	8001a02 <menuActualizar+0x5b2>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 80017b6:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <menuActualizar+0x4d0>)
 80017b8:	221b      	movs	r2, #27
 80017ba:	715a      	strb	r2, [r3, #5]
							break;
 80017bc:	e7cf      	b.n	800175e <menuActualizar+0x30e>
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <menuActualizar+0x4d0>)
 80017c0:	2209      	movs	r2, #9
 80017c2:	711a      	strb	r2, [r3, #4]
 80017c4:	e7cb      	b.n	800175e <menuActualizar+0x30e>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 80017c6:	4b56      	ldr	r3, [pc, #344]	; (8001920 <menuActualizar+0x4d0>)
 80017c8:	2209      	movs	r2, #9
 80017ca:	711a      	strb	r2, [r3, #4]
 80017cc:	e7c7      	b.n	800175e <menuActualizar+0x30e>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 80017ce:	4b54      	ldr	r3, [pc, #336]	; (8001920 <menuActualizar+0x4d0>)
 80017d0:	222a      	movs	r2, #42	; 0x2a
 80017d2:	715a      	strb	r2, [r3, #5]
							break;
 80017d4:	2501      	movs	r5, #1
 80017d6:	e7c2      	b.n	800175e <menuActualizar+0x30e>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 80017d8:	4b51      	ldr	r3, [pc, #324]	; (8001920 <menuActualizar+0x4d0>)
 80017da:	2239      	movs	r2, #57	; 0x39
 80017dc:	715a      	strb	r2, [r3, #5]
							div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 80017de:	791b      	ldrb	r3, [r3, #4]
 80017e0:	3b09      	subs	r3, #9
 80017e2:	b25b      	sxtb	r3, r3
							div = div/GUARDADO_OFFSET_X_CURSOR;
 80017e4:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <menuActualizar+0x4d4>)
 80017e6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ea:	17db      	asrs	r3, r3, #31
 80017ec:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 80017f0:	b25b      	sxtb	r3, r3
							if(div == 0){
 80017f2:	b923      	cbnz	r3, 80017fe <menuActualizar+0x3ae>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 80017f4:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <menuActualizar+0x4d0>)
 80017f6:	220b      	movs	r2, #11
 80017f8:	711a      	strb	r2, [r3, #4]
 80017fa:	2501      	movs	r5, #1
 80017fc:	e7af      	b.n	800175e <menuActualizar+0x30e>
							else if(div == 8 || div == 9){
 80017fe:	f1a3 0208 	sub.w	r2, r3, #8
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	2a01      	cmp	r2, #1
 8001806:	d908      	bls.n	800181a <menuActualizar+0x3ca>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 8001808:	3b01      	subs	r3, #1
 800180a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	331c      	adds	r3, #28
 8001812:	4a43      	ldr	r2, [pc, #268]	; (8001920 <menuActualizar+0x4d0>)
 8001814:	7113      	strb	r3, [r2, #4]
 8001816:	2501      	movs	r5, #1
 8001818:	e7a1      	b.n	800175e <menuActualizar+0x30e>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <menuActualizar+0x4d0>)
 800181c:	2274      	movs	r2, #116	; 0x74
 800181e:	711a      	strb	r2, [r3, #4]
 8001820:	2501      	movs	r5, #1
 8001822:	e79c      	b.n	800175e <menuActualizar+0x30e>
 8001824:	9d03      	ldr	r5, [sp, #12]
 8001826:	e79a      	b.n	800175e <menuActualizar+0x30e>
			getMenu()->GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 8001828:	f005 fa02 	bl	8006c30 <xTaskGetTickCount>
 800182c:	4b3c      	ldr	r3, [pc, #240]	; (8001920 <menuActualizar+0x4d0>)
 800182e:	6118      	str	r0, [r3, #16]
			switch(mov){
 8001830:	2d02      	cmp	r5, #2
 8001832:	d021      	beq.n	8001878 <menuActualizar+0x428>
 8001834:	2d03      	cmp	r5, #3
 8001836:	d19c      	bne.n	8001772 <menuActualizar+0x322>
					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 8001838:	461a      	mov	r2, r3
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	3b0c      	subs	r3, #12
 800183e:	b2db      	uxtb	r3, r3
 8001840:	7113      	strb	r3, [r2, #4]
					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8001842:	7952      	ldrb	r2, [r2, #5]
 8001844:	2a39      	cmp	r2, #57	; 0x39
 8001846:	d005      	beq.n	8001854 <menuActualizar+0x404>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 8001848:	2bfd      	cmp	r3, #253	; 0xfd
 800184a:	d192      	bne.n	8001772 <menuActualizar+0x322>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 800184c:	4b34      	ldr	r3, [pc, #208]	; (8001920 <menuActualizar+0x4d0>)
 800184e:	2275      	movs	r2, #117	; 0x75
 8001850:	711a      	strb	r2, [r3, #4]
 8001852:	e78e      	b.n	8001772 <menuActualizar+0x322>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR) ){
 8001854:	2b10      	cmp	r3, #16
 8001856:	d007      	beq.n	8001868 <menuActualizar+0x418>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 8001858:	2b68      	cmp	r3, #104	; 0x68
 800185a:	d009      	beq.n	8001870 <menuActualizar+0x420>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 800185c:	2bff      	cmp	r3, #255	; 0xff
 800185e:	d188      	bne.n	8001772 <menuActualizar+0x322>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <menuActualizar+0x4d0>)
 8001862:	220b      	movs	r2, #11
 8001864:	711a      	strb	r2, [r3, #4]
 8001866:	e784      	b.n	8001772 <menuActualizar+0x322>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <menuActualizar+0x4d0>)
 800186a:	220b      	movs	r2, #11
 800186c:	711a      	strb	r2, [r3, #4]
 800186e:	e780      	b.n	8001772 <menuActualizar+0x322>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <menuActualizar+0x4d0>)
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	711a      	strb	r2, [r3, #4]
 8001876:	e77c      	b.n	8001772 <menuActualizar+0x322>
					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <menuActualizar+0x4d0>)
 800187a:	7913      	ldrb	r3, [r2, #4]
 800187c:	330c      	adds	r3, #12
 800187e:	b2db      	uxtb	r3, r3
 8001880:	7113      	strb	r3, [r2, #4]
					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8001882:	7952      	ldrb	r2, [r2, #5]
 8001884:	2a39      	cmp	r2, #57	; 0x39
 8001886:	d006      	beq.n	8001896 <menuActualizar+0x446>
						if(getMenu()->GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 8001888:	2b75      	cmp	r3, #117	; 0x75
 800188a:	f67f af72 	bls.w	8001772 <menuActualizar+0x322>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <menuActualizar+0x4d0>)
 8001890:	2209      	movs	r2, #9
 8001892:	711a      	strb	r2, [r3, #4]
 8001894:	e76d      	b.n	8001772 <menuActualizar+0x322>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 8001896:	2b70      	cmp	r3, #112	; 0x70
 8001898:	d008      	beq.n	80018ac <menuActualizar+0x45c>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 800189a:	2b80      	cmp	r3, #128	; 0x80
 800189c:	d00a      	beq.n	80018b4 <menuActualizar+0x464>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 800189e:	2b17      	cmp	r3, #23
 80018a0:	f47f af67 	bne.w	8001772 <menuActualizar+0x322>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <menuActualizar+0x4d0>)
 80018a6:	221c      	movs	r2, #28
 80018a8:	711a      	strb	r2, [r3, #4]
 80018aa:	e762      	b.n	8001772 <menuActualizar+0x322>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <menuActualizar+0x4d0>)
 80018ae:	2274      	movs	r2, #116	; 0x74
 80018b0:	711a      	strb	r2, [r3, #4]
 80018b2:	e75e      	b.n	8001772 <menuActualizar+0x322>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <menuActualizar+0x4d0>)
 80018b6:	220b      	movs	r2, #11
 80018b8:	711a      	strb	r2, [r3, #4]
 80018ba:	e75a      	b.n	8001772 <menuActualizar+0x322>
			getMenu()->GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 80018bc:	f005 f9b8 	bl	8006c30 <xTaskGetTickCount>
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <menuActualizar+0x4d0>)
 80018c2:	6198      	str	r0, [r3, #24]
			if((boton == true) && (getMenu()->GuardarNombre.indice <= 5)){
 80018c4:	2e01      	cmp	r6, #1
 80018c6:	f47f af5e 	bne.w	8001786 <menuActualizar+0x336>
 80018ca:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	f73f af59 	bgt.w	8001786 <menuActualizar+0x336>
						if((getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <menuActualizar+0x4d0>)
 80018d6:	7951      	ldrb	r1, [r2, #5]
 80018d8:	2939      	cmp	r1, #57	; 0x39
 80018da:	d03a      	beq.n	8001952 <menuActualizar+0x502>
							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 80018dc:	7912      	ldrb	r2, [r2, #4]
 80018de:	3a09      	subs	r2, #9
 80018e0:	b252      	sxtb	r2, r2
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <menuActualizar+0x4d4>)
 80018e4:	fb80 4002 	smull	r4, r0, r0, r2
 80018e8:	17d2      	asrs	r2, r2, #31
 80018ea:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 80018ee:	b252      	sxtb	r2, r2
							if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 80018f0:	291b      	cmp	r1, #27
 80018f2:	d019      	beq.n	8001928 <menuActualizar+0x4d8>
							else if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 80018f4:	292a      	cmp	r1, #42	; 0x2a
 80018f6:	f47f af46 	bne.w	8001786 <menuActualizar+0x336>
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_asdf[div];
 80018fa:	4909      	ldr	r1, [pc, #36]	; (8001920 <menuActualizar+0x4d0>)
 80018fc:	18c8      	adds	r0, r1, r3
 80018fe:	3230      	adds	r2, #48	; 0x30
 8001900:	446a      	add	r2, sp
 8001902:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001906:	7182      	strb	r2, [r0, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 8001908:	3301      	adds	r3, #1
 800190a:	730b      	strb	r3, [r1, #12]
 800190c:	e015      	b.n	800193a <menuActualizar+0x4ea>
 800190e:	bf00      	nop
 8001910:	080099e8 	.word	0x080099e8
 8001914:	080099f4 	.word	0x080099f4
 8001918:	08009a00 	.word	0x08009a00
 800191c:	20000000 	.word	0x20000000
 8001920:	20000518 	.word	0x20000518
 8001924:	2aaaaaab 	.word	0x2aaaaaab
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_qwerty[div];
 8001928:	4953      	ldr	r1, [pc, #332]	; (8001a78 <menuActualizar+0x628>)
 800192a:	18c8      	adds	r0, r1, r3
 800192c:	3230      	adds	r2, #48	; 0x30
 800192e:	446a      	add	r2, sp
 8001930:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001934:	7182      	strb	r2, [r0, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 8001936:	3301      	adds	r3, #1
 8001938:	730b      	strb	r3, [r1, #12]
						if(getMenu()->GuardarNombre.indice > 5){
 800193a:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <menuActualizar+0x628>)
 800193c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001940:	2b05      	cmp	r3, #5
 8001942:	f77f af20 	ble.w	8001786 <menuActualizar+0x336>
							getMenu()->GuardarNombre.indice = 5;
 8001946:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <menuActualizar+0x628>)
 8001948:	2205      	movs	r2, #5
 800194a:	731a      	strb	r2, [r3, #12]
							getMenu()->GuardarNombre.nombre[5] = '\0';
 800194c:	2200      	movs	r2, #0
 800194e:	72da      	strb	r2, [r3, #11]
 8001950:	e719      	b.n	8001786 <menuActualizar+0x336>
							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 8001952:	4a49      	ldr	r2, [pc, #292]	; (8001a78 <menuActualizar+0x628>)
 8001954:	7912      	ldrb	r2, [r2, #4]
 8001956:	3a1c      	subs	r2, #28
 8001958:	b252      	sxtb	r2, r2
							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 800195a:	2a00      	cmp	r2, #0
 800195c:	db0e      	blt.n	800197c <menuActualizar+0x52c>
								div = div / GUARDADO_OFFSET_X_CURSOR;
 800195e:	210c      	movs	r1, #12
 8001960:	fb92 f2f1 	sdiv	r2, r2, r1
									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 8001964:	2a07      	cmp	r2, #7
 8001966:	d013      	beq.n	8001990 <menuActualizar+0x540>
										getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_zxc[div];
 8001968:	4943      	ldr	r1, [pc, #268]	; (8001a78 <menuActualizar+0x628>)
 800196a:	18c8      	adds	r0, r1, r3
 800196c:	3230      	adds	r2, #48	; 0x30
 800196e:	446a      	add	r2, sp
 8001970:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001974:	7182      	strb	r2, [r0, #6]
										getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 8001976:	3301      	adds	r3, #1
 8001978:	730b      	strb	r3, [r1, #12]
 800197a:	e7de      	b.n	800193a <menuActualizar+0x4ea>
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice - 1;
 800197c:	3b01      	subs	r3, #1
 800197e:	b25b      	sxtb	r3, r3
 8001980:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001984:	4a3c      	ldr	r2, [pc, #240]	; (8001a78 <menuActualizar+0x628>)
 8001986:	7313      	strb	r3, [r2, #12]
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = '\0';
 8001988:	441a      	add	r2, r3
 800198a:	2300      	movs	r3, #0
 800198c:	7193      	strb	r3, [r2, #6]
 800198e:	e7d4      	b.n	800193a <menuActualizar+0x4ea>
										if((getMenu()->GuardarNombre.indice != 0 )){
 8001990:	2b00      	cmp	r3, #0
 8001992:	f43f aef8 	beq.w	8001786 <menuActualizar+0x336>
											strcpy(getPuntajes(4)->nombre,getMenu()->GuardarNombre.nombre);
 8001996:	2004      	movs	r0, #4
 8001998:	f7ff fabe 	bl	8000f18 <getPuntajes>
 800199c:	4937      	ldr	r1, [pc, #220]	; (8001a7c <menuActualizar+0x62c>)
 800199e:	f006 fbfa 	bl	8008196 <strcpy>
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 80019a2:	2101      	movs	r1, #1
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <menuActualizar+0x630>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	f003 fc9c 	bl	80052e4 <osEventFlagsSet>
										    uint32_t flags = osEventFlagsWait(notificationFlag2, NOTIFICATION_VALUE2, osFlagsWaitAny, osWaitForever);
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	2200      	movs	r2, #0
 80019b2:	2102      	movs	r1, #2
 80019b4:	4833      	ldr	r0, [pc, #204]	; (8001a84 <menuActualizar+0x634>)
 80019b6:	6800      	ldr	r0, [r0, #0]
 80019b8:	f003 fcd2 	bl	8005360 <osEventFlagsWait>
										    if (flags == NOTIFICATION_VALUE2){
 80019bc:	2802      	cmp	r0, #2
 80019be:	d1bc      	bne.n	800193a <menuActualizar+0x4ea>
										    	getMenu()->menuActual = puntajes;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <menuActualizar+0x628>)
 80019c2:	2203      	movs	r2, #3
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e7b8      	b.n	800193a <menuActualizar+0x4ea>
		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 80019c8:	2301      	movs	r3, #1
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2328      	movs	r3, #40	; 0x28
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	4a2d      	ldr	r2, [pc, #180]	; (8001a88 <menuActualizar+0x638>)
 80019d4:	210a      	movs	r1, #10
 80019d6:	200f      	movs	r0, #15
 80019d8:	f000 f892 	bl	8001b00 <SSD1306_DrawBitmap>
		if(y == arriba){
 80019dc:	2d00      	cmp	r5, #0
 80019de:	f47f aee2 	bne.w	80017a6 <menuActualizar+0x356>
			getMenu()->menuActual = guardar_nombre;
 80019e2:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <menuActualizar+0x628>)
 80019e4:	2204      	movs	r2, #4
 80019e6:	701a      	strb	r2, [r3, #0]
}
 80019e8:	e6dd      	b.n	80017a6 <menuActualizar+0x356>
			Timenow = xTaskGetTickCount();
 80019ea:	f005 f921 	bl	8006c30 <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <menuActualizar+0x628>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	1ac0      	subs	r0, r0, r3
 80019f4:	2896      	cmp	r0, #150	; 0x96
 80019f6:	f67f aeb2 	bls.w	800175e <menuActualizar+0x30e>
				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 80019fa:	f005 f919 	bl	8006c30 <xTaskGetTickCount>
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <menuActualizar+0x628>)
 8001a00:	6158      	str	r0, [r3, #20]
					switch(getMenu()->GuardarNombre.posicion_y){
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <menuActualizar+0x628>)
 8001a04:	795b      	ldrb	r3, [r3, #5]
 8001a06:	2b1b      	cmp	r3, #27
 8001a08:	f43f aee1 	beq.w	80017ce <menuActualizar+0x37e>
 8001a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a0e:	f43f aee3 	beq.w	80017d8 <menuActualizar+0x388>
 8001a12:	2501      	movs	r5, #1
 8001a14:	e6a3      	b.n	800175e <menuActualizar+0x30e>
			Timenow = xTaskGetTickCount();
 8001a16:	f005 f90b 	bl	8006c30 <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <menuActualizar+0x628>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	1ac0      	subs	r0, r0, r3
 8001a20:	2896      	cmp	r0, #150	; 0x96
 8001a22:	f67f ae9c 	bls.w	800175e <menuActualizar+0x30e>
				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 8001a26:	f005 f903 	bl	8006c30 <xTaskGetTickCount>
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <menuActualizar+0x628>)
 8001a2c:	6158      	str	r0, [r3, #20]
			switch(mov){
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	f47f aebe 	bne.w	80017b0 <menuActualizar+0x360>
					switch(getMenu()->GuardarNombre.posicion_y){
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <menuActualizar+0x628>)
 8001a36:	795b      	ldrb	r3, [r3, #5]
 8001a38:	2b2a      	cmp	r3, #42	; 0x2a
 8001a3a:	f43f aebc 	beq.w	80017b6 <menuActualizar+0x366>
 8001a3e:	2b39      	cmp	r3, #57	; 0x39
 8001a40:	f47f ae8d 	bne.w	800175e <menuActualizar+0x30e>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <menuActualizar+0x628>)
 8001a46:	222a      	movs	r2, #42	; 0x2a
 8001a48:	715a      	strb	r2, [r3, #5]
							if(getMenu()->GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 8001a4a:	791b      	ldrb	r3, [r3, #4]
 8001a4c:	2b1b      	cmp	r3, #27
 8001a4e:	f67f aeba 	bls.w	80017c6 <menuActualizar+0x376>
								div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 8001a52:	3b1c      	subs	r3, #28
 8001a54:	b25b      	sxtb	r3, r3
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f6ff aeb1 	blt.w	80017be <menuActualizar+0x36e>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <menuActualizar+0x63c>)
 8001a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a62:	17db      	asrs	r3, r3, #31
 8001a64:	ebc3 0362 	rsb	r3, r3, r2, asr #1
									 getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 8001a68:	3301      	adds	r3, #1
 8001a6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	3309      	adds	r3, #9
 8001a72:	4a01      	ldr	r2, [pc, #4]	; (8001a78 <menuActualizar+0x628>)
 8001a74:	7113      	strb	r3, [r2, #4]
 8001a76:	e672      	b.n	800175e <menuActualizar+0x30e>
 8001a78:	20000518 	.word	0x20000518
 8001a7c:	2000051e 	.word	0x2000051e
 8001a80:	200004cc 	.word	0x200004cc
 8001a84:	200004d0 	.word	0x200004d0
 8001a88:	08009b08 	.word	0x08009b08
 8001a8c:	2aaaaaab 	.word	0x2aaaaaab

08001a90 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a90:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a92:	2800      	cmp	r0, #0
 8001a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a98:	bf0c      	ite	eq
 8001a9a:	2100      	moveq	r1, #0
 8001a9c:	21ff      	movne	r1, #255	; 0xff
 8001a9e:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <SSD1306_Fill+0x18>)
 8001aa0:	f006 fafd 	bl	800809e <memset>
}
 8001aa4:	bd08      	pop	{r3, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000053c 	.word	0x2000053c

08001aac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001aac:	287f      	cmp	r0, #127	; 0x7f
 8001aae:	d822      	bhi.n	8001af6 <SSD1306_DrawPixel+0x4a>
		x >= SSD1306_WIDTH ||
 8001ab0:	293f      	cmp	r1, #63	; 0x3f
 8001ab2:	d820      	bhi.n	8001af6 <SSD1306_DrawPixel+0x4a>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <SSD1306_DrawPixel+0x4c>)
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	b17b      	cbz	r3, 8001ada <SSD1306_DrawPixel+0x2e>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001aba:	b182      	cbz	r2, 8001ade <SSD1306_DrawPixel+0x32>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001abc:	b410      	push	{r4}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001abe:	08cb      	lsrs	r3, r1, #3
 8001ac0:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001ac4:	4c0d      	ldr	r4, [pc, #52]	; (8001afc <SSD1306_DrawPixel+0x50>)
 8001ac6:	f001 0107 	and.w	r1, r1, #7
 8001aca:	2201      	movs	r2, #1
 8001acc:	408a      	lsls	r2, r1
 8001ace:	5c23      	ldrb	r3, [r4, r0]
 8001ad0:	ea23 0302 	bic.w	r3, r3, r2
 8001ad4:	5423      	strb	r3, [r4, r0]
	}
}
 8001ad6:	bc10      	pop	{r4}
 8001ad8:	4770      	bx	lr
	if (color == SSD1306_COLOR_WHITE) {
 8001ada:	2a01      	cmp	r2, #1
 8001adc:	d1ee      	bne.n	8001abc <SSD1306_DrawPixel+0x10>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ade:	08cb      	lsrs	r3, r1, #3
 8001ae0:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SSD1306_DrawPixel+0x50>)
 8001ae6:	f001 0107 	and.w	r1, r1, #7
 8001aea:	2301      	movs	r3, #1
 8001aec:	408b      	lsls	r3, r1
 8001aee:	5c11      	ldrb	r1, [r2, r0]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	5413      	strb	r3, [r2, r0]
 8001af4:	4770      	bx	lr
 8001af6:	4770      	bx	lr
 8001af8:	20000534 	.word	0x20000534
 8001afc:	2000053c 	.word	0x2000053c

08001b00 <SSD1306_DrawBitmap>:
{
 8001b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b04:	b085      	sub	sp, #20
 8001b06:	4683      	mov	fp, r0
 8001b08:	4688      	mov	r8, r1
 8001b0a:	9203      	str	r2, [sp, #12]
 8001b0c:	461e      	mov	r6, r3
 8001b0e:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8001b12:	9301      	str	r3, [sp, #4]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001b14:	1df3      	adds	r3, r6, #7
 8001b16:	bf48      	it	mi
 8001b18:	3307      	addmi	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	9302      	str	r3, [sp, #8]
    for(int16_t j=0; j<h; j++, y++)
 8001b1e:	9b01      	ldr	r3, [sp, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	dd36      	ble.n	8001b92 <SSD1306_DrawBitmap+0x92>
 8001b24:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8001b26:	463d      	mov	r5, r7
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001b28:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	e026      	b.n	8001b7e <SSD1306_DrawBitmap+0x7e>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001b30:	461a      	mov	r2, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bfb8      	it	lt
 8001b36:	1dda      	addlt	r2, r3, #7
 8001b38:	f342 02cf 	sbfx	r2, r2, #3, #16
 8001b3c:	f819 5002 	ldrb.w	r5, [r9, r2]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001b40:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001b44:	d10a      	bne.n	8001b5c <SSD1306_DrawBitmap+0x5c>
        for(int16_t i=0; i<w; i++)
 8001b46:	3401      	adds	r4, #1
 8001b48:	b223      	sxth	r3, r4
 8001b4a:	42b3      	cmp	r3, r6
 8001b4c:	d00e      	beq.n	8001b6c <SSD1306_DrawBitmap+0x6c>
            if(i & 7)
 8001b4e:	b29c      	uxth	r4, r3
 8001b50:	f013 0f07 	tst.w	r3, #7
 8001b54:	d0ec      	beq.n	8001b30 <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 8001b56:	006d      	lsls	r5, r5, #1
 8001b58:	b2ed      	uxtb	r5, r5
 8001b5a:	e7f1      	b.n	8001b40 <SSD1306_DrawBitmap+0x40>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001b5c:	eb04 000b 	add.w	r0, r4, fp
 8001b60:	9a00      	ldr	r2, [sp, #0]
 8001b62:	4651      	mov	r1, sl
 8001b64:	b280      	uxth	r0, r0
 8001b66:	f7ff ffa1 	bl	8001aac <SSD1306_DrawPixel>
 8001b6a:	e7ec      	b.n	8001b46 <SSD1306_DrawBitmap+0x46>
    for(int16_t j=0; j<h; j++, y++)
 8001b6c:	3701      	adds	r7, #1
 8001b6e:	b23f      	sxth	r7, r7
 8001b70:	f108 0801 	add.w	r8, r8, #1
 8001b74:	fa0f f888 	sxth.w	r8, r8
 8001b78:	9b01      	ldr	r3, [sp, #4]
 8001b7a:	42bb      	cmp	r3, r7
 8001b7c:	dd09      	ble.n	8001b92 <SSD1306_DrawBitmap+0x92>
        for(int16_t i=0; i<w; i++)
 8001b7e:	2e00      	cmp	r6, #0
 8001b80:	ddf4      	ble.n	8001b6c <SSD1306_DrawBitmap+0x6c>
 8001b82:	2300      	movs	r3, #0
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001b84:	9a03      	ldr	r2, [sp, #12]
 8001b86:	9902      	ldr	r1, [sp, #8]
 8001b88:	fb07 2901 	mla	r9, r7, r1, r2
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001b8c:	fa1f fa88 	uxth.w	sl, r8
 8001b90:	e7dd      	b.n	8001b4e <SSD1306_DrawBitmap+0x4e>
}
 8001b92:	b005      	add	sp, #20
 8001b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001b98 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b98:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <SSD1306_GotoXY+0x8>)
 8001b9a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001b9c:	8059      	strh	r1, [r3, #2]
}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000534 	.word	0x20000534

08001ba4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	9001      	str	r0, [sp, #4]
 8001bac:	4691      	mov	r9, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <SSD1306_Putc+0x94>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	780b      	ldrb	r3, [r1, #0]
 8001bb8:	4413      	add	r3, r2
	if (
 8001bba:	2b7f      	cmp	r3, #127	; 0x7f
 8001bbc:	dc38      	bgt.n	8001c30 <SSD1306_Putc+0x8c>
 8001bbe:	460e      	mov	r6, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <SSD1306_Putc+0x94>)
 8001bc2:	885f      	ldrh	r7, [r3, #2]
 8001bc4:	784b      	ldrb	r3, [r1, #1]
 8001bc6:	18fa      	adds	r2, r7, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001bc8:	2a3f      	cmp	r2, #63	; 0x3f
 8001bca:	dc33      	bgt.n	8001c34 <SSD1306_Putc+0x90>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001bcc:	b333      	cbz	r3, 8001c1c <SSD1306_Putc+0x78>
 8001bce:	f04f 0a00 	mov.w	sl, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001bd2:	f1a0 0b20 	sub.w	fp, r0, #32
 8001bd6:	fb03 a30b 	mla	r3, r3, fp, sl
 8001bda:	6872      	ldr	r2, [r6, #4]
 8001bdc:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001be0:	7833      	ldrb	r3, [r6, #0]
 8001be2:	b1a3      	cbz	r3, 8001c0e <SSD1306_Putc+0x6a>
 8001be4:	9c00      	ldr	r4, [sp, #0]
 8001be6:	2500      	movs	r5, #0
			if ((b << j) & 0x8000) {
 8001be8:	fa08 f305 	lsl.w	r3, r8, r5
 8001bec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001bf0:	bf12      	itee	ne
 8001bf2:	464a      	movne	r2, r9
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bf4:	fab9 f289 	clzeq	r2, r9
 8001bf8:	0952      	lsreq	r2, r2, #5
 8001bfa:	4639      	mov	r1, r7
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff ff55 	bl	8001aac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001c02:	3501      	adds	r5, #1
 8001c04:	3401      	adds	r4, #1
 8001c06:	b2a4      	uxth	r4, r4
 8001c08:	7833      	ldrb	r3, [r6, #0]
 8001c0a:	42ab      	cmp	r3, r5
 8001c0c:	d8ec      	bhi.n	8001be8 <SSD1306_Putc+0x44>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c0e:	f10a 0a01 	add.w	sl, sl, #1
 8001c12:	7873      	ldrb	r3, [r6, #1]
 8001c14:	3701      	adds	r7, #1
 8001c16:	b2bf      	uxth	r7, r7
 8001c18:	4553      	cmp	r3, sl
 8001c1a:	d8dc      	bhi.n	8001bd6 <SSD1306_Putc+0x32>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c1c:	7833      	ldrb	r3, [r6, #0]
 8001c1e:	9a00      	ldr	r2, [sp, #0]
 8001c20:	441a      	add	r2, r3
 8001c22:	4613      	mov	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <SSD1306_Putc+0x94>)
 8001c26:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8001c28:	9801      	ldr	r0, [sp, #4]
}
 8001c2a:	b003      	add	sp, #12
 8001c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001c30:	2000      	movs	r0, #0
 8001c32:	e7fa      	b.n	8001c2a <SSD1306_Putc+0x86>
 8001c34:	2000      	movs	r0, #0
 8001c36:	e7f8      	b.n	8001c2a <SSD1306_Putc+0x86>
 8001c38:	20000534 	.word	0x20000534

08001c3c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	4604      	mov	r4, r0
 8001c40:	460e      	mov	r6, r1
 8001c42:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8001c44:	7800      	ldrb	r0, [r0, #0]
 8001c46:	b158      	cbz	r0, 8001c60 <SSD1306_Puts+0x24>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c48:	462a      	mov	r2, r5
 8001c4a:	4631      	mov	r1, r6
 8001c4c:	f7ff ffaa 	bl	8001ba4 <SSD1306_Putc>
 8001c50:	4603      	mov	r3, r0
 8001c52:	7820      	ldrb	r0, [r4, #0]
 8001c54:	4283      	cmp	r3, r0
 8001c56:	d103      	bne.n	8001c60 <SSD1306_Puts+0x24>
	while (*str) {
 8001c58:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d1f3      	bne.n	8001c48 <SSD1306_Puts+0xc>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001c60:	bd70      	pop	{r4, r5, r6, pc}

08001c62 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001c62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001c6c:	287f      	cmp	r0, #127	; 0x7f
 8001c6e:	bf28      	it	cs
 8001c70:	207f      	movcs	r0, #127	; 0x7f
 8001c72:	4605      	mov	r5, r0
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8001c74:	2a7f      	cmp	r2, #127	; 0x7f
 8001c76:	bf28      	it	cs
 8001c78:	227f      	movcs	r2, #127	; 0x7f
 8001c7a:	4690      	mov	r8, r2
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001c7c:	293f      	cmp	r1, #63	; 0x3f
 8001c7e:	bf28      	it	cs
 8001c80:	213f      	movcs	r1, #63	; 0x3f
 8001c82:	460c      	mov	r4, r1
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001c84:	2b3f      	cmp	r3, #63	; 0x3f
 8001c86:	bf28      	it	cs
 8001c88:	233f      	movcs	r3, #63	; 0x3f
 8001c8a:	9301      	str	r3, [sp, #4]
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001c8c:	4290      	cmp	r0, r2
 8001c8e:	d21c      	bcs.n	8001cca <SSD1306_DrawLine+0x68>
 8001c90:	eba2 0a00 	sub.w	sl, r2, r0
 8001c94:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001c98:	4299      	cmp	r1, r3
 8001c9a:	d326      	bcc.n	8001cea <SSD1306_DrawLine+0x88>
 8001c9c:	9b01      	ldr	r3, [sp, #4]
 8001c9e:	1ae7      	subs	r7, r4, r3
 8001ca0:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001ca2:	4545      	cmp	r5, r8
 8001ca4:	d230      	bcs.n	8001d08 <SSD1306_DrawLine+0xa6>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	9302      	str	r3, [sp, #8]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001cb0:	4557      	cmp	r7, sl
 8001cb2:	da2e      	bge.n	8001d12 <SSD1306_DrawLine+0xb0>
 8001cb4:	eb0a 76da 	add.w	r6, sl, sl, lsr #31
 8001cb8:	1076      	asrs	r6, r6, #1

	if (dx == 0) {
 8001cba:	f1ba 0f00 	cmp.w	sl, #0
 8001cbe:	d02e      	beq.n	8001d1e <SSD1306_DrawLine+0xbc>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d047      	beq.n	8001d54 <SSD1306_DrawLine+0xf2>
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 8001cc4:	f1ca 0b00 	rsb	fp, sl, #0
 8001cc8:	e06c      	b.n	8001da4 <SSD1306_DrawLine+0x142>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001cca:	eba0 0a02 	sub.w	sl, r0, r2
 8001cce:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001cd2:	9b01      	ldr	r3, [sp, #4]
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	d2e1      	bcs.n	8001c9c <SSD1306_DrawLine+0x3a>
 8001cd8:	9b01      	ldr	r3, [sp, #4]
 8001cda:	1a5f      	subs	r7, r3, r1
 8001cdc:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	e7e2      	b.n	8001cb0 <SSD1306_DrawLine+0x4e>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001cea:	9b01      	ldr	r3, [sp, #4]
 8001cec:	1a5f      	subs	r7, r3, r1
 8001cee:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001cf0:	4290      	cmp	r0, r2
 8001cf2:	d203      	bcs.n	8001cfc <SSD1306_DrawLine+0x9a>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	e7d9      	b.n	8001cb0 <SSD1306_DrawLine+0x4e>
	sx = (x0 < x1) ? 1 : -1; 
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001d02:	2301      	movs	r3, #1
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	e7d3      	b.n	8001cb0 <SSD1306_DrawLine+0x4e>
	sx = (x0 < x1) ? 1 : -1; 
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	e7ce      	b.n	8001cb0 <SSD1306_DrawLine+0x4e>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001d12:	eb07 76d7 	add.w	r6, r7, r7, lsr #31
 8001d16:	1076      	asrs	r6, r6, #1
 8001d18:	4276      	negs	r6, r6
 8001d1a:	b236      	sxth	r6, r6
 8001d1c:	e7cd      	b.n	8001cba <SSD1306_DrawLine+0x58>
		if (y1 < y0) {
 8001d1e:	9a01      	ldr	r2, [sp, #4]
 8001d20:	4294      	cmp	r4, r2
 8001d22:	d902      	bls.n	8001d2a <SSD1306_DrawLine+0xc8>
 8001d24:	4623      	mov	r3, r4
			y0 = tmp;
 8001d26:	4614      	mov	r4, r2
			y1 = y0;
 8001d28:	9301      	str	r3, [sp, #4]
		if (x1 < x0) {
 8001d2a:	45a8      	cmp	r8, r5
 8001d2c:	bf28      	it	cs
 8001d2e:	46a8      	movcs	r8, r5
 8001d30:	fa1f f888 	uxth.w	r8, r8
		for (i = y0; i <= y1; i++) {
 8001d34:	b224      	sxth	r4, r4
 8001d36:	9b01      	ldr	r3, [sp, #4]
 8001d38:	461d      	mov	r5, r3
 8001d3a:	429c      	cmp	r4, r3
 8001d3c:	dc26      	bgt.n	8001d8c <SSD1306_DrawLine+0x12a>
			SSD1306_DrawPixel(x0, i, c);
 8001d3e:	b2a4      	uxth	r4, r4
 8001d40:	464a      	mov	r2, r9
 8001d42:	4621      	mov	r1, r4
 8001d44:	4640      	mov	r0, r8
 8001d46:	f7ff feb1 	bl	8001aac <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001d4a:	3401      	adds	r4, #1
 8001d4c:	b224      	sxth	r4, r4
 8001d4e:	42ac      	cmp	r4, r5
 8001d50:	ddf5      	ble.n	8001d3e <SSD1306_DrawLine+0xdc>
 8001d52:	e01b      	b.n	8001d8c <SSD1306_DrawLine+0x12a>
		if (y1 < y0) {
 8001d54:	9b01      	ldr	r3, [sp, #4]
 8001d56:	429c      	cmp	r4, r3
 8001d58:	bf28      	it	cs
 8001d5a:	461c      	movcs	r4, r3
 8001d5c:	b2a4      	uxth	r4, r4
		if (x1 < x0) {
 8001d5e:	4545      	cmp	r5, r8
 8001d60:	d902      	bls.n	8001d68 <SSD1306_DrawLine+0x106>
 8001d62:	462b      	mov	r3, r5
			x0 = tmp;
 8001d64:	4645      	mov	r5, r8
			x1 = x0;
 8001d66:	4698      	mov	r8, r3
		for (i = x0; i <= x1; i++) {
 8001d68:	b22d      	sxth	r5, r5
 8001d6a:	4646      	mov	r6, r8
 8001d6c:	4545      	cmp	r5, r8
 8001d6e:	dc0d      	bgt.n	8001d8c <SSD1306_DrawLine+0x12a>
			SSD1306_DrawPixel(i, y0, c);
 8001d70:	b2ad      	uxth	r5, r5
 8001d72:	464a      	mov	r2, r9
 8001d74:	4621      	mov	r1, r4
 8001d76:	4628      	mov	r0, r5
 8001d78:	f7ff fe98 	bl	8001aac <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001d7c:	3501      	adds	r5, #1
 8001d7e:	b22d      	sxth	r5, r5
 8001d80:	42b5      	cmp	r5, r6
 8001d82:	ddf5      	ble.n	8001d70 <SSD1306_DrawLine+0x10e>
 8001d84:	e002      	b.n	8001d8c <SSD1306_DrawLine+0x12a>
		if (x0 == x1 && y0 == y1) {
 8001d86:	9b01      	ldr	r3, [sp, #4]
 8001d88:	429c      	cmp	r4, r3
 8001d8a:	d112      	bne.n	8001db2 <SSD1306_DrawLine+0x150>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8001d8c:	b005      	add	sp, #20
 8001d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d92:	4633      	mov	r3, r6
		if (e2 < dy) {
 8001d94:	42be      	cmp	r6, r7
 8001d96:	da04      	bge.n	8001da2 <SSD1306_DrawLine+0x140>
			err += dx;
 8001d98:	4453      	add	r3, sl
 8001d9a:	b21b      	sxth	r3, r3
			y0 += sy;
 8001d9c:	9a02      	ldr	r2, [sp, #8]
 8001d9e:	4414      	add	r4, r2
 8001da0:	b2a4      	uxth	r4, r4
			x1 = x0;
 8001da2:	461e      	mov	r6, r3
		SSD1306_DrawPixel(x0, y0, c);
 8001da4:	464a      	mov	r2, r9
 8001da6:	4621      	mov	r1, r4
 8001da8:	4628      	mov	r0, r5
 8001daa:	f7ff fe7f 	bl	8001aac <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001dae:	45a8      	cmp	r8, r5
 8001db0:	d0e9      	beq.n	8001d86 <SSD1306_DrawLine+0x124>
		if (e2 > -dx) {
 8001db2:	455e      	cmp	r6, fp
 8001db4:	dded      	ble.n	8001d92 <SSD1306_DrawLine+0x130>
			err -= dy;
 8001db6:	1bf3      	subs	r3, r6, r7
 8001db8:	b21b      	sxth	r3, r3
			x0 += sx;
 8001dba:	9a03      	ldr	r2, [sp, #12]
 8001dbc:	4415      	add	r5, r2
 8001dbe:	b2ad      	uxth	r5, r5
 8001dc0:	e7e8      	b.n	8001d94 <SSD1306_DrawLine+0x132>

08001dc2 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* Check input parameters */
	if (
 8001dcc:	287f      	cmp	r0, #127	; 0x7f
 8001dce:	d832      	bhi.n	8001e36 <SSD1306_DrawRectangle+0x74>
 8001dd0:	4606      	mov	r6, r0
 8001dd2:	460f      	mov	r7, r1
 8001dd4:	461d      	mov	r5, r3
		x >= SSD1306_WIDTH ||
 8001dd6:	293f      	cmp	r1, #63	; 0x3f
 8001dd8:	d82d      	bhi.n	8001e36 <SSD1306_DrawRectangle+0x74>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001dda:	1883      	adds	r3, r0, r2
 8001ddc:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8001dde:	bfc4      	itt	gt
 8001de0:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
 8001de4:	b292      	uxthgt	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001de6:	194b      	adds	r3, r1, r5
 8001de8:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 8001dea:	bfc4      	itt	gt
 8001dec:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8001df0:	b2ad      	uxthgt	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001df2:	1814      	adds	r4, r2, r0
 8001df4:	b2a4      	uxth	r4, r4
 8001df6:	f8cd 8000 	str.w	r8, [sp]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	f7ff ff30 	bl	8001c62 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001e02:	443d      	add	r5, r7
 8001e04:	b2ad      	uxth	r5, r5
 8001e06:	f8cd 8000 	str.w	r8, [sp]
 8001e0a:	462b      	mov	r3, r5
 8001e0c:	4622      	mov	r2, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4630      	mov	r0, r6
 8001e12:	f7ff ff26 	bl	8001c62 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001e16:	f8cd 8000 	str.w	r8, [sp]
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	4632      	mov	r2, r6
 8001e1e:	4639      	mov	r1, r7
 8001e20:	4630      	mov	r0, r6
 8001e22:	f7ff ff1e 	bl	8001c62 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001e26:	f8cd 8000 	str.w	r8, [sp]
 8001e2a:	462b      	mov	r3, r5
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	4639      	mov	r1, r7
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff ff16 	bl	8001c62 <SSD1306_DrawLine>
}
 8001e36:	b002      	add	sp, #8
 8001e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e3c <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e40:	b085      	sub	sp, #20
 8001e42:	4615      	mov	r5, r2
 8001e44:	9200      	str	r2, [sp, #0]
 8001e46:	461e      	mov	r6, r3
	int16_t f = 1 - r;
 8001e48:	b294      	uxth	r4, r2
 8001e4a:	f1c4 0301 	rsb	r3, r4, #1
 8001e4e:	fa0f f983 	sxth.w	r9, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8001e52:	ebc4 33c4 	rsb	r3, r4, r4, lsl #15
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	9303      	str	r3, [sp, #12]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001e5c:	fa1f fa80 	uxth.w	sl, r0
 8001e60:	fa1f fb81 	uxth.w	fp, r1
 8001e64:	eb04 010b 	add.w	r1, r4, fp
 8001e68:	4632      	mov	r2, r6
 8001e6a:	b289      	uxth	r1, r1
 8001e6c:	4650      	mov	r0, sl
 8001e6e:	f7ff fe1d 	bl	8001aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001e72:	ebab 0104 	sub.w	r1, fp, r4
 8001e76:	4632      	mov	r2, r6
 8001e78:	b289      	uxth	r1, r1
 8001e7a:	4650      	mov	r0, sl
 8001e7c:	f7ff fe16 	bl	8001aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001e80:	eb04 000a 	add.w	r0, r4, sl
 8001e84:	4632      	mov	r2, r6
 8001e86:	4659      	mov	r1, fp
 8001e88:	b280      	uxth	r0, r0
 8001e8a:	f7ff fe0f 	bl	8001aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001e8e:	ebaa 0004 	sub.w	r0, sl, r4
 8001e92:	4632      	mov	r2, r6
 8001e94:	4659      	mov	r1, fp
 8001e96:	b280      	uxth	r0, r0
 8001e98:	f7ff fe08 	bl	8001aac <SSD1306_DrawPixel>

    while (x < y) {
 8001e9c:	2d00      	cmp	r5, #0
 8001e9e:	dd65      	ble.n	8001f6c <SSD1306_DrawCircle+0x130>
	int16_t x = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	e05e      	b.n	8001f64 <SSD1306_DrawCircle+0x128>
        if (f >= 0) {
            y--;
 8001ea6:	9b00      	ldr	r3, [sp, #0]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	9300      	str	r3, [sp, #0]
            ddF_y += 2;
 8001eae:	9b03      	ldr	r3, [sp, #12]
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 8001eb6:	444b      	add	r3, r9
 8001eb8:	fa0f f983 	sxth.w	r9, r3
        }
        x++;
 8001ebc:	9b01      	ldr	r3, [sp, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b29c      	uxth	r4, r3
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	9301      	str	r3, [sp, #4]
        ddF_x += 2;
 8001ec6:	eb09 0944 	add.w	r9, r9, r4, lsl #1
        f += ddF_x;
 8001eca:	f109 0901 	add.w	r9, r9, #1
 8001ece:	fa0f f989 	sxth.w	r9, r9

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001ed2:	eb0a 0304 	add.w	r3, sl, r4
 8001ed6:	b298      	uxth	r0, r3
 8001ed8:	f8bd 5000 	ldrh.w	r5, [sp]
 8001edc:	eb0b 0805 	add.w	r8, fp, r5
 8001ee0:	fa1f f888 	uxth.w	r8, r8
 8001ee4:	4632      	mov	r2, r6
 8001ee6:	4641      	mov	r1, r8
 8001ee8:	9002      	str	r0, [sp, #8]
 8001eea:	f7ff fddf 	bl	8001aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001eee:	ebaa 0704 	sub.w	r7, sl, r4
 8001ef2:	b2bf      	uxth	r7, r7
 8001ef4:	4632      	mov	r2, r6
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	4638      	mov	r0, r7
 8001efa:	f7ff fdd7 	bl	8001aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001efe:	ebab 0805 	sub.w	r8, fp, r5
 8001f02:	fa1f f888 	uxth.w	r8, r8
 8001f06:	4632      	mov	r2, r6
 8001f08:	4641      	mov	r1, r8
 8001f0a:	9802      	ldr	r0, [sp, #8]
 8001f0c:	f7ff fdce 	bl	8001aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001f10:	4632      	mov	r2, r6
 8001f12:	4641      	mov	r1, r8
 8001f14:	4638      	mov	r0, r7
 8001f16:	f7ff fdc9 	bl	8001aac <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001f1a:	eb0a 0705 	add.w	r7, sl, r5
 8001f1e:	b2bf      	uxth	r7, r7
 8001f20:	eb0b 0804 	add.w	r8, fp, r4
 8001f24:	fa1f f888 	uxth.w	r8, r8
 8001f28:	4632      	mov	r2, r6
 8001f2a:	4641      	mov	r1, r8
 8001f2c:	4638      	mov	r0, r7
 8001f2e:	f7ff fdbd 	bl	8001aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001f32:	ebaa 0505 	sub.w	r5, sl, r5
 8001f36:	b2ad      	uxth	r5, r5
 8001f38:	4632      	mov	r2, r6
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f7ff fdb5 	bl	8001aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001f42:	ebab 0404 	sub.w	r4, fp, r4
 8001f46:	b2a4      	uxth	r4, r4
 8001f48:	4632      	mov	r2, r6
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	4638      	mov	r0, r7
 8001f4e:	f7ff fdad 	bl	8001aac <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001f52:	4632      	mov	r2, r6
 8001f54:	4621      	mov	r1, r4
 8001f56:	4628      	mov	r0, r5
 8001f58:	f7ff fda8 	bl	8001aac <SSD1306_DrawPixel>
    while (x < y) {
 8001f5c:	9a00      	ldr	r2, [sp, #0]
 8001f5e:	9b01      	ldr	r3, [sp, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dd03      	ble.n	8001f6c <SSD1306_DrawCircle+0x130>
        if (f >= 0) {
 8001f64:	f1b9 0f00 	cmp.w	r9, #0
 8001f68:	da9d      	bge.n	8001ea6 <SSD1306_DrawCircle+0x6a>
 8001f6a:	e7a7      	b.n	8001ebc <SSD1306_DrawCircle+0x80>
    }
}
 8001f6c:	b005      	add	sp, #20
 8001f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f72 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f76:	b087      	sub	sp, #28
 8001f78:	4690      	mov	r8, r2
 8001f7a:	9203      	str	r2, [sp, #12]
 8001f7c:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 8001f7e:	b295      	uxth	r5, r2
 8001f80:	f1c5 0401 	rsb	r4, r5, #1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8001f84:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001f8e:	fa1f fb80 	uxth.w	fp, r0
 8001f92:	b28f      	uxth	r7, r1
 8001f94:	19e9      	adds	r1, r5, r7
 8001f96:	4652      	mov	r2, sl
 8001f98:	b289      	uxth	r1, r1
 8001f9a:	4658      	mov	r0, fp
 8001f9c:	f7ff fd86 	bl	8001aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001fa0:	1b79      	subs	r1, r7, r5
 8001fa2:	4652      	mov	r2, sl
 8001fa4:	b289      	uxth	r1, r1
 8001fa6:	4658      	mov	r0, fp
 8001fa8:	f7ff fd80 	bl	8001aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001fac:	eb05 060b 	add.w	r6, r5, fp
 8001fb0:	b2b6      	uxth	r6, r6
 8001fb2:	4652      	mov	r2, sl
 8001fb4:	4639      	mov	r1, r7
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	f7ff fd78 	bl	8001aac <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001fbc:	ebab 0505 	sub.w	r5, fp, r5
 8001fc0:	b2ad      	uxth	r5, r5
 8001fc2:	4652      	mov	r2, sl
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	f7ff fd70 	bl	8001aac <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001fcc:	f8cd a000 	str.w	sl, [sp]
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	4632      	mov	r2, r6
 8001fd4:	4639      	mov	r1, r7
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f7ff fe43 	bl	8001c62 <SSD1306_DrawLine>

    while (x < y) {
 8001fdc:	4643      	mov	r3, r8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dd52      	ble.n	8002088 <SSD1306_DrawFilledCircle+0x116>
 8001fe2:	b224      	sxth	r4, r4
	int16_t x = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9304      	str	r3, [sp, #16]
 8001fe8:	e04b      	b.n	8002082 <SSD1306_DrawFilledCircle+0x110>
        if (f >= 0) {
            y--;
 8001fea:	9b03      	ldr	r3, [sp, #12]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	9303      	str	r3, [sp, #12]
            ddF_y += 2;
 8001ff2:	9b05      	ldr	r3, [sp, #20]
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8001ffa:	4423      	add	r3, r4
 8001ffc:	b21c      	sxth	r4, r3
        }
        x++;
 8001ffe:	9b04      	ldr	r3, [sp, #16]
 8002000:	3301      	adds	r3, #1
 8002002:	b29d      	uxth	r5, r3
 8002004:	b21b      	sxth	r3, r3
 8002006:	9304      	str	r3, [sp, #16]
        ddF_x += 2;
 8002008:	eb04 0445 	add.w	r4, r4, r5, lsl #1
        f += ddF_x;
 800200c:	3401      	adds	r4, #1
 800200e:	b224      	sxth	r4, r4

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002010:	ebab 0905 	sub.w	r9, fp, r5
 8002014:	fa1f f989 	uxth.w	r9, r9
 8002018:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 800201c:	19b9      	adds	r1, r7, r6
 800201e:	b289      	uxth	r1, r1
 8002020:	eb0b 0805 	add.w	r8, fp, r5
 8002024:	fa1f f888 	uxth.w	r8, r8
 8002028:	f8cd a000 	str.w	sl, [sp]
 800202c:	460b      	mov	r3, r1
 800202e:	4642      	mov	r2, r8
 8002030:	4648      	mov	r0, r9
 8002032:	f7ff fe16 	bl	8001c62 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002036:	1bb9      	subs	r1, r7, r6
 8002038:	b289      	uxth	r1, r1
 800203a:	f8cd a000 	str.w	sl, [sp]
 800203e:	460b      	mov	r3, r1
 8002040:	464a      	mov	r2, r9
 8002042:	4640      	mov	r0, r8
 8002044:	f7ff fe0d 	bl	8001c62 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002048:	eb0b 0806 	add.w	r8, fp, r6
 800204c:	fa1f f888 	uxth.w	r8, r8
 8002050:	1979      	adds	r1, r7, r5
 8002052:	b289      	uxth	r1, r1
 8002054:	ebab 0606 	sub.w	r6, fp, r6
 8002058:	b2b6      	uxth	r6, r6
 800205a:	f8cd a000 	str.w	sl, [sp]
 800205e:	460b      	mov	r3, r1
 8002060:	4632      	mov	r2, r6
 8002062:	4640      	mov	r0, r8
 8002064:	f7ff fdfd 	bl	8001c62 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002068:	1b79      	subs	r1, r7, r5
 800206a:	b289      	uxth	r1, r1
 800206c:	f8cd a000 	str.w	sl, [sp]
 8002070:	460b      	mov	r3, r1
 8002072:	4632      	mov	r2, r6
 8002074:	4640      	mov	r0, r8
 8002076:	f7ff fdf4 	bl	8001c62 <SSD1306_DrawLine>
    while (x < y) {
 800207a:	9a03      	ldr	r2, [sp, #12]
 800207c:	9b04      	ldr	r3, [sp, #16]
 800207e:	429a      	cmp	r2, r3
 8002080:	dd02      	ble.n	8002088 <SSD1306_DrawFilledCircle+0x116>
        if (f >= 0) {
 8002082:	2c00      	cmp	r4, #0
 8002084:	dab1      	bge.n	8001fea <SSD1306_DrawFilledCircle+0x78>
 8002086:	e7ba      	b.n	8001ffe <SSD1306_DrawFilledCircle+0x8c>
    }
}
 8002088:	b007      	add	sp, #28
 800208a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002090 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002090:	b500      	push	{lr}
 8002092:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8002094:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8002098:	4619      	mov	r1, r3
 800209a:	b173      	cbz	r3, 80020ba <ssd1306_I2C_WriteMulti+0x2a>
 800209c:	f04f 0e00 	mov.w	lr, #0
dt[i+1] = data[i];
 80020a0:	ab02      	add	r3, sp, #8
 80020a2:	eb03 0c0e 	add.w	ip, r3, lr
 80020a6:	f812 300e 	ldrb.w	r3, [r2, lr]
 80020aa:	f88c 3001 	strb.w	r3, [ip, #1]
for(i = 0; i < count; i++)
 80020ae:	f10e 0c01 	add.w	ip, lr, #1
 80020b2:	fa5f fe8c 	uxtb.w	lr, ip
 80020b6:	458e      	cmp	lr, r1
 80020b8:	d3f2      	bcc.n	80020a0 <ssd1306_I2C_WriteMulti+0x10>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80020ba:	1c4b      	adds	r3, r1, #1
 80020bc:	220a      	movs	r2, #10
 80020be:	9200      	str	r2, [sp, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	aa02      	add	r2, sp, #8
 80020c4:	4601      	mov	r1, r0
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <ssd1306_I2C_WriteMulti+0x44>)
 80020c8:	f001 f9ce 	bl	8003468 <HAL_I2C_Master_Transmit>
}
 80020cc:	b043      	add	sp, #268	; 0x10c
 80020ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80020d2:	bf00      	nop
 80020d4:	20000388 	.word	0x20000388

080020d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80020d8:	b500      	push	{lr}
 80020da:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80020dc:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80020e0:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80020e4:	230a      	movs	r3, #10
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2302      	movs	r3, #2
 80020ea:	aa03      	add	r2, sp, #12
 80020ec:	4601      	mov	r1, r0
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <ssd1306_I2C_Write+0x24>)
 80020f0:	f001 f9ba 	bl	8003468 <HAL_I2C_Master_Transmit>
}
 80020f4:	b005      	add	sp, #20
 80020f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80020fa:	bf00      	nop
 80020fc:	20000388 	.word	0x20000388

08002100 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8002100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (m = 0; m < 8; m++) {
 8002104:	4f10      	ldr	r7, [pc, #64]	; (8002148 <SSD1306_UpdateScreen+0x48>)
void SSD1306_UpdateScreen(void) {
 8002106:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002108:	2600      	movs	r6, #0
 800210a:	2578      	movs	r5, #120	; 0x78
		SSD1306_WRITECOMMAND(0x10);
 800210c:	f04f 0810 	mov.w	r8, #16
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002110:	4622      	mov	r2, r4
 8002112:	4631      	mov	r1, r6
 8002114:	4628      	mov	r0, r5
 8002116:	f7ff ffdf 	bl	80020d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800211a:	4632      	mov	r2, r6
 800211c:	4631      	mov	r1, r6
 800211e:	4628      	mov	r0, r5
 8002120:	f7ff ffda 	bl	80020d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002124:	4642      	mov	r2, r8
 8002126:	4631      	mov	r1, r6
 8002128:	4628      	mov	r0, r5
 800212a:	f7ff ffd5 	bl	80020d8 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	463a      	mov	r2, r7
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	4628      	mov	r0, r5
 8002136:	f7ff ffab 	bl	8002090 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800213a:	3401      	adds	r4, #1
 800213c:	b2e4      	uxtb	r4, r4
 800213e:	3780      	adds	r7, #128	; 0x80
 8002140:	2cb8      	cmp	r4, #184	; 0xb8
 8002142:	d1e5      	bne.n	8002110 <SSD1306_UpdateScreen+0x10>
}
 8002144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002148:	2000053c 	.word	0x2000053c

0800214c <SSD1306_Clear>:
{
 800214c:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 800214e:	2000      	movs	r0, #0
 8002150:	f7ff fc9e 	bl	8001a90 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002154:	f7ff ffd4 	bl	8002100 <SSD1306_UpdateScreen>
}
 8002158:	bd08      	pop	{r3, pc}
	...

0800215c <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 800215c:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800215e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002162:	2201      	movs	r2, #1
 8002164:	2178      	movs	r1, #120	; 0x78
 8002166:	4854      	ldr	r0, [pc, #336]	; (80022b8 <SSD1306_Init+0x15c>)
 8002168:	f001 fa82 	bl	8003670 <HAL_I2C_IsDeviceReady>
 800216c:	2800      	cmp	r0, #0
 800216e:	f040 80a1 	bne.w	80022b4 <SSD1306_Init+0x158>
 8002172:	f640 13c4 	movw	r3, #2500	; 0x9c4
	while(p>0)
 8002176:	3b01      	subs	r3, #1
 8002178:	d1fd      	bne.n	8002176 <SSD1306_Init+0x1a>
	SSD1306_WRITECOMMAND(0xAE); //display off
 800217a:	22ae      	movs	r2, #174	; 0xae
 800217c:	2100      	movs	r1, #0
 800217e:	2078      	movs	r0, #120	; 0x78
 8002180:	f7ff ffaa 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002184:	2220      	movs	r2, #32
 8002186:	2100      	movs	r1, #0
 8002188:	2078      	movs	r0, #120	; 0x78
 800218a:	f7ff ffa5 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800218e:	2210      	movs	r2, #16
 8002190:	2100      	movs	r1, #0
 8002192:	2078      	movs	r0, #120	; 0x78
 8002194:	f7ff ffa0 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002198:	22b0      	movs	r2, #176	; 0xb0
 800219a:	2100      	movs	r1, #0
 800219c:	2078      	movs	r0, #120	; 0x78
 800219e:	f7ff ff9b 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80021a2:	22c8      	movs	r2, #200	; 0xc8
 80021a4:	2100      	movs	r1, #0
 80021a6:	2078      	movs	r0, #120	; 0x78
 80021a8:	f7ff ff96 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80021ac:	2200      	movs	r2, #0
 80021ae:	4611      	mov	r1, r2
 80021b0:	2078      	movs	r0, #120	; 0x78
 80021b2:	f7ff ff91 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80021b6:	2210      	movs	r2, #16
 80021b8:	2100      	movs	r1, #0
 80021ba:	2078      	movs	r0, #120	; 0x78
 80021bc:	f7ff ff8c 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80021c0:	2240      	movs	r2, #64	; 0x40
 80021c2:	2100      	movs	r1, #0
 80021c4:	2078      	movs	r0, #120	; 0x78
 80021c6:	f7ff ff87 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80021ca:	2281      	movs	r2, #129	; 0x81
 80021cc:	2100      	movs	r1, #0
 80021ce:	2078      	movs	r0, #120	; 0x78
 80021d0:	f7ff ff82 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	2100      	movs	r1, #0
 80021d8:	2078      	movs	r0, #120	; 0x78
 80021da:	f7ff ff7d 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80021de:	22a1      	movs	r2, #161	; 0xa1
 80021e0:	2100      	movs	r1, #0
 80021e2:	2078      	movs	r0, #120	; 0x78
 80021e4:	f7ff ff78 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80021e8:	22a6      	movs	r2, #166	; 0xa6
 80021ea:	2100      	movs	r1, #0
 80021ec:	2078      	movs	r0, #120	; 0x78
 80021ee:	f7ff ff73 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80021f2:	22a8      	movs	r2, #168	; 0xa8
 80021f4:	2100      	movs	r1, #0
 80021f6:	2078      	movs	r0, #120	; 0x78
 80021f8:	f7ff ff6e 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80021fc:	223f      	movs	r2, #63	; 0x3f
 80021fe:	2100      	movs	r1, #0
 8002200:	2078      	movs	r0, #120	; 0x78
 8002202:	f7ff ff69 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002206:	22a4      	movs	r2, #164	; 0xa4
 8002208:	2100      	movs	r1, #0
 800220a:	2078      	movs	r0, #120	; 0x78
 800220c:	f7ff ff64 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002210:	22d3      	movs	r2, #211	; 0xd3
 8002212:	2100      	movs	r1, #0
 8002214:	2078      	movs	r0, #120	; 0x78
 8002216:	f7ff ff5f 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800221a:	2200      	movs	r2, #0
 800221c:	4611      	mov	r1, r2
 800221e:	2078      	movs	r0, #120	; 0x78
 8002220:	f7ff ff5a 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002224:	22d5      	movs	r2, #213	; 0xd5
 8002226:	2100      	movs	r1, #0
 8002228:	2078      	movs	r0, #120	; 0x78
 800222a:	f7ff ff55 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800222e:	22f0      	movs	r2, #240	; 0xf0
 8002230:	2100      	movs	r1, #0
 8002232:	2078      	movs	r0, #120	; 0x78
 8002234:	f7ff ff50 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002238:	22d9      	movs	r2, #217	; 0xd9
 800223a:	2100      	movs	r1, #0
 800223c:	2078      	movs	r0, #120	; 0x78
 800223e:	f7ff ff4b 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002242:	2222      	movs	r2, #34	; 0x22
 8002244:	2100      	movs	r1, #0
 8002246:	2078      	movs	r0, #120	; 0x78
 8002248:	f7ff ff46 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800224c:	22da      	movs	r2, #218	; 0xda
 800224e:	2100      	movs	r1, #0
 8002250:	2078      	movs	r0, #120	; 0x78
 8002252:	f7ff ff41 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002256:	2212      	movs	r2, #18
 8002258:	2100      	movs	r1, #0
 800225a:	2078      	movs	r0, #120	; 0x78
 800225c:	f7ff ff3c 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002260:	22db      	movs	r2, #219	; 0xdb
 8002262:	2100      	movs	r1, #0
 8002264:	2078      	movs	r0, #120	; 0x78
 8002266:	f7ff ff37 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800226a:	2220      	movs	r2, #32
 800226c:	2100      	movs	r1, #0
 800226e:	2078      	movs	r0, #120	; 0x78
 8002270:	f7ff ff32 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002274:	228d      	movs	r2, #141	; 0x8d
 8002276:	2100      	movs	r1, #0
 8002278:	2078      	movs	r0, #120	; 0x78
 800227a:	f7ff ff2d 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800227e:	2214      	movs	r2, #20
 8002280:	2100      	movs	r1, #0
 8002282:	2078      	movs	r0, #120	; 0x78
 8002284:	f7ff ff28 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002288:	22af      	movs	r2, #175	; 0xaf
 800228a:	2100      	movs	r1, #0
 800228c:	2078      	movs	r0, #120	; 0x78
 800228e:	f7ff ff23 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002292:	222e      	movs	r2, #46	; 0x2e
 8002294:	2100      	movs	r1, #0
 8002296:	2078      	movs	r0, #120	; 0x78
 8002298:	f7ff ff1e 	bl	80020d8 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800229c:	2000      	movs	r0, #0
 800229e:	f7ff fbf7 	bl	8001a90 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80022a2:	f7ff ff2d 	bl	8002100 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SSD1306_Init+0x160>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80022ac:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80022ae:	2001      	movs	r0, #1
 80022b0:	7158      	strb	r0, [r3, #5]
}
 80022b2:	bd08      	pop	{r3, pc}
		return 0;
 80022b4:	2000      	movs	r0, #0
 80022b6:	e7fc      	b.n	80022b2 <SSD1306_Init+0x156>
 80022b8:	20000388 	.word	0x20000388
 80022bc:	20000534 	.word	0x20000534

080022c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c0:	b500      	push	{lr}
 80022c2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_MspInit+0x4c>)
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	619a      	str	r2, [r3, #24]
 80022ce:	699a      	ldr	r2, [r3, #24]
 80022d0:	f002 0201 	and.w	r2, r2, #1
 80022d4:	9200      	str	r2, [sp, #0]
 80022d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	69da      	ldr	r2, [r3, #28]
 80022da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022de:	61da      	str	r2, [r3, #28]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	210f      	movs	r1, #15
 80022ee:	f06f 0001 	mvn.w	r0, #1
 80022f2:	f000 fd4d 	bl	8002d90 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022f6:	4a06      	ldr	r2, [pc, #24]	; (8002310 <HAL_MspInit+0x50>)
 80022f8:	6853      	ldr	r3, [r2, #4]
 80022fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002302:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002304:	b003      	add	sp, #12
 8002306:	f85d fb04 	ldr.w	pc, [sp], #4
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	40010000 	.word	0x40010000

08002314 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002314:	b500      	push	{lr}
 8002316:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	2300      	movs	r3, #0
 800231a:	9304      	str	r3, [sp, #16]
 800231c:	9305      	str	r3, [sp, #20]
 800231e:	9306      	str	r3, [sp, #24]
 8002320:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002322:	6803      	ldr	r3, [r0, #0]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_ADC_MspInit+0x94>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d005      	beq.n	8002336 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800232a:	4a20      	ldr	r2, [pc, #128]	; (80023ac <HAL_ADC_MspInit+0x98>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d01e      	beq.n	800236e <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002330:	b009      	add	sp, #36	; 0x24
 8002332:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_ADC_MspInit+0x9c>)
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002346:	9200      	str	r2, [sp, #0]
 8002348:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	f042 0204 	orr.w	r2, r2, #4
 8002350:	619a      	str	r2, [r3, #24]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800235c:	2308      	movs	r3, #8
 800235e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002360:	2303      	movs	r3, #3
 8002362:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	a904      	add	r1, sp, #16
 8002366:	4813      	ldr	r0, [pc, #76]	; (80023b4 <HAL_ADC_MspInit+0xa0>)
 8002368:	f000 fd56 	bl	8002e18 <HAL_GPIO_Init>
 800236c:	e7e0      	b.n	8002330 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_ADC_MspInit+0x9c>)
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002376:	619a      	str	r2, [r3, #24]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800237e:	9202      	str	r2, [sp, #8]
 8002380:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	f042 0204 	orr.w	r2, r2, #4
 8002388:	619a      	str	r2, [r3, #24]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	9303      	str	r3, [sp, #12]
 8002392:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002394:	2302      	movs	r3, #2
 8002396:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002398:	2303      	movs	r3, #3
 800239a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239c:	a904      	add	r1, sp, #16
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <HAL_ADC_MspInit+0xa0>)
 80023a0:	f000 fd3a 	bl	8002e18 <HAL_GPIO_Init>
}
 80023a4:	e7c4      	b.n	8002330 <HAL_ADC_MspInit+0x1c>
 80023a6:	bf00      	nop
 80023a8:	40012400 	.word	0x40012400
 80023ac:	40012800 	.word	0x40012800
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010800 	.word	0x40010800

080023b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023b8:	b510      	push	{r4, lr}
 80023ba:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	2300      	movs	r3, #0
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	9303      	str	r3, [sp, #12]
 80023c2:	9304      	str	r3, [sp, #16]
 80023c4:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 80023c6:	6802      	ldr	r2, [r0, #0]
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_I2C_MspInit+0x58>)
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023ce:	b006      	add	sp, #24
 80023d0:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	4c10      	ldr	r4, [pc, #64]	; (8002414 <HAL_I2C_MspInit+0x5c>)
 80023d4:	69a3      	ldr	r3, [r4, #24]
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	61a3      	str	r3, [r4, #24]
 80023dc:	69a3      	ldr	r3, [r4, #24]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e6:	23c0      	movs	r3, #192	; 0xc0
 80023e8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ea:	2312      	movs	r3, #18
 80023ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	a902      	add	r1, sp, #8
 80023f4:	4808      	ldr	r0, [pc, #32]	; (8002418 <HAL_I2C_MspInit+0x60>)
 80023f6:	f000 fd0f 	bl	8002e18 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023fa:	69e3      	ldr	r3, [r4, #28]
 80023fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002400:	61e3      	str	r3, [r4, #28]
 8002402:	69e3      	ldr	r3, [r4, #28]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	9b01      	ldr	r3, [sp, #4]
}
 800240c:	e7df      	b.n	80023ce <HAL_I2C_MspInit+0x16>
 800240e:	bf00      	nop
 8002410:	40005400 	.word	0x40005400
 8002414:	40021000 	.word	0x40021000
 8002418:	40010c00 	.word	0x40010c00

0800241c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800241c:	b510      	push	{r4, lr}
 800241e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	2300      	movs	r3, #0
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	9303      	str	r3, [sp, #12]
 8002426:	9304      	str	r3, [sp, #16]
 8002428:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 800242a:	6802      	ldr	r2, [r0, #0]
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_SPI_MspInit+0x6c>)
 800242e:	429a      	cmp	r2, r3
 8002430:	d001      	beq.n	8002436 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002432:	b006      	add	sp, #24
 8002434:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002436:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800243a:	699a      	ldr	r2, [r3, #24]
 800243c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002440:	619a      	str	r2, [r3, #24]
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002448:	9200      	str	r2, [sp, #0]
 800244a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	f042 0204 	orr.w	r2, r2, #4
 8002452:	619a      	str	r2, [r3, #24]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800245e:	23a0      	movs	r3, #160	; 0xa0
 8002460:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	4c08      	ldr	r4, [pc, #32]	; (800248c <HAL_SPI_MspInit+0x70>)
 800246c:	a902      	add	r1, sp, #8
 800246e:	4620      	mov	r0, r4
 8002470:	f000 fcd2 	bl	8002e18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002474:	2340      	movs	r3, #64	; 0x40
 8002476:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	2300      	movs	r3, #0
 800247a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	a902      	add	r1, sp, #8
 8002480:	4620      	mov	r0, r4
 8002482:	f000 fcc9 	bl	8002e18 <HAL_GPIO_Init>
}
 8002486:	e7d4      	b.n	8002432 <HAL_SPI_MspInit+0x16>
 8002488:	40013000 	.word	0x40013000
 800248c:	40010800 	.word	0x40010800

08002490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002490:	b500      	push	{lr}
 8002492:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8002494:	6803      	ldr	r3, [r0, #0]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	d005      	beq.n	80024a8 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800249c:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <HAL_TIM_Base_MspInit+0x58>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00e      	beq.n	80024c0 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024a2:	b003      	add	sp, #12
 80024a4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	61da      	str	r2, [r3, #28]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	9b00      	ldr	r3, [sp, #0]
 80024be:	e7f0      	b.n	80024a2 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_TIM_Base_MspInit+0x5c>)
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	f042 0202 	orr.w	r2, r2, #2
 80024c8:	61da      	str	r2, [r3, #28]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	2105      	movs	r1, #5
 80024d8:	201d      	movs	r0, #29
 80024da:	f000 fc59 	bl	8002d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024de:	201d      	movs	r0, #29
 80024e0:	f000 fc8c 	bl	8002dfc <HAL_NVIC_EnableIRQ>
}
 80024e4:	e7dd      	b.n	80024a2 <HAL_TIM_Base_MspInit+0x12>
 80024e6:	bf00      	nop
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f0:	b500      	push	{lr}
 80024f2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	2300      	movs	r3, #0
 80024f6:	9302      	str	r3, [sp, #8]
 80024f8:	9303      	str	r3, [sp, #12]
 80024fa:	9304      	str	r3, [sp, #16]
 80024fc:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 80024fe:	6803      	ldr	r3, [r0, #0]
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002504:	d002      	beq.n	800250c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002506:	b007      	add	sp, #28
 8002508:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	f042 0204 	orr.w	r2, r2, #4
 8002516:	619a      	str	r2, [r3, #24]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002522:	2301      	movs	r3, #1
 8002524:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	a902      	add	r1, sp, #8
 800252e:	4802      	ldr	r0, [pc, #8]	; (8002538 <HAL_TIM_MspPostInit+0x48>)
 8002530:	f000 fc72 	bl	8002e18 <HAL_GPIO_Init>
}
 8002534:	e7e7      	b.n	8002506 <HAL_TIM_MspPostInit+0x16>
 8002536:	bf00      	nop
 8002538:	40010800 	.word	0x40010800

0800253c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b530      	push	{r4, r5, lr}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_InitTick+0x8c>)
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	f042 0204 	orr.w	r2, r2, #4
 800254a:	61da      	str	r2, [r3, #28]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002556:	a902      	add	r1, sp, #8
 8002558:	a803      	add	r0, sp, #12
 800255a:	f001 fc77 	bl	8003e4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800255e:	9b06      	ldr	r3, [sp, #24]
 8002560:	b9cb      	cbnz	r3, 8002596 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002562:	f001 fc53 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8002566:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002568:	4818      	ldr	r0, [pc, #96]	; (80025cc <HAL_InitTick+0x90>)
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_InitTick+0x94>)
 800256c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800256e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002572:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_InitTick+0x98>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 800257e:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002584:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002588:	f002 fb32 	bl	8004bf0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800258c:	4605      	mov	r5, r0
 800258e:	b130      	cbz	r0, 800259e <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8002590:	4628      	mov	r0, r5
 8002592:	b009      	add	sp, #36	; 0x24
 8002594:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002596:	f001 fc39 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 800259a:	0043      	lsls	r3, r0, #1
 800259c:	e7e4      	b.n	8002568 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 800259e:	480b      	ldr	r0, [pc, #44]	; (80025cc <HAL_InitTick+0x90>)
 80025a0:	f002 f9c8 	bl	8004934 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80025a4:	4605      	mov	r5, r0
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d1f2      	bne.n	8002590 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025aa:	201e      	movs	r0, #30
 80025ac:	f000 fc26 	bl	8002dfc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b0:	2c0f      	cmp	r4, #15
 80025b2:	d901      	bls.n	80025b8 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 80025b4:	2501      	movs	r5, #1
 80025b6:	e7eb      	b.n	8002590 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80025b8:	2200      	movs	r2, #0
 80025ba:	4621      	mov	r1, r4
 80025bc:	201e      	movs	r0, #30
 80025be:	f000 fbe7 	bl	8002d90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_InitTick+0x9c>)
 80025c4:	601c      	str	r4, [r3, #0]
 80025c6:	e7e3      	b.n	8002590 <HAL_InitTick+0x54>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	2000093c 	.word	0x2000093c
 80025d0:	40000800 	.word	0x40000800
 80025d4:	431bde83 	.word	0x431bde83
 80025d8:	20000014 	.word	0x20000014

080025dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <NMI_Handler>

080025de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <HardFault_Handler>

080025e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <MemManage_Handler>

080025e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <BusFault_Handler>

080025e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler>

080025e6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e6:	4770      	bx	lr

080025e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025ea:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM3_IRQHandler+0xc>)
 80025ec:	f002 f9f4 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025f0:	bd08      	pop	{r3, pc}
 80025f2:	bf00      	nop
 80025f4:	2000047c 	.word	0x2000047c

080025f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025fa:	4802      	ldr	r0, [pc, #8]	; (8002604 <TIM4_IRQHandler+0xc>)
 80025fc:	f002 f9ec 	bl	80049d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002600:	bd08      	pop	{r3, pc}
 8002602:	bf00      	nop
 8002604:	2000093c 	.word	0x2000093c

08002608 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002608:	2001      	movs	r0, #1
 800260a:	4770      	bx	lr

0800260c <_kill>:

int _kill(int pid, int sig)
{
 800260c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800260e:	f005 fd95 	bl	800813c <__errno>
 8002612:	2316      	movs	r3, #22
 8002614:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002616:	f04f 30ff 	mov.w	r0, #4294967295
 800261a:	bd08      	pop	{r3, pc}

0800261c <_exit>:

void _exit (int status)
{
 800261c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800261e:	f005 fd8d 	bl	800813c <__errno>
 8002622:	2316      	movs	r3, #22
 8002624:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002626:	e7fe      	b.n	8002626 <_exit+0xa>

08002628 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002628:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	1e16      	subs	r6, r2, #0
 800262c:	dd07      	ble.n	800263e <_read+0x16>
 800262e:	460c      	mov	r4, r1
 8002630:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002632:	f3af 8000 	nop.w
 8002636:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	42a5      	cmp	r5, r4
 800263c:	d1f9      	bne.n	8002632 <_read+0xa>
  }

  return len;
}
 800263e:	4630      	mov	r0, r6
 8002640:	bd70      	pop	{r4, r5, r6, pc}

08002642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002642:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002644:	1e16      	subs	r6, r2, #0
 8002646:	dd07      	ble.n	8002658 <_write+0x16>
 8002648:	460c      	mov	r4, r1
 800264a:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800264c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002650:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002654:	42a5      	cmp	r5, r4
 8002656:	d1f9      	bne.n	800264c <_write+0xa>
  }
  return len;
}
 8002658:	4630      	mov	r0, r6
 800265a:	bd70      	pop	{r4, r5, r6, pc}

0800265c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	4770      	bx	lr

08002662 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002666:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002668:	2000      	movs	r0, #0
 800266a:	4770      	bx	lr

0800266c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800266c:	2001      	movs	r0, #1
 800266e:	4770      	bx	lr

08002670 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002670:	2000      	movs	r0, #0
 8002672:	4770      	bx	lr

08002674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002674:	b508      	push	{r3, lr}
 8002676:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <_sbrk+0x38>)
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	b152      	cbz	r2, 8002694 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <_sbrk+0x38>)
 8002680:	6810      	ldr	r0, [r2, #0]
 8002682:	4403      	add	r3, r0
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <_sbrk+0x3c>)
 8002686:	490b      	ldr	r1, [pc, #44]	; (80026b4 <_sbrk+0x40>)
 8002688:	1a52      	subs	r2, r2, r1
 800268a:	4293      	cmp	r3, r2
 800268c:	d806      	bhi.n	800269c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <_sbrk+0x38>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002692:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8002694:	4a05      	ldr	r2, [pc, #20]	; (80026ac <_sbrk+0x38>)
 8002696:	4908      	ldr	r1, [pc, #32]	; (80026b8 <_sbrk+0x44>)
 8002698:	6011      	str	r1, [r2, #0]
 800269a:	e7f0      	b.n	800267e <_sbrk+0xa>
    errno = ENOMEM;
 800269c:	f005 fd4e 	bl	800813c <__errno>
 80026a0:	230c      	movs	r3, #12
 80026a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	e7f3      	b.n	8002692 <_sbrk+0x1e>
 80026aa:	bf00      	nop
 80026ac:	20000984 	.word	0x20000984
 80026b0:	20005000 	.word	0x20005000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	200027c8 	.word	0x200027c8

080026bc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026bc:	4770      	bx	lr
	...

080026c0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80026c0:	f7ff fffc 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026c6:	490c      	ldr	r1, [pc, #48]	; (80026f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026dc:	4c09      	ldr	r4, [pc, #36]	; (8002704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ea:	f005 fd2d 	bl	8008148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ee:	f7fe f8eb 	bl	80008c8 <main>
  bx lr
 80026f2:	4770      	bx	lr
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80026fc:	08009e74 	.word	0x08009e74
  ldr r2, =_sbss
 8002700:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002704:	200027c4 	.word	0x200027c4

08002708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC1_2_IRQHandler>
	...

0800270c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <HAL_Init+0x20>)
 8002710:	6813      	ldr	r3, [r2, #0]
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002718:	2003      	movs	r0, #3
 800271a:	f000 fb27 	bl	8002d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271e:	200f      	movs	r0, #15
 8002720:	f7ff ff0c 	bl	800253c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002724:	f7ff fdcc 	bl	80022c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002728:	2000      	movs	r0, #0
 800272a:	bd08      	pop	{r3, pc}
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002730:	4a03      	ldr	r2, [pc, #12]	; (8002740 <HAL_IncTick+0x10>)
 8002732:	6811      	ldr	r1, [r2, #0]
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_IncTick+0x14>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	440b      	add	r3, r1
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000988 	.word	0x20000988
 8002744:	20000010 	.word	0x20000010

08002748 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002748:	4b01      	ldr	r3, [pc, #4]	; (8002750 <HAL_GetTick+0x8>)
 800274a:	6818      	ldr	r0, [r3, #0]
}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000988 	.word	0x20000988

08002754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff fff6 	bl	8002748 <HAL_GetTick>
 800275c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002762:	d002      	beq.n	800276a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <HAL_Delay+0x24>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276a:	f7ff ffed 	bl	8002748 <HAL_GetTick>
 800276e:	1b40      	subs	r0, r0, r5
 8002770:	42a0      	cmp	r0, r4
 8002772:	d3fa      	bcc.n	800276a <HAL_Delay+0x16>
  {
  }
}
 8002774:	bd38      	pop	{r3, r4, r5, pc}
 8002776:	bf00      	nop
 8002778:	20000010 	.word	0x20000010

0800277c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800277c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800277e:	b083      	sub	sp, #12
 8002780:	4606      	mov	r6, r0
 8002782:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800278c:	6833      	ldr	r3, [r6, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002794:	d124      	bne.n	80027e0 <HAL_ADC_PollForConversion+0x64>
 8002796:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800279e:	d103      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80027a2:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80027a6:	d02a      	beq.n	80027fe <HAL_ADC_PollForConversion+0x82>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80027a8:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_ADC_PollForConversion+0x170>)
 80027aa:	681d      	ldr	r5, [r3, #0]
 80027ac:	2002      	movs	r0, #2
 80027ae:	f001 fbf9 	bl	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 80027b2:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80027b6:	6833      	ldr	r3, [r6, #0]
 80027b8:	6919      	ldr	r1, [r3, #16]
 80027ba:	4a4d      	ldr	r2, [pc, #308]	; (80028f0 <HAL_ADC_PollForConversion+0x174>)
 80027bc:	4211      	tst	r1, r2
 80027be:	d137      	bne.n	8002830 <HAL_ADC_PollForConversion+0xb4>
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80027c6:	4211      	tst	r1, r2
 80027c8:	d132      	bne.n	8002830 <HAL_ADC_PollForConversion+0xb4>
 80027ca:	6919      	ldr	r1, [r3, #16]
 80027cc:	4a49      	ldr	r2, [pc, #292]	; (80028f4 <HAL_ADC_PollForConversion+0x178>)
 80027ce:	4211      	tst	r1, r2
 80027d0:	d158      	bne.n	8002884 <HAL_ADC_PollForConversion+0x108>
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <HAL_ADC_PollForConversion+0x17c>)
 80027d6:	421a      	tst	r2, r3
 80027d8:	bf14      	ite	ne
 80027da:	2329      	movne	r3, #41	; 0x29
 80027dc:	2314      	moveq	r3, #20
 80027de:	e03b      	b.n	8002858 <HAL_ADC_PollForConversion+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80027e2:	f043 0320 	orr.w	r3, r3, #32
 80027e6:	62b3      	str	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80027e8:	2300      	movs	r3, #0
 80027ea:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    return HAL_ERROR;
 80027ee:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80027f0:	b003      	add	sp, #12
 80027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027f4:	6833      	ldr	r3, [r6, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f013 0f02 	tst.w	r3, #2
 80027fc:	d00f      	beq.n	800281e <HAL_ADC_PollForConversion+0xa2>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027fe:	6832      	ldr	r2, [r6, #0]
 8002800:	6813      	ldr	r3, [r2, #0]
 8002802:	f013 0f02 	tst.w	r3, #2
 8002806:	d12c      	bne.n	8002862 <HAL_ADC_PollForConversion+0xe6>
      if(Timeout != HAL_MAX_DELAY)
 8002808:	f1b4 3fff 	cmp.w	r4, #4294967295
 800280c:	d0f8      	beq.n	8002800 <HAL_ADC_PollForConversion+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800280e:	2c00      	cmp	r4, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x78>
 8002812:	f7ff ff99 	bl	8002748 <HAL_GetTick>
 8002816:	1bc3      	subs	r3, r0, r7
 8002818:	42a3      	cmp	r3, r4
 800281a:	d9f0      	bls.n	80027fe <HAL_ADC_PollForConversion+0x82>
 800281c:	e7ea      	b.n	80027f4 <HAL_ADC_PollForConversion+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800281e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	62b3      	str	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002826:	2300      	movs	r3, #0
 8002828:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            return HAL_TIMEOUT;
 800282c:	2003      	movs	r0, #3
 800282e:	e7df      	b.n	80027f0 <HAL_ADC_PollForConversion+0x74>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <HAL_ADC_PollForConversion+0x178>)
 8002834:	4211      	tst	r1, r2
 8002836:	d104      	bne.n	8002842 <HAL_ADC_PollForConversion+0xc6>
 8002838:	68d9      	ldr	r1, [r3, #12]
 800283a:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 800283e:	4211      	tst	r1, r2
 8002840:	d022      	beq.n	8002888 <HAL_ADC_PollForConversion+0x10c>
 8002842:	6919      	ldr	r1, [r3, #16]
 8002844:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_ADC_PollForConversion+0x180>)
 8002846:	400a      	ands	r2, r1
 8002848:	bb02      	cbnz	r2, 800288c <HAL_ADC_PollForConversion+0x110>
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_ADC_PollForConversion+0x180>)
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	23fc      	movne	r3, #252	; 0xfc
 8002856:	2354      	moveq	r3, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002858:	fb03 f505 	mul.w	r5, r3, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800285c:	9b01      	ldr	r3, [sp, #4]
 800285e:	429d      	cmp	r5, r3
 8002860:	d81f      	bhi.n	80028a2 <HAL_ADC_PollForConversion+0x126>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002862:	6833      	ldr	r3, [r6, #0]
 8002864:	f06f 0212 	mvn.w	r2, #18
 8002868:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800286a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800286c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002870:	62b3      	str	r3, [r6, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002872:	6833      	ldr	r3, [r6, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800287a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800287e:	d024      	beq.n	80028ca <HAL_ADC_PollForConversion+0x14e>
  return HAL_OK;
 8002880:	2000      	movs	r0, #0
 8002882:	e7b5      	b.n	80027f0 <HAL_ADC_PollForConversion+0x74>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002884:	2329      	movs	r3, #41	; 0x29
 8002886:	e7e7      	b.n	8002858 <HAL_ADC_PollForConversion+0xdc>
 8002888:	2354      	movs	r3, #84	; 0x54
 800288a:	e7e5      	b.n	8002858 <HAL_ADC_PollForConversion+0xdc>
 800288c:	23fc      	movs	r3, #252	; 0xfc
 800288e:	e7e3      	b.n	8002858 <HAL_ADC_PollForConversion+0xdc>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002890:	9b01      	ldr	r3, [sp, #4]
 8002892:	42ab      	cmp	r3, r5
 8002894:	d310      	bcc.n	80028b8 <HAL_ADC_PollForConversion+0x13c>
      Conversion_Timeout_CPU_cycles ++;
 8002896:	9b01      	ldr	r3, [sp, #4]
 8002898:	3301      	adds	r3, #1
 800289a:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800289c:	9b01      	ldr	r3, [sp, #4]
 800289e:	42ab      	cmp	r3, r5
 80028a0:	d2df      	bcs.n	8002862 <HAL_ADC_PollForConversion+0xe6>
      if(Timeout != HAL_MAX_DELAY)
 80028a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80028a6:	d0f6      	beq.n	8002896 <HAL_ADC_PollForConversion+0x11a>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028a8:	2c00      	cmp	r4, #0
 80028aa:	d0f1      	beq.n	8002890 <HAL_ADC_PollForConversion+0x114>
 80028ac:	f7ff ff4c 	bl	8002748 <HAL_GetTick>
 80028b0:	1bc0      	subs	r0, r0, r7
 80028b2:	42a0      	cmp	r0, r4
 80028b4:	d9ef      	bls.n	8002896 <HAL_ADC_PollForConversion+0x11a>
 80028b6:	e7eb      	b.n	8002890 <HAL_ADC_PollForConversion+0x114>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028b8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	62b3      	str	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80028c0:	2300      	movs	r3, #0
 80028c2:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            return HAL_TIMEOUT;
 80028c6:	2003      	movs	r0, #3
 80028c8:	e792      	b.n	80027f0 <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028ca:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028cc:	b960      	cbnz	r0, 80028e8 <HAL_ADC_PollForConversion+0x16c>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028ce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80028d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d4:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80028d8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80028dc:	d188      	bne.n	80027f0 <HAL_ADC_PollForConversion+0x74>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	62b3      	str	r3, [r6, #40]	; 0x28
 80028e6:	e783      	b.n	80027f0 <HAL_ADC_PollForConversion+0x74>
  return HAL_OK;
 80028e8:	2000      	movs	r0, #0
 80028ea:	e781      	b.n	80027f0 <HAL_ADC_PollForConversion+0x74>
 80028ec:	2000000c 	.word	0x2000000c
 80028f0:	24924924 	.word	0x24924924
 80028f4:	12492492 	.word	0x12492492
 80028f8:	00492492 	.word	0x00492492
 80028fc:	00249249 	.word	0x00249249

08002900 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002900:	6803      	ldr	r3, [r0, #0]
 8002902:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002904:	4770      	bx	lr
	...

08002908 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002908:	b430      	push	{r4, r5}
 800290a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800290c:	2200      	movs	r2, #0
 800290e:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002910:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002914:	2a01      	cmp	r2, #1
 8002916:	f000 8093 	beq.w	8002a40 <HAL_ADC_ConfigChannel+0x138>
 800291a:	4603      	mov	r3, r0
 800291c:	2201      	movs	r2, #1
 800291e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002922:	684a      	ldr	r2, [r1, #4]
 8002924:	2a06      	cmp	r2, #6
 8002926:	d82d      	bhi.n	8002984 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002928:	6804      	ldr	r4, [r0, #0]
 800292a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800292c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002930:	3a05      	subs	r2, #5
 8002932:	f04f 0c1f 	mov.w	ip, #31
 8002936:	fa0c fc02 	lsl.w	ip, ip, r2
 800293a:	ea20 000c 	bic.w	r0, r0, ip
 800293e:	680d      	ldr	r5, [r1, #0]
 8002940:	fa05 f202 	lsl.w	r2, r5, r2
 8002944:	4302      	orrs	r2, r0
 8002946:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002948:	680a      	ldr	r2, [r1, #0]
 800294a:	2a09      	cmp	r2, #9
 800294c:	d938      	bls.n	80029c0 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800294e:	681c      	ldr	r4, [r3, #0]
 8002950:	68e0      	ldr	r0, [r4, #12]
 8002952:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002956:	3a1e      	subs	r2, #30
 8002958:	f04f 0c07 	mov.w	ip, #7
 800295c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002960:	ea20 000c 	bic.w	r0, r0, ip
 8002964:	688d      	ldr	r5, [r1, #8]
 8002966:	fa05 f202 	lsl.w	r2, r5, r2
 800296a:	4302      	orrs	r2, r0
 800296c:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800296e:	680a      	ldr	r2, [r1, #0]
 8002970:	3a10      	subs	r2, #16
 8002972:	2a01      	cmp	r2, #1
 8002974:	d934      	bls.n	80029e0 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002976:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800297e:	b002      	add	sp, #8
 8002980:	bc30      	pop	{r4, r5}
 8002982:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002984:	2a0c      	cmp	r2, #12
 8002986:	d80d      	bhi.n	80029a4 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002988:	6805      	ldr	r5, [r0, #0]
 800298a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800298c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002990:	3a23      	subs	r2, #35	; 0x23
 8002992:	241f      	movs	r4, #31
 8002994:	4094      	lsls	r4, r2
 8002996:	ea20 0004 	bic.w	r0, r0, r4
 800299a:	680c      	ldr	r4, [r1, #0]
 800299c:	4094      	lsls	r4, r2
 800299e:	4320      	orrs	r0, r4
 80029a0:	6328      	str	r0, [r5, #48]	; 0x30
 80029a2:	e7d1      	b.n	8002948 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029a4:	6805      	ldr	r5, [r0, #0]
 80029a6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80029a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029ac:	3a41      	subs	r2, #65	; 0x41
 80029ae:	241f      	movs	r4, #31
 80029b0:	4094      	lsls	r4, r2
 80029b2:	ea20 0004 	bic.w	r0, r0, r4
 80029b6:	680c      	ldr	r4, [r1, #0]
 80029b8:	4094      	lsls	r4, r2
 80029ba:	4320      	orrs	r0, r4
 80029bc:	62e8      	str	r0, [r5, #44]	; 0x2c
 80029be:	e7c3      	b.n	8002948 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029c0:	681c      	ldr	r4, [r3, #0]
 80029c2:	6920      	ldr	r0, [r4, #16]
 80029c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80029c8:	f04f 0c07 	mov.w	ip, #7
 80029cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80029d0:	ea20 000c 	bic.w	r0, r0, ip
 80029d4:	688d      	ldr	r5, [r1, #8]
 80029d6:	fa05 f202 	lsl.w	r2, r5, r2
 80029da:	4302      	orrs	r2, r0
 80029dc:	6122      	str	r2, [r4, #16]
 80029de:	e7c6      	b.n	800296e <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <HAL_ADC_ConfigChannel+0x13c>)
 80029e4:	4290      	cmp	r0, r2
 80029e6:	d005      	beq.n	80029f4 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ea:	f042 0220 	orr.w	r2, r2, #32
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80029f0:	2001      	movs	r0, #1
 80029f2:	e7c1      	b.n	8002978 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029f4:	6892      	ldr	r2, [r2, #8]
 80029f6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80029fa:	d11d      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029fc:	4811      	ldr	r0, [pc, #68]	; (8002a44 <HAL_ADC_ConfigChannel+0x13c>)
 80029fe:	6882      	ldr	r2, [r0, #8]
 8002a00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a04:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a06:	680a      	ldr	r2, [r1, #0]
 8002a08:	2a10      	cmp	r2, #16
 8002a0a:	d001      	beq.n	8002a10 <HAL_ADC_ConfigChannel+0x108>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	e7b3      	b.n	8002978 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a10:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <HAL_ADC_ConfigChannel+0x140>)
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	490d      	ldr	r1, [pc, #52]	; (8002a4c <HAL_ADC_ConfigChannel+0x144>)
 8002a16:	fba1 1202 	umull	r1, r2, r1, r2
 8002a1a:	0c92      	lsrs	r2, r2, #18
 8002a1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a20:	0052      	lsls	r2, r2, #1
 8002a22:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002a24:	9a01      	ldr	r2, [sp, #4]
 8002a26:	b14a      	cbz	r2, 8002a3c <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 8002a28:	9a01      	ldr	r2, [sp, #4]
 8002a2a:	3a01      	subs	r2, #1
 8002a2c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002a2e:	9a01      	ldr	r2, [sp, #4]
 8002a30:	2a00      	cmp	r2, #0
 8002a32:	d1f9      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a34:	2000      	movs	r0, #0
 8002a36:	e79f      	b.n	8002978 <HAL_ADC_ConfigChannel+0x70>
 8002a38:	2000      	movs	r0, #0
 8002a3a:	e79d      	b.n	8002978 <HAL_ADC_ConfigChannel+0x70>
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	e79b      	b.n	8002978 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002a40:	2002      	movs	r0, #2
 8002a42:	e79c      	b.n	800297e <HAL_ADC_ConfigChannel+0x76>
 8002a44:	40012400 	.word	0x40012400
 8002a48:	2000000c 	.word	0x2000000c
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a50:	b530      	push	{r4, r5, lr}
 8002a52:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a58:	6803      	ldr	r3, [r0, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	f012 0f01 	tst.w	r2, #1
 8002a60:	d13b      	bne.n	8002ada <ADC_Enable+0x8a>
 8002a62:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <ADC_Enable+0x90>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <ADC_Enable+0x94>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002a7a:	9b01      	ldr	r3, [sp, #4]
 8002a7c:	b12b      	cbz	r3, 8002a8a <ADC_Enable+0x3a>
    {
      wait_loop_index--;
 8002a7e:	9b01      	ldr	r3, [sp, #4]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002a84:	9b01      	ldr	r3, [sp, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <ADC_Enable+0x2e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a8a:	f7ff fe5d 	bl	8002748 <HAL_GetTick>
 8002a8e:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f013 0f01 	tst.w	r3, #1
 8002a98:	d006      	beq.n	8002aa8 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	e01e      	b.n	8002adc <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f013 0f01 	tst.w	r3, #1
 8002aa6:	d116      	bne.n	8002ad6 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aa8:	f7ff fe4e 	bl	8002748 <HAL_GetTick>
 8002aac:	1b43      	subs	r3, r0, r5
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d9f5      	bls.n	8002a9e <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f013 0f01 	tst.w	r3, #1
 8002aba:	d1f0      	bne.n	8002a9e <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002acc:	2300      	movs	r3, #0
 8002ace:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	e002      	b.n	8002adc <ADC_Enable+0x8c>
  return HAL_OK;
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e000      	b.n	8002adc <ADC_Enable+0x8c>
 8002ada:	2000      	movs	r0, #0
}
 8002adc:	b003      	add	sp, #12
 8002ade:	bd30      	pop	{r4, r5, pc}
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	431bde83 	.word	0x431bde83

08002ae8 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002ae8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d066      	beq.n	8002bbe <HAL_ADC_Start+0xd6>
{
 8002af0:	b510      	push	{r4, lr}
 8002af2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002af4:	2301      	movs	r3, #1
 8002af6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002afa:	f7ff ffa9 	bl	8002a50 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d159      	bne.n	8002bb6 <HAL_ADC_Start+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 8002b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	4a2b      	ldr	r2, [pc, #172]	; (8002bc4 <HAL_ADC_Start+0xdc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d028      	beq.n	8002b6c <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b1c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b20:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b28:	d005      	beq.n	8002b36 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b2c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b34:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b38:	f412 5f80 	tst.w	r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b3c:	bf1a      	itte	ne
 8002b3e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8002b40:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002b44:	2200      	moveq	r2, #0
 8002b46:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b4e:	f06f 0202 	mvn.w	r2, #2
 8002b52:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002b5c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002b60:	d01a      	beq.n	8002b98 <HAL_ADC_Start+0xb0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	e027      	b.n	8002bbc <HAL_ADC_Start+0xd4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b6c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002b70:	6852      	ldr	r2, [r2, #4]
 8002b72:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002b76:	d0d0      	beq.n	8002b1a <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b7e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b80:	4a11      	ldr	r2, [pc, #68]	; (8002bc8 <HAL_ADC_Start+0xe0>)
 8002b82:	6852      	ldr	r2, [r2, #4]
 8002b84:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b88:	d0d5      	beq.n	8002b36 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b8c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002b90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b94:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b96:	e7ce      	b.n	8002b36 <HAL_ADC_Start+0x4e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b98:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_ADC_Start+0xdc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_ADC_Start+0xc0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	e009      	b.n	8002bbc <HAL_ADC_Start+0xd4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ba8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002bac:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bae:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002bb2:	d1d6      	bne.n	8002b62 <HAL_ADC_Start+0x7a>
 8002bb4:	e7f3      	b.n	8002b9e <HAL_ADC_Start+0xb6>
    __HAL_UNLOCK(hadc);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002bbc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002bbe:	2002      	movs	r0, #2
}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40012800 	.word	0x40012800
 8002bc8:	40012400 	.word	0x40012400

08002bcc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bcc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bce:	6803      	ldr	r3, [r0, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	f012 0f01 	tst.w	r2, #1
 8002bd6:	d101      	bne.n	8002bdc <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bd8:	2000      	movs	r0, #0
}
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002be6:	f7ff fdaf 	bl	8002748 <HAL_GetTick>
 8002bea:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f013 0f01 	tst.w	r3, #1
 8002bf4:	d106      	bne.n	8002c04 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	e7ef      	b.n	8002bda <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f013 0f01 	tst.w	r3, #1
 8002c02:	d013      	beq.n	8002c2c <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c04:	f7ff fda0 	bl	8002748 <HAL_GetTick>
 8002c08:	1b43      	subs	r3, r0, r5
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d9f5      	bls.n	8002bfa <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f013 0f01 	tst.w	r3, #1
 8002c16:	d0f0      	beq.n	8002bfa <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c1a:	f043 0310 	orr.w	r3, r3, #16
 8002c1e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
 8002c2a:	e7d6      	b.n	8002bda <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	e7d4      	b.n	8002bda <ADC_ConversionStop_Disable+0xe>

08002c30 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d07a      	beq.n	8002d2a <HAL_ADC_Init+0xfa>
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d04f      	beq.n	8002cde <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f7ff ffc4 	bl	8002bcc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c46:	f013 0310 	ands.w	r3, r3, #16
 8002c4a:	d168      	bne.n	8002d1e <HAL_ADC_Init+0xee>
 8002c4c:	2800      	cmp	r0, #0
 8002c4e:	d166      	bne.n	8002d1e <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8002c50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c52:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002c56:	f022 0202 	bic.w	r2, r2, #2
 8002c5a:	f042 0202 	orr.w	r2, r2, #2
 8002c5e:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c60:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c62:	6862      	ldr	r2, [r4, #4]
 8002c64:	69e5      	ldr	r5, [r4, #28]
 8002c66:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c6c:	68a5      	ldr	r5, [r4, #8]
 8002c6e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002c72:	d004      	beq.n	8002c7e <HAL_ADC_Init+0x4e>
 8002c74:	2d01      	cmp	r5, #1
 8002c76:	bf14      	ite	ne
 8002c78:	2500      	movne	r5, #0
 8002c7a:	2501      	moveq	r5, #1
 8002c7c:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c7e:	7d26      	ldrb	r6, [r4, #20]
 8002c80:	2e01      	cmp	r6, #1
 8002c82:	d032      	beq.n	8002cea <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8002c84:	6826      	ldr	r6, [r4, #0]
 8002c86:	6871      	ldr	r1, [r6, #4]
 8002c88:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002c8c:	4329      	orrs	r1, r5
 8002c8e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002c90:	6825      	ldr	r5, [r4, #0]
 8002c92:	68ae      	ldr	r6, [r5, #8]
 8002c94:	4926      	ldr	r1, [pc, #152]	; (8002d30 <HAL_ADC_Init+0x100>)
 8002c96:	4031      	ands	r1, r6
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c9c:	68a1      	ldr	r1, [r4, #8]
 8002c9e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002ca2:	d001      	beq.n	8002ca8 <HAL_ADC_Init+0x78>
 8002ca4:	2901      	cmp	r1, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ca8:	6923      	ldr	r3, [r4, #16]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002cae:	6825      	ldr	r5, [r4, #0]
 8002cb0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002cb2:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	6899      	ldr	r1, [r3, #8]
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_ADC_Init+0x104>)
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d022      	beq.n	8002d0c <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8002cc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cc8:	f023 0312 	bic.w	r3, r3, #18
 8002ccc:	f043 0310 	orr.w	r3, r3, #16
 8002cd0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8002cda:	2001      	movs	r0, #1
 8002cdc:	e024      	b.n	8002d28 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002cde:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002ce0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002ce4:	f7ff fb16 	bl	8002314 <HAL_ADC_MspInit>
 8002ce8:	e7a9      	b.n	8002c3e <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cea:	b931      	cbnz	r1, 8002cfa <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cec:	69a1      	ldr	r1, [r4, #24]
 8002cee:	3901      	subs	r1, #1
 8002cf0:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002cf4:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8002cf8:	e7c4      	b.n	8002c84 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002cfc:	f041 0120 	orr.w	r1, r1, #32
 8002d00:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002d04:	f041 0101 	orr.w	r1, r1, #1
 8002d08:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002d0a:	e7bb      	b.n	8002c84 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002d10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d1c:	e004      	b.n	8002d28 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d20:	f043 0310 	orr.w	r3, r3, #16
 8002d24:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
}
 8002d28:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	ffe1f7fd 	.word	0xffe1f7fd
 8002d34:	ff1f0efe 	.word	0xff1f0efe

08002d38 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002d38:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d013      	beq.n	8002d68 <HAL_ADC_Stop+0x30>
{
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002d44:	2301      	movs	r3, #1
 8002d46:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d4a:	f7ff ff3f 	bl	8002bcc <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002d4e:	b938      	cbnz	r0, 8002d60 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8002d50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8002d60:	2300      	movs	r3, #0
 8002d62:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002d66:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002d68:	2002      	movs	r0, #2
}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4907      	ldr	r1, [pc, #28]	; (8002d8c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002d6e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d70:	0203      	lsls	r3, r0, #8
 8002d72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d7a:	0412      	lsls	r2, r2, #16
 8002d7c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d88:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d90:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_NVIC_SetPriority+0x64>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9a:	f1c3 0c07 	rsb	ip, r3, #7
 8002d9e:	f1bc 0f04 	cmp.w	ip, #4
 8002da2:	bf28      	it	cs
 8002da4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da8:	f103 0e04 	add.w	lr, r3, #4
 8002dac:	f1be 0f06 	cmp.w	lr, #6
 8002db0:	bf8c      	ite	hi
 8002db2:	3b03      	subhi	r3, #3
 8002db4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db6:	f04f 3eff 	mov.w	lr, #4294967295
 8002dba:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002dbe:	ea21 010c 	bic.w	r1, r1, ip
 8002dc2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc4:	fa0e fe03 	lsl.w	lr, lr, r3
 8002dc8:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	db09      	blt.n	8002de6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	0109      	lsls	r1, r1, #4
 8002dd4:	b2c9      	uxtb	r1, r1
 8002dd6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002dda:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002dde:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002de2:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de6:	f000 000f 	and.w	r0, r0, #15
 8002dea:	0109      	lsls	r1, r1, #4
 8002dec:	b2c9      	uxtb	r1, r1
 8002dee:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <HAL_NVIC_SetPriority+0x68>)
 8002df0:	5419      	strb	r1, [r3, r0]
 8002df2:	e7f6      	b.n	8002de2 <HAL_NVIC_SetPriority+0x52>
 8002df4:	e000ed00 	.word	0xe000ed00
 8002df8:	e000ed14 	.word	0xe000ed14

08002dfc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	db07      	blt.n	8002e10 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e00:	0941      	lsrs	r1, r0, #5
 8002e02:	f000 001f 	and.w	r0, r0, #31
 8002e06:	2301      	movs	r3, #1
 8002e08:	4083      	lsls	r3, r0
 8002e0a:	4a02      	ldr	r2, [pc, #8]	; (8002e14 <HAL_NVIC_EnableIRQ+0x18>)
 8002e0c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e100 	.word	0xe000e100

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e1c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1e:	f8d1 9000 	ldr.w	r9, [r1]
 8002e22:	f1b9 0f00 	cmp.w	r9, #0
 8002e26:	f000 811f 	beq.w	8003068 <HAL_GPIO_Init+0x250>
 8002e2a:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002e2c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e2e:	4e90      	ldr	r6, [pc, #576]	; (8003070 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e30:	4c90      	ldr	r4, [pc, #576]	; (8003074 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8002e32:	4d91      	ldr	r5, [pc, #580]	; (8003078 <HAL_GPIO_Init+0x260>)
 8002e34:	f8df e244 	ldr.w	lr, [pc, #580]	; 800307c <HAL_GPIO_Init+0x264>
 8002e38:	4694      	mov	ip, r2
 8002e3a:	e0ba      	b.n	8002fb2 <HAL_GPIO_Init+0x19a>
 8002e3c:	f04f 0c00 	mov.w	ip, #0
 8002e40:	e025      	b.n	8002e8e <HAL_GPIO_Init+0x76>
 8002e42:	45a9      	cmp	r9, r5
 8002e44:	d00f      	beq.n	8002e66 <HAL_GPIO_Init+0x4e>
 8002e46:	d906      	bls.n	8002e56 <HAL_GPIO_Init+0x3e>
 8002e48:	45f1      	cmp	r9, lr
 8002e4a:	d00c      	beq.n	8002e66 <HAL_GPIO_Init+0x4e>
 8002e4c:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003080 <HAL_GPIO_Init+0x268>
 8002e50:	45d1      	cmp	r9, sl
 8002e52:	d008      	beq.n	8002e66 <HAL_GPIO_Init+0x4e>
 8002e54:	e01b      	b.n	8002e8e <HAL_GPIO_Init+0x76>
 8002e56:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8003084 <HAL_GPIO_Init+0x26c>
 8002e5a:	45d1      	cmp	r9, sl
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x4e>
 8002e5e:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002e62:	45d1      	cmp	r9, sl
 8002e64:	d10f      	bne.n	8002e86 <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e66:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002e6a:	f1bc 0f00 	cmp.w	ip, #0
 8002e6e:	f000 80ef 	beq.w	8003050 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e72:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002e76:	bf0c      	ite	eq
 8002e78:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002e7c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e80:	f04f 0c08 	mov.w	ip, #8
 8002e84:	e003      	b.n	8002e8e <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002e86:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002e8a:	45d1      	cmp	r9, sl
 8002e8c:	d0eb      	beq.n	8002e66 <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e8e:	2fff      	cmp	r7, #255	; 0xff
 8002e90:	bf99      	ittee	ls
 8002e92:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e94:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e96:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e9a:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e9e:	f8d9 8000 	ldr.w	r8, [r9]
 8002ea2:	f04f 0b0f 	mov.w	fp, #15
 8002ea6:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002eaa:	ea28 080b 	bic.w	r8, r8, fp
 8002eae:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002eb2:	ea48 080a 	orr.w	r8, r8, sl
 8002eb6:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002eba:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002ebe:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002ec2:	d06f      	beq.n	8002fa4 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ec4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002ec8:	f048 0801 	orr.w	r8, r8, #1
 8002ecc:	f8c6 8018 	str.w	r8, [r6, #24]
 8002ed0:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002ed4:	f008 0801 	and.w	r8, r8, #1
 8002ed8:	f8cd 8004 	str.w	r8, [sp, #4]
 8002edc:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002ee0:	f023 0803 	bic.w	r8, r3, #3
 8002ee4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002ee8:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002eec:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ef0:	f003 0b03 	and.w	fp, r3, #3
 8002ef4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002ef8:	f04f 090f 	mov.w	r9, #15
 8002efc:	fa09 f90b 	lsl.w	r9, r9, fp
 8002f00:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f04:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8003088 <HAL_GPIO_Init+0x270>
 8002f08:	4548      	cmp	r0, r9
 8002f0a:	f000 80a4 	beq.w	8003056 <HAL_GPIO_Init+0x23e>
 8002f0e:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002f12:	4548      	cmp	r0, r9
 8002f14:	f000 80a2 	beq.w	800305c <HAL_GPIO_Init+0x244>
 8002f18:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002f1c:	4548      	cmp	r0, r9
 8002f1e:	f000 80a0 	beq.w	8003062 <HAL_GPIO_Init+0x24a>
 8002f22:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002f26:	4548      	cmp	r0, r9
 8002f28:	bf0c      	ite	eq
 8002f2a:	f04f 0903 	moveq.w	r9, #3
 8002f2e:	f04f 0904 	movne.w	r9, #4
 8002f32:	fa09 f90b 	lsl.w	r9, r9, fp
 8002f36:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002f3a:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f3e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f42:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f46:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002f4a:	bf14      	ite	ne
 8002f4c:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f50:	ea28 0807 	biceq.w	r8, r8, r7
 8002f54:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f58:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f5c:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f60:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002f64:	bf14      	ite	ne
 8002f66:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f6a:	ea28 0807 	biceq.w	r8, r8, r7
 8002f6e:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f72:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f76:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002f7a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002f7e:	bf14      	ite	ne
 8002f80:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f84:	ea28 0807 	biceq.w	r8, r8, r7
 8002f88:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f8c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002f90:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002f94:	f8d4 8000 	ldr.w	r8, [r4]
 8002f98:	bf14      	ite	ne
 8002f9a:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f9e:	ea28 0707 	biceq.w	r7, r8, r7
 8002fa2:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8002fa4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa6:	f8d1 9000 	ldr.w	r9, [r1]
 8002faa:	3204      	adds	r2, #4
 8002fac:	fa39 f703 	lsrs.w	r7, r9, r3
 8002fb0:	d05a      	beq.n	8003068 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8002fb2:	f04f 0801 	mov.w	r8, #1
 8002fb6:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fba:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002fbe:	ea38 0909 	bics.w	r9, r8, r9
 8002fc2:	d1ef      	bne.n	8002fa4 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002fc4:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002fc8:	f1b9 0f12 	cmp.w	r9, #18
 8002fcc:	f63f af39 	bhi.w	8002e42 <HAL_GPIO_Init+0x2a>
 8002fd0:	f1b9 0f12 	cmp.w	r9, #18
 8002fd4:	f63f af5b 	bhi.w	8002e8e <HAL_GPIO_Init+0x76>
 8002fd8:	f20f 0a04 	addw	sl, pc, #4
 8002fdc:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002fe0:	08002e67 	.word	0x08002e67
 8002fe4:	0800302d 	.word	0x0800302d
 8002fe8:	0800303d 	.word	0x0800303d
 8002fec:	08002e3d 	.word	0x08002e3d
 8002ff0:	08002e8f 	.word	0x08002e8f
 8002ff4:	08002e8f 	.word	0x08002e8f
 8002ff8:	08002e8f 	.word	0x08002e8f
 8002ffc:	08002e8f 	.word	0x08002e8f
 8003000:	08002e8f 	.word	0x08002e8f
 8003004:	08002e8f 	.word	0x08002e8f
 8003008:	08002e8f 	.word	0x08002e8f
 800300c:	08002e8f 	.word	0x08002e8f
 8003010:	08002e8f 	.word	0x08002e8f
 8003014:	08002e8f 	.word	0x08002e8f
 8003018:	08002e8f 	.word	0x08002e8f
 800301c:	08002e8f 	.word	0x08002e8f
 8003020:	08002e8f 	.word	0x08002e8f
 8003024:	08003033 	.word	0x08003033
 8003028:	08003047 	.word	0x08003047
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800302c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8003030:	e72d      	b.n	8002e8e <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003032:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003036:	f10c 0c04 	add.w	ip, ip, #4
          break;
 800303a:	e728      	b.n	8002e8e <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800303c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003040:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8003044:	e723      	b.n	8002e8e <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003046:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800304a:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 800304e:	e71e      	b.n	8002e8e <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003050:	f04f 0c04 	mov.w	ip, #4
 8003054:	e71b      	b.n	8002e8e <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003056:	f04f 0900 	mov.w	r9, #0
 800305a:	e76a      	b.n	8002f32 <HAL_GPIO_Init+0x11a>
 800305c:	f04f 0901 	mov.w	r9, #1
 8003060:	e767      	b.n	8002f32 <HAL_GPIO_Init+0x11a>
 8003062:	f04f 0902 	mov.w	r9, #2
 8003066:	e764      	b.n	8002f32 <HAL_GPIO_Init+0x11a>
  }
}
 8003068:	b003      	add	sp, #12
 800306a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
 8003074:	40010400 	.word	0x40010400
 8003078:	10220000 	.word	0x10220000
 800307c:	10310000 	.word	0x10310000
 8003080:	10320000 	.word	0x10320000
 8003084:	10120000 	.word	0x10120000
 8003088:	40010800 	.word	0x40010800

0800308c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800308c:	6883      	ldr	r3, [r0, #8]
 800308e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003090:	bf14      	ite	ne
 8003092:	2001      	movne	r0, #1
 8003094:	2000      	moveq	r0, #0
 8003096:	4770      	bx	lr

08003098 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003098:	b10a      	cbz	r2, 800309e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309a:	6101      	str	r1, [r0, #16]
 800309c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800309e:	0409      	lsls	r1, r1, #16
 80030a0:	6101      	str	r1, [r0, #16]
  }
}
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030a4:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030a6:	ea01 0203 	and.w	r2, r1, r3
 80030aa:	ea21 0103 	bic.w	r1, r1, r3
 80030ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80030b2:	6101      	str	r1, [r0, #16]
}
 80030b4:	4770      	bx	lr

080030b6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b6:	6803      	ldr	r3, [r0, #0]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80030be:	d101      	bne.n	80030c4 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80030c0:	2000      	movs	r0, #0
}
 80030c2:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c8:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030ce:	2220      	movs	r2, #32
 80030d0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80030da:	f042 0204 	orr.w	r2, r2, #4
 80030de:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80030e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80030e4:	2001      	movs	r0, #1
 80030e6:	4770      	bx	lr

080030e8 <I2C_WaitOnFlagUntilTimeout>:
{
 80030e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ec:	4605      	mov	r5, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	4616      	mov	r6, r2
 80030f2:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f4:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80030f8:	f1b8 0f01 	cmp.w	r8, #1
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	bf0c      	ite	eq
 8003100:	695b      	ldreq	r3, [r3, #20]
 8003102:	699b      	ldrne	r3, [r3, #24]
 8003104:	ea24 0c03 	bic.w	ip, r4, r3
 8003108:	fa1f fc8c 	uxth.w	ip, ip
 800310c:	fabc fc8c 	clz	ip, ip
 8003110:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003114:	4566      	cmp	r6, ip
 8003116:	d127      	bne.n	8003168 <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 8003118:	f1b7 3fff 	cmp.w	r7, #4294967295
 800311c:	d0ec      	beq.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7ff fb13 	bl	8002748 <HAL_GetTick>
 8003122:	9b06      	ldr	r3, [sp, #24]
 8003124:	1ac0      	subs	r0, r0, r3
 8003126:	42b8      	cmp	r0, r7
 8003128:	d801      	bhi.n	800312e <I2C_WaitOnFlagUntilTimeout+0x46>
 800312a:	2f00      	cmp	r7, #0
 800312c:	d1e4      	bne.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800312e:	f1b8 0f01 	cmp.w	r8, #1
 8003132:	682b      	ldr	r3, [r5, #0]
 8003134:	bf0c      	ite	eq
 8003136:	695b      	ldreq	r3, [r3, #20]
 8003138:	699b      	ldrne	r3, [r3, #24]
 800313a:	ea24 0303 	bic.w	r3, r4, r3
 800313e:	b29b      	uxth	r3, r3
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	429e      	cmp	r6, r3
 8003148:	d1d6      	bne.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800314a:	2300      	movs	r3, #0
 800314c:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800314e:	2220      	movs	r2, #32
 8003150:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003154:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800315a:	f042 0220 	orr.w	r2, r2, #32
 800315e:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003160:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003164:	2001      	movs	r0, #1
 8003166:	e000      	b.n	800316a <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8003168:	2000      	movs	r0, #0
}
 800316a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800316e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800316e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003172:	4605      	mov	r5, r0
 8003174:	460e      	mov	r6, r1
 8003176:	4617      	mov	r7, r2
 8003178:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800317a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800317e:	f1b8 0f01 	cmp.w	r8, #1
 8003182:	682b      	ldr	r3, [r5, #0]
 8003184:	bf0c      	ite	eq
 8003186:	695c      	ldreq	r4, [r3, #20]
 8003188:	699c      	ldrne	r4, [r3, #24]
 800318a:	ea26 0404 	bic.w	r4, r6, r4
 800318e:	b2a4      	uxth	r4, r4
 8003190:	3c00      	subs	r4, #0
 8003192:	bf18      	it	ne
 8003194:	2401      	movne	r4, #1
 8003196:	2c00      	cmp	r4, #0
 8003198:	d044      	beq.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800319a:	682b      	ldr	r3, [r5, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80031a2:	d127      	bne.n	80031f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 80031a4:	f1b7 3fff 	cmp.w	r7, #4294967295
 80031a8:	d0e9      	beq.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031aa:	f7ff facd 	bl	8002748 <HAL_GetTick>
 80031ae:	eba0 0009 	sub.w	r0, r0, r9
 80031b2:	42b8      	cmp	r0, r7
 80031b4:	d801      	bhi.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 80031b6:	2f00      	cmp	r7, #0
 80031b8:	d1e1      	bne.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031ba:	f1b8 0f01 	cmp.w	r8, #1
 80031be:	682b      	ldr	r3, [r5, #0]
 80031c0:	bf0c      	ite	eq
 80031c2:	695b      	ldreq	r3, [r3, #20]
 80031c4:	699b      	ldrne	r3, [r3, #24]
 80031c6:	ea26 0303 	bic.w	r3, r6, r3
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b00      	subs	r3, #0
 80031ce:	bf18      	it	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0d3      	beq.n	800317e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031da:	2220      	movs	r2, #32
 80031dc:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80031e6:	f042 0220 	orr.w	r2, r2, #32
 80031ea:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80031ec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 80031f0:	2001      	movs	r0, #1
 80031f2:	e015      	b.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003202:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003204:	2300      	movs	r3, #0
 8003206:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	2220      	movs	r2, #32
 800320a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003212:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003214:	f042 0204 	orr.w	r2, r2, #4
 8003218:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800321a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
}
 8003220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8003224:	2000      	movs	r0, #0
 8003226:	e7fb      	b.n	8003220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08003228 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4604      	mov	r4, r0
 800322c:	460d      	mov	r5, r1
 800322e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003238:	d121      	bne.n	800327e <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff ff3b 	bl	80030b6 <I2C_IsAcknowledgeFailed>
 8003240:	b9f8      	cbnz	r0, 8003282 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003242:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003246:	d0f3      	beq.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7ff fa7e 	bl	8002748 <HAL_GetTick>
 800324c:	1b80      	subs	r0, r0, r6
 800324e:	42a8      	cmp	r0, r5
 8003250:	d801      	bhi.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003252:	2d00      	cmp	r5, #0
 8003254:	d1ec      	bne.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800325e:	d1e7      	bne.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003260:	2300      	movs	r3, #0
 8003262:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	2220      	movs	r2, #32
 8003266:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003270:	f042 0220 	orr.w	r2, r2, #32
 8003274:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003276:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800327a:	2001      	movs	r0, #1
 800327c:	e000      	b.n	8003280 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 800327e:	2000      	movs	r0, #0
}
 8003280:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003282:	2001      	movs	r0, #1
 8003284:	e7fc      	b.n	8003280 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08003286 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003286:	b570      	push	{r4, r5, r6, lr}
 8003288:	4604      	mov	r4, r0
 800328a:	460d      	mov	r5, r1
 800328c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f013 0f04 	tst.w	r3, #4
 8003296:	d121      	bne.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003298:	4620      	mov	r0, r4
 800329a:	f7ff ff0c 	bl	80030b6 <I2C_IsAcknowledgeFailed>
 800329e:	b9f8      	cbnz	r0, 80032e0 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80032a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80032a4:	d0f3      	beq.n	800328e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7ff fa4f 	bl	8002748 <HAL_GetTick>
 80032aa:	1b80      	subs	r0, r0, r6
 80032ac:	42a8      	cmp	r0, r5
 80032ae:	d801      	bhi.n	80032b4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80032b0:	2d00      	cmp	r5, #0
 80032b2:	d1ec      	bne.n	800328e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f013 0f04 	tst.w	r3, #4
 80032bc:	d1e7      	bne.n	800328e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032be:	2300      	movs	r3, #0
 80032c0:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c2:	2220      	movs	r2, #32
 80032c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032ce:	f042 0220 	orr.w	r2, r2, #32
 80032d2:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80032d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80032d8:	2001      	movs	r0, #1
 80032da:	e000      	b.n	80032de <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80032dc:	2000      	movs	r0, #0
}
 80032de:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
 80032e2:	e7fc      	b.n	80032de <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080032e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80032e4:	2800      	cmp	r0, #0
 80032e6:	f000 80b1 	beq.w	800344c <HAL_I2C_Init+0x168>
{
 80032ea:	b538      	push	{r3, r4, r5, lr}
 80032ec:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d074      	beq.n	80033e0 <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80032f6:	2324      	movs	r3, #36	; 0x24
 80032f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003310:	6822      	ldr	r2, [r4, #0]
 8003312:	6813      	ldr	r3, [r2, #0]
 8003314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003318:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800331a:	f000 fd77 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331e:	6862      	ldr	r2, [r4, #4]
 8003320:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <HAL_I2C_Init+0x170>)
 8003322:	429a      	cmp	r2, r3
 8003324:	d861      	bhi.n	80033ea <HAL_I2C_Init+0x106>
 8003326:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_I2C_Init+0x174>)
 8003328:	4298      	cmp	r0, r3
 800332a:	f240 8091 	bls.w	8003450 <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 800332e:	494b      	ldr	r1, [pc, #300]	; (800345c <HAL_I2C_Init+0x178>)
 8003330:	fba1 3100 	umull	r3, r1, r1, r0
 8003334:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003336:	6825      	ldr	r5, [r4, #0]
 8003338:	686a      	ldr	r2, [r5, #4]
 800333a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800333e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8003342:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003344:	6821      	ldr	r1, [r4, #0]
 8003346:	6a0a      	ldr	r2, [r1, #32]
 8003348:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800334c:	4d41      	ldr	r5, [pc, #260]	; (8003454 <HAL_I2C_Init+0x170>)
 800334e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003352:	45ac      	cmp	ip, r5
 8003354:	d84e      	bhi.n	80033f4 <HAL_I2C_Init+0x110>
 8003356:	3301      	adds	r3, #1
 8003358:	4313      	orrs	r3, r2
 800335a:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800335c:	6821      	ldr	r1, [r4, #0]
 800335e:	69ca      	ldr	r2, [r1, #28]
 8003360:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003364:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003368:	6865      	ldr	r5, [r4, #4]
 800336a:	4b3a      	ldr	r3, [pc, #232]	; (8003454 <HAL_I2C_Init+0x170>)
 800336c:	429d      	cmp	r5, r3
 800336e:	d84b      	bhi.n	8003408 <HAL_I2C_Init+0x124>
 8003370:	1e43      	subs	r3, r0, #1
 8003372:	006d      	lsls	r5, r5, #1
 8003374:	fbb3 f3f5 	udiv	r3, r3, r5
 8003378:	3301      	adds	r3, #1
 800337a:	f640 70fc 	movw	r0, #4092	; 0xffc
 800337e:	4203      	tst	r3, r0
 8003380:	d05e      	beq.n	8003440 <HAL_I2C_Init+0x15c>
 8003382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003386:	431a      	orrs	r2, r3
 8003388:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800338a:	6821      	ldr	r1, [r4, #0]
 800338c:	680a      	ldr	r2, [r1, #0]
 800338e:	69e3      	ldr	r3, [r4, #28]
 8003390:	6a20      	ldr	r0, [r4, #32]
 8003392:	4303      	orrs	r3, r0
 8003394:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800339c:	6821      	ldr	r1, [r4, #0]
 800339e:	688a      	ldr	r2, [r1, #8]
 80033a0:	6923      	ldr	r3, [r4, #16]
 80033a2:	68e0      	ldr	r0, [r4, #12]
 80033a4:	4303      	orrs	r3, r0
 80033a6:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 80033aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b2:	6821      	ldr	r1, [r4, #0]
 80033b4:	68ca      	ldr	r2, [r1, #12]
 80033b6:	6963      	ldr	r3, [r4, #20]
 80033b8:	69a0      	ldr	r0, [r4, #24]
 80033ba:	4303      	orrs	r3, r0
 80033bc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	6813      	ldr	r3, [r2, #0]
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ce:	2000      	movs	r0, #0
 80033d0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	2320      	movs	r3, #32
 80033d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033d8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033da:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80033de:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80033e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80033e4:	f7fe ffe8 	bl	80023b8 <HAL_I2C_MspInit>
 80033e8:	e785      	b.n	80032f6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_I2C_Init+0x17c>)
 80033ec:	4298      	cmp	r0, r3
 80033ee:	d89e      	bhi.n	800332e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80033f0:	2001      	movs	r0, #1
 80033f2:	e7f4      	b.n	80033de <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f4:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80033f8:	fb05 f303 	mul.w	r3, r5, r3
 80033fc:	4d19      	ldr	r5, [pc, #100]	; (8003464 <HAL_I2C_Init+0x180>)
 80033fe:	fba5 5303 	umull	r5, r3, r5, r3
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	3301      	adds	r3, #1
 8003406:	e7a7      	b.n	8003358 <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003408:	68a3      	ldr	r3, [r4, #8]
 800340a:	b95b      	cbnz	r3, 8003424 <HAL_I2C_Init+0x140>
 800340c:	1e43      	subs	r3, r0, #1
 800340e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003412:	fbb3 f3f5 	udiv	r3, r3, r5
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	b193      	cbz	r3, 8003444 <HAL_I2C_Init+0x160>
 800341e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003422:	e7b0      	b.n	8003386 <HAL_I2C_Init+0xa2>
 8003424:	1e43      	subs	r3, r0, #1
 8003426:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800342a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800342e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003432:	3301      	adds	r3, #1
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	b133      	cbz	r3, 8003448 <HAL_I2C_Init+0x164>
 800343a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800343e:	e7a2      	b.n	8003386 <HAL_I2C_Init+0xa2>
 8003440:	2304      	movs	r3, #4
 8003442:	e7a0      	b.n	8003386 <HAL_I2C_Init+0xa2>
 8003444:	2301      	movs	r3, #1
 8003446:	e79e      	b.n	8003386 <HAL_I2C_Init+0xa2>
 8003448:	2301      	movs	r3, #1
 800344a:	e79c      	b.n	8003386 <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 800344c:	2001      	movs	r0, #1
}
 800344e:	4770      	bx	lr
    return HAL_ERROR;
 8003450:	2001      	movs	r0, #1
 8003452:	e7c4      	b.n	80033de <HAL_I2C_Init+0xfa>
 8003454:	000186a0 	.word	0x000186a0
 8003458:	001e847f 	.word	0x001e847f
 800345c:	431bde83 	.word	0x431bde83
 8003460:	003d08ff 	.word	0x003d08ff
 8003464:	10624dd3 	.word	0x10624dd3

08003468 <HAL_I2C_Master_Transmit>:
{
 8003468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800346c:	b085      	sub	sp, #20
 800346e:	4604      	mov	r4, r0
 8003470:	460f      	mov	r7, r1
 8003472:	4691      	mov	r9, r2
 8003474:	4698      	mov	r8, r3
 8003476:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003478:	f7ff f966 	bl	8002748 <HAL_GetTick>
 800347c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800347e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003482:	b2c0      	uxtb	r0, r0
 8003484:	2820      	cmp	r0, #32
 8003486:	d004      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8003488:	2702      	movs	r7, #2
}
 800348a:	4638      	mov	r0, r7
 800348c:	b005      	add	sp, #20
 800348e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003492:	9500      	str	r5, [sp, #0]
 8003494:	2319      	movs	r3, #25
 8003496:	2201      	movs	r2, #1
 8003498:	4971      	ldr	r1, [pc, #452]	; (8003660 <HAL_I2C_Master_Transmit+0x1f8>)
 800349a:	4620      	mov	r0, r4
 800349c:	f7ff fe24 	bl	80030e8 <I2C_WaitOnFlagUntilTimeout>
 80034a0:	2800      	cmp	r0, #0
 80034a2:	f040 80d7 	bne.w	8003654 <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 80034a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	f000 80d4 	beq.w	8003658 <HAL_I2C_Master_Transmit+0x1f0>
 80034b0:	2301      	movs	r3, #1
 80034b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	f012 0f01 	tst.w	r2, #1
 80034be:	d103      	bne.n	80034c8 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d0:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034d2:	2321      	movs	r3, #33	; 0x21
 80034d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034d8:	2310      	movs	r3, #16
 80034da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034de:	2300      	movs	r3, #0
 80034e0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80034e2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034e6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034ec:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ee:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <HAL_I2C_Master_Transmit+0x1fc>)
 80034f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d00d      	beq.n	8003514 <HAL_I2C_Master_Transmit+0xac>
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d00b      	beq.n	8003514 <HAL_I2C_Master_Transmit+0xac>
 80034fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003500:	d008      	beq.n	8003514 <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003504:	2b12      	cmp	r3, #18
 8003506:	d10a      	bne.n	800351e <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e004      	b.n	800351e <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003514:	6822      	ldr	r2, [r4, #0]
 8003516:	6813      	ldr	r3, [r2, #0]
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800351e:	9500      	str	r5, [sp, #0]
 8003520:	4633      	mov	r3, r6
 8003522:	2200      	movs	r2, #0
 8003524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff fddd 	bl	80030e8 <I2C_WaitOnFlagUntilTimeout>
 800352e:	b9d0      	cbnz	r0, 8003566 <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003530:	6923      	ldr	r3, [r4, #16]
 8003532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003536:	d120      	bne.n	800357a <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800353e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003540:	462b      	mov	r3, r5
 8003542:	4632      	mov	r2, r6
 8003544:	4948      	ldr	r1, [pc, #288]	; (8003668 <HAL_I2C_Master_Transmit+0x200>)
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff fe11 	bl	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800354c:	4607      	mov	r7, r0
 800354e:	2800      	cmp	r0, #0
 8003550:	f040 8084 	bne.w	800365c <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003554:	2300      	movs	r3, #0
 8003556:	9303      	str	r3, [sp, #12]
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	9203      	str	r2, [sp, #12]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003564:	e02f      	b.n	80035c6 <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800356e:	d002      	beq.n	8003576 <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003574:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003576:	2701      	movs	r7, #1
 8003578:	e787      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	11fb      	asrs	r3, r7, #7
 800357e:	f003 0306 	and.w	r3, r3, #6
 8003582:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003586:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003588:	462b      	mov	r3, r5
 800358a:	4632      	mov	r2, r6
 800358c:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_I2C_Master_Transmit+0x204>)
 800358e:	4620      	mov	r0, r4
 8003590:	f7ff fded 	bl	800316e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003594:	2800      	cmp	r0, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	b2ff      	uxtb	r7, r7
 800359c:	611f      	str	r7, [r3, #16]
 800359e:	e7cf      	b.n	8003540 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 80035a6:	2701      	movs	r7, #1
 80035a8:	e76f      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	6822      	ldr	r2, [r4, #0]
 80035ac:	6813      	ldr	r3, [r2, #0]
 80035ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b2:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80035b4:	2701      	movs	r7, #1
 80035b6:	e768      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b8:	462a      	mov	r2, r5
 80035ba:	4631      	mov	r1, r6
 80035bc:	4620      	mov	r0, r4
 80035be:	f7ff fe62 	bl	8003286 <I2C_WaitOnBTFFlagUntilTimeout>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	d12c      	bne.n	8003620 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 80035c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d035      	beq.n	8003638 <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035cc:	462a      	mov	r2, r5
 80035ce:	4631      	mov	r1, r6
 80035d0:	4620      	mov	r0, r4
 80035d2:	f7ff fe29 	bl	8003228 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d1e2      	bne.n	80035a0 <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80035e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035e4:	1c53      	adds	r3, r2, #1
 80035e6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80035e8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80035ea:	3901      	subs	r1, #1
 80035ec:	b289      	uxth	r1, r1
 80035ee:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80035f0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80035f2:	3901      	subs	r1, #1
 80035f4:	b289      	uxth	r1, r1
 80035f6:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	6958      	ldr	r0, [r3, #20]
 80035fc:	f010 0f04 	tst.w	r0, #4
 8003600:	d0da      	beq.n	80035b8 <HAL_I2C_Master_Transmit+0x150>
 8003602:	2900      	cmp	r1, #0
 8003604:	d0d8      	beq.n	80035b8 <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003606:	7852      	ldrb	r2, [r2, #1]
 8003608:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800360a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800360c:	3301      	adds	r3, #1
 800360e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003610:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003612:	3b01      	subs	r3, #1
 8003614:	b29b      	uxth	r3, r3
 8003616:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003618:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800361a:	3b01      	subs	r3, #1
 800361c:	8523      	strh	r3, [r4, #40]	; 0x28
 800361e:	e7cb      	b.n	80035b8 <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003622:	2b04      	cmp	r3, #4
 8003624:	d001      	beq.n	800362a <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 8003626:	2701      	movs	r7, #1
 8003628:	e72f      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	6813      	ldr	r3, [r2, #0]
 800362e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003632:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003634:	2701      	movs	r7, #1
 8003636:	e728      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003640:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	2320      	movs	r3, #32
 8003644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	2300      	movs	r3, #0
 800364a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800364e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003652:	e71a      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8003654:	2702      	movs	r7, #2
 8003656:	e718      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8003658:	2702      	movs	r7, #2
 800365a:	e716      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 800365c:	2701      	movs	r7, #1
 800365e:	e714      	b.n	800348a <HAL_I2C_Master_Transmit+0x22>
 8003660:	00100002 	.word	0x00100002
 8003664:	ffff0000 	.word	0xffff0000
 8003668:	00010002 	.word	0x00010002
 800366c:	00010008 	.word	0x00010008

08003670 <HAL_I2C_IsDeviceReady>:
{
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	b085      	sub	sp, #20
 8003676:	4604      	mov	r4, r0
 8003678:	4689      	mov	r9, r1
 800367a:	4692      	mov	sl, r2
 800367c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800367e:	f7ff f863 	bl	8002748 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003682:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b20      	cmp	r3, #32
 800368a:	d003      	beq.n	8003694 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 800368c:	2002      	movs	r0, #2
}
 800368e:	b005      	add	sp, #20
 8003690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003694:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003696:	9000      	str	r0, [sp, #0]
 8003698:	2319      	movs	r3, #25
 800369a:	2201      	movs	r2, #1
 800369c:	495d      	ldr	r1, [pc, #372]	; (8003814 <HAL_I2C_IsDeviceReady+0x1a4>)
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff fd22 	bl	80030e8 <I2C_WaitOnFlagUntilTimeout>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	f040 80ab 	bne.w	8003800 <HAL_I2C_IsDeviceReady+0x190>
    __HAL_LOCK(hi2c);
 80036aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	f000 80a8 	beq.w	8003804 <HAL_I2C_IsDeviceReady+0x194>
 80036b4:	2301      	movs	r3, #1
 80036b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	f012 0f01 	tst.w	r2, #1
 80036c2:	d103      	bne.n	80036cc <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036cc:	6822      	ldr	r2, [r4, #0]
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036d4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d6:	2324      	movs	r3, #36	; 0x24
 80036d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	2300      	movs	r3, #0
 80036de:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e0:	4a4d      	ldr	r2, [pc, #308]	; (8003818 <HAL_I2C_IsDeviceReady+0x1a8>)
 80036e2:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 0U;
 80036e4:	4698      	mov	r8, r3
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036e6:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ea:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003814 <HAL_I2C_IsDeviceReady+0x1a4>
 80036ee:	e03f      	b.n	8003770 <HAL_I2C_IsDeviceReady+0x100>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036f8:	f000 8086 	beq.w	8003808 <HAL_I2C_IsDeviceReady+0x198>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003700:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003702:	2003      	movs	r0, #3
 8003704:	e7c3      	b.n	800368e <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003706:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6953      	ldr	r3, [r2, #20]
 800370e:	f003 0302 	and.w	r3, r3, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003712:	6951      	ldr	r1, [r2, #20]
 8003714:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003718:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	2aa0      	cmp	r2, #160	; 0xa0
 8003720:	d009      	beq.n	8003736 <HAL_I2C_IsDeviceReady+0xc6>
 8003722:	430b      	orrs	r3, r1
 8003724:	d107      	bne.n	8003736 <HAL_I2C_IsDeviceReady+0xc6>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003726:	f7ff f80f 	bl	8002748 <HAL_GetTick>
 800372a:	1b80      	subs	r0, r0, r6
 800372c:	42a8      	cmp	r0, r5
 800372e:	d8ea      	bhi.n	8003706 <HAL_I2C_IsDeviceReady+0x96>
 8003730:	2d00      	cmp	r5, #0
 8003732:	d1ea      	bne.n	800370a <HAL_I2C_IsDeviceReady+0x9a>
 8003734:	e7e7      	b.n	8003706 <HAL_I2C_IsDeviceReady+0x96>
      hi2c->State = HAL_I2C_STATE_READY;
 8003736:	2320      	movs	r3, #32
 8003738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	f012 0f02 	tst.w	r2, #2
 8003744:	d139      	bne.n	80037ba <HAL_I2C_IsDeviceReady+0x14a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003754:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003756:	9600      	str	r6, [sp, #0]
 8003758:	2319      	movs	r3, #25
 800375a:	2201      	movs	r2, #1
 800375c:	4659      	mov	r1, fp
 800375e:	4620      	mov	r0, r4
 8003760:	f7ff fcc2 	bl	80030e8 <I2C_WaitOnFlagUntilTimeout>
 8003764:	2800      	cmp	r0, #0
 8003766:	d153      	bne.n	8003810 <HAL_I2C_IsDeviceReady+0x1a0>
      I2C_Trials++;
 8003768:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 800376c:	45d0      	cmp	r8, sl
 800376e:	d23f      	bcs.n	80037f0 <HAL_I2C_IsDeviceReady+0x180>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003770:	6822      	ldr	r2, [r4, #0]
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003778:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	9600      	str	r6, [sp, #0]
 800377c:	462b      	mov	r3, r5
 800377e:	2200      	movs	r2, #0
 8003780:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff fcaf 	bl	80030e8 <I2C_WaitOnFlagUntilTimeout>
 800378a:	2800      	cmp	r0, #0
 800378c:	d1b0      	bne.n	80036f0 <HAL_I2C_IsDeviceReady+0x80>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8003794:	f7fe ffd8 	bl	8002748 <HAL_GetTick>
 8003798:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	6953      	ldr	r3, [r2, #20]
 800379e:	f003 0302 	and.w	r3, r3, #2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037a2:	6951      	ldr	r1, [r2, #20]
 80037a4:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037a8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	2aa0      	cmp	r2, #160	; 0xa0
 80037b0:	d0c1      	beq.n	8003736 <HAL_I2C_IsDeviceReady+0xc6>
 80037b2:	430b      	orrs	r3, r1
 80037b4:	d1bf      	bne.n	8003736 <HAL_I2C_IsDeviceReady+0xc6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037b6:	27a0      	movs	r7, #160	; 0xa0
 80037b8:	e7b5      	b.n	8003726 <HAL_I2C_IsDeviceReady+0xb6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	9303      	str	r3, [sp, #12]
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	9203      	str	r2, [sp, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	9303      	str	r3, [sp, #12]
 80037d0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d2:	9600      	str	r6, [sp, #0]
 80037d4:	2319      	movs	r3, #25
 80037d6:	2201      	movs	r2, #1
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <HAL_I2C_IsDeviceReady+0x1a4>)
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff fc84 	bl	80030e8 <I2C_WaitOnFlagUntilTimeout>
 80037e0:	b9a0      	cbnz	r0, 800380c <HAL_I2C_IsDeviceReady+0x19c>
        hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	2320      	movs	r3, #32
 80037e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80037e8:	2300      	movs	r3, #0
 80037ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 80037ee:	e74e      	b.n	800368e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	2320      	movs	r3, #32
 80037f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80037f6:	2300      	movs	r3, #0
 80037f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80037fc:	2001      	movs	r0, #1
 80037fe:	e746      	b.n	800368e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003800:	2002      	movs	r0, #2
 8003802:	e744      	b.n	800368e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003804:	2002      	movs	r0, #2
 8003806:	e742      	b.n	800368e <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 8003808:	2003      	movs	r0, #3
 800380a:	e740      	b.n	800368e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800380c:	2001      	movs	r0, #1
 800380e:	e73e      	b.n	800368e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003810:	2001      	movs	r0, #1
 8003812:	e73c      	b.n	800368e <HAL_I2C_IsDeviceReady+0x1e>
 8003814:	00100002 	.word	0x00100002
 8003818:	ffff0000 	.word	0xffff0000

0800381c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800381c:	2800      	cmp	r0, #0
 800381e:	f000 8201 	beq.w	8003c24 <HAL_RCC_OscConfig+0x408>
{
 8003822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382a:	6803      	ldr	r3, [r0, #0]
 800382c:	f013 0f01 	tst.w	r3, #1
 8003830:	d02c      	beq.n	800388c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003832:	4b9f      	ldr	r3, [pc, #636]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d01d      	beq.n	800387a <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800383e:	4b9c      	ldr	r3, [pc, #624]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b08      	cmp	r3, #8
 8003848:	d012      	beq.n	8003870 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384a:	6863      	ldr	r3, [r4, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d041      	beq.n	80038d6 <HAL_RCC_OscConfig+0xba>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d155      	bne.n	8003902 <HAL_RCC_OscConfig+0xe6>
 8003856:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800385a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e037      	b.n	80038e0 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003870:	4b8f      	ldr	r3, [pc, #572]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003878:	d0e7      	beq.n	800384a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387a:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003882:	d003      	beq.n	800388c <HAL_RCC_OscConfig+0x70>
 8003884:	6863      	ldr	r3, [r4, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 81ce 	beq.w	8003c28 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	f013 0f02 	tst.w	r3, #2
 8003892:	d075      	beq.n	8003980 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003894:	4b86      	ldr	r3, [pc, #536]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f013 0f0c 	tst.w	r3, #12
 800389c:	d05f      	beq.n	800395e <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800389e:	4b84      	ldr	r3, [pc, #528]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d054      	beq.n	8003954 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 808a 	beq.w	80039c6 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b2:	4b80      	ldr	r3, [pc, #512]	; (8003ab4 <HAL_RCC_OscConfig+0x298>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe ff46 	bl	8002748 <HAL_GetTick>
 80038bc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038be:	4e7c      	ldr	r6, [pc, #496]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 80038c0:	6833      	ldr	r3, [r6, #0]
 80038c2:	f013 0f02 	tst.w	r3, #2
 80038c6:	d175      	bne.n	80039b4 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c8:	f7fe ff3e 	bl	8002748 <HAL_GetTick>
 80038cc:	1b40      	subs	r0, r0, r5
 80038ce:	2802      	cmp	r0, #2
 80038d0:	d9f6      	bls.n	80038c0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80038d2:	2003      	movs	r0, #3
 80038d4:	e1ad      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d6:	4a76      	ldr	r2, [pc, #472]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 80038d8:	6813      	ldr	r3, [r2, #0]
 80038da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038de:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e0:	6863      	ldr	r3, [r4, #4]
 80038e2:	b343      	cbz	r3, 8003936 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80038e4:	f7fe ff30 	bl	8002748 <HAL_GetTick>
 80038e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4e71      	ldr	r6, [pc, #452]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 80038ec:	6833      	ldr	r3, [r6, #0]
 80038ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80038f2:	d1cb      	bne.n	800388c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe ff28 	bl	8002748 <HAL_GetTick>
 80038f8:	1b40      	subs	r0, r0, r5
 80038fa:	2864      	cmp	r0, #100	; 0x64
 80038fc:	d9f6      	bls.n	80038ec <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80038fe:	2003      	movs	r0, #3
 8003900:	e197      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003906:	d009      	beq.n	800391c <HAL_RCC_OscConfig+0x100>
 8003908:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e7e1      	b.n	80038e0 <HAL_RCC_OscConfig+0xc4>
 800391c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003920:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e7d4      	b.n	80038e0 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003936:	f7fe ff07 	bl	8002748 <HAL_GetTick>
 800393a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393c:	4e5c      	ldr	r6, [pc, #368]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 800393e:	6833      	ldr	r3, [r6, #0]
 8003940:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003944:	d0a2      	beq.n	800388c <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003946:	f7fe feff 	bl	8002748 <HAL_GetTick>
 800394a:	1b40      	subs	r0, r0, r5
 800394c:	2864      	cmp	r0, #100	; 0x64
 800394e:	d9f6      	bls.n	800393e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8003950:	2003      	movs	r0, #3
 8003952:	e16e      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003954:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800395c:	d1a5      	bne.n	80038aa <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f013 0f02 	tst.w	r3, #2
 8003966:	d003      	beq.n	8003970 <HAL_RCC_OscConfig+0x154>
 8003968:	6923      	ldr	r3, [r4, #16]
 800396a:	2b01      	cmp	r3, #1
 800396c:	f040 815e 	bne.w	8003c2c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4a4f      	ldr	r2, [pc, #316]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003972:	6813      	ldr	r3, [r2, #0]
 8003974:	6961      	ldr	r1, [r4, #20]
 8003976:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800397a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800397e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	f013 0f08 	tst.w	r3, #8
 8003986:	d03d      	beq.n	8003a04 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003988:	69a3      	ldr	r3, [r4, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d066      	beq.n	8003a5c <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398e:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003990:	2201      	movs	r2, #1
 8003992:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003996:	f7fe fed7 	bl	8002748 <HAL_GetTick>
 800399a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399c:	4e44      	ldr	r6, [pc, #272]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 800399e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80039a0:	f013 0f02 	tst.w	r3, #2
 80039a4:	d121      	bne.n	80039ea <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a6:	f7fe fecf 	bl	8002748 <HAL_GetTick>
 80039aa:	1b40      	subs	r0, r0, r5
 80039ac:	2802      	cmp	r0, #2
 80039ae:	d9f6      	bls.n	800399e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80039b0:	2003      	movs	r0, #3
 80039b2:	e13e      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4a3e      	ldr	r2, [pc, #248]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 80039b6:	6813      	ldr	r3, [r2, #0]
 80039b8:	6961      	ldr	r1, [r4, #20]
 80039ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80039be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e7dc      	b.n	8003980 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80039c6:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <HAL_RCC_OscConfig+0x298>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039cc:	f7fe febc 	bl	8002748 <HAL_GetTick>
 80039d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	4e37      	ldr	r6, [pc, #220]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	f013 0f02 	tst.w	r3, #2
 80039da:	d0d1      	beq.n	8003980 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039dc:	f7fe feb4 	bl	8002748 <HAL_GetTick>
 80039e0:	1b40      	subs	r0, r0, r5
 80039e2:	2802      	cmp	r0, #2
 80039e4:	d9f6      	bls.n	80039d4 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80039e6:	2003      	movs	r0, #3
 80039e8:	e123      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ea:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <HAL_RCC_OscConfig+0x29c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a33      	ldr	r2, [pc, #204]	; (8003abc <HAL_RCC_OscConfig+0x2a0>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	0a5b      	lsrs	r3, r3, #9
 80039f6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80039f8:	bf00      	nop
  }
  while (Delay --);
 80039fa:	9b01      	ldr	r3, [sp, #4]
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	9201      	str	r2, [sp, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f9      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f013 0f04 	tst.w	r3, #4
 8003a0a:	f000 809b 	beq.w	8003b44 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a16:	d134      	bne.n	8003a82 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a20:	61da      	str	r2, [r3, #28]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003a2c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCC_OscConfig+0x2a4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a36:	d026      	beq.n	8003a86 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	68e3      	ldr	r3, [r4, #12]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d042      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x2a8>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d158      	bne.n	8003af4 <HAL_RCC_OscConfig+0x2d8>
 8003a42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a46:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003a4a:	6a1a      	ldr	r2, [r3, #32]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	621a      	str	r2, [r3, #32]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	621a      	str	r2, [r3, #32]
 8003a5a:	e038      	b.n	8003ace <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8003a5c:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <HAL_RCC_OscConfig+0x298>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003a64:	f7fe fe70 	bl	8002748 <HAL_GetTick>
 8003a68:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6a:	4e11      	ldr	r6, [pc, #68]	; (8003ab0 <HAL_RCC_OscConfig+0x294>)
 8003a6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003a6e:	f013 0f02 	tst.w	r3, #2
 8003a72:	d0c7      	beq.n	8003a04 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe fe68 	bl	8002748 <HAL_GetTick>
 8003a78:	1b40      	subs	r0, r0, r5
 8003a7a:	2802      	cmp	r0, #2
 8003a7c:	d9f6      	bls.n	8003a6c <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8003a7e:	2003      	movs	r0, #3
 8003a80:	e0d7      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003a82:	2500      	movs	r5, #0
 8003a84:	e7d3      	b.n	8003a2e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a86:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <HAL_RCC_OscConfig+0x2a4>)
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003a90:	f7fe fe5a 	bl	8002748 <HAL_GetTick>
 8003a94:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a96:	4f0a      	ldr	r7, [pc, #40]	; (8003ac0 <HAL_RCC_OscConfig+0x2a4>)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003a9e:	d1cb      	bne.n	8003a38 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa0:	f7fe fe52 	bl	8002748 <HAL_GetTick>
 8003aa4:	1b80      	subs	r0, r0, r6
 8003aa6:	2864      	cmp	r0, #100	; 0x64
 8003aa8:	d9f6      	bls.n	8003a98 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8003aaa:	2003      	movs	r0, #3
 8003aac:	e0c1      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	42420000 	.word	0x42420000
 8003ab8:	2000000c 	.word	0x2000000c
 8003abc:	10624dd3 	.word	0x10624dd3
 8003ac0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac4:	4a5e      	ldr	r2, [pc, #376]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003ac6:	6a13      	ldr	r3, [r2, #32]
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ace:	68e3      	ldr	r3, [r4, #12]
 8003ad0:	b333      	cbz	r3, 8003b20 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003ad2:	f7fe fe39 	bl	8002748 <HAL_GetTick>
 8003ad6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad8:	4f59      	ldr	r7, [pc, #356]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ada:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f013 0f02 	tst.w	r3, #2
 8003ae4:	d12d      	bne.n	8003b42 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fe fe2f 	bl	8002748 <HAL_GetTick>
 8003aea:	1b80      	subs	r0, r0, r6
 8003aec:	4540      	cmp	r0, r8
 8003aee:	d9f6      	bls.n	8003ade <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003af0:	2003      	movs	r0, #3
 8003af2:	e09e      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d009      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
 8003af8:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	f022 0201 	bic.w	r2, r2, #1
 8003b00:	621a      	str	r2, [r3, #32]
 8003b02:	6a1a      	ldr	r2, [r3, #32]
 8003b04:	f022 0204 	bic.w	r2, r2, #4
 8003b08:	621a      	str	r2, [r3, #32]
 8003b0a:	e7e0      	b.n	8003ace <HAL_RCC_OscConfig+0x2b2>
 8003b0c:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	f042 0204 	orr.w	r2, r2, #4
 8003b14:	621a      	str	r2, [r3, #32]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	f042 0201 	orr.w	r2, r2, #1
 8003b1c:	621a      	str	r2, [r3, #32]
 8003b1e:	e7d6      	b.n	8003ace <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003b20:	f7fe fe12 	bl	8002748 <HAL_GetTick>
 8003b24:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b26:	4f46      	ldr	r7, [pc, #280]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f013 0f02 	tst.w	r3, #2
 8003b32:	d006      	beq.n	8003b42 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fe fe08 	bl	8002748 <HAL_GetTick>
 8003b38:	1b80      	subs	r0, r0, r6
 8003b3a:	4540      	cmp	r0, r8
 8003b3c:	d9f6      	bls.n	8003b2c <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8003b3e:	2003      	movs	r0, #3
 8003b40:	e077      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8003b42:	b9e5      	cbnz	r5, 8003b7e <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b44:	69e3      	ldr	r3, [r4, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d072      	beq.n	8003c30 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4a:	4a3d      	ldr	r2, [pc, #244]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003b4c:	6852      	ldr	r2, [r2, #4]
 8003b4e:	f002 020c 	and.w	r2, r2, #12
 8003b52:	2a08      	cmp	r2, #8
 8003b54:	d056      	beq.n	8003c04 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d017      	beq.n	8003b8a <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b3a      	ldr	r3, [pc, #232]	; (8003c44 <HAL_RCC_OscConfig+0x428>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b60:	f7fe fdf2 	bl	8002748 <HAL_GetTick>
 8003b64:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b66:	4d36      	ldr	r5, [pc, #216]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b6e:	d047      	beq.n	8003c00 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fe fdea 	bl	8002748 <HAL_GetTick>
 8003b74:	1b00      	subs	r0, r0, r4
 8003b76:	2802      	cmp	r0, #2
 8003b78:	d9f6      	bls.n	8003b68 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8003b7a:	2003      	movs	r0, #3
 8003b7c:	e059      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7e:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003b80:	69d3      	ldr	r3, [r2, #28]
 8003b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b86:	61d3      	str	r3, [r2, #28]
 8003b88:	e7dc      	b.n	8003b44 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <HAL_RCC_OscConfig+0x428>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003b90:	f7fe fdda 	bl	8002748 <HAL_GetTick>
 8003b94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	4e2a      	ldr	r6, [pc, #168]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003b98:	6833      	ldr	r3, [r6, #0]
 8003b9a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003b9e:	d006      	beq.n	8003bae <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe fdd2 	bl	8002748 <HAL_GetTick>
 8003ba4:	1b40      	subs	r0, r0, r5
 8003ba6:	2802      	cmp	r0, #2
 8003ba8:	d9f6      	bls.n	8003b98 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8003baa:	2003      	movs	r0, #3
 8003bac:	e041      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bae:	6a23      	ldr	r3, [r4, #32]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d01a      	beq.n	8003bec <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb6:	4922      	ldr	r1, [pc, #136]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003bb8:	684a      	ldr	r2, [r1, #4]
 8003bba:	6a23      	ldr	r3, [r4, #32]
 8003bbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003bbe:	4303      	orrs	r3, r0
 8003bc0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003bc8:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <HAL_RCC_OscConfig+0x428>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003bce:	f7fe fdbb 	bl	8002748 <HAL_GetTick>
 8003bd2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd4:	4d1a      	ldr	r5, [pc, #104]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bdc:	d10e      	bne.n	8003bfc <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fe fdb3 	bl	8002748 <HAL_GetTick>
 8003be2:	1b00      	subs	r0, r0, r4
 8003be4:	2802      	cmp	r0, #2
 8003be6:	d9f6      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003be8:	2003      	movs	r0, #3
 8003bea:	e022      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bec:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003bee:	6853      	ldr	r3, [r2, #4]
 8003bf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003bf4:	68a1      	ldr	r1, [r4, #8]
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	6053      	str	r3, [r2, #4]
 8003bfa:	e7dc      	b.n	8003bb6 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e018      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
 8003c00:	2000      	movs	r0, #0
 8003c02:	e016      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d017      	beq.n	8003c38 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <HAL_RCC_OscConfig+0x424>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003c10:	6a22      	ldr	r2, [r4, #32]
 8003c12:	4291      	cmp	r1, r2
 8003c14:	d112      	bne.n	8003c3c <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c16:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8003c1c:	1a18      	subs	r0, r3, r0
 8003c1e:	bf18      	it	ne
 8003c20:	2001      	movne	r0, #1
 8003c22:	e006      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
 8003c24:	2001      	movs	r0, #1
}
 8003c26:	4770      	bx	lr
        return HAL_ERROR;
 8003c28:	2001      	movs	r0, #1
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003c30:	2000      	movs	r0, #0
}
 8003c32:	b002      	add	sp, #8
 8003c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003c38:	2001      	movs	r0, #1
 8003c3a:	e7fa      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	e7f8      	b.n	8003c32 <HAL_RCC_OscConfig+0x416>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	42420000 	.word	0x42420000

08003c48 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x40>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003c4c:	f003 020c 	and.w	r2, r3, #12
 8003c50:	2a08      	cmp	r2, #8
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003c54:	480d      	ldr	r0, [pc, #52]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003c56:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c58:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x48>)
 8003c5e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003c64:	d00b      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x40>)
 8003c68:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x44>)
 8003c6c:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c70:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003c74:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003c76:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c78:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c7c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x50>)
 8003c80:	fb03 f000 	mul.w	r0, r3, r0
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	007a1200 	.word	0x007a1200
 8003c90:	08009d28 	.word	0x08009d28
 8003c94:	08009d38 	.word	0x08009d38
 8003c98:	003d0900 	.word	0x003d0900

08003c9c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	f000 80a2 	beq.w	8003de6 <HAL_RCC_ClockConfig+0x14a>
{
 8003ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003caa:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <HAL_RCC_ClockConfig+0x15c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	428b      	cmp	r3, r1
 8003cb4:	d20b      	bcs.n	8003cce <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4a50      	ldr	r2, [pc, #320]	; (8003df8 <HAL_RCC_ClockConfig+0x15c>)
 8003cb8:	6813      	ldr	r3, [r2, #0]
 8003cba:	f023 0307 	bic.w	r3, r3, #7
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	6813      	ldr	r3, [r2, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	f040 808e 	bne.w	8003dea <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	f013 0f02 	tst.w	r3, #2
 8003cd4:	d017      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd6:	f013 0f04 	tst.w	r3, #4
 8003cda:	d004      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4a47      	ldr	r2, [pc, #284]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003cde:	6853      	ldr	r3, [r2, #4]
 8003ce0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ce4:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f013 0f08 	tst.w	r3, #8
 8003cec:	d004      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cee:	4a43      	ldr	r2, [pc, #268]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003cf0:	6853      	ldr	r3, [r2, #4]
 8003cf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cf6:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4a40      	ldr	r2, [pc, #256]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003cfa:	6853      	ldr	r3, [r2, #4]
 8003cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d00:	68a1      	ldr	r1, [r4, #8]
 8003d02:	430b      	orrs	r3, r1
 8003d04:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	f013 0f01 	tst.w	r3, #1
 8003d0c:	d031      	beq.n	8003d72 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0e:	6862      	ldr	r2, [r4, #4]
 8003d10:	2a01      	cmp	r2, #1
 8003d12:	d020      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d14:	2a02      	cmp	r2, #2
 8003d16:	d025      	beq.n	8003d64 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f013 0f02 	tst.w	r3, #2
 8003d20:	d065      	beq.n	8003dee <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d22:	4936      	ldr	r1, [pc, #216]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003d24:	684b      	ldr	r3, [r1, #4]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003d2e:	f7fe fd0b 	bl	8002748 <HAL_GetTick>
 8003d32:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d34:	4f31      	ldr	r7, [pc, #196]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d36:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	6862      	ldr	r2, [r4, #4]
 8003d42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d46:	d014      	beq.n	8003d72 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d48:	f7fe fcfe 	bl	8002748 <HAL_GetTick>
 8003d4c:	1b80      	subs	r0, r0, r6
 8003d4e:	4540      	cmp	r0, r8
 8003d50:	d9f3      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003d52:	2003      	movs	r0, #3
 8003d54:	e045      	b.n	8003de2 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d5e:	d1e0      	bne.n	8003d22 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003d60:	2001      	movs	r0, #1
 8003d62:	e03e      	b.n	8003de2 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d64:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003d6c:	d1d9      	bne.n	8003d22 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003d6e:	2001      	movs	r0, #1
 8003d70:	e037      	b.n	8003de2 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d72:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_RCC_ClockConfig+0x15c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	42ab      	cmp	r3, r5
 8003d7c:	d90a      	bls.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4a1e      	ldr	r2, [pc, #120]	; (8003df8 <HAL_RCC_ClockConfig+0x15c>)
 8003d80:	6813      	ldr	r3, [r2, #0]
 8003d82:	f023 0307 	bic.w	r3, r3, #7
 8003d86:	432b      	orrs	r3, r5
 8003d88:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	42ab      	cmp	r3, r5
 8003d92:	d12e      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	f013 0f04 	tst.w	r3, #4
 8003d9a:	d006      	beq.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d9c:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003d9e:	6853      	ldr	r3, [r2, #4]
 8003da0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003da4:	68e1      	ldr	r1, [r4, #12]
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	f013 0f08 	tst.w	r3, #8
 8003db0:	d007      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003db4:	6853      	ldr	r3, [r2, #4]
 8003db6:	6921      	ldr	r1, [r4, #16]
 8003db8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003dbc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003dc0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dc2:	f7ff ff41 	bl	8003c48 <HAL_RCC_GetSysClockFreq>
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <HAL_RCC_ClockConfig+0x160>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003dce:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <HAL_RCC_ClockConfig+0x164>)
 8003dd0:	5cd3      	ldrb	r3, [r2, r3]
 8003dd2:	40d8      	lsrs	r0, r3
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_ClockConfig+0x168>)
 8003dd6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_ClockConfig+0x16c>)
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	f7fe fbae 	bl	800253c <HAL_InitTick>
  return HAL_OK;
 8003de0:	2000      	movs	r0, #0
}
 8003de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003de6:	2001      	movs	r0, #1
}
 8003de8:	4770      	bx	lr
    return HAL_ERROR;
 8003dea:	2001      	movs	r0, #1
 8003dec:	e7f9      	b.n	8003de2 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003dee:	2001      	movs	r0, #1
 8003df0:	e7f7      	b.n	8003de2 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003df2:	2001      	movs	r0, #1
 8003df4:	e7f5      	b.n	8003de2 <HAL_RCC_ClockConfig+0x146>
 8003df6:	bf00      	nop
 8003df8:	40022000 	.word	0x40022000
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08009d10 	.word	0x08009d10
 8003e04:	2000000c 	.word	0x2000000c
 8003e08:	20000014 	.word	0x20000014

08003e0c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003e14:	4a03      	ldr	r2, [pc, #12]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e16:	5cd3      	ldrb	r3, [r2, r3]
 8003e18:	4a03      	ldr	r2, [pc, #12]	; (8003e28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e1a:	6810      	ldr	r0, [r2, #0]
}
 8003e1c:	40d8      	lsrs	r0, r3
 8003e1e:	4770      	bx	lr
 8003e20:	40021000 	.word	0x40021000
 8003e24:	08009d20 	.word	0x08009d20
 8003e28:	2000000c 	.word	0x2000000c

08003e2c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003e34:	4a03      	ldr	r2, [pc, #12]	; (8003e44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	4a03      	ldr	r2, [pc, #12]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e3a:	6810      	ldr	r0, [r2, #0]
}
 8003e3c:	40d8      	lsrs	r0, r3
 8003e3e:	4770      	bx	lr
 8003e40:	40021000 	.word	0x40021000
 8003e44:	08009d20 	.word	0x08009d20
 8003e48:	2000000c 	.word	0x2000000c

08003e4c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_GetClockConfig+0x34>)
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	f002 0203 	and.w	r2, r2, #3
 8003e58:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003e60:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003e68:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e72:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <HAL_RCC_GetClockConfig+0x38>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	600b      	str	r3, [r1, #0]
}
 8003e7e:	4770      	bx	lr
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40022000 	.word	0x40022000

08003e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e90:	6803      	ldr	r3, [r0, #0]
 8003e92:	f013 0f01 	tst.w	r3, #1
 8003e96:	d036      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e98:	4b3f      	ldr	r3, [pc, #252]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003ea0:	d149      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003eaa:	61da      	str	r2, [r3, #28]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003eb6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ec0:	d03b      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec2:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003eca:	d013      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003ecc:	6862      	ldr	r2, [r4, #4]
 8003ece:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed6:	4a30      	ldr	r2, [pc, #192]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003ed8:	6a13      	ldr	r3, [r2, #32]
 8003eda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ede:	4930      	ldr	r1, [pc, #192]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003ee0:	2601      	movs	r6, #1
 8003ee2:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eec:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003eee:	f013 0f01 	tst.w	r3, #1
 8003ef2:	d136      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef4:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003ef6:	6a13      	ldr	r3, [r2, #32]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	6861      	ldr	r1, [r4, #4]
 8003efe:	430b      	orrs	r3, r1
 8003f00:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f02:	2d00      	cmp	r5, #0
 8003f04:	d13e      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	f013 0f02 	tst.w	r3, #2
 8003f0c:	d006      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f0e:	4a22      	ldr	r2, [pc, #136]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003f10:	6853      	ldr	r3, [r2, #4]
 8003f12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f16:	68a1      	ldr	r1, [r4, #8]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f1c:	6823      	ldr	r3, [r4, #0]
 8003f1e:	f013 0f10 	tst.w	r3, #16
 8003f22:	d034      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f24:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003f26:	6853      	ldr	r3, [r2, #4]
 8003f28:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003f2c:	68e1      	ldr	r1, [r4, #12]
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f32:	2000      	movs	r0, #0
 8003f34:	e02c      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003f36:	2500      	movs	r5, #0
 8003f38:	e7be      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3a:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003f3c:	6813      	ldr	r3, [r2, #0]
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f42:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003f44:	f7fe fc00 	bl	8002748 <HAL_GetTick>
 8003f48:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4f14      	ldr	r7, [pc, #80]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f52:	d1b6      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fe fbf8 	bl	8002748 <HAL_GetTick>
 8003f58:	1b80      	subs	r0, r0, r6
 8003f5a:	2864      	cmp	r0, #100	; 0x64
 8003f5c:	d9f6      	bls.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003f5e:	2003      	movs	r0, #3
 8003f60:	e016      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003f62:	f7fe fbf1 	bl	8002748 <HAL_GetTick>
 8003f66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4f0b      	ldr	r7, [pc, #44]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f013 0f02 	tst.w	r3, #2
 8003f74:	d1be      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fe fbe7 	bl	8002748 <HAL_GetTick>
 8003f7a:	1b80      	subs	r0, r0, r6
 8003f7c:	4540      	cmp	r0, r8
 8003f7e:	d9f6      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003f80:	2003      	movs	r0, #3
 8003f82:	e005      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f84:	69d3      	ldr	r3, [r2, #28]
 8003f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	61d3      	str	r3, [r2, #28]
 8003f8c:	e7bb      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003f8e:	2000      	movs	r0, #0
}
 8003f90:	b002      	add	sp, #8
 8003f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	42420000 	.word	0x42420000

08003fa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003fa4:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003fa6:	2802      	cmp	r0, #2
 8003fa8:	d050      	beq.n	800404c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8003faa:	2810      	cmp	r0, #16
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8003fae:	2801      	cmp	r0, #1
 8003fb0:	d028      	beq.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003fb2:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003fb4:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8003fb6:	4b2c      	ldr	r3, [pc, #176]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003fb8:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003fc0:	d0f8      	beq.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fc2:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003fc6:	4929      	ldr	r1, [pc, #164]	; (800406c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8003fc8:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fca:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003fce:	d015      	beq.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fd0:	4b25      	ldr	r3, [pc, #148]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8003fda:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8003fde:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fe2:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003fee:	d1e1      	bne.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8003ff0:	0040      	lsls	r0, r0, #1
 8003ff2:	4b21      	ldr	r3, [pc, #132]	; (8004078 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8003ff4:	fba3 3000 	umull	r3, r0, r3, r0
 8003ff8:	0840      	lsrs	r0, r0, #1
 8003ffa:	e7db      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003ffe:	fb03 f000 	mul.w	r0, r3, r0
 8004002:	e7f0      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8004004:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004008:	f240 3202 	movw	r2, #770	; 0x302
 800400c:	401a      	ands	r2, r3
 800400e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004012:	d026      	beq.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401c:	d004      	beq.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800401e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004024:	2000      	movs	r0, #0
  return (frequency);
 8004026:	e7c5      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 800402a:	6a58      	ldr	r0, [r3, #36]	; 0x24
        frequency = LSI_VALUE;
 800402c:	f010 0002 	ands.w	r0, r0, #2
 8004030:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004034:	bf18      	it	ne
 8004036:	4618      	movne	r0, r3
 8004038:	e7bc      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 800403c:	6818      	ldr	r0, [r3, #0]
        frequency = HSE_VALUE / 128U;
 800403e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004042:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004046:	bf18      	it	ne
 8004048:	4618      	movne	r0, r3
 800404a:	e7b3      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800404c:	f7ff feee 	bl	8003e2c <HAL_RCC_GetPCLK2Freq>
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004058:	3301      	adds	r3, #1
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004060:	e7a8      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 8004062:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004066:	e7a5      	b.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8004068:	40021000 	.word	0x40021000
 800406c:	08009d3c 	.word	0x08009d3c
 8004070:	08009d4c 	.word	0x08009d4c
 8004074:	007a1200 	.word	0x007a1200
 8004078:	aaaaaaab 	.word	0xaaaaaaab
 800407c:	003d0900 	.word	0x003d0900

08004080 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	4681      	mov	r9, r0
 8004088:	460f      	mov	r7, r1
 800408a:	4616      	mov	r6, r2
 800408c:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800408e:	f7fe fb5b 	bl	8002748 <HAL_GetTick>
 8004092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004094:	442b      	add	r3, r5
 8004096:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 800409a:	f7fe fb55 	bl	8002748 <HAL_GetTick>
 800409e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80040a8:	fb08 f303 	mul.w	r3, r8, r3
 80040ac:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040ae:	f8d9 2000 	ldr.w	r2, [r9]
 80040b2:	6894      	ldr	r4, [r2, #8]
 80040b4:	ea37 0404 	bics.w	r4, r7, r4
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	42b3      	cmp	r3, r6
 80040c0:	d044      	beq.n	800414c <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80040c6:	d0f4      	beq.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c8:	f7fe fb3e 	bl	8002748 <HAL_GetTick>
 80040cc:	eba0 000a 	sub.w	r0, r0, sl
 80040d0:	4540      	cmp	r0, r8
 80040d2:	d207      	bcs.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040d4:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf08      	it	eq
 80040da:	4698      	moveq	r8, r3
      }
      count--;
 80040dc:	9b01      	ldr	r3, [sp, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	e7e4      	b.n	80040ae <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040e4:	f8d9 2000 	ldr.w	r2, [r9]
 80040e8:	6853      	ldr	r3, [r2, #4]
 80040ea:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80040ee:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80040f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f8:	d00c      	beq.n	8004114 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040fa:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80040fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004102:	d016      	beq.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8004104:	2301      	movs	r3, #1
 8004106:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800410a:	2300      	movs	r3, #0
 800410c:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8004110:	2003      	movs	r0, #3
 8004112:	e01c      	b.n	800414e <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004114:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411c:	d002      	beq.n	8004124 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d1ea      	bne.n	80040fa <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004124:	f8d9 2000 	ldr.w	r2, [r9]
 8004128:	6813      	ldr	r3, [r2, #0]
 800412a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	e7e3      	b.n	80040fa <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004132:	f8d9 2000 	ldr.w	r2, [r9]
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	f8d9 2000 	ldr.w	r2, [r9]
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e7db      	b.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 800414c:	2000      	movs	r0, #0
}
 800414e:	b002      	add	sp, #8
 8004150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004154:	2000000c 	.word	0x2000000c

08004158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b510      	push	{r4, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	4604      	mov	r4, r0
 800415e:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004160:	9200      	str	r2, [sp, #0]
 8004162:	2200      	movs	r2, #0
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	f7ff ff8b 	bl	8004080 <SPI_WaitFlagStateUntilTimeout>
 800416a:	b908      	cbnz	r0, 8004170 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800416c:	b002      	add	sp, #8
 800416e:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004170:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8004178:	2003      	movs	r0, #3
 800417a:	e7f7      	b.n	800416c <SPI_EndRxTxTransaction+0x14>

0800417c <SPI_EndRxTransaction>:
{
 800417c:	b510      	push	{r4, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	4604      	mov	r4, r0
 8004182:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004184:	6841      	ldr	r1, [r0, #4]
 8004186:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800418a:	d008      	beq.n	800419e <SPI_EndRxTransaction+0x22>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800418c:	9200      	str	r2, [sp, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	4620      	mov	r0, r4
 8004194:	f7ff ff74 	bl	8004080 <SPI_WaitFlagStateUntilTimeout>
 8004198:	bb18      	cbnz	r0, 80041e2 <SPI_EndRxTransaction+0x66>
}
 800419a:	b002      	add	sp, #8
 800419c:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419e:	6881      	ldr	r1, [r0, #8]
 80041a0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80041a4:	d002      	beq.n	80041ac <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80041aa:	d1ef      	bne.n	800418c <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80041ac:	6820      	ldr	r0, [r4, #0]
 80041ae:	6801      	ldr	r1, [r0, #0]
 80041b0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80041b4:	6001      	str	r1, [r0, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80041b6:	6861      	ldr	r1, [r4, #4]
 80041b8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80041bc:	d1e6      	bne.n	800418c <SPI_EndRxTransaction+0x10>
 80041be:	68a1      	ldr	r1, [r4, #8]
 80041c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80041c4:	d1e2      	bne.n	800418c <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041c6:	9200      	str	r2, [sp, #0]
 80041c8:	2200      	movs	r2, #0
 80041ca:	2101      	movs	r1, #1
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7ff ff57 	bl	8004080 <SPI_WaitFlagStateUntilTimeout>
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d0e1      	beq.n	800419a <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041d8:	f043 0320 	orr.w	r3, r3, #32
 80041dc:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80041de:	2003      	movs	r0, #3
 80041e0:	e7db      	b.n	800419a <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041e4:	f043 0320 	orr.w	r3, r3, #32
 80041e8:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80041ea:	2003      	movs	r0, #3
 80041ec:	e7d5      	b.n	800419a <SPI_EndRxTransaction+0x1e>

080041ee <HAL_SPI_Init>:
  if (hspi == NULL)
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d056      	beq.n	80042a0 <HAL_SPI_Init+0xb2>
{
 80041f2:	b510      	push	{r4, lr}
 80041f4:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041f8:	b933      	cbnz	r3, 8004208 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041fa:	6843      	ldr	r3, [r0, #4]
 80041fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004200:	d005      	beq.n	800420e <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004202:	2300      	movs	r3, #0
 8004204:	61c3      	str	r3, [r0, #28]
 8004206:	e002      	b.n	800420e <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004208:	2300      	movs	r3, #0
 800420a:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800420c:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420e:	2300      	movs	r3, #0
 8004210:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004212:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004216:	2b00      	cmp	r3, #0
 8004218:	d03c      	beq.n	8004294 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800421a:	2302      	movs	r3, #2
 800421c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004220:	6822      	ldr	r2, [r4, #0]
 8004222:	6813      	ldr	r3, [r2, #0]
 8004224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004228:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004232:	68a1      	ldr	r1, [r4, #8]
 8004234:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004238:	430b      	orrs	r3, r1
 800423a:	68e1      	ldr	r1, [r4, #12]
 800423c:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004240:	430b      	orrs	r3, r1
 8004242:	6921      	ldr	r1, [r4, #16]
 8004244:	f001 0102 	and.w	r1, r1, #2
 8004248:	430b      	orrs	r3, r1
 800424a:	6961      	ldr	r1, [r4, #20]
 800424c:	f001 0101 	and.w	r1, r1, #1
 8004250:	430b      	orrs	r3, r1
 8004252:	69a1      	ldr	r1, [r4, #24]
 8004254:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8004258:	430b      	orrs	r3, r1
 800425a:	69e1      	ldr	r1, [r4, #28]
 800425c:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004260:	430b      	orrs	r3, r1
 8004262:	6a21      	ldr	r1, [r4, #32]
 8004264:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004268:	430b      	orrs	r3, r1
 800426a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800426c:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004270:	430b      	orrs	r3, r1
 8004272:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	8b63      	ldrh	r3, [r4, #26]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800427e:	6822      	ldr	r2, [r4, #0]
 8004280:	69d3      	ldr	r3, [r2, #28]
 8004282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004286:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004288:	2000      	movs	r0, #0
 800428a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800428c:	2301      	movs	r3, #1
 800428e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004292:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004294:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004298:	4620      	mov	r0, r4
 800429a:	f7fe f8bf 	bl	800241c <HAL_SPI_MspInit>
 800429e:	e7bc      	b.n	800421a <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80042a0:	2001      	movs	r0, #1
}
 80042a2:	4770      	bx	lr

080042a4 <HAL_SPI_Transmit>:
{
 80042a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042a8:	b083      	sub	sp, #12
 80042aa:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80042ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	f000 80d6 	beq.w	8004462 <HAL_SPI_Transmit+0x1be>
 80042b6:	4604      	mov	r4, r0
 80042b8:	4688      	mov	r8, r1
 80042ba:	4691      	mov	r9, r2
 80042bc:	2301      	movs	r3, #1
 80042be:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80042c2:	f7fe fa41 	bl	8002748 <HAL_GetTick>
 80042c6:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80042c8:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80042cc:	b2f6      	uxtb	r6, r6
 80042ce:	2e01      	cmp	r6, #1
 80042d0:	f040 80bf 	bne.w	8004452 <HAL_SPI_Transmit+0x1ae>
  if ((pData == NULL) || (Size == 0U))
 80042d4:	f1b8 0f00 	cmp.w	r8, #0
 80042d8:	f000 80bc 	beq.w	8004454 <HAL_SPI_Transmit+0x1b0>
 80042dc:	f1b9 0f00 	cmp.w	r9, #0
 80042e0:	f000 80b8 	beq.w	8004454 <HAL_SPI_Transmit+0x1b0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042e4:	2303      	movs	r3, #3
 80042e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042ee:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042f2:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042f6:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042fa:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042fc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004300:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004302:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004304:	68a3      	ldr	r3, [r4, #8]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430a:	d039      	beq.n	8004380 <HAL_SPI_Transmit+0xdc>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004314:	d103      	bne.n	800431e <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800431c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004324:	d037      	beq.n	8004396 <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	b113      	cbz	r3, 8004330 <HAL_SPI_Transmit+0x8c>
 800432a:	f1b9 0f01 	cmp.w	r9, #1
 800432e:	d10a      	bne.n	8004346 <HAL_SPI_Transmit+0xa2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004338:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800433a:	3301      	adds	r3, #1
 800433c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800433e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004340:	3b01      	subs	r3, #1
 8004342:	b29b      	uxth	r3, r3
 8004344:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004346:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d166      	bne.n	800441c <HAL_SPI_Transmit+0x178>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800434e:	463a      	mov	r2, r7
 8004350:	4629      	mov	r1, r5
 8004352:	4620      	mov	r0, r4
 8004354:	f7ff ff00 	bl	8004158 <SPI_EndRxTxTransaction>
 8004358:	b108      	cbz	r0, 800435e <HAL_SPI_Transmit+0xba>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800435a:	2320      	movs	r3, #32
 800435c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800435e:	68a3      	ldr	r3, [r4, #8]
 8004360:	b933      	cbnz	r3, 8004370 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	9201      	str	r2, [sp, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004370:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004372:	2b00      	cmp	r3, #0
 8004374:	d16e      	bne.n	8004454 <HAL_SPI_Transmit+0x1b0>
    hspi->State = HAL_SPI_STATE_READY;
 8004376:	2301      	movs	r3, #1
 8004378:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 800437c:	2600      	movs	r6, #0
 800437e:	e069      	b.n	8004454 <HAL_SPI_Transmit+0x1b0>
    __HAL_SPI_DISABLE(hspi);
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004388:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	6813      	ldr	r3, [r2, #0]
 800438e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	e7ba      	b.n	800430c <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004396:	6863      	ldr	r3, [r4, #4]
 8004398:	b113      	cbz	r3, 80043a0 <HAL_SPI_Transmit+0xfc>
 800439a:	f1b9 0f01 	cmp.w	r9, #1
 800439e:	d10a      	bne.n	80043b6 <HAL_SPI_Transmit+0x112>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80043a4:	8812      	ldrh	r2, [r2, #0]
 80043a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043aa:	3302      	adds	r3, #2
 80043ac:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80043ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80043b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	b963      	cbnz	r3, 80043d6 <HAL_SPI_Transmit+0x132>
 80043bc:	e7c7      	b.n	800434e <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043be:	f7fe f9c3 	bl	8002748 <HAL_GetTick>
 80043c2:	1bc0      	subs	r0, r0, r7
 80043c4:	42a8      	cmp	r0, r5
 80043c6:	d316      	bcc.n	80043f6 <HAL_SPI_Transmit+0x152>
 80043c8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80043cc:	d115      	bne.n	80043fa <HAL_SPI_Transmit+0x156>
    while (hspi->TxXferCount > 0U)
 80043ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0bb      	beq.n	800434e <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	f012 0f02 	tst.w	r2, #2
 80043de:	d0ee      	beq.n	80043be <HAL_SPI_Transmit+0x11a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80043e2:	8812      	ldrh	r2, [r2, #0]
 80043e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043e8:	3302      	adds	r3, #2
 80043ea:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80043ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80043f4:	e7eb      	b.n	80043ce <HAL_SPI_Transmit+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f6:	2d00      	cmp	r5, #0
 80043f8:	d1e9      	bne.n	80043ce <HAL_SPI_Transmit+0x12a>
          hspi->State = HAL_SPI_STATE_READY;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004400:	2603      	movs	r6, #3
          goto error;
 8004402:	e027      	b.n	8004454 <HAL_SPI_Transmit+0x1b0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004404:	f7fe f9a0 	bl	8002748 <HAL_GetTick>
 8004408:	1bc0      	subs	r0, r0, r7
 800440a:	42a8      	cmp	r0, r5
 800440c:	d31a      	bcc.n	8004444 <HAL_SPI_Transmit+0x1a0>
 800440e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004412:	d119      	bne.n	8004448 <HAL_SPI_Transmit+0x1a4>
    while (hspi->TxXferCount > 0U)
 8004414:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8004416:	b289      	uxth	r1, r1
 8004418:	2900      	cmp	r1, #0
 800441a:	d098      	beq.n	800434e <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	f012 0f02 	tst.w	r2, #2
 8004424:	d0ee      	beq.n	8004404 <HAL_SPI_Transmit+0x160>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004426:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800442c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800442e:	3301      	adds	r3, #1
 8004430:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004432:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8004436:	f10c 3cff 	add.w	ip, ip, #4294967295
 800443a:	fa1f fc8c 	uxth.w	ip, ip
 800443e:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8004442:	e7e7      	b.n	8004414 <HAL_SPI_Transmit+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004444:	2d00      	cmp	r5, #0
 8004446:	d1e5      	bne.n	8004414 <HAL_SPI_Transmit+0x170>
          hspi->State = HAL_SPI_STATE_READY;
 8004448:	2301      	movs	r3, #1
 800444a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 800444e:	2603      	movs	r6, #3
          goto error;
 8004450:	e000      	b.n	8004454 <HAL_SPI_Transmit+0x1b0>
    errorcode = HAL_BUSY;
 8004452:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8004454:	2300      	movs	r3, #0
 8004456:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800445a:	4630      	mov	r0, r6
 800445c:	b003      	add	sp, #12
 800445e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8004462:	2602      	movs	r6, #2
 8004464:	e7f9      	b.n	800445a <HAL_SPI_Transmit+0x1b6>

08004466 <HAL_SPI_TransmitReceive>:
{
 8004466:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800446a:	b083      	sub	sp, #12
 800446c:	461f      	mov	r7, r3
 800446e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004470:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004474:	2b01      	cmp	r3, #1
 8004476:	f000 8115 	beq.w	80046a4 <HAL_SPI_TransmitReceive+0x23e>
 800447a:	4604      	mov	r4, r0
 800447c:	4688      	mov	r8, r1
 800447e:	4691      	mov	r9, r2
 8004480:	2301      	movs	r3, #1
 8004482:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004486:	f7fe f95f 	bl	8002748 <HAL_GetTick>
 800448a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800448c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004490:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8004492:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004494:	2801      	cmp	r0, #1
 8004496:	d00a      	beq.n	80044ae <HAL_SPI_TransmitReceive+0x48>
 8004498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449c:	f040 80ef 	bne.w	800467e <HAL_SPI_TransmitReceive+0x218>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044a0:	68a3      	ldr	r3, [r4, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 80f2 	bne.w	800468c <HAL_SPI_TransmitReceive+0x226>
 80044a8:	2804      	cmp	r0, #4
 80044aa:	f040 80f1 	bne.w	8004690 <HAL_SPI_TransmitReceive+0x22a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044ae:	f1b8 0f00 	cmp.w	r8, #0
 80044b2:	f000 80ef 	beq.w	8004694 <HAL_SPI_TransmitReceive+0x22e>
 80044b6:	f1b9 0f00 	cmp.w	r9, #0
 80044ba:	f000 80ed 	beq.w	8004698 <HAL_SPI_TransmitReceive+0x232>
 80044be:	2f00      	cmp	r7, #0
 80044c0:	f000 80ec 	beq.w	800469c <HAL_SPI_TransmitReceive+0x236>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044c4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044cc:	bf1c      	itt	ne
 80044ce:	2305      	movne	r3, #5
 80044d0:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044d4:	2300      	movs	r3, #0
 80044d6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044d8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044dc:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044de:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044e0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044e4:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044e6:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80044e8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044ea:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044f4:	d103      	bne.n	80044fe <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044fc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044fe:	68e3      	ldr	r3, [r4, #12]
 8004500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004504:	d012      	beq.n	800452c <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004506:	6863      	ldr	r3, [r4, #4]
 8004508:	b10b      	cbz	r3, 800450e <HAL_SPI_TransmitReceive+0xa8>
 800450a:	2f01      	cmp	r7, #1
 800450c:	d10a      	bne.n	8004524 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004512:	7812      	ldrb	r2, [r2, #0]
 8004514:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004518:	3301      	adds	r3, #1
 800451a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800451c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800451e:	3b01      	subs	r3, #1
 8004520:	b29b      	uxth	r3, r3
 8004522:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004524:	2701      	movs	r7, #1
        txallowed = 0U;
 8004526:	f04f 0800 	mov.w	r8, #0
 800452a:	e06b      	b.n	8004604 <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452c:	6863      	ldr	r3, [r4, #4]
 800452e:	b10b      	cbz	r3, 8004534 <HAL_SPI_TransmitReceive+0xce>
 8004530:	2f01      	cmp	r7, #1
 8004532:	d10a      	bne.n	800454a <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004538:	8812      	ldrh	r2, [r2, #0]
 800453a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800453c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800453e:	3302      	adds	r3, #2
 8004540:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004542:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004544:	3b01      	subs	r3, #1
 8004546:	b29b      	uxth	r3, r3
 8004548:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800454a:	2701      	movs	r7, #1
        txallowed = 0U;
 800454c:	f04f 0800 	mov.w	r8, #0
 8004550:	e01a      	b.n	8004588 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004552:	6822      	ldr	r2, [r4, #0]
 8004554:	6893      	ldr	r3, [r2, #8]
 8004556:	f013 0301 	ands.w	r3, r3, #1
 800455a:	d00d      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x112>
 800455c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800455e:	b289      	uxth	r1, r1
 8004560:	b151      	cbz	r1, 8004578 <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004562:	68d1      	ldr	r1, [r2, #12]
 8004564:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004566:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004568:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800456a:	3202      	adds	r2, #2
 800456c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800456e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004570:	3a01      	subs	r2, #1
 8004572:	b292      	uxth	r2, r2
 8004574:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004576:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004578:	f7fe f8e6 	bl	8002748 <HAL_GetTick>
 800457c:	1b80      	subs	r0, r0, r6
 800457e:	42a8      	cmp	r0, r5
 8004580:	d302      	bcc.n	8004588 <HAL_SPI_TransmitReceive+0x122>
 8004582:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004586:	d11d      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004588:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800458a:	b29b      	uxth	r3, r3
 800458c:	b91b      	cbnz	r3, 8004596 <HAL_SPI_TransmitReceive+0x130>
 800458e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d05a      	beq.n	800464c <HAL_SPI_TransmitReceive+0x1e6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	f012 0f02 	tst.w	r2, #2
 800459e:	d0d8      	beq.n	8004552 <HAL_SPI_TransmitReceive+0xec>
 80045a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80045a2:	b292      	uxth	r2, r2
 80045a4:	2a00      	cmp	r2, #0
 80045a6:	d0d4      	beq.n	8004552 <HAL_SPI_TransmitReceive+0xec>
 80045a8:	2f00      	cmp	r7, #0
 80045aa:	d0d2      	beq.n	8004552 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80045ae:	8812      	ldrh	r2, [r2, #0]
 80045b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045b4:	3302      	adds	r3, #2
 80045b6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80045b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29b      	uxth	r3, r3
 80045be:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80045c0:	4647      	mov	r7, r8
 80045c2:	e7c6      	b.n	8004552 <HAL_SPI_TransmitReceive+0xec>
        hspi->State = HAL_SPI_STATE_READY;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 80045ca:	2003      	movs	r0, #3
        goto error;
 80045cc:	e058      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	6893      	ldr	r3, [r2, #8]
 80045d2:	f013 0301 	ands.w	r3, r3, #1
 80045d6:	d00d      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x18e>
 80045d8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80045da:	b289      	uxth	r1, r1
 80045dc:	b151      	cbz	r1, 80045f4 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045de:	68d1      	ldr	r1, [r2, #12]
 80045e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045e2:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 80045e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80045e6:	3201      	adds	r2, #1
 80045e8:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80045ea:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80045ec:	3a01      	subs	r2, #1
 80045ee:	b292      	uxth	r2, r2
 80045f0:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 80045f2:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045f4:	f7fe f8a8 	bl	8002748 <HAL_GetTick>
 80045f8:	1b83      	subs	r3, r0, r6
 80045fa:	42ab      	cmp	r3, r5
 80045fc:	d31f      	bcc.n	800463e <HAL_SPI_TransmitReceive+0x1d8>
 80045fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004602:	d11e      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x1dc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004604:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004606:	b29b      	uxth	r3, r3
 8004608:	b913      	cbnz	r3, 8004610 <HAL_SPI_TransmitReceive+0x1aa>
 800460a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800460c:	b29b      	uxth	r3, r3
 800460e:	b1eb      	cbz	r3, 800464c <HAL_SPI_TransmitReceive+0x1e6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	f012 0f02 	tst.w	r2, #2
 8004618:	d0d9      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x168>
 800461a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800461c:	b292      	uxth	r2, r2
 800461e:	2a00      	cmp	r2, #0
 8004620:	d0d5      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x168>
 8004622:	2f01      	cmp	r7, #1
 8004624:	d1d3      	bne.n	80045ce <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004626:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004628:	7812      	ldrb	r2, [r2, #0]
 800462a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800462c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800462e:	3301      	adds	r3, #1
 8004630:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004632:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004634:	3b01      	subs	r3, #1
 8004636:	b29b      	uxth	r3, r3
 8004638:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800463a:	4647      	mov	r7, r8
 800463c:	e7c7      	b.n	80045ce <HAL_SPI_TransmitReceive+0x168>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800463e:	2d00      	cmp	r5, #0
 8004640:	d1e0      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x19e>
        hspi->State = HAL_SPI_STATE_READY;
 8004642:	2301      	movs	r3, #1
 8004644:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8004648:	2003      	movs	r0, #3
        goto error;
 800464a:	e019      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800464c:	4632      	mov	r2, r6
 800464e:	4629      	mov	r1, r5
 8004650:	4620      	mov	r0, r4
 8004652:	f7ff fd81 	bl	8004158 <SPI_EndRxTxTransaction>
 8004656:	b970      	cbnz	r0, 8004676 <HAL_SPI_TransmitReceive+0x210>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004658:	68a3      	ldr	r3, [r4, #8]
 800465a:	b933      	cbnz	r3, 800466a <HAL_SPI_TransmitReceive+0x204>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	9201      	str	r2, [sp, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800466a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800466c:	b9c3      	cbnz	r3, 80046a0 <HAL_SPI_TransmitReceive+0x23a>
    hspi->State = HAL_SPI_STATE_READY;
 800466e:	2301      	movs	r3, #1
 8004670:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8004674:	e004      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004676:	2320      	movs	r3, #32
 8004678:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800467a:	2001      	movs	r0, #1
    goto error;
 800467c:	e000      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_BUSY;
 800467e:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8004680:	2300      	movs	r3, #0
 8004682:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004686:	b003      	add	sp, #12
 8004688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 800468c:	2002      	movs	r0, #2
 800468e:	e7f7      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
 8004690:	2002      	movs	r0, #2
 8004692:	e7f5      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 8004694:	2001      	movs	r0, #1
 8004696:	e7f3      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
 8004698:	2001      	movs	r0, #1
 800469a:	e7f1      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
 800469c:	2001      	movs	r0, #1
 800469e:	e7ef      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 80046a0:	2001      	movs	r0, #1
 80046a2:	e7ed      	b.n	8004680 <HAL_SPI_TransmitReceive+0x21a>
  __HAL_LOCK(hspi);
 80046a4:	2002      	movs	r0, #2
 80046a6:	e7ee      	b.n	8004686 <HAL_SPI_TransmitReceive+0x220>

080046a8 <HAL_SPI_Receive>:
{
 80046a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046ac:	b083      	sub	sp, #12
 80046ae:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80046b0:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 80046b4:	b2ed      	uxtb	r5, r5
 80046b6:	2d01      	cmp	r5, #1
 80046b8:	f040 80b7 	bne.w	800482a <HAL_SPI_Receive+0x182>
 80046bc:	4688      	mov	r8, r1
 80046be:	4691      	mov	r9, r2
 80046c0:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046c2:	6843      	ldr	r3, [r0, #4]
 80046c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c8:	d045      	beq.n	8004756 <HAL_SPI_Receive+0xae>
  __HAL_LOCK(hspi);
 80046ca:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	f000 80b3 	beq.w	800483a <HAL_SPI_Receive+0x192>
 80046d4:	2301      	movs	r3, #1
 80046d6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80046da:	f7fe f835 	bl	8002748 <HAL_GetTick>
 80046de:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 80046e0:	f1b8 0f00 	cmp.w	r8, #0
 80046e4:	f000 80a2 	beq.w	800482c <HAL_SPI_Receive+0x184>
 80046e8:	f1b9 0f00 	cmp.w	r9, #0
 80046ec:	f000 809e 	beq.w	800482c <HAL_SPI_Receive+0x184>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046f0:	2304      	movs	r3, #4
 80046f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046fa:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046fe:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004702:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004706:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004708:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800470a:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800470c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800470e:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004710:	68a3      	ldr	r3, [r4, #8]
 8004712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004716:	d02b      	beq.n	8004770 <HAL_SPI_Receive+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004720:	d103      	bne.n	800472a <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004728:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800472a:	68e3      	ldr	r3, [r4, #12]
 800472c:	b35b      	cbz	r3, 8004786 <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 800472e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d15e      	bne.n	80047f4 <HAL_SPI_Receive+0x14c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004736:	463a      	mov	r2, r7
 8004738:	4631      	mov	r1, r6
 800473a:	4620      	mov	r0, r4
 800473c:	f7ff fd1e 	bl	800417c <SPI_EndRxTransaction>
 8004740:	b108      	cbz	r0, 8004746 <HAL_SPI_Receive+0x9e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004742:	2320      	movs	r3, #32
 8004744:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004746:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004748:	2b00      	cmp	r3, #0
 800474a:	d16f      	bne.n	800482c <HAL_SPI_Receive+0x184>
    hspi->State = HAL_SPI_STATE_READY;
 800474c:	2301      	movs	r3, #1
 800474e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004752:	2500      	movs	r5, #0
 8004754:	e06a      	b.n	800482c <HAL_SPI_Receive+0x184>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004756:	6883      	ldr	r3, [r0, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1b6      	bne.n	80046ca <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800475c:	2304      	movs	r3, #4
 800475e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004762:	9600      	str	r6, [sp, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	460a      	mov	r2, r1
 8004768:	f7ff fe7d 	bl	8004466 <HAL_SPI_TransmitReceive>
 800476c:	4605      	mov	r5, r0
 800476e:	e060      	b.n	8004832 <HAL_SPI_Receive+0x18a>
    __HAL_SPI_DISABLE(hspi);
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004778:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	6813      	ldr	r3, [r2, #0]
 800477e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e7c8      	b.n	8004718 <HAL_SPI_Receive+0x70>
    while (hspi->RxXferCount > 0U)
 8004786:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004788:	b29b      	uxth	r3, r3
 800478a:	b963      	cbnz	r3, 80047a6 <HAL_SPI_Receive+0xfe>
 800478c:	e7d3      	b.n	8004736 <HAL_SPI_Receive+0x8e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800478e:	f7fd ffdb 	bl	8002748 <HAL_GetTick>
 8004792:	1bc0      	subs	r0, r0, r7
 8004794:	42b0      	cmp	r0, r6
 8004796:	d31a      	bcc.n	80047ce <HAL_SPI_Receive+0x126>
 8004798:	f1b6 3fff 	cmp.w	r6, #4294967295
 800479c:	d119      	bne.n	80047d2 <HAL_SPI_Receive+0x12a>
    while (hspi->RxXferCount > 0U)
 800479e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0c7      	beq.n	8004736 <HAL_SPI_Receive+0x8e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	689a      	ldr	r2, [r3, #8]
 80047aa:	f012 0f01 	tst.w	r2, #1
 80047ae:	d0ee      	beq.n	800478e <HAL_SPI_Receive+0xe6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047b2:	7b1b      	ldrb	r3, [r3, #12]
 80047b4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80047b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047b8:	3301      	adds	r3, #1
 80047ba:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80047bc:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80047c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80047c4:	fa1f fc8c 	uxth.w	ip, ip
 80047c8:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 80047cc:	e7e7      	b.n	800479e <HAL_SPI_Receive+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ce:	2e00      	cmp	r6, #0
 80047d0:	d1e5      	bne.n	800479e <HAL_SPI_Receive+0xf6>
          hspi->State = HAL_SPI_STATE_READY;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80047d8:	2503      	movs	r5, #3
          goto error;
 80047da:	e027      	b.n	800482c <HAL_SPI_Receive+0x184>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047dc:	f7fd ffb4 	bl	8002748 <HAL_GetTick>
 80047e0:	1bc0      	subs	r0, r0, r7
 80047e2:	42b0      	cmp	r0, r6
 80047e4:	d31a      	bcc.n	800481c <HAL_SPI_Receive+0x174>
 80047e6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80047ea:	d119      	bne.n	8004820 <HAL_SPI_Receive+0x178>
    while (hspi->RxXferCount > 0U)
 80047ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0a0      	beq.n	8004736 <HAL_SPI_Receive+0x8e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	f012 0f01 	tst.w	r2, #1
 80047fc:	d0ee      	beq.n	80047dc <HAL_SPI_Receive+0x134>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004802:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004804:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004806:	3302      	adds	r3, #2
 8004808:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800480a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800480e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004812:	fa1f fc8c 	uxth.w	ip, ip
 8004816:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800481a:	e7e7      	b.n	80047ec <HAL_SPI_Receive+0x144>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800481c:	2e00      	cmp	r6, #0
 800481e:	d1e5      	bne.n	80047ec <HAL_SPI_Receive+0x144>
          hspi->State = HAL_SPI_STATE_READY;
 8004820:	2301      	movs	r3, #1
 8004822:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004826:	2503      	movs	r5, #3
          goto error;
 8004828:	e000      	b.n	800482c <HAL_SPI_Receive+0x184>
    errorcode = HAL_BUSY;
 800482a:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 800482c:	2300      	movs	r3, #0
 800482e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004832:	4628      	mov	r0, r5
 8004834:	b003      	add	sp, #12
 8004836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800483a:	2502      	movs	r5, #2
 800483c:	e7f9      	b.n	8004832 <HAL_SPI_Receive+0x18a>
	...

08004840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004842:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004844:	6a02      	ldr	r2, [r0, #32]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800484e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004850:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004854:	680d      	ldr	r5, [r1, #0]
 8004856:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004858:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800485c:	688d      	ldr	r5, [r1, #8]
 800485e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004860:	4d0b      	ldr	r5, [pc, #44]	; (8004890 <TIM_OC1_SetConfig+0x50>)
 8004862:	42a8      	cmp	r0, r5
 8004864:	d006      	beq.n	8004874 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004866:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004868:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486a:	684a      	ldr	r2, [r1, #4]
 800486c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486e:	6203      	str	r3, [r0, #32]
}
 8004870:	bc70      	pop	{r4, r5, r6}
 8004872:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004874:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004878:	68cd      	ldr	r5, [r1, #12]
 800487a:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800487c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004880:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004884:	694d      	ldr	r5, [r1, #20]
 8004886:	698e      	ldr	r6, [r1, #24]
 8004888:	4335      	orrs	r5, r6
 800488a:	432c      	orrs	r4, r5
 800488c:	e7eb      	b.n	8004866 <TIM_OC1_SetConfig+0x26>
 800488e:	bf00      	nop
 8004890:	40012c00 	.word	0x40012c00

08004894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004898:	6a02      	ldr	r2, [r0, #32]
 800489a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800489e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a8:	680d      	ldr	r5, [r1, #0]
 80048aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048b0:	688d      	ldr	r5, [r1, #8]
 80048b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048b6:	4d0c      	ldr	r5, [pc, #48]	; (80048e8 <TIM_OC3_SetConfig+0x54>)
 80048b8:	42a8      	cmp	r0, r5
 80048ba:	d006      	beq.n	80048ca <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048c0:	684a      	ldr	r2, [r1, #4]
 80048c2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c4:	6203      	str	r3, [r0, #32]
}
 80048c6:	bc70      	pop	{r4, r5, r6}
 80048c8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ce:	68cd      	ldr	r5, [r1, #12]
 80048d0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80048d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048d8:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048dc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048de:	698e      	ldr	r6, [r1, #24]
 80048e0:	4335      	orrs	r5, r6
 80048e2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80048e6:	e7e9      	b.n	80048bc <TIM_OC3_SetConfig+0x28>
 80048e8:	40012c00 	.word	0x40012c00

080048ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048f0:	6a02      	ldr	r2, [r0, #32]
 80048f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048f6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048fc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	680d      	ldr	r5, [r1, #0]
 8004902:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004906:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800490a:	688d      	ldr	r5, [r1, #8]
 800490c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	4d07      	ldr	r5, [pc, #28]	; (8004930 <TIM_OC4_SetConfig+0x44>)
 8004912:	42a8      	cmp	r0, r5
 8004914:	d006      	beq.n	8004924 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004918:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800491a:	684a      	ldr	r2, [r1, #4]
 800491c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491e:	6203      	str	r3, [r0, #32]
}
 8004920:	bc30      	pop	{r4, r5}
 8004922:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004924:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004928:	694d      	ldr	r5, [r1, #20]
 800492a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800492e:	e7f2      	b.n	8004916 <TIM_OC4_SetConfig+0x2a>
 8004930:	40012c00 	.word	0x40012c00

08004934 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004934:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b01      	cmp	r3, #1
 800493c:	d127      	bne.n	800498e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800493e:	2302      	movs	r3, #2
 8004940:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004944:	6802      	ldr	r2, [r0, #0]
 8004946:	68d3      	ldr	r3, [r2, #12]
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494e:	6803      	ldr	r3, [r0, #0]
 8004950:	4a11      	ldr	r2, [pc, #68]	; (8004998 <HAL_TIM_Base_Start_IT+0x64>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d010      	beq.n	8004978 <HAL_TIM_Base_Start_IT+0x44>
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495a:	d00d      	beq.n	8004978 <HAL_TIM_Base_Start_IT+0x44>
 800495c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004960:	4293      	cmp	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_TIM_Base_Start_IT+0x44>
 8004964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004968:	4293      	cmp	r3, r2
 800496a:	d005      	beq.n	8004978 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	f042 0201 	orr.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004974:	2000      	movs	r0, #0
 8004976:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	2a06      	cmp	r2, #6
 8004980:	d007      	beq.n	8004992 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800498a:	2000      	movs	r0, #0
 800498c:	4770      	bx	lr
    return HAL_ERROR;
 800498e:	2001      	movs	r0, #1
 8004990:	4770      	bx	lr
  return HAL_OK;
 8004992:	2000      	movs	r0, #0
}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40012c00 	.word	0x40012c00

0800499c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800499c:	6802      	ldr	r2, [r0, #0]
 800499e:	68d3      	ldr	r3, [r2, #12]
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80049a6:	6803      	ldr	r3, [r0, #0]
 80049a8:	6a19      	ldr	r1, [r3, #32]
 80049aa:	f241 1211 	movw	r2, #4369	; 0x1111
 80049ae:	4211      	tst	r1, r2
 80049b0:	d108      	bne.n	80049c4 <HAL_TIM_Base_Stop_IT+0x28>
 80049b2:	6a19      	ldr	r1, [r3, #32]
 80049b4:	f240 4244 	movw	r2, #1092	; 0x444
 80049b8:	4211      	tst	r1, r2
 80049ba:	d103      	bne.n	80049c4 <HAL_TIM_Base_Stop_IT+0x28>
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80049ca:	2000      	movs	r0, #0
 80049cc:	4770      	bx	lr

080049ce <HAL_TIM_PWM_MspInit>:
}
 80049ce:	4770      	bx	lr

080049d0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_IC_CaptureCallback>:
}
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_TriggerCallback>:
}
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIM_IRQHandler>:
{
 80049d8:	b510      	push	{r4, lr}
 80049da:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049dc:	6803      	ldr	r3, [r0, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	f012 0f02 	tst.w	r2, #2
 80049e4:	d011      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	f012 0f02 	tst.w	r2, #2
 80049ec:	d00d      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ee:	f06f 0202 	mvn.w	r2, #2
 80049f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049f4:	2301      	movs	r3, #1
 80049f6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f8:	6803      	ldr	r3, [r0, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f013 0f03 	tst.w	r3, #3
 8004a00:	d070      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	f7ff ffe6 	bl	80049d2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	2300      	movs	r3, #0
 8004a08:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	f012 0f04 	tst.w	r2, #4
 8004a12:	d012      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	f012 0f04 	tst.w	r2, #4
 8004a1a:	d00e      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a1c:	f06f 0204 	mvn.w	r2, #4
 8004a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a22:	2302      	movs	r3, #2
 8004a24:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004a2e:	d05f      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff ffce 	bl	80049d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	2300      	movs	r3, #0
 8004a38:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	f012 0f08 	tst.w	r2, #8
 8004a42:	d012      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	f012 0f08 	tst.w	r2, #8
 8004a4a:	d00e      	beq.n	8004a6a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a4c:	f06f 0208 	mvn.w	r2, #8
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a52:	2304      	movs	r3, #4
 8004a54:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f013 0f03 	tst.w	r3, #3
 8004a5e:	d04e      	beq.n	8004afe <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff ffb6 	bl	80049d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	2300      	movs	r3, #0
 8004a68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	f012 0f10 	tst.w	r2, #16
 8004a72:	d012      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	f012 0f10 	tst.w	r2, #16
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a7c:	f06f 0210 	mvn.w	r2, #16
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a82:	2308      	movs	r3, #8
 8004a84:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004a8e:	d03d      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff ff9e 	bl	80049d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	2300      	movs	r3, #0
 8004a98:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	f012 0f01 	tst.w	r2, #1
 8004aa2:	d003      	beq.n	8004aac <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	f012 0f01 	tst.w	r2, #1
 8004aaa:	d136      	bne.n	8004b1a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004abc:	d134      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ac6:	d003      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004ace:	d132      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	f012 0f20 	tst.w	r2, #32
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	f012 0f20 	tst.w	r2, #32
 8004ae0:	d130      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x16c>
}
 8004ae2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae4:	f7ff ff74 	bl	80049d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f7ff ff73 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004aee:	e78a      	b.n	8004a06 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7ff ff6d 	bl	80049d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af6:	4620      	mov	r0, r4
 8004af8:	f7ff ff6c 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004afc:	e79b      	b.n	8004a36 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7ff ff66 	bl	80049d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	4620      	mov	r0, r4
 8004b06:	f7ff ff65 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b0a:	e7ac      	b.n	8004a66 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7ff ff5f 	bl	80049d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7ff ff5e 	bl	80049d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004b18:	e7bd      	b.n	8004a96 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1a:	f06f 0201 	mvn.w	r2, #1
 8004b1e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7fc f99b 	bl	8000e5c <HAL_TIM_PeriodElapsedCallback>
 8004b26:	e7c1      	b.n	8004aac <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b2c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 fafd 	bl	800512e <HAL_TIMEx_BreakCallback>
 8004b34:	e7c3      	b.n	8004abe <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7ff ff4a 	bl	80049d6 <HAL_TIM_TriggerCallback>
 8004b42:	e7c5      	b.n	8004ad0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b44:	f06f 0220 	mvn.w	r2, #32
 8004b48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f000 faee 	bl	800512c <HAL_TIMEx_CommutCallback>
}
 8004b50:	e7c7      	b.n	8004ae2 <HAL_TIM_IRQHandler+0x10a>
	...

08004b54 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004b54:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b56:	4a25      	ldr	r2, [pc, #148]	; (8004bec <TIM_Base_SetConfig+0x98>)
 8004b58:	4290      	cmp	r0, r2
 8004b5a:	d014      	beq.n	8004b86 <TIM_Base_SetConfig+0x32>
 8004b5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004b60:	d026      	beq.n	8004bb0 <TIM_Base_SetConfig+0x5c>
 8004b62:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004b66:	4290      	cmp	r0, r2
 8004b68:	d036      	beq.n	8004bd8 <TIM_Base_SetConfig+0x84>
 8004b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b6e:	4290      	cmp	r0, r2
 8004b70:	d037      	beq.n	8004be2 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b76:	694a      	ldr	r2, [r1, #20]
 8004b78:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004b7a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b7c:	688b      	ldr	r3, [r1, #8]
 8004b7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b80:	680b      	ldr	r3, [r1, #0]
 8004b82:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b84:	e025      	b.n	8004bd2 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b8a:	684a      	ldr	r2, [r1, #4]
 8004b8c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b92:	68ca      	ldr	r2, [r1, #12]
 8004b94:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9a:	694a      	ldr	r2, [r1, #20]
 8004b9c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004b9e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba0:	688b      	ldr	r3, [r1, #8]
 8004ba2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ba4:	680b      	ldr	r3, [r1, #0]
 8004ba6:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba8:	690a      	ldr	r2, [r1, #16]
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <TIM_Base_SetConfig+0x98>)
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
 8004bae:	e010      	b.n	8004bd2 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004bb4:	684a      	ldr	r2, [r1, #4]
 8004bb6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bbc:	68ca      	ldr	r2, [r1, #12]
 8004bbe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc4:	694a      	ldr	r2, [r1, #20]
 8004bc6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004bc8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bca:	688b      	ldr	r3, [r1, #8]
 8004bcc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bce:	680b      	ldr	r3, [r1, #0]
 8004bd0:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	6143      	str	r3, [r0, #20]
}
 8004bd6:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004bdc:	684a      	ldr	r2, [r1, #4]
 8004bde:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be0:	e7ea      	b.n	8004bb8 <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004be6:	684a      	ldr	r2, [r1, #4]
 8004be8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bea:	e7e5      	b.n	8004bb8 <TIM_Base_SetConfig+0x64>
 8004bec:	40012c00 	.word	0x40012c00

08004bf0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004bf0:	b340      	cbz	r0, 8004c44 <HAL_TIM_Base_Init+0x54>
{
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004bfa:	b1f3      	cbz	r3, 8004c3a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c02:	4621      	mov	r1, r4
 8004c04:	f851 0b04 	ldr.w	r0, [r1], #4
 8004c08:	f7ff ffa4 	bl	8004b54 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004c16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004c1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004c1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004c32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004c36:	2000      	movs	r0, #0
}
 8004c38:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004c3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004c3e:	f7fd fc27 	bl	8002490 <HAL_TIM_Base_MspInit>
 8004c42:	e7db      	b.n	8004bfc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004c44:	2001      	movs	r0, #1
}
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004c48:	b340      	cbz	r0, 8004c9c <HAL_TIM_PWM_Init+0x54>
{
 8004c4a:	b510      	push	{r4, lr}
 8004c4c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c52:	b1f3      	cbz	r3, 8004c92 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	2302      	movs	r3, #2
 8004c56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004c60:	f7ff ff78 	bl	8004b54 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004c6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004c72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004c76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004c8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004c8e:	2000      	movs	r0, #0
}
 8004c90:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004c92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004c96:	f7ff fe9a 	bl	80049ce <HAL_TIM_PWM_MspInit>
 8004c9a:	e7db      	b.n	8004c54 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004c9c:	2001      	movs	r0, #1
}
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_OC2_SetConfig>:
{
 8004ca0:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8004ca2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca4:	6a02      	ldr	r2, [r0, #32]
 8004ca6:	f022 0210 	bic.w	r2, r2, #16
 8004caa:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004cac:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004cae:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb4:	680d      	ldr	r5, [r1, #0]
 8004cb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004cba:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cbe:	688d      	ldr	r5, [r1, #8]
 8004cc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc4:	4d0c      	ldr	r5, [pc, #48]	; (8004cf8 <TIM_OC2_SetConfig+0x58>)
 8004cc6:	42a8      	cmp	r0, r5
 8004cc8:	d006      	beq.n	8004cd8 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8004cca:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ccc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004cce:	684a      	ldr	r2, [r1, #4]
 8004cd0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004cd2:	6203      	str	r3, [r0, #32]
}
 8004cd4:	bc70      	pop	{r4, r5, r6}
 8004cd6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cdc:	68cd      	ldr	r5, [r1, #12]
 8004cde:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cec:	698e      	ldr	r6, [r1, #24]
 8004cee:	4335      	orrs	r5, r6
 8004cf0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004cf4:	e7e9      	b.n	8004cca <TIM_OC2_SetConfig+0x2a>
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00

08004cfc <HAL_TIM_PWM_ConfigChannel>:
{
 8004cfc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004cfe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d066      	beq.n	8004dd4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004d06:	4604      	mov	r4, r0
 8004d08:	460d      	mov	r5, r1
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004d10:	2a0c      	cmp	r2, #12
 8004d12:	d85a      	bhi.n	8004dca <HAL_TIM_PWM_ConfigChannel+0xce>
 8004d14:	e8df f002 	tbb	[pc, r2]
 8004d18:	59595907 	.word	0x59595907
 8004d1c:	5959591b 	.word	0x5959591b
 8004d20:	59595930 	.word	0x59595930
 8004d24:	44          	.byte	0x44
 8004d25:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d26:	6800      	ldr	r0, [r0, #0]
 8004d28:	f7ff fd8a 	bl	8004840 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d2c:	6822      	ldr	r2, [r4, #0]
 8004d2e:	6993      	ldr	r3, [r2, #24]
 8004d30:	f043 0308 	orr.w	r3, r3, #8
 8004d34:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d36:	6822      	ldr	r2, [r4, #0]
 8004d38:	6993      	ldr	r3, [r2, #24]
 8004d3a:	f023 0304 	bic.w	r3, r3, #4
 8004d3e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d40:	6822      	ldr	r2, [r4, #0]
 8004d42:	6993      	ldr	r3, [r2, #24]
 8004d44:	6929      	ldr	r1, [r5, #16]
 8004d46:	430b      	orrs	r3, r1
 8004d48:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2000      	movs	r0, #0
      break;
 8004d4c:	e03e      	b.n	8004dcc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d4e:	6800      	ldr	r0, [r0, #0]
 8004d50:	f7ff ffa6 	bl	8004ca0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d54:	6822      	ldr	r2, [r4, #0]
 8004d56:	6993      	ldr	r3, [r2, #24]
 8004d58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d5c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	6993      	ldr	r3, [r2, #24]
 8004d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d66:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	6993      	ldr	r3, [r2, #24]
 8004d6c:	6929      	ldr	r1, [r5, #16]
 8004d6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d72:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2000      	movs	r0, #0
      break;
 8004d76:	e029      	b.n	8004dcc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d78:	6800      	ldr	r0, [r0, #0]
 8004d7a:	f7ff fd8b 	bl	8004894 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	69d3      	ldr	r3, [r2, #28]
 8004d82:	f043 0308 	orr.w	r3, r3, #8
 8004d86:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	69d3      	ldr	r3, [r2, #28]
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	69d3      	ldr	r3, [r2, #28]
 8004d96:	6929      	ldr	r1, [r5, #16]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2000      	movs	r0, #0
      break;
 8004d9e:	e015      	b.n	8004dcc <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004da0:	6800      	ldr	r0, [r0, #0]
 8004da2:	f7ff fda3 	bl	80048ec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004da6:	6822      	ldr	r2, [r4, #0]
 8004da8:	69d3      	ldr	r3, [r2, #28]
 8004daa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004db0:	6822      	ldr	r2, [r4, #0]
 8004db2:	69d3      	ldr	r3, [r2, #28]
 8004db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004db8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	69d3      	ldr	r3, [r2, #28]
 8004dbe:	6929      	ldr	r1, [r5, #16]
 8004dc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004dc4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2000      	movs	r0, #0
      break;
 8004dc8:	e000      	b.n	8004dcc <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8004dca:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	e7fc      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0xd6>

08004dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dda:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de0:	430a      	orrs	r2, r1
 8004de2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004de6:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dea:	6082      	str	r2, [r0, #8]
}
 8004dec:	bc10      	pop	{r4}
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIM_ConfigClockSource>:
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004df2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	f000 80ad 	beq.w	8004f56 <HAL_TIM_ConfigClockSource+0x166>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	2302      	movs	r3, #2
 8004e06:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004e0a:	6802      	ldr	r2, [r0, #0]
 8004e0c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004e16:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e18:	680b      	ldr	r3, [r1, #0]
 8004e1a:	2b60      	cmp	r3, #96	; 0x60
 8004e1c:	d060      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0xf0>
 8004e1e:	d83d      	bhi.n	8004e9c <HAL_TIM_ConfigClockSource+0xac>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d079      	beq.n	8004f18 <HAL_TIM_ConfigClockSource+0x128>
 8004e24:	d91c      	bls.n	8004e60 <HAL_TIM_ConfigClockSource+0x70>
 8004e26:	2b50      	cmp	r3, #80	; 0x50
 8004e28:	d136      	bne.n	8004e98 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2a:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e2c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004e2e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004e30:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e32:	6a1a      	ldr	r2, [r3, #32]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e40:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e44:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004e48:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e4c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e4e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004e50:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e56:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004e5a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5c:	2000      	movs	r0, #0
}
 8004e5e:	e012      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d002      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x7a>
 8004e64:	d90b      	bls.n	8004e7e <HAL_TIM_ConfigClockSource+0x8e>
 8004e66:	2b30      	cmp	r3, #48	; 0x30
 8004e68:	d114      	bne.n	8004e94 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e6a:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004e6c:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004e78:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2000      	movs	r0, #0
}
 8004e7c:	e003      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004e7e:	f033 0210 	bics.w	r2, r3, #16
 8004e82:	d0f2      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x7a>
 8004e84:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004e94:	2001      	movs	r0, #1
 8004e96:	e7f6      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
 8004e98:	2001      	movs	r0, #1
 8004e9a:	e7f4      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
 8004e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea0:	d055      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x15e>
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8004ea8:	68cb      	ldr	r3, [r1, #12]
 8004eaa:	684a      	ldr	r2, [r1, #4]
 8004eac:	6889      	ldr	r1, [r1, #8]
 8004eae:	6800      	ldr	r0, [r0, #0]
 8004eb0:	f7ff ff92 	bl	8004dd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eb4:	6822      	ldr	r2, [r4, #0]
 8004eb6:	6893      	ldr	r3, [r2, #8]
 8004eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ebc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2000      	movs	r0, #0
      break;
 8004ec0:	e7e1      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004ec2:	2b70      	cmp	r3, #112	; 0x70
 8004ec4:	d145      	bne.n	8004f52 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec6:	68cb      	ldr	r3, [r1, #12]
 8004ec8:	684a      	ldr	r2, [r1, #4]
 8004eca:	6889      	ldr	r1, [r1, #8]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f7ff ff83 	bl	8004dd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ed6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004eda:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004edc:	2000      	movs	r0, #0
      break;
 8004ede:	e7d2      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee0:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004ee6:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee8:	6a19      	ldr	r1, [r3, #32]
 8004eea:	f021 0110 	bic.w	r1, r1, #16
 8004eee:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef0:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ef2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ef6:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004efa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004efe:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004f02:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f04:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f06:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004f08:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f0e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004f12:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f14:	2000      	movs	r0, #0
}
 8004f16:	e7b6      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f18:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f1a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004f1e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	f022 0201 	bic.w	r2, r2, #1
 8004f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f28:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f2a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f2e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f32:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004f36:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f3c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004f3e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f44:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004f48:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2000      	movs	r0, #0
}
 8004f4c:	e79b      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2000      	movs	r0, #0
 8004f50:	e799      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004f52:	2001      	movs	r0, #1
 8004f54:	e797      	b.n	8004e86 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8004f56:	2002      	movs	r0, #2
 8004f58:	e79b      	b.n	8004e92 <HAL_TIM_ConfigClockSource+0xa2>

08004f5a <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f5a:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f5e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f60:	f04f 0c01 	mov.w	ip, #1
 8004f64:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8004f68:	ea23 030c 	bic.w	r3, r3, ip
 8004f6c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f6e:	6a03      	ldr	r3, [r0, #32]
 8004f70:	408a      	lsls	r2, r1
 8004f72:	431a      	orrs	r2, r3
 8004f74:	6202      	str	r2, [r0, #32]
}
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_PWM_Start>:
{
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	bb01      	cbnz	r1, 8004fc2 <HAL_TIM_PWM_Start+0x4a>
 8004f80:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d152      	bne.n	8005030 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f90:	2201      	movs	r2, #1
 8004f92:	4601      	mov	r1, r0
 8004f94:	6820      	ldr	r0, [r4, #0]
 8004f96:	f7ff ffe0 	bl	8004f5a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <HAL_TIM_PWM_Start+0xc0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d034      	beq.n	800500c <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d038      	beq.n	800501a <HAL_TIM_PWM_Start+0xa2>
 8004fa8:	4a24      	ldr	r2, [pc, #144]	; (800503c <HAL_TIM_PWM_Start+0xc4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d035      	beq.n	800501a <HAL_TIM_PWM_Start+0xa2>
 8004fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d031      	beq.n	800501a <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e035      	b.n	800502e <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fc2:	2904      	cmp	r1, #4
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_TIM_PWM_Start+0x68>
 8004fc6:	2908      	cmp	r1, #8
 8004fc8:	bf0c      	ite	eq
 8004fca:	f894 3040 	ldrbeq.w	r3, [r4, #64]	; 0x40
 8004fce:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	bf18      	it	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	b143      	cbz	r3, 8004fee <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e026      	b.n	800502e <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fe0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	bf18      	it	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	e7f5      	b.n	8004fda <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fee:	2804      	cmp	r0, #4
 8004ff0:	d008      	beq.n	8005004 <HAL_TIM_PWM_Start+0x8c>
 8004ff2:	2808      	cmp	r0, #8
 8004ff4:	f04f 0302 	mov.w	r3, #2
 8004ff8:	bf0c      	ite	eq
 8004ffa:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8004ffe:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8005002:	e7c5      	b.n	8004f90 <HAL_TIM_PWM_Start+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800500a:	e7c1      	b.n	8004f90 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 800500c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800500e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005012:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	4293      	cmp	r3, r2
 8005018:	d1c3      	bne.n	8004fa2 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005020:	2a06      	cmp	r2, #6
 8005022:	d007      	beq.n	8005034 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800502c:	2000      	movs	r0, #0
}
 800502e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005030:	2001      	movs	r0, #1
 8005032:	e7fc      	b.n	800502e <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 8005034:	2000      	movs	r0, #0
 8005036:	e7fa      	b.n	800502e <HAL_TIM_PWM_Start+0xb6>
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40000400 	.word	0x40000400

08005040 <HAL_TIM_PWM_Stop>:
{
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4604      	mov	r4, r0
 8005044:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005046:	2200      	movs	r2, #0
 8005048:	6800      	ldr	r0, [r0, #0]
 800504a:	f7ff ff86 	bl	8004f5a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <HAL_TIM_PWM_Stop+0x80>)
 8005052:	429a      	cmp	r2, r3
 8005054:	d014      	beq.n	8005080 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	6a19      	ldr	r1, [r3, #32]
 800505a:	f241 1211 	movw	r2, #4369	; 0x1111
 800505e:	4211      	tst	r1, r2
 8005060:	d108      	bne.n	8005074 <HAL_TIM_PWM_Stop+0x34>
 8005062:	6a19      	ldr	r1, [r3, #32]
 8005064:	f240 4244 	movw	r2, #1092	; 0x444
 8005068:	4211      	tst	r1, r2
 800506a:	d103      	bne.n	8005074 <HAL_TIM_PWM_Stop+0x34>
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	b9ad      	cbnz	r5, 80050a2 <HAL_TIM_PWM_Stop+0x62>
 8005076:	2301      	movs	r3, #1
 8005078:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800507c:	2000      	movs	r0, #0
 800507e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005080:	6a1a      	ldr	r2, [r3, #32]
 8005082:	f241 1311 	movw	r3, #4369	; 0x1111
 8005086:	421a      	tst	r2, r3
 8005088:	d1e5      	bne.n	8005056 <HAL_TIM_PWM_Stop+0x16>
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <HAL_TIM_PWM_Stop+0x80>)
 800508c:	6a1a      	ldr	r2, [r3, #32]
 800508e:	f240 4344 	movw	r3, #1092	; 0x444
 8005092:	421a      	tst	r2, r3
 8005094:	d1df      	bne.n	8005056 <HAL_TIM_PWM_Stop+0x16>
 8005096:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <HAL_TIM_PWM_Stop+0x80>)
 8005098:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800509a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800509e:	6453      	str	r3, [r2, #68]	; 0x44
 80050a0:	e7d9      	b.n	8005056 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050a2:	2d04      	cmp	r5, #4
 80050a4:	d008      	beq.n	80050b8 <HAL_TIM_PWM_Stop+0x78>
 80050a6:	2d08      	cmp	r5, #8
 80050a8:	f04f 0301 	mov.w	r3, #1
 80050ac:	bf0c      	ite	eq
 80050ae:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 80050b2:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 80050b6:	e7e1      	b.n	800507c <HAL_TIM_PWM_Stop+0x3c>
 80050b8:	2301      	movs	r3, #1
 80050ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80050be:	e7dd      	b.n	800507c <HAL_TIM_PWM_Stop+0x3c>
 80050c0:	40012c00 	.word	0x40012c00

080050c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80050c8:	2a01      	cmp	r2, #1
 80050ca:	d02b      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80050cc:	b430      	push	{r4, r5}
 80050ce:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80050d0:	2201      	movs	r2, #1
 80050d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d6:	2202      	movs	r2, #2
 80050d8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050dc:	6804      	ldr	r4, [r0, #0]
 80050de:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e0:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e6:	680d      	ldr	r5, [r1, #0]
 80050e8:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ea:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4c0e      	ldr	r4, [pc, #56]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80050f0:	42a2      	cmp	r2, r4
 80050f2:	d00a      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80050f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80050f8:	d007      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80050fa:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80050fe:	42a2      	cmp	r2, r4
 8005100:	d003      	beq.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8005102:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005106:	42a2      	cmp	r2, r4
 8005108:	d104      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800510a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510e:	6849      	ldr	r1, [r1, #4]
 8005110:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005112:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800511a:	2000      	movs	r0, #0
 800511c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8005120:	bc30      	pop	{r4, r5}
 8005122:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005124:	2002      	movs	r0, #2
}
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00

0800512c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800512c:	4770      	bx	lr

0800512e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800512e:	4770      	bx	lr

08005130 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005130:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005134:	b9a3      	cbnz	r3, 8005160 <osKernelInitialize+0x30>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005136:	f3ef 8310 	mrs	r3, PRIMASK
 800513a:	b9a3      	cbnz	r3, 8005166 <osKernelInitialize+0x36>
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <osKernelInitialize+0x44>)
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	2802      	cmp	r0, #2
 8005142:	d004      	beq.n	800514e <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005144:	b990      	cbnz	r0, 800516c <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <osKernelInitialize+0x44>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800514c:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800514e:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf14      	ite	ne
 8005156:	f06f 0005 	mvnne.w	r0, #5
 800515a:	f04f 30ff 	moveq.w	r0, #4294967295
 800515e:	4770      	bx	lr
    stat = osErrorISR;
 8005160:	f06f 0005 	mvn.w	r0, #5
 8005164:	4770      	bx	lr
 8005166:	f06f 0005 	mvn.w	r0, #5
 800516a:	4770      	bx	lr
      stat = osError;
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000bec 	.word	0x20000bec

08005178 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005178:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800517a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800517e:	b9c3      	cbnz	r3, 80051b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005180:	f3ef 8310 	mrs	r3, PRIMASK
 8005184:	b9c3      	cbnz	r3, 80051b8 <osKernelStart+0x40>
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <osKernelStart+0x4c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d008      	beq.n	80051a0 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800518e:	2b01      	cmp	r3, #1
 8005190:	d115      	bne.n	80051be <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <osKernelStart+0x4c>)
 8005194:	2202      	movs	r2, #2
 8005196:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005198:	f001 fcfc 	bl	8006b94 <vTaskStartScheduler>
      stat = osOK;
 800519c:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800519e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051a0:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf14      	ite	ne
 80051a8:	f06f 0005 	mvnne.w	r0, #5
 80051ac:	f04f 30ff 	moveq.w	r0, #4294967295
 80051b0:	e7f5      	b.n	800519e <osKernelStart+0x26>
    stat = osErrorISR;
 80051b2:	f06f 0005 	mvn.w	r0, #5
 80051b6:	e7f2      	b.n	800519e <osKernelStart+0x26>
 80051b8:	f06f 0005 	mvn.w	r0, #5
 80051bc:	e7ef      	b.n	800519e <osKernelStart+0x26>
      stat = osError;
 80051be:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80051c2:	e7ec      	b.n	800519e <osKernelStart+0x26>
 80051c4:	20000bec 	.word	0x20000bec

080051c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ca:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051cc:	2400      	movs	r4, #0
 80051ce:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d0:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80051d4:	b9d4      	cbnz	r4, 800520c <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d6:	f3ef 8310 	mrs	r3, PRIMASK
 80051da:	b9bb      	cbnz	r3, 800520c <osThreadNew+0x44>
 80051dc:	4b2c      	ldr	r3, [pc, #176]	; (8005290 <osThreadNew+0xc8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d00f      	beq.n	8005204 <osThreadNew+0x3c>
 80051e4:	b190      	cbz	r0, 800520c <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80051e6:	2300      	movs	r3, #0
 80051e8:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d03a      	beq.n	8005266 <osThreadNew+0x9e>
      if (attr->name != NULL) {
 80051f0:	6814      	ldr	r4, [r2, #0]
 80051f2:	b174      	cbz	r4, 8005212 <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80051f4:	6993      	ldr	r3, [r2, #24]
 80051f6:	b17b      	cbz	r3, 8005218 <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 80051f8:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051fa:	3b01      	subs	r3, #1
 80051fc:	2b37      	cmp	r3, #55	; 0x37
 80051fe:	d90c      	bls.n	800521a <osThreadNew+0x52>
        return (NULL);
 8005200:	2000      	movs	r0, #0
 8005202:	e004      	b.n	800520e <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005204:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0eb      	beq.n	80051e4 <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800520c:	9804      	ldr	r0, [sp, #16]
}
 800520e:	b007      	add	sp, #28
 8005210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 8005212:	f10d 0417 	add.w	r4, sp, #23
 8005216:	e7ed      	b.n	80051f4 <osThreadNew+0x2c>
 8005218:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800521a:	6853      	ldr	r3, [r2, #4]
 800521c:	f013 0f01 	tst.w	r3, #1
 8005220:	d134      	bne.n	800528c <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 8005222:	6953      	ldr	r3, [r2, #20]
 8005224:	b113      	cbz	r3, 800522c <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 8005226:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800522a:	e001      	b.n	8005230 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 800522c:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005230:	6896      	ldr	r6, [r2, #8]
 8005232:	b18e      	cbz	r6, 8005258 <osThreadNew+0x90>
 8005234:	68d7      	ldr	r7, [r2, #12]
 8005236:	2f5f      	cmp	r7, #95	; 0x5f
 8005238:	d9e8      	bls.n	800520c <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800523a:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800523c:	2a00      	cmp	r2, #0
 800523e:	d0e5      	beq.n	800520c <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0e3      	beq.n	800520c <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005244:	9602      	str	r6, [sp, #8]
 8005246:	9201      	str	r2, [sp, #4]
 8005248:	9500      	str	r5, [sp, #0]
 800524a:	460b      	mov	r3, r1
 800524c:	4662      	mov	r2, ip
 800524e:	4621      	mov	r1, r4
 8005250:	f001 fc34 	bl	8006abc <xTaskCreateStatic>
 8005254:	9004      	str	r0, [sp, #16]
 8005256:	e7d9      	b.n	800520c <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005258:	68d3      	ldr	r3, [r2, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1d6      	bne.n	800520c <osThreadNew+0x44>
      if (mem == 0) {
 800525e:	6913      	ldr	r3, [r2, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1d3      	bne.n	800520c <osThreadNew+0x44>
 8005264:	e004      	b.n	8005270 <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 8005266:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8005268:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 800526c:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005270:	ab04      	add	r3, sp, #16
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	9500      	str	r5, [sp, #0]
 8005276:	460b      	mov	r3, r1
 8005278:	fa1f f28c 	uxth.w	r2, ip
 800527c:	4621      	mov	r1, r4
 800527e:	f001 fc57 	bl	8006b30 <xTaskCreate>
 8005282:	2801      	cmp	r0, #1
          hTask = NULL;
 8005284:	bf1c      	itt	ne
 8005286:	2300      	movne	r3, #0
 8005288:	9304      	strne	r3, [sp, #16]
 800528a:	e7bf      	b.n	800520c <osThreadNew+0x44>
        return (NULL);
 800528c:	2000      	movs	r0, #0
 800528e:	e7be      	b.n	800520e <osThreadNew+0x46>
 8005290:	20000bec 	.word	0x20000bec

08005294 <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005294:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8005298:	b9f2      	cbnz	r2, 80052d8 <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800529a:	b508      	push	{r3, lr}
 800529c:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529e:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 80052a2:	b9da      	cbnz	r2, 80052dc <osEventFlagsNew+0x48>
 80052a4:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <osEventFlagsNew+0x4c>)
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	2a02      	cmp	r2, #2
 80052aa:	d007      	beq.n	80052bc <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 80052ac:	b173      	cbz	r3, 80052cc <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80052ae:	6898      	ldr	r0, [r3, #8]
 80052b0:	b150      	cbz	r0, 80052c8 <osEventFlagsNew+0x34>
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b1f      	cmp	r3, #31
 80052b6:	d80c      	bhi.n	80052d2 <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 80052b8:	2000      	movs	r0, #0
 80052ba:	e009      	b.n	80052d0 <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052bc:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 80052c0:	2a00      	cmp	r2, #0
 80052c2:	d0f3      	beq.n	80052ac <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 80052c4:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80052c6:	e003      	b.n	80052d0 <osEventFlagsNew+0x3c>
      if (mem == 0) {
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	b90b      	cbnz	r3, 80052d0 <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 80052cc:	f000 fb8d 	bl	80059ea <xEventGroupCreate>
}
 80052d0:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80052d2:	f000 fb65 	bl	80059a0 <xEventGroupCreateStatic>
 80052d6:	e7fb      	b.n	80052d0 <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 80052d8:	2000      	movs	r0, #0
}
 80052da:	4770      	bx	lr
  hEventGroup = NULL;
 80052dc:	2000      	movs	r0, #0
 80052de:	e7f7      	b.n	80052d0 <osEventFlagsNew+0x3c>
 80052e0:	20000bec 	.word	0x20000bec

080052e4 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80052e4:	b370      	cbz	r0, 8005344 <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80052e6:	b510      	push	{r4, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	460c      	mov	r4, r1
 80052ec:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80052ee:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80052f2:	d12a      	bne.n	800534a <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f4:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 80052f8:	b94a      	cbnz	r2, 800530e <osEventFlagsSet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fa:	f3ef 8210 	mrs	r2, PRIMASK
 80052fe:	b932      	cbnz	r2, 800530e <osEventFlagsSet+0x2a>
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <osEventFlagsSet+0x78>)
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	2a02      	cmp	r2, #2
 8005306:	d118      	bne.n	800533a <osEventFlagsSet+0x56>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005308:	f3ef 8211 	mrs	r2, BASEPRI
 800530c:	b1aa      	cbz	r2, 800533a <osEventFlagsSet+0x56>
    yield = pdFALSE;
 800530e:	2200      	movs	r2, #0
 8005310:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005312:	aa01      	add	r2, sp, #4
 8005314:	4621      	mov	r1, r4
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fc4c 	bl	8005bb4 <xEventGroupSetBitsFromISR>
 800531c:	b9c8      	cbnz	r0, 8005352 <osEventFlagsSet+0x6e>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	b1d3      	cbz	r3, 8005358 <osEventFlagsSet+0x74>
 8005322:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
      rflags = flags;
 8005336:	4620      	mov	r0, r4
 8005338:	e009      	b.n	800534e <osEventFlagsSet+0x6a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800533a:	4621      	mov	r1, r4
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fbec 	bl	8005b1a <xEventGroupSetBits>
 8005342:	e004      	b.n	800534e <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8005344:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 8005348:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 800534a:	f06f 0003 	mvn.w	r0, #3
}
 800534e:	b002      	add	sp, #8
 8005350:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8005352:	f06f 0002 	mvn.w	r0, #2
 8005356:	e7fa      	b.n	800534e <osEventFlagsSet+0x6a>
      rflags = flags;
 8005358:	4620      	mov	r0, r4
  return (rflags);
 800535a:	e7f8      	b.n	800534e <osEventFlagsSet+0x6a>
 800535c:	20000bec 	.word	0x20000bec

08005360 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005360:	2800      	cmp	r0, #0
 8005362:	d037      	beq.n	80053d4 <osEventFlagsWait+0x74>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	460c      	mov	r4, r1
 800536a:	461d      	mov	r5, r3
 800536c:	4684      	mov	ip, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800536e:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005372:	d132      	bne.n	80053da <osEventFlagsWait+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005374:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005378:	bb9b      	cbnz	r3, 80053e2 <osEventFlagsWait+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537a:	f3ef 8310 	mrs	r3, PRIMASK
 800537e:	bb9b      	cbnz	r3, 80053e8 <osEventFlagsWait+0x88>
 8005380:	4b1b      	ldr	r3, [pc, #108]	; (80053f0 <osEventFlagsWait+0x90>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d015      	beq.n	80053b4 <osEventFlagsWait+0x54>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 8005388:	f002 0601 	and.w	r6, r2, #1
      wait_all = pdTRUE;
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 800538c:	f082 0202 	eor.w	r2, r2, #2
      exit_clr = pdFAIL;
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005390:	9500      	str	r5, [sp, #0]
 8005392:	4633      	mov	r3, r6
 8005394:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8005398:	4621      	mov	r1, r4
 800539a:	4660      	mov	r0, ip
 800539c:	f000 fb33 	bl	8005a06 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 80053a0:	b17e      	cbz	r6, 80053c2 <osEventFlagsWait+0x62>
      if (flags != rflags) {
 80053a2:	4284      	cmp	r4, r0
 80053a4:	d01b      	beq.n	80053de <osEventFlagsWait+0x7e>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	bf14      	ite	ne
 80053aa:	f06f 0001 	mvnne.w	r0, #1
 80053ae:	f06f 0002 	mvneq.w	r0, #2
 80053b2:	e014      	b.n	80053de <osEventFlagsWait+0x7e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053b4:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0e5      	beq.n	8005388 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorISR;
 80053bc:	f06f 0005 	mvn.w	r0, #5
 80053c0:	e00d      	b.n	80053de <osEventFlagsWait+0x7e>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80053c2:	4204      	tst	r4, r0
 80053c4:	d10b      	bne.n	80053de <osEventFlagsWait+0x7e>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	bf14      	ite	ne
 80053ca:	f06f 0001 	mvnne.w	r0, #1
 80053ce:	f06f 0002 	mvneq.w	r0, #2
 80053d2:	e004      	b.n	80053de <osEventFlagsWait+0x7e>
    rflags = (uint32_t)osErrorParameter;
 80053d4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 80053d8:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80053da:	f06f 0003 	mvn.w	r0, #3
}
 80053de:	b002      	add	sp, #8
 80053e0:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 80053e2:	f06f 0005 	mvn.w	r0, #5
 80053e6:	e7fa      	b.n	80053de <osEventFlagsWait+0x7e>
 80053e8:	f06f 0005 	mvn.w	r0, #5
 80053ec:	e7f7      	b.n	80053de <osEventFlagsWait+0x7e>
 80053ee:	bf00      	nop
 80053f0:	20000bec 	.word	0x20000bec

080053f4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80053f4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053f6:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d145      	bne.n	800548a <osMutexNew+0x96>
 80053fe:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005400:	f3ef 8310 	mrs	r3, PRIMASK
 8005404:	461e      	mov	r6, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d142      	bne.n	8005490 <osMutexNew+0x9c>
 800540a:	4b23      	ldr	r3, [pc, #140]	; (8005498 <osMutexNew+0xa4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d00f      	beq.n	8005432 <osMutexNew+0x3e>
    if (attr != NULL) {
 8005412:	2c00      	cmp	r4, #0
 8005414:	d034      	beq.n	8005480 <osMutexNew+0x8c>
      type = attr->attr_bits;
 8005416:	6863      	ldr	r3, [r4, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005418:	f013 0f08 	tst.w	r3, #8
 800541c:	d13a      	bne.n	8005494 <osMutexNew+0xa0>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800541e:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 8005422:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005424:	68a1      	ldr	r1, [r4, #8]
 8005426:	b151      	cbz	r1, 800543e <osMutexNew+0x4a>
 8005428:	68e2      	ldr	r2, [r4, #12]
 800542a:	2a4f      	cmp	r2, #79	; 0x4f
 800542c:	d813      	bhi.n	8005456 <osMutexNew+0x62>
  hMutex = NULL;
 800542e:	2500      	movs	r5, #0
 8005430:	e02c      	b.n	800548c <osMutexNew+0x98>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005432:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0eb      	beq.n	8005412 <osMutexNew+0x1e>
  hMutex = NULL;
 800543a:	2500      	movs	r5, #0
 800543c:	e026      	b.n	800548c <osMutexNew+0x98>
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 800543e:	68e2      	ldr	r2, [r4, #12]
 8005440:	2a00      	cmp	r2, #0
 8005442:	d1f4      	bne.n	800542e <osMutexNew+0x3a>
          if (rmtx != 0U) {
 8005444:	b1e3      	cbz	r3, 8005480 <osMutexNew+0x8c>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005446:	2004      	movs	r0, #4
 8005448:	f000 fe6a 	bl	8006120 <xQueueCreateMutex>
 800544c:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800544e:	2d00      	cmp	r5, #0
 8005450:	d0ed      	beq.n	800542e <osMutexNew+0x3a>
        if (attr != NULL) {
 8005452:	b93c      	cbnz	r4, 8005464 <osMutexNew+0x70>
 8005454:	e007      	b.n	8005466 <osMutexNew+0x72>
        if (rmtx != 0U) {
 8005456:	b173      	cbz	r3, 8005476 <osMutexNew+0x82>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005458:	2004      	movs	r0, #4
 800545a:	f000 fe6c 	bl	8006136 <xQueueCreateMutexStatic>
 800545e:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8005460:	2d00      	cmp	r5, #0
 8005462:	d0e4      	beq.n	800542e <osMutexNew+0x3a>
          name = attr->name;
 8005464:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8005466:	4621      	mov	r1, r4
 8005468:	4628      	mov	r0, r5
 800546a:	f001 f94f 	bl	800670c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800546e:	b16e      	cbz	r6, 800548c <osMutexNew+0x98>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005470:	f045 0501 	orr.w	r5, r5, #1
 8005474:	e00a      	b.n	800548c <osMutexNew+0x98>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005476:	2001      	movs	r0, #1
 8005478:	f000 fe5d 	bl	8006136 <xQueueCreateMutexStatic>
 800547c:	4605      	mov	r5, r0
 800547e:	e7ef      	b.n	8005460 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateMutex ();
 8005480:	2001      	movs	r0, #1
 8005482:	f000 fe4d 	bl	8006120 <xQueueCreateMutex>
 8005486:	4605      	mov	r5, r0
 8005488:	e7e1      	b.n	800544e <osMutexNew+0x5a>
  hMutex = NULL;
 800548a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800548c:	4628      	mov	r0, r5
 800548e:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8005490:	2500      	movs	r5, #0
 8005492:	e7fb      	b.n	800548c <osMutexNew+0x98>
 8005494:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8005496:	e7f9      	b.n	800548c <osMutexNew+0x98>
 8005498:	20000bec 	.word	0x20000bec

0800549c <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800549c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80054a0:	bb72      	cbnz	r2, 8005500 <osMutexAcquire+0x64>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4603      	mov	r3, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	f020 0001 	bic.w	r0, r0, #1
 80054ac:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b0:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80054b4:	bb3a      	cbnz	r2, 8005506 <osMutexAcquire+0x6a>
 80054b6:	4a19      	ldr	r2, [pc, #100]	; (800551c <osMutexAcquire+0x80>)
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	2a02      	cmp	r2, #2
 80054bc:	d00d      	beq.n	80054da <osMutexAcquire+0x3e>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80054be:	b328      	cbz	r0, 800550c <osMutexAcquire+0x70>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80054c0:	b193      	cbz	r3, 80054e8 <osMutexAcquire+0x4c>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80054c2:	4621      	mov	r1, r4
 80054c4:	f001 f8aa 	bl	800661c <xQueueTakeMutexRecursive>
 80054c8:	2801      	cmp	r0, #1
 80054ca:	d022      	beq.n	8005512 <osMutexAcquire+0x76>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 80054cc:	2c00      	cmp	r4, #0
 80054ce:	bf14      	ite	ne
 80054d0:	f06f 0001 	mvnne.w	r0, #1
 80054d4:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 80054d8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054da:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80054de:	2a00      	cmp	r2, #0
 80054e0:	d0ed      	beq.n	80054be <osMutexAcquire+0x22>
    stat = osErrorISR;
 80054e2:	f06f 0005 	mvn.w	r0, #5
 80054e6:	e7f7      	b.n	80054d8 <osMutexAcquire+0x3c>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80054e8:	4621      	mov	r1, r4
 80054ea:	f000 ffc4 	bl	8006476 <xQueueSemaphoreTake>
 80054ee:	2801      	cmp	r0, #1
 80054f0:	d011      	beq.n	8005516 <osMutexAcquire+0x7a>
          stat = osErrorResource;
 80054f2:	2c00      	cmp	r4, #0
 80054f4:	bf14      	ite	ne
 80054f6:	f06f 0001 	mvnne.w	r0, #1
 80054fa:	f06f 0002 	mvneq.w	r0, #2
 80054fe:	e7eb      	b.n	80054d8 <osMutexAcquire+0x3c>
    stat = osErrorISR;
 8005500:	f06f 0005 	mvn.w	r0, #5
}
 8005504:	4770      	bx	lr
    stat = osErrorISR;
 8005506:	f06f 0005 	mvn.w	r0, #5
 800550a:	e7e5      	b.n	80054d8 <osMutexAcquire+0x3c>
    stat = osErrorParameter;
 800550c:	f06f 0003 	mvn.w	r0, #3
 8005510:	e7e2      	b.n	80054d8 <osMutexAcquire+0x3c>
  stat = osOK;
 8005512:	2000      	movs	r0, #0
 8005514:	e7e0      	b.n	80054d8 <osMutexAcquire+0x3c>
 8005516:	2000      	movs	r0, #0
 8005518:	e7de      	b.n	80054d8 <osMutexAcquire+0x3c>
 800551a:	bf00      	nop
 800551c:	20000bec 	.word	0x20000bec

08005520 <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005520:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8005524:	bb42      	cbnz	r2, 8005578 <osMutexRelease+0x58>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005526:	b508      	push	{r3, lr}
 8005528:	4603      	mov	r3, r0
 800552a:	f020 0001 	bic.w	r0, r0, #1
 800552e:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005532:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8005536:	bb12      	cbnz	r2, 800557e <osMutexRelease+0x5e>
 8005538:	4a14      	ldr	r2, [pc, #80]	; (800558c <osMutexRelease+0x6c>)
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	2a02      	cmp	r2, #2
 800553e:	d009      	beq.n	8005554 <osMutexRelease+0x34>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8005540:	b300      	cbz	r0, 8005584 <osMutexRelease+0x64>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8005542:	b173      	cbz	r3, 8005562 <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005544:	f000 fe06 	bl	8006154 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 8005548:	2801      	cmp	r0, #1
 800554a:	bf0c      	ite	eq
 800554c:	2000      	moveq	r0, #0
 800554e:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8005552:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005554:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005558:	2a00      	cmp	r2, #0
 800555a:	d0f1      	beq.n	8005540 <osMutexRelease+0x20>
    stat = osErrorISR;
 800555c:	f06f 0005 	mvn.w	r0, #5
 8005560:	e7f7      	b.n	8005552 <osMutexRelease+0x32>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005562:	2300      	movs	r3, #0
 8005564:	461a      	mov	r2, r3
 8005566:	4619      	mov	r1, r3
 8005568:	f000 fd02 	bl	8005f70 <xQueueGenericSend>
        stat = osErrorResource;
 800556c:	2801      	cmp	r0, #1
 800556e:	bf0c      	ite	eq
 8005570:	2000      	moveq	r0, #0
 8005572:	f06f 0002 	mvnne.w	r0, #2
 8005576:	e7ec      	b.n	8005552 <osMutexRelease+0x32>
    stat = osErrorISR;
 8005578:	f06f 0005 	mvn.w	r0, #5
}
 800557c:	4770      	bx	lr
    stat = osErrorISR;
 800557e:	f06f 0005 	mvn.w	r0, #5
 8005582:	e7e6      	b.n	8005552 <osMutexRelease+0x32>
    stat = osErrorParameter;
 8005584:	f06f 0003 	mvn.w	r0, #3
 8005588:	e7e3      	b.n	8005552 <osMutexRelease+0x32>
 800558a:	bf00      	nop
 800558c:	20000bec 	.word	0x20000bec

08005590 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005594:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005598:	2b00      	cmp	r3, #0
 800559a:	d146      	bne.n	800562a <osSemaphoreNew+0x9a>
 800559c:	460e      	mov	r6, r1
 800559e:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a0:	f3ef 8310 	mrs	r3, PRIMASK
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d144      	bne.n	8005632 <osSemaphoreNew+0xa2>
 80055a8:	4b32      	ldr	r3, [pc, #200]	; (8005674 <osSemaphoreNew+0xe4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d00c      	beq.n	80055ca <osSemaphoreNew+0x3a>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d040      	beq.n	8005636 <osSemaphoreNew+0xa6>
 80055b4:	42b0      	cmp	r0, r6
 80055b6:	d340      	bcc.n	800563a <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 80055b8:	2d00      	cmp	r5, #0
 80055ba:	d04a      	beq.n	8005652 <osSemaphoreNew+0xc2>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80055bc:	68ac      	ldr	r4, [r5, #8]
 80055be:	b154      	cbz	r4, 80055d6 <osSemaphoreNew+0x46>
 80055c0:	68eb      	ldr	r3, [r5, #12]
 80055c2:	2b4f      	cmp	r3, #79	; 0x4f
 80055c4:	d83b      	bhi.n	800563e <osSemaphoreNew+0xae>
  hSemaphore = NULL;
 80055c6:	2400      	movs	r4, #0
 80055c8:	e030      	b.n	800562c <osSemaphoreNew+0x9c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055ca:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0ee      	beq.n	80055b0 <osSemaphoreNew+0x20>
  hSemaphore = NULL;
 80055d2:	2400      	movs	r4, #0
 80055d4:	e02a      	b.n	800562c <osSemaphoreNew+0x9c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80055d6:	68eb      	ldr	r3, [r5, #12]
 80055d8:	bb43      	cbnz	r3, 800562c <osSemaphoreNew+0x9c>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80055da:	2801      	cmp	r0, #1
 80055dc:	d142      	bne.n	8005664 <osSemaphoreNew+0xd4>
        if (mem == 1) {
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80055de:	2203      	movs	r2, #3
 80055e0:	2100      	movs	r1, #0
 80055e2:	2001      	movs	r0, #1
 80055e4:	f000 fc5b 	bl	8005e9e <xQueueGenericCreate>
 80055e8:	4604      	mov	r4, r0
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80055ea:	b1fc      	cbz	r4, 800562c <osSemaphoreNew+0x9c>
 80055ec:	b986      	cbnz	r6, 8005610 <osSemaphoreNew+0x80>
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 80055ee:	b105      	cbz	r5, 80055f2 <osSemaphoreNew+0x62>
          name = attr->name;
 80055f0:	682d      	ldr	r5, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80055f2:	4629      	mov	r1, r5
 80055f4:	4620      	mov	r0, r4
 80055f6:	f001 f889 	bl	800670c <vQueueAddToRegistry>
 80055fa:	e017      	b.n	800562c <osSemaphoreNew+0x9c>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80055fc:	2303      	movs	r3, #3
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	4623      	mov	r3, r4
 8005602:	2200      	movs	r2, #0
 8005604:	4611      	mov	r1, r2
 8005606:	2001      	movs	r0, #1
 8005608:	f000 fbf7 	bl	8005dfa <xQueueGenericCreateStatic>
 800560c:	4604      	mov	r4, r0
 800560e:	e7ec      	b.n	80055ea <osSemaphoreNew+0x5a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005610:	2300      	movs	r3, #0
 8005612:	461a      	mov	r2, r3
 8005614:	4619      	mov	r1, r3
 8005616:	4620      	mov	r0, r4
 8005618:	f000 fcaa 	bl	8005f70 <xQueueGenericSend>
 800561c:	2801      	cmp	r0, #1
 800561e:	d0e6      	beq.n	80055ee <osSemaphoreNew+0x5e>
            vSemaphoreDelete (hSemaphore);
 8005620:	4620      	mov	r0, r4
 8005622:	f001 f89d 	bl	8006760 <vQueueDelete>
            hSemaphore = NULL;
 8005626:	2400      	movs	r4, #0
 8005628:	e000      	b.n	800562c <osSemaphoreNew+0x9c>
  hSemaphore = NULL;
 800562a:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800562c:	4620      	mov	r0, r4
 800562e:	b002      	add	sp, #8
 8005630:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8005632:	2400      	movs	r4, #0
 8005634:	e7fa      	b.n	800562c <osSemaphoreNew+0x9c>
 8005636:	2400      	movs	r4, #0
 8005638:	e7f8      	b.n	800562c <osSemaphoreNew+0x9c>
 800563a:	2400      	movs	r4, #0
  return ((osSemaphoreId_t)hSemaphore);
 800563c:	e7f6      	b.n	800562c <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 800563e:	2801      	cmp	r0, #1
 8005640:	d0dc      	beq.n	80055fc <osSemaphoreNew+0x6c>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005642:	4622      	mov	r2, r4
 8005644:	4631      	mov	r1, r6
 8005646:	f000 fc52 	bl	8005eee <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800564a:	4604      	mov	r4, r0
 800564c:	2800      	cmp	r0, #0
 800564e:	d1cf      	bne.n	80055f0 <osSemaphoreNew+0x60>
 8005650:	e7ec      	b.n	800562c <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 8005652:	2801      	cmp	r0, #1
 8005654:	d0c3      	beq.n	80055de <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005656:	4631      	mov	r1, r6
 8005658:	f000 fc6c 	bl	8005f34 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800565c:	4604      	mov	r4, r0
 800565e:	2800      	cmp	r0, #0
 8005660:	d0e4      	beq.n	800562c <osSemaphoreNew+0x9c>
 8005662:	e7c6      	b.n	80055f2 <osSemaphoreNew+0x62>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005664:	4631      	mov	r1, r6
 8005666:	f000 fc65 	bl	8005f34 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800566a:	4604      	mov	r4, r0
 800566c:	2800      	cmp	r0, #0
 800566e:	d1bf      	bne.n	80055f0 <osSemaphoreNew+0x60>
 8005670:	e7dc      	b.n	800562c <osSemaphoreNew+0x9c>
 8005672:	bf00      	nop
 8005674:	20000bec 	.word	0x20000bec

08005678 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005678:	b3a8      	cbz	r0, 80056e6 <osSemaphoreAcquire+0x6e>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800567a:	b510      	push	{r4, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	460c      	mov	r4, r1
 8005680:	4684      	mov	ip, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005682:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005686:	b94b      	cbnz	r3, 800569c <osSemaphoreAcquire+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005688:	f3ef 8310 	mrs	r3, PRIMASK
 800568c:	b933      	cbnz	r3, 800569c <osSemaphoreAcquire+0x24>
 800568e:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <osSemaphoreAcquire+0x84>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d11a      	bne.n	80056cc <osSemaphoreAcquire+0x54>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005696:	f3ef 8311 	mrs	r3, BASEPRI
 800569a:	b1bb      	cbz	r3, 80056cc <osSemaphoreAcquire+0x54>
    if (timeout != 0U) {
 800569c:	bb34      	cbnz	r4, 80056ec <osSemaphoreAcquire+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800569e:	2100      	movs	r1, #0
 80056a0:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80056a2:	aa01      	add	r2, sp, #4
 80056a4:	4660      	mov	r0, ip
 80056a6:	f000 ffd9 	bl	800665c <xQueueReceiveFromISR>
 80056aa:	2801      	cmp	r0, #1
 80056ac:	d121      	bne.n	80056f2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80056ae:	9801      	ldr	r0, [sp, #4]
 80056b0:	b150      	cbz	r0, 80056c8 <osSemaphoreAcquire+0x50>
 80056b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80056c6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80056c8:	b002      	add	sp, #8
 80056ca:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80056cc:	4621      	mov	r1, r4
 80056ce:	4660      	mov	r0, ip
 80056d0:	f000 fed1 	bl	8006476 <xQueueSemaphoreTake>
 80056d4:	2801      	cmp	r0, #1
 80056d6:	d00f      	beq.n	80056f8 <osSemaphoreAcquire+0x80>
        stat = osErrorResource;
 80056d8:	2c00      	cmp	r4, #0
 80056da:	bf14      	ite	ne
 80056dc:	f06f 0001 	mvnne.w	r0, #1
 80056e0:	f06f 0002 	mvneq.w	r0, #2
 80056e4:	e7f0      	b.n	80056c8 <osSemaphoreAcquire+0x50>
    stat = osErrorParameter;
 80056e6:	f06f 0003 	mvn.w	r0, #3
}
 80056ea:	4770      	bx	lr
      stat = osErrorParameter;
 80056ec:	f06f 0003 	mvn.w	r0, #3
 80056f0:	e7ea      	b.n	80056c8 <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 80056f2:	f06f 0002 	mvn.w	r0, #2
 80056f6:	e7e7      	b.n	80056c8 <osSemaphoreAcquire+0x50>
  stat = osOK;
 80056f8:	2000      	movs	r0, #0
 80056fa:	e7e5      	b.n	80056c8 <osSemaphoreAcquire+0x50>
 80056fc:	20000bec 	.word	0x20000bec

08005700 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005700:	b398      	cbz	r0, 800576a <osSemaphoreRelease+0x6a>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005702:	b500      	push	{lr}
 8005704:	b083      	sub	sp, #12
 8005706:	4684      	mov	ip, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005708:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800570c:	b94b      	cbnz	r3, 8005722 <osSemaphoreRelease+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800570e:	f3ef 8310 	mrs	r3, PRIMASK
 8005712:	b933      	cbnz	r3, 8005722 <osSemaphoreRelease+0x22>
 8005714:	4b18      	ldr	r3, [pc, #96]	; (8005778 <osSemaphoreRelease+0x78>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d11a      	bne.n	8005752 <osSemaphoreRelease+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800571c:	f3ef 8311 	mrs	r3, BASEPRI
 8005720:	b1bb      	cbz	r3, 8005752 <osSemaphoreRelease+0x52>
    yield = pdFALSE;
 8005722:	2300      	movs	r3, #0
 8005724:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005726:	a901      	add	r1, sp, #4
 8005728:	4660      	mov	r0, ip
 800572a:	f000 fd99 	bl	8006260 <xQueueGiveFromISR>
 800572e:	2801      	cmp	r0, #1
 8005730:	d11e      	bne.n	8005770 <osSemaphoreRelease+0x70>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8005732:	9801      	ldr	r0, [sp, #4]
 8005734:	b150      	cbz	r0, 800574c <osSemaphoreRelease+0x4c>
 8005736:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800573a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800574a:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800574c:	b003      	add	sp, #12
 800574e:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005752:	2300      	movs	r3, #0
 8005754:	461a      	mov	r2, r3
 8005756:	4619      	mov	r1, r3
 8005758:	4660      	mov	r0, ip
 800575a:	f000 fc09 	bl	8005f70 <xQueueGenericSend>
      stat = osErrorResource;
 800575e:	2801      	cmp	r0, #1
 8005760:	bf0c      	ite	eq
 8005762:	2000      	moveq	r0, #0
 8005764:	f06f 0002 	mvnne.w	r0, #2
 8005768:	e7f0      	b.n	800574c <osSemaphoreRelease+0x4c>
    stat = osErrorParameter;
 800576a:	f06f 0003 	mvn.w	r0, #3
}
 800576e:	4770      	bx	lr
      stat = osErrorResource;
 8005770:	f06f 0002 	mvn.w	r0, #2
 8005774:	e7ea      	b.n	800574c <osSemaphoreRelease+0x4c>
 8005776:	bf00      	nop
 8005778:	20000bec 	.word	0x20000bec

0800577c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800577c:	b530      	push	{r4, r5, lr}
 800577e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005780:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005784:	2b00      	cmp	r3, #0
 8005786:	d13e      	bne.n	8005806 <osMessageQueueNew+0x8a>
 8005788:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578a:	f3ef 8310 	mrs	r3, PRIMASK
 800578e:	2b00      	cmp	r3, #0
 8005790:	d13d      	bne.n	800580e <osMessageQueueNew+0x92>
 8005792:	4b27      	ldr	r3, [pc, #156]	; (8005830 <osMessageQueueNew+0xb4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d014      	beq.n	80057c4 <osMessageQueueNew+0x48>
 800579a:	2800      	cmp	r0, #0
 800579c:	d039      	beq.n	8005812 <osMessageQueueNew+0x96>
 800579e:	2900      	cmp	r1, #0
 80057a0:	d039      	beq.n	8005816 <osMessageQueueNew+0x9a>
    mem = -1;

    if (attr != NULL) {
 80057a2:	2d00      	cmp	r5, #0
 80057a4:	d03d      	beq.n	8005822 <osMessageQueueNew+0xa6>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80057a6:	68ac      	ldr	r4, [r5, #8]
 80057a8:	b194      	cbz	r4, 80057d0 <osMessageQueueNew+0x54>
 80057aa:	68eb      	ldr	r3, [r5, #12]
 80057ac:	2b4f      	cmp	r3, #79	; 0x4f
 80057ae:	d934      	bls.n	800581a <osMessageQueueNew+0x9e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80057b0:	692a      	ldr	r2, [r5, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80057b2:	b3a2      	cbz	r2, 800581e <osMessageQueueNew+0xa2>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80057b4:	fb01 f300 	mul.w	r3, r1, r0
 80057b8:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80057bc:	459c      	cmp	ip, r3
 80057be:	d219      	bcs.n	80057f4 <osMessageQueueNew+0x78>
  hQueue = NULL;
 80057c0:	2400      	movs	r4, #0
 80057c2:	e021      	b.n	8005808 <osMessageQueueNew+0x8c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057c4:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0e6      	beq.n	800579a <osMessageQueueNew+0x1e>
  hQueue = NULL;
 80057cc:	2400      	movs	r4, #0
 80057ce:	e01b      	b.n	8005808 <osMessageQueueNew+0x8c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80057d0:	68eb      	ldr	r3, [r5, #12]
 80057d2:	b9cb      	cbnz	r3, 8005808 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80057d4:	692a      	ldr	r2, [r5, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80057d6:	b9ba      	cbnz	r2, 8005808 <osMessageQueueNew+0x8c>

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80057d8:	696b      	ldr	r3, [r5, #20]
  hQueue = NULL;
 80057da:	4614      	mov	r4, r2
      if (mem == 0) {
 80057dc:	b9a3      	cbnz	r3, 8005808 <osMessageQueueNew+0x8c>
        hQueue = xQueueCreate (msg_count, msg_size);
 80057de:	2200      	movs	r2, #0
 80057e0:	f000 fb5d 	bl	8005e9e <xQueueGenericCreate>
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80057e4:	4604      	mov	r4, r0
 80057e6:	b178      	cbz	r0, 8005808 <osMessageQueueNew+0x8c>
      if (attr != NULL) {
        name = attr->name;
 80057e8:	682d      	ldr	r5, [r5, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80057ea:	4629      	mov	r1, r5
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 ff8d 	bl	800670c <vQueueAddToRegistry>
 80057f2:	e009      	b.n	8005808 <osMessageQueueNew+0x8c>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80057f4:	2300      	movs	r3, #0
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	4623      	mov	r3, r4
 80057fa:	f000 fafe 	bl	8005dfa <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80057fe:	4604      	mov	r4, r0
 8005800:	2800      	cmp	r0, #0
 8005802:	d1f1      	bne.n	80057e8 <osMessageQueueNew+0x6c>
 8005804:	e000      	b.n	8005808 <osMessageQueueNew+0x8c>
  hQueue = NULL;
 8005806:	2400      	movs	r4, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8005808:	4620      	mov	r0, r4
 800580a:	b003      	add	sp, #12
 800580c:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 800580e:	2400      	movs	r4, #0
 8005810:	e7fa      	b.n	8005808 <osMessageQueueNew+0x8c>
 8005812:	2400      	movs	r4, #0
 8005814:	e7f8      	b.n	8005808 <osMessageQueueNew+0x8c>
 8005816:	2400      	movs	r4, #0
 8005818:	e7f6      	b.n	8005808 <osMessageQueueNew+0x8c>
 800581a:	2400      	movs	r4, #0
 800581c:	e7f4      	b.n	8005808 <osMessageQueueNew+0x8c>
 800581e:	4614      	mov	r4, r2
  return ((osMessageQueueId_t)hQueue);
 8005820:	e7f2      	b.n	8005808 <osMessageQueueNew+0x8c>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005822:	2200      	movs	r2, #0
 8005824:	f000 fb3b 	bl	8005e9e <xQueueGenericCreate>
    if (hQueue != NULL) {
 8005828:	4604      	mov	r4, r0
 800582a:	2800      	cmp	r0, #0
 800582c:	d0ec      	beq.n	8005808 <osMessageQueueNew+0x8c>
 800582e:	e7dc      	b.n	80057ea <osMessageQueueNew+0x6e>
 8005830:	20000bec 	.word	0x20000bec

08005834 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005834:	b510      	push	{r4, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800583e:	b9cb      	cbnz	r3, 8005874 <osMessageQueuePut+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005840:	f3ef 8310 	mrs	r3, PRIMASK
 8005844:	b9b3      	cbnz	r3, 8005874 <osMessageQueuePut+0x40>
 8005846:	4b22      	ldr	r3, [pc, #136]	; (80058d0 <osMessageQueuePut+0x9c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d00e      	beq.n	800586c <osMessageQueuePut+0x38>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800584e:	b3b0      	cbz	r0, 80058be <osMessageQueuePut+0x8a>
 8005850:	b3c1      	cbz	r1, 80058c4 <osMessageQueuePut+0x90>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005852:	2300      	movs	r3, #0
 8005854:	4622      	mov	r2, r4
 8005856:	f000 fb8b 	bl	8005f70 <xQueueGenericSend>
 800585a:	2801      	cmp	r0, #1
 800585c:	d035      	beq.n	80058ca <osMessageQueuePut+0x96>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 800585e:	2c00      	cmp	r4, #0
 8005860:	bf14      	ite	ne
 8005862:	f06f 0001 	mvnne.w	r0, #1
 8005866:	f06f 0002 	mvneq.w	r0, #2
 800586a:	e01a      	b.n	80058a2 <osMessageQueuePut+0x6e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800586c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0ec      	beq.n	800584e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005874:	b1b8      	cbz	r0, 80058a6 <osMessageQueuePut+0x72>
 8005876:	b1c9      	cbz	r1, 80058ac <osMessageQueuePut+0x78>
 8005878:	b9dc      	cbnz	r4, 80058b2 <osMessageQueuePut+0x7e>
      yield = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800587e:	aa01      	add	r2, sp, #4
 8005880:	f000 fc88 	bl	8006194 <xQueueGenericSendFromISR>
 8005884:	2801      	cmp	r0, #1
 8005886:	d117      	bne.n	80058b8 <osMessageQueuePut+0x84>
        portYIELD_FROM_ISR (yield);
 8005888:	9801      	ldr	r0, [sp, #4]
 800588a:	b150      	cbz	r0, 80058a2 <osMessageQueuePut+0x6e>
 800588c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005894:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80058a0:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80058a2:	b002      	add	sp, #8
 80058a4:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 80058a6:	f06f 0003 	mvn.w	r0, #3
 80058aa:	e7fa      	b.n	80058a2 <osMessageQueuePut+0x6e>
 80058ac:	f06f 0003 	mvn.w	r0, #3
 80058b0:	e7f7      	b.n	80058a2 <osMessageQueuePut+0x6e>
 80058b2:	f06f 0003 	mvn.w	r0, #3
 80058b6:	e7f4      	b.n	80058a2 <osMessageQueuePut+0x6e>
        stat = osErrorResource;
 80058b8:	f06f 0002 	mvn.w	r0, #2
 80058bc:	e7f1      	b.n	80058a2 <osMessageQueuePut+0x6e>
      stat = osErrorParameter;
 80058be:	f06f 0003 	mvn.w	r0, #3
 80058c2:	e7ee      	b.n	80058a2 <osMessageQueuePut+0x6e>
 80058c4:	f06f 0003 	mvn.w	r0, #3
 80058c8:	e7eb      	b.n	80058a2 <osMessageQueuePut+0x6e>
  stat = osOK;
 80058ca:	2000      	movs	r0, #0
 80058cc:	e7e9      	b.n	80058a2 <osMessageQueuePut+0x6e>
 80058ce:	bf00      	nop
 80058d0:	20000bec 	.word	0x20000bec

080058d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80058d4:	b510      	push	{r4, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058da:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80058de:	b9c3      	cbnz	r3, 8005912 <osMessageQueueGet+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e0:	f3ef 8310 	mrs	r3, PRIMASK
 80058e4:	b9ab      	cbnz	r3, 8005912 <osMessageQueueGet+0x3e>
 80058e6:	4b21      	ldr	r3, [pc, #132]	; (800596c <osMessageQueueGet+0x98>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d00d      	beq.n	800590a <osMessageQueueGet+0x36>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80058ee:	b3a8      	cbz	r0, 800595c <osMessageQueueGet+0x88>
 80058f0:	b3b9      	cbz	r1, 8005962 <osMessageQueueGet+0x8e>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80058f2:	4622      	mov	r2, r4
 80058f4:	f000 fd0d 	bl	8006312 <xQueueReceive>
 80058f8:	2801      	cmp	r0, #1
 80058fa:	d035      	beq.n	8005968 <osMessageQueueGet+0x94>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	bf14      	ite	ne
 8005900:	f06f 0001 	mvnne.w	r0, #1
 8005904:	f06f 0002 	mvneq.w	r0, #2
 8005908:	e01a      	b.n	8005940 <osMessageQueueGet+0x6c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800590a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0ed      	beq.n	80058ee <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005912:	b1b8      	cbz	r0, 8005944 <osMessageQueueGet+0x70>
 8005914:	b1c9      	cbz	r1, 800594a <osMessageQueueGet+0x76>
 8005916:	b9dc      	cbnz	r4, 8005950 <osMessageQueueGet+0x7c>
      yield = pdFALSE;
 8005918:	2300      	movs	r3, #0
 800591a:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800591c:	aa01      	add	r2, sp, #4
 800591e:	f000 fe9d 	bl	800665c <xQueueReceiveFromISR>
 8005922:	2801      	cmp	r0, #1
 8005924:	d117      	bne.n	8005956 <osMessageQueueGet+0x82>
        portYIELD_FROM_ISR (yield);
 8005926:	9801      	ldr	r0, [sp, #4]
 8005928:	b150      	cbz	r0, 8005940 <osMessageQueueGet+0x6c>
 800592a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800593e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005940:	b002      	add	sp, #8
 8005942:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005944:	f06f 0003 	mvn.w	r0, #3
 8005948:	e7fa      	b.n	8005940 <osMessageQueueGet+0x6c>
 800594a:	f06f 0003 	mvn.w	r0, #3
 800594e:	e7f7      	b.n	8005940 <osMessageQueueGet+0x6c>
 8005950:	f06f 0003 	mvn.w	r0, #3
 8005954:	e7f4      	b.n	8005940 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
 8005956:	f06f 0002 	mvn.w	r0, #2
 800595a:	e7f1      	b.n	8005940 <osMessageQueueGet+0x6c>
      stat = osErrorParameter;
 800595c:	f06f 0003 	mvn.w	r0, #3
 8005960:	e7ee      	b.n	8005940 <osMessageQueueGet+0x6c>
 8005962:	f06f 0003 	mvn.w	r0, #3
 8005966:	e7eb      	b.n	8005940 <osMessageQueueGet+0x6c>
  stat = osOK;
 8005968:	2000      	movs	r0, #0
 800596a:	e7e9      	b.n	8005940 <osMessageQueueGet+0x6c>
 800596c:	20000bec 	.word	0x20000bec

08005970 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <vApplicationGetIdleTaskMemory+0x10>)
 8005972:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <vApplicationGetIdleTaskMemory+0x14>)
 8005976:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005978:	2380      	movs	r3, #128	; 0x80
 800597a:	6013      	str	r3, [r2, #0]
}
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000b8c 	.word	0x20000b8c
 8005984:	2000098c 	.word	0x2000098c

08005988 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <vApplicationGetTimerTaskMemory+0x10>)
 800598a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800598c:	4b03      	ldr	r3, [pc, #12]	; (800599c <vApplicationGetTimerTaskMemory+0x14>)
 800598e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005994:	6013      	str	r3, [r2, #0]
}
 8005996:	4770      	bx	lr
 8005998:	20000ff0 	.word	0x20000ff0
 800599c:	20000bf0 	.word	0x20000bf0

080059a0 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80059a0:	b180      	cbz	r0, 80059c4 <xEventGroupCreateStatic+0x24>
	{
 80059a2:	b510      	push	{r4, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80059a8:	2320      	movs	r3, #32
 80059aa:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80059ac:	9b01      	ldr	r3, [sp, #4]
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d011      	beq.n	80059d6 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	e7fe      	b.n	80059c2 <xEventGroupCreateStatic+0x22>
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 80059d4:	e7fe      	b.n	80059d4 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80059dc:	f000 f8f4 	bl	8005bc8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80059e0:	2301      	movs	r3, #1
 80059e2:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80059e4:	4620      	mov	r0, r4
 80059e6:	b002      	add	sp, #8
 80059e8:	bd10      	pop	{r4, pc}

080059ea <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80059ea:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80059ec:	2020      	movs	r0, #32
 80059ee:	f002 f8eb 	bl	8007bc8 <pvPortMalloc>

		if( pxEventBits != NULL )
 80059f2:	4604      	mov	r4, r0
 80059f4:	b128      	cbz	r0, 8005a02 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 80059f6:	2500      	movs	r5, #0
 80059f8:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80059fc:	f000 f8e4 	bl	8005bc8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005a00:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005a02:	4620      	mov	r0, r4
 8005a04:	bd38      	pop	{r3, r4, r5, pc}

08005a06 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005a06:	b188      	cbz	r0, 8005a2c <xEventGroupWaitBits+0x26>
{
 8005a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	4616      	mov	r6, r2
 8005a10:	461d      	mov	r5, r3
 8005a12:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005a14:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005a18:	d011      	beq.n	8005a3e <xEventGroupWaitBits+0x38>
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	e7fe      	b.n	8005a2a <xEventGroupWaitBits+0x24>
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005a3c:	e7fe      	b.n	8005a3c <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 8005a3e:	b941      	cbnz	r1, 8005a52 <xEventGroupWaitBits+0x4c>
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	e7fe      	b.n	8005a50 <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a52:	f001 fbf3 	bl	800723c <xTaskGetSchedulerState>
 8005a56:	b950      	cbnz	r0, 8005a6e <xEventGroupWaitBits+0x68>
 8005a58:	9b06      	ldr	r3, [sp, #24]
 8005a5a:	b143      	cbz	r3, 8005a6e <xEventGroupWaitBits+0x68>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	e7fe      	b.n	8005a6c <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 8005a6e:	f001 f8d7 	bl	8006c20 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005a72:	f8d7 8000 	ldr.w	r8, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8005a76:	bb5d      	cbnz	r5, 8005ad0 <xEventGroupWaitBits+0xca>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005a78:	ea14 0f08 	tst.w	r4, r8
 8005a7c:	bf14      	ite	ne
 8005a7e:	2001      	movne	r0, #1
 8005a80:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 8005a82:	bb58      	cbnz	r0, 8005adc <xEventGroupWaitBits+0xd6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005a84:	9b06      	ldr	r3, [sp, #24]
 8005a86:	b36b      	cbz	r3, 8005ae4 <xEventGroupWaitBits+0xde>
			if( xClearOnExit != pdFALSE )
 8005a88:	1e31      	subs	r1, r6, #0
 8005a8a:	bf18      	it	ne
 8005a8c:	2101      	movne	r1, #1
 8005a8e:	0609      	lsls	r1, r1, #24
			if( xWaitForAllBits != pdFALSE )
 8005a90:	b10d      	cbz	r5, 8005a96 <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005a92:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005a96:	9a06      	ldr	r2, [sp, #24]
 8005a98:	4321      	orrs	r1, r4
 8005a9a:	1d38      	adds	r0, r7, #4
 8005a9c:	f001 faa2 	bl	8006fe4 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8005aa0:	f001 f966 	bl	8006d70 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005aa4:	b948      	cbnz	r0, 8005aba <xEventGroupWaitBits+0xb4>
			portYIELD_WITHIN_API();
 8005aa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8005aba:	f001 fcb3 	bl	8007424 <uxTaskResetEventItemValue>
 8005abe:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005ac0:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005ac4:	d011      	beq.n	8005aea <xEventGroupWaitBits+0xe4>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005ac6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
}
 8005aca:	4640      	mov	r0, r8
 8005acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005ad0:	ea34 0308 	bics.w	r3, r4, r8
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2001      	moveq	r0, #1
 8005ad8:	2000      	movne	r0, #0
 8005ada:	e7d2      	b.n	8005a82 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 8005adc:	b116      	cbz	r6, 8005ae4 <xEventGroupWaitBits+0xde>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005ade:	ea28 0404 	bic.w	r4, r8, r4
 8005ae2:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8005ae4:	f001 f944 	bl	8006d70 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8005ae8:	e7ef      	b.n	8005aca <xEventGroupWaitBits+0xc4>
			taskENTER_CRITICAL();
 8005aea:	f001 ff23 	bl	8007934 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8005aee:	f8d7 8000 	ldr.w	r8, [r7]
	if( xWaitForAllBits == pdFALSE )
 8005af2:	b965      	cbnz	r5, 8005b0e <xEventGroupWaitBits+0x108>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005af4:	ea14 0f08 	tst.w	r4, r8
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005afe:	b11b      	cbz	r3, 8005b08 <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 8005b00:	b116      	cbz	r6, 8005b08 <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005b02:	ea28 0404 	bic.w	r4, r8, r4
 8005b06:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 8005b08:	f001 ff36 	bl	8007978 <vPortExitCritical>
 8005b0c:	e7db      	b.n	8005ac6 <xEventGroupWaitBits+0xc0>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005b0e:	ea34 0308 	bics.w	r3, r4, r8
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	e7f1      	b.n	8005afe <xEventGroupWaitBits+0xf8>

08005b1a <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 8005b1a:	b178      	cbz	r0, 8005b3c <xEventGroupSetBits+0x22>
{
 8005b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b20:	460e      	mov	r6, r1
 8005b22:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005b24:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005b28:	d011      	beq.n	8005b4e <xEventGroupSetBits+0x34>
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	e7fe      	b.n	8005b3a <xEventGroupSetBits+0x20>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005b4c:	e7fe      	b.n	8005b4c <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b4e:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 8005b52:	f001 f865 	bl	8006c20 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005b56:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	4333      	orrs	r3, r6
 8005b5c:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 8005b5e:	42a7      	cmp	r7, r4
 8005b60:	d118      	bne.n	8005b94 <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	ea23 0308 	bic.w	r3, r3, r8
 8005b68:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005b6a:	f001 f901 	bl	8006d70 <xTaskResumeAll>
}
 8005b6e:	6828      	ldr	r0, [r5, #0]
 8005b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005b74:	6829      	ldr	r1, [r5, #0]
 8005b76:	ea32 0101 	bics.w	r1, r2, r1
 8005b7a:	d109      	bne.n	8005b90 <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005b7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 8005b80:	bf18      	it	ne
 8005b82:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005b86:	6829      	ldr	r1, [r5, #0]
 8005b88:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8005b8c:	f001 fab8 	bl	8007100 <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 8005b90:	42a7      	cmp	r7, r4
 8005b92:	d0e6      	beq.n	8005b62 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 8005b94:	4620      	mov	r0, r4
 8005b96:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005b98:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005b9a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005b9e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005ba2:	d1e7      	bne.n	8005b74 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005ba4:	6829      	ldr	r1, [r5, #0]
 8005ba6:	420a      	tst	r2, r1
 8005ba8:	d1e8      	bne.n	8005b7c <xEventGroupSetBits+0x62>
 8005baa:	e7f1      	b.n	8005b90 <xEventGroupSetBits+0x76>

08005bac <vEventGroupSetBitsCallback>:
{
 8005bac:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005bae:	f7ff ffb4 	bl	8005b1a <xEventGroupSetBits>
}
 8005bb2:	bd08      	pop	{r3, pc}

08005bb4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005bb4:	b508      	push	{r3, lr}
 8005bb6:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005bb8:	460a      	mov	r2, r1
 8005bba:	4601      	mov	r1, r0
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <xEventGroupSetBitsFromISR+0x10>)
 8005bbe:	f001 fe4f 	bl	8007860 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005bc2:	bd08      	pop	{r3, pc}
 8005bc4:	08005bad 	.word	0x08005bad

08005bc8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc8:	f100 0308 	add.w	r3, r0, #8
 8005bcc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bce:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bd4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bd6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bdc:	4770      	bx	lr

08005bde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005be2:	4770      	bx	lr

08005be4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005be4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005be6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bec:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bee:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bf0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005bf2:	6803      	ldr	r3, [r0, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	6003      	str	r3, [r0, #0]
}
 8005bf8:	4770      	bx	lr

08005bfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bfa:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bfc:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bfe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005c02:	d011      	beq.n	8005c28 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c04:	f100 0308 	add.w	r3, r0, #8
 8005c08:	461c      	mov	r4, r3
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	42aa      	cmp	r2, r5
 8005c10:	d9fa      	bls.n	8005c08 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c16:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c18:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c1a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c1c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005c1e:	6803      	ldr	r3, [r0, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	6003      	str	r3, [r0, #0]
}
 8005c24:	bc30      	pop	{r4, r5}
 8005c26:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c28:	6904      	ldr	r4, [r0, #16]
 8005c2a:	e7f2      	b.n	8005c12 <vListInsert+0x18>

08005c2c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c2c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c2e:	6841      	ldr	r1, [r0, #4]
 8005c30:	6882      	ldr	r2, [r0, #8]
 8005c32:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c34:	6841      	ldr	r1, [r0, #4]
 8005c36:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c3c:	bf04      	itt	eq
 8005c3e:	6882      	ldreq	r2, [r0, #8]
 8005c40:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c42:	2200      	movs	r2, #0
 8005c44:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	3a01      	subs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c4c:	6818      	ldr	r0, [r3, #0]
}
 8005c4e:	4770      	bx	lr

08005c50 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c50:	b510      	push	{r4, lr}
 8005c52:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c54:	f001 fe6e 	bl	8007934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c58:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005c5a:	f001 fe8d 	bl	8007978 <vPortExitCritical>

	return xReturn;
}
 8005c5e:	fab4 f084 	clz	r0, r4
 8005c62:	0940      	lsrs	r0, r0, #5
 8005c64:	bd10      	pop	{r4, pc}

08005c66 <prvCopyDataToQueue>:
{
 8005c66:	b570      	push	{r4, r5, r6, lr}
 8005c68:	4604      	mov	r4, r0
 8005c6a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c6c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c6e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005c70:	b95a      	cbnz	r2, 8005c8a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c72:	6803      	ldr	r3, [r0, #0]
 8005c74:	b11b      	cbz	r3, 8005c7e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005c76:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c78:	3601      	adds	r6, #1
 8005c7a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005c7c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c7e:	6840      	ldr	r0, [r0, #4]
 8005c80:	f001 fb38 	bl	80072f4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	6063      	str	r3, [r4, #4]
 8005c88:	e7f6      	b.n	8005c78 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005c8a:	b96d      	cbnz	r5, 8005ca8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c8c:	6880      	ldr	r0, [r0, #8]
 8005c8e:	f002 fa8a 	bl	80081a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c96:	4413      	add	r3, r2
 8005c98:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c9a:	6862      	ldr	r2, [r4, #4]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d319      	bcc.n	8005cd4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	e7e7      	b.n	8005c78 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca8:	68c0      	ldr	r0, [r0, #12]
 8005caa:	f002 fa7c 	bl	80081a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005cae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005cb0:	4251      	negs	r1, r2
 8005cb2:	68e3      	ldr	r3, [r4, #12]
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d202      	bcs.n	8005cc4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005cbe:	6863      	ldr	r3, [r4, #4]
 8005cc0:	440b      	add	r3, r1
 8005cc2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005cc4:	2d02      	cmp	r5, #2
 8005cc6:	d001      	beq.n	8005ccc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e7d5      	b.n	8005c78 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ccc:	b126      	cbz	r6, 8005cd8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005cce:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	e7d1      	b.n	8005c78 <prvCopyDataToQueue+0x12>
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e7cf      	b.n	8005c78 <prvCopyDataToQueue+0x12>
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e7cd      	b.n	8005c78 <prvCopyDataToQueue+0x12>

08005cdc <prvCopyDataFromQueue>:
{
 8005cdc:	b508      	push	{r3, lr}
 8005cde:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ce0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005ce2:	b162      	cbz	r2, 8005cfe <prvCopyDataFromQueue+0x22>
 8005ce4:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ce6:	68d9      	ldr	r1, [r3, #12]
 8005ce8:	4411      	add	r1, r2
 8005cea:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cec:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005cf0:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cf2:	bf24      	itt	cs
 8005cf4:	6819      	ldrcs	r1, [r3, #0]
 8005cf6:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cf8:	68d9      	ldr	r1, [r3, #12]
 8005cfa:	f002 fa54 	bl	80081a6 <memcpy>
}
 8005cfe:	bd08      	pop	{r3, pc}

08005d00 <prvUnlockQueue>:
{
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005d04:	f001 fe16 	bl	8007934 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005d08:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005d0c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0e:	2c00      	cmp	r4, #0
 8005d10:	dd0f      	ble.n	8005d32 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d12:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005d16:	e002      	b.n	8005d1e <prvUnlockQueue+0x1e>
			--cTxLock;
 8005d18:	3c01      	subs	r4, #1
 8005d1a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d1c:	b14c      	cbz	r4, 8005d32 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d20:	b13b      	cbz	r3, 8005d32 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d22:	4630      	mov	r0, r6
 8005d24:	f001 f9a8 	bl	8007078 <xTaskRemoveFromEventList>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d0f5      	beq.n	8005d18 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005d2c:	f001 fa7a 	bl	8007224 <vTaskMissedYield>
 8005d30:	e7f2      	b.n	8005d18 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005d32:	23ff      	movs	r3, #255	; 0xff
 8005d34:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005d38:	f001 fe1e 	bl	8007978 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005d3c:	f001 fdfa 	bl	8007934 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005d40:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005d44:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d46:	2c00      	cmp	r4, #0
 8005d48:	dd0f      	ble.n	8005d6a <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4a:	f105 0610 	add.w	r6, r5, #16
 8005d4e:	e002      	b.n	8005d56 <prvUnlockQueue+0x56>
				--cRxLock;
 8005d50:	3c01      	subs	r4, #1
 8005d52:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d54:	b14c      	cbz	r4, 8005d6a <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d56:	692b      	ldr	r3, [r5, #16]
 8005d58:	b13b      	cbz	r3, 8005d6a <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f001 f98c 	bl	8007078 <xTaskRemoveFromEventList>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d0f5      	beq.n	8005d50 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8005d64:	f001 fa5e 	bl	8007224 <vTaskMissedYield>
 8005d68:	e7f2      	b.n	8005d50 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8005d6a:	23ff      	movs	r3, #255	; 0xff
 8005d6c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005d70:	f001 fe02 	bl	8007978 <vPortExitCritical>
}
 8005d74:	bd70      	pop	{r4, r5, r6, pc}

08005d76 <xQueueGenericReset>:
{
 8005d76:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005d78:	b1e0      	cbz	r0, 8005db4 <xQueueGenericReset+0x3e>
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005d7e:	f001 fdd9 	bl	8007934 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	18d0      	adds	r0, r2, r3
 8005d8e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d90:	2000      	movs	r0, #0
 8005d92:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d94:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d96:	1a5b      	subs	r3, r3, r1
 8005d98:	441a      	add	r2, r3
 8005d9a:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d9c:	23ff      	movs	r3, #255	; 0xff
 8005d9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005da6:	b9fd      	cbnz	r5, 8005de8 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	b963      	cbnz	r3, 8005dc6 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005dac:	f001 fde4 	bl	8007978 <vPortExitCritical>
}
 8005db0:	2001      	movs	r0, #1
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dc6:	f104 0010 	add.w	r0, r4, #16
 8005dca:	f001 f955 	bl	8007078 <xTaskRemoveFromEventList>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d0ec      	beq.n	8005dac <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005dd2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	e7e1      	b.n	8005dac <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005de8:	f104 0010 	add.w	r0, r4, #16
 8005dec:	f7ff feec 	bl	8005bc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005df0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005df4:	f7ff fee8 	bl	8005bc8 <vListInitialise>
 8005df8:	e7d8      	b.n	8005dac <xQueueGenericReset+0x36>

08005dfa <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dfa:	b940      	cbnz	r0, 8005e0e <xQueueGenericCreateStatic+0x14>
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	e7fe      	b.n	8005e0c <xQueueGenericCreateStatic+0x12>
	{
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	461c      	mov	r4, r3
 8005e14:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8005e16:	b154      	cbz	r4, 8005e2e <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e18:	b192      	cbz	r2, 8005e40 <xQueueGenericCreateStatic+0x46>
 8005e1a:	b9d9      	cbnz	r1, 8005e54 <xQueueGenericCreateStatic+0x5a>
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	e7fe      	b.n	8005e2c <xQueueGenericCreateStatic+0x32>
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005e3e:	e7fe      	b.n	8005e3e <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e40:	b1b1      	cbz	r1, 8005e70 <xQueueGenericCreateStatic+0x76>
 8005e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	e7fe      	b.n	8005e52 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e54:	2050      	movs	r0, #80	; 0x50
 8005e56:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e58:	9801      	ldr	r0, [sp, #4]
 8005e5a:	2850      	cmp	r0, #80	; 0x50
 8005e5c:	d00e      	beq.n	8005e7c <xQueueGenericCreateStatic+0x82>
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	e7fe      	b.n	8005e6e <xQueueGenericCreateStatic+0x74>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e70:	2250      	movs	r2, #80	; 0x50
 8005e72:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e74:	9a01      	ldr	r2, [sp, #4]
 8005e76:	2a50      	cmp	r2, #80	; 0x50
 8005e78:	d1f1      	bne.n	8005e5e <xQueueGenericCreateStatic+0x64>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e7a:	4622      	mov	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 8005e82:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005e84:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e86:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e88:	4601      	mov	r1, r0
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff ff73 	bl	8005d76 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005e90:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005e94:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005e98:	4620      	mov	r0, r4
 8005e9a:	b002      	add	sp, #8
 8005e9c:	bd10      	pop	{r4, pc}

08005e9e <xQueueGenericCreate>:
	{
 8005e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ea0:	b940      	cbnz	r0, 8005eb4 <xQueueGenericCreate+0x16>
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	e7fe      	b.n	8005eb2 <xQueueGenericCreate+0x14>
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	4616      	mov	r6, r2
 8005eb8:	4607      	mov	r7, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eba:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ebe:	3050      	adds	r0, #80	; 0x50
 8005ec0:	f001 fe82 	bl	8007bc8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	b170      	cbz	r0, 8005ee6 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ece:	b164      	cbz	r4, 8005eea <xQueueGenericCreate+0x4c>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005ed0:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ed4:	602b      	str	r3, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005ed6:	63ef      	str	r7, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ed8:	642c      	str	r4, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005eda:	2101      	movs	r1, #1
 8005edc:	4628      	mov	r0, r5
 8005ede:	f7ff ff4a 	bl	8005d76 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005ee2:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
	}
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005eea:	4603      	mov	r3, r0
 8005eec:	e7f2      	b.n	8005ed4 <xQueueGenericCreate+0x36>

08005eee <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8005eee:	b940      	cbnz	r0, 8005f02 <xQueueCreateCountingSemaphoreStatic+0x14>
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	e7fe      	b.n	8005f00 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8005f02:	b510      	push	{r4, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f08:	4288      	cmp	r0, r1
 8005f0a:	d208      	bcs.n	8005f1e <xQueueCreateCountingSemaphoreStatic+0x30>
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	e7fe      	b.n	8005f1c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f1e:	2302      	movs	r3, #2
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	4613      	mov	r3, r2
 8005f24:	2200      	movs	r2, #0
 8005f26:	4611      	mov	r1, r2
 8005f28:	f7ff ff67 	bl	8005dfa <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005f2c:	b100      	cbz	r0, 8005f30 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f2e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005f30:	b002      	add	sp, #8
 8005f32:	bd10      	pop	{r4, pc}

08005f34 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8005f34:	b940      	cbnz	r0, 8005f48 <xQueueCreateCountingSemaphore+0x14>
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	e7fe      	b.n	8005f46 <xQueueCreateCountingSemaphore+0x12>
	{
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f4c:	4288      	cmp	r0, r1
 8005f4e:	d208      	bcs.n	8005f62 <xQueueCreateCountingSemaphore+0x2e>
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	e7fe      	b.n	8005f60 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f62:	2202      	movs	r2, #2
 8005f64:	2100      	movs	r1, #0
 8005f66:	f7ff ff9a 	bl	8005e9e <xQueueGenericCreate>
		if( xHandle != NULL )
 8005f6a:	b100      	cbz	r0, 8005f6e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f6c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005f6e:	bd10      	pop	{r4, pc}

08005f70 <xQueueGenericSend>:
{
 8005f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f74:	b085      	sub	sp, #20
 8005f76:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005f78:	b188      	cbz	r0, 8005f9e <xQueueGenericSend+0x2e>
 8005f7a:	460e      	mov	r6, r1
 8005f7c:	461d      	mov	r5, r3
 8005f7e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f80:	b1b1      	cbz	r1, 8005fb0 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f82:	2d02      	cmp	r5, #2
 8005f84:	d120      	bne.n	8005fc8 <xQueueGenericSend+0x58>
 8005f86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d01d      	beq.n	8005fc8 <xQueueGenericSend+0x58>
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	e7fe      	b.n	8005f9c <xQueueGenericSend+0x2c>
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005fae:	e7fe      	b.n	8005fae <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0e5      	beq.n	8005f82 <xQueueGenericSend+0x12>
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	e7fe      	b.n	8005fc6 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fc8:	f001 f938 	bl	800723c <xTaskGetSchedulerState>
 8005fcc:	b950      	cbnz	r0, 8005fe4 <xQueueGenericSend+0x74>
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	b163      	cbz	r3, 8005fec <xQueueGenericSend+0x7c>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGenericSend+0x72>
 8005fe4:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005fe8:	2700      	movs	r7, #0
 8005fea:	e03a      	b.n	8006062 <xQueueGenericSend+0xf2>
 8005fec:	f04f 0800 	mov.w	r8, #0
 8005ff0:	e7fa      	b.n	8005fe8 <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7ff fe35 	bl	8005c66 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ffe:	b983      	cbnz	r3, 8006022 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8006000:	b148      	cbz	r0, 8006016 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8006002:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006016:	f001 fcaf 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 800601a:	2001      	movs	r0, #1
}
 800601c:	b005      	add	sp, #20
 800601e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006022:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006026:	f001 f827 	bl	8007078 <xTaskRemoveFromEventList>
 800602a:	2800      	cmp	r0, #0
 800602c:	d0f3      	beq.n	8006016 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 800602e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006036:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	e7e8      	b.n	8006016 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8006044:	f001 fc98 	bl	8007978 <vPortExitCritical>
					return errQUEUE_FULL;
 8006048:	2000      	movs	r0, #0
 800604a:	e7e7      	b.n	800601c <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800604c:	a802      	add	r0, sp, #8
 800604e:	f001 f89b 	bl	8007188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006052:	e014      	b.n	800607e <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff fe53 	bl	8005d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800605a:	f000 fe89 	bl	8006d70 <xTaskResumeAll>
 800605e:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8006062:	f001 fc67 	bl	8007934 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006066:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800606a:	429a      	cmp	r2, r3
 800606c:	d3c1      	bcc.n	8005ff2 <xQueueGenericSend+0x82>
 800606e:	2d02      	cmp	r5, #2
 8006070:	d0bf      	beq.n	8005ff2 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006072:	9b01      	ldr	r3, [sp, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0e5      	beq.n	8006044 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8006078:	f1b8 0f00 	cmp.w	r8, #0
 800607c:	d0e6      	beq.n	800604c <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 800607e:	f001 fc7b 	bl	8007978 <vPortExitCritical>
		vTaskSuspendAll();
 8006082:	f000 fdcd 	bl	8006c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006086:	f001 fc55 	bl	8007934 <vPortEnterCritical>
 800608a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800608e:	b252      	sxtb	r2, r2
 8006090:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006094:	bf08      	it	eq
 8006096:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800609a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800609e:	b252      	sxtb	r2, r2
 80060a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80060a4:	bf08      	it	eq
 80060a6:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80060aa:	f001 fc65 	bl	8007978 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060ae:	a901      	add	r1, sp, #4
 80060b0:	a802      	add	r0, sp, #8
 80060b2:	f001 f875 	bl	80071a0 <xTaskCheckForTimeOut>
 80060b6:	bb00      	cbnz	r0, 80060fa <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060b8:	f001 fc3c 	bl	8007934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060bc:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 80060c0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80060c4:	f001 fc58 	bl	8007978 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060c8:	45c1      	cmp	r9, r8
 80060ca:	d1c3      	bne.n	8006054 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060cc:	9901      	ldr	r1, [sp, #4]
 80060ce:	f104 0010 	add.w	r0, r4, #16
 80060d2:	f000 ff6f 	bl	8006fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060d6:	4620      	mov	r0, r4
 80060d8:	f7ff fe12 	bl	8005d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060dc:	f000 fe48 	bl	8006d70 <xTaskResumeAll>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d1bc      	bne.n	800605e <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 80060e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	e7b1      	b.n	800605e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7ff fe00 	bl	8005d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006100:	f000 fe36 	bl	8006d70 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006104:	2000      	movs	r0, #0
 8006106:	e789      	b.n	800601c <xQueueGenericSend+0xac>

08006108 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8006108:	b148      	cbz	r0, 800611e <prvInitialiseMutex+0x16>
	{
 800610a:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800610c:	2100      	movs	r1, #0
 800610e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006110:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006112:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006114:	460b      	mov	r3, r1
 8006116:	460a      	mov	r2, r1
 8006118:	f7ff ff2a 	bl	8005f70 <xQueueGenericSend>
	}
 800611c:	bd08      	pop	{r3, pc}
 800611e:	4770      	bx	lr

08006120 <xQueueCreateMutex>:
	{
 8006120:	b510      	push	{r4, lr}
 8006122:	4602      	mov	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006124:	2100      	movs	r1, #0
 8006126:	2001      	movs	r0, #1
 8006128:	f7ff feb9 	bl	8005e9e <xQueueGenericCreate>
 800612c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800612e:	f7ff ffeb 	bl	8006108 <prvInitialiseMutex>
	}
 8006132:	4620      	mov	r0, r4
 8006134:	bd10      	pop	{r4, pc}

08006136 <xQueueCreateMutexStatic>:
	{
 8006136:	b510      	push	{r4, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800613c:	9000      	str	r0, [sp, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	4611      	mov	r1, r2
 8006142:	2001      	movs	r0, #1
 8006144:	f7ff fe59 	bl	8005dfa <xQueueGenericCreateStatic>
 8006148:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800614a:	f7ff ffdd 	bl	8006108 <prvInitialiseMutex>
	}
 800614e:	4620      	mov	r0, r4
 8006150:	b002      	add	sp, #8
 8006152:	bd10      	pop	{r4, pc}

08006154 <xQueueGiveMutexRecursive>:
	{
 8006154:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006156:	b138      	cbz	r0, 8006168 <xQueueGiveMutexRecursive+0x14>
 8006158:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800615a:	6845      	ldr	r5, [r0, #4]
 800615c:	f001 f868 	bl	8007230 <xTaskGetCurrentTaskHandle>
 8006160:	4285      	cmp	r5, r0
 8006162:	d00a      	beq.n	800617a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8006164:	2000      	movs	r0, #0
	}
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8006178:	e7fe      	b.n	8006178 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	3b01      	subs	r3, #1
 800617e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006180:	b10b      	cbz	r3, 8006186 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8006182:	2001      	movs	r0, #1
		return xReturn;
 8006184:	e7ef      	b.n	8006166 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006186:	461a      	mov	r2, r3
 8006188:	4619      	mov	r1, r3
 800618a:	4620      	mov	r0, r4
 800618c:	f7ff fef0 	bl	8005f70 <xQueueGenericSend>
			xReturn = pdPASS;
 8006190:	2001      	movs	r0, #1
 8006192:	e7e8      	b.n	8006166 <xQueueGiveMutexRecursive+0x12>

08006194 <xQueueGenericSendFromISR>:
{
 8006194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006198:	b190      	cbz	r0, 80061c0 <xQueueGenericSendFromISR+0x2c>
 800619a:	460f      	mov	r7, r1
 800619c:	4616      	mov	r6, r2
 800619e:	461c      	mov	r4, r3
 80061a0:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a2:	b1b1      	cbz	r1, 80061d2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a4:	2c02      	cmp	r4, #2
 80061a6:	d120      	bne.n	80061ea <xQueueGenericSendFromISR+0x56>
 80061a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d01d      	beq.n	80061ea <xQueueGenericSendFromISR+0x56>
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	e7fe      	b.n	80061be <xQueueGenericSendFromISR+0x2a>
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80061d0:	e7fe      	b.n	80061d0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0e5      	beq.n	80061a4 <xQueueGenericSendFromISR+0x10>
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	e7fe      	b.n	80061e8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061ea:	f001 fc91 	bl	8007b10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061ee:	f3ef 8811 	mrs	r8, BASEPRI
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006202:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006204:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006206:	429a      	cmp	r2, r3
 8006208:	d306      	bcc.n	8006218 <xQueueGenericSendFromISR+0x84>
 800620a:	2c02      	cmp	r4, #2
 800620c:	d004      	beq.n	8006218 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800620e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006210:	f388 8811 	msr	BASEPRI, r8
}
 8006214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8006218:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 800621c:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006220:	4622      	mov	r2, r4
 8006222:	4639      	mov	r1, r7
 8006224:	4628      	mov	r0, r5
 8006226:	f7ff fd1e 	bl	8005c66 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800622a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800622e:	d006      	beq.n	800623e <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006230:	f109 0301 	add.w	r3, r9, #1
 8006234:	b25b      	sxtb	r3, r3
 8006236:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800623a:	2001      	movs	r0, #1
 800623c:	e7e8      	b.n	8006210 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800623e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006240:	b90b      	cbnz	r3, 8006246 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8006242:	2001      	movs	r0, #1
 8006244:	e7e4      	b.n	8006210 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006246:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800624a:	f000 ff15 	bl	8007078 <xTaskRemoveFromEventList>
 800624e:	b118      	cbz	r0, 8006258 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006250:	b126      	cbz	r6, 800625c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006252:	2001      	movs	r0, #1
 8006254:	6030      	str	r0, [r6, #0]
 8006256:	e7db      	b.n	8006210 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8006258:	2001      	movs	r0, #1
 800625a:	e7d9      	b.n	8006210 <xQueueGenericSendFromISR+0x7c>
 800625c:	2001      	movs	r0, #1
 800625e:	e7d7      	b.n	8006210 <xQueueGenericSendFromISR+0x7c>

08006260 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8006260:	b168      	cbz	r0, 800627e <xQueueGiveFromISR+0x1e>
{
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	460c      	mov	r4, r1
 8006266:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006268:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800626a:	b18b      	cbz	r3, 8006290 <xQueueGiveFromISR+0x30>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	e7fe      	b.n	800627c <xQueueGiveFromISR+0x1c>
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800628e:	e7fe      	b.n	800628e <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006290:	6803      	ldr	r3, [r0, #0]
 8006292:	b1eb      	cbz	r3, 80062d0 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006294:	f001 fc3c 	bl	8007b10 <vPortValidateInterruptPriority>
	__asm volatile
 8006298:	f3ef 8611 	mrs	r6, BASEPRI
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ac:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80062ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d926      	bls.n	8006302 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80062b4:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80062b8:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062ba:	3201      	adds	r2, #1
 80062bc:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d011      	beq.n	80062e8 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062c4:	3301      	adds	r3, #1
 80062c6:	b25b      	sxtb	r3, r3
 80062c8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80062cc:	2001      	movs	r0, #1
 80062ce:	e019      	b.n	8006304 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80062d0:	6843      	ldr	r3, [r0, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0de      	beq.n	8006294 <xQueueGiveFromISR+0x34>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	e7fe      	b.n	80062e6 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062ea:	b90b      	cbnz	r3, 80062f0 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80062ec:	2001      	movs	r0, #1
 80062ee:	e009      	b.n	8006304 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80062f4:	f000 fec0 	bl	8007078 <xTaskRemoveFromEventList>
 80062f8:	b138      	cbz	r0, 800630a <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 80062fa:	b144      	cbz	r4, 800630e <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062fc:	2001      	movs	r0, #1
 80062fe:	6020      	str	r0, [r4, #0]
 8006300:	e000      	b.n	8006304 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8006302:	2000      	movs	r0, #0
	__asm volatile
 8006304:	f386 8811 	msr	BASEPRI, r6
}
 8006308:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800630a:	2001      	movs	r0, #1
 800630c:	e7fa      	b.n	8006304 <xQueueGiveFromISR+0xa4>
 800630e:	2001      	movs	r0, #1
 8006310:	e7f8      	b.n	8006304 <xQueueGiveFromISR+0xa4>

08006312 <xQueueReceive>:
{
 8006312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800631a:	b180      	cbz	r0, 800633e <xQueueReceive+0x2c>
 800631c:	460e      	mov	r6, r1
 800631e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006320:	b1b1      	cbz	r1, 8006350 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006322:	f000 ff8b 	bl	800723c <xTaskGetSchedulerState>
 8006326:	b9f8      	cbnz	r0, 8006368 <xQueueReceive+0x56>
 8006328:	9b01      	ldr	r3, [sp, #4]
 800632a:	b30b      	cbz	r3, 8006370 <xQueueReceive+0x5e>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	e7fe      	b.n	800633c <xQueueReceive+0x2a>
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800634e:	e7fe      	b.n	800634e <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006350:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0e5      	beq.n	8006322 <xQueueReceive+0x10>
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	e7fe      	b.n	8006366 <xQueueReceive+0x54>
 8006368:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800636c:	2700      	movs	r7, #0
 800636e:	e03b      	b.n	80063e8 <xQueueReceive+0xd6>
 8006370:	f04f 0800 	mov.w	r8, #0
 8006374:	e7fa      	b.n	800636c <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006376:	4631      	mov	r1, r6
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff fcaf 	bl	8005cdc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800637e:	3d01      	subs	r5, #1
 8006380:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	b92b      	cbnz	r3, 8006392 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8006386:	f001 faf7 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 800638a:	2001      	movs	r0, #1
}
 800638c:	b004      	add	sp, #16
 800638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006392:	f104 0010 	add.w	r0, r4, #16
 8006396:	f000 fe6f 	bl	8007078 <xTaskRemoveFromEventList>
 800639a:	2800      	cmp	r0, #0
 800639c:	d0f3      	beq.n	8006386 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800639e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	e7e8      	b.n	8006386 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 80063b4:	f001 fae0 	bl	8007978 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80063b8:	2000      	movs	r0, #0
 80063ba:	e7e7      	b.n	800638c <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063bc:	a802      	add	r0, sp, #8
 80063be:	f000 fee3 	bl	8007188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063c2:	e01c      	b.n	80063fe <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 80063c4:	4620      	mov	r0, r4
 80063c6:	f7ff fc9b 	bl	8005d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ca:	f000 fcd1 	bl	8006d70 <xTaskResumeAll>
 80063ce:	e009      	b.n	80063e4 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 80063d0:	4620      	mov	r0, r4
 80063d2:	f7ff fc95 	bl	8005d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063d6:	f000 fccb 	bl	8006d70 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063da:	4620      	mov	r0, r4
 80063dc:	f7ff fc38 	bl	8005c50 <prvIsQueueEmpty>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d146      	bne.n	8006472 <xQueueReceive+0x160>
 80063e4:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 80063e8:	f001 faa4 	bl	8007934 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	d1c1      	bne.n	8006376 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80063f2:	9b01      	ldr	r3, [sp, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0dd      	beq.n	80063b4 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 80063f8:	f1b8 0f00 	cmp.w	r8, #0
 80063fc:	d0de      	beq.n	80063bc <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 80063fe:	f001 fabb 	bl	8007978 <vPortExitCritical>
		vTaskSuspendAll();
 8006402:	f000 fc0d 	bl	8006c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006406:	f001 fa95 	bl	8007934 <vPortEnterCritical>
 800640a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800640e:	b25b      	sxtb	r3, r3
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	bf08      	it	eq
 8006416:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800641a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800641e:	b25b      	sxtb	r3, r3
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	bf08      	it	eq
 8006426:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800642a:	f001 faa5 	bl	8007978 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800642e:	a901      	add	r1, sp, #4
 8006430:	a802      	add	r0, sp, #8
 8006432:	f000 feb5 	bl	80071a0 <xTaskCheckForTimeOut>
 8006436:	2800      	cmp	r0, #0
 8006438:	d1ca      	bne.n	80063d0 <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800643a:	4620      	mov	r0, r4
 800643c:	f7ff fc08 	bl	8005c50 <prvIsQueueEmpty>
 8006440:	2800      	cmp	r0, #0
 8006442:	d0bf      	beq.n	80063c4 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006444:	9901      	ldr	r1, [sp, #4]
 8006446:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800644a:	f000 fdb3 	bl	8006fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800644e:	4620      	mov	r0, r4
 8006450:	f7ff fc56 	bl	8005d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006454:	f000 fc8c 	bl	8006d70 <xTaskResumeAll>
 8006458:	2800      	cmp	r0, #0
 800645a:	d1c3      	bne.n	80063e4 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 800645c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006464:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	e7b8      	b.n	80063e4 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8006472:	2000      	movs	r0, #0
 8006474:	e78a      	b.n	800638c <xQueueReceive+0x7a>

08006476 <xQueueSemaphoreTake>:
{
 8006476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006478:	b085      	sub	sp, #20
 800647a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800647c:	b158      	cbz	r0, 8006496 <xQueueSemaphoreTake+0x20>
 800647e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006480:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006482:	b18b      	cbz	r3, 80064a8 <xQueueSemaphoreTake+0x32>
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	e7fe      	b.n	8006494 <xQueueSemaphoreTake+0x1e>
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80064a6:	e7fe      	b.n	80064a6 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064a8:	f000 fec8 	bl	800723c <xTaskGetSchedulerState>
 80064ac:	b950      	cbnz	r0, 80064c4 <xQueueSemaphoreTake+0x4e>
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	b163      	cbz	r3, 80064cc <xQueueSemaphoreTake+0x56>
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	e7fe      	b.n	80064c2 <xQueueSemaphoreTake+0x4c>
 80064c4:	2600      	movs	r6, #0
 80064c6:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 80064c8:	2500      	movs	r5, #0
 80064ca:	e04e      	b.n	800656a <xQueueSemaphoreTake+0xf4>
 80064cc:	2600      	movs	r6, #0
 80064ce:	4637      	mov	r7, r6
 80064d0:	e7fa      	b.n	80064c8 <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80064d2:	3b01      	subs	r3, #1
 80064d4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	b13b      	cbz	r3, 80064ea <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	b94b      	cbnz	r3, 80064f2 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 80064de:	f001 fa4b 	bl	8007978 <vPortExitCritical>
				return pdPASS;
 80064e2:	2601      	movs	r6, #1
}
 80064e4:	4630      	mov	r0, r6
 80064e6:	b005      	add	sp, #20
 80064e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80064ea:	f000 ffa7 	bl	800743c <pvTaskIncrementMutexHeldCount>
 80064ee:	6060      	str	r0, [r4, #4]
 80064f0:	e7f3      	b.n	80064da <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f2:	f104 0010 	add.w	r0, r4, #16
 80064f6:	f000 fdbf 	bl	8007078 <xTaskRemoveFromEventList>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d0ef      	beq.n	80064de <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 80064fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006506:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	e7e4      	b.n	80064de <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006514:	b146      	cbz	r6, 8006528 <xQueueSemaphoreTake+0xb2>
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	e7fe      	b.n	8006526 <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 8006528:	f001 fa26 	bl	8007978 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800652c:	e7da      	b.n	80064e4 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800652e:	a802      	add	r0, sp, #8
 8006530:	f000 fe2a 	bl	8007188 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006534:	e023      	b.n	800657e <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 8006536:	f001 f9fd 	bl	8007934 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800653a:	6860      	ldr	r0, [r4, #4]
 800653c:	f000 fe8e 	bl	800725c <xTaskPriorityInherit>
 8006540:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8006542:	f001 fa19 	bl	8007978 <vPortExitCritical>
 8006546:	e040      	b.n	80065ca <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 8006548:	4620      	mov	r0, r4
 800654a:	f7ff fbd9 	bl	8005d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800654e:	f000 fc0f 	bl	8006d70 <xTaskResumeAll>
 8006552:	e009      	b.n	8006568 <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 8006554:	4620      	mov	r0, r4
 8006556:	f7ff fbd3 	bl	8005d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800655a:	f000 fc09 	bl	8006d70 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800655e:	4620      	mov	r0, r4
 8006560:	f7ff fb76 	bl	8005c50 <prvIsQueueEmpty>
 8006564:	2800      	cmp	r0, #0
 8006566:	d147      	bne.n	80065f8 <xQueueSemaphoreTake+0x182>
 8006568:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800656a:	f001 f9e3 	bl	8007934 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800656e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1ae      	bne.n	80064d2 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0cc      	beq.n	8006514 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800657a:	2f00      	cmp	r7, #0
 800657c:	d0d7      	beq.n	800652e <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 800657e:	f001 f9fb 	bl	8007978 <vPortExitCritical>
		vTaskSuspendAll();
 8006582:	f000 fb4d 	bl	8006c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006586:	f001 f9d5 	bl	8007934 <vPortEnterCritical>
 800658a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800658e:	b25b      	sxtb	r3, r3
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006594:	bf08      	it	eq
 8006596:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 800659a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	bf08      	it	eq
 80065a6:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 80065aa:	f001 f9e5 	bl	8007978 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ae:	a901      	add	r1, sp, #4
 80065b0:	a802      	add	r0, sp, #8
 80065b2:	f000 fdf5 	bl	80071a0 <xTaskCheckForTimeOut>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d1cc      	bne.n	8006554 <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065ba:	4620      	mov	r0, r4
 80065bc:	f7ff fb48 	bl	8005c50 <prvIsQueueEmpty>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d0c1      	beq.n	8006548 <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0b5      	beq.n	8006536 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065ca:	9901      	ldr	r1, [sp, #4]
 80065cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80065d0:	f000 fcf0 	bl	8006fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065d4:	4620      	mov	r0, r4
 80065d6:	f7ff fb93 	bl	8005d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065da:	f000 fbc9 	bl	8006d70 <xTaskResumeAll>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d1c2      	bne.n	8006568 <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 80065e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80065e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	e7b7      	b.n	8006568 <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	f43f af73 	beq.w	80064e4 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 80065fe:	f001 f999 	bl	8007934 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006602:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006604:	b119      	cbz	r1, 800660e <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006606:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006608:	6819      	ldr	r1, [r3, #0]
 800660a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800660e:	6860      	ldr	r0, [r4, #4]
 8006610:	f000 feb8 	bl	8007384 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006614:	f001 f9b0 	bl	8007978 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006618:	2600      	movs	r6, #0
 800661a:	e763      	b.n	80064e4 <xQueueSemaphoreTake+0x6e>

0800661c <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800661c:	b180      	cbz	r0, 8006640 <xQueueTakeMutexRecursive+0x24>
	{
 800661e:	b570      	push	{r4, r5, r6, lr}
 8006620:	460c      	mov	r4, r1
 8006622:	4605      	mov	r5, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006624:	6846      	ldr	r6, [r0, #4]
 8006626:	f000 fe03 	bl	8007230 <xTaskGetCurrentTaskHandle>
 800662a:	4286      	cmp	r6, r0
 800662c:	d011      	beq.n	8006652 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800662e:	4621      	mov	r1, r4
 8006630:	4628      	mov	r0, r5
 8006632:	f7ff ff20 	bl	8006476 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006636:	b180      	cbz	r0, 800665a <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.uxRecursiveCallCount )++;
 8006638:	68eb      	ldr	r3, [r5, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60eb      	str	r3, [r5, #12]
		return xReturn;
 800663e:	e00c      	b.n	800665a <xQueueTakeMutexRecursive+0x3e>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8006650:	e7fe      	b.n	8006650 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.uxRecursiveCallCount )++;
 8006652:	68eb      	ldr	r3, [r5, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8006658:	2001      	movs	r0, #1
	}
 800665a:	bd70      	pop	{r4, r5, r6, pc}

0800665c <xQueueReceiveFromISR>:
{
 800665c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006660:	b1b0      	cbz	r0, 8006690 <xQueueReceiveFromISR+0x34>
 8006662:	460d      	mov	r5, r1
 8006664:	4690      	mov	r8, r2
 8006666:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006668:	b1d9      	cbz	r1, 80066a2 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800666a:	f001 fa51 	bl	8007b10 <vPortValidateInterruptPriority>
	__asm volatile
 800666e:	f3ef 8711 	mrs	r7, BASEPRI
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006682:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006684:	b9ce      	cbnz	r6, 80066ba <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8006686:	2000      	movs	r0, #0
	__asm volatile
 8006688:	f387 8811 	msr	BASEPRI, r7
}
 800668c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80066a0:	e7fe      	b.n	80066a0 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0e0      	beq.n	800666a <xQueueReceiveFromISR+0xe>
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	e7fe      	b.n	80066b8 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80066ba:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80066be:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066c2:	4629      	mov	r1, r5
 80066c4:	4620      	mov	r0, r4
 80066c6:	f7ff fb09 	bl	8005cdc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066ca:	1e73      	subs	r3, r6, #1
 80066cc:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80066ce:	f1b9 3fff 	cmp.w	r9, #4294967295
 80066d2:	d006      	beq.n	80066e2 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80066d4:	f109 0301 	add.w	r3, r9, #1
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80066de:	2001      	movs	r0, #1
 80066e0:	e7d2      	b.n	8006688 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	b90b      	cbnz	r3, 80066ea <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80066e6:	2001      	movs	r0, #1
 80066e8:	e7ce      	b.n	8006688 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ea:	f104 0010 	add.w	r0, r4, #16
 80066ee:	f000 fcc3 	bl	8007078 <xTaskRemoveFromEventList>
 80066f2:	b130      	cbz	r0, 8006702 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80066f4:	f1b8 0f00 	cmp.w	r8, #0
 80066f8:	d005      	beq.n	8006706 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80066fa:	2001      	movs	r0, #1
 80066fc:	f8c8 0000 	str.w	r0, [r8]
 8006700:	e7c2      	b.n	8006688 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8006702:	2001      	movs	r0, #1
 8006704:	e7c0      	b.n	8006688 <xQueueReceiveFromISR+0x2c>
 8006706:	2001      	movs	r0, #1
 8006708:	e7be      	b.n	8006688 <xQueueReceiveFromISR+0x2c>
	...

0800670c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800670c:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800670e:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006710:	4c07      	ldr	r4, [pc, #28]	; (8006730 <vQueueAddToRegistry+0x24>)
 8006712:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8006716:	b122      	cbz	r2, 8006722 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006718:	3301      	adds	r3, #1
 800671a:	2b08      	cmp	r3, #8
 800671c:	d1f9      	bne.n	8006712 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800671e:	bc10      	pop	{r4}
 8006720:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006722:	4a03      	ldr	r2, [pc, #12]	; (8006730 <vQueueAddToRegistry+0x24>)
 8006724:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006728:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800672c:	6050      	str	r0, [r2, #4]
				break;
 800672e:	e7f6      	b.n	800671e <vQueueAddToRegistry+0x12>
 8006730:	20001050 	.word	0x20001050

08006734 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006734:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006736:	4909      	ldr	r1, [pc, #36]	; (800675c <vQueueUnregisterQueue+0x28>)
 8006738:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800673c:	6852      	ldr	r2, [r2, #4]
 800673e:	4282      	cmp	r2, r0
 8006740:	d003      	beq.n	800674a <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006742:	3301      	adds	r3, #1
 8006744:	2b08      	cmp	r3, #8
 8006746:	d1f7      	bne.n	8006738 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006748:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800674a:	4a04      	ldr	r2, [pc, #16]	; (800675c <vQueueUnregisterQueue+0x28>)
 800674c:	2100      	movs	r1, #0
 800674e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006752:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006756:	6051      	str	r1, [r2, #4]
				break;
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20001050 	.word	0x20001050

08006760 <vQueueDelete>:
	configASSERT( pxQueue );
 8006760:	b138      	cbz	r0, 8006772 <vQueueDelete+0x12>
{
 8006762:	b510      	push	{r4, lr}
 8006764:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8006766:	f7ff ffe5 	bl	8006734 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800676a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800676e:	b14b      	cbz	r3, 8006784 <vQueueDelete+0x24>
}
 8006770:	bd10      	pop	{r4, pc}
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006782:	e7fe      	b.n	8006782 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8006784:	4620      	mov	r0, r4
 8006786:	f001 fab5 	bl	8007cf4 <vPortFree>
}
 800678a:	e7f1      	b.n	8006770 <vQueueDelete+0x10>

0800678c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	4604      	mov	r4, r0
 8006790:	460d      	mov	r5, r1
 8006792:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006794:	f001 f8ce 	bl	8007934 <vPortEnterCritical>
 8006798:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800679c:	b25b      	sxtb	r3, r3
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	bf04      	itt	eq
 80067a4:	2300      	moveq	r3, #0
 80067a6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80067aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80067ae:	b25b      	sxtb	r3, r3
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	bf04      	itt	eq
 80067b6:	2300      	moveq	r3, #0
 80067b8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80067bc:	f001 f8dc 	bl	8007978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80067c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067c2:	b11b      	cbz	r3, 80067cc <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067c4:	4620      	mov	r0, r4
 80067c6:	f7ff fa9b 	bl	8005d00 <prvUnlockQueue>
	}
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80067cc:	4632      	mov	r2, r6
 80067ce:	4629      	mov	r1, r5
 80067d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067d4:	f000 fc32 	bl	800703c <vTaskPlaceOnEventListRestricted>
 80067d8:	e7f4      	b.n	80067c4 <vQueueWaitForMessageRestricted+0x38>
	...

080067dc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067dc:	4b08      	ldr	r3, [pc, #32]	; (8006800 <prvResetNextTaskUnblockTime+0x24>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	b923      	cbnz	r3, 80067ee <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067e4:	4b07      	ldr	r3, [pc, #28]	; (8006804 <prvResetNextTaskUnblockTime+0x28>)
 80067e6:	f04f 32ff 	mov.w	r2, #4294967295
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067ee:	4b04      	ldr	r3, [pc, #16]	; (8006800 <prvResetNextTaskUnblockTime+0x24>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <prvResetNextTaskUnblockTime+0x28>)
 80067fa:	601a      	str	r2, [r3, #0]
	}
}
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	20001094 	.word	0x20001094
 8006804:	2000153c 	.word	0x2000153c

08006808 <prvInitialiseNewTask>:
{
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	4606      	mov	r6, r0
 800680e:	4689      	mov	r9, r1
 8006810:	461f      	mov	r7, r3
 8006812:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006816:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006818:	0095      	lsls	r5, r2, #2
 800681a:	462a      	mov	r2, r5
 800681c:	21a5      	movs	r1, #165	; 0xa5
 800681e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006820:	f001 fc3d 	bl	800809e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006824:	3d04      	subs	r5, #4
 8006826:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006828:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800682a:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800682e:	f109 3cff 	add.w	ip, r9, #4294967295
 8006832:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8006836:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800683a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800683e:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8006842:	b10a      	cbz	r2, 8006848 <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006844:	458c      	cmp	ip, r1
 8006846:	d1f8      	bne.n	800683a <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006848:	f04f 0a00 	mov.w	sl, #0
 800684c:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006850:	9b08      	ldr	r3, [sp, #32]
 8006852:	2b37      	cmp	r3, #55	; 0x37
 8006854:	bf28      	it	cs
 8006856:	2337      	movcs	r3, #55	; 0x37
 8006858:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 800685a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800685c:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800685e:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006862:	1d20      	adds	r0, r4, #4
 8006864:	f7ff f9bb 	bl	8005bde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006868:	f104 0018 	add.w	r0, r4, #24
 800686c:	f7ff f9b7 	bl	8005bde <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006870:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006872:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8006876:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006878:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800687a:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 800687e:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006882:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006886:	463a      	mov	r2, r7
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	f001 f82c 	bl	80078e8 <pxPortInitialiseStack>
 8006890:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006892:	f1b8 0f00 	cmp.w	r8, #0
 8006896:	d001      	beq.n	800689c <prvInitialiseNewTask+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006898:	f8c8 4000 	str.w	r4, [r8]
}
 800689c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080068a0 <prvAddNewTaskToReadyList>:
{
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80068a4:	f001 f846 	bl	8007934 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80068a8:	4a30      	ldr	r2, [pc, #192]	; (800696c <prvAddNewTaskToReadyList+0xcc>)
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068b0:	4b2f      	ldr	r3, [pc, #188]	; (8006970 <prvAddNewTaskToReadyList+0xd0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d034      	beq.n	8006922 <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 80068b8:	4b2e      	ldr	r3, [pc, #184]	; (8006974 <prvAddNewTaskToReadyList+0xd4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	b93b      	cbnz	r3, 80068ce <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068be:	4b2c      	ldr	r3, [pc, #176]	; (8006970 <prvAddNewTaskToReadyList+0xd0>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80068c6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80068c8:	bf9c      	itt	ls
 80068ca:	4b29      	ldrls	r3, [pc, #164]	; (8006970 <prvAddNewTaskToReadyList+0xd0>)
 80068cc:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 80068ce:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <prvAddNewTaskToReadyList+0xd8>)
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068d6:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80068d8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80068da:	4b28      	ldr	r3, [pc, #160]	; (800697c <prvAddNewTaskToReadyList+0xdc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4298      	cmp	r0, r3
 80068e0:	bf84      	itt	hi
 80068e2:	4b26      	ldrhi	r3, [pc, #152]	; (800697c <prvAddNewTaskToReadyList+0xdc>)
 80068e4:	6018      	strhi	r0, [r3, #0]
 80068e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80068ea:	1d29      	adds	r1, r5, #4
 80068ec:	4b24      	ldr	r3, [pc, #144]	; (8006980 <prvAddNewTaskToReadyList+0xe0>)
 80068ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068f2:	f7ff f977 	bl	8005be4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80068f6:	f001 f83f 	bl	8007978 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80068fa:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <prvAddNewTaskToReadyList+0xd4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	b17b      	cbz	r3, 8006920 <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006900:	4b1b      	ldr	r3, [pc, #108]	; (8006970 <prvAddNewTaskToReadyList+0xd0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006906:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006908:	429a      	cmp	r2, r3
 800690a:	d209      	bcs.n	8006920 <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 800690c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006914:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	f3bf 8f6f 	isb	sy
}
 8006920:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <prvAddNewTaskToReadyList+0xd0>)
 8006924:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006926:	6813      	ldr	r3, [r2, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d1d0      	bne.n	80068ce <prvAddNewTaskToReadyList+0x2e>
 800692c:	4c14      	ldr	r4, [pc, #80]	; (8006980 <prvAddNewTaskToReadyList+0xe0>)
 800692e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006932:	4620      	mov	r0, r4
 8006934:	f7ff f948 	bl	8005bc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006938:	3414      	adds	r4, #20
 800693a:	42b4      	cmp	r4, r6
 800693c:	d1f9      	bne.n	8006932 <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 800693e:	4e11      	ldr	r6, [pc, #68]	; (8006984 <prvAddNewTaskToReadyList+0xe4>)
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff f941 	bl	8005bc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006946:	4c10      	ldr	r4, [pc, #64]	; (8006988 <prvAddNewTaskToReadyList+0xe8>)
 8006948:	4620      	mov	r0, r4
 800694a:	f7ff f93d 	bl	8005bc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800694e:	480f      	ldr	r0, [pc, #60]	; (800698c <prvAddNewTaskToReadyList+0xec>)
 8006950:	f7ff f93a 	bl	8005bc8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006954:	480e      	ldr	r0, [pc, #56]	; (8006990 <prvAddNewTaskToReadyList+0xf0>)
 8006956:	f7ff f937 	bl	8005bc8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800695a:	480e      	ldr	r0, [pc, #56]	; (8006994 <prvAddNewTaskToReadyList+0xf4>)
 800695c:	f7ff f934 	bl	8005bc8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006960:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <prvAddNewTaskToReadyList+0xf8>)
 8006962:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006964:	4b0d      	ldr	r3, [pc, #52]	; (800699c <prvAddNewTaskToReadyList+0xfc>)
 8006966:	601c      	str	r4, [r3, #0]
}
 8006968:	e7b1      	b.n	80068ce <prvAddNewTaskToReadyList+0x2e>
 800696a:	bf00      	nop
 800696c:	200014fc 	.word	0x200014fc
 8006970:	20001090 	.word	0x20001090
 8006974:	20001558 	.word	0x20001558
 8006978:	2000150c 	.word	0x2000150c
 800697c:	20001510 	.word	0x20001510
 8006980:	2000109c 	.word	0x2000109c
 8006984:	20001514 	.word	0x20001514
 8006988:	20001528 	.word	0x20001528
 800698c:	20001544 	.word	0x20001544
 8006990:	20001570 	.word	0x20001570
 8006994:	2000155c 	.word	0x2000155c
 8006998:	20001094 	.word	0x20001094
 800699c:	20001098 	.word	0x20001098

080069a0 <prvDeleteTCB>:
	{
 80069a0:	b510      	push	{r4, lr}
 80069a2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069a4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80069a8:	b163      	cbz	r3, 80069c4 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d011      	beq.n	80069d2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d00e      	beq.n	80069d0 <prvDeleteTCB+0x30>
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	e7fe      	b.n	80069c2 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80069c4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80069c6:	f001 f995 	bl	8007cf4 <vPortFree>
				vPortFree( pxTCB );
 80069ca:	4620      	mov	r0, r4
 80069cc:	f001 f992 	bl	8007cf4 <vPortFree>
	}
 80069d0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80069d2:	f001 f98f 	bl	8007cf4 <vPortFree>
 80069d6:	e7fb      	b.n	80069d0 <prvDeleteTCB+0x30>

080069d8 <prvIdleTask>:
{
 80069d8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069da:	4c15      	ldr	r4, [pc, #84]	; (8006a30 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80069dc:	4f15      	ldr	r7, [pc, #84]	; (8006a34 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80069de:	4e16      	ldr	r6, [pc, #88]	; (8006a38 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069e0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006a3c <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	b1a3      	cbz	r3, 8006a12 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80069e8:	f000 ffa4 	bl	8007934 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f0:	1d28      	adds	r0, r5, #4
 80069f2:	f7ff f91b 	bl	8005c2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069f6:	6833      	ldr	r3, [r6, #0]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006a02:	f000 ffb9 	bl	8007978 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7ff ffca 	bl	80069a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1ea      	bne.n	80069e8 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a12:	f8d8 3000 	ldr.w	r3, [r8]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d9e4      	bls.n	80069e4 <prvIdleTask+0xc>
				taskYIELD();
 8006a1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	e7d9      	b.n	80069e4 <prvIdleTask+0xc>
 8006a30:	20001500 	.word	0x20001500
 8006a34:	20001570 	.word	0x20001570
 8006a38:	200014fc 	.word	0x200014fc
 8006a3c:	2000109c 	.word	0x2000109c

08006a40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	4604      	mov	r4, r0
 8006a44:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a46:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <prvAddCurrentTaskToDelayedList+0x64>)
 8006a48:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a4a:	4b17      	ldr	r3, [pc, #92]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x68>)
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	3004      	adds	r0, #4
 8006a50:	f7ff f8ec 	bl	8005c2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a54:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a58:	d00d      	beq.n	8006a76 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a5a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a5c:	4b12      	ldr	r3, [pc, #72]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x68>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006a62:	42a6      	cmp	r6, r4
 8006a64:	d910      	bls.n	8006a88 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a66:	4b11      	ldr	r3, [pc, #68]	; (8006aac <prvAddCurrentTaskToDelayedList+0x6c>)
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x68>)
 8006a6c:	6819      	ldr	r1, [r3, #0]
 8006a6e:	3104      	adds	r1, #4
 8006a70:	f7ff f8c3 	bl	8005bfa <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	d0ef      	beq.n	8006a5a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x68>)
 8006a7c:	6819      	ldr	r1, [r3, #0]
 8006a7e:	3104      	adds	r1, #4
 8006a80:	480b      	ldr	r0, [pc, #44]	; (8006ab0 <prvAddCurrentTaskToDelayedList+0x70>)
 8006a82:	f7ff f8af 	bl	8005be4 <vListInsertEnd>
 8006a86:	e7f5      	b.n	8006a74 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a88:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <prvAddCurrentTaskToDelayedList+0x74>)
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <prvAddCurrentTaskToDelayedList+0x68>)
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	3104      	adds	r1, #4
 8006a92:	f7ff f8b2 	bl	8005bfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0x78>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006a9c:	bf84      	itt	hi
 8006a9e:	4b06      	ldrhi	r3, [pc, #24]	; (8006ab8 <prvAddCurrentTaskToDelayedList+0x78>)
 8006aa0:	601c      	strhi	r4, [r3, #0]
}
 8006aa2:	e7e7      	b.n	8006a74 <prvAddCurrentTaskToDelayedList+0x34>
 8006aa4:	20001584 	.word	0x20001584
 8006aa8:	20001090 	.word	0x20001090
 8006aac:	20001098 	.word	0x20001098
 8006ab0:	2000155c 	.word	0x2000155c
 8006ab4:	20001094 	.word	0x20001094
 8006ab8:	2000153c 	.word	0x2000153c

08006abc <xTaskCreateStatic>:
	{
 8006abc:	b530      	push	{r4, r5, lr}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006ac2:	b17c      	cbz	r4, 8006ae4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ac4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac6:	b1b5      	cbz	r5, 8006af6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ac8:	2560      	movs	r5, #96	; 0x60
 8006aca:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006acc:	9d04      	ldr	r5, [sp, #16]
 8006ace:	2d60      	cmp	r5, #96	; 0x60
 8006ad0:	d01a      	beq.n	8006b08 <xTaskCreateStatic+0x4c>
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	e7fe      	b.n	8006ae2 <xTaskCreateStatic+0x26>
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006af4:	e7fe      	b.n	8006af4 <xTaskCreateStatic+0x38>
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006b06:	e7fe      	b.n	8006b06 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b0a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b0c:	2402      	movs	r4, #2
 8006b0e:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b12:	2400      	movs	r4, #0
 8006b14:	9403      	str	r4, [sp, #12]
 8006b16:	9502      	str	r5, [sp, #8]
 8006b18:	ac05      	add	r4, sp, #20
 8006b1a:	9401      	str	r4, [sp, #4]
 8006b1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b1e:	9400      	str	r4, [sp, #0]
 8006b20:	f7ff fe72 	bl	8006808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b26:	f7ff febb 	bl	80068a0 <prvAddNewTaskToReadyList>
	}
 8006b2a:	9805      	ldr	r0, [sp, #20]
 8006b2c:	b007      	add	sp, #28
 8006b2e:	bd30      	pop	{r4, r5, pc}

08006b30 <xTaskCreate>:
	{
 8006b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b34:	b085      	sub	sp, #20
 8006b36:	4607      	mov	r7, r0
 8006b38:	4688      	mov	r8, r1
 8006b3a:	4614      	mov	r4, r2
 8006b3c:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3e:	0090      	lsls	r0, r2, #2
 8006b40:	f001 f842 	bl	8007bc8 <pvPortMalloc>
			if( pxStack != NULL )
 8006b44:	b308      	cbz	r0, 8006b8a <xTaskCreate+0x5a>
 8006b46:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006b48:	2060      	movs	r0, #96	; 0x60
 8006b4a:	f001 f83d 	bl	8007bc8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006b4e:	4605      	mov	r5, r0
 8006b50:	b1a8      	cbz	r0, 8006b7e <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006b52:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b56:	2300      	movs	r3, #0
 8006b58:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b5c:	9303      	str	r3, [sp, #12]
 8006b5e:	9002      	str	r0, [sp, #8]
 8006b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	4633      	mov	r3, r6
 8006b6a:	4622      	mov	r2, r4
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f7ff fe4a 	bl	8006808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b74:	4628      	mov	r0, r5
 8006b76:	f7ff fe93 	bl	80068a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b7a:	2001      	movs	r0, #1
 8006b7c:	e007      	b.n	8006b8e <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006b7e:	4648      	mov	r0, r9
 8006b80:	f001 f8b8 	bl	8007cf4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	e001      	b.n	8006b8e <xTaskCreate+0x5e>
 8006b8a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006b8e:	b005      	add	sp, #20
 8006b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006b94 <vTaskStartScheduler>:
{
 8006b94:	b510      	push	{r4, lr}
 8006b96:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b98:	2400      	movs	r4, #0
 8006b9a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b9c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b9e:	aa07      	add	r2, sp, #28
 8006ba0:	a906      	add	r1, sp, #24
 8006ba2:	a805      	add	r0, sp, #20
 8006ba4:	f7fe fee4 	bl	8005970 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ba8:	9b05      	ldr	r3, [sp, #20]
 8006baa:	9302      	str	r3, [sp, #8]
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	9400      	str	r4, [sp, #0]
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	9a07      	ldr	r2, [sp, #28]
 8006bb6:	4915      	ldr	r1, [pc, #84]	; (8006c0c <vTaskStartScheduler+0x78>)
 8006bb8:	4815      	ldr	r0, [pc, #84]	; (8006c10 <vTaskStartScheduler+0x7c>)
 8006bba:	f7ff ff7f 	bl	8006abc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006bbe:	b310      	cbz	r0, 8006c06 <vTaskStartScheduler+0x72>
			xReturn = xTimerCreateTimerTask();
 8006bc0:	f000 fca6 	bl	8007510 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006bc4:	2801      	cmp	r0, #1
 8006bc6:	d00b      	beq.n	8006be0 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bcc:	d11b      	bne.n	8006c06 <vTaskStartScheduler+0x72>
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	e7fe      	b.n	8006bde <vTaskStartScheduler+0x4a>
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bf0:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <vTaskStartScheduler+0x80>)
 8006bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bf8:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <vTaskStartScheduler+0x84>)
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <vTaskStartScheduler+0x88>)
 8006c00:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006c02:	f000 ff21 	bl	8007a48 <xPortStartScheduler>
}
 8006c06:	b008      	add	sp, #32
 8006c08:	bd10      	pop	{r4, pc}
 8006c0a:	bf00      	nop
 8006c0c:	08009d50 	.word	0x08009d50
 8006c10:	080069d9 	.word	0x080069d9
 8006c14:	2000153c 	.word	0x2000153c
 8006c18:	20001558 	.word	0x20001558
 8006c1c:	20001584 	.word	0x20001584

08006c20 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006c20:	4a02      	ldr	r2, [pc, #8]	; (8006c2c <vTaskSuspendAll+0xc>)
 8006c22:	6813      	ldr	r3, [r2, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	6013      	str	r3, [r2, #0]
}
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20001508 	.word	0x20001508

08006c30 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006c30:	4b01      	ldr	r3, [pc, #4]	; (8006c38 <xTaskGetTickCount+0x8>)
 8006c32:	6818      	ldr	r0, [r3, #0]
}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20001584 	.word	0x20001584

08006c3c <xTaskIncrementTick>:
{
 8006c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c40:	4b40      	ldr	r3, [pc, #256]	; (8006d44 <xTaskIncrementTick+0x108>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d170      	bne.n	8006d2a <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c48:	4b3f      	ldr	r3, [pc, #252]	; (8006d48 <xTaskIncrementTick+0x10c>)
 8006c4a:	681e      	ldr	r6, [r3, #0]
 8006c4c:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006c4e:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c50:	b9c6      	cbnz	r6, 8006c84 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8006c52:	4b3e      	ldr	r3, [pc, #248]	; (8006d4c <xTaskIncrementTick+0x110>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	b143      	cbz	r3, 8006c6c <xTaskIncrementTick+0x30>
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	e7fe      	b.n	8006c6a <xTaskIncrementTick+0x2e>
 8006c6c:	4a37      	ldr	r2, [pc, #220]	; (8006d4c <xTaskIncrementTick+0x110>)
 8006c6e:	6811      	ldr	r1, [r2, #0]
 8006c70:	4b37      	ldr	r3, [pc, #220]	; (8006d50 <xTaskIncrementTick+0x114>)
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	6010      	str	r0, [r2, #0]
 8006c76:	6019      	str	r1, [r3, #0]
 8006c78:	4a36      	ldr	r2, [pc, #216]	; (8006d54 <xTaskIncrementTick+0x118>)
 8006c7a:	6813      	ldr	r3, [r2, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	f7ff fdac 	bl	80067dc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c84:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <xTaskIncrementTick+0x11c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	42b3      	cmp	r3, r6
 8006c8a:	d841      	bhi.n	8006d10 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c8c:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <xTaskIncrementTick+0x110>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	b13b      	cbz	r3, 8006ca4 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8006c94:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c96:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006d4c <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8006c9a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006d5c <xTaskIncrementTick+0x120>
 8006c9e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8006d60 <xTaskIncrementTick+0x124>
 8006ca2:	e022      	b.n	8006cea <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8006ca4:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca6:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <xTaskIncrementTick+0x11c>)
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	601a      	str	r2, [r3, #0]
					break;
 8006cae:	e030      	b.n	8006d12 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8006cb0:	4a29      	ldr	r2, [pc, #164]	; (8006d58 <xTaskIncrementTick+0x11c>)
 8006cb2:	6013      	str	r3, [r2, #0]
						break;
 8006cb4:	e02d      	b.n	8006d12 <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 8006cb6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006cb8:	f8d9 3000 	ldr.w	r3, [r9]
 8006cbc:	4298      	cmp	r0, r3
 8006cbe:	bf88      	it	hi
 8006cc0:	f8c9 0000 	strhi.w	r0, [r9]
 8006cc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cc8:	4639      	mov	r1, r7
 8006cca:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006cce:	f7fe ff89 	bl	8005be4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cd2:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <xTaskIncrementTick+0x128>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	bf28      	it	cs
 8006cde:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0dd      	beq.n	8006ca6 <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cea:	f8d8 3000 	ldr.w	r3, [r8]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cf2:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006cf4:	429e      	cmp	r6, r3
 8006cf6:	d3db      	bcc.n	8006cb0 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cf8:	1d27      	adds	r7, r4, #4
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	f7fe ff96 	bl	8005c2c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0d7      	beq.n	8006cb6 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d06:	f104 0018 	add.w	r0, r4, #24
 8006d0a:	f7fe ff8f 	bl	8005c2c <uxListRemove>
 8006d0e:	e7d2      	b.n	8006cb6 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8006d10:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d12:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <xTaskIncrementTick+0x128>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4a10      	ldr	r2, [pc, #64]	; (8006d60 <xTaskIncrementTick+0x124>)
 8006d20:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	bf28      	it	cs
 8006d26:	2501      	movcs	r5, #1
 8006d28:	e004      	b.n	8006d34 <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 8006d2a:	4a0f      	ldr	r2, [pc, #60]	; (8006d68 <xTaskIncrementTick+0x12c>)
 8006d2c:	6813      	ldr	r3, [r2, #0]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006d32:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <xTaskIncrementTick+0x130>)
 8006d36:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006d38:	2b00      	cmp	r3, #0
}
 8006d3a:	bf0c      	ite	eq
 8006d3c:	4628      	moveq	r0, r5
 8006d3e:	2001      	movne	r0, #1
 8006d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d44:	20001508 	.word	0x20001508
 8006d48:	20001584 	.word	0x20001584
 8006d4c:	20001094 	.word	0x20001094
 8006d50:	20001098 	.word	0x20001098
 8006d54:	20001540 	.word	0x20001540
 8006d58:	2000153c 	.word	0x2000153c
 8006d5c:	20001510 	.word	0x20001510
 8006d60:	2000109c 	.word	0x2000109c
 8006d64:	20001090 	.word	0x20001090
 8006d68:	20001504 	.word	0x20001504
 8006d6c:	20001588 	.word	0x20001588

08006d70 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006d70:	4b38      	ldr	r3, [pc, #224]	; (8006e54 <xTaskResumeAll+0xe4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	b943      	cbnz	r3, 8006d88 <xTaskResumeAll+0x18>
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	e7fe      	b.n	8006d86 <xTaskResumeAll+0x16>
{
 8006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006d8c:	f000 fdd2 	bl	8007934 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006d90:	4b30      	ldr	r3, [pc, #192]	; (8006e54 <xTaskResumeAll+0xe4>)
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	3a01      	subs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d149      	bne.n	8006e32 <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d9e:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <xTaskResumeAll+0xe8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d04b      	beq.n	8006e3e <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006da6:	4b2d      	ldr	r3, [pc, #180]	; (8006e5c <xTaskResumeAll+0xec>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d04b      	beq.n	8006e46 <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006dae:	4e2b      	ldr	r6, [pc, #172]	; (8006e5c <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8006db0:	4f2b      	ldr	r7, [pc, #172]	; (8006e60 <xTaskResumeAll+0xf0>)
 8006db2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006e64 <xTaskResumeAll+0xf4>
 8006db6:	e002      	b.n	8006dbe <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006db8:	6833      	ldr	r3, [r6, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d041      	beq.n	8006e42 <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006dbe:	68f3      	ldr	r3, [r6, #12]
 8006dc0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dc2:	f104 0018 	add.w	r0, r4, #24
 8006dc6:	f7fe ff31 	bl	8005c2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dca:	1d25      	adds	r5, r4, #4
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f7fe ff2d 	bl	8005c2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dd2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	4298      	cmp	r0, r3
 8006dd8:	bf88      	it	hi
 8006dda:	6038      	strhi	r0, [r7, #0]
 8006ddc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006de0:	4629      	mov	r1, r5
 8006de2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006de6:	f7fe fefd 	bl	8005be4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dea:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <xTaskResumeAll+0xf8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d3e0      	bcc.n	8006db8 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006df6:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <xTaskResumeAll+0xfc>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e7dc      	b.n	8006db8 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006dfe:	3c01      	subs	r4, #1
 8006e00:	d005      	beq.n	8006e0e <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8006e02:	f7ff ff1b 	bl	8006c3c <xTaskIncrementTick>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d0f9      	beq.n	8006dfe <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8006e0a:	6035      	str	r5, [r6, #0]
 8006e0c:	e7f7      	b.n	8006dfe <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 8006e0e:	4b18      	ldr	r3, [pc, #96]	; (8006e70 <xTaskResumeAll+0x100>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006e14:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <xTaskResumeAll+0xfc>)
 8006e16:	681c      	ldr	r4, [r3, #0]
 8006e18:	b164      	cbz	r4, 8006e34 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8006e1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006e2e:	2401      	movs	r4, #1
 8006e30:	e000      	b.n	8006e34 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8006e32:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e34:	f000 fda0 	bl	8007978 <vPortExitCritical>
}
 8006e38:	4620      	mov	r0, r4
 8006e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006e3e:	2400      	movs	r4, #0
 8006e40:	e7f8      	b.n	8006e34 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 8006e42:	f7ff fccb 	bl	80067dc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <xTaskResumeAll+0x100>)
 8006e48:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e4a:	2c00      	cmp	r4, #0
 8006e4c:	d0e2      	beq.n	8006e14 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006e4e:	4e07      	ldr	r6, [pc, #28]	; (8006e6c <xTaskResumeAll+0xfc>)
 8006e50:	2501      	movs	r5, #1
 8006e52:	e7d6      	b.n	8006e02 <xTaskResumeAll+0x92>
 8006e54:	20001508 	.word	0x20001508
 8006e58:	200014fc 	.word	0x200014fc
 8006e5c:	20001544 	.word	0x20001544
 8006e60:	20001510 	.word	0x20001510
 8006e64:	2000109c 	.word	0x2000109c
 8006e68:	20001090 	.word	0x20001090
 8006e6c:	20001588 	.word	0x20001588
 8006e70:	20001504 	.word	0x20001504

08006e74 <vTaskDelayUntil>:
	{
 8006e74:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8006e76:	b158      	cbz	r0, 8006e90 <vTaskDelayUntil+0x1c>
 8006e78:	460c      	mov	r4, r1
 8006e7a:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8006e7c:	b989      	cbnz	r1, 8006ea2 <vTaskDelayUntil+0x2e>
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	e7fe      	b.n	8006e8e <vTaskDelayUntil+0x1a>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8006ea0:	e7fe      	b.n	8006ea0 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <vTaskDelayUntil+0x98>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	b143      	cbz	r3, 8006eba <vTaskDelayUntil+0x46>
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	e7fe      	b.n	8006eb8 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 8006eba:	f7ff feb1 	bl	8006c20 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8006ebe:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <vTaskDelayUntil+0x9c>)
 8006ec0:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 8006ec6:	4283      	cmp	r3, r0
 8006ec8:	d907      	bls.n	8006eda <vTaskDelayUntil+0x66>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	d801      	bhi.n	8006ed2 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 8006ece:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006ed0:	e00e      	b.n	8006ef0 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006ed2:	42a0      	cmp	r0, r4
 8006ed4:	d307      	bcc.n	8006ee6 <vTaskDelayUntil+0x72>
			*pxPreviousWakeTime = xTimeToWake;
 8006ed6:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006ed8:	e00a      	b.n	8006ef0 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	d803      	bhi.n	8006ee6 <vTaskDelayUntil+0x72>
 8006ede:	42a0      	cmp	r0, r4
 8006ee0:	d301      	bcc.n	8006ee6 <vTaskDelayUntil+0x72>
			*pxPreviousWakeTime = xTimeToWake;
 8006ee2:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006ee4:	e004      	b.n	8006ef0 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8006ee6:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006ee8:	2100      	movs	r1, #0
 8006eea:	1a20      	subs	r0, r4, r0
 8006eec:	f7ff fda8 	bl	8006a40 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8006ef0:	f7ff ff3e 	bl	8006d70 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006ef4:	b948      	cbnz	r0, 8006f0a <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 8006ef6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006efe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	f3bf 8f6f 	isb	sy
	}
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	20001508 	.word	0x20001508
 8006f10:	20001584 	.word	0x20001584

08006f14 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f14:	4b22      	ldr	r3, [pc, #136]	; (8006fa0 <vTaskSwitchContext+0x8c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	b11b      	cbz	r3, 8006f22 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <vTaskSwitchContext+0x90>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006f22:	4b20      	ldr	r3, [pc, #128]	; (8006fa4 <vTaskSwitchContext+0x90>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f28:	4b1f      	ldr	r3, [pc, #124]	; (8006fa8 <vTaskSwitchContext+0x94>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006f30:	0092      	lsls	r2, r2, #2
 8006f32:	491e      	ldr	r1, [pc, #120]	; (8006fac <vTaskSwitchContext+0x98>)
 8006f34:	588a      	ldr	r2, [r1, r2]
 8006f36:	b98a      	cbnz	r2, 8006f5c <vTaskSwitchContext+0x48>
 8006f38:	b13b      	cbz	r3, 8006f4a <vTaskSwitchContext+0x36>
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006f40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006f44:	b952      	cbnz	r2, 8006f5c <vTaskSwitchContext+0x48>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f7      	bne.n	8006f3a <vTaskSwitchContext+0x26>
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	e7fe      	b.n	8006f5a <vTaskSwitchContext+0x46>
 8006f5c:	4a13      	ldr	r2, [pc, #76]	; (8006fac <vTaskSwitchContext+0x98>)
 8006f5e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006f62:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006f66:	6848      	ldr	r0, [r1, #4]
 8006f68:	6840      	ldr	r0, [r0, #4]
 8006f6a:	6048      	str	r0, [r1, #4]
 8006f6c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006f70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006f74:	3208      	adds	r2, #8
 8006f76:	4290      	cmp	r0, r2
 8006f78:	d00b      	beq.n	8006f92 <vTaskSwitchContext+0x7e>
 8006f7a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006f7e:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <vTaskSwitchContext+0x98>)
 8006f80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006f84:	6852      	ldr	r2, [r2, #4]
 8006f86:	68d1      	ldr	r1, [r2, #12]
 8006f88:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <vTaskSwitchContext+0x9c>)
 8006f8a:	6011      	str	r1, [r2, #0]
 8006f8c:	4a06      	ldr	r2, [pc, #24]	; (8006fa8 <vTaskSwitchContext+0x94>)
 8006f8e:	6013      	str	r3, [r2, #0]
}
 8006f90:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f92:	6840      	ldr	r0, [r0, #4]
 8006f94:	4a05      	ldr	r2, [pc, #20]	; (8006fac <vTaskSwitchContext+0x98>)
 8006f96:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006f9a:	6050      	str	r0, [r2, #4]
 8006f9c:	e7ed      	b.n	8006f7a <vTaskSwitchContext+0x66>
 8006f9e:	bf00      	nop
 8006fa0:	20001508 	.word	0x20001508
 8006fa4:	20001588 	.word	0x20001588
 8006fa8:	20001510 	.word	0x20001510
 8006fac:	2000109c 	.word	0x2000109c
 8006fb0:	20001090 	.word	0x20001090

08006fb4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006fb4:	b158      	cbz	r0, 8006fce <vTaskPlaceOnEventList+0x1a>
{
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fba:	4a09      	ldr	r2, [pc, #36]	; (8006fe0 <vTaskPlaceOnEventList+0x2c>)
 8006fbc:	6811      	ldr	r1, [r2, #0]
 8006fbe:	3118      	adds	r1, #24
 8006fc0:	f7fe fe1b 	bl	8005bfa <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f7ff fd3a 	bl	8006a40 <prvAddCurrentTaskToDelayedList>
}
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006fde:	e7fe      	b.n	8006fde <vTaskPlaceOnEventList+0x2a>
 8006fe0:	20001090 	.word	0x20001090

08006fe4 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8006fe4:	b170      	cbz	r0, 8007004 <vTaskPlaceOnUnorderedEventList+0x20>
{
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4614      	mov	r4, r2
 8006fea:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8006fec:	4b11      	ldr	r3, [pc, #68]	; (8007034 <vTaskPlaceOnUnorderedEventList+0x50>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	b98b      	cbnz	r3, 8007016 <vTaskPlaceOnUnorderedEventList+0x32>
 8006ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff6:	f383 8811 	msr	BASEPRI, r3
 8006ffa:	f3bf 8f6f 	isb	sy
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	e7fe      	b.n	8007002 <vTaskPlaceOnUnorderedEventList+0x1e>
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007014:	e7fe      	b.n	8007014 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007016:	4b08      	ldr	r3, [pc, #32]	; (8007038 <vTaskPlaceOnUnorderedEventList+0x54>)
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800701e:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007020:	6819      	ldr	r1, [r3, #0]
 8007022:	3118      	adds	r1, #24
 8007024:	4610      	mov	r0, r2
 8007026:	f7fe fddd 	bl	8005be4 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800702a:	2101      	movs	r1, #1
 800702c:	4620      	mov	r0, r4
 800702e:	f7ff fd07 	bl	8006a40 <prvAddCurrentTaskToDelayedList>
}
 8007032:	bd10      	pop	{r4, pc}
 8007034:	20001508 	.word	0x20001508
 8007038:	20001090 	.word	0x20001090

0800703c <vTaskPlaceOnEventListRestricted>:
	{
 800703c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800703e:	b178      	cbz	r0, 8007060 <vTaskPlaceOnEventListRestricted+0x24>
 8007040:	460d      	mov	r5, r1
 8007042:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007044:	4a0b      	ldr	r2, [pc, #44]	; (8007074 <vTaskPlaceOnEventListRestricted+0x38>)
 8007046:	6811      	ldr	r1, [r2, #0]
 8007048:	3118      	adds	r1, #24
 800704a:	f7fe fdcb 	bl	8005be4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800704e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007050:	4621      	mov	r1, r4
 8007052:	bf0c      	ite	eq
 8007054:	4628      	moveq	r0, r5
 8007056:	f04f 30ff 	movne.w	r0, #4294967295
 800705a:	f7ff fcf1 	bl	8006a40 <prvAddCurrentTaskToDelayedList>
	}
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8007070:	e7fe      	b.n	8007070 <vTaskPlaceOnEventListRestricted+0x34>
 8007072:	bf00      	nop
 8007074:	20001090 	.word	0x20001090

08007078 <xTaskRemoveFromEventList>:
{
 8007078:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800707a:	68c3      	ldr	r3, [r0, #12]
 800707c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800707e:	b32c      	cbz	r4, 80070cc <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007080:	f104 0518 	add.w	r5, r4, #24
 8007084:	4628      	mov	r0, r5
 8007086:	f7fe fdd1 	bl	8005c2c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800708a:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <xTaskRemoveFromEventList+0x70>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	bb33      	cbnz	r3, 80070de <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007090:	1d25      	adds	r5, r4, #4
 8007092:	4628      	mov	r0, r5
 8007094:	f7fe fdca 	bl	8005c2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007098:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800709a:	4b14      	ldr	r3, [pc, #80]	; (80070ec <xTaskRemoveFromEventList+0x74>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4298      	cmp	r0, r3
 80070a0:	bf84      	itt	hi
 80070a2:	4b12      	ldrhi	r3, [pc, #72]	; (80070ec <xTaskRemoveFromEventList+0x74>)
 80070a4:	6018      	strhi	r0, [r3, #0]
 80070a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070aa:	4629      	mov	r1, r5
 80070ac:	4b10      	ldr	r3, [pc, #64]	; (80070f0 <xTaskRemoveFromEventList+0x78>)
 80070ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070b2:	f7fe fd97 	bl	8005be4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070b6:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <xTaskRemoveFromEventList+0x7c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80070c0:	bf83      	ittte	hi
 80070c2:	2001      	movhi	r0, #1
 80070c4:	4b0c      	ldrhi	r3, [pc, #48]	; (80070f8 <xTaskRemoveFromEventList+0x80>)
 80070c6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80070c8:	2000      	movls	r0, #0
}
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80070dc:	e7fe      	b.n	80070dc <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070de:	4629      	mov	r1, r5
 80070e0:	4806      	ldr	r0, [pc, #24]	; (80070fc <xTaskRemoveFromEventList+0x84>)
 80070e2:	f7fe fd7f 	bl	8005be4 <vListInsertEnd>
 80070e6:	e7e6      	b.n	80070b6 <xTaskRemoveFromEventList+0x3e>
 80070e8:	20001508 	.word	0x20001508
 80070ec:	20001510 	.word	0x20001510
 80070f0:	2000109c 	.word	0x2000109c
 80070f4:	20001090 	.word	0x20001090
 80070f8:	20001588 	.word	0x20001588
 80070fc:	20001544 	.word	0x20001544

08007100 <vTaskRemoveFromUnorderedEventList>:
{
 8007100:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007102:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <vTaskRemoveFromUnorderedEventList+0x74>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	b943      	cbnz	r3, 800711a <vTaskRemoveFromUnorderedEventList+0x1a>
 8007108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	e7fe      	b.n	8007118 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800711a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800711e:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007120:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8007122:	b1f4      	cbz	r4, 8007162 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8007124:	f7fe fd82 	bl	8005c2c <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007128:	1d25      	adds	r5, r4, #4
 800712a:	4628      	mov	r0, r5
 800712c:	f7fe fd7e 	bl	8005c2c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007130:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007132:	4b11      	ldr	r3, [pc, #68]	; (8007178 <vTaskRemoveFromUnorderedEventList+0x78>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4298      	cmp	r0, r3
 8007138:	bf84      	itt	hi
 800713a:	4b0f      	ldrhi	r3, [pc, #60]	; (8007178 <vTaskRemoveFromUnorderedEventList+0x78>)
 800713c:	6018      	strhi	r0, [r3, #0]
 800713e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007142:	4629      	mov	r1, r5
 8007144:	4b0d      	ldr	r3, [pc, #52]	; (800717c <vTaskRemoveFromUnorderedEventList+0x7c>)
 8007146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800714a:	f7fe fd4b 	bl	8005be4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800714e:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <vTaskRemoveFromUnorderedEventList+0x80>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	429a      	cmp	r2, r3
 8007158:	d902      	bls.n	8007160 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 800715a:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <vTaskRemoveFromUnorderedEventList+0x84>)
 800715c:	2201      	movs	r2, #1
 800715e:	601a      	str	r2, [r3, #0]
}
 8007160:	bd38      	pop	{r3, r4, r5, pc}
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007172:	e7fe      	b.n	8007172 <vTaskRemoveFromUnorderedEventList+0x72>
 8007174:	20001508 	.word	0x20001508
 8007178:	20001510 	.word	0x20001510
 800717c:	2000109c 	.word	0x2000109c
 8007180:	20001090 	.word	0x20001090
 8007184:	20001588 	.word	0x20001588

08007188 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007188:	4b03      	ldr	r3, [pc, #12]	; (8007198 <vTaskInternalSetTimeOutState+0x10>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800718e:	4b03      	ldr	r3, [pc, #12]	; (800719c <vTaskInternalSetTimeOutState+0x14>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6043      	str	r3, [r0, #4]
}
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20001540 	.word	0x20001540
 800719c:	20001584 	.word	0x20001584

080071a0 <xTaskCheckForTimeOut>:
{
 80071a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 80071a2:	b1d0      	cbz	r0, 80071da <xTaskCheckForTimeOut+0x3a>
 80071a4:	460c      	mov	r4, r1
 80071a6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80071a8:	b301      	cbz	r1, 80071ec <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 80071aa:	f000 fbc3 	bl	8007934 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80071ae:	4b1b      	ldr	r3, [pc, #108]	; (800721c <xTaskCheckForTimeOut+0x7c>)
 80071b0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d029      	beq.n	800720e <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071ba:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071bc:	4818      	ldr	r0, [pc, #96]	; (8007220 <xTaskCheckForTimeOut+0x80>)
 80071be:	6800      	ldr	r0, [r0, #0]
 80071c0:	f8d5 c000 	ldr.w	ip, [r5]
 80071c4:	4584      	cmp	ip, r0
 80071c6:	d001      	beq.n	80071cc <xTaskCheckForTimeOut+0x2c>
 80071c8:	4291      	cmp	r1, r2
 80071ca:	d925      	bls.n	8007218 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071cc:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071ce:	4283      	cmp	r3, r0
 80071d0:	d815      	bhi.n	80071fe <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80071d6:	2401      	movs	r4, #1
 80071d8:	e01a      	b.n	8007210 <xTaskCheckForTimeOut+0x70>
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80071ea:	e7fe      	b.n	80071ea <xTaskCheckForTimeOut+0x4a>
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80071fc:	e7fe      	b.n	80071fc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	440b      	add	r3, r1
 8007202:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007204:	4628      	mov	r0, r5
 8007206:	f7ff ffbf 	bl	8007188 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800720a:	2400      	movs	r4, #0
 800720c:	e000      	b.n	8007210 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 800720e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007210:	f000 fbb2 	bl	8007978 <vPortExitCritical>
}
 8007214:	4620      	mov	r0, r4
 8007216:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8007218:	2401      	movs	r4, #1
 800721a:	e7f9      	b.n	8007210 <xTaskCheckForTimeOut+0x70>
 800721c:	20001584 	.word	0x20001584
 8007220:	20001540 	.word	0x20001540

08007224 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007224:	4b01      	ldr	r3, [pc, #4]	; (800722c <vTaskMissedYield+0x8>)
 8007226:	2201      	movs	r2, #1
 8007228:	601a      	str	r2, [r3, #0]
}
 800722a:	4770      	bx	lr
 800722c:	20001588 	.word	0x20001588

08007230 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007230:	4b01      	ldr	r3, [pc, #4]	; (8007238 <xTaskGetCurrentTaskHandle+0x8>)
 8007232:	6818      	ldr	r0, [r3, #0]
	}
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	20001090 	.word	0x20001090

0800723c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <xTaskGetSchedulerState+0x18>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	b133      	cbz	r3, 8007250 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007242:	4b05      	ldr	r3, [pc, #20]	; (8007258 <xTaskGetSchedulerState+0x1c>)
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	fab0 f080 	clz	r0, r0
 800724a:	0940      	lsrs	r0, r0, #5
 800724c:	0040      	lsls	r0, r0, #1
 800724e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007250:	2001      	movs	r0, #1
	}
 8007252:	4770      	bx	lr
 8007254:	20001558 	.word	0x20001558
 8007258:	20001508 	.word	0x20001508

0800725c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800725c:	2800      	cmp	r0, #0
 800725e:	d040      	beq.n	80072e2 <xTaskPriorityInherit+0x86>
	{
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007264:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007266:	4a20      	ldr	r2, [pc, #128]	; (80072e8 <xTaskPriorityInherit+0x8c>)
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800726c:	4293      	cmp	r3, r2
 800726e:	d22f      	bcs.n	80072d0 <xTaskPriorityInherit+0x74>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007270:	6982      	ldr	r2, [r0, #24]
 8007272:	2a00      	cmp	r2, #0
 8007274:	db05      	blt.n	8007282 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007276:	4a1c      	ldr	r2, [pc, #112]	; (80072e8 <xTaskPriorityInherit+0x8c>)
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800727c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007280:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007286:	4a19      	ldr	r2, [pc, #100]	; (80072ec <xTaskPriorityInherit+0x90>)
 8007288:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800728c:	6962      	ldr	r2, [r4, #20]
 800728e:	429a      	cmp	r2, r3
 8007290:	d005      	beq.n	800729e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007292:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <xTaskPriorityInherit+0x8c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800729a:	2001      	movs	r0, #1
 800729c:	e020      	b.n	80072e0 <xTaskPriorityInherit+0x84>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800729e:	1d25      	adds	r5, r4, #4
 80072a0:	4628      	mov	r0, r5
 80072a2:	f7fe fcc3 	bl	8005c2c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <xTaskPriorityInherit+0x8c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80072ac:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072ae:	4b10      	ldr	r3, [pc, #64]	; (80072f0 <xTaskPriorityInherit+0x94>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4298      	cmp	r0, r3
 80072b4:	d809      	bhi.n	80072ca <xTaskPriorityInherit+0x6e>
 80072b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80072ba:	4629      	mov	r1, r5
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <xTaskPriorityInherit+0x90>)
 80072be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072c2:	f7fe fc8f 	bl	8005be4 <vListInsertEnd>
				xReturn = pdTRUE;
 80072c6:	2001      	movs	r0, #1
 80072c8:	e00a      	b.n	80072e0 <xTaskPriorityInherit+0x84>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <xTaskPriorityInherit+0x94>)
 80072cc:	6018      	str	r0, [r3, #0]
 80072ce:	e7f2      	b.n	80072b6 <xTaskPriorityInherit+0x5a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <xTaskPriorityInherit+0x8c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	4298      	cmp	r0, r3
 80072da:	bf2c      	ite	cs
 80072dc:	2000      	movcs	r0, #0
 80072de:	2001      	movcc	r0, #1
	}
 80072e0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80072e2:	2000      	movs	r0, #0
	}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20001090 	.word	0x20001090
 80072ec:	2000109c 	.word	0x2000109c
 80072f0:	20001510 	.word	0x20001510

080072f4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d03b      	beq.n	8007370 <xTaskPriorityDisinherit+0x7c>
	{
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80072fc:	4b1e      	ldr	r3, [pc, #120]	; (8007378 <xTaskPriorityDisinherit+0x84>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4283      	cmp	r3, r0
 8007302:	d008      	beq.n	8007316 <xTaskPriorityDisinherit+0x22>
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	e7fe      	b.n	8007314 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007316:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007318:	b943      	cbnz	r3, 800732c <xTaskPriorityDisinherit+0x38>
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	e7fe      	b.n	800732a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800732c:	3b01      	subs	r3, #1
 800732e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007330:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007332:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007334:	4291      	cmp	r1, r2
 8007336:	d01d      	beq.n	8007374 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007338:	b10b      	cbz	r3, 800733e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800733a:	2000      	movs	r0, #0
	}
 800733c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800733e:	1d05      	adds	r5, r0, #4
 8007340:	4628      	mov	r0, r5
 8007342:	f7fe fc73 	bl	8005c2c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007346:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007348:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734a:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800734e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <xTaskPriorityDisinherit+0x88>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4298      	cmp	r0, r3
 8007356:	bf84      	itt	hi
 8007358:	4b08      	ldrhi	r3, [pc, #32]	; (800737c <xTaskPriorityDisinherit+0x88>)
 800735a:	6018      	strhi	r0, [r3, #0]
 800735c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007360:	4629      	mov	r1, r5
 8007362:	4b07      	ldr	r3, [pc, #28]	; (8007380 <xTaskPriorityDisinherit+0x8c>)
 8007364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007368:	f7fe fc3c 	bl	8005be4 <vListInsertEnd>
					xReturn = pdTRUE;
 800736c:	2001      	movs	r0, #1
 800736e:	e7e5      	b.n	800733c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8007370:	2000      	movs	r0, #0
	}
 8007372:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8007374:	2000      	movs	r0, #0
 8007376:	e7e1      	b.n	800733c <xTaskPriorityDisinherit+0x48>
 8007378:	20001090 	.word	0x20001090
 800737c:	20001510 	.word	0x20001510
 8007380:	2000109c 	.word	0x2000109c

08007384 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8007384:	2800      	cmp	r0, #0
 8007386:	d046      	beq.n	8007416 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800738c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800738e:	b943      	cbnz	r3, 80073a2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8007390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	e7fe      	b.n	80073a0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80073a2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80073a4:	4291      	cmp	r1, r2
 80073a6:	bf38      	it	cc
 80073a8:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80073aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80073ac:	428a      	cmp	r2, r1
 80073ae:	d001      	beq.n	80073b4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d000      	beq.n	80073b6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80073b6:	4b18      	ldr	r3, [pc, #96]	; (8007418 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4283      	cmp	r3, r0
 80073bc:	d022      	beq.n	8007404 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80073be:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073c0:	6983      	ldr	r3, [r0, #24]
 80073c2:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c4:	bfa4      	itt	ge
 80073c6:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 80073ca:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80073cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80073d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80073d6:	6942      	ldr	r2, [r0, #20]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d1eb      	bne.n	80073b4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073dc:	1d05      	adds	r5, r0, #4
 80073de:	4628      	mov	r0, r5
 80073e0:	f7fe fc24 	bl	8005c2c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80073e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80073e6:	4b0e      	ldr	r3, [pc, #56]	; (8007420 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4298      	cmp	r0, r3
 80073ec:	bf84      	itt	hi
 80073ee:	4b0c      	ldrhi	r3, [pc, #48]	; (8007420 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80073f0:	6018      	strhi	r0, [r3, #0]
 80073f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80073f6:	4629      	mov	r1, r5
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80073fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073fe:	f7fe fbf1 	bl	8005be4 <vListInsertEnd>
	}
 8007402:	e7d7      	b.n	80073b4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8007414:	e7fe      	b.n	8007414 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8007416:	4770      	bx	lr
 8007418:	20001090 	.word	0x20001090
 800741c:	2000109c 	.word	0x2000109c
 8007420:	20001510 	.word	0x20001510

08007424 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007424:	4b04      	ldr	r3, [pc, #16]	; (8007438 <uxTaskResetEventItemValue+0x14>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742a:	6819      	ldr	r1, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007430:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007434:	6193      	str	r3, [r2, #24]
}
 8007436:	4770      	bx	lr
 8007438:	20001090 	.word	0x20001090

0800743c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <pvTaskIncrementMutexHeldCount+0x18>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	b123      	cbz	r3, 800744c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007442:	4b04      	ldr	r3, [pc, #16]	; (8007454 <pvTaskIncrementMutexHeldCount+0x18>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007448:	3301      	adds	r3, #1
 800744a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800744c:	4b01      	ldr	r3, [pc, #4]	; (8007454 <pvTaskIncrementMutexHeldCount+0x18>)
 800744e:	6818      	ldr	r0, [r3, #0]
	}
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20001090 	.word	0x20001090

08007458 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007458:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800745a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800745c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800745e:	4291      	cmp	r1, r2
 8007460:	d80c      	bhi.n	800747c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	6983      	ldr	r3, [r0, #24]
 8007466:	429a      	cmp	r2, r3
 8007468:	d301      	bcc.n	800746e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800746a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800746c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800746e:	1d01      	adds	r1, r0, #4
 8007470:	4b09      	ldr	r3, [pc, #36]	; (8007498 <prvInsertTimerInActiveList+0x40>)
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	f7fe fbc1 	bl	8005bfa <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007478:	2000      	movs	r0, #0
 800747a:	e7f7      	b.n	800746c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800747c:	429a      	cmp	r2, r3
 800747e:	d201      	bcs.n	8007484 <prvInsertTimerInActiveList+0x2c>
 8007480:	4299      	cmp	r1, r3
 8007482:	d206      	bcs.n	8007492 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007484:	1d01      	adds	r1, r0, #4
 8007486:	4b05      	ldr	r3, [pc, #20]	; (800749c <prvInsertTimerInActiveList+0x44>)
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	f7fe fbb6 	bl	8005bfa <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800748e:	2000      	movs	r0, #0
 8007490:	e7ec      	b.n	800746c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8007492:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007494:	e7ea      	b.n	800746c <prvInsertTimerInActiveList+0x14>
 8007496:	bf00      	nop
 8007498:	20001590 	.word	0x20001590
 800749c:	2000158c 	.word	0x2000158c

080074a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074a0:	b530      	push	{r4, r5, lr}
 80074a2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074a4:	f000 fa46 	bl	8007934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <prvCheckForValidListAndQueue+0x50>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	b11b      	cbz	r3, 80074b6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074ae:	f000 fa63 	bl	8007978 <vPortExitCritical>
}
 80074b2:	b003      	add	sp, #12
 80074b4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80074b6:	4d0f      	ldr	r5, [pc, #60]	; (80074f4 <prvCheckForValidListAndQueue+0x54>)
 80074b8:	4628      	mov	r0, r5
 80074ba:	f7fe fb85 	bl	8005bc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074be:	4c0e      	ldr	r4, [pc, #56]	; (80074f8 <prvCheckForValidListAndQueue+0x58>)
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7fe fb81 	bl	8005bc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074c6:	4b0d      	ldr	r3, [pc, #52]	; (80074fc <prvCheckForValidListAndQueue+0x5c>)
 80074c8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074ca:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <prvCheckForValidListAndQueue+0x60>)
 80074cc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074ce:	2300      	movs	r3, #0
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <prvCheckForValidListAndQueue+0x64>)
 80074d4:	4a0c      	ldr	r2, [pc, #48]	; (8007508 <prvCheckForValidListAndQueue+0x68>)
 80074d6:	2110      	movs	r1, #16
 80074d8:	200a      	movs	r0, #10
 80074da:	f7fe fc8e 	bl	8005dfa <xQueueGenericCreateStatic>
 80074de:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <prvCheckForValidListAndQueue+0x50>)
 80074e0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d0e3      	beq.n	80074ae <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074e6:	4909      	ldr	r1, [pc, #36]	; (800750c <prvCheckForValidListAndQueue+0x6c>)
 80074e8:	f7ff f910 	bl	800670c <vQueueAddToRegistry>
 80074ec:	e7df      	b.n	80074ae <prvCheckForValidListAndQueue+0xe>
 80074ee:	bf00      	nop
 80074f0:	200016b0 	.word	0x200016b0
 80074f4:	20001634 	.word	0x20001634
 80074f8:	20001648 	.word	0x20001648
 80074fc:	2000158c 	.word	0x2000158c
 8007500:	20001590 	.word	0x20001590
 8007504:	20001660 	.word	0x20001660
 8007508:	20001594 	.word	0x20001594
 800750c:	08009d58 	.word	0x08009d58

08007510 <xTimerCreateTimerTask>:
{
 8007510:	b510      	push	{r4, lr}
 8007512:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007514:	f7ff ffc4 	bl	80074a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007518:	4b12      	ldr	r3, [pc, #72]	; (8007564 <xTimerCreateTimerTask+0x54>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	b1cb      	cbz	r3, 8007552 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800751e:	2400      	movs	r4, #0
 8007520:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007522:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007524:	aa07      	add	r2, sp, #28
 8007526:	a906      	add	r1, sp, #24
 8007528:	a805      	add	r0, sp, #20
 800752a:	f7fe fa2d 	bl	8005988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800752e:	9b05      	ldr	r3, [sp, #20]
 8007530:	9302      	str	r3, [sp, #8]
 8007532:	9b06      	ldr	r3, [sp, #24]
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	2302      	movs	r3, #2
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	4623      	mov	r3, r4
 800753c:	9a07      	ldr	r2, [sp, #28]
 800753e:	490a      	ldr	r1, [pc, #40]	; (8007568 <xTimerCreateTimerTask+0x58>)
 8007540:	480a      	ldr	r0, [pc, #40]	; (800756c <xTimerCreateTimerTask+0x5c>)
 8007542:	f7ff fabb 	bl	8006abc <xTaskCreateStatic>
 8007546:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <xTimerCreateTimerTask+0x60>)
 8007548:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800754a:	b110      	cbz	r0, 8007552 <xTimerCreateTimerTask+0x42>
}
 800754c:	2001      	movs	r0, #1
 800754e:	b008      	add	sp, #32
 8007550:	bd10      	pop	{r4, pc}
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007562:	e7fe      	b.n	8007562 <xTimerCreateTimerTask+0x52>
 8007564:	200016b0 	.word	0x200016b0
 8007568:	08009d60 	.word	0x08009d60
 800756c:	0800767d 	.word	0x0800767d
 8007570:	200016b4 	.word	0x200016b4

08007574 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8007574:	b1d8      	cbz	r0, 80075ae <xTimerGenericCommand+0x3a>
 8007576:	469c      	mov	ip, r3
 8007578:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800757a:	4815      	ldr	r0, [pc, #84]	; (80075d0 <xTimerGenericCommand+0x5c>)
 800757c:	6800      	ldr	r0, [r0, #0]
 800757e:	b328      	cbz	r0, 80075cc <xTimerGenericCommand+0x58>
{
 8007580:	b500      	push	{lr}
 8007582:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8007584:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007586:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007588:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800758a:	2905      	cmp	r1, #5
 800758c:	dc18      	bgt.n	80075c0 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800758e:	f7ff fe55 	bl	800723c <xTaskGetSchedulerState>
 8007592:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	bf0c      	ite	eq
 800759a:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800759c:	461a      	movne	r2, r3
 800759e:	4669      	mov	r1, sp
 80075a0:	480b      	ldr	r0, [pc, #44]	; (80075d0 <xTimerGenericCommand+0x5c>)
 80075a2:	6800      	ldr	r0, [r0, #0]
 80075a4:	f7fe fce4 	bl	8005f70 <xQueueGenericSend>
}
 80075a8:	b005      	add	sp, #20
 80075aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80075be:	e7fe      	b.n	80075be <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075c0:	2300      	movs	r3, #0
 80075c2:	4662      	mov	r2, ip
 80075c4:	4669      	mov	r1, sp
 80075c6:	f7fe fde5 	bl	8006194 <xQueueGenericSendFromISR>
 80075ca:	e7ed      	b.n	80075a8 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 80075cc:	2000      	movs	r0, #0
}
 80075ce:	4770      	bx	lr
 80075d0:	200016b0 	.word	0x200016b0

080075d4 <prvSampleTimeNow>:
{
 80075d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 80075dc:	f7ff fb28 	bl	8006c30 <xTaskGetTickCount>
 80075e0:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 80075e2:	4b23      	ldr	r3, [pc, #140]	; (8007670 <prvSampleTimeNow+0x9c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4283      	cmp	r3, r0
 80075e8:	d808      	bhi.n	80075fc <prvSampleTimeNow+0x28>
 80075ea:	2300      	movs	r3, #0
		*pxTimerListsWereSwitched = pdTRUE;
 80075ec:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 80075f0:	4b1f      	ldr	r3, [pc, #124]	; (8007670 <prvSampleTimeNow+0x9c>)
 80075f2:	601e      	str	r6, [r3, #0]
}
 80075f4:	4630      	mov	r0, r6
 80075f6:	b002      	add	sp, #8
 80075f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075fc:	4d1d      	ldr	r5, [pc, #116]	; (8007674 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075fe:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	b35a      	cbz	r2, 8007660 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800760c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800760e:	f104 0904 	add.w	r9, r4, #4
 8007612:	4648      	mov	r0, r9
 8007614:	f7fe fb0a 	bl	8005c2c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800761a:	4620      	mov	r0, r4
 800761c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800761e:	69e3      	ldr	r3, [r4, #28]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d1ee      	bne.n	8007602 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007624:	69a3      	ldr	r3, [r4, #24]
 8007626:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8007628:	429f      	cmp	r7, r3
 800762a:	d206      	bcs.n	800763a <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800762c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800762e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007630:	4649      	mov	r1, r9
 8007632:	6828      	ldr	r0, [r5, #0]
 8007634:	f7fe fae1 	bl	8005bfa <vListInsert>
 8007638:	e7e3      	b.n	8007602 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800763a:	f8cd 8000 	str.w	r8, [sp]
 800763e:	4643      	mov	r3, r8
 8007640:	463a      	mov	r2, r7
 8007642:	4641      	mov	r1, r8
 8007644:	4620      	mov	r0, r4
 8007646:	f7ff ff95 	bl	8007574 <xTimerGenericCommand>
				configASSERT( xResult );
 800764a:	2800      	cmp	r0, #0
 800764c:	d1d9      	bne.n	8007602 <prvSampleTimeNow+0x2e>
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	e7fe      	b.n	800765e <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 8007660:	4a05      	ldr	r2, [pc, #20]	; (8007678 <prvSampleTimeNow+0xa4>)
 8007662:	6810      	ldr	r0, [r2, #0]
 8007664:	4903      	ldr	r1, [pc, #12]	; (8007674 <prvSampleTimeNow+0xa0>)
 8007666:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8007668:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800766a:	2301      	movs	r3, #1
 800766c:	e7be      	b.n	80075ec <prvSampleTimeNow+0x18>
 800766e:	bf00      	nop
 8007670:	2000165c 	.word	0x2000165c
 8007674:	2000158c 	.word	0x2000158c
 8007678:	20001590 	.word	0x20001590

0800767c <prvTimerTask>:
{
 800767c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007680:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007682:	4e74      	ldr	r6, [pc, #464]	; (8007854 <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007684:	4d74      	ldr	r5, [pc, #464]	; (8007858 <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007686:	4f75      	ldr	r7, [pc, #468]	; (800785c <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007688:	6833      	ldr	r3, [r6, #0]
 800768a:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 800768e:	f1b8 0f00 	cmp.w	r8, #0
 8007692:	d00f      	beq.n	80076b4 <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800769a:	f7ff fac1 	bl	8006c20 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800769e:	a804      	add	r0, sp, #16
 80076a0:	f7ff ff98 	bl	80075d4 <prvSampleTimeNow>
 80076a4:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80076a6:	9b04      	ldr	r3, [sp, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d154      	bne.n	8007756 <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80076ac:	4580      	cmp	r8, r0
 80076ae:	d923      	bls.n	80076f8 <prvTimerTask+0x7c>
 80076b0:	2200      	movs	r2, #0
 80076b2:	e00d      	b.n	80076d0 <prvTimerTask+0x54>
	vTaskSuspendAll();
 80076b4:	f7ff fab4 	bl	8006c20 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076b8:	a804      	add	r0, sp, #16
 80076ba:	f7ff ff8b 	bl	80075d4 <prvSampleTimeNow>
 80076be:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d147      	bne.n	8007756 <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	fab2 f282 	clz	r2, r2
 80076ce:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076d0:	eba8 0104 	sub.w	r1, r8, r4
 80076d4:	6828      	ldr	r0, [r5, #0]
 80076d6:	f7ff f859 	bl	800678c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076da:	f7ff fb49 	bl	8006d70 <xTaskResumeAll>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d13b      	bne.n	800775a <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 80076e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	e030      	b.n	800775a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 80076f8:	f7ff fb3a 	bl	8006d70 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076fc:	6833      	ldr	r3, [r6, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007704:	f109 0004 	add.w	r0, r9, #4
 8007708:	f7fe fa90 	bl	8005c2c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800770c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d004      	beq.n	800771e <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007714:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8007718:	4648      	mov	r0, r9
 800771a:	4798      	blx	r3
}
 800771c:	e01d      	b.n	800775a <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800771e:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8007722:	4643      	mov	r3, r8
 8007724:	4622      	mov	r2, r4
 8007726:	4441      	add	r1, r8
 8007728:	4648      	mov	r0, r9
 800772a:	f7ff fe95 	bl	8007458 <prvInsertTimerInActiveList>
 800772e:	2800      	cmp	r0, #0
 8007730:	d0f0      	beq.n	8007714 <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007732:	2100      	movs	r1, #0
 8007734:	9100      	str	r1, [sp, #0]
 8007736:	460b      	mov	r3, r1
 8007738:	4642      	mov	r2, r8
 800773a:	4648      	mov	r0, r9
 800773c:	f7ff ff1a 	bl	8007574 <xTimerGenericCommand>
			configASSERT( xResult );
 8007740:	2800      	cmp	r0, #0
 8007742:	d1e7      	bne.n	8007714 <prvTimerTask+0x98>
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	e7fe      	b.n	8007754 <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 8007756:	f7ff fb0b 	bl	8006d70 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800775a:	2400      	movs	r4, #0
}
 800775c:	e006      	b.n	800776c <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800775e:	9907      	ldr	r1, [sp, #28]
 8007760:	9806      	ldr	r0, [sp, #24]
 8007762:	9b05      	ldr	r3, [sp, #20]
 8007764:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da09      	bge.n	8007780 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800776c:	4622      	mov	r2, r4
 800776e:	a904      	add	r1, sp, #16
 8007770:	6828      	ldr	r0, [r5, #0]
 8007772:	f7fe fdce 	bl	8006312 <xQueueReceive>
 8007776:	2800      	cmp	r0, #0
 8007778:	d086      	beq.n	8007688 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800777a:	9b04      	ldr	r3, [sp, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	dbee      	blt.n	800775e <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007780:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007784:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007788:	b11b      	cbz	r3, 8007792 <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800778a:	f108 0004 	add.w	r0, r8, #4
 800778e:	f7fe fa4d 	bl	8005c2c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007792:	a803      	add	r0, sp, #12
 8007794:	f7ff ff1e 	bl	80075d4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007798:	9b04      	ldr	r3, [sp, #16]
 800779a:	2b09      	cmp	r3, #9
 800779c:	d8e6      	bhi.n	800776c <prvTimerTask+0xf0>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <prvTimerTask+0x128>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077cd 	.word	0x080077cd
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077cd 	.word	0x080077cd
 80077b0:	0800776d 	.word	0x0800776d
 80077b4:	0800781b 	.word	0x0800781b
 80077b8:	08007843 	.word	0x08007843
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077cd 	.word	0x080077cd
 80077c4:	0800776d 	.word	0x0800776d
 80077c8:	0800781b 	.word	0x0800781b
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077cc:	9b05      	ldr	r3, [sp, #20]
 80077ce:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80077d2:	4602      	mov	r2, r0
 80077d4:	4419      	add	r1, r3
 80077d6:	4640      	mov	r0, r8
 80077d8:	f7ff fe3e 	bl	8007458 <prvInsertTimerInActiveList>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d0c5      	beq.n	800776c <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077e0:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80077e4:	4640      	mov	r0, r8
 80077e6:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077e8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d1bd      	bne.n	800776c <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80077f0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80077f4:	9400      	str	r4, [sp, #0]
 80077f6:	4623      	mov	r3, r4
 80077f8:	9905      	ldr	r1, [sp, #20]
 80077fa:	440a      	add	r2, r1
 80077fc:	4621      	mov	r1, r4
 80077fe:	4640      	mov	r0, r8
 8007800:	f7ff feb8 	bl	8007574 <xTimerGenericCommand>
							configASSERT( xResult );
 8007804:	2800      	cmp	r0, #0
 8007806:	d1b1      	bne.n	800776c <prvTimerTask+0xf0>
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	e7fe      	b.n	8007818 <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800781a:	9905      	ldr	r1, [sp, #20]
 800781c:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007820:	b131      	cbz	r1, 8007830 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007822:	4603      	mov	r3, r0
 8007824:	4602      	mov	r2, r0
 8007826:	4401      	add	r1, r0
 8007828:	4640      	mov	r0, r8
 800782a:	f7ff fe15 	bl	8007458 <prvInsertTimerInActiveList>
					break;
 800782e:	e79d      	b.n	800776c <prvTimerTask+0xf0>
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007840:	e7fe      	b.n	8007840 <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007842:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d190      	bne.n	800776c <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 800784a:	4640      	mov	r0, r8
 800784c:	f000 fa52 	bl	8007cf4 <vPortFree>
 8007850:	e78c      	b.n	800776c <prvTimerTask+0xf0>
 8007852:	bf00      	nop
 8007854:	2000158c 	.word	0x2000158c
 8007858:	200016b0 	.word	0x200016b0
 800785c:	20001590 	.word	0x20001590

08007860 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007860:	b510      	push	{r4, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	4614      	mov	r4, r2
 8007866:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007868:	f06f 0301 	mvn.w	r3, #1
 800786c:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800786e:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007870:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007872:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007874:	2300      	movs	r3, #0
 8007876:	4669      	mov	r1, sp
 8007878:	4802      	ldr	r0, [pc, #8]	; (8007884 <xTimerPendFunctionCallFromISR+0x24>)
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	f7fe fc8a 	bl	8006194 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8007880:	b004      	add	sp, #16
 8007882:	bd10      	pop	{r4, pc}
 8007884:	200016b0 	.word	0x200016b0

08007888 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007888:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800788a:	2300      	movs	r3, #0
 800788c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800788e:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <prvTaskExitError+0x3c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d008      	beq.n	80078aa <prvTaskExitError+0x22>
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	e7fe      	b.n	80078a8 <prvTaskExitError+0x20>
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078ba:	9b01      	ldr	r3, [sp, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0fc      	beq.n	80078ba <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078c0:	b002      	add	sp, #8
 80078c2:	4770      	bx	lr
 80078c4:	20000018 	.word	0x20000018

080078c8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80078c8:	4806      	ldr	r0, [pc, #24]	; (80078e4 <prvPortStartFirstTask+0x1c>)
 80078ca:	6800      	ldr	r0, [r0, #0]
 80078cc:	6800      	ldr	r0, [r0, #0]
 80078ce:	f380 8808 	msr	MSP, r0
 80078d2:	b662      	cpsie	i
 80078d4:	b661      	cpsie	f
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	df00      	svc	0
 80078e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078e2:	0000      	.short	0x0000
 80078e4:	e000ed08 	.word	0xe000ed08

080078e8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078ec:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078f0:	f021 0101 	bic.w	r1, r1, #1
 80078f4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078f8:	4b03      	ldr	r3, [pc, #12]	; (8007908 <pxPortInitialiseStack+0x20>)
 80078fa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078fe:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007902:	3840      	subs	r0, #64	; 0x40
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	08007889 	.word	0x08007889
 800790c:	00000000 	.word	0x00000000

08007910 <SVC_Handler>:
	__asm volatile (
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <pxCurrentTCBConst2>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800791a:	f380 8809 	msr	PSP, r0
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	f04e 0e0d 	orr.w	lr, lr, #13
 800792e:	4770      	bx	lr

08007930 <pxCurrentTCBConst2>:
 8007930:	20001090 	.word	0x20001090

08007934 <vPortEnterCritical>:
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007944:	4a0b      	ldr	r2, [pc, #44]	; (8007974 <vPortEnterCritical+0x40>)
 8007946:	6813      	ldr	r3, [r2, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800794c:	2b01      	cmp	r3, #1
 800794e:	d000      	beq.n	8007952 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007950:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007952:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007956:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800795a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800795e:	d0f7      	beq.n	8007950 <vPortEnterCritical+0x1c>
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	e7fe      	b.n	8007970 <vPortEnterCritical+0x3c>
 8007972:	bf00      	nop
 8007974:	20000018 	.word	0x20000018

08007978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007978:	4b09      	ldr	r3, [pc, #36]	; (80079a0 <vPortExitCritical+0x28>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	b943      	cbnz	r3, 8007990 <vPortExitCritical+0x18>
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	e7fe      	b.n	800798e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007990:	3b01      	subs	r3, #1
 8007992:	4a03      	ldr	r2, [pc, #12]	; (80079a0 <vPortExitCritical+0x28>)
 8007994:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007996:	b90b      	cbnz	r3, 800799c <vPortExitCritical+0x24>
	__asm volatile
 8007998:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20000018 	.word	0x20000018
	...

080079b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079b0:	f3ef 8009 	mrs	r0, PSP
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <pxCurrentTCBConst>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079c0:	6010      	str	r0, [r2, #0]
 80079c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80079c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079ca:	f380 8811 	msr	BASEPRI, r0
 80079ce:	f7ff faa1 	bl	8006f14 <vTaskSwitchContext>
 80079d2:	f04f 0000 	mov.w	r0, #0
 80079d6:	f380 8811 	msr	BASEPRI, r0
 80079da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80079de:	6819      	ldr	r1, [r3, #0]
 80079e0:	6808      	ldr	r0, [r1, #0]
 80079e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079e6:	f380 8809 	msr	PSP, r0
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	4770      	bx	lr

080079f0 <pxCurrentTCBConst>:
 80079f0:	20001090 	.word	0x20001090

080079f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079f4:	b508      	push	{r3, lr}
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a06:	f7ff f919 	bl	8006c3c <xTaskIncrementTick>
 8007a0a:	b128      	cbz	r0, 8007a18 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a1e:	bd08      	pop	{r3, pc}

08007a20 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007a24:	2300      	movs	r3, #0
 8007a26:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a28:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <vPortSetupTimerInterrupt+0x20>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4905      	ldr	r1, [pc, #20]	; (8007a44 <vPortSetupTimerInterrupt+0x24>)
 8007a30:	fba1 1303 	umull	r1, r3, r1, r3
 8007a34:	099b      	lsrs	r3, r3, #6
 8007a36:	3b01      	subs	r3, #1
 8007a38:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a3a:	2307      	movs	r3, #7
 8007a3c:	6113      	str	r3, [r2, #16]
}
 8007a3e:	4770      	bx	lr
 8007a40:	2000000c 	.word	0x2000000c
 8007a44:	10624dd3 	.word	0x10624dd3

08007a48 <xPortStartScheduler>:
{
 8007a48:	b510      	push	{r4, lr}
 8007a4a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a4c:	4b2c      	ldr	r3, [pc, #176]	; (8007b00 <xPortStartScheduler+0xb8>)
 8007a4e:	781a      	ldrb	r2, [r3, #0]
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a54:	22ff      	movs	r2, #255	; 0xff
 8007a56:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a60:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a68:	4a26      	ldr	r2, [pc, #152]	; (8007b04 <xPortStartScheduler+0xbc>)
 8007a6a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a6c:	4b26      	ldr	r3, [pc, #152]	; (8007b08 <xPortStartScheduler+0xc0>)
 8007a6e:	2207      	movs	r2, #7
 8007a70:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007a76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a7a:	d013      	beq.n	8007aa4 <xPortStartScheduler+0x5c>
 8007a7c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007a82:	005b      	lsls	r3, r3, #1
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a8a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8007a8e:	4610      	mov	r0, r2
 8007a90:	3a01      	subs	r2, #1
 8007a92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007a96:	d1f2      	bne.n	8007a7e <xPortStartScheduler+0x36>
 8007a98:	4a1b      	ldr	r2, [pc, #108]	; (8007b08 <xPortStartScheduler+0xc0>)
 8007a9a:	6010      	str	r0, [r2, #0]
 8007a9c:	f88d 3003 	strb.w	r3, [sp, #3]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aa0:	2803      	cmp	r0, #3
 8007aa2:	d008      	beq.n	8007ab6 <xPortStartScheduler+0x6e>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	e7fe      	b.n	8007ab4 <xPortStartScheduler+0x6c>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ab6:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <xPortStartScheduler+0xc0>)
 8007ab8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007abc:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	4a0f      	ldr	r2, [pc, #60]	; (8007b00 <xPortStartScheduler+0xb8>)
 8007ac4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ac6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007aca:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007ace:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007ad2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ad6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007ada:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007ade:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007ae2:	f7ff ff9d 	bl	8007a20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007ae6:	2400      	movs	r4, #0
 8007ae8:	4b08      	ldr	r3, [pc, #32]	; (8007b0c <xPortStartScheduler+0xc4>)
 8007aea:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007aec:	f7ff feec 	bl	80078c8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007af0:	f7ff fa10 	bl	8006f14 <vTaskSwitchContext>
	prvTaskExitError();
 8007af4:	f7ff fec8 	bl	8007888 <prvTaskExitError>
}
 8007af8:	4620      	mov	r0, r4
 8007afa:	b002      	add	sp, #8
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	e000e400 	.word	0xe000e400
 8007b04:	200016b8 	.word	0x200016b8
 8007b08:	200016bc 	.word	0x200016bc
 8007b0c:	20000018 	.word	0x20000018

08007b10 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b10:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b14:	2b0f      	cmp	r3, #15
 8007b16:	d90f      	bls.n	8007b38 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b18:	4a11      	ldr	r2, [pc, #68]	; (8007b60 <vPortValidateInterruptPriority+0x50>)
 8007b1a:	5c9b      	ldrb	r3, [r3, r2]
 8007b1c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b1e:	4a11      	ldr	r2, [pc, #68]	; (8007b64 <vPortValidateInterruptPriority+0x54>)
 8007b20:	7812      	ldrb	r2, [r2, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d908      	bls.n	8007b38 <vPortValidateInterruptPriority+0x28>
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	e7fe      	b.n	8007b36 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007b3c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007b40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b44:	4a08      	ldr	r2, [pc, #32]	; (8007b68 <vPortValidateInterruptPriority+0x58>)
 8007b46:	6812      	ldr	r2, [r2, #0]
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d908      	bls.n	8007b5e <vPortValidateInterruptPriority+0x4e>
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	e7fe      	b.n	8007b5c <vPortValidateInterruptPriority+0x4c>
	}
 8007b5e:	4770      	bx	lr
 8007b60:	e000e3f0 	.word	0xe000e3f0
 8007b64:	200016b8 	.word	0x200016b8
 8007b68:	200016bc 	.word	0x200016bc

08007b6c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b6c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b6e:	4b14      	ldr	r3, [pc, #80]	; (8007bc0 <prvInsertBlockIntoFreeList+0x54>)
 8007b70:	461a      	mov	r2, r3
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4283      	cmp	r3, r0
 8007b76:	d3fb      	bcc.n	8007b70 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b78:	6854      	ldr	r4, [r2, #4]
 8007b7a:	1911      	adds	r1, r2, r4
 8007b7c:	4288      	cmp	r0, r1
 8007b7e:	d009      	beq.n	8007b94 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b80:	6844      	ldr	r4, [r0, #4]
 8007b82:	1901      	adds	r1, r0, r4
 8007b84:	428b      	cmp	r3, r1
 8007b86:	d00f      	beq.n	8007ba8 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b88:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b8a:	4282      	cmp	r2, r0
 8007b8c:	d000      	beq.n	8007b90 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b8e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b90:	bc10      	pop	{r4}
 8007b92:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b94:	6841      	ldr	r1, [r0, #4]
 8007b96:	4421      	add	r1, r4
 8007b98:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	4411      	add	r1, r2
 8007b9e:	428b      	cmp	r3, r1
 8007ba0:	d001      	beq.n	8007ba6 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ba2:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8007ba4:	e7f4      	b.n	8007b90 <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ba6:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ba8:	4906      	ldr	r1, [pc, #24]	; (8007bc4 <prvInsertBlockIntoFreeList+0x58>)
 8007baa:	6809      	ldr	r1, [r1, #0]
 8007bac:	428b      	cmp	r3, r1
 8007bae:	d005      	beq.n	8007bbc <prvInsertBlockIntoFreeList+0x50>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	4423      	add	r3, r4
 8007bb4:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bb6:	6813      	ldr	r3, [r2, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	e7e5      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x1c>
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	e7e3      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x1c>
 8007bc0:	20002670 	.word	0x20002670
 8007bc4:	200016c0 	.word	0x200016c0

08007bc8 <pvPortMalloc>:
{
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007bcc:	f7ff f828 	bl	8006c20 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007bd0:	4b42      	ldr	r3, [pc, #264]	; (8007cdc <pvPortMalloc+0x114>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	b1b3      	cbz	r3, 8007c04 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bd6:	4b42      	ldr	r3, [pc, #264]	; (8007ce0 <pvPortMalloc+0x118>)
 8007bd8:	681d      	ldr	r5, [r3, #0]
 8007bda:	4225      	tst	r5, r4
 8007bdc:	d179      	bne.n	8007cd2 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 8007bde:	2c00      	cmp	r4, #0
 8007be0:	d077      	beq.n	8007cd2 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007be2:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007be6:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bea:	bf1c      	itt	ne
 8007bec:	f022 0207 	bicne.w	r2, r2, #7
 8007bf0:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bf2:	2a00      	cmp	r2, #0
 8007bf4:	d06d      	beq.n	8007cd2 <pvPortMalloc+0x10a>
 8007bf6:	4b3b      	ldr	r3, [pc, #236]	; (8007ce4 <pvPortMalloc+0x11c>)
 8007bf8:	681e      	ldr	r6, [r3, #0]
 8007bfa:	4296      	cmp	r6, r2
 8007bfc:	d369      	bcc.n	8007cd2 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 8007bfe:	493a      	ldr	r1, [pc, #232]	; (8007ce8 <pvPortMalloc+0x120>)
 8007c00:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c02:	e027      	b.n	8007c54 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007c04:	4a39      	ldr	r2, [pc, #228]	; (8007cec <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c06:	f012 0f07 	tst.w	r2, #7
 8007c0a:	d007      	beq.n	8007c1c <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c0c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c0e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c12:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8007c16:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c18:	460a      	mov	r2, r1
 8007c1a:	e001      	b.n	8007c20 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c1c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c20:	4831      	ldr	r0, [pc, #196]	; (8007ce8 <pvPortMalloc+0x120>)
 8007c22:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c24:	2100      	movs	r1, #0
 8007c26:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c28:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007c2a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c2c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007c30:	482a      	ldr	r0, [pc, #168]	; (8007cdc <pvPortMalloc+0x114>)
 8007c32:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007c34:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c36:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c38:	1a99      	subs	r1, r3, r2
 8007c3a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c3c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c3e:	4b2c      	ldr	r3, [pc, #176]	; (8007cf0 <pvPortMalloc+0x128>)
 8007c40:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c42:	4b28      	ldr	r3, [pc, #160]	; (8007ce4 <pvPortMalloc+0x11c>)
 8007c44:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c46:	4b26      	ldr	r3, [pc, #152]	; (8007ce0 <pvPortMalloc+0x118>)
 8007c48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	e7c2      	b.n	8007bd6 <pvPortMalloc+0xe>
 8007c50:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c52:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d202      	bcs.n	8007c60 <pvPortMalloc+0x98>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f7      	bne.n	8007c50 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8007c60:	4b1e      	ldr	r3, [pc, #120]	; (8007cdc <pvPortMalloc+0x114>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	d034      	beq.n	8007cd2 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c68:	680f      	ldr	r7, [r1, #0]
 8007c6a:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c70:	6863      	ldr	r3, [r4, #4]
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	2b10      	cmp	r3, #16
 8007c76:	d910      	bls.n	8007c9a <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c78:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c7a:	f010 0f07 	tst.w	r0, #7
 8007c7e:	d008      	beq.n	8007c92 <pvPortMalloc+0xca>
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	e7fe      	b.n	8007c90 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c92:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c94:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c96:	f7ff ff69 	bl	8007b6c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c9a:	6863      	ldr	r3, [r4, #4]
 8007c9c:	1af6      	subs	r6, r6, r3
 8007c9e:	4a11      	ldr	r2, [pc, #68]	; (8007ce4 <pvPortMalloc+0x11c>)
 8007ca0:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ca2:	4a13      	ldr	r2, [pc, #76]	; (8007cf0 <pvPortMalloc+0x128>)
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ca8:	bf3c      	itt	cc
 8007caa:	4a11      	ldrcc	r2, [pc, #68]	; (8007cf0 <pvPortMalloc+0x128>)
 8007cac:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cae:	431d      	orrs	r5, r3
 8007cb0:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8007cb6:	f7ff f85b 	bl	8006d70 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cba:	f017 0f07 	tst.w	r7, #7
 8007cbe:	d00b      	beq.n	8007cd8 <pvPortMalloc+0x110>
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	e7fe      	b.n	8007cd0 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007cd2:	f7ff f84d 	bl	8006d70 <xTaskResumeAll>
 8007cd6:	2700      	movs	r7, #0
}
 8007cd8:	4638      	mov	r0, r7
 8007cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cdc:	200016c0 	.word	0x200016c0
 8007ce0:	20002664 	.word	0x20002664
 8007ce4:	20002668 	.word	0x20002668
 8007ce8:	20002670 	.word	0x20002670
 8007cec:	200016c4 	.word	0x200016c4
 8007cf0:	2000266c 	.word	0x2000266c

08007cf4 <vPortFree>:
	if( pv != NULL )
 8007cf4:	b378      	cbz	r0, 8007d56 <vPortFree+0x62>
{
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cfa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007cfe:	4a16      	ldr	r2, [pc, #88]	; (8007d58 <vPortFree+0x64>)
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	4213      	tst	r3, r2
 8007d04:	d108      	bne.n	8007d18 <vPortFree+0x24>
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	e7fe      	b.n	8007d16 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d18:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007d1c:	b141      	cbz	r1, 8007d30 <vPortFree+0x3c>
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	e7fe      	b.n	8007d2e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d30:	ea23 0302 	bic.w	r3, r3, r2
 8007d34:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007d38:	f7fe ff72 	bl	8006c20 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d3c:	4a07      	ldr	r2, [pc, #28]	; (8007d5c <vPortFree+0x68>)
 8007d3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007d42:	6811      	ldr	r1, [r2, #0]
 8007d44:	440b      	add	r3, r1
 8007d46:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d48:	f1a4 0008 	sub.w	r0, r4, #8
 8007d4c:	f7ff ff0e 	bl	8007b6c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007d50:	f7ff f80e 	bl	8006d70 <xTaskResumeAll>
}
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	4770      	bx	lr
 8007d58:	20002664 	.word	0x20002664
 8007d5c:	20002668 	.word	0x20002668

08007d60 <__itoa>:
 8007d60:	1e93      	subs	r3, r2, #2
 8007d62:	2b22      	cmp	r3, #34	; 0x22
 8007d64:	b510      	push	{r4, lr}
 8007d66:	460c      	mov	r4, r1
 8007d68:	d904      	bls.n	8007d74 <__itoa+0x14>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	461c      	mov	r4, r3
 8007d6e:	700b      	strb	r3, [r1, #0]
 8007d70:	4620      	mov	r0, r4
 8007d72:	bd10      	pop	{r4, pc}
 8007d74:	2a0a      	cmp	r2, #10
 8007d76:	d109      	bne.n	8007d8c <__itoa+0x2c>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	da07      	bge.n	8007d8c <__itoa+0x2c>
 8007d7c:	232d      	movs	r3, #45	; 0x2d
 8007d7e:	700b      	strb	r3, [r1, #0]
 8007d80:	2101      	movs	r1, #1
 8007d82:	4240      	negs	r0, r0
 8007d84:	4421      	add	r1, r4
 8007d86:	f000 f843 	bl	8007e10 <__utoa>
 8007d8a:	e7f1      	b.n	8007d70 <__itoa+0x10>
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	e7f9      	b.n	8007d84 <__itoa+0x24>

08007d90 <itoa>:
 8007d90:	f7ff bfe6 	b.w	8007d60 <__itoa>

08007d94 <rand>:
 8007d94:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <rand+0x5c>)
 8007d96:	b510      	push	{r4, lr}
 8007d98:	681c      	ldr	r4, [r3, #0]
 8007d9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d9c:	b9b3      	cbnz	r3, 8007dcc <rand+0x38>
 8007d9e:	2018      	movs	r0, #24
 8007da0:	f000 fa76 	bl	8008290 <malloc>
 8007da4:	4602      	mov	r2, r0
 8007da6:	6320      	str	r0, [r4, #48]	; 0x30
 8007da8:	b920      	cbnz	r0, 8007db4 <rand+0x20>
 8007daa:	2152      	movs	r1, #82	; 0x52
 8007dac:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <rand+0x60>)
 8007dae:	4812      	ldr	r0, [pc, #72]	; (8007df8 <rand+0x64>)
 8007db0:	f000 fa08 	bl	80081c4 <__assert_func>
 8007db4:	4911      	ldr	r1, [pc, #68]	; (8007dfc <rand+0x68>)
 8007db6:	4b12      	ldr	r3, [pc, #72]	; (8007e00 <rand+0x6c>)
 8007db8:	e9c0 1300 	strd	r1, r3, [r0]
 8007dbc:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <rand+0x70>)
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	6083      	str	r3, [r0, #8]
 8007dc2:	230b      	movs	r3, #11
 8007dc4:	8183      	strh	r3, [r0, #12]
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007dcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007dce:	480e      	ldr	r0, [pc, #56]	; (8007e08 <rand+0x74>)
 8007dd0:	690b      	ldr	r3, [r1, #16]
 8007dd2:	694c      	ldr	r4, [r1, #20]
 8007dd4:	4358      	muls	r0, r3
 8007dd6:	4a0d      	ldr	r2, [pc, #52]	; (8007e0c <rand+0x78>)
 8007dd8:	fb02 0004 	mla	r0, r2, r4, r0
 8007ddc:	fba3 3202 	umull	r3, r2, r3, r2
 8007de0:	3301      	adds	r3, #1
 8007de2:	eb40 0002 	adc.w	r0, r0, r2
 8007de6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007dea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007dee:	bd10      	pop	{r4, pc}
 8007df0:	20000074 	.word	0x20000074
 8007df4:	08009d68 	.word	0x08009d68
 8007df8:	08009d7f 	.word	0x08009d7f
 8007dfc:	abcd330e 	.word	0xabcd330e
 8007e00:	e66d1234 	.word	0xe66d1234
 8007e04:	0005deec 	.word	0x0005deec
 8007e08:	5851f42d 	.word	0x5851f42d
 8007e0c:	4c957f2d 	.word	0x4c957f2d

08007e10 <__utoa>:
 8007e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e12:	b08b      	sub	sp, #44	; 0x2c
 8007e14:	4605      	mov	r5, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	466e      	mov	r6, sp
 8007e1a:	4c1d      	ldr	r4, [pc, #116]	; (8007e90 <__utoa+0x80>)
 8007e1c:	f104 0c20 	add.w	ip, r4, #32
 8007e20:	4637      	mov	r7, r6
 8007e22:	6820      	ldr	r0, [r4, #0]
 8007e24:	6861      	ldr	r1, [r4, #4]
 8007e26:	3408      	adds	r4, #8
 8007e28:	c703      	stmia	r7!, {r0, r1}
 8007e2a:	4564      	cmp	r4, ip
 8007e2c:	463e      	mov	r6, r7
 8007e2e:	d1f7      	bne.n	8007e20 <__utoa+0x10>
 8007e30:	7921      	ldrb	r1, [r4, #4]
 8007e32:	6820      	ldr	r0, [r4, #0]
 8007e34:	7139      	strb	r1, [r7, #4]
 8007e36:	1e91      	subs	r1, r2, #2
 8007e38:	2922      	cmp	r1, #34	; 0x22
 8007e3a:	6038      	str	r0, [r7, #0]
 8007e3c:	f04f 0100 	mov.w	r1, #0
 8007e40:	d904      	bls.n	8007e4c <__utoa+0x3c>
 8007e42:	7019      	strb	r1, [r3, #0]
 8007e44:	460b      	mov	r3, r1
 8007e46:	4618      	mov	r0, r3
 8007e48:	b00b      	add	sp, #44	; 0x2c
 8007e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4c:	1e58      	subs	r0, r3, #1
 8007e4e:	4684      	mov	ip, r0
 8007e50:	fbb5 f7f2 	udiv	r7, r5, r2
 8007e54:	fb02 5617 	mls	r6, r2, r7, r5
 8007e58:	3628      	adds	r6, #40	; 0x28
 8007e5a:	446e      	add	r6, sp
 8007e5c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007e60:	460c      	mov	r4, r1
 8007e62:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007e66:	462e      	mov	r6, r5
 8007e68:	42b2      	cmp	r2, r6
 8007e6a:	463d      	mov	r5, r7
 8007e6c:	f101 0101 	add.w	r1, r1, #1
 8007e70:	d9ee      	bls.n	8007e50 <__utoa+0x40>
 8007e72:	2200      	movs	r2, #0
 8007e74:	545a      	strb	r2, [r3, r1]
 8007e76:	1919      	adds	r1, r3, r4
 8007e78:	1aa5      	subs	r5, r4, r2
 8007e7a:	42aa      	cmp	r2, r5
 8007e7c:	dae3      	bge.n	8007e46 <__utoa+0x36>
 8007e7e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007e82:	780e      	ldrb	r6, [r1, #0]
 8007e84:	3201      	adds	r2, #1
 8007e86:	7006      	strb	r6, [r0, #0]
 8007e88:	f801 5901 	strb.w	r5, [r1], #-1
 8007e8c:	e7f4      	b.n	8007e78 <__utoa+0x68>
 8007e8e:	bf00      	nop
 8007e90:	08009dd7 	.word	0x08009dd7

08007e94 <std>:
 8007e94:	2300      	movs	r3, #0
 8007e96:	b510      	push	{r4, lr}
 8007e98:	4604      	mov	r4, r0
 8007e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ea2:	6083      	str	r3, [r0, #8]
 8007ea4:	8181      	strh	r1, [r0, #12]
 8007ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ea8:	81c2      	strh	r2, [r0, #14]
 8007eaa:	6183      	str	r3, [r0, #24]
 8007eac:	4619      	mov	r1, r3
 8007eae:	2208      	movs	r2, #8
 8007eb0:	305c      	adds	r0, #92	; 0x5c
 8007eb2:	f000 f8f4 	bl	800809e <memset>
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <std+0x58>)
 8007eb8:	6224      	str	r4, [r4, #32]
 8007eba:	6263      	str	r3, [r4, #36]	; 0x24
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <std+0x5c>)
 8007ebe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <std+0x60>)
 8007ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <std+0x64>)
 8007ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <std+0x68>)
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d006      	beq.n	8007edc <std+0x48>
 8007ece:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ed2:	4294      	cmp	r4, r2
 8007ed4:	d002      	beq.n	8007edc <std+0x48>
 8007ed6:	33d0      	adds	r3, #208	; 0xd0
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	d105      	bne.n	8007ee8 <std+0x54>
 8007edc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee4:	f000 b954 	b.w	8008190 <__retarget_lock_init_recursive>
 8007ee8:	bd10      	pop	{r4, pc}
 8007eea:	bf00      	nop
 8007eec:	08008019 	.word	0x08008019
 8007ef0:	0800803b 	.word	0x0800803b
 8007ef4:	08008073 	.word	0x08008073
 8007ef8:	08008097 	.word	0x08008097
 8007efc:	20002678 	.word	0x20002678

08007f00 <stdio_exit_handler>:
 8007f00:	4a02      	ldr	r2, [pc, #8]	; (8007f0c <stdio_exit_handler+0xc>)
 8007f02:	4903      	ldr	r1, [pc, #12]	; (8007f10 <stdio_exit_handler+0x10>)
 8007f04:	4803      	ldr	r0, [pc, #12]	; (8007f14 <stdio_exit_handler+0x14>)
 8007f06:	f000 b869 	b.w	8007fdc <_fwalk_sglue>
 8007f0a:	bf00      	nop
 8007f0c:	2000001c 	.word	0x2000001c
 8007f10:	080084fd 	.word	0x080084fd
 8007f14:	20000028 	.word	0x20000028

08007f18 <cleanup_stdio>:
 8007f18:	6841      	ldr	r1, [r0, #4]
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <cleanup_stdio+0x34>)
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	4604      	mov	r4, r0
 8007f22:	d001      	beq.n	8007f28 <cleanup_stdio+0x10>
 8007f24:	f000 faea 	bl	80084fc <_fflush_r>
 8007f28:	68a1      	ldr	r1, [r4, #8]
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <cleanup_stdio+0x38>)
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	d002      	beq.n	8007f36 <cleanup_stdio+0x1e>
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fae3 	bl	80084fc <_fflush_r>
 8007f36:	68e1      	ldr	r1, [r4, #12]
 8007f38:	4b06      	ldr	r3, [pc, #24]	; (8007f54 <cleanup_stdio+0x3c>)
 8007f3a:	4299      	cmp	r1, r3
 8007f3c:	d004      	beq.n	8007f48 <cleanup_stdio+0x30>
 8007f3e:	4620      	mov	r0, r4
 8007f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f44:	f000 bada 	b.w	80084fc <_fflush_r>
 8007f48:	bd10      	pop	{r4, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20002678 	.word	0x20002678
 8007f50:	200026e0 	.word	0x200026e0
 8007f54:	20002748 	.word	0x20002748

08007f58 <global_stdio_init.part.0>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <global_stdio_init.part.0+0x30>)
 8007f5c:	4c0b      	ldr	r4, [pc, #44]	; (8007f8c <global_stdio_init.part.0+0x34>)
 8007f5e:	4a0c      	ldr	r2, [pc, #48]	; (8007f90 <global_stdio_init.part.0+0x38>)
 8007f60:	4620      	mov	r0, r4
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	2104      	movs	r1, #4
 8007f66:	2200      	movs	r2, #0
 8007f68:	f7ff ff94 	bl	8007e94 <std>
 8007f6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f70:	2201      	movs	r2, #1
 8007f72:	2109      	movs	r1, #9
 8007f74:	f7ff ff8e 	bl	8007e94 <std>
 8007f78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f82:	2112      	movs	r1, #18
 8007f84:	f7ff bf86 	b.w	8007e94 <std>
 8007f88:	200027b0 	.word	0x200027b0
 8007f8c:	20002678 	.word	0x20002678
 8007f90:	08007f01 	.word	0x08007f01

08007f94 <__sfp_lock_acquire>:
 8007f94:	4801      	ldr	r0, [pc, #4]	; (8007f9c <__sfp_lock_acquire+0x8>)
 8007f96:	f000 b8fc 	b.w	8008192 <__retarget_lock_acquire_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	200027b9 	.word	0x200027b9

08007fa0 <__sfp_lock_release>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	; (8007fa8 <__sfp_lock_release+0x8>)
 8007fa2:	f000 b8f7 	b.w	8008194 <__retarget_lock_release_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	200027b9 	.word	0x200027b9

08007fac <__sinit>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4604      	mov	r4, r0
 8007fb0:	f7ff fff0 	bl	8007f94 <__sfp_lock_acquire>
 8007fb4:	6a23      	ldr	r3, [r4, #32]
 8007fb6:	b11b      	cbz	r3, 8007fc0 <__sinit+0x14>
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f7ff bff0 	b.w	8007fa0 <__sfp_lock_release>
 8007fc0:	4b04      	ldr	r3, [pc, #16]	; (8007fd4 <__sinit+0x28>)
 8007fc2:	6223      	str	r3, [r4, #32]
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <__sinit+0x2c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f5      	bne.n	8007fb8 <__sinit+0xc>
 8007fcc:	f7ff ffc4 	bl	8007f58 <global_stdio_init.part.0>
 8007fd0:	e7f2      	b.n	8007fb8 <__sinit+0xc>
 8007fd2:	bf00      	nop
 8007fd4:	08007f19 	.word	0x08007f19
 8007fd8:	200027b0 	.word	0x200027b0

08007fdc <_fwalk_sglue>:
 8007fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	4688      	mov	r8, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fec:	f1b9 0901 	subs.w	r9, r9, #1
 8007ff0:	d505      	bpl.n	8007ffe <_fwalk_sglue+0x22>
 8007ff2:	6824      	ldr	r4, [r4, #0]
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	d1f7      	bne.n	8007fe8 <_fwalk_sglue+0xc>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffe:	89ab      	ldrh	r3, [r5, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d907      	bls.n	8008014 <_fwalk_sglue+0x38>
 8008004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008008:	3301      	adds	r3, #1
 800800a:	d003      	beq.n	8008014 <_fwalk_sglue+0x38>
 800800c:	4629      	mov	r1, r5
 800800e:	4638      	mov	r0, r7
 8008010:	47c0      	blx	r8
 8008012:	4306      	orrs	r6, r0
 8008014:	3568      	adds	r5, #104	; 0x68
 8008016:	e7e9      	b.n	8007fec <_fwalk_sglue+0x10>

08008018 <__sread>:
 8008018:	b510      	push	{r4, lr}
 800801a:	460c      	mov	r4, r1
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	f000 f868 	bl	80080f4 <_read_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	bfab      	itete	ge
 8008028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800802a:	89a3      	ldrhlt	r3, [r4, #12]
 800802c:	181b      	addge	r3, r3, r0
 800802e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008032:	bfac      	ite	ge
 8008034:	6563      	strge	r3, [r4, #84]	; 0x54
 8008036:	81a3      	strhlt	r3, [r4, #12]
 8008038:	bd10      	pop	{r4, pc}

0800803a <__swrite>:
 800803a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	461f      	mov	r7, r3
 8008040:	898b      	ldrh	r3, [r1, #12]
 8008042:	4605      	mov	r5, r0
 8008044:	05db      	lsls	r3, r3, #23
 8008046:	460c      	mov	r4, r1
 8008048:	4616      	mov	r6, r2
 800804a:	d505      	bpl.n	8008058 <__swrite+0x1e>
 800804c:	2302      	movs	r3, #2
 800804e:	2200      	movs	r2, #0
 8008050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008054:	f000 f83c 	bl	80080d0 <_lseek_r>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	4632      	mov	r2, r6
 800805c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	4628      	mov	r0, r5
 8008064:	463b      	mov	r3, r7
 8008066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800806a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	f000 b853 	b.w	8008118 <_write_r>

08008072 <__sseek>:
 8008072:	b510      	push	{r4, lr}
 8008074:	460c      	mov	r4, r1
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	f000 f829 	bl	80080d0 <_lseek_r>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	bf15      	itete	ne
 8008084:	6560      	strne	r0, [r4, #84]	; 0x54
 8008086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800808a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800808e:	81a3      	strheq	r3, [r4, #12]
 8008090:	bf18      	it	ne
 8008092:	81a3      	strhne	r3, [r4, #12]
 8008094:	bd10      	pop	{r4, pc}

08008096 <__sclose>:
 8008096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809a:	f000 b809 	b.w	80080b0 <_close_r>

0800809e <memset>:
 800809e:	4603      	mov	r3, r0
 80080a0:	4402      	add	r2, r0
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d100      	bne.n	80080a8 <memset+0xa>
 80080a6:	4770      	bx	lr
 80080a8:	f803 1b01 	strb.w	r1, [r3], #1
 80080ac:	e7f9      	b.n	80080a2 <memset+0x4>
	...

080080b0 <_close_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	2300      	movs	r3, #0
 80080b4:	4d05      	ldr	r5, [pc, #20]	; (80080cc <_close_r+0x1c>)
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	602b      	str	r3, [r5, #0]
 80080bc:	f7fa face 	bl	800265c <_close>
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d102      	bne.n	80080ca <_close_r+0x1a>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	b103      	cbz	r3, 80080ca <_close_r+0x1a>
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	200027b4 	.word	0x200027b4

080080d0 <_lseek_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4604      	mov	r4, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	4611      	mov	r1, r2
 80080d8:	2200      	movs	r2, #0
 80080da:	4d05      	ldr	r5, [pc, #20]	; (80080f0 <_lseek_r+0x20>)
 80080dc:	602a      	str	r2, [r5, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	f7fa fac6 	bl	8002670 <_lseek>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_lseek_r+0x1e>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_lseek_r+0x1e>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	200027b4 	.word	0x200027b4

080080f4 <_read_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4604      	mov	r4, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	2200      	movs	r2, #0
 80080fe:	4d05      	ldr	r5, [pc, #20]	; (8008114 <_read_r+0x20>)
 8008100:	602a      	str	r2, [r5, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	f7fa fa90 	bl	8002628 <_read>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d102      	bne.n	8008112 <_read_r+0x1e>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	b103      	cbz	r3, 8008112 <_read_r+0x1e>
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	200027b4 	.word	0x200027b4

08008118 <_write_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	2200      	movs	r2, #0
 8008122:	4d05      	ldr	r5, [pc, #20]	; (8008138 <_write_r+0x20>)
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7fa fa8b 	bl	8002642 <_write>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_write_r+0x1e>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_write_r+0x1e>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	200027b4 	.word	0x200027b4

0800813c <__errno>:
 800813c:	4b01      	ldr	r3, [pc, #4]	; (8008144 <__errno+0x8>)
 800813e:	6818      	ldr	r0, [r3, #0]
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20000074 	.word	0x20000074

08008148 <__libc_init_array>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	2600      	movs	r6, #0
 800814c:	4d0c      	ldr	r5, [pc, #48]	; (8008180 <__libc_init_array+0x38>)
 800814e:	4c0d      	ldr	r4, [pc, #52]	; (8008184 <__libc_init_array+0x3c>)
 8008150:	1b64      	subs	r4, r4, r5
 8008152:	10a4      	asrs	r4, r4, #2
 8008154:	42a6      	cmp	r6, r4
 8008156:	d109      	bne.n	800816c <__libc_init_array+0x24>
 8008158:	f000 fe62 	bl	8008e20 <_init>
 800815c:	2600      	movs	r6, #0
 800815e:	4d0a      	ldr	r5, [pc, #40]	; (8008188 <__libc_init_array+0x40>)
 8008160:	4c0a      	ldr	r4, [pc, #40]	; (800818c <__libc_init_array+0x44>)
 8008162:	1b64      	subs	r4, r4, r5
 8008164:	10a4      	asrs	r4, r4, #2
 8008166:	42a6      	cmp	r6, r4
 8008168:	d105      	bne.n	8008176 <__libc_init_array+0x2e>
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008170:	4798      	blx	r3
 8008172:	3601      	adds	r6, #1
 8008174:	e7ee      	b.n	8008154 <__libc_init_array+0xc>
 8008176:	f855 3b04 	ldr.w	r3, [r5], #4
 800817a:	4798      	blx	r3
 800817c:	3601      	adds	r6, #1
 800817e:	e7f2      	b.n	8008166 <__libc_init_array+0x1e>
 8008180:	08009e6c 	.word	0x08009e6c
 8008184:	08009e6c 	.word	0x08009e6c
 8008188:	08009e6c 	.word	0x08009e6c
 800818c:	08009e70 	.word	0x08009e70

08008190 <__retarget_lock_init_recursive>:
 8008190:	4770      	bx	lr

08008192 <__retarget_lock_acquire_recursive>:
 8008192:	4770      	bx	lr

08008194 <__retarget_lock_release_recursive>:
 8008194:	4770      	bx	lr

08008196 <strcpy>:
 8008196:	4603      	mov	r3, r0
 8008198:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819c:	f803 2b01 	strb.w	r2, [r3], #1
 80081a0:	2a00      	cmp	r2, #0
 80081a2:	d1f9      	bne.n	8008198 <strcpy+0x2>
 80081a4:	4770      	bx	lr

080081a6 <memcpy>:
 80081a6:	440a      	add	r2, r1
 80081a8:	4291      	cmp	r1, r2
 80081aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80081ae:	d100      	bne.n	80081b2 <memcpy+0xc>
 80081b0:	4770      	bx	lr
 80081b2:	b510      	push	{r4, lr}
 80081b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081b8:	4291      	cmp	r1, r2
 80081ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081be:	d1f9      	bne.n	80081b4 <memcpy+0xe>
 80081c0:	bd10      	pop	{r4, pc}
	...

080081c4 <__assert_func>:
 80081c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081c6:	4614      	mov	r4, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <__assert_func+0x2c>)
 80081cc:	4605      	mov	r5, r0
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68d8      	ldr	r0, [r3, #12]
 80081d2:	b14c      	cbz	r4, 80081e8 <__assert_func+0x24>
 80081d4:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <__assert_func+0x30>)
 80081d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081da:	9100      	str	r1, [sp, #0]
 80081dc:	462b      	mov	r3, r5
 80081de:	4906      	ldr	r1, [pc, #24]	; (80081f8 <__assert_func+0x34>)
 80081e0:	f000 f9b4 	bl	800854c <fiprintf>
 80081e4:	f000 f9d4 	bl	8008590 <abort>
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <__assert_func+0x38>)
 80081ea:	461c      	mov	r4, r3
 80081ec:	e7f3      	b.n	80081d6 <__assert_func+0x12>
 80081ee:	bf00      	nop
 80081f0:	20000074 	.word	0x20000074
 80081f4:	08009dfc 	.word	0x08009dfc
 80081f8:	08009e09 	.word	0x08009e09
 80081fc:	08009e37 	.word	0x08009e37

08008200 <_free_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4605      	mov	r5, r0
 8008204:	2900      	cmp	r1, #0
 8008206:	d040      	beq.n	800828a <_free_r+0x8a>
 8008208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800820c:	1f0c      	subs	r4, r1, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	bfb8      	it	lt
 8008212:	18e4      	addlt	r4, r4, r3
 8008214:	f000 f8e4 	bl	80083e0 <__malloc_lock>
 8008218:	4a1c      	ldr	r2, [pc, #112]	; (800828c <_free_r+0x8c>)
 800821a:	6813      	ldr	r3, [r2, #0]
 800821c:	b933      	cbnz	r3, 800822c <_free_r+0x2c>
 800821e:	6063      	str	r3, [r4, #4]
 8008220:	6014      	str	r4, [r2, #0]
 8008222:	4628      	mov	r0, r5
 8008224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008228:	f000 b8e0 	b.w	80083ec <__malloc_unlock>
 800822c:	42a3      	cmp	r3, r4
 800822e:	d908      	bls.n	8008242 <_free_r+0x42>
 8008230:	6820      	ldr	r0, [r4, #0]
 8008232:	1821      	adds	r1, r4, r0
 8008234:	428b      	cmp	r3, r1
 8008236:	bf01      	itttt	eq
 8008238:	6819      	ldreq	r1, [r3, #0]
 800823a:	685b      	ldreq	r3, [r3, #4]
 800823c:	1809      	addeq	r1, r1, r0
 800823e:	6021      	streq	r1, [r4, #0]
 8008240:	e7ed      	b.n	800821e <_free_r+0x1e>
 8008242:	461a      	mov	r2, r3
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	b10b      	cbz	r3, 800824c <_free_r+0x4c>
 8008248:	42a3      	cmp	r3, r4
 800824a:	d9fa      	bls.n	8008242 <_free_r+0x42>
 800824c:	6811      	ldr	r1, [r2, #0]
 800824e:	1850      	adds	r0, r2, r1
 8008250:	42a0      	cmp	r0, r4
 8008252:	d10b      	bne.n	800826c <_free_r+0x6c>
 8008254:	6820      	ldr	r0, [r4, #0]
 8008256:	4401      	add	r1, r0
 8008258:	1850      	adds	r0, r2, r1
 800825a:	4283      	cmp	r3, r0
 800825c:	6011      	str	r1, [r2, #0]
 800825e:	d1e0      	bne.n	8008222 <_free_r+0x22>
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	4408      	add	r0, r1
 8008266:	6010      	str	r0, [r2, #0]
 8008268:	6053      	str	r3, [r2, #4]
 800826a:	e7da      	b.n	8008222 <_free_r+0x22>
 800826c:	d902      	bls.n	8008274 <_free_r+0x74>
 800826e:	230c      	movs	r3, #12
 8008270:	602b      	str	r3, [r5, #0]
 8008272:	e7d6      	b.n	8008222 <_free_r+0x22>
 8008274:	6820      	ldr	r0, [r4, #0]
 8008276:	1821      	adds	r1, r4, r0
 8008278:	428b      	cmp	r3, r1
 800827a:	bf01      	itttt	eq
 800827c:	6819      	ldreq	r1, [r3, #0]
 800827e:	685b      	ldreq	r3, [r3, #4]
 8008280:	1809      	addeq	r1, r1, r0
 8008282:	6021      	streq	r1, [r4, #0]
 8008284:	6063      	str	r3, [r4, #4]
 8008286:	6054      	str	r4, [r2, #4]
 8008288:	e7cb      	b.n	8008222 <_free_r+0x22>
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	200027bc 	.word	0x200027bc

08008290 <malloc>:
 8008290:	4b02      	ldr	r3, [pc, #8]	; (800829c <malloc+0xc>)
 8008292:	4601      	mov	r1, r0
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	f000 b823 	b.w	80082e0 <_malloc_r>
 800829a:	bf00      	nop
 800829c:	20000074 	.word	0x20000074

080082a0 <sbrk_aligned>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	4e0e      	ldr	r6, [pc, #56]	; (80082dc <sbrk_aligned+0x3c>)
 80082a4:	460c      	mov	r4, r1
 80082a6:	6831      	ldr	r1, [r6, #0]
 80082a8:	4605      	mov	r5, r0
 80082aa:	b911      	cbnz	r1, 80082b2 <sbrk_aligned+0x12>
 80082ac:	f000 f960 	bl	8008570 <_sbrk_r>
 80082b0:	6030      	str	r0, [r6, #0]
 80082b2:	4621      	mov	r1, r4
 80082b4:	4628      	mov	r0, r5
 80082b6:	f000 f95b 	bl	8008570 <_sbrk_r>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d00a      	beq.n	80082d4 <sbrk_aligned+0x34>
 80082be:	1cc4      	adds	r4, r0, #3
 80082c0:	f024 0403 	bic.w	r4, r4, #3
 80082c4:	42a0      	cmp	r0, r4
 80082c6:	d007      	beq.n	80082d8 <sbrk_aligned+0x38>
 80082c8:	1a21      	subs	r1, r4, r0
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 f950 	bl	8008570 <_sbrk_r>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d101      	bne.n	80082d8 <sbrk_aligned+0x38>
 80082d4:	f04f 34ff 	mov.w	r4, #4294967295
 80082d8:	4620      	mov	r0, r4
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	200027c0 	.word	0x200027c0

080082e0 <_malloc_r>:
 80082e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e4:	1ccd      	adds	r5, r1, #3
 80082e6:	f025 0503 	bic.w	r5, r5, #3
 80082ea:	3508      	adds	r5, #8
 80082ec:	2d0c      	cmp	r5, #12
 80082ee:	bf38      	it	cc
 80082f0:	250c      	movcc	r5, #12
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	4607      	mov	r7, r0
 80082f6:	db01      	blt.n	80082fc <_malloc_r+0x1c>
 80082f8:	42a9      	cmp	r1, r5
 80082fa:	d905      	bls.n	8008308 <_malloc_r+0x28>
 80082fc:	230c      	movs	r3, #12
 80082fe:	2600      	movs	r6, #0
 8008300:	603b      	str	r3, [r7, #0]
 8008302:	4630      	mov	r0, r6
 8008304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008308:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083dc <_malloc_r+0xfc>
 800830c:	f000 f868 	bl	80083e0 <__malloc_lock>
 8008310:	f8d8 3000 	ldr.w	r3, [r8]
 8008314:	461c      	mov	r4, r3
 8008316:	bb5c      	cbnz	r4, 8008370 <_malloc_r+0x90>
 8008318:	4629      	mov	r1, r5
 800831a:	4638      	mov	r0, r7
 800831c:	f7ff ffc0 	bl	80082a0 <sbrk_aligned>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	4604      	mov	r4, r0
 8008324:	d155      	bne.n	80083d2 <_malloc_r+0xf2>
 8008326:	f8d8 4000 	ldr.w	r4, [r8]
 800832a:	4626      	mov	r6, r4
 800832c:	2e00      	cmp	r6, #0
 800832e:	d145      	bne.n	80083bc <_malloc_r+0xdc>
 8008330:	2c00      	cmp	r4, #0
 8008332:	d048      	beq.n	80083c6 <_malloc_r+0xe6>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	4631      	mov	r1, r6
 8008338:	4638      	mov	r0, r7
 800833a:	eb04 0903 	add.w	r9, r4, r3
 800833e:	f000 f917 	bl	8008570 <_sbrk_r>
 8008342:	4581      	cmp	r9, r0
 8008344:	d13f      	bne.n	80083c6 <_malloc_r+0xe6>
 8008346:	6821      	ldr	r1, [r4, #0]
 8008348:	4638      	mov	r0, r7
 800834a:	1a6d      	subs	r5, r5, r1
 800834c:	4629      	mov	r1, r5
 800834e:	f7ff ffa7 	bl	80082a0 <sbrk_aligned>
 8008352:	3001      	adds	r0, #1
 8008354:	d037      	beq.n	80083c6 <_malloc_r+0xe6>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	442b      	add	r3, r5
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	f8d8 3000 	ldr.w	r3, [r8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d038      	beq.n	80083d6 <_malloc_r+0xf6>
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	42a2      	cmp	r2, r4
 8008368:	d12b      	bne.n	80083c2 <_malloc_r+0xe2>
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
 800836e:	e00f      	b.n	8008390 <_malloc_r+0xb0>
 8008370:	6822      	ldr	r2, [r4, #0]
 8008372:	1b52      	subs	r2, r2, r5
 8008374:	d41f      	bmi.n	80083b6 <_malloc_r+0xd6>
 8008376:	2a0b      	cmp	r2, #11
 8008378:	d917      	bls.n	80083aa <_malloc_r+0xca>
 800837a:	1961      	adds	r1, r4, r5
 800837c:	42a3      	cmp	r3, r4
 800837e:	6025      	str	r5, [r4, #0]
 8008380:	bf18      	it	ne
 8008382:	6059      	strne	r1, [r3, #4]
 8008384:	6863      	ldr	r3, [r4, #4]
 8008386:	bf08      	it	eq
 8008388:	f8c8 1000 	streq.w	r1, [r8]
 800838c:	5162      	str	r2, [r4, r5]
 800838e:	604b      	str	r3, [r1, #4]
 8008390:	4638      	mov	r0, r7
 8008392:	f104 060b 	add.w	r6, r4, #11
 8008396:	f000 f829 	bl	80083ec <__malloc_unlock>
 800839a:	f026 0607 	bic.w	r6, r6, #7
 800839e:	1d23      	adds	r3, r4, #4
 80083a0:	1af2      	subs	r2, r6, r3
 80083a2:	d0ae      	beq.n	8008302 <_malloc_r+0x22>
 80083a4:	1b9b      	subs	r3, r3, r6
 80083a6:	50a3      	str	r3, [r4, r2]
 80083a8:	e7ab      	b.n	8008302 <_malloc_r+0x22>
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	6862      	ldr	r2, [r4, #4]
 80083ae:	d1dd      	bne.n	800836c <_malloc_r+0x8c>
 80083b0:	f8c8 2000 	str.w	r2, [r8]
 80083b4:	e7ec      	b.n	8008390 <_malloc_r+0xb0>
 80083b6:	4623      	mov	r3, r4
 80083b8:	6864      	ldr	r4, [r4, #4]
 80083ba:	e7ac      	b.n	8008316 <_malloc_r+0x36>
 80083bc:	4634      	mov	r4, r6
 80083be:	6876      	ldr	r6, [r6, #4]
 80083c0:	e7b4      	b.n	800832c <_malloc_r+0x4c>
 80083c2:	4613      	mov	r3, r2
 80083c4:	e7cc      	b.n	8008360 <_malloc_r+0x80>
 80083c6:	230c      	movs	r3, #12
 80083c8:	4638      	mov	r0, r7
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	f000 f80e 	bl	80083ec <__malloc_unlock>
 80083d0:	e797      	b.n	8008302 <_malloc_r+0x22>
 80083d2:	6025      	str	r5, [r4, #0]
 80083d4:	e7dc      	b.n	8008390 <_malloc_r+0xb0>
 80083d6:	605b      	str	r3, [r3, #4]
 80083d8:	deff      	udf	#255	; 0xff
 80083da:	bf00      	nop
 80083dc:	200027bc 	.word	0x200027bc

080083e0 <__malloc_lock>:
 80083e0:	4801      	ldr	r0, [pc, #4]	; (80083e8 <__malloc_lock+0x8>)
 80083e2:	f7ff bed6 	b.w	8008192 <__retarget_lock_acquire_recursive>
 80083e6:	bf00      	nop
 80083e8:	200027b8 	.word	0x200027b8

080083ec <__malloc_unlock>:
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <__malloc_unlock+0x8>)
 80083ee:	f7ff bed1 	b.w	8008194 <__retarget_lock_release_recursive>
 80083f2:	bf00      	nop
 80083f4:	200027b8 	.word	0x200027b8

080083f8 <__sflush_r>:
 80083f8:	898a      	ldrh	r2, [r1, #12]
 80083fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fc:	4605      	mov	r5, r0
 80083fe:	0710      	lsls	r0, r2, #28
 8008400:	460c      	mov	r4, r1
 8008402:	d457      	bmi.n	80084b4 <__sflush_r+0xbc>
 8008404:	684b      	ldr	r3, [r1, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	dc04      	bgt.n	8008414 <__sflush_r+0x1c>
 800840a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	dc01      	bgt.n	8008414 <__sflush_r+0x1c>
 8008410:	2000      	movs	r0, #0
 8008412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008416:	2e00      	cmp	r6, #0
 8008418:	d0fa      	beq.n	8008410 <__sflush_r+0x18>
 800841a:	2300      	movs	r3, #0
 800841c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008420:	682f      	ldr	r7, [r5, #0]
 8008422:	6a21      	ldr	r1, [r4, #32]
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	d032      	beq.n	800848e <__sflush_r+0x96>
 8008428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	075a      	lsls	r2, r3, #29
 800842e:	d505      	bpl.n	800843c <__sflush_r+0x44>
 8008430:	6863      	ldr	r3, [r4, #4]
 8008432:	1ac0      	subs	r0, r0, r3
 8008434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008436:	b10b      	cbz	r3, 800843c <__sflush_r+0x44>
 8008438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800843a:	1ac0      	subs	r0, r0, r3
 800843c:	2300      	movs	r3, #0
 800843e:	4602      	mov	r2, r0
 8008440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008442:	4628      	mov	r0, r5
 8008444:	6a21      	ldr	r1, [r4, #32]
 8008446:	47b0      	blx	r6
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	d106      	bne.n	800845c <__sflush_r+0x64>
 800844e:	6829      	ldr	r1, [r5, #0]
 8008450:	291d      	cmp	r1, #29
 8008452:	d82b      	bhi.n	80084ac <__sflush_r+0xb4>
 8008454:	4a28      	ldr	r2, [pc, #160]	; (80084f8 <__sflush_r+0x100>)
 8008456:	410a      	asrs	r2, r1
 8008458:	07d6      	lsls	r6, r2, #31
 800845a:	d427      	bmi.n	80084ac <__sflush_r+0xb4>
 800845c:	2200      	movs	r2, #0
 800845e:	6062      	str	r2, [r4, #4]
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	04d9      	lsls	r1, r3, #19
 8008464:	6022      	str	r2, [r4, #0]
 8008466:	d504      	bpl.n	8008472 <__sflush_r+0x7a>
 8008468:	1c42      	adds	r2, r0, #1
 800846a:	d101      	bne.n	8008470 <__sflush_r+0x78>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	b903      	cbnz	r3, 8008472 <__sflush_r+0x7a>
 8008470:	6560      	str	r0, [r4, #84]	; 0x54
 8008472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008474:	602f      	str	r7, [r5, #0]
 8008476:	2900      	cmp	r1, #0
 8008478:	d0ca      	beq.n	8008410 <__sflush_r+0x18>
 800847a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800847e:	4299      	cmp	r1, r3
 8008480:	d002      	beq.n	8008488 <__sflush_r+0x90>
 8008482:	4628      	mov	r0, r5
 8008484:	f7ff febc 	bl	8008200 <_free_r>
 8008488:	2000      	movs	r0, #0
 800848a:	6360      	str	r0, [r4, #52]	; 0x34
 800848c:	e7c1      	b.n	8008412 <__sflush_r+0x1a>
 800848e:	2301      	movs	r3, #1
 8008490:	4628      	mov	r0, r5
 8008492:	47b0      	blx	r6
 8008494:	1c41      	adds	r1, r0, #1
 8008496:	d1c8      	bne.n	800842a <__sflush_r+0x32>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0c5      	beq.n	800842a <__sflush_r+0x32>
 800849e:	2b1d      	cmp	r3, #29
 80084a0:	d001      	beq.n	80084a6 <__sflush_r+0xae>
 80084a2:	2b16      	cmp	r3, #22
 80084a4:	d101      	bne.n	80084aa <__sflush_r+0xb2>
 80084a6:	602f      	str	r7, [r5, #0]
 80084a8:	e7b2      	b.n	8008410 <__sflush_r+0x18>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b0:	81a3      	strh	r3, [r4, #12]
 80084b2:	e7ae      	b.n	8008412 <__sflush_r+0x1a>
 80084b4:	690f      	ldr	r7, [r1, #16]
 80084b6:	2f00      	cmp	r7, #0
 80084b8:	d0aa      	beq.n	8008410 <__sflush_r+0x18>
 80084ba:	0793      	lsls	r3, r2, #30
 80084bc:	bf18      	it	ne
 80084be:	2300      	movne	r3, #0
 80084c0:	680e      	ldr	r6, [r1, #0]
 80084c2:	bf08      	it	eq
 80084c4:	694b      	ldreq	r3, [r1, #20]
 80084c6:	1bf6      	subs	r6, r6, r7
 80084c8:	600f      	str	r7, [r1, #0]
 80084ca:	608b      	str	r3, [r1, #8]
 80084cc:	2e00      	cmp	r6, #0
 80084ce:	dd9f      	ble.n	8008410 <__sflush_r+0x18>
 80084d0:	4633      	mov	r3, r6
 80084d2:	463a      	mov	r2, r7
 80084d4:	4628      	mov	r0, r5
 80084d6:	6a21      	ldr	r1, [r4, #32]
 80084d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80084dc:	47e0      	blx	ip
 80084de:	2800      	cmp	r0, #0
 80084e0:	dc06      	bgt.n	80084f0 <__sflush_r+0xf8>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	e790      	b.n	8008412 <__sflush_r+0x1a>
 80084f0:	4407      	add	r7, r0
 80084f2:	1a36      	subs	r6, r6, r0
 80084f4:	e7ea      	b.n	80084cc <__sflush_r+0xd4>
 80084f6:	bf00      	nop
 80084f8:	dfbffffe 	.word	0xdfbffffe

080084fc <_fflush_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	4605      	mov	r5, r0
 8008502:	460c      	mov	r4, r1
 8008504:	b913      	cbnz	r3, 800850c <_fflush_r+0x10>
 8008506:	2500      	movs	r5, #0
 8008508:	4628      	mov	r0, r5
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	b118      	cbz	r0, 8008516 <_fflush_r+0x1a>
 800850e:	6a03      	ldr	r3, [r0, #32]
 8008510:	b90b      	cbnz	r3, 8008516 <_fflush_r+0x1a>
 8008512:	f7ff fd4b 	bl	8007fac <__sinit>
 8008516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0f3      	beq.n	8008506 <_fflush_r+0xa>
 800851e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008520:	07d0      	lsls	r0, r2, #31
 8008522:	d404      	bmi.n	800852e <_fflush_r+0x32>
 8008524:	0599      	lsls	r1, r3, #22
 8008526:	d402      	bmi.n	800852e <_fflush_r+0x32>
 8008528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800852a:	f7ff fe32 	bl	8008192 <__retarget_lock_acquire_recursive>
 800852e:	4628      	mov	r0, r5
 8008530:	4621      	mov	r1, r4
 8008532:	f7ff ff61 	bl	80083f8 <__sflush_r>
 8008536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008538:	4605      	mov	r5, r0
 800853a:	07da      	lsls	r2, r3, #31
 800853c:	d4e4      	bmi.n	8008508 <_fflush_r+0xc>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	059b      	lsls	r3, r3, #22
 8008542:	d4e1      	bmi.n	8008508 <_fflush_r+0xc>
 8008544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008546:	f7ff fe25 	bl	8008194 <__retarget_lock_release_recursive>
 800854a:	e7dd      	b.n	8008508 <_fflush_r+0xc>

0800854c <fiprintf>:
 800854c:	b40e      	push	{r1, r2, r3}
 800854e:	b503      	push	{r0, r1, lr}
 8008550:	4601      	mov	r1, r0
 8008552:	ab03      	add	r3, sp, #12
 8008554:	4805      	ldr	r0, [pc, #20]	; (800856c <fiprintf+0x20>)
 8008556:	f853 2b04 	ldr.w	r2, [r3], #4
 800855a:	6800      	ldr	r0, [r0, #0]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	f000 f845 	bl	80085ec <_vfiprintf_r>
 8008562:	b002      	add	sp, #8
 8008564:	f85d eb04 	ldr.w	lr, [sp], #4
 8008568:	b003      	add	sp, #12
 800856a:	4770      	bx	lr
 800856c:	20000074 	.word	0x20000074

08008570 <_sbrk_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	2300      	movs	r3, #0
 8008574:	4d05      	ldr	r5, [pc, #20]	; (800858c <_sbrk_r+0x1c>)
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	602b      	str	r3, [r5, #0]
 800857c:	f7fa f87a 	bl	8002674 <_sbrk>
 8008580:	1c43      	adds	r3, r0, #1
 8008582:	d102      	bne.n	800858a <_sbrk_r+0x1a>
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	b103      	cbz	r3, 800858a <_sbrk_r+0x1a>
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	200027b4 	.word	0x200027b4

08008590 <abort>:
 8008590:	2006      	movs	r0, #6
 8008592:	b508      	push	{r3, lr}
 8008594:	f000 fb96 	bl	8008cc4 <raise>
 8008598:	2001      	movs	r0, #1
 800859a:	f7fa f83f 	bl	800261c <_exit>

0800859e <__sfputc_r>:
 800859e:	6893      	ldr	r3, [r2, #8]
 80085a0:	b410      	push	{r4}
 80085a2:	3b01      	subs	r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	6093      	str	r3, [r2, #8]
 80085a8:	da07      	bge.n	80085ba <__sfputc_r+0x1c>
 80085aa:	6994      	ldr	r4, [r2, #24]
 80085ac:	42a3      	cmp	r3, r4
 80085ae:	db01      	blt.n	80085b4 <__sfputc_r+0x16>
 80085b0:	290a      	cmp	r1, #10
 80085b2:	d102      	bne.n	80085ba <__sfputc_r+0x1c>
 80085b4:	bc10      	pop	{r4}
 80085b6:	f000 bac7 	b.w	8008b48 <__swbuf_r>
 80085ba:	6813      	ldr	r3, [r2, #0]
 80085bc:	1c58      	adds	r0, r3, #1
 80085be:	6010      	str	r0, [r2, #0]
 80085c0:	7019      	strb	r1, [r3, #0]
 80085c2:	4608      	mov	r0, r1
 80085c4:	bc10      	pop	{r4}
 80085c6:	4770      	bx	lr

080085c8 <__sfputs_r>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	4606      	mov	r6, r0
 80085cc:	460f      	mov	r7, r1
 80085ce:	4614      	mov	r4, r2
 80085d0:	18d5      	adds	r5, r2, r3
 80085d2:	42ac      	cmp	r4, r5
 80085d4:	d101      	bne.n	80085da <__sfputs_r+0x12>
 80085d6:	2000      	movs	r0, #0
 80085d8:	e007      	b.n	80085ea <__sfputs_r+0x22>
 80085da:	463a      	mov	r2, r7
 80085dc:	4630      	mov	r0, r6
 80085de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e2:	f7ff ffdc 	bl	800859e <__sfputc_r>
 80085e6:	1c43      	adds	r3, r0, #1
 80085e8:	d1f3      	bne.n	80085d2 <__sfputs_r+0xa>
 80085ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085ec <_vfiprintf_r>:
 80085ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f0:	460d      	mov	r5, r1
 80085f2:	4614      	mov	r4, r2
 80085f4:	4698      	mov	r8, r3
 80085f6:	4606      	mov	r6, r0
 80085f8:	b09d      	sub	sp, #116	; 0x74
 80085fa:	b118      	cbz	r0, 8008604 <_vfiprintf_r+0x18>
 80085fc:	6a03      	ldr	r3, [r0, #32]
 80085fe:	b90b      	cbnz	r3, 8008604 <_vfiprintf_r+0x18>
 8008600:	f7ff fcd4 	bl	8007fac <__sinit>
 8008604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008606:	07d9      	lsls	r1, r3, #31
 8008608:	d405      	bmi.n	8008616 <_vfiprintf_r+0x2a>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	059a      	lsls	r2, r3, #22
 800860e:	d402      	bmi.n	8008616 <_vfiprintf_r+0x2a>
 8008610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008612:	f7ff fdbe 	bl	8008192 <__retarget_lock_acquire_recursive>
 8008616:	89ab      	ldrh	r3, [r5, #12]
 8008618:	071b      	lsls	r3, r3, #28
 800861a:	d501      	bpl.n	8008620 <_vfiprintf_r+0x34>
 800861c:	692b      	ldr	r3, [r5, #16]
 800861e:	b99b      	cbnz	r3, 8008648 <_vfiprintf_r+0x5c>
 8008620:	4629      	mov	r1, r5
 8008622:	4630      	mov	r0, r6
 8008624:	f000 face 	bl	8008bc4 <__swsetup_r>
 8008628:	b170      	cbz	r0, 8008648 <_vfiprintf_r+0x5c>
 800862a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800862c:	07dc      	lsls	r4, r3, #31
 800862e:	d504      	bpl.n	800863a <_vfiprintf_r+0x4e>
 8008630:	f04f 30ff 	mov.w	r0, #4294967295
 8008634:	b01d      	add	sp, #116	; 0x74
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	0598      	lsls	r0, r3, #22
 800863e:	d4f7      	bmi.n	8008630 <_vfiprintf_r+0x44>
 8008640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008642:	f7ff fda7 	bl	8008194 <__retarget_lock_release_recursive>
 8008646:	e7f3      	b.n	8008630 <_vfiprintf_r+0x44>
 8008648:	2300      	movs	r3, #0
 800864a:	9309      	str	r3, [sp, #36]	; 0x24
 800864c:	2320      	movs	r3, #32
 800864e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008652:	2330      	movs	r3, #48	; 0x30
 8008654:	f04f 0901 	mov.w	r9, #1
 8008658:	f8cd 800c 	str.w	r8, [sp, #12]
 800865c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800880c <_vfiprintf_r+0x220>
 8008660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008664:	4623      	mov	r3, r4
 8008666:	469a      	mov	sl, r3
 8008668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800866c:	b10a      	cbz	r2, 8008672 <_vfiprintf_r+0x86>
 800866e:	2a25      	cmp	r2, #37	; 0x25
 8008670:	d1f9      	bne.n	8008666 <_vfiprintf_r+0x7a>
 8008672:	ebba 0b04 	subs.w	fp, sl, r4
 8008676:	d00b      	beq.n	8008690 <_vfiprintf_r+0xa4>
 8008678:	465b      	mov	r3, fp
 800867a:	4622      	mov	r2, r4
 800867c:	4629      	mov	r1, r5
 800867e:	4630      	mov	r0, r6
 8008680:	f7ff ffa2 	bl	80085c8 <__sfputs_r>
 8008684:	3001      	adds	r0, #1
 8008686:	f000 80a9 	beq.w	80087dc <_vfiprintf_r+0x1f0>
 800868a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800868c:	445a      	add	r2, fp
 800868e:	9209      	str	r2, [sp, #36]	; 0x24
 8008690:	f89a 3000 	ldrb.w	r3, [sl]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 80a1 	beq.w	80087dc <_vfiprintf_r+0x1f0>
 800869a:	2300      	movs	r3, #0
 800869c:	f04f 32ff 	mov.w	r2, #4294967295
 80086a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086a4:	f10a 0a01 	add.w	sl, sl, #1
 80086a8:	9304      	str	r3, [sp, #16]
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086b0:	931a      	str	r3, [sp, #104]	; 0x68
 80086b2:	4654      	mov	r4, sl
 80086b4:	2205      	movs	r2, #5
 80086b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ba:	4854      	ldr	r0, [pc, #336]	; (800880c <_vfiprintf_r+0x220>)
 80086bc:	f000 fb1e 	bl	8008cfc <memchr>
 80086c0:	9a04      	ldr	r2, [sp, #16]
 80086c2:	b9d8      	cbnz	r0, 80086fc <_vfiprintf_r+0x110>
 80086c4:	06d1      	lsls	r1, r2, #27
 80086c6:	bf44      	itt	mi
 80086c8:	2320      	movmi	r3, #32
 80086ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ce:	0713      	lsls	r3, r2, #28
 80086d0:	bf44      	itt	mi
 80086d2:	232b      	movmi	r3, #43	; 0x2b
 80086d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d8:	f89a 3000 	ldrb.w	r3, [sl]
 80086dc:	2b2a      	cmp	r3, #42	; 0x2a
 80086de:	d015      	beq.n	800870c <_vfiprintf_r+0x120>
 80086e0:	4654      	mov	r4, sl
 80086e2:	2000      	movs	r0, #0
 80086e4:	f04f 0c0a 	mov.w	ip, #10
 80086e8:	9a07      	ldr	r2, [sp, #28]
 80086ea:	4621      	mov	r1, r4
 80086ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086f0:	3b30      	subs	r3, #48	; 0x30
 80086f2:	2b09      	cmp	r3, #9
 80086f4:	d94d      	bls.n	8008792 <_vfiprintf_r+0x1a6>
 80086f6:	b1b0      	cbz	r0, 8008726 <_vfiprintf_r+0x13a>
 80086f8:	9207      	str	r2, [sp, #28]
 80086fa:	e014      	b.n	8008726 <_vfiprintf_r+0x13a>
 80086fc:	eba0 0308 	sub.w	r3, r0, r8
 8008700:	fa09 f303 	lsl.w	r3, r9, r3
 8008704:	4313      	orrs	r3, r2
 8008706:	46a2      	mov	sl, r4
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	e7d2      	b.n	80086b2 <_vfiprintf_r+0xc6>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	1d19      	adds	r1, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	9103      	str	r1, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfbb      	ittet	lt
 8008718:	425b      	neglt	r3, r3
 800871a:	f042 0202 	orrlt.w	r2, r2, #2
 800871e:	9307      	strge	r3, [sp, #28]
 8008720:	9307      	strlt	r3, [sp, #28]
 8008722:	bfb8      	it	lt
 8008724:	9204      	strlt	r2, [sp, #16]
 8008726:	7823      	ldrb	r3, [r4, #0]
 8008728:	2b2e      	cmp	r3, #46	; 0x2e
 800872a:	d10c      	bne.n	8008746 <_vfiprintf_r+0x15a>
 800872c:	7863      	ldrb	r3, [r4, #1]
 800872e:	2b2a      	cmp	r3, #42	; 0x2a
 8008730:	d134      	bne.n	800879c <_vfiprintf_r+0x1b0>
 8008732:	9b03      	ldr	r3, [sp, #12]
 8008734:	3402      	adds	r4, #2
 8008736:	1d1a      	adds	r2, r3, #4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	9203      	str	r2, [sp, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	bfb8      	it	lt
 8008740:	f04f 33ff 	movlt.w	r3, #4294967295
 8008744:	9305      	str	r3, [sp, #20]
 8008746:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008810 <_vfiprintf_r+0x224>
 800874a:	2203      	movs	r2, #3
 800874c:	4650      	mov	r0, sl
 800874e:	7821      	ldrb	r1, [r4, #0]
 8008750:	f000 fad4 	bl	8008cfc <memchr>
 8008754:	b138      	cbz	r0, 8008766 <_vfiprintf_r+0x17a>
 8008756:	2240      	movs	r2, #64	; 0x40
 8008758:	9b04      	ldr	r3, [sp, #16]
 800875a:	eba0 000a 	sub.w	r0, r0, sl
 800875e:	4082      	lsls	r2, r0
 8008760:	4313      	orrs	r3, r2
 8008762:	3401      	adds	r4, #1
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800876a:	2206      	movs	r2, #6
 800876c:	4829      	ldr	r0, [pc, #164]	; (8008814 <_vfiprintf_r+0x228>)
 800876e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008772:	f000 fac3 	bl	8008cfc <memchr>
 8008776:	2800      	cmp	r0, #0
 8008778:	d03f      	beq.n	80087fa <_vfiprintf_r+0x20e>
 800877a:	4b27      	ldr	r3, [pc, #156]	; (8008818 <_vfiprintf_r+0x22c>)
 800877c:	bb1b      	cbnz	r3, 80087c6 <_vfiprintf_r+0x1da>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	3307      	adds	r3, #7
 8008782:	f023 0307 	bic.w	r3, r3, #7
 8008786:	3308      	adds	r3, #8
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878c:	443b      	add	r3, r7
 800878e:	9309      	str	r3, [sp, #36]	; 0x24
 8008790:	e768      	b.n	8008664 <_vfiprintf_r+0x78>
 8008792:	460c      	mov	r4, r1
 8008794:	2001      	movs	r0, #1
 8008796:	fb0c 3202 	mla	r2, ip, r2, r3
 800879a:	e7a6      	b.n	80086ea <_vfiprintf_r+0xfe>
 800879c:	2300      	movs	r3, #0
 800879e:	f04f 0c0a 	mov.w	ip, #10
 80087a2:	4619      	mov	r1, r3
 80087a4:	3401      	adds	r4, #1
 80087a6:	9305      	str	r3, [sp, #20]
 80087a8:	4620      	mov	r0, r4
 80087aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087ae:	3a30      	subs	r2, #48	; 0x30
 80087b0:	2a09      	cmp	r2, #9
 80087b2:	d903      	bls.n	80087bc <_vfiprintf_r+0x1d0>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0c6      	beq.n	8008746 <_vfiprintf_r+0x15a>
 80087b8:	9105      	str	r1, [sp, #20]
 80087ba:	e7c4      	b.n	8008746 <_vfiprintf_r+0x15a>
 80087bc:	4604      	mov	r4, r0
 80087be:	2301      	movs	r3, #1
 80087c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80087c4:	e7f0      	b.n	80087a8 <_vfiprintf_r+0x1bc>
 80087c6:	ab03      	add	r3, sp, #12
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	462a      	mov	r2, r5
 80087cc:	4630      	mov	r0, r6
 80087ce:	4b13      	ldr	r3, [pc, #76]	; (800881c <_vfiprintf_r+0x230>)
 80087d0:	a904      	add	r1, sp, #16
 80087d2:	f3af 8000 	nop.w
 80087d6:	4607      	mov	r7, r0
 80087d8:	1c78      	adds	r0, r7, #1
 80087da:	d1d6      	bne.n	800878a <_vfiprintf_r+0x19e>
 80087dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087de:	07d9      	lsls	r1, r3, #31
 80087e0:	d405      	bmi.n	80087ee <_vfiprintf_r+0x202>
 80087e2:	89ab      	ldrh	r3, [r5, #12]
 80087e4:	059a      	lsls	r2, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_vfiprintf_r+0x202>
 80087e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ea:	f7ff fcd3 	bl	8008194 <__retarget_lock_release_recursive>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	065b      	lsls	r3, r3, #25
 80087f2:	f53f af1d 	bmi.w	8008630 <_vfiprintf_r+0x44>
 80087f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087f8:	e71c      	b.n	8008634 <_vfiprintf_r+0x48>
 80087fa:	ab03      	add	r3, sp, #12
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	462a      	mov	r2, r5
 8008800:	4630      	mov	r0, r6
 8008802:	4b06      	ldr	r3, [pc, #24]	; (800881c <_vfiprintf_r+0x230>)
 8008804:	a904      	add	r1, sp, #16
 8008806:	f000 f87d 	bl	8008904 <_printf_i>
 800880a:	e7e4      	b.n	80087d6 <_vfiprintf_r+0x1ea>
 800880c:	08009e38 	.word	0x08009e38
 8008810:	08009e3e 	.word	0x08009e3e
 8008814:	08009e42 	.word	0x08009e42
 8008818:	00000000 	.word	0x00000000
 800881c:	080085c9 	.word	0x080085c9

08008820 <_printf_common>:
 8008820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008824:	4616      	mov	r6, r2
 8008826:	4699      	mov	r9, r3
 8008828:	688a      	ldr	r2, [r1, #8]
 800882a:	690b      	ldr	r3, [r1, #16]
 800882c:	4607      	mov	r7, r0
 800882e:	4293      	cmp	r3, r2
 8008830:	bfb8      	it	lt
 8008832:	4613      	movlt	r3, r2
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800883a:	460c      	mov	r4, r1
 800883c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008840:	b10a      	cbz	r2, 8008846 <_printf_common+0x26>
 8008842:	3301      	adds	r3, #1
 8008844:	6033      	str	r3, [r6, #0]
 8008846:	6823      	ldr	r3, [r4, #0]
 8008848:	0699      	lsls	r1, r3, #26
 800884a:	bf42      	ittt	mi
 800884c:	6833      	ldrmi	r3, [r6, #0]
 800884e:	3302      	addmi	r3, #2
 8008850:	6033      	strmi	r3, [r6, #0]
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	f015 0506 	ands.w	r5, r5, #6
 8008858:	d106      	bne.n	8008868 <_printf_common+0x48>
 800885a:	f104 0a19 	add.w	sl, r4, #25
 800885e:	68e3      	ldr	r3, [r4, #12]
 8008860:	6832      	ldr	r2, [r6, #0]
 8008862:	1a9b      	subs	r3, r3, r2
 8008864:	42ab      	cmp	r3, r5
 8008866:	dc2b      	bgt.n	80088c0 <_printf_common+0xa0>
 8008868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800886c:	1e13      	subs	r3, r2, #0
 800886e:	6822      	ldr	r2, [r4, #0]
 8008870:	bf18      	it	ne
 8008872:	2301      	movne	r3, #1
 8008874:	0692      	lsls	r2, r2, #26
 8008876:	d430      	bmi.n	80088da <_printf_common+0xba>
 8008878:	4649      	mov	r1, r9
 800887a:	4638      	mov	r0, r7
 800887c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008880:	47c0      	blx	r8
 8008882:	3001      	adds	r0, #1
 8008884:	d023      	beq.n	80088ce <_printf_common+0xae>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	6922      	ldr	r2, [r4, #16]
 800888a:	f003 0306 	and.w	r3, r3, #6
 800888e:	2b04      	cmp	r3, #4
 8008890:	bf14      	ite	ne
 8008892:	2500      	movne	r5, #0
 8008894:	6833      	ldreq	r3, [r6, #0]
 8008896:	f04f 0600 	mov.w	r6, #0
 800889a:	bf08      	it	eq
 800889c:	68e5      	ldreq	r5, [r4, #12]
 800889e:	f104 041a 	add.w	r4, r4, #26
 80088a2:	bf08      	it	eq
 80088a4:	1aed      	subeq	r5, r5, r3
 80088a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80088aa:	bf08      	it	eq
 80088ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088b0:	4293      	cmp	r3, r2
 80088b2:	bfc4      	itt	gt
 80088b4:	1a9b      	subgt	r3, r3, r2
 80088b6:	18ed      	addgt	r5, r5, r3
 80088b8:	42b5      	cmp	r5, r6
 80088ba:	d11a      	bne.n	80088f2 <_printf_common+0xd2>
 80088bc:	2000      	movs	r0, #0
 80088be:	e008      	b.n	80088d2 <_printf_common+0xb2>
 80088c0:	2301      	movs	r3, #1
 80088c2:	4652      	mov	r2, sl
 80088c4:	4649      	mov	r1, r9
 80088c6:	4638      	mov	r0, r7
 80088c8:	47c0      	blx	r8
 80088ca:	3001      	adds	r0, #1
 80088cc:	d103      	bne.n	80088d6 <_printf_common+0xb6>
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
 80088d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d6:	3501      	adds	r5, #1
 80088d8:	e7c1      	b.n	800885e <_printf_common+0x3e>
 80088da:	2030      	movs	r0, #48	; 0x30
 80088dc:	18e1      	adds	r1, r4, r3
 80088de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088e8:	4422      	add	r2, r4
 80088ea:	3302      	adds	r3, #2
 80088ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088f0:	e7c2      	b.n	8008878 <_printf_common+0x58>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4622      	mov	r2, r4
 80088f6:	4649      	mov	r1, r9
 80088f8:	4638      	mov	r0, r7
 80088fa:	47c0      	blx	r8
 80088fc:	3001      	adds	r0, #1
 80088fe:	d0e6      	beq.n	80088ce <_printf_common+0xae>
 8008900:	3601      	adds	r6, #1
 8008902:	e7d9      	b.n	80088b8 <_printf_common+0x98>

08008904 <_printf_i>:
 8008904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008908:	7e0f      	ldrb	r7, [r1, #24]
 800890a:	4691      	mov	r9, r2
 800890c:	2f78      	cmp	r7, #120	; 0x78
 800890e:	4680      	mov	r8, r0
 8008910:	460c      	mov	r4, r1
 8008912:	469a      	mov	sl, r3
 8008914:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800891a:	d807      	bhi.n	800892c <_printf_i+0x28>
 800891c:	2f62      	cmp	r7, #98	; 0x62
 800891e:	d80a      	bhi.n	8008936 <_printf_i+0x32>
 8008920:	2f00      	cmp	r7, #0
 8008922:	f000 80d5 	beq.w	8008ad0 <_printf_i+0x1cc>
 8008926:	2f58      	cmp	r7, #88	; 0x58
 8008928:	f000 80c1 	beq.w	8008aae <_printf_i+0x1aa>
 800892c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008934:	e03a      	b.n	80089ac <_printf_i+0xa8>
 8008936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800893a:	2b15      	cmp	r3, #21
 800893c:	d8f6      	bhi.n	800892c <_printf_i+0x28>
 800893e:	a101      	add	r1, pc, #4	; (adr r1, 8008944 <_printf_i+0x40>)
 8008940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008944:	0800899d 	.word	0x0800899d
 8008948:	080089b1 	.word	0x080089b1
 800894c:	0800892d 	.word	0x0800892d
 8008950:	0800892d 	.word	0x0800892d
 8008954:	0800892d 	.word	0x0800892d
 8008958:	0800892d 	.word	0x0800892d
 800895c:	080089b1 	.word	0x080089b1
 8008960:	0800892d 	.word	0x0800892d
 8008964:	0800892d 	.word	0x0800892d
 8008968:	0800892d 	.word	0x0800892d
 800896c:	0800892d 	.word	0x0800892d
 8008970:	08008ab7 	.word	0x08008ab7
 8008974:	080089dd 	.word	0x080089dd
 8008978:	08008a71 	.word	0x08008a71
 800897c:	0800892d 	.word	0x0800892d
 8008980:	0800892d 	.word	0x0800892d
 8008984:	08008ad9 	.word	0x08008ad9
 8008988:	0800892d 	.word	0x0800892d
 800898c:	080089dd 	.word	0x080089dd
 8008990:	0800892d 	.word	0x0800892d
 8008994:	0800892d 	.word	0x0800892d
 8008998:	08008a79 	.word	0x08008a79
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	1d1a      	adds	r2, r3, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	602a      	str	r2, [r5, #0]
 80089a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089ac:	2301      	movs	r3, #1
 80089ae:	e0a0      	b.n	8008af2 <_printf_i+0x1ee>
 80089b0:	6820      	ldr	r0, [r4, #0]
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	0607      	lsls	r7, r0, #24
 80089b6:	f103 0104 	add.w	r1, r3, #4
 80089ba:	6029      	str	r1, [r5, #0]
 80089bc:	d501      	bpl.n	80089c2 <_printf_i+0xbe>
 80089be:	681e      	ldr	r6, [r3, #0]
 80089c0:	e003      	b.n	80089ca <_printf_i+0xc6>
 80089c2:	0646      	lsls	r6, r0, #25
 80089c4:	d5fb      	bpl.n	80089be <_printf_i+0xba>
 80089c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089ca:	2e00      	cmp	r6, #0
 80089cc:	da03      	bge.n	80089d6 <_printf_i+0xd2>
 80089ce:	232d      	movs	r3, #45	; 0x2d
 80089d0:	4276      	negs	r6, r6
 80089d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089d6:	230a      	movs	r3, #10
 80089d8:	4859      	ldr	r0, [pc, #356]	; (8008b40 <_printf_i+0x23c>)
 80089da:	e012      	b.n	8008a02 <_printf_i+0xfe>
 80089dc:	682b      	ldr	r3, [r5, #0]
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	1d19      	adds	r1, r3, #4
 80089e2:	6029      	str	r1, [r5, #0]
 80089e4:	0605      	lsls	r5, r0, #24
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0xe8>
 80089e8:	681e      	ldr	r6, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0xee>
 80089ec:	0641      	lsls	r1, r0, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0xe4>
 80089f0:	881e      	ldrh	r6, [r3, #0]
 80089f2:	2f6f      	cmp	r7, #111	; 0x6f
 80089f4:	bf0c      	ite	eq
 80089f6:	2308      	moveq	r3, #8
 80089f8:	230a      	movne	r3, #10
 80089fa:	4851      	ldr	r0, [pc, #324]	; (8008b40 <_printf_i+0x23c>)
 80089fc:	2100      	movs	r1, #0
 80089fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a02:	6865      	ldr	r5, [r4, #4]
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	bfa8      	it	ge
 8008a08:	6821      	ldrge	r1, [r4, #0]
 8008a0a:	60a5      	str	r5, [r4, #8]
 8008a0c:	bfa4      	itt	ge
 8008a0e:	f021 0104 	bicge.w	r1, r1, #4
 8008a12:	6021      	strge	r1, [r4, #0]
 8008a14:	b90e      	cbnz	r6, 8008a1a <_printf_i+0x116>
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	d04b      	beq.n	8008ab2 <_printf_i+0x1ae>
 8008a1a:	4615      	mov	r5, r2
 8008a1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a20:	fb03 6711 	mls	r7, r3, r1, r6
 8008a24:	5dc7      	ldrb	r7, [r0, r7]
 8008a26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a2a:	4637      	mov	r7, r6
 8008a2c:	42bb      	cmp	r3, r7
 8008a2e:	460e      	mov	r6, r1
 8008a30:	d9f4      	bls.n	8008a1c <_printf_i+0x118>
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d10b      	bne.n	8008a4e <_printf_i+0x14a>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	07de      	lsls	r6, r3, #31
 8008a3a:	d508      	bpl.n	8008a4e <_printf_i+0x14a>
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	6861      	ldr	r1, [r4, #4]
 8008a40:	4299      	cmp	r1, r3
 8008a42:	bfde      	ittt	le
 8008a44:	2330      	movle	r3, #48	; 0x30
 8008a46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a4e:	1b52      	subs	r2, r2, r5
 8008a50:	6122      	str	r2, [r4, #16]
 8008a52:	464b      	mov	r3, r9
 8008a54:	4621      	mov	r1, r4
 8008a56:	4640      	mov	r0, r8
 8008a58:	f8cd a000 	str.w	sl, [sp]
 8008a5c:	aa03      	add	r2, sp, #12
 8008a5e:	f7ff fedf 	bl	8008820 <_printf_common>
 8008a62:	3001      	adds	r0, #1
 8008a64:	d14a      	bne.n	8008afc <_printf_i+0x1f8>
 8008a66:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6a:	b004      	add	sp, #16
 8008a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	f043 0320 	orr.w	r3, r3, #32
 8008a76:	6023      	str	r3, [r4, #0]
 8008a78:	2778      	movs	r7, #120	; 0x78
 8008a7a:	4832      	ldr	r0, [pc, #200]	; (8008b44 <_printf_i+0x240>)
 8008a7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	6829      	ldr	r1, [r5, #0]
 8008a84:	061f      	lsls	r7, r3, #24
 8008a86:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a8a:	d402      	bmi.n	8008a92 <_printf_i+0x18e>
 8008a8c:	065f      	lsls	r7, r3, #25
 8008a8e:	bf48      	it	mi
 8008a90:	b2b6      	uxthmi	r6, r6
 8008a92:	07df      	lsls	r7, r3, #31
 8008a94:	bf48      	it	mi
 8008a96:	f043 0320 	orrmi.w	r3, r3, #32
 8008a9a:	6029      	str	r1, [r5, #0]
 8008a9c:	bf48      	it	mi
 8008a9e:	6023      	strmi	r3, [r4, #0]
 8008aa0:	b91e      	cbnz	r6, 8008aaa <_printf_i+0x1a6>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	f023 0320 	bic.w	r3, r3, #32
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	2310      	movs	r3, #16
 8008aac:	e7a6      	b.n	80089fc <_printf_i+0xf8>
 8008aae:	4824      	ldr	r0, [pc, #144]	; (8008b40 <_printf_i+0x23c>)
 8008ab0:	e7e4      	b.n	8008a7c <_printf_i+0x178>
 8008ab2:	4615      	mov	r5, r2
 8008ab4:	e7bd      	b.n	8008a32 <_printf_i+0x12e>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	6826      	ldr	r6, [r4, #0]
 8008aba:	1d18      	adds	r0, r3, #4
 8008abc:	6961      	ldr	r1, [r4, #20]
 8008abe:	6028      	str	r0, [r5, #0]
 8008ac0:	0635      	lsls	r5, r6, #24
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	d501      	bpl.n	8008aca <_printf_i+0x1c6>
 8008ac6:	6019      	str	r1, [r3, #0]
 8008ac8:	e002      	b.n	8008ad0 <_printf_i+0x1cc>
 8008aca:	0670      	lsls	r0, r6, #25
 8008acc:	d5fb      	bpl.n	8008ac6 <_printf_i+0x1c2>
 8008ace:	8019      	strh	r1, [r3, #0]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4615      	mov	r5, r2
 8008ad4:	6123      	str	r3, [r4, #16]
 8008ad6:	e7bc      	b.n	8008a52 <_printf_i+0x14e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	2100      	movs	r1, #0
 8008adc:	1d1a      	adds	r2, r3, #4
 8008ade:	602a      	str	r2, [r5, #0]
 8008ae0:	681d      	ldr	r5, [r3, #0]
 8008ae2:	6862      	ldr	r2, [r4, #4]
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f909 	bl	8008cfc <memchr>
 8008aea:	b108      	cbz	r0, 8008af0 <_printf_i+0x1ec>
 8008aec:	1b40      	subs	r0, r0, r5
 8008aee:	6060      	str	r0, [r4, #4]
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	6123      	str	r3, [r4, #16]
 8008af4:	2300      	movs	r3, #0
 8008af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008afa:	e7aa      	b.n	8008a52 <_printf_i+0x14e>
 8008afc:	462a      	mov	r2, r5
 8008afe:	4649      	mov	r1, r9
 8008b00:	4640      	mov	r0, r8
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	47d0      	blx	sl
 8008b06:	3001      	adds	r0, #1
 8008b08:	d0ad      	beq.n	8008a66 <_printf_i+0x162>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	079b      	lsls	r3, r3, #30
 8008b0e:	d413      	bmi.n	8008b38 <_printf_i+0x234>
 8008b10:	68e0      	ldr	r0, [r4, #12]
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	4298      	cmp	r0, r3
 8008b16:	bfb8      	it	lt
 8008b18:	4618      	movlt	r0, r3
 8008b1a:	e7a6      	b.n	8008a6a <_printf_i+0x166>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4632      	mov	r2, r6
 8008b20:	4649      	mov	r1, r9
 8008b22:	4640      	mov	r0, r8
 8008b24:	47d0      	blx	sl
 8008b26:	3001      	adds	r0, #1
 8008b28:	d09d      	beq.n	8008a66 <_printf_i+0x162>
 8008b2a:	3501      	adds	r5, #1
 8008b2c:	68e3      	ldr	r3, [r4, #12]
 8008b2e:	9903      	ldr	r1, [sp, #12]
 8008b30:	1a5b      	subs	r3, r3, r1
 8008b32:	42ab      	cmp	r3, r5
 8008b34:	dcf2      	bgt.n	8008b1c <_printf_i+0x218>
 8008b36:	e7eb      	b.n	8008b10 <_printf_i+0x20c>
 8008b38:	2500      	movs	r5, #0
 8008b3a:	f104 0619 	add.w	r6, r4, #25
 8008b3e:	e7f5      	b.n	8008b2c <_printf_i+0x228>
 8008b40:	08009e49 	.word	0x08009e49
 8008b44:	08009e5a 	.word	0x08009e5a

08008b48 <__swbuf_r>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	460e      	mov	r6, r1
 8008b4c:	4614      	mov	r4, r2
 8008b4e:	4605      	mov	r5, r0
 8008b50:	b118      	cbz	r0, 8008b5a <__swbuf_r+0x12>
 8008b52:	6a03      	ldr	r3, [r0, #32]
 8008b54:	b90b      	cbnz	r3, 8008b5a <__swbuf_r+0x12>
 8008b56:	f7ff fa29 	bl	8007fac <__sinit>
 8008b5a:	69a3      	ldr	r3, [r4, #24]
 8008b5c:	60a3      	str	r3, [r4, #8]
 8008b5e:	89a3      	ldrh	r3, [r4, #12]
 8008b60:	071a      	lsls	r2, r3, #28
 8008b62:	d525      	bpl.n	8008bb0 <__swbuf_r+0x68>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	b31b      	cbz	r3, 8008bb0 <__swbuf_r+0x68>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	6922      	ldr	r2, [r4, #16]
 8008b6c:	b2f6      	uxtb	r6, r6
 8008b6e:	1a98      	subs	r0, r3, r2
 8008b70:	6963      	ldr	r3, [r4, #20]
 8008b72:	4637      	mov	r7, r6
 8008b74:	4283      	cmp	r3, r0
 8008b76:	dc04      	bgt.n	8008b82 <__swbuf_r+0x3a>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f7ff fcbe 	bl	80084fc <_fflush_r>
 8008b80:	b9e0      	cbnz	r0, 8008bbc <__swbuf_r+0x74>
 8008b82:	68a3      	ldr	r3, [r4, #8]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	60a3      	str	r3, [r4, #8]
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	1c5a      	adds	r2, r3, #1
 8008b8c:	6022      	str	r2, [r4, #0]
 8008b8e:	701e      	strb	r6, [r3, #0]
 8008b90:	6962      	ldr	r2, [r4, #20]
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d004      	beq.n	8008ba2 <__swbuf_r+0x5a>
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	07db      	lsls	r3, r3, #31
 8008b9c:	d506      	bpl.n	8008bac <__swbuf_r+0x64>
 8008b9e:	2e0a      	cmp	r6, #10
 8008ba0:	d104      	bne.n	8008bac <__swbuf_r+0x64>
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f7ff fca9 	bl	80084fc <_fflush_r>
 8008baa:	b938      	cbnz	r0, 8008bbc <__swbuf_r+0x74>
 8008bac:	4638      	mov	r0, r7
 8008bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f806 	bl	8008bc4 <__swsetup_r>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d0d5      	beq.n	8008b68 <__swbuf_r+0x20>
 8008bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8008bc0:	e7f4      	b.n	8008bac <__swbuf_r+0x64>
	...

08008bc4 <__swsetup_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4b2a      	ldr	r3, [pc, #168]	; (8008c70 <__swsetup_r+0xac>)
 8008bc8:	4605      	mov	r5, r0
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	460c      	mov	r4, r1
 8008bce:	b118      	cbz	r0, 8008bd8 <__swsetup_r+0x14>
 8008bd0:	6a03      	ldr	r3, [r0, #32]
 8008bd2:	b90b      	cbnz	r3, 8008bd8 <__swsetup_r+0x14>
 8008bd4:	f7ff f9ea 	bl	8007fac <__sinit>
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bde:	0718      	lsls	r0, r3, #28
 8008be0:	d422      	bmi.n	8008c28 <__swsetup_r+0x64>
 8008be2:	06d9      	lsls	r1, r3, #27
 8008be4:	d407      	bmi.n	8008bf6 <__swsetup_r+0x32>
 8008be6:	2309      	movs	r3, #9
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	e034      	b.n	8008c60 <__swsetup_r+0x9c>
 8008bf6:	0758      	lsls	r0, r3, #29
 8008bf8:	d512      	bpl.n	8008c20 <__swsetup_r+0x5c>
 8008bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfc:	b141      	cbz	r1, 8008c10 <__swsetup_r+0x4c>
 8008bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c02:	4299      	cmp	r1, r3
 8008c04:	d002      	beq.n	8008c0c <__swsetup_r+0x48>
 8008c06:	4628      	mov	r0, r5
 8008c08:	f7ff fafa 	bl	8008200 <_free_r>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	6363      	str	r3, [r4, #52]	; 0x34
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6063      	str	r3, [r4, #4]
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	f043 0308 	orr.w	r3, r3, #8
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	b94b      	cbnz	r3, 8008c40 <__swsetup_r+0x7c>
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c36:	d003      	beq.n	8008c40 <__swsetup_r+0x7c>
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f000 f891 	bl	8008d62 <__smakebuf_r>
 8008c40:	89a0      	ldrh	r0, [r4, #12]
 8008c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c46:	f010 0301 	ands.w	r3, r0, #1
 8008c4a:	d00a      	beq.n	8008c62 <__swsetup_r+0x9e>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60a3      	str	r3, [r4, #8]
 8008c50:	6963      	ldr	r3, [r4, #20]
 8008c52:	425b      	negs	r3, r3
 8008c54:	61a3      	str	r3, [r4, #24]
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	b943      	cbnz	r3, 8008c6c <__swsetup_r+0xa8>
 8008c5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c5e:	d1c4      	bne.n	8008bea <__swsetup_r+0x26>
 8008c60:	bd38      	pop	{r3, r4, r5, pc}
 8008c62:	0781      	lsls	r1, r0, #30
 8008c64:	bf58      	it	pl
 8008c66:	6963      	ldrpl	r3, [r4, #20]
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	e7f4      	b.n	8008c56 <__swsetup_r+0x92>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e7f7      	b.n	8008c60 <__swsetup_r+0x9c>
 8008c70:	20000074 	.word	0x20000074

08008c74 <_raise_r>:
 8008c74:	291f      	cmp	r1, #31
 8008c76:	b538      	push	{r3, r4, r5, lr}
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	d904      	bls.n	8008c88 <_raise_r+0x14>
 8008c7e:	2316      	movs	r3, #22
 8008c80:	6003      	str	r3, [r0, #0]
 8008c82:	f04f 30ff 	mov.w	r0, #4294967295
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008c8a:	b112      	cbz	r2, 8008c92 <_raise_r+0x1e>
 8008c8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c90:	b94b      	cbnz	r3, 8008ca6 <_raise_r+0x32>
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 f830 	bl	8008cf8 <_getpid_r>
 8008c98:	462a      	mov	r2, r5
 8008c9a:	4601      	mov	r1, r0
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca2:	f000 b817 	b.w	8008cd4 <_kill_r>
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d00a      	beq.n	8008cc0 <_raise_r+0x4c>
 8008caa:	1c59      	adds	r1, r3, #1
 8008cac:	d103      	bne.n	8008cb6 <_raise_r+0x42>
 8008cae:	2316      	movs	r3, #22
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e7e7      	b.n	8008c86 <_raise_r+0x12>
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cbe:	4798      	blx	r3
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	e7e0      	b.n	8008c86 <_raise_r+0x12>

08008cc4 <raise>:
 8008cc4:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <raise+0xc>)
 8008cc6:	4601      	mov	r1, r0
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	f7ff bfd3 	b.w	8008c74 <_raise_r>
 8008cce:	bf00      	nop
 8008cd0:	20000074 	.word	0x20000074

08008cd4 <_kill_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	4d06      	ldr	r5, [pc, #24]	; (8008cf4 <_kill_r+0x20>)
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	4611      	mov	r1, r2
 8008ce0:	602b      	str	r3, [r5, #0]
 8008ce2:	f7f9 fc93 	bl	800260c <_kill>
 8008ce6:	1c43      	adds	r3, r0, #1
 8008ce8:	d102      	bne.n	8008cf0 <_kill_r+0x1c>
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	b103      	cbz	r3, 8008cf0 <_kill_r+0x1c>
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	bd38      	pop	{r3, r4, r5, pc}
 8008cf2:	bf00      	nop
 8008cf4:	200027b4 	.word	0x200027b4

08008cf8 <_getpid_r>:
 8008cf8:	f7f9 bc86 	b.w	8002608 <_getpid>

08008cfc <memchr>:
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	b510      	push	{r4, lr}
 8008d00:	b2c9      	uxtb	r1, r1
 8008d02:	4402      	add	r2, r0
 8008d04:	4293      	cmp	r3, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	d101      	bne.n	8008d0e <memchr+0x12>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e003      	b.n	8008d16 <memchr+0x1a>
 8008d0e:	7804      	ldrb	r4, [r0, #0]
 8008d10:	3301      	adds	r3, #1
 8008d12:	428c      	cmp	r4, r1
 8008d14:	d1f6      	bne.n	8008d04 <memchr+0x8>
 8008d16:	bd10      	pop	{r4, pc}

08008d18 <__swhatbuf_r>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d20:	4615      	mov	r5, r2
 8008d22:	2900      	cmp	r1, #0
 8008d24:	461e      	mov	r6, r3
 8008d26:	b096      	sub	sp, #88	; 0x58
 8008d28:	da0c      	bge.n	8008d44 <__swhatbuf_r+0x2c>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008d32:	bf0c      	ite	eq
 8008d34:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008d38:	2340      	movne	r3, #64	; 0x40
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	6031      	str	r1, [r6, #0]
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	b016      	add	sp, #88	; 0x58
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	466a      	mov	r2, sp
 8008d46:	f000 f849 	bl	8008ddc <_fstat_r>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	dbed      	blt.n	8008d2a <__swhatbuf_r+0x12>
 8008d4e:	9901      	ldr	r1, [sp, #4]
 8008d50:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d54:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d58:	4259      	negs	r1, r3
 8008d5a:	4159      	adcs	r1, r3
 8008d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d60:	e7eb      	b.n	8008d3a <__swhatbuf_r+0x22>

08008d62 <__smakebuf_r>:
 8008d62:	898b      	ldrh	r3, [r1, #12]
 8008d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d66:	079d      	lsls	r5, r3, #30
 8008d68:	4606      	mov	r6, r0
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	d507      	bpl.n	8008d7e <__smakebuf_r+0x1c>
 8008d6e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d72:	6023      	str	r3, [r4, #0]
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	2301      	movs	r3, #1
 8008d78:	6163      	str	r3, [r4, #20]
 8008d7a:	b002      	add	sp, #8
 8008d7c:	bd70      	pop	{r4, r5, r6, pc}
 8008d7e:	466a      	mov	r2, sp
 8008d80:	ab01      	add	r3, sp, #4
 8008d82:	f7ff ffc9 	bl	8008d18 <__swhatbuf_r>
 8008d86:	9900      	ldr	r1, [sp, #0]
 8008d88:	4605      	mov	r5, r0
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f7ff faa8 	bl	80082e0 <_malloc_r>
 8008d90:	b948      	cbnz	r0, 8008da6 <__smakebuf_r+0x44>
 8008d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d96:	059a      	lsls	r2, r3, #22
 8008d98:	d4ef      	bmi.n	8008d7a <__smakebuf_r+0x18>
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	f043 0302 	orr.w	r3, r3, #2
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	e7e3      	b.n	8008d6e <__smakebuf_r+0xc>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	6020      	str	r0, [r4, #0]
 8008daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	9b00      	ldr	r3, [sp, #0]
 8008db2:	6120      	str	r0, [r4, #16]
 8008db4:	6163      	str	r3, [r4, #20]
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	b15b      	cbz	r3, 8008dd2 <__smakebuf_r+0x70>
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dc0:	f000 f81e 	bl	8008e00 <_isatty_r>
 8008dc4:	b128      	cbz	r0, 8008dd2 <__smakebuf_r+0x70>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f023 0303 	bic.w	r3, r3, #3
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	431d      	orrs	r5, r3
 8008dd6:	81a5      	strh	r5, [r4, #12]
 8008dd8:	e7cf      	b.n	8008d7a <__smakebuf_r+0x18>
	...

08008ddc <_fstat_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	2300      	movs	r3, #0
 8008de0:	4d06      	ldr	r5, [pc, #24]	; (8008dfc <_fstat_r+0x20>)
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	4611      	mov	r1, r2
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	f7f9 fc3a 	bl	8002662 <_fstat>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d102      	bne.n	8008df8 <_fstat_r+0x1c>
 8008df2:	682b      	ldr	r3, [r5, #0]
 8008df4:	b103      	cbz	r3, 8008df8 <_fstat_r+0x1c>
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	bd38      	pop	{r3, r4, r5, pc}
 8008dfa:	bf00      	nop
 8008dfc:	200027b4 	.word	0x200027b4

08008e00 <_isatty_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	2300      	movs	r3, #0
 8008e04:	4d05      	ldr	r5, [pc, #20]	; (8008e1c <_isatty_r+0x1c>)
 8008e06:	4604      	mov	r4, r0
 8008e08:	4608      	mov	r0, r1
 8008e0a:	602b      	str	r3, [r5, #0]
 8008e0c:	f7f9 fc2e 	bl	800266c <_isatty>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_isatty_r+0x1a>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_isatty_r+0x1a>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	200027b4 	.word	0x200027b4

08008e20 <_init>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	bf00      	nop
 8008e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e26:	bc08      	pop	{r3}
 8008e28:	469e      	mov	lr, r3
 8008e2a:	4770      	bx	lr

08008e2c <_fini>:
 8008e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2e:	bf00      	nop
 8008e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e32:	bc08      	pop	{r3}
 8008e34:	469e      	mov	lr, r3
 8008e36:	4770      	bx	lr
