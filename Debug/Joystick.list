
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000db8  080084c8  080084c8  000184c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009280  08009280  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009280  08009280  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009280  08009280  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009280  08009280  00019280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009284  08009284  00019284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e0  20000074  080092fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002554  080092fc  00022554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026c61  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005181  00000000  00000000  00046d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012ca4  00000000  00000000  0004bec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001840  00000000  00000000  0005eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001640  00000000  00000000  000603a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001be5f  00000000  00000000  000619e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028b69  00000000  00000000  0007d847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009db6d  00000000  00000000  000a63b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000051a0  00000000  00000000  00143f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001490c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080084b0 	.word	0x080084b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080084b0 	.word	0x080084b0

08000150 <getPlayer>:


player_t *getPlayer(){

	return &Player;
}
 8000150:	4800      	ldr	r0, [pc, #0]	; (8000154 <getPlayer+0x4>)
 8000152:	4770      	bx	lr
 8000154:	20000104 	.word	0x20000104

08000158 <getDisparo>:
	return &movimiento_Aliens;
}

disparo_t *getDisparo(){
	return &Disparo;
}
 8000158:	4800      	ldr	r0, [pc, #0]	; (800015c <getDisparo+0x4>)
 800015a:	4770      	bx	lr
 800015c:	200000fc 	.word	0x200000fc

08000160 <getDisparoAliens>:

disparo_t *getDisparoAliens(){
	return &Disparo_Aliens;
}
 8000160:	4800      	ldr	r0, [pc, #0]	; (8000164 <getDisparoAliens+0x4>)
 8000162:	4770      	bx	lr
 8000164:	20000100 	.word	0x20000100

08000168 <getDificultad>:

dificultad_t *getDificultad(){

	return &dificultad;
}
 8000168:	4800      	ldr	r0, [pc, #0]	; (800016c <getDificultad+0x4>)
 800016a:	4770      	bx	lr
 800016c:	20000108 	.word	0x20000108

08000170 <actualizarPantalla>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void actualizarPantalla(){
 8000170:	b508      	push	{r3, lr}

    SSD1306_UpdateScreen(); // update screen
 8000172:	f001 fe37 	bl	8001de4 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000176:	2000      	movs	r0, #0
 8000178:	f001 fafc 	bl	8001774 <SSD1306_Fill>
}
 800017c:	bd08      	pop	{r3, pc}
	...

08000180 <playerInit>:



void playerInit(){

	Player.posicion_X = 64;
 8000180:	4b01      	ldr	r3, [pc, #4]	; (8000188 <playerInit+0x8>)
 8000182:	2240      	movs	r2, #64	; 0x40
 8000184:	705a      	strb	r2, [r3, #1]

}
 8000186:	4770      	bx	lr
 8000188:	20000104 	.word	0x20000104

0800018c <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 800018c:	b500      	push	{lr}
 800018e:	b083      	sub	sp, #12
 8000190:	468c      	mov	ip, r1

	if(direccion == derecha){
 8000192:	2802      	cmp	r0, #2
 8000194:	d00e      	beq.n	80001b4 <plotPlayer+0x28>
		else{
			player->posicion_X = player->posicion_X + 4;
		}

	}
	else if(direccion == izquierda){
 8000196:	2803      	cmp	r0, #3
 8000198:	d013      	beq.n	80001c2 <plotPlayer+0x36>
		else{
			player->posicion_X = player->posicion_X - 4;
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 800019a:	2301      	movs	r3, #1
 800019c:	9301      	str	r3, [sp, #4]
 800019e:	2308      	movs	r3, #8
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	4a0b      	ldr	r2, [pc, #44]	; (80001d0 <plotPlayer+0x44>)
 80001a4:	2138      	movs	r1, #56	; 0x38
 80001a6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80001aa:	f001 fb1b 	bl	80017e4 <SSD1306_DrawBitmap>
}
 80001ae:	b003      	add	sp, #12
 80001b0:	f85d fb04 	ldr.w	pc, [sp], #4
		if(player->posicion_X >= 120){
 80001b4:	784b      	ldrb	r3, [r1, #1]
 80001b6:	2b77      	cmp	r3, #119	; 0x77
			player->posicion_X = 120;
 80001b8:	bf8c      	ite	hi
 80001ba:	2378      	movhi	r3, #120	; 0x78
			player->posicion_X = player->posicion_X + 4;
 80001bc:	3304      	addls	r3, #4
 80001be:	704b      	strb	r3, [r1, #1]
 80001c0:	e7eb      	b.n	800019a <plotPlayer+0xe>
		if(player->posicion_X <= 0){
 80001c2:	784b      	ldrb	r3, [r1, #1]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0e8      	beq.n	800019a <plotPlayer+0xe>
			player->posicion_X = player->posicion_X - 4;
 80001c8:	3b04      	subs	r3, #4
 80001ca:	704b      	strb	r3, [r1, #1]
 80001cc:	e7e5      	b.n	800019a <plotPlayer+0xe>
 80001ce:	bf00      	nop
 80001d0:	08008ca0 	.word	0x08008ca0

080001d4 <InvaderInit>:



void InvaderInit(){
 80001d4:	b510      	push	{r4, lr}

	movimiento_Aliens.orientacion = mov_derecha;
 80001d6:	2100      	movs	r1, #0
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <InvaderInit+0x38>)
 80001da:	7019      	strb	r1, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80001dc:	4c0c      	ldr	r4, [pc, #48]	; (8000210 <InvaderInit+0x3c>)
void InvaderInit(){
 80001de:	f04f 0e0a 	mov.w	lr, #10
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
			getAlien(y, x)->vivo = true;
 80001e2:	f04f 0c01 	mov.w	ip, #1
			getAlien(y, x)->conteo_explosion = 2;
 80001e6:	2002      	movs	r0, #2
void InvaderInit(){
 80001e8:	4622      	mov	r2, r4
 80001ea:	4673      	mov	r3, lr
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 80001ec:	7013      	strb	r3, [r2, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 80001ee:	7051      	strb	r1, [r2, #1]
			getAlien(y, x)->vivo = true;
 80001f0:	f882 c002 	strb.w	ip, [r2, #2]
			getAlien(y, x)->conteo_explosion = 2;
 80001f4:	7110      	strb	r0, [r2, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80001f6:	330d      	adds	r3, #13
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	3205      	adds	r2, #5
 80001fc:	2b65      	cmp	r3, #101	; 0x65
 80001fe:	d1f5      	bne.n	80001ec <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000200:	3423      	adds	r4, #35	; 0x23
 8000202:	310b      	adds	r1, #11
 8000204:	b2c9      	uxtb	r1, r1
 8000206:	2921      	cmp	r1, #33	; 0x21
 8000208:	d1ee      	bne.n	80001e8 <InvaderInit+0x14>
		}
	}

}
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000010c 	.word	0x2000010c
 8000210:	20000090 	.word	0x20000090

08000214 <plotAliens>:

void plotAliens(){
 8000214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000218:	b083      	sub	sp, #12


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 800021a:	4b6b      	ldr	r3, [pc, #428]	; (80003c8 <plotAliens+0x1b4>)
 800021c:	7859      	ldrb	r1, [r3, #1]
 800021e:	4b6b      	ldr	r3, [pc, #428]	; (80003cc <plotAliens+0x1b8>)
 8000220:	781a      	ldrb	r2, [r3, #0]
 8000222:	fbb1 f3f2 	udiv	r3, r1, r2
 8000226:	fb02 1313 	mls	r3, r2, r3, r1
 800022a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800022e:	d13c      	bne.n	80002aa <plotAliens+0x96>
		/*getMovAliens()->animacion = getMovAliens()->animacion + 1;
		if(getMovAliens()->animacion >= 8){
			getMovAliens()->animacion = 0;
		}*/

		getMovAliens()->animacion = !getMovAliens()->animacion;
 8000230:	4a65      	ldr	r2, [pc, #404]	; (80003c8 <plotAliens+0x1b4>)
 8000232:	78d3      	ldrb	r3, [r2, #3]
 8000234:	fab3 f383 	clz	r3, r3
 8000238:	095b      	lsrs	r3, r3, #5
 800023a:	70d3      	strb	r3, [r2, #3]

			switch(getMovAliens()->orientacion){
 800023c:	7813      	ldrb	r3, [r2, #0]
 800023e:	b18b      	cbz	r3, 8000264 <plotAliens+0x50>
 8000240:	2b01      	cmp	r3, #1
 8000242:	d11e      	bne.n	8000282 <plotAliens+0x6e>
 8000244:	4c62      	ldr	r4, [pc, #392]	; (80003d0 <plotAliens+0x1bc>)
 8000246:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800024a:	348c      	adds	r4, #140	; 0x8c
					break;

				case mov_izquierda:

						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800024c:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23

								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 2;
 8000250:	781a      	ldrb	r2, [r3, #0]
 8000252:	3a02      	subs	r2, #2
 8000254:	f803 2b05 	strb.w	r2, [r3], #5
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000258:	4283      	cmp	r3, r0
 800025a:	d1f9      	bne.n	8000250 <plotAliens+0x3c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800025c:	3023      	adds	r0, #35	; 0x23
 800025e:	42a0      	cmp	r0, r4
 8000260:	d1f4      	bne.n	800024c <plotAliens+0x38>
 8000262:	e00e      	b.n	8000282 <plotAliens+0x6e>
 8000264:	4c5a      	ldr	r4, [pc, #360]	; (80003d0 <plotAliens+0x1bc>)
 8000266:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800026a:	348c      	adds	r4, #140	; 0x8c
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800026c:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 2;
 8000270:	781a      	ldrb	r2, [r3, #0]
 8000272:	3202      	adds	r2, #2
 8000274:	f803 2b05 	strb.w	r2, [r3], #5
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000278:	4283      	cmp	r3, r0
 800027a:	d1f9      	bne.n	8000270 <plotAliens+0x5c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800027c:	3023      	adds	r0, #35	; 0x23
 800027e:	42a0      	cmp	r0, r4
 8000280:	d1f4      	bne.n	800026c <plotAliens+0x58>
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 8000282:	4b53      	ldr	r3, [pc, #332]	; (80003d0 <plotAliens+0x1bc>)
 8000284:	7f9b      	ldrb	r3, [r3, #30]
 8000286:	2b72      	cmp	r3, #114	; 0x72
 8000288:	d902      	bls.n	8000290 <plotAliens+0x7c>

				getMovAliens()->orientacion = mov_izquierda;
 800028a:	4b4f      	ldr	r3, [pc, #316]	; (80003c8 <plotAliens+0x1b4>)
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 8000290:	4b4f      	ldr	r3, [pc, #316]	; (80003d0 <plotAliens+0x1bc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b92b      	cbnz	r3, 80002a2 <plotAliens+0x8e>
				getMovAliens()->orientacion = mov_derecha;
 8000296:	4b4c      	ldr	r3, [pc, #304]	; (80003c8 <plotAliens+0x1b4>)
 8000298:	2200      	movs	r2, #0
 800029a:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 800029c:	789a      	ldrb	r2, [r3, #2]
 800029e:	3201      	adds	r2, #1
 80002a0:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 80002a2:	4b49      	ldr	r3, [pc, #292]	; (80003c8 <plotAliens+0x1b4>)
 80002a4:	789b      	ldrb	r3, [r3, #2]
 80002a6:	2b0a      	cmp	r3, #10
 80002a8:	d009      	beq.n	80002be <plotAliens+0xaa>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 80002aa:	3101      	adds	r1, #1
 80002ac:	4b46      	ldr	r3, [pc, #280]	; (80003c8 <plotAliens+0x1b4>)
 80002ae:	7059      	strb	r1, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002b0:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80003d0 <plotAliens+0x1bc>
	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 80002b4:	46d9      	mov	r9, fp
 80002b6:	f04f 0800 	mov.w	r8, #0
					switch(y){

					case 0:
						if(getAlien(y,x)->vivo == true){

							if(getMovAliens()->animacion == true ){
 80002ba:	469a      	mov	sl, r3
 80002bc:	e07a      	b.n	80003b4 <plotAliens+0x1a0>
						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 80002be:	4b43      	ldr	r3, [pc, #268]	; (80003cc <plotAliens+0x1b8>)
 80002c0:	785c      	ldrb	r4, [r3, #1]
 80002c2:	4d43      	ldr	r5, [pc, #268]	; (80003d0 <plotAliens+0x1bc>)
 80002c4:	f105 0023 	add.w	r0, r5, #35	; 0x23
 80002c8:	358c      	adds	r5, #140	; 0x8c
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002ca:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 80002ce:	785a      	ldrb	r2, [r3, #1]
 80002d0:	4422      	add	r2, r4
 80002d2:	705a      	strb	r2, [r3, #1]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002d4:	3305      	adds	r3, #5
 80002d6:	4283      	cmp	r3, r0
 80002d8:	d1f9      	bne.n	80002ce <plotAliens+0xba>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002da:	3023      	adds	r0, #35	; 0x23
 80002dc:	42a8      	cmp	r0, r5
 80002de:	d1f4      	bne.n	80002ca <plotAliens+0xb6>
 80002e0:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <plotAliens+0x1b4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	709a      	strb	r2, [r3, #2]
 80002e6:	e7e0      	b.n	80002aa <plotAliens+0x96>
						if(getAlien(y,x)->vivo == true){
 80002e8:	78a3      	ldrb	r3, [r4, #2]
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d019      	beq.n	8000322 <plotAliens+0x10e>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002ee:	3405      	adds	r4, #5
 80002f0:	3505      	adds	r5, #5
 80002f2:	42a7      	cmp	r7, r4
 80002f4:	d057      	beq.n	80003a6 <plotAliens+0x192>
					switch(y){
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0f6      	beq.n	80002e8 <plotAliens+0xd4>
 80002fa:	2e01      	cmp	r6, #1
 80002fc:	d028      	beq.n	8000350 <plotAliens+0x13c>
								//getMovAliens()->animacion = true;
							}
						}
						break;
					default:
						if(getAlien(y,x)->vivo == true){
 80002fe:	78ab      	ldrb	r3, [r5, #2]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d1f4      	bne.n	80002ee <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 8000304:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d042      	beq.n	8000392 <plotAliens+0x17e>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
							}
							else{
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx2,16,8,1);
 800030c:	2301      	movs	r3, #1
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	2308      	movs	r3, #8
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	2310      	movs	r3, #16
 8000316:	4a2f      	ldr	r2, [pc, #188]	; (80003d4 <plotAliens+0x1c0>)
 8000318:	7869      	ldrb	r1, [r5, #1]
 800031a:	7828      	ldrb	r0, [r5, #0]
 800031c:	f001 fa62 	bl	80017e4 <SSD1306_DrawBitmap>
 8000320:	e7e5      	b.n	80002ee <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 8000322:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d009      	beq.n	800033e <plotAliens+0x12a>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderTopGfx2,8,8,1);
 800032a:	2301      	movs	r3, #1
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2308      	movs	r3, #8
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	4a29      	ldr	r2, [pc, #164]	; (80003d8 <plotAliens+0x1c4>)
 8000334:	7861      	ldrb	r1, [r4, #1]
 8000336:	7820      	ldrb	r0, [r4, #0]
 8000338:	f001 fa54 	bl	80017e4 <SSD1306_DrawBitmap>
 800033c:	e7d7      	b.n	80002ee <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderTopGfx,8,8,1);
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	2308      	movs	r3, #8
 8000342:	9300      	str	r3, [sp, #0]
 8000344:	4a25      	ldr	r2, [pc, #148]	; (80003dc <plotAliens+0x1c8>)
 8000346:	7861      	ldrb	r1, [r4, #1]
 8000348:	7820      	ldrb	r0, [r4, #0]
 800034a:	f001 fa4b 	bl	80017e4 <SSD1306_DrawBitmap>
 800034e:	e7ce      	b.n	80002ee <plotAliens+0xda>
						if(getAlien(y,x)->vivo == true){
 8000350:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8000354:	2b01      	cmp	r3, #1
 8000356:	d1ca      	bne.n	80002ee <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 8000358:	f89a 3003 	ldrb.w	r3, [sl, #3]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d00c      	beq.n	800037a <plotAliens+0x166>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx2,16,8,1);
 8000360:	2301      	movs	r3, #1
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	2308      	movs	r3, #8
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2310      	movs	r3, #16
 800036a:	4a1d      	ldr	r2, [pc, #116]	; (80003e0 <plotAliens+0x1cc>)
 800036c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8000370:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8000374:	f001 fa36 	bl	80017e4 <SSD1306_DrawBitmap>
 8000378:	e7b9      	b.n	80002ee <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	2308      	movs	r3, #8
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	2310      	movs	r3, #16
 8000382:	4a18      	ldr	r2, [pc, #96]	; (80003e4 <plotAliens+0x1d0>)
 8000384:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8000388:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800038c:	f001 fa2a 	bl	80017e4 <SSD1306_DrawBitmap>
 8000390:	e7ad      	b.n	80002ee <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	2308      	movs	r3, #8
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2310      	movs	r3, #16
 800039a:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <plotAliens+0x1d4>)
 800039c:	7869      	ldrb	r1, [r5, #1]
 800039e:	7828      	ldrb	r0, [r5, #0]
 80003a0:	f001 fa20 	bl	80017e4 <SSD1306_DrawBitmap>
 80003a4:	e7a3      	b.n	80002ee <plotAliens+0xda>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003a6:	f108 0801 	add.w	r8, r8, #1
 80003aa:	f109 0923 	add.w	r9, r9, #35	; 0x23
 80003ae:	f1b8 0f03 	cmp.w	r8, #3
 80003b2:	d006      	beq.n	80003c2 <plotAliens+0x1ae>
 80003b4:	fa5f f688 	uxtb.w	r6, r8
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003b8:	f10b 0723 	add.w	r7, fp, #35	; 0x23
void plotAliens(){
 80003bc:	464d      	mov	r5, r9
 80003be:	465c      	mov	r4, fp
 80003c0:	e799      	b.n	80002f6 <plotAliens+0xe2>
					}
			}

		}

}
 80003c2:	b003      	add	sp, #12
 80003c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003c8:	2000010c 	.word	0x2000010c
 80003cc:	20000108 	.word	0x20000108
 80003d0:	20000090 	.word	0x20000090
 80003d4:	08008c50 	.word	0x08008c50
 80003d8:	08008c88 	.word	0x08008c88
 80003dc:	08008c80 	.word	0x08008c80
 80003e0:	08008c70 	.word	0x08008c70
 80003e4:	08008c60 	.word	0x08008c60
 80003e8:	08008c40 	.word	0x08008c40

080003ec <disparoInit>:

void disparoInit(){


	//Inicializacion del disparo del Player
	Disparo.posicion_x = 0;
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <disparoInit+0x14>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80003f2:	2132      	movs	r1, #50	; 0x32
 80003f4:	7059      	strb	r1, [r3, #1]
	Disparo.disparo = false;
 80003f6:	709a      	strb	r2, [r3, #2]


	//Inicializacion del Disparo de los Aliens
	getDisparoAliens()->numero_disparos = 21;
 80003f8:	4b02      	ldr	r3, [pc, #8]	; (8000404 <disparoInit+0x18>)
 80003fa:	2215      	movs	r2, #21
 80003fc:	70da      	strb	r2, [r3, #3]
}
 80003fe:	4770      	bx	lr
 8000400:	200000fc 	.word	0x200000fc
 8000404:	20000100 	.word	0x20000100

08000408 <disparar>:


void disparar(){
 8000408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800040c:	b083      	sub	sp, #12


			if(getDisparo()->numero_disparos == 1){
 800040e:	4b45      	ldr	r3, [pc, #276]	; (8000524 <disparar+0x11c>)
 8000410:	78db      	ldrb	r3, [r3, #3]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d00e      	beq.n	8000434 <disparar+0x2c>
				getDisparo()->disparo = true;
				getDisparo()->posicion_x = getPlayer()->posicion_X;
			}


			if(getDisparo()->disparo == true){
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <disparar+0x11c>)
 8000418:	789b      	ldrb	r3, [r3, #2]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d010      	beq.n	8000440 <disparar+0x38>
			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){

				uint8_t tamano_alien = TAMANO_ALIEN_TOP;

				switch(y){
 800041e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000528 <disparar+0x120>
 8000422:	f04f 0900 	mov.w	r9, #0
				uint8_t tamano_alien = TAMANO_ALIEN_TOP;
 8000426:	2708      	movs	r7, #8

				}

				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){

					if( (getDisparo()->posicion_x + 1 >= getAlien(y,x)->posicion_X) &  (getDisparo()->posicion_x + 1 <= (getAlien(y,x)->posicion_X + tamano_alien)) & ((getDisparo()->posicion_y) >= getAlien(y,x)->posicion_Y) & (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + tamano_alien)){
 8000428:	4e3e      	ldr	r6, [pc, #248]	; (8000524 <disparar+0x11c>)
									getDisparo()->numero_disparos = 0;


									//Conteo de la cantidad de aliens eliminados (esto para la funcion disparoAliens())
									//getDisparoAliens()->numero_disparos se interpretará como aliens eliminados.
									getDisparoAliens()->numero_disparos = getDisparoAliens()->numero_disparos - 1;
 800042a:	f8df b100 	ldr.w	fp, [pc, #256]	; 800052c <disparar+0x124>

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 800042e:	f04f 0a01 	mov.w	sl, #1
 8000432:	e070      	b.n	8000516 <disparar+0x10e>
				getDisparo()->disparo = true;
 8000434:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <disparar+0x11c>)
 8000436:	2201      	movs	r2, #1
 8000438:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 800043a:	4a3d      	ldr	r2, [pc, #244]	; (8000530 <disparar+0x128>)
 800043c:	7852      	ldrb	r2, [r2, #1]
 800043e:	701a      	strb	r2, [r3, #0]
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 2, 1);
 8000440:	4c38      	ldr	r4, [pc, #224]	; (8000524 <disparar+0x11c>)
 8000442:	7820      	ldrb	r0, [r4, #0]
 8000444:	3004      	adds	r0, #4
 8000446:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800044a:	b289      	uxth	r1, r1
 800044c:	1c8b      	adds	r3, r1, #2
 800044e:	2201      	movs	r2, #1
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	b29b      	uxth	r3, r3
 8000454:	4602      	mov	r2, r0
 8000456:	f001 fa76 	bl	8001946 <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800045a:	7863      	ldrb	r3, [r4, #1]
 800045c:	3b04      	subs	r3, #4
 800045e:	b25b      	sxtb	r3, r3
 8000460:	7063      	strb	r3, [r4, #1]
				if(getDisparo()->posicion_y <= 0){
 8000462:	2b00      	cmp	r3, #0
 8000464:	dcdb      	bgt.n	800041e <disparar+0x16>
					getDisparo()->disparo = false;
 8000466:	2200      	movs	r2, #0
 8000468:	70a2      	strb	r2, [r4, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800046a:	2132      	movs	r1, #50	; 0x32
 800046c:	7061      	strb	r1, [r4, #1]
					getDisparo()->numero_disparos = 0;
 800046e:	70e2      	strb	r2, [r4, #3]
 8000470:	e7d5      	b.n	800041e <disparar+0x16>
				switch(y){
 8000472:	270b      	movs	r7, #11
 8000474:	e04d      	b.n	8000512 <disparar+0x10a>
					if(getAlien(y,x)->explosion == true){
 8000476:	78eb      	ldrb	r3, [r5, #3]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d02b      	beq.n	80004d4 <disparar+0xcc>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800047c:	3405      	adds	r4, #5
 800047e:	4544      	cmp	r4, r8
 8000480:	d038      	beq.n	80004f4 <disparar+0xec>
					if( (getDisparo()->posicion_x + 1 >= getAlien(y,x)->posicion_X) &  (getDisparo()->posicion_x + 1 <= (getAlien(y,x)->posicion_X + tamano_alien)) & ((getDisparo()->posicion_y) >= getAlien(y,x)->posicion_Y) & (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + tamano_alien)){
 8000482:	7832      	ldrb	r2, [r6, #0]
 8000484:	4625      	mov	r5, r4
 8000486:	7820      	ldrb	r0, [r4, #0]
 8000488:	f996 c001 	ldrsb.w	ip, [r6, #1]
 800048c:	7861      	ldrb	r1, [r4, #1]
 800048e:	1c53      	adds	r3, r2, #1
 8000490:	4283      	cmp	r3, r0
 8000492:	bfa8      	it	ge
 8000494:	458c      	cmpge	ip, r1
 8000496:	bfac      	ite	ge
 8000498:	2301      	movge	r3, #1
 800049a:	2300      	movlt	r3, #0
 800049c:	eb00 0e07 	add.w	lr, r0, r7
 80004a0:	4572      	cmp	r2, lr
 80004a2:	bfac      	ite	ge
 80004a4:	2300      	movge	r3, #0
 80004a6:	f003 0301 	andlt.w	r3, r3, #1
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0e3      	beq.n	8000476 <disparar+0x6e>
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	459c      	cmp	ip, r3
 80004b2:	dce0      	bgt.n	8000476 <disparar+0x6e>
								if(getAlien(y,x)->vivo == true){
 80004b4:	78a3      	ldrb	r3, [r4, #2]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d1dd      	bne.n	8000476 <disparar+0x6e>
									getAlien(y,x)->vivo = false;
 80004ba:	2300      	movs	r3, #0
 80004bc:	70a3      	strb	r3, [r4, #2]
									getAlien(y,x)->explosion = true;
 80004be:	f884 a003 	strb.w	sl, [r4, #3]
									getDisparo()->disparo = false;
 80004c2:	70b3      	strb	r3, [r6, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 80004c4:	2232      	movs	r2, #50	; 0x32
 80004c6:	7072      	strb	r2, [r6, #1]
									getDisparo()->numero_disparos = 0;
 80004c8:	70f3      	strb	r3, [r6, #3]
									getDisparoAliens()->numero_disparos = getDisparoAliens()->numero_disparos - 1;
 80004ca:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80004ce:	3b01      	subs	r3, #1
 80004d0:	f88b 3003 	strb.w	r3, [fp, #3]
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 80004d4:	f8cd a004 	str.w	sl, [sp, #4]
 80004d8:	2308      	movs	r3, #8
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2310      	movs	r3, #16
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <disparar+0x12c>)
 80004e0:	f001 f980 	bl	80017e4 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 80004e4:	792b      	ldrb	r3, [r5, #4]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	712b      	strb	r3, [r5, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1c5      	bne.n	800047c <disparar+0x74>
							getAlien(y,x)->explosion = false;
 80004f0:	70eb      	strb	r3, [r5, #3]
 80004f2:	e7c3      	b.n	800047c <disparar+0x74>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80004f4:	f109 0901 	add.w	r9, r9, #1
 80004f8:	fa5f f989 	uxtb.w	r9, r9
 80004fc:	f1b9 0f03 	cmp.w	r9, #3
 8000500:	d00c      	beq.n	800051c <disparar+0x114>
				switch(y){
 8000502:	f1b9 0f01 	cmp.w	r9, #1
 8000506:	d0b4      	beq.n	8000472 <disparar+0x6a>
					tamano_alien = TAMANO_ALIEN_BOTTOM;
 8000508:	f1b9 0f02 	cmp.w	r9, #2
 800050c:	bf14      	ite	ne
 800050e:	2708      	movne	r7, #8
 8000510:	270c      	moveq	r7, #12
 8000512:	f108 0823 	add.w	r8, r8, #35	; 0x23
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000516:	f1a8 0423 	sub.w	r4, r8, #35	; 0x23
 800051a:	e7b2      	b.n	8000482 <disparar+0x7a>
						}
					}
				}
			}
}
 800051c:	b003      	add	sp, #12
 800051e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000522:	bf00      	nop
 8000524:	200000fc 	.word	0x200000fc
 8000528:	200000b3 	.word	0x200000b3
 800052c:	20000100 	.word	0x20000100
 8000530:	20000104 	.word	0x20000104
 8000534:	08008c90 	.word	0x08008c90

08000538 <disparoAliens>:


void disparoAliens(){


	if(getDisparoAliens()->numero_disparos != 0){
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <disparoAliens+0xbc>)
 800053a:	78db      	ldrb	r3, [r3, #3]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d057      	beq.n	80005f0 <disparoAliens+0xb8>
void disparoAliens(){
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	b083      	sub	sp, #12

				if(getDisparoAliens()->disparo == true){
 8000544:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <disparoAliens+0xbc>)
 8000546:	789b      	ldrb	r3, [r3, #2]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d044      	beq.n	80005d6 <disparoAliens+0x9e>
					uint8_t flag = false;

					while(flag != true){


						uint8_t fila = rand() % NUM_ALIEN_FILA;
 800054c:	4f2a      	ldr	r7, [pc, #168]	; (80005f8 <disparoAliens+0xc0>)
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 800054e:	4e2b      	ldr	r6, [pc, #172]	; (80005fc <disparoAliens+0xc4>)

						if(getAlien(fila, columna)->vivo == true){
 8000550:	4d2b      	ldr	r5, [pc, #172]	; (8000600 <disparoAliens+0xc8>)
						uint8_t fila = rand() % NUM_ALIEN_FILA;
 8000552:	f006 ff67 	bl	8007424 <rand>
 8000556:	4604      	mov	r4, r0
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 8000558:	f006 ff64 	bl	8007424 <rand>
						uint8_t fila = rand() % NUM_ALIEN_FILA;
 800055c:	fb87 1204 	smull	r1, r2, r7, r4
 8000560:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8000564:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	b2e4      	uxtb	r4, r4
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 800056c:	fb86 2100 	smull	r2, r1, r6, r0
 8000570:	4401      	add	r1, r0
 8000572:	17c2      	asrs	r2, r0, #31
 8000574:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8000578:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800057c:	1a83      	subs	r3, r0, r2
 800057e:	b2db      	uxtb	r3, r3
						if(getAlien(fila, columna)->vivo == true){
 8000580:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000584:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000588:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800058c:	440a      	add	r2, r1
 800058e:	442a      	add	r2, r5
 8000590:	7892      	ldrb	r2, [r2, #2]
 8000592:	2a01      	cmp	r2, #1
 8000594:	d1dd      	bne.n	8000552 <disparoAliens+0x1a>
							flag = true;
							getDisparoAliens()->disparo = true;
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <disparoAliens+0xbc>)
 8000598:	2101      	movs	r1, #1
 800059a:	7091      	strb	r1, [r2, #2]

							getDisparoAliens()->posicion_x = getAlien(fila, columna)->posicion_X + (TAMANO_ALIEN/2);
 800059c:	4918      	ldr	r1, [pc, #96]	; (8000600 <disparoAliens+0xc8>)
 800059e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80005a6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80005aa:	4423      	add	r3, r4
 80005ac:	18c8      	adds	r0, r1, r3
 80005ae:	5ccb      	ldrb	r3, [r1, r3]
 80005b0:	3304      	adds	r3, #4
 80005b2:	7013      	strb	r3, [r2, #0]
							getDisparoAliens()->posicion_y = getAlien(fila, columna)->posicion_Y + (TAMANO_ALIEN/2);
 80005b4:	7843      	ldrb	r3, [r0, #1]
 80005b6:	3304      	adds	r3, #4
 80005b8:	7053      	strb	r3, [r2, #1]
						}

					}
				}

				SSD1306_DrawBitmap(getDisparoAliens()->posicion_x, getDisparoAliens()->posicion_y, AlienBombGfx, 2, 4, 1);
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <disparoAliens+0xbc>)
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2304      	movs	r3, #4
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2302      	movs	r3, #2
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <disparoAliens+0xcc>)
 80005c8:	f990 1001 	ldrsb.w	r1, [r0, #1]
 80005cc:	7800      	ldrb	r0, [r0, #0]
 80005ce:	f001 f909 	bl	80017e4 <SSD1306_DrawBitmap>

	}

}
 80005d2:	b003      	add	sp, #12
 80005d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					getDisparoAliens()->posicion_y = getDisparoAliens()->posicion_y + dificultad.velocidad_disparo_aliens;
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <disparoAliens+0xbc>)
 80005d8:	7853      	ldrb	r3, [r2, #1]
 80005da:	490b      	ldr	r1, [pc, #44]	; (8000608 <disparoAliens+0xd0>)
 80005dc:	7889      	ldrb	r1, [r1, #2]
 80005de:	440b      	add	r3, r1
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	7053      	strb	r3, [r2, #1]
					if(getDisparoAliens()->posicion_y >= 60){
 80005e4:	2b3b      	cmp	r3, #59	; 0x3b
 80005e6:	dde8      	ble.n	80005ba <disparoAliens+0x82>
						getDisparoAliens()->disparo = false;
 80005e8:	4613      	mov	r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	709a      	strb	r2, [r3, #2]
 80005ee:	e7e4      	b.n	80005ba <disparoAliens+0x82>
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000100 	.word	0x20000100
 80005f8:	55555556 	.word	0x55555556
 80005fc:	92492493 	.word	0x92492493
 8000600:	20000090 	.word	0x20000090
 8000604:	08008c3c 	.word	0x08008c3c
 8000608:	20000108 	.word	0x20000108

0800060c <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 800060c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000610:	b083      	sub	sp, #12

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000612:	f005 fe51 	bl	80062b8 <xTaskGetTickCount>
 8000616:	9000      	str	r0, [sp, #0]

  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  HAL_ADC_Start(&hadc1);
 8000618:	4d2b      	ldr	r5, [pc, #172]	; (80006c8 <entryJoystick+0xbc>)
		  joystick.y_value = nulo;
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 800061a:	4e2c      	ldr	r6, [pc, #176]	; (80006cc <entryJoystick+0xc0>)
		  joystick.boton = false;
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800061c:	4f2c      	ldr	r7, [pc, #176]	; (80006d0 <entryJoystick+0xc4>)
 800061e:	e01f      	b.n	8000660 <entryJoystick+0x54>
 8000620:	2302      	movs	r3, #2
 8000622:	e044      	b.n	80006ae <entryJoystick+0xa2>
 8000624:	2401      	movs	r4, #1
		  joystick.y_value = abajo;
 8000626:	f88d 4005 	strb.w	r4, [sp, #5]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 800062a:	2104      	movs	r1, #4
 800062c:	4630      	mov	r0, r6
 800062e:	f002 fb67 	bl	8002d00 <HAL_GPIO_ReadPin>
 8000632:	fab0 f080 	clz	r0, r0
 8000636:	0940      	lsrs	r0, r0, #5
 8000638:	f88d 0006 	strb.w	r0, [sp, #6]
	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 800063c:	2300      	movs	r3, #0
 800063e:	461a      	mov	r2, r3
 8000640:	a901      	add	r1, sp, #4
 8000642:	4824      	ldr	r0, [pc, #144]	; (80006d4 <entryJoystick+0xc8>)
 8000644:	6800      	ldr	r0, [r0, #0]
 8000646:	f004 fc95 	bl	8004f74 <osMessageQueuePut>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800064a:	b128      	cbz	r0, 8000658 <entryJoystick+0x4c>
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000652:	4638      	mov	r0, r7
 8000654:	f002 fb5a 	bl	8002d0c <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000658:	2132      	movs	r1, #50	; 0x32
 800065a:	4668      	mov	r0, sp
 800065c:	f005 ff4e 	bl	80064fc <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc1);
 8000660:	4628      	mov	r0, r5
 8000662:	f002 f87b 	bl	800275c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000666:	210a      	movs	r1, #10
 8000668:	4628      	mov	r0, r5
 800066a:	f001 fec1 	bl	80023f0 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 800066e:	4628      	mov	r0, r5
 8000670:	f001 ff80 	bl	8002574 <HAL_ADC_GetValue>
 8000674:	fa1f f980 	uxth.w	r9, r0
	  HAL_ADC_Stop(&hadc1);
 8000678:	4628      	mov	r0, r5
 800067a:	f002 f997 	bl	80029ac <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 800067e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80006d8 <entryJoystick+0xcc>
 8000682:	4640      	mov	r0, r8
 8000684:	f002 f86a 	bl	800275c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000688:	210a      	movs	r1, #10
 800068a:	4640      	mov	r0, r8
 800068c:	f001 feb0 	bl	80023f0 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000690:	4640      	mov	r0, r8
 8000692:	f001 ff6f 	bl	8002574 <HAL_ADC_GetValue>
 8000696:	b284      	uxth	r4, r0
	  HAL_ADC_Stop(&hadc2);
 8000698:	4640      	mov	r0, r8
 800069a:	f002 f987 	bl	80029ac <HAL_ADC_Stop>
	  if(val_x > 2000){
 800069e:	f5b9 6ffa 	cmp.w	r9, #2000	; 0x7d0
 80006a2:	d8bd      	bhi.n	8000620 <entryJoystick+0x14>
	  else if(val_x < 1600){
 80006a4:	f5b9 6fc8 	cmp.w	r9, #1600	; 0x640
 80006a8:	bf2c      	ite	cs
 80006aa:	2304      	movcs	r3, #4
 80006ac:	2303      	movcc	r3, #3
		  joystick.x_value = derecha;
 80006ae:	f88d 3004 	strb.w	r3, [sp, #4]
	  if(val_y > 2000){
 80006b2:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80006b6:	d8b5      	bhi.n	8000624 <entryJoystick+0x18>
	  else if(val_y < 1600){
 80006b8:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 80006bc:	bf34      	ite	cc
 80006be:	2400      	movcc	r4, #0
 80006c0:	2401      	movcs	r4, #1
 80006c2:	00a4      	lsls	r4, r4, #2
 80006c4:	e7af      	b.n	8000626 <entryJoystick+0x1a>
 80006c6:	bf00      	nop
 80006c8:	20000120 	.word	0x20000120
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40011000 	.word	0x40011000
 80006d4:	20000284 	.word	0x20000284
 80006d8:	20000150 	.word	0x20000150

080006dc <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	b083      	sub	sp, #12
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 80006e0:	f000 fd26 	bl	8001130 <menuInit>


  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 80006e4:	4d11      	ldr	r5, [pc, #68]	; (800072c <entryPantalla+0x50>)

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 80006e6:	4c12      	ldr	r4, [pc, #72]	; (8000730 <entryPantalla+0x54>)
 80006e8:	e005      	b.n	80006f6 <entryPantalla+0x1a>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	4620      	mov	r0, r4
 80006f2:	f002 fb0b 	bl	8002d0c <HAL_GPIO_WritePin>
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	2200      	movs	r2, #0
 80006fc:	a901      	add	r1, sp, #4
 80006fe:	6828      	ldr	r0, [r5, #0]
 8000700:	f004 fc88 	bl	8005014 <osMessageQueueGet>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000704:	2800      	cmp	r0, #0
 8000706:	d1f0      	bne.n	80006ea <entryPantalla+0xe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070e:	4620      	mov	r0, r4
 8000710:	f002 fafc 	bl	8002d0c <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000714:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000718:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800071c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000720:	f000 fd2c 	bl	800117c <menuActualizar>
		actualizarPantalla();
 8000724:	f7ff fd24 	bl	8000170 <actualizarPantalla>
 8000728:	e7e5      	b.n	80006f6 <entryPantalla+0x1a>
 800072a:	bf00      	nop
 800072c:	20000284 	.word	0x20000284
 8000730:	40011000 	.word	0x40011000

08000734 <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000738:	b084      	sub	sp, #16
  /* USER CODE BEGIN entryMemoria */

	uint8_t dataBuffer[TAMANO_PAGINA];
	uint16_t address = MEMORIA_ADDRESS;

	char buff[] = {'a','x','e','l','\0','\0','a','a'};
 800073a:	4b3c      	ldr	r3, [pc, #240]	; (800082c <entryMemoria+0xf8>)
 800073c:	ac02      	add	r4, sp, #8
 800073e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000742:	e884 0003 	stmia.w	r4, {r0, r1}

	osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 8000746:	f04f 31ff 	mov.w	r1, #4294967295
 800074a:	4b39      	ldr	r3, [pc, #228]	; (8000830 <entryMemoria+0xfc>)
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	f004 fac7 	bl	8004ce0 <osMutexAcquire>

	address = MEMORIA_ADDRESS + 32;
	//Write_Memoria(address, buff_nuevosPuntajes[32]);

	uint8_t data[3];
	data[0] = WRITE;
 8000752:	2302      	movs	r3, #2
 8000754:	f88d 3004 	strb.w	r3, [sp, #4]
	data[1] = address>>8;
 8000758:	2700      	movs	r7, #0
 800075a:	f88d 7005 	strb.w	r7, [sp, #5]
	data[2] = address;
 800075e:	2520      	movs	r5, #32
 8000760:	f88d 5006 	strb.w	r5, [sp, #6]
	//data[4] = value;

	uint8_t wren = WREN;
 8000764:	2306      	movs	r3, #6
 8000766:	f88d 3003 	strb.w	r3, [sp, #3]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 800076a:	4e32      	ldr	r6, [pc, #200]	; (8000834 <entryMemoria+0x100>)
 800076c:	463a      	mov	r2, r7
 800076e:	4629      	mov	r1, r5
 8000770:	4630      	mov	r0, r6
 8000772:	f002 facb 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &wren, 1, 100);  // write data to register
 8000776:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8000838 <entryMemoria+0x104>
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	2201      	movs	r2, #1
 800077e:	f10d 0103 	add.w	r1, sp, #3
 8000782:	4640      	mov	r0, r8
 8000784:	f003 fbc0 	bl	8003f08 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000788:	2201      	movs	r2, #1
 800078a:	4629      	mov	r1, r5
 800078c:	4630      	mov	r0, r6
 800078e:	f002 fabd 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000792:	200a      	movs	r0, #10
 8000794:	f001 fe18 	bl	80023c8 <HAL_Delay>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000798:	463a      	mov	r2, r7
 800079a:	4629      	mov	r1, r5
 800079c:	4630      	mov	r0, r6
 800079e:	f002 fab5 	bl	8002d0c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // write data to register
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2203      	movs	r2, #3
 80007a6:	a901      	add	r1, sp, #4
 80007a8:	4640      	mov	r0, r8
 80007aa:	f003 fbad 	bl	8003f08 <HAL_SPI_Transmit>



	for(uint8_t i=0; i<8;i++){
 80007ae:	f10d 0810 	add.w	r8, sp, #16
		//Write_Memoria(address, buff[i]);
		//HAL_Delay(10);
		HAL_SPI_Transmit (&hspi1, (uint8_t *)&buff[i], 1, HAL_MAX_DELAY);  // write data to register
 80007b2:	4f21      	ldr	r7, [pc, #132]	; (8000838 <entryMemoria+0x104>)
 80007b4:	f04f 36ff 	mov.w	r6, #4294967295
 80007b8:	2501      	movs	r5, #1
 80007ba:	4633      	mov	r3, r6
 80007bc:	462a      	mov	r2, r5
 80007be:	4621      	mov	r1, r4
 80007c0:	4638      	mov	r0, r7
 80007c2:	f003 fba1 	bl	8003f08 <HAL_SPI_Transmit>
	for(uint8_t i=0; i<8;i++){
 80007c6:	3401      	adds	r4, #1
 80007c8:	4544      	cmp	r4, r8
 80007ca:	d1f6      	bne.n	80007ba <entryMemoria+0x86>
		//address++;

	}


	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 80007cc:	2201      	movs	r2, #1
 80007ce:	2120      	movs	r1, #32
 80007d0:	4818      	ldr	r0, [pc, #96]	; (8000834 <entryMemoria+0x100>)
 80007d2:	f002 fa9b 	bl	8002d0c <HAL_GPIO_WritePin>
 80007d6:	2400      	movs	r4, #0

	address = MEMORIA_ADDRESS;

	for(uint8_t i=0; i<TAMANO_PAGINA;i++){

		dataBuffer[i] = Read_memoria(address);
 80007d8:	b2a0      	uxth	r0, r4
 80007da:	f000 fa7d 	bl	8000cd8 <Read_memoria>
	for(uint8_t i=0; i<TAMANO_PAGINA;i++){
 80007de:	3401      	adds	r4, #1
 80007e0:	2c40      	cmp	r4, #64	; 0x40
 80007e2:	d1f9      	bne.n	80007d8 <entryMemoria+0xa4>


	//EEPROM_ReadPage_DMA(MEMORIA_ADDRESS, dataBuffer);

	//puntajesActualizar();
	memoriaInit();
 80007e4:	f000 faa4 	bl	8000d30 <memoriaInit>
	//Ordenamiento_Puntajes();

	osMutexRelease(mutexPuntajesHandle);
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <entryMemoria+0xfc>)
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	f004 faba 	bl	8004d64 <osMutexRelease>
  for(;;)
  {

	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado
	  //del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 80007f0:	4f12      	ldr	r7, [pc, #72]	; (800083c <entryMemoria+0x108>)
 80007f2:	f04f 35ff 	mov.w	r5, #4294967295
 80007f6:	2401      	movs	r4, #1
 80007f8:	2600      	movs	r6, #0
 80007fa:	462b      	mov	r3, r5
 80007fc:	4632      	mov	r2, r6
 80007fe:	4621      	mov	r1, r4
 8000800:	6838      	ldr	r0, [r7, #0]
 8000802:	f004 f9cf 	bl	8004ba4 <osEventFlagsWait>

	      // Realiza acciones basadas en la notificación recibida
	      if (flags == NOTIFICATION_VALUE)
 8000806:	2801      	cmp	r0, #1
 8000808:	d1f7      	bne.n	80007fa <entryMemoria+0xc6>
	      {
	    	  //Acceso al mutex, ya que se comparte el periférico SPI con la tarea SonidoTask.
	    	  osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 800080a:	4e09      	ldr	r6, [pc, #36]	; (8000830 <entryMemoria+0xfc>)
 800080c:	4629      	mov	r1, r5
 800080e:	6830      	ldr	r0, [r6, #0]
 8000810:	f004 fa66 	bl	8004ce0 <osMutexAcquire>

	    	  //Ordenamiento_Puntajes();
	    	  writeNuevosPuntajes(1);
 8000814:	4620      	mov	r0, r4
 8000816:	f000 fb77 	bl	8000f08 <writeNuevosPuntajes>
	    	  //guardarNuevosPuntaje();

	    	  osMutexRelease(mutexPuntajesHandle);
 800081a:	6830      	ldr	r0, [r6, #0]
 800081c:	f004 faa2 	bl	8004d64 <osMutexRelease>


	    	  //Envio la notificacion 2 para que la tarea PantallaTask pueda pasar del menu guardado_nombre al menu de puntajes una vez que los puntajes
	    	  //ya se encuentran ordenadas y guardadas, ya que sin esta segunda sincronizacion, puede pasarse al menu puntajes sin que estos se encuentren
	    	  //ordenados. El ordenado se realiza en esta tarea MemoriaTask ya que las escrituras de puntajes se realizan solo en esta tarea.
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 8000820:	2102      	movs	r1, #2
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <entryMemoria+0x10c>)
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	f004 f97f 	bl	8004b28 <osEventFlagsSet>
 800082a:	e7e5      	b.n	80007f8 <entryMemoria+0xc4>
 800082c:	080084c8 	.word	0x080084c8
 8000830:	20000274 	.word	0x20000274
 8000834:	40010c00 	.word	0x40010c00
 8000838:	200001d4 	.word	0x200001d4
 800083c:	2000027c 	.word	0x2000027c
 8000840:	20000280 	.word	0x20000280

08000844 <entrySonido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySonido */
void entrySonido(void *argument)
{
 8000844:	b500      	push	{lr}
 8000846:	b083      	sub	sp, #12
  /* USER CODE BEGIN entrySonido */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000848:	f005 fd36 	bl	80062b8 <xTaskGetTickCount>
 800084c:	9001      	str	r0, [sp, #4]
	HAL_TIM_Base_Start_IT(&htim2);
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <entrySonido+0x1c>)
 8000850:	f003 fe28 	bl	80044a4 <HAL_TIM_Base_Start_IT>


  /* Infinite loop */
  for(;;)
  {
		vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(1));
 8000854:	2401      	movs	r4, #1
 8000856:	4621      	mov	r1, r4
 8000858:	a801      	add	r0, sp, #4
 800085a:	f005 fe4f 	bl	80064fc <vTaskDelayUntil>
  for(;;)
 800085e:	e7fa      	b.n	8000856 <entrySonido+0x12>
 8000860:	2000022c 	.word	0x2000022c

08000864 <SystemClock_Config>:
{
 8000864:	b500      	push	{lr}
 8000866:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000868:	2300      	movs	r3, #0
 800086a:	930c      	str	r3, [sp, #48]	; 0x30
 800086c:	930d      	str	r3, [sp, #52]	; 0x34
 800086e:	930f      	str	r3, [sp, #60]	; 0x3c
 8000870:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000872:	9305      	str	r3, [sp, #20]
 8000874:	9306      	str	r3, [sp, #24]
 8000876:	9307      	str	r3, [sp, #28]
 8000878:	9308      	str	r3, [sp, #32]
 800087a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	9303      	str	r3, [sp, #12]
 8000882:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2201      	movs	r2, #1
 8000886:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2202      	movs	r2, #2
 8000892:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000896:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800089a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	a80a      	add	r0, sp, #40	; 0x28
 800089e:	f002 fdef 	bl	8003480 <HAL_RCC_OscConfig>
 80008a2:	b9c8      	cbnz	r0, 80008d8 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2102      	movs	r1, #2
 80008aa:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b8:	a805      	add	r0, sp, #20
 80008ba:	f003 f821 	bl	8003900 <HAL_RCC_ClockConfig>
 80008be:	b968      	cbnz	r0, 80008dc <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008c0:	2302      	movs	r3, #2
 80008c2:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c8:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ca:	a801      	add	r0, sp, #4
 80008cc:	f003 f90e 	bl	8003aec <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	b930      	cbnz	r0, 80008e0 <SystemClock_Config+0x7c>
}
 80008d2:	b015      	add	sp, #84	; 0x54
 80008d4:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008da:	e7fe      	b.n	80008da <SystemClock_Config+0x76>
 80008dc:	b672      	cpsid	i
 80008de:	e7fe      	b.n	80008de <SystemClock_Config+0x7a>
 80008e0:	b672      	cpsid	i
 80008e2:	e7fe      	b.n	80008e2 <SystemClock_Config+0x7e>

080008e4 <main>:
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 80008e8:	f001 fd4a 	bl	8002380 <HAL_Init>
  SystemClock_Config();
 80008ec:	f7ff ffba 	bl	8000864 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	2400      	movs	r4, #0
 80008f2:	9406      	str	r4, [sp, #24]
 80008f4:	9407      	str	r4, [sp, #28]
 80008f6:	9408      	str	r4, [sp, #32]
 80008f8:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4ba3      	ldr	r3, [pc, #652]	; (8000b88 <main+0x2a4>)
 80008fc:	699a      	ldr	r2, [r3, #24]
 80008fe:	f042 0210 	orr.w	r2, r2, #16
 8000902:	619a      	str	r2, [r3, #24]
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	f002 0210 	and.w	r2, r2, #16
 800090a:	9200      	str	r2, [sp, #0]
 800090c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	699a      	ldr	r2, [r3, #24]
 8000910:	f042 0220 	orr.w	r2, r2, #32
 8000914:	619a      	str	r2, [r3, #24]
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	f002 0220 	and.w	r2, r2, #32
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	699a      	ldr	r2, [r3, #24]
 8000922:	f042 0204 	orr.w	r2, r2, #4
 8000926:	619a      	str	r2, [r3, #24]
 8000928:	699a      	ldr	r2, [r3, #24]
 800092a:	f002 0204 	and.w	r2, r2, #4
 800092e:	9202      	str	r2, [sp, #8]
 8000930:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	f042 0208 	orr.w	r2, r2, #8
 8000938:	619a      	str	r2, [r3, #24]
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	9303      	str	r3, [sp, #12]
 8000942:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000944:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8000b8c <main+0x2a8>
 8000948:	4622      	mov	r2, r4
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	4648      	mov	r0, r9
 8000950:	f002 f9dc 	bl	8002d0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000954:	4f8e      	ldr	r7, [pc, #568]	; (8000b90 <main+0x2ac>)
 8000956:	4622      	mov	r2, r4
 8000958:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800095c:	4638      	mov	r0, r7
 800095e:	f002 f9d5 	bl	8002d0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000962:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8000b94 <main+0x2b0>
 8000966:	4622      	mov	r2, r4
 8000968:	2120      	movs	r1, #32
 800096a:	4640      	mov	r0, r8
 800096c:	f002 f9ce 	bl	8002d0c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2501      	movs	r5, #1
 8000978:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2602      	movs	r6, #2
 800097e:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000980:	a906      	add	r1, sp, #24
 8000982:	4648      	mov	r0, r9
 8000984:	f002 f882 	bl	8002a8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000988:	2304      	movs	r3, #4
 800098a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098e:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	a906      	add	r1, sp, #24
 8000992:	4638      	mov	r0, r7
 8000994:	f002 f87a 	bl	8002a8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000998:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800099c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	a906      	add	r1, sp, #24
 80009a6:	4638      	mov	r0, r7
 80009a8:	f002 f870 	bl	8002a8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009ac:	2320      	movs	r3, #32
 80009ae:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	a906      	add	r1, sp, #24
 80009b8:	4640      	mov	r0, r8
 80009ba:	f002 f867 	bl	8002a8c <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	9406      	str	r4, [sp, #24]
 80009c0:	9407      	str	r4, [sp, #28]
 80009c2:	9408      	str	r4, [sp, #32]
  hadc1.Instance = ADC1;
 80009c4:	4874      	ldr	r0, [pc, #464]	; (8000b98 <main+0x2b4>)
 80009c6:	4b75      	ldr	r3, [pc, #468]	; (8000b9c <main+0x2b8>)
 80009c8:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ca:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009cc:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80009d4:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d6:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009d8:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009da:	f001 ff63 	bl	80028a4 <HAL_ADC_Init>
 80009de:	2800      	cmp	r0, #0
 80009e0:	f040 80c0 	bne.w	8000b64 <main+0x280>
  sConfig.Channel = ADC_CHANNEL_3;
 80009e4:	2303      	movs	r3, #3
 80009e6:	9306      	str	r3, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	9307      	str	r3, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ec:	2300      	movs	r3, #0
 80009ee:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f0:	a906      	add	r1, sp, #24
 80009f2:	4869      	ldr	r0, [pc, #420]	; (8000b98 <main+0x2b4>)
 80009f4:	f001 fdc2 	bl	800257c <HAL_ADC_ConfigChannel>
 80009f8:	2800      	cmp	r0, #0
 80009fa:	f040 80b5 	bne.w	8000b68 <main+0x284>
  hi2c1.Instance = I2C1;
 80009fe:	4868      	ldr	r0, [pc, #416]	; (8000ba0 <main+0x2bc>)
 8000a00:	4b68      	ldr	r3, [pc, #416]	; (8000ba4 <main+0x2c0>)
 8000a02:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a04:	4b68      	ldr	r3, [pc, #416]	; (8000ba8 <main+0x2c4>)
 8000a06:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a12:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a16:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1c:	f002 fa94 	bl	8002f48 <HAL_I2C_Init>
 8000a20:	2800      	cmp	r0, #0
 8000a22:	f040 80a3 	bne.w	8000b6c <main+0x288>
  hspi1.Instance = SPI1;
 8000a26:	4861      	ldr	r0, [pc, #388]	; (8000bac <main+0x2c8>)
 8000a28:	4b61      	ldr	r3, [pc, #388]	; (8000bb0 <main+0x2cc>)
 8000a2a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a30:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a32:	2300      	movs	r3, #0
 8000a34:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a36:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a38:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a40:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a42:	2218      	movs	r2, #24
 8000a44:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a48:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a50:	f003 f9ff 	bl	8003e52 <HAL_SPI_Init>
 8000a54:	2800      	cmp	r0, #0
 8000a56:	f040 808b 	bne.w	8000b70 <main+0x28c>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9306      	str	r3, [sp, #24]
 8000a5e:	9307      	str	r3, [sp, #28]
 8000a60:	9308      	str	r3, [sp, #32]
  hadc2.Instance = ADC2;
 8000a62:	4854      	ldr	r0, [pc, #336]	; (8000bb4 <main+0x2d0>)
 8000a64:	4a54      	ldr	r2, [pc, #336]	; (8000bb8 <main+0x2d4>)
 8000a66:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a68:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a6a:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a6c:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a72:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a74:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a7a:	f001 ff13 	bl	80028a4 <HAL_ADC_Init>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d178      	bne.n	8000b74 <main+0x290>
  sConfig.Channel = ADC_CHANNEL_1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	9306      	str	r3, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a86:	9307      	str	r3, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a8c:	a906      	add	r1, sp, #24
 8000a8e:	4849      	ldr	r0, [pc, #292]	; (8000bb4 <main+0x2d0>)
 8000a90:	f001 fd74 	bl	800257c <HAL_ADC_ConfigChannel>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d16f      	bne.n	8000b78 <main+0x294>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9306      	str	r3, [sp, #24]
 8000a9c:	9307      	str	r3, [sp, #28]
 8000a9e:	9308      	str	r3, [sp, #32]
 8000aa0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa2:	9304      	str	r3, [sp, #16]
 8000aa4:	9305      	str	r3, [sp, #20]
  htim2.Instance = TIM2;
 8000aa6:	4845      	ldr	r0, [pc, #276]	; (8000bbc <main+0x2d8>)
 8000aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aac:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72-1;
 8000aae:	2247      	movs	r2, #71	; 0x47
 8000ab0:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 125-1;
 8000ab4:	227c      	movs	r2, #124	; 0x7c
 8000ab6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000abc:	f003 fe36 	bl	800472c <HAL_TIM_Base_Init>
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d15b      	bne.n	8000b7c <main+0x298>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aca:	a906      	add	r1, sp, #24
 8000acc:	483b      	ldr	r0, [pc, #236]	; (8000bbc <main+0x2d8>)
 8000ace:	f003 fe65 	bl	800479c <HAL_TIM_ConfigClockSource>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d154      	bne.n	8000b80 <main+0x29c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000adc:	a904      	add	r1, sp, #16
 8000ade:	4837      	ldr	r0, [pc, #220]	; (8000bbc <main+0x2d8>)
 8000ae0:	f003 ff12 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d14d      	bne.n	8000b84 <main+0x2a0>
  osKernelInitialize();
 8000ae8:	f003 ff44 	bl	8004974 <osKernelInitialize>
  mutexPuntajesHandle = osMutexNew(&mutexPuntajes_attributes);
 8000aec:	4834      	ldr	r0, [pc, #208]	; (8000bc0 <main+0x2dc>)
 8000aee:	f004 f8a3 	bl	8004c38 <osMutexNew>
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <main+0x2e0>)
 8000af4:	6018      	str	r0, [r3, #0]
  mySem01Handle = osSemaphoreNew(1, 1, &mySem01_attributes);
 8000af6:	4a34      	ldr	r2, [pc, #208]	; (8000bc8 <main+0x2e4>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	4608      	mov	r0, r1
 8000afc:	f004 f96a 	bl	8004dd4 <osSemaphoreNew>
 8000b00:	4b32      	ldr	r3, [pc, #200]	; (8000bcc <main+0x2e8>)
 8000b02:	6018      	str	r0, [r3, #0]
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000b04:	4a32      	ldr	r2, [pc, #200]	; (8000bd0 <main+0x2ec>)
 8000b06:	2103      	movs	r1, #3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f004 f9d7 	bl	8004ebc <osMessageQueueNew>
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <main+0x2f0>)
 8000b10:	6018      	str	r0, [r3, #0]
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000b12:	4a31      	ldr	r2, [pc, #196]	; (8000bd8 <main+0x2f4>)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4831      	ldr	r0, [pc, #196]	; (8000bdc <main+0x2f8>)
 8000b18:	f003 ff78 	bl	8004a0c <osThreadNew>
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <main+0x2fc>)
 8000b1e:	6018      	str	r0, [r3, #0]
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8000b20:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <main+0x300>)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4830      	ldr	r0, [pc, #192]	; (8000be8 <main+0x304>)
 8000b26:	f003 ff71 	bl	8004a0c <osThreadNew>
 8000b2a:	4b30      	ldr	r3, [pc, #192]	; (8000bec <main+0x308>)
 8000b2c:	6018      	str	r0, [r3, #0]
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 8000b2e:	4a30      	ldr	r2, [pc, #192]	; (8000bf0 <main+0x30c>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	4830      	ldr	r0, [pc, #192]	; (8000bf4 <main+0x310>)
 8000b34:	f003 ff6a 	bl	8004a0c <osThreadNew>
 8000b38:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <main+0x314>)
 8000b3a:	6018      	str	r0, [r3, #0]
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <main+0x318>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	482f      	ldr	r0, [pc, #188]	; (8000c00 <main+0x31c>)
 8000b42:	f003 ff63 	bl	8004a0c <osThreadNew>
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <main+0x320>)
 8000b48:	6018      	str	r0, [r3, #0]
  notificationFlag = osEventFlagsNew(NULL);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f003 ffc4 	bl	8004ad8 <osEventFlagsNew>
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <main+0x324>)
 8000b52:	6018      	str	r0, [r3, #0]
  notificationFlag2 = osEventFlagsNew(NULL);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f003 ffbf 	bl	8004ad8 <osEventFlagsNew>
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <main+0x328>)
 8000b5c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000b5e:	f003 ff2d 	bl	80049bc <osKernelStart>
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <main+0x27e>
 8000b64:	b672      	cpsid	i
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <main+0x282>
 8000b68:	b672      	cpsid	i
 8000b6a:	e7fe      	b.n	8000b6a <main+0x286>
 8000b6c:	b672      	cpsid	i
 8000b6e:	e7fe      	b.n	8000b6e <main+0x28a>
 8000b70:	b672      	cpsid	i
 8000b72:	e7fe      	b.n	8000b72 <main+0x28e>
 8000b74:	b672      	cpsid	i
 8000b76:	e7fe      	b.n	8000b76 <main+0x292>
 8000b78:	b672      	cpsid	i
 8000b7a:	e7fe      	b.n	8000b7a <main+0x296>
 8000b7c:	b672      	cpsid	i
 8000b7e:	e7fe      	b.n	8000b7e <main+0x29a>
 8000b80:	b672      	cpsid	i
 8000b82:	e7fe      	b.n	8000b82 <main+0x29e>
 8000b84:	b672      	cpsid	i
 8000b86:	e7fe      	b.n	8000b86 <main+0x2a2>
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	20000120 	.word	0x20000120
 8000b9c:	40012400 	.word	0x40012400
 8000ba0:	20000180 	.word	0x20000180
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	00061a80 	.word	0x00061a80
 8000bac:	200001d4 	.word	0x200001d4
 8000bb0:	40013000 	.word	0x40013000
 8000bb4:	20000150 	.word	0x20000150
 8000bb8:	40012800 	.word	0x40012800
 8000bbc:	2000022c 	.word	0x2000022c
 8000bc0:	08008d98 	.word	0x08008d98
 8000bc4:	20000274 	.word	0x20000274
 8000bc8:	08008da8 	.word	0x08008da8
 8000bcc:	20000278 	.word	0x20000278
 8000bd0:	08008db8 	.word	0x08008db8
 8000bd4:	20000284 	.word	0x20000284
 8000bd8:	08008d08 	.word	0x08008d08
 8000bdc:	0800060d 	.word	0x0800060d
 8000be0:	20000110 	.word	0x20000110
 8000be4:	08008d50 	.word	0x08008d50
 8000be8:	080006dd 	.word	0x080006dd
 8000bec:	20000118 	.word	0x20000118
 8000bf0:	08008d2c 	.word	0x08008d2c
 8000bf4:	08000735 	.word	0x08000735
 8000bf8:	20000114 	.word	0x20000114
 8000bfc:	08008d74 	.word	0x08008d74
 8000c00:	08000845 	.word	0x08000845
 8000c04:	2000011c 	.word	0x2000011c
 8000c08:	2000027c 	.word	0x2000027c
 8000c0c:	20000280 	.word	0x20000280

08000c10 <HAL_TIM_PeriodElapsedCallback>:
{
 8000c10:	b510      	push	{r4, lr}
 8000c12:	4604      	mov	r4, r0
  if (htim->Instance == TIM4) {
 8000c14:	6802      	ldr	r2, [r0, #0]
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d004      	beq.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM2) {
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c22:	d003      	beq.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8000c24:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000c26:	f001 fbbd 	bl	80023a4 <HAL_IncTick>
 8000c2a:	e7f7      	b.n	8000c1c <HAL_TIM_PeriodElapsedCallback+0xc>
	  GPIOA->BSRR |= GPIO_BSRR_BS9_Msk;
 8000c2c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000c30:	691a      	ldr	r2, [r3, #16]
 8000c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c36:	611a      	str	r2, [r3, #16]
	  GPIOA->BSRR |= GPIO_BSRR_BR9_Msk;
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c3e:	611a      	str	r2, [r3, #16]
}
 8000c40:	e7f0      	b.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000c42:	bf00      	nop
 8000c44:	40000800 	.word	0x40000800

08000c48 <getPuntajes>:

puntajes_t *getPuntajes(uint8_t indice){

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
}
 8000c48:	4b01      	ldr	r3, [pc, #4]	; (8000c50 <getPuntajes+0x8>)
 8000c4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000c4e:	4770      	bx	lr
 8000c50:	20000288 	.word	0x20000288

08000c54 <Write_Memoria>:

void Write_Memoria(uint16_t address, uint8_t value){
 8000c54:	b530      	push	{r4, r5, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	f88d 1007 	strb.w	r1, [sp, #7]

	uint8_t data[3];
	data[0] = WRITE;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f88d 300c 	strb.w	r3, [sp, #12]
	data[1] = address>>8;
 8000c62:	0a03      	lsrs	r3, r0, #8
 8000c64:	f88d 300d 	strb.w	r3, [sp, #13]
	data[2] = address;
 8000c68:	f88d 000e 	strb.w	r0, [sp, #14]
	//data[4] = value;

	uint8_t wren = WREN;
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	f88d 300b 	strb.w	r3, [sp, #11]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000c72:	4c17      	ldr	r4, [pc, #92]	; (8000cd0 <Write_Memoria+0x7c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	2120      	movs	r1, #32
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f002 f847 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &wren, 1, 100);  // write data to register
 8000c7e:	4d15      	ldr	r5, [pc, #84]	; (8000cd4 <Write_Memoria+0x80>)
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	f10d 010b 	add.w	r1, sp, #11
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f003 f93d 	bl	8003f08 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2120      	movs	r1, #32
 8000c92:	4620      	mov	r0, r4
 8000c94:	f002 f83a 	bl	8002d0c <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f001 fb95 	bl	80023c8 <HAL_Delay>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f002 f832 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // write data to register
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	2203      	movs	r2, #3
 8000cac:	a903      	add	r1, sp, #12
 8000cae:	4628      	mov	r0, r5
 8000cb0:	f003 f92a 	bl	8003f08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit (&hspi1, &value, 1, 100);  // write data to register
 8000cb4:	2364      	movs	r3, #100	; 0x64
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f10d 0107 	add.w	r1, sp, #7
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f003 f923 	bl	8003f08 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f002 f820 	bl	8002d0c <HAL_GPIO_WritePin>
}
 8000ccc:	b005      	add	sp, #20
 8000cce:	bd30      	pop	{r4, r5, pc}
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	200001d4 	.word	0x200001d4

08000cd8 <Read_memoria>:


uint8_t Read_memoria(uint16_t address)
{
 8000cd8:	b570      	push	{r4, r5, r6, lr}
 8000cda:	b082      	sub	sp, #8
	uint8_t data_rec;
	uint8_t data[3];
	data[0] = READ;
 8000cdc:	2603      	movs	r6, #3
 8000cde:	f88d 6004 	strb.w	r6, [sp, #4]
	data[1] = address>>8;
 8000ce2:	0a03      	lsrs	r3, r0, #8
 8000ce4:	f88d 3005 	strb.w	r3, [sp, #5]
	data[2] = address;
 8000ce8:	f88d 0006 	strb.w	r0, [sp, #6]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the pin low
 8000cec:	4c0e      	ldr	r4, [pc, #56]	; (8000d28 <Read_memoria+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f002 f80a 	bl	8002d0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // send address
 8000cf8:	4d0c      	ldr	r5, [pc, #48]	; (8000d2c <Read_memoria+0x54>)
 8000cfa:	2364      	movs	r3, #100	; 0x64
 8000cfc:	4632      	mov	r2, r6
 8000cfe:	a901      	add	r1, sp, #4
 8000d00:	4628      	mov	r0, r5
 8000d02:	f003 f901 	bl	8003f08 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, &data_rec, 1, 100);  // receive 6 bytes data
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f10d 0107 	add.w	r1, sp, #7
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f003 fafc 	bl	800430c <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the pin high
 8000d14:	2201      	movs	r2, #1
 8000d16:	2120      	movs	r1, #32
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f001 fff7 	bl	8002d0c <HAL_GPIO_WritePin>

	return data_rec;
}
 8000d1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000d22:	b002      	add	sp, #8
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
 8000d26:	bf00      	nop
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	200001d4 	.word	0x200001d4

08000d30 <memoriaInit>:



void memoriaInit(){
 8000d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d34:	b085      	sub	sp, #20
 8000d36:	2700      	movs	r7, #0
		uint8_t puntaje_lsb;
		uint8_t puntaje_msb;
		//uint8_t byte_dumb;


		buff_nombre[0]  = Read_memoria(address);
 8000d38:	4638      	mov	r0, r7
 8000d3a:	f7ff ffcd 	bl	8000cd8 <Read_memoria>
		HAL_Delay(3);
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f001 fb42 	bl	80023c8 <HAL_Delay>

		strcpy(buff_nombre, "      ");
 8000d44:	4b6e      	ldr	r3, [pc, #440]	; (8000f00 <memoriaInit+0x1d0>)
 8000d46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d4a:	9002      	str	r0, [sp, #8]
 8000d4c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8000d50:	0c09      	lsrs	r1, r1, #16
 8000d52:	f88d 100e 	strb.w	r1, [sp, #14]
 8000d56:	2501      	movs	r5, #1
 8000d58:	463e      	mov	r6, r7
		uint8_t permiso = true;
 8000d5a:	46a9      	mov	r9, r5
		uint8_t j = 0;
 8000d5c:	46b8      	mov	r8, r7
				HAL_Delay(3);

				switch(i){

				case 7:
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8000d5e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8000f04 <memoriaInit+0x1d4>
						}
						else if((i>=24 && i<30)){
							strcpy(getPuntajes(3)->nombre, buff_nombre);
						}
						else if((i>=32 && i<38)){
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8000d62:	f10a 0320 	add.w	r3, sl, #32
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	e00b      	b.n	8000d82 <memoriaInit+0x52>
				puntaje_msb = Read_memoria(address);
 8000d6a:	f7ff ffb5 	bl	8000cd8 <Read_memoria>
 8000d6e:	4607      	mov	r7, r0
				HAL_Delay(3);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f001 fb29 	bl	80023c8 <HAL_Delay>
			}
			i++;
			address++;
			//HAL_Delay(3);

		}while(i != 40);
 8000d76:	b2eb      	uxtb	r3, r5
 8000d78:	2b28      	cmp	r3, #40	; 0x28
 8000d7a:	d05a      	beq.n	8000e32 <memoriaInit+0x102>
 8000d7c:	3601      	adds	r6, #1
 8000d7e:	3501      	adds	r5, #1
 8000d80:	b2ad      	uxth	r5, r5
 8000d82:	b2f4      	uxtb	r4, r6
 8000d84:	b2b0      	uxth	r0, r6
			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 8000d86:	2c06      	cmp	r4, #6
 8000d88:	d0ef      	beq.n	8000d6a <memoriaInit+0x3a>
 8000d8a:	2c07      	cmp	r4, #7
 8000d8c:	f000 80a9 	beq.w	8000ee2 <memoriaInit+0x1b2>
 8000d90:	f1a4 030e 	sub.w	r3, r4, #14
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b19      	cmp	r3, #25
 8000d98:	d80a      	bhi.n	8000db0 <memoriaInit+0x80>
 8000d9a:	f1a4 020e 	sub.w	r2, r4, #14
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	2301      	movs	r3, #1
 8000da2:	4093      	lsls	r3, r2
 8000da4:	f013 3f02 	tst.w	r3, #33686018	; 0x2020202
 8000da8:	d113      	bne.n	8000dd2 <memoriaInit+0xa2>
 8000daa:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 8000dae:	d1dc      	bne.n	8000d6a <memoriaInit+0x3a>
				if( (buff_nombre[j] != '\0') && permiso==true){
 8000db0:	f8cd 8000 	str.w	r8, [sp]
 8000db4:	f108 0310 	add.w	r3, r8, #16
 8000db8:	446b      	add	r3, sp
 8000dba:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000dbe:	b113      	cbz	r3, 8000dc6 <memoriaInit+0x96>
 8000dc0:	f1b9 0f01 	cmp.w	r9, #1
 8000dc4:	d038      	beq.n	8000e38 <memoriaInit+0x108>
					Read_memoria(address);
 8000dc6:	f7ff ff87 	bl	8000cd8 <Read_memoria>
					HAL_Delay(3);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f001 fafc 	bl	80023c8 <HAL_Delay>
 8000dd0:	e7d1      	b.n	8000d76 <memoriaInit+0x46>
				puntaje_lsb = Read_memoria(address);
 8000dd2:	f7ff ff81 	bl	8000cd8 <Read_memoria>
 8000dd6:	4681      	mov	r9, r0
				HAL_Delay(3);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f001 faf5 	bl	80023c8 <HAL_Delay>
				switch(i){
 8000dde:	3c07      	subs	r4, #7
 8000de0:	2c20      	cmp	r4, #32
 8000de2:	d87a      	bhi.n	8000eda <memoriaInit+0x1aa>
 8000de4:	e8df f004 	tbb	[pc, r4]
 8000de8:	79797983 	.word	0x79797983
 8000dec:	79797979 	.word	0x79797979
 8000df0:	79797911 	.word	0x79797911
 8000df4:	79797979 	.word	0x79797979
 8000df8:	79797916 	.word	0x79797916
 8000dfc:	79797979 	.word	0x79797979
 8000e00:	7979791b 	.word	0x7979791b
 8000e04:	79797979 	.word	0x79797979
 8000e08:	20          	.byte	0x20
 8000e09:	00          	.byte	0x00
					getPuntajes(1)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8000e0a:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 8000e0e:	f8aa 900e 	strh.w	r9, [sl, #14]
					break;
 8000e12:	e070      	b.n	8000ef6 <memoriaInit+0x1c6>
					getPuntajes(2)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8000e14:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 8000e18:	f8aa 9016 	strh.w	r9, [sl, #22]
					break;
 8000e1c:	e06b      	b.n	8000ef6 <memoriaInit+0x1c6>
					getPuntajes(3)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8000e1e:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 8000e22:	f8aa 901e 	strh.w	r9, [sl, #30]
					break;
 8000e26:	e066      	b.n	8000ef6 <memoriaInit+0x1c6>
					getPuntajes(4)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8000e28:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 8000e2c:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <memoriaInit+0x1d4>)
 8000e2e:	f8a3 9026 	strh.w	r9, [r3, #38]	; 0x26



}
 8000e32:	b005      	add	sp, #20
 8000e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					buff_nombre[j]  = Read_memoria(address);
 8000e38:	f7ff ff4e 	bl	8000cd8 <Read_memoria>
 8000e3c:	4683      	mov	fp, r0
 8000e3e:	9b00      	ldr	r3, [sp, #0]
 8000e40:	3310      	adds	r3, #16
 8000e42:	446b      	add	r3, sp
 8000e44:	f803 0c08 	strb.w	r0, [r3, #-8]
					HAL_Delay(3);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f001 fabd 	bl	80023c8 <HAL_Delay>
					if(buff_nombre[j] == '\0'){
 8000e4e:	f1bb 0f00 	cmp.w	fp, #0
 8000e52:	d13d      	bne.n	8000ed0 <memoriaInit+0x1a0>
						if((i>=0 && i<6)){
 8000e54:	2c25      	cmp	r4, #37	; 0x25
 8000e56:	d818      	bhi.n	8000e8a <memoriaInit+0x15a>
 8000e58:	e8df f004 	tbb	[pc, r4]
 8000e5c:	13131313 	.word	0x13131313
 8000e60:	17171313 	.word	0x17171313
 8000e64:	23232323 	.word	0x23232323
 8000e68:	17172323 	.word	0x17172323
 8000e6c:	29292929 	.word	0x29292929
 8000e70:	17172929 	.word	0x17172929
 8000e74:	2f2f2f2f 	.word	0x2f2f2f2f
 8000e78:	17172f2f 	.word	0x17172f2f
 8000e7c:	35353535 	.word	0x35353535
 8000e80:	3535      	.short	0x3535
							strcpy(getPuntajes(0)->nombre, buff_nombre);
 8000e82:	a902      	add	r1, sp, #8
 8000e84:	4650      	mov	r0, sl
 8000e86:	f006 fcce 	bl	8007826 <strcpy>
						strcpy(buff_nombre, "      ");
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <memoriaInit+0x1d0>)
 8000e8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e90:	9002      	str	r0, [sp, #8]
 8000e92:	f8ad 100c 	strh.w	r1, [sp, #12]
 8000e96:	0c09      	lsrs	r1, r1, #16
 8000e98:	f88d 100e 	strb.w	r1, [sp, #14]
						permiso = false;
 8000e9c:	46d9      	mov	r9, fp
						j = 0;
 8000e9e:	46d8      	mov	r8, fp
 8000ea0:	e769      	b.n	8000d76 <memoriaInit+0x46>
							strcpy(getPuntajes(1)->nombre, buff_nombre);
 8000ea2:	a902      	add	r1, sp, #8
 8000ea4:	f10a 0008 	add.w	r0, sl, #8
 8000ea8:	f006 fcbd 	bl	8007826 <strcpy>
 8000eac:	e7ed      	b.n	8000e8a <memoriaInit+0x15a>
							strcpy(getPuntajes(2)->nombre, buff_nombre);
 8000eae:	a902      	add	r1, sp, #8
 8000eb0:	f10a 0010 	add.w	r0, sl, #16
 8000eb4:	f006 fcb7 	bl	8007826 <strcpy>
 8000eb8:	e7e7      	b.n	8000e8a <memoriaInit+0x15a>
							strcpy(getPuntajes(3)->nombre, buff_nombre);
 8000eba:	a902      	add	r1, sp, #8
 8000ebc:	f10a 0018 	add.w	r0, sl, #24
 8000ec0:	f006 fcb1 	bl	8007826 <strcpy>
 8000ec4:	e7e1      	b.n	8000e8a <memoriaInit+0x15a>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8000ec6:	a902      	add	r1, sp, #8
 8000ec8:	9801      	ldr	r0, [sp, #4]
 8000eca:	f006 fcac 	bl	8007826 <strcpy>
 8000ece:	e7dc      	b.n	8000e8a <memoriaInit+0x15a>
						j++;
 8000ed0:	f108 0801 	add.w	r8, r8, #1
 8000ed4:	fa5f f888 	uxtb.w	r8, r8
 8000ed8:	e74d      	b.n	8000d76 <memoriaInit+0x46>
				switch(i){
 8000eda:	2700      	movs	r7, #0
 8000edc:	f04f 0901 	mov.w	r9, #1
 8000ee0:	e749      	b.n	8000d76 <memoriaInit+0x46>
				puntaje_lsb = Read_memoria(address);
 8000ee2:	f7ff fef9 	bl	8000cd8 <Read_memoria>
 8000ee6:	4681      	mov	r9, r0
				HAL_Delay(3);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f001 fa6d 	bl	80023c8 <HAL_Delay>
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8000eee:	eb09 2907 	add.w	r9, r9, r7, lsl #8
 8000ef2:	f8aa 9006 	strh.w	r9, [sl, #6]
						j = 0;
 8000ef6:	2700      	movs	r7, #0
 8000ef8:	f04f 0901 	mov.w	r9, #1
 8000efc:	e73e      	b.n	8000d7c <memoriaInit+0x4c>
 8000efe:	bf00      	nop
 8000f00:	08008dd0 	.word	0x08008dd0
 8000f04:	20000288 	.word	0x20000288

08000f08 <writeNuevosPuntajes>:



void writeNuevosPuntajes(uint8_t cambios){
 8000f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f0c:	b08f      	sub	sp, #60	; 0x3c
 8000f0e:	9003      	str	r0, [sp, #12]
			break;
		case 31:
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje && 0xFF;
			break;
		case 38:
			buff_nuevosPuntajes[i] = getPuntajes(4)->puntaje >>8;
 8000f10:	4b86      	ldr	r3, [pc, #536]	; (800112c <writeNuevosPuntajes+0x224>)
 8000f12:	f8b3 c026 	ldrh.w	ip, [r3, #38]	; 0x26
 8000f16:	ea4f 2a1c 	mov.w	sl, ip, lsr #8
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje && 0xFF;
 8000f1a:	8bde      	ldrh	r6, [r3, #30]
 8000f1c:	f1b6 0900 	subs.w	r9, r6, #0
 8000f20:	bf18      	it	ne
 8000f22:	f04f 0901 	movne.w	r9, #1
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje >>8;
 8000f26:	0a36      	lsrs	r6, r6, #8
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje && 0xFF;
 8000f28:	8add      	ldrh	r5, [r3, #22]
 8000f2a:	f1b5 0800 	subs.w	r8, r5, #0
 8000f2e:	bf18      	it	ne
 8000f30:	f04f 0801 	movne.w	r8, #1
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje >>8;
 8000f34:	0a2d      	lsrs	r5, r5, #8
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje && 0xFF;
 8000f36:	f8b3 e00e 	ldrh.w	lr, [r3, #14]
 8000f3a:	f1be 0700 	subs.w	r7, lr, #0
 8000f3e:	bf18      	it	ne
 8000f40:	2701      	movne	r7, #1
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje >>8;
 8000f42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje && 0xFF;
 8000f46:	88db      	ldrh	r3, [r3, #6]
 8000f48:	1e1a      	subs	r2, r3, #0
 8000f4a:	bf18      	it	ne
 8000f4c:	2201      	movne	r2, #1
 8000f4e:	9202      	str	r2, [sp, #8]
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje >>8;
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	a804      	add	r0, sp, #16
 8000f56:	2201      	movs	r2, #1
	uint8_t k=0;
 8000f58:	2100      	movs	r1, #0
			buff_nuevosPuntajes[i] = getPuntajes(4)->nombre[k];
 8000f5a:	4c74      	ldr	r4, [pc, #464]	; (800112c <writeNuevosPuntajes+0x224>)
 8000f5c:	e07f      	b.n	800105e <writeNuevosPuntajes+0x156>
			buff_nuevosPuntajes[i] = getPuntajes(0)->nombre[k];
 8000f5e:	f814 b001 	ldrb.w	fp, [r4, r1]
 8000f62:	f880 b000 	strb.w	fp, [r0]
			k++;
 8000f66:	3101      	adds	r1, #1
 8000f68:	b2c9      	uxtb	r1, r1
		switch(i){
 8000f6a:	3b06      	subs	r3, #6
 8000f6c:	2b21      	cmp	r3, #33	; 0x21
 8000f6e:	d871      	bhi.n	8001054 <writeNuevosPuntajes+0x14c>
 8000f70:	e8df f003 	tbb	[pc, r3]
 8000f74:	70703a35 	.word	0x70703a35
 8000f78:	70707070 	.word	0x70707070
 8000f7c:	7070423e 	.word	0x7070423e
 8000f80:	70707070 	.word	0x70707070
 8000f84:	70704945 	.word	0x70704945
 8000f88:	70707070 	.word	0x70707070
 8000f8c:	7070504c 	.word	0x7070504c
 8000f90:	70707070 	.word	0x70707070
 8000f94:	5753      	.short	0x5753
			buff_nuevosPuntajes[i] = getPuntajes(1)->nombre[k];
 8000f96:	eb04 0b01 	add.w	fp, r4, r1
 8000f9a:	f89b b008 	ldrb.w	fp, [fp, #8]
 8000f9e:	f880 b000 	strb.w	fp, [r0]
			k++;
 8000fa2:	3101      	adds	r1, #1
 8000fa4:	b2c9      	uxtb	r1, r1
 8000fa6:	e7e0      	b.n	8000f6a <writeNuevosPuntajes+0x62>
			buff_nuevosPuntajes[i] = getPuntajes(2)->nombre[k];
 8000fa8:	eb04 0b01 	add.w	fp, r4, r1
 8000fac:	f89b b010 	ldrb.w	fp, [fp, #16]
 8000fb0:	f880 b000 	strb.w	fp, [r0]
			k++;
 8000fb4:	3101      	adds	r1, #1
 8000fb6:	b2c9      	uxtb	r1, r1
 8000fb8:	e7d7      	b.n	8000f6a <writeNuevosPuntajes+0x62>
			buff_nuevosPuntajes[i] = getPuntajes(3)->nombre[k];
 8000fba:	eb04 0b01 	add.w	fp, r4, r1
 8000fbe:	f89b b018 	ldrb.w	fp, [fp, #24]
 8000fc2:	f880 b000 	strb.w	fp, [r0]
			k++;
 8000fc6:	3101      	adds	r1, #1
 8000fc8:	b2c9      	uxtb	r1, r1
 8000fca:	e7ce      	b.n	8000f6a <writeNuevosPuntajes+0x62>
			buff_nuevosPuntajes[i] = getPuntajes(4)->nombre[k];
 8000fcc:	eb04 0b01 	add.w	fp, r4, r1
 8000fd0:	f89b b020 	ldrb.w	fp, [fp, #32]
 8000fd4:	f880 b000 	strb.w	fp, [r0]
			k++;
 8000fd8:	3101      	adds	r1, #1
 8000fda:	b2c9      	uxtb	r1, r1
 8000fdc:	e7c5      	b.n	8000f6a <writeNuevosPuntajes+0x62>
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje >>8;
 8000fde:	9b01      	ldr	r3, [sp, #4]
 8000fe0:	f88d 3016 	strb.w	r3, [sp, #22]
			k = 0;
 8000fe4:	2100      	movs	r1, #0
			break;
 8000fe6:	e037      	b.n	8001058 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje && 0xFF;
 8000fe8:	9b02      	ldr	r3, [sp, #8]
 8000fea:	f88d 3017 	strb.w	r3, [sp, #23]
			break;
 8000fee:	e033      	b.n	8001058 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje >>8;
 8000ff0:	f88d e01e 	strb.w	lr, [sp, #30]
			k = 0;
 8000ff4:	2100      	movs	r1, #0
			break;
 8000ff6:	e02f      	b.n	8001058 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje && 0xFF;
 8000ff8:	f88d 701f 	strb.w	r7, [sp, #31]
			break;
 8000ffc:	e02c      	b.n	8001058 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje >>8;
 8000ffe:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
			k = 0;
 8001002:	2100      	movs	r1, #0
			break;
 8001004:	e028      	b.n	8001058 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje && 0xFF;
 8001006:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
			break;
 800100a:	e025      	b.n	8001058 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje >>8;
 800100c:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
			k = 0;
 8001010:	2100      	movs	r1, #0
			break;
 8001012:	e021      	b.n	8001058 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje && 0xFF;
 8001014:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
			break;
 8001018:	e01e      	b.n	8001058 <writeNuevosPuntajes+0x150>
			buff_nuevosPuntajes[i] = getPuntajes(4)->puntaje >>8;
 800101a:	f88d a036 	strb.w	sl, [sp, #54]	; 0x36
			k = 0;
 800101e:	2100      	movs	r1, #0
			break;
 8001020:	e01a      	b.n	8001058 <writeNuevosPuntajes+0x150>
		case 39:
			buff_nuevosPuntajes[i] = getPuntajes(4)->puntaje && 0xFF;
 8001022:	f1bc 0c00 	subs.w	ip, ip, #0
 8001026:	bf18      	it	ne
 8001028:	f04f 0c01 	movne.w	ip, #1
 800102c:	f88d c037 	strb.w	ip, [sp, #55]	; 0x37
	//Ahora sí se realiza la escritura.
	//La escritura se realizará siempre que se realice mas de un cambio en las posiciones de los puntajes.
	//La reescritura de la posicion 5 (getPuntajes(4)) siempre se realizará.


		if(cambios > 1){
 8001030:	9b03      	ldr	r3, [sp, #12]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d968      	bls.n	8001108 <writeNuevosPuntajes+0x200>
 8001036:	f10d 050f 	add.w	r5, sp, #15

			address = MEMORIA_ADDRESS;
 800103a:	2400      	movs	r4, #0

			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 800103c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001040:	4620      	mov	r0, r4
 8001042:	f7ff fe07 	bl	8000c54 <Write_Memoria>
				address++;
 8001046:	3401      	adds	r4, #1
 8001048:	b2a4      	uxth	r4, r4
			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 800104a:	2c28      	cmp	r4, #40	; 0x28
 800104c:	d1f6      	bne.n	800103c <writeNuevosPuntajes+0x134>

			}

		}

}
 800104e:	b00f      	add	sp, #60	; 0x3c
 8001050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 8001054:	2a27      	cmp	r2, #39	; 0x27
 8001056:	d8eb      	bhi.n	8001030 <writeNuevosPuntajes+0x128>
 8001058:	3201      	adds	r2, #1
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	3001      	adds	r0, #1
 800105e:	1e53      	subs	r3, r2, #1
 8001060:	b2db      	uxtb	r3, r3
		if(i>=0 && i<6){
 8001062:	2b25      	cmp	r3, #37	; 0x25
 8001064:	d881      	bhi.n	8000f6a <writeNuevosPuntajes+0x62>
 8001066:	f20f 0b08 	addw	fp, pc, #8
 800106a:	f85b f023 	ldr.w	pc, [fp, r3, lsl #2]
 800106e:	bf00      	nop
 8001070:	08000f5f 	.word	0x08000f5f
 8001074:	08000f5f 	.word	0x08000f5f
 8001078:	08000f5f 	.word	0x08000f5f
 800107c:	08000f5f 	.word	0x08000f5f
 8001080:	08000f5f 	.word	0x08000f5f
 8001084:	08000f5f 	.word	0x08000f5f
 8001088:	08000f6b 	.word	0x08000f6b
 800108c:	08000f6b 	.word	0x08000f6b
 8001090:	08000f97 	.word	0x08000f97
 8001094:	08000f97 	.word	0x08000f97
 8001098:	08000f97 	.word	0x08000f97
 800109c:	08000f97 	.word	0x08000f97
 80010a0:	08000f97 	.word	0x08000f97
 80010a4:	08000f97 	.word	0x08000f97
 80010a8:	08000f6b 	.word	0x08000f6b
 80010ac:	08000f6b 	.word	0x08000f6b
 80010b0:	08000fa9 	.word	0x08000fa9
 80010b4:	08000fa9 	.word	0x08000fa9
 80010b8:	08000fa9 	.word	0x08000fa9
 80010bc:	08000fa9 	.word	0x08000fa9
 80010c0:	08000fa9 	.word	0x08000fa9
 80010c4:	08000fa9 	.word	0x08000fa9
 80010c8:	08000f6b 	.word	0x08000f6b
 80010cc:	08000f6b 	.word	0x08000f6b
 80010d0:	08000fbb 	.word	0x08000fbb
 80010d4:	08000fbb 	.word	0x08000fbb
 80010d8:	08000fbb 	.word	0x08000fbb
 80010dc:	08000fbb 	.word	0x08000fbb
 80010e0:	08000fbb 	.word	0x08000fbb
 80010e4:	08000fbb 	.word	0x08000fbb
 80010e8:	08000f6b 	.word	0x08000f6b
 80010ec:	08000f6b 	.word	0x08000f6b
 80010f0:	08000fcd 	.word	0x08000fcd
 80010f4:	08000fcd 	.word	0x08000fcd
 80010f8:	08000fcd 	.word	0x08000fcd
 80010fc:	08000fcd 	.word	0x08000fcd
 8001100:	08000fcd 	.word	0x08000fcd
 8001104:	08000fcd 	.word	0x08000fcd
			Write_Memoria(address, buff_nuevosPuntajes[32]);
 8001108:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 800110c:	2020      	movs	r0, #32
 800110e:	f7ff fda1 	bl	8000c54 <Write_Memoria>
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001112:	f10d 052f 	add.w	r5, sp, #47	; 0x2f
			address = MEMORIA_ADDRESS + 32;
 8001116:	2420      	movs	r4, #32
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 8001118:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800111c:	4620      	mov	r0, r4
 800111e:	f7ff fd99 	bl	8000c54 <Write_Memoria>
				address++;
 8001122:	3401      	adds	r4, #1
 8001124:	b2a4      	uxth	r4, r4
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001126:	2c28      	cmp	r4, #40	; 0x28
 8001128:	d1f6      	bne.n	8001118 <writeNuevosPuntajes+0x210>
 800112a:	e790      	b.n	800104e <writeNuevosPuntajes+0x146>
 800112c:	20000288 	.word	0x20000288

08001130 <menuInit>:

	return &menu;
}


void menuInit(){
 8001130:	b510      	push	{r4, lr}

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8001132:	f000 fe85 	bl	8001e40 <SSD1306_Init>
	SSD1306_Clear();
 8001136:	f000 fe7b 	bl	8001e30 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 800113a:	f000 fe53 	bl	8001de4 <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 800113e:	f7ff f81f 	bl	8000180 <playerInit>
	InvaderInit();
 8001142:	f7ff f847 	bl	80001d4 <InvaderInit>
	disparoInit();
 8001146:	f7ff f951 	bl	80003ec <disparoInit>

	//Se inicializan las dificultades
	getDificultad()->velocidad_horizontal = 8;
 800114a:	f7ff f80d 	bl	8000168 <getDificultad>
 800114e:	2308      	movs	r3, #8
 8001150:	7003      	strb	r3, [r0, #0]
	getDificultad()->velocidad_bajada = 1;
 8001152:	f7ff f809 	bl	8000168 <getDificultad>
 8001156:	2401      	movs	r4, #1
 8001158:	7044      	strb	r4, [r0, #1]
	getDificultad()->velocidad_disparo_aliens = 3;
 800115a:	f7ff f805 	bl	8000168 <getDificultad>
 800115e:	2303      	movs	r3, #3
 8001160:	7083      	strb	r3, [r0, #2]


	//Se inicializa el cursor de la pantalla principal.
	getMenu()->menuActual =  juego;
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <menuInit+0x48>)
 8001164:	701c      	strb	r4, [r3, #0]
	//getMenu()->menuActual = menu_principal;
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001166:	2226      	movs	r2, #38	; 0x26
 8001168:	705a      	strb	r2, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800116a:	2209      	movs	r2, #9
 800116c:	711a      	strb	r2, [r3, #4]
	getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 800116e:	221b      	movs	r2, #27
 8001170:	715a      	strb	r2, [r3, #5]
	getMenu()->GuardarNombre.indice = 0;
 8001172:	2200      	movs	r2, #0
 8001174:	731a      	strb	r2, [r3, #12]

}
 8001176:	bd10      	pop	{r4, pc}
 8001178:	200002b0 	.word	0x200002b0

0800117c <menuActualizar>:

void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 800117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001180:	b08d      	sub	sp, #52	; 0x34
 8001182:	9003      	str	r0, [sp, #12]
 8001184:	460d      	mov	r5, r1
 8001186:	4616      	mov	r6, r2


	switch(getMenu()->menuActual){
 8001188:	4bc2      	ldr	r3, [pc, #776]	; (8001494 <menuActualizar+0x318>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b05      	cmp	r3, #5
 800118e:	f200 82e0 	bhi.w	8001752 <menuActualizar+0x5d6>
 8001192:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001196:	0006      	.short	0x0006
 8001198:	00640046 	.word	0x00640046
 800119c:	00c80086 	.word	0x00c80086
 80011a0:	0269      	.short	0x0269

//--------------------------------------------------------------MENU PRINCIPAL-----------------------------------------------------------------------------
	case menu_principal:

		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 80011a2:	2401      	movs	r4, #1
 80011a4:	9401      	str	r4, [sp, #4]
 80011a6:	2320      	movs	r3, #32
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2340      	movs	r3, #64	; 0x40
 80011ac:	4aba      	ldr	r2, [pc, #744]	; (8001498 <menuActualizar+0x31c>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	2023      	movs	r0, #35	; 0x23
 80011b2:	f000 fb17 	bl	80017e4 <SSD1306_DrawBitmap>

		SSD1306_GotoXY(45, 35);
 80011b6:	2123      	movs	r1, #35	; 0x23
 80011b8:	202d      	movs	r0, #45	; 0x2d
 80011ba:	f000 fb5f 	bl	800187c <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 80011be:	4fb7      	ldr	r7, [pc, #732]	; (800149c <menuActualizar+0x320>)
 80011c0:	4622      	mov	r2, r4
 80011c2:	4639      	mov	r1, r7
 80011c4:	48b6      	ldr	r0, [pc, #728]	; (80014a0 <menuActualizar+0x324>)
 80011c6:	f000 fbab 	bl	8001920 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 80011ca:	212d      	movs	r1, #45	; 0x2d
 80011cc:	4608      	mov	r0, r1
 80011ce:	f000 fb55 	bl	800187c <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80011d2:	4622      	mov	r2, r4
 80011d4:	4639      	mov	r1, r7
 80011d6:	48b3      	ldr	r0, [pc, #716]	; (80014a4 <menuActualizar+0x328>)
 80011d8:	f000 fba2 	bl	8001920 <SSD1306_Puts>


		if(y == arriba){
 80011dc:	b9bd      	cbnz	r5, 800120e <menuActualizar+0x92>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80011de:	4bad      	ldr	r3, [pc, #692]	; (8001494 <menuActualizar+0x318>)
 80011e0:	2226      	movs	r2, #38	; 0x26
 80011e2:	705a      	strb	r2, [r3, #1]
		}
		else if(y == abajo){
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
		}

		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 80011e4:	2301      	movs	r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	49aa      	ldr	r1, [pc, #680]	; (8001494 <menuActualizar+0x318>)
 80011ea:	7849      	ldrb	r1, [r1, #1]
 80011ec:	2027      	movs	r0, #39	; 0x27
 80011ee:	f000 fc97 	bl	8001b20 <SSD1306_DrawCircle>


		switch(boton){
 80011f2:	2e01      	cmp	r6, #1
 80011f4:	f040 82ad 	bne.w	8001752 <menuActualizar+0x5d6>
		case true:
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 80011f8:	4ba6      	ldr	r3, [pc, #664]	; (8001494 <menuActualizar+0x318>)
 80011fa:	785b      	ldrb	r3, [r3, #1]
 80011fc:	2b26      	cmp	r3, #38	; 0x26
 80011fe:	d00c      	beq.n	800121a <menuActualizar+0x9e>
				getMenu()->menuActual = juego;
			}
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8001200:	2b30      	cmp	r3, #48	; 0x30
 8001202:	f040 82a6 	bne.w	8001752 <menuActualizar+0x5d6>
				getMenu()->menuActual = puntajes;
 8001206:	4ba3      	ldr	r3, [pc, #652]	; (8001494 <menuActualizar+0x318>)
 8001208:	2203      	movs	r2, #3
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e2a1      	b.n	8001752 <menuActualizar+0x5d6>
		else if(y == abajo){
 800120e:	2d01      	cmp	r5, #1
 8001210:	d1e8      	bne.n	80011e4 <menuActualizar+0x68>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 8001212:	4ba0      	ldr	r3, [pc, #640]	; (8001494 <menuActualizar+0x318>)
 8001214:	2230      	movs	r2, #48	; 0x30
 8001216:	705a      	strb	r2, [r3, #1]
 8001218:	e7e4      	b.n	80011e4 <menuActualizar+0x68>
				getMenu()->menuActual = juego;
 800121a:	4b9e      	ldr	r3, [pc, #632]	; (8001494 <menuActualizar+0x318>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	e297      	b.n	8001752 <menuActualizar+0x5d6>
//--------------------------------------------------------------  JUEGO -----------------------------------------------------------------------------

	case juego:

		//Se grafican el player, aliens y disparo.
		plotPlayer(x, getPlayer());
 8001222:	f7fe ff95 	bl	8000150 <getPlayer>
 8001226:	4601      	mov	r1, r0
 8001228:	9803      	ldr	r0, [sp, #12]
 800122a:	f7fe ffaf 	bl	800018c <plotPlayer>
		plotAliens();
 800122e:	f7fe fff1 	bl	8000214 <plotAliens>
		disparoAliens();
 8001232:	f7ff f981 	bl	8000538 <disparoAliens>

		disparar();
 8001236:	f7ff f8e7 	bl	8000408 <disparar>

		if( getDisparoAliens()->numero_disparos == 0){
 800123a:	f7fe ff91 	bl	8000160 <getDisparoAliens>
 800123e:	78c3      	ldrb	r3, [r0, #3]
 8001240:	b913      	cbnz	r3, 8001248 <menuActualizar+0xcc>

			getMenu()->menuActual = progresion_niveles;
 8001242:	4b94      	ldr	r3, [pc, #592]	; (8001494 <menuActualizar+0x318>)
 8001244:	2202      	movs	r2, #2
 8001246:	701a      	strb	r2, [r3, #0]
		}


		//Prender led si se apretó el boton
		if(boton == true){
 8001248:	2e01      	cmp	r6, #1
 800124a:	f040 8282 	bne.w	8001752 <menuActualizar+0x5d6>

			getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 800124e:	f7fe ff83 	bl	8000158 <getDisparo>
 8001252:	78c4      	ldrb	r4, [r0, #3]
 8001254:	f7fe ff80 	bl	8000158 <getDisparo>
 8001258:	3401      	adds	r4, #1
 800125a:	70c4      	strb	r4, [r0, #3]
 800125c:	e279      	b.n	8001752 <menuActualizar+0x5d6>

//-------------------------------------------------------- PROGRESION DE NIVELES ----------------------------------------------------------------

	case progresion_niveles:

		SSD1306_GotoXY(15, 15);
 800125e:	210f      	movs	r1, #15
 8001260:	4608      	mov	r0, r1
 8001262:	f000 fb0b 	bl	800187c <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJE ACTUAL", &Font_7x10, 1);
 8001266:	2201      	movs	r2, #1
 8001268:	498c      	ldr	r1, [pc, #560]	; (800149c <menuActualizar+0x320>)
 800126a:	488f      	ldr	r0, [pc, #572]	; (80014a8 <menuActualizar+0x32c>)
 800126c:	f000 fb58 	bl	8001920 <SSD1306_Puts>

		//Incremento de la dificultad (Aumento de la velocidad de los aliens y la velocidad de disparo)
		//...

		//Se inicializan las dificultades
		getDificultad()->velocidad_horizontal = 6;
 8001270:	f7fe ff7a 	bl	8000168 <getDificultad>
 8001274:	2306      	movs	r3, #6
 8001276:	7003      	strb	r3, [r0, #0]
		getDificultad()->velocidad_bajada = 2;
 8001278:	f7fe ff76 	bl	8000168 <getDificultad>
 800127c:	2302      	movs	r3, #2
 800127e:	7043      	strb	r3, [r0, #1]
		getDificultad()->velocidad_disparo_aliens = 3;
 8001280:	f7fe ff72 	bl	8000168 <getDificultad>
 8001284:	2303      	movs	r3, #3
 8001286:	7083      	strb	r3, [r0, #2]


		//Se REinicializan las posiciones iniciales del player y de los aliens.
		playerInit();
 8001288:	f7fe ff7a 	bl	8000180 <playerInit>
		InvaderInit();
 800128c:	f7fe ffa2 	bl	80001d4 <InvaderInit>
		disparoInit();
 8001290:	f7ff f8ac 	bl	80003ec <disparoInit>

		if(y == arriba){
 8001294:	2d00      	cmp	r5, #0
 8001296:	f040 825c 	bne.w	8001752 <menuActualizar+0x5d6>

			getMenu()->menuActual = juego;
 800129a:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <menuActualizar+0x318>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e257      	b.n	8001752 <menuActualizar+0x5d6>

//-------------------------------------------------------------- PUNTAJES-----------------------------------------------------------------------------
	case puntajes:

		//Titulo 'Puntajes'
		SSD1306_GotoXY(35, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2023      	movs	r0, #35	; 0x23
 80012a6:	f000 fae9 	bl	800187c <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80012aa:	2201      	movs	r2, #1
 80012ac:	497b      	ldr	r1, [pc, #492]	; (800149c <menuActualizar+0x320>)
 80012ae:	487d      	ldr	r0, [pc, #500]	; (80014a4 <menuActualizar+0x328>)
 80012b0:	f000 fb36 	bl	8001920 <SSD1306_Puts>
 80012b4:	240d      	movs	r4, #13
 80012b6:	2600      	movs	r6, #0

		for(uint8_t j=0; j<5;j++){

			posicion = j*10 + 13;

			SSD1306_GotoXY(15, posicion);
 80012b8:	f04f 090f 	mov.w	r9, #15
			//strcpy(buff_retorno[j], "jdsa");
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 80012bc:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800149c <menuActualizar+0x320>
 80012c0:	2701      	movs	r7, #1
			SSD1306_GotoXY(15, posicion);
 80012c2:	4621      	mov	r1, r4
 80012c4:	4648      	mov	r0, r9
 80012c6:	f000 fad9 	bl	800187c <SSD1306_GotoXY>
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 80012ca:	b2f0      	uxtb	r0, r6
 80012cc:	f7ff fcbc 	bl	8000c48 <getPuntajes>
 80012d0:	463a      	mov	r2, r7
 80012d2:	4641      	mov	r1, r8
 80012d4:	f000 fb24 	bl	8001920 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 80012d8:	3601      	adds	r6, #1
 80012da:	340a      	adds	r4, #10
 80012dc:	b2a4      	uxth	r4, r4
 80012de:	2e05      	cmp	r6, #5
 80012e0:	d1ef      	bne.n	80012c2 <menuActualizar+0x146>
 80012e2:	240d      	movs	r4, #13
 80012e4:	2600      	movs	r6, #0
		//Puntuaciones
		for(uint8_t j=0; j<5;j++){

			posicion = j*10 + 13;

			SSD1306_GotoXY(90, posicion);
 80012e6:	f04f 085a 	mov.w	r8, #90	; 0x5a
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 80012ea:	4f6c      	ldr	r7, [pc, #432]	; (800149c <menuActualizar+0x320>)
			SSD1306_GotoXY(90, posicion);
 80012ec:	4621      	mov	r1, r4
 80012ee:	4640      	mov	r0, r8
 80012f0:	f000 fac4 	bl	800187c <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 80012f4:	b2f0      	uxtb	r0, r6
 80012f6:	f7ff fca7 	bl	8000c48 <getPuntajes>
 80012fa:	220a      	movs	r2, #10
 80012fc:	a909      	add	r1, sp, #36	; 0x24
 80012fe:	88c0      	ldrh	r0, [r0, #6]
 8001300:	f006 f88e 	bl	8007420 <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	4639      	mov	r1, r7
 8001308:	a809      	add	r0, sp, #36	; 0x24
 800130a:	f000 fb09 	bl	8001920 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 800130e:	3601      	adds	r6, #1
 8001310:	340a      	adds	r4, #10
 8001312:	b2a4      	uxth	r4, r4
 8001314:	2e05      	cmp	r6, #5
 8001316:	d1e9      	bne.n	80012ec <menuActualizar+0x170>
		}


		switch(y){
 8001318:	2d00      	cmp	r5, #0
 800131a:	f040 821a 	bne.w	8001752 <menuActualizar+0x5d6>
		case arriba:
				getMenu()->menuActual = menu_principal;
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <menuActualizar+0x318>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
			break;
 8001324:	e215      	b.n	8001752 <menuActualizar+0x5d6>


//-------------------------------------------------------------- GUARDADO DEL NOMBRE-----------------------------------------------------------------------------
	case guardar_nombre:

		char buff_qwerty[] = "qwertyuiop";
 8001326:	4a61      	ldr	r2, [pc, #388]	; (80014ac <menuActualizar+0x330>)
 8001328:	ab06      	add	r3, sp, #24
 800132a:	ca07      	ldmia	r2, {r0, r1, r2}
 800132c:	c303      	stmia	r3!, {r0, r1}
 800132e:	f823 2b02 	strh.w	r2, [r3], #2
 8001332:	0c12      	lsrs	r2, r2, #16
 8001334:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 8001336:	4a5e      	ldr	r2, [pc, #376]	; (80014b0 <menuActualizar+0x334>)
 8001338:	ab09      	add	r3, sp, #36	; 0x24
 800133a:	ca07      	ldmia	r2, {r0, r1, r2}
 800133c:	c303      	stmia	r3!, {r0, r1}
 800133e:	f823 2b02 	strh.w	r2, [r3], #2
 8001342:	0c12      	lsrs	r2, r2, #16
 8001344:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 8001346:	4a5b      	ldr	r2, [pc, #364]	; (80014b4 <menuActualizar+0x338>)
 8001348:	ab04      	add	r3, sp, #16
 800134a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800134e:	e883 0003 	stmia.w	r3, {r0, r1}
		char enter = '<';
		char borrar = 'x';

		uint8_t posicion_x;

		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8001352:	2301      	movs	r3, #1
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	230f      	movs	r3, #15
 8001358:	223c      	movs	r2, #60	; 0x3c
 800135a:	2100      	movs	r1, #0
 800135c:	201e      	movs	r0, #30
 800135e:	f000 fba2 	bl	8001aa6 <SSD1306_DrawRectangle>
		//SSD1306_GotoXY(43, 5);
		//SSD1306_Puts("capaz", &Font_7x10, 1);


			for(uint8_t i=0;i<10;i++){
 8001362:	f10d 0a18 	add.w	sl, sp, #24
 8001366:	f10d 0924 	add.w	r9, sp, #36	; 0x24
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 800136a:	2406      	movs	r4, #6

				posicion_x = i*(12) + 6;

				SSD1306_GotoXY(posicion_x, 23);
 800136c:	f04f 0b17 	mov.w	fp, #23
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 8001370:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800149c <menuActualizar+0x320>
 8001374:	2701      	movs	r7, #1
				SSD1306_GotoXY(posicion_x, 23);
 8001376:	4659      	mov	r1, fp
 8001378:	4620      	mov	r0, r4
 800137a:	f000 fa7f 	bl	800187c <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 800137e:	463a      	mov	r2, r7
 8001380:	4641      	mov	r1, r8
 8001382:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8001386:	f000 fa7f 	bl	8001888 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 800138a:	2126      	movs	r1, #38	; 0x26
 800138c:	4620      	mov	r0, r4
 800138e:	f000 fa75 	bl	800187c <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 8001392:	463a      	mov	r2, r7
 8001394:	4641      	mov	r1, r8
 8001396:	f819 0b01 	ldrb.w	r0, [r9], #1
 800139a:	f000 fa75 	bl	8001888 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 800139e:	340c      	adds	r4, #12
 80013a0:	b2a4      	uxth	r4, r4
 80013a2:	2c7e      	cmp	r4, #126	; 0x7e
 80013a4:	d1e7      	bne.n	8001376 <menuActualizar+0x1fa>
 80013a6:	f10d 070f 	add.w	r7, sp, #15
 80013aa:	241a      	movs	r4, #26

			for(uint8_t i=0;i<7;i++){

				posicion_x = i*(12) + 26;

				SSD1306_GotoXY(posicion_x, 53);
 80013ac:	f04f 0a35 	mov.w	sl, #53	; 0x35
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 80013b0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800149c <menuActualizar+0x320>
 80013b4:	f04f 0801 	mov.w	r8, #1
				SSD1306_GotoXY(posicion_x, 53);
 80013b8:	4651      	mov	r1, sl
 80013ba:	4620      	mov	r0, r4
 80013bc:	f000 fa5e 	bl	800187c <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 80013c0:	4642      	mov	r2, r8
 80013c2:	4649      	mov	r1, r9
 80013c4:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 80013c8:	f000 fa5e 	bl	8001888 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 80013cc:	340c      	adds	r4, #12
 80013ce:	b2a4      	uxth	r4, r4
 80013d0:	2c6e      	cmp	r4, #110	; 0x6e
 80013d2:	d1f1      	bne.n	80013b8 <menuActualizar+0x23c>
			}

			//BOTON BORRAR
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 80013d4:	2401      	movs	r4, #1
 80013d6:	9400      	str	r4, [sp, #0]
 80013d8:	2310      	movs	r3, #16
 80013da:	461a      	mov	r2, r3
 80013dc:	2132      	movs	r1, #50	; 0x32
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 fb61 	bl	8001aa6 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 80013e4:	2135      	movs	r1, #53	; 0x35
 80013e6:	2008      	movs	r0, #8
 80013e8:	f000 fa48 	bl	800187c <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 80013ec:	4f2b      	ldr	r7, [pc, #172]	; (800149c <menuActualizar+0x320>)
 80013ee:	4622      	mov	r2, r4
 80013f0:	4639      	mov	r1, r7
 80013f2:	2078      	movs	r0, #120	; 0x78
 80013f4:	f000 fa48 	bl	8001888 <SSD1306_Putc>

			//BOTON ENTER
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 80013f8:	9400      	str	r4, [sp, #0]
 80013fa:	2310      	movs	r3, #16
 80013fc:	461a      	mov	r2, r3
 80013fe:	2132      	movs	r1, #50	; 0x32
 8001400:	206c      	movs	r0, #108	; 0x6c
 8001402:	f000 fb50 	bl	8001aa6 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 8001406:	2135      	movs	r1, #53	; 0x35
 8001408:	2071      	movs	r0, #113	; 0x71
 800140a:	f000 fa37 	bl	800187c <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 800140e:	4622      	mov	r2, r4
 8001410:	4639      	mov	r1, r7
 8001412:	203c      	movs	r0, #60	; 0x3c
 8001414:	f000 fa38 	bl	8001888 <SSD1306_Putc>

			//Esto es algo "raro" que hice. En lugar de procesar el eje x y el eje y del joystick a la vez, voy a definir una variable mov
			//la cual solo puede tomar el valor de x o el valor de y, es decir, tomara los valores de (arriba, abajo, der,izq, nulo)

			uint8_t mov;
			switch(y){
 8001418:	42a5      	cmp	r5, r4
 800141a:	f000 8139 	beq.w	8001690 <menuActualizar+0x514>
 800141e:	2d04      	cmp	r5, #4
 8001420:	f000 8132 	beq.w	8001688 <menuActualizar+0x50c>
 8001424:	2d00      	cmp	r5, #0
 8001426:	f000 8168 	beq.w	80016fa <menuActualizar+0x57e>

			int8_t div;


			TickType_t Timenow;
			Timenow = xTaskGetTickCount();
 800142a:	f004 ff45 	bl	80062b8 <xTaskGetTickCount>

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <menuActualizar+0x318>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	1ac0      	subs	r0, r0, r3
 8001434:	2896      	cmp	r0, #150	; 0x96
 8001436:	f200 8132 	bhi.w	800169e <menuActualizar+0x522>
 800143a:	e165      	b.n	8001708 <menuActualizar+0x58c>
			switch(mov){
				case arriba:

					switch(getMenu()->GuardarNombre.posicion_y){
						case GUARDADO_POSICION_Y2:
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <menuActualizar+0x318>)
 800143e:	221b      	movs	r2, #27
 8001440:	715a      	strb	r2, [r3, #5]
							break;
 8001442:	2500      	movs	r5, #0
 8001444:	e160      	b.n	8001708 <menuActualizar+0x58c>

						case GUARDADO_POSICION_Y3:

							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <menuActualizar+0x318>)
 8001448:	222a      	movs	r2, #42	; 0x2a
 800144a:	715a      	strb	r2, [r3, #5]

							if(getMenu()->GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	2b1b      	cmp	r3, #27
 8001450:	d917      	bls.n	8001482 <menuActualizar+0x306>

								div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 8001452:	3b1c      	subs	r3, #28
 8001454:	b25b      	sxtb	r3, r3

								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0e      	blt.n	8001478 <menuActualizar+0x2fc>

								else{

									div = div / GUARDADO_OFFSET_X_CURSOR;
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <menuActualizar+0x33c>)
 800145c:	fb82 1203 	smull	r1, r2, r2, r3
 8001460:	17db      	asrs	r3, r3, #31
 8001462:	ebc3 0362 	rsb	r3, r3, r2, asr #1

									 getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 8001466:	3301      	adds	r3, #1
 8001468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	3309      	adds	r3, #9
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <menuActualizar+0x318>)
 8001472:	7113      	strb	r3, [r2, #4]
 8001474:	2500      	movs	r5, #0
 8001476:	e147      	b.n	8001708 <menuActualizar+0x58c>
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <menuActualizar+0x318>)
 800147a:	2209      	movs	r2, #9
 800147c:	711a      	strb	r2, [r3, #4]
 800147e:	2500      	movs	r5, #0
 8001480:	e142      	b.n	8001708 <menuActualizar+0x58c>
									}
								}
							else{
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <menuActualizar+0x318>)
 8001484:	2209      	movs	r2, #9
 8001486:	711a      	strb	r2, [r3, #4]
 8001488:	2500      	movs	r5, #0
 800148a:	e13d      	b.n	8001708 <menuActualizar+0x58c>

				case abajo:

					switch(getMenu()->GuardarNombre.posicion_y){
						case GUARDADO_POSICION_Y1:
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 800148c:	4b01      	ldr	r3, [pc, #4]	; (8001494 <menuActualizar+0x318>)
 800148e:	222a      	movs	r2, #42	; 0x2a
 8001490:	715a      	strb	r2, [r3, #5]
							break;
 8001492:	e139      	b.n	8001708 <menuActualizar+0x58c>
 8001494:	200002b0 	.word	0x200002b0
 8001498:	08008e1c 	.word	0x08008e1c
 800149c:	20000000 	.word	0x20000000
 80014a0:	08008dd8 	.word	0x08008dd8
 80014a4:	08008de0 	.word	0x08008de0
 80014a8:	08008dec 	.word	0x08008dec
 80014ac:	08008dfc 	.word	0x08008dfc
 80014b0:	08008e08 	.word	0x08008e08
 80014b4:	08008e14 	.word	0x08008e14
 80014b8:	2aaaaaab 	.word	0x2aaaaaab
							div = div/GUARDADO_OFFSET_X_CURSOR;

							if(div == 0){
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
							}
							else if(div == 8 || div == 9){
 80014bc:	f1a3 0208 	sub.w	r2, r3, #8
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	2a01      	cmp	r2, #1
 80014c4:	d907      	bls.n	80014d6 <menuActualizar+0x35a>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
							}
							else{
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 80014c6:	3b01      	subs	r3, #1
 80014c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	331c      	adds	r3, #28
 80014d0:	4aa1      	ldr	r2, [pc, #644]	; (8001758 <menuActualizar+0x5dc>)
 80014d2:	7113      	strb	r3, [r2, #4]
 80014d4:	e118      	b.n	8001708 <menuActualizar+0x58c>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 80014d6:	4ba0      	ldr	r3, [pc, #640]	; (8001758 <menuActualizar+0x5dc>)
 80014d8:	2274      	movs	r2, #116	; 0x74
 80014da:	711a      	strb	r2, [r3, #4]
 80014dc:	e114      	b.n	8001708 <menuActualizar+0x58c>
			Timenow = xTaskGetTickCount();

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){

			getMenu()->GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 80014de:	f004 feeb 	bl	80062b8 <xTaskGetTickCount>
 80014e2:	4b9d      	ldr	r3, [pc, #628]	; (8001758 <menuActualizar+0x5dc>)
 80014e4:	6118      	str	r0, [r3, #16]

			switch(mov){
 80014e6:	2d02      	cmp	r5, #2
 80014e8:	d024      	beq.n	8001534 <menuActualizar+0x3b8>
 80014ea:	2d03      	cmp	r5, #3
 80014ec:	f040 8117 	bne.w	800171e <menuActualizar+0x5a2>
				case izquierda:

					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 80014f0:	461a      	mov	r2, r3
 80014f2:	791b      	ldrb	r3, [r3, #4]
 80014f4:	3b0c      	subs	r3, #12
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	7113      	strb	r3, [r2, #4]

					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 80014fa:	7952      	ldrb	r2, [r2, #5]
 80014fc:	2a39      	cmp	r2, #57	; 0x39
 80014fe:	d006      	beq.n	800150e <menuActualizar+0x392>

						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 8001500:	2bfd      	cmp	r3, #253	; 0xfd
 8001502:	f040 810c 	bne.w	800171e <menuActualizar+0x5a2>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 8001506:	4b94      	ldr	r3, [pc, #592]	; (8001758 <menuActualizar+0x5dc>)
 8001508:	2275      	movs	r2, #117	; 0x75
 800150a:	711a      	strb	r2, [r3, #4]
 800150c:	e107      	b.n	800171e <menuActualizar+0x5a2>
						}
					}
					else{
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR) ){
 800150e:	2b10      	cmp	r3, #16
 8001510:	d008      	beq.n	8001524 <menuActualizar+0x3a8>

							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
						}
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 8001512:	2b68      	cmp	r3, #104	; 0x68
 8001514:	d00a      	beq.n	800152c <menuActualizar+0x3b0>

							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
						}

						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	f040 8101 	bne.w	800171e <menuActualizar+0x5a2>

							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 800151c:	4b8e      	ldr	r3, [pc, #568]	; (8001758 <menuActualizar+0x5dc>)
 800151e:	220b      	movs	r2, #11
 8001520:	711a      	strb	r2, [r3, #4]
 8001522:	e0fc      	b.n	800171e <menuActualizar+0x5a2>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001524:	4b8c      	ldr	r3, [pc, #560]	; (8001758 <menuActualizar+0x5dc>)
 8001526:	220b      	movs	r2, #11
 8001528:	711a      	strb	r2, [r3, #4]
 800152a:	e0f8      	b.n	800171e <menuActualizar+0x5a2>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 800152c:	4b8a      	ldr	r3, [pc, #552]	; (8001758 <menuActualizar+0x5dc>)
 800152e:	2264      	movs	r2, #100	; 0x64
 8001530:	711a      	strb	r2, [r3, #4]
 8001532:	e0f4      	b.n	800171e <menuActualizar+0x5a2>
					}

					break;
				case derecha:

					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 8001534:	4a88      	ldr	r2, [pc, #544]	; (8001758 <menuActualizar+0x5dc>)
 8001536:	7913      	ldrb	r3, [r2, #4]
 8001538:	330c      	adds	r3, #12
 800153a:	b2db      	uxtb	r3, r3
 800153c:	7113      	strb	r3, [r2, #4]

					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 800153e:	7952      	ldrb	r2, [r2, #5]
 8001540:	2a39      	cmp	r2, #57	; 0x39
 8001542:	d006      	beq.n	8001552 <menuActualizar+0x3d6>

						if(getMenu()->GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 8001544:	2b75      	cmp	r3, #117	; 0x75
 8001546:	f240 80ea 	bls.w	800171e <menuActualizar+0x5a2>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800154a:	4b83      	ldr	r3, [pc, #524]	; (8001758 <menuActualizar+0x5dc>)
 800154c:	2209      	movs	r2, #9
 800154e:	711a      	strb	r2, [r3, #4]
 8001550:	e0e5      	b.n	800171e <menuActualizar+0x5a2>
						}
					}
					else{

						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 8001552:	2b70      	cmp	r3, #112	; 0x70
 8001554:	d008      	beq.n	8001568 <menuActualizar+0x3ec>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
						}
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 8001556:	2b80      	cmp	r3, #128	; 0x80
 8001558:	d00a      	beq.n	8001570 <menuActualizar+0x3f4>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
						}
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 800155a:	2b17      	cmp	r3, #23
 800155c:	f040 80df 	bne.w	800171e <menuActualizar+0x5a2>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 8001560:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <menuActualizar+0x5dc>)
 8001562:	221c      	movs	r2, #28
 8001564:	711a      	strb	r2, [r3, #4]
 8001566:	e0da      	b.n	800171e <menuActualizar+0x5a2>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001568:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <menuActualizar+0x5dc>)
 800156a:	2274      	movs	r2, #116	; 0x74
 800156c:	711a      	strb	r2, [r3, #4]
 800156e:	e0d6      	b.n	800171e <menuActualizar+0x5a2>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001570:	4b79      	ldr	r3, [pc, #484]	; (8001758 <menuActualizar+0x5dc>)
 8001572:	220b      	movs	r2, #11
 8001574:	711a      	strb	r2, [r3, #4]
 8001576:	e0d2      	b.n	800171e <menuActualizar+0x5a2>
			Timenow = xTaskGetTickCount();

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){

			getMenu()->GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 8001578:	f004 fe9e 	bl	80062b8 <xTaskGetTickCount>
 800157c:	4b76      	ldr	r3, [pc, #472]	; (8001758 <menuActualizar+0x5dc>)
 800157e:	6198      	str	r0, [r3, #24]

			//uint8_t indice_debug;
			//uint8_t buffer_debug[6];


			if((boton == true) && (getMenu()->GuardarNombre.indice <= 5)){
 8001580:	2e01      	cmp	r6, #1
 8001582:	f040 80d6 	bne.w	8001732 <menuActualizar+0x5b6>
 8001586:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800158a:	2b05      	cmp	r3, #5
 800158c:	f300 80d1 	bgt.w	8001732 <menuActualizar+0x5b6>

						if((getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 8001590:	4a71      	ldr	r2, [pc, #452]	; (8001758 <menuActualizar+0x5dc>)
 8001592:	7951      	ldrb	r1, [r2, #5]
 8001594:	2939      	cmp	r1, #57	; 0x39
 8001596:	d02d      	beq.n	80015f4 <menuActualizar+0x478>

							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 8001598:	7912      	ldrb	r2, [r2, #4]
 800159a:	3a09      	subs	r2, #9
 800159c:	b252      	sxtb	r2, r2
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 800159e:	486f      	ldr	r0, [pc, #444]	; (800175c <menuActualizar+0x5e0>)
 80015a0:	fb80 4002 	smull	r4, r0, r0, r2
 80015a4:	17d2      	asrs	r2, r2, #31
 80015a6:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 80015aa:	b252      	sxtb	r2, r2

							if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 80015ac:	291b      	cmp	r1, #27
 80015ae:	d00c      	beq.n	80015ca <menuActualizar+0x44e>
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_qwerty[div];
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;

							}
							else if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 80015b0:	292a      	cmp	r1, #42	; 0x2a
 80015b2:	f040 80be 	bne.w	8001732 <menuActualizar+0x5b6>
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_asdf[div];
 80015b6:	4968      	ldr	r1, [pc, #416]	; (8001758 <menuActualizar+0x5dc>)
 80015b8:	18c8      	adds	r0, r1, r3
 80015ba:	3230      	adds	r2, #48	; 0x30
 80015bc:	446a      	add	r2, sp
 80015be:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80015c2:	7182      	strb	r2, [r0, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 80015c4:	3301      	adds	r3, #1
 80015c6:	730b      	strb	r3, [r1, #12]
 80015c8:	e008      	b.n	80015dc <menuActualizar+0x460>
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_qwerty[div];
 80015ca:	4963      	ldr	r1, [pc, #396]	; (8001758 <menuActualizar+0x5dc>)
 80015cc:	18c8      	adds	r0, r1, r3
 80015ce:	3230      	adds	r2, #48	; 0x30
 80015d0:	446a      	add	r2, sp
 80015d2:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80015d6:	7182      	strb	r2, [r0, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 80015d8:	3301      	adds	r3, #1
 80015da:	730b      	strb	r3, [r1, #12]
								}


							}

						if(getMenu()->GuardarNombre.indice > 5){
 80015dc:	4b5e      	ldr	r3, [pc, #376]	; (8001758 <menuActualizar+0x5dc>)
 80015de:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80015e2:	2b05      	cmp	r3, #5
 80015e4:	f340 80a5 	ble.w	8001732 <menuActualizar+0x5b6>
							getMenu()->GuardarNombre.indice = 5;
 80015e8:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <menuActualizar+0x5dc>)
 80015ea:	2205      	movs	r2, #5
 80015ec:	731a      	strb	r2, [r3, #12]
							getMenu()->GuardarNombre.nombre[5] = '\0';
 80015ee:	2200      	movs	r2, #0
 80015f0:	72da      	strb	r2, [r3, #11]
 80015f2:	e09e      	b.n	8001732 <menuActualizar+0x5b6>
							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 80015f4:	4a58      	ldr	r2, [pc, #352]	; (8001758 <menuActualizar+0x5dc>)
 80015f6:	7912      	ldrb	r2, [r2, #4]
 80015f8:	3a1c      	subs	r2, #28
 80015fa:	b252      	sxtb	r2, r2
							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	db0e      	blt.n	800161e <menuActualizar+0x4a2>
								div = div / GUARDADO_OFFSET_X_CURSOR;
 8001600:	210c      	movs	r1, #12
 8001602:	fb92 f2f1 	sdiv	r2, r2, r1
									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 8001606:	2a07      	cmp	r2, #7
 8001608:	d013      	beq.n	8001632 <menuActualizar+0x4b6>
										getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_zxc[div];
 800160a:	4953      	ldr	r1, [pc, #332]	; (8001758 <menuActualizar+0x5dc>)
 800160c:	18c8      	adds	r0, r1, r3
 800160e:	3230      	adds	r2, #48	; 0x30
 8001610:	446a      	add	r2, sp
 8001612:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001616:	7182      	strb	r2, [r0, #6]
										getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 8001618:	3301      	adds	r3, #1
 800161a:	730b      	strb	r3, [r1, #12]
 800161c:	e7de      	b.n	80015dc <menuActualizar+0x460>
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice - 1;
 800161e:	3b01      	subs	r3, #1
 8001620:	b25b      	sxtb	r3, r3
 8001622:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001626:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <menuActualizar+0x5dc>)
 8001628:	7313      	strb	r3, [r2, #12]
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = '\0';
 800162a:	441a      	add	r2, r3
 800162c:	2300      	movs	r3, #0
 800162e:	7193      	strb	r3, [r2, #6]
 8001630:	e7d4      	b.n	80015dc <menuActualizar+0x460>
										if((getMenu()->GuardarNombre.indice != 0 )){
 8001632:	2b00      	cmp	r3, #0
 8001634:	d07d      	beq.n	8001732 <menuActualizar+0x5b6>
											strcpy(getPuntajes(4)->nombre,getMenu()->GuardarNombre.nombre);
 8001636:	2004      	movs	r0, #4
 8001638:	f7ff fb06 	bl	8000c48 <getPuntajes>
 800163c:	4948      	ldr	r1, [pc, #288]	; (8001760 <menuActualizar+0x5e4>)
 800163e:	f006 f8f2 	bl	8007826 <strcpy>
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 8001642:	2101      	movs	r1, #1
 8001644:	4b47      	ldr	r3, [pc, #284]	; (8001764 <menuActualizar+0x5e8>)
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f003 fa6e 	bl	8004b28 <osEventFlagsSet>
										    uint32_t flags = osEventFlagsWait(notificationFlag2, NOTIFICATION_VALUE2, osFlagsWaitAny, osWaitForever);
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
 8001650:	2200      	movs	r2, #0
 8001652:	2102      	movs	r1, #2
 8001654:	4844      	ldr	r0, [pc, #272]	; (8001768 <menuActualizar+0x5ec>)
 8001656:	6800      	ldr	r0, [r0, #0]
 8001658:	f003 faa4 	bl	8004ba4 <osEventFlagsWait>
										    if (flags == NOTIFICATION_VALUE2){
 800165c:	2802      	cmp	r0, #2
 800165e:	d1bd      	bne.n	80015dc <menuActualizar+0x460>
										    	getMenu()->menuActual = puntajes;
 8001660:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <menuActualizar+0x5dc>)
 8001662:	2203      	movs	r2, #3
 8001664:	701a      	strb	r2, [r3, #0]
 8001666:	e7b9      	b.n	80015dc <menuActualizar+0x460>
	case game_over:

		//SSD1306_GotoXY(35, 25);
		//SSD1306_Puts("GAME OVER", &Font_7x10, 1);

		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 8001668:	2301      	movs	r3, #1
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2328      	movs	r3, #40	; 0x28
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	4a3e      	ldr	r2, [pc, #248]	; (800176c <menuActualizar+0x5f0>)
 8001674:	210a      	movs	r1, #10
 8001676:	200f      	movs	r0, #15
 8001678:	f000 f8b4 	bl	80017e4 <SSD1306_DrawBitmap>

		if(y == arriba){
 800167c:	2d00      	cmp	r5, #0
 800167e:	d168      	bne.n	8001752 <menuActualizar+0x5d6>

			getMenu()->menuActual = guardar_nombre;
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <menuActualizar+0x5dc>)
 8001682:	2204      	movs	r2, #4
 8001684:	701a      	strb	r2, [r3, #0]
		break;
	default:
		break;
	}

}
 8001686:	e064      	b.n	8001752 <menuActualizar+0x5d6>
			Timenow = xTaskGetTickCount();
 8001688:	f004 fe16 	bl	80062b8 <xTaskGetTickCount>
					mov = x;
 800168c:	9d03      	ldr	r5, [sp, #12]
 800168e:	e03b      	b.n	8001708 <menuActualizar+0x58c>
			Timenow = xTaskGetTickCount();
 8001690:	f004 fe12 	bl	80062b8 <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <menuActualizar+0x5dc>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	1ac3      	subs	r3, r0, r3
 800169a:	2b96      	cmp	r3, #150	; 0x96
 800169c:	d934      	bls.n	8001708 <menuActualizar+0x58c>
				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 800169e:	f004 fe0b 	bl	80062b8 <xTaskGetTickCount>
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <menuActualizar+0x5dc>)
 80016a4:	6158      	str	r0, [r3, #20]
			switch(mov){
 80016a6:	b1f5      	cbz	r5, 80016e6 <menuActualizar+0x56a>
					switch(getMenu()->GuardarNombre.posicion_y){
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <menuActualizar+0x5dc>)
 80016aa:	795b      	ldrb	r3, [r3, #5]
 80016ac:	2b1b      	cmp	r3, #27
 80016ae:	f43f aeed 	beq.w	800148c <menuActualizar+0x310>
 80016b2:	2b2a      	cmp	r3, #42	; 0x2a
 80016b4:	d128      	bne.n	8001708 <menuActualizar+0x58c>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <menuActualizar+0x5dc>)
 80016b8:	2239      	movs	r2, #57	; 0x39
 80016ba:	715a      	strb	r2, [r3, #5]
							div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 80016bc:	791b      	ldrb	r3, [r3, #4]
 80016be:	3b09      	subs	r3, #9
 80016c0:	b25b      	sxtb	r3, r3
							div = div/GUARDADO_OFFSET_X_CURSOR;
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <menuActualizar+0x5e0>)
 80016c4:	fb82 1203 	smull	r1, r2, r2, r3
 80016c8:	17db      	asrs	r3, r3, #31
 80016ca:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 80016ce:	b25b      	sxtb	r3, r3
							if(div == 0){
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f47f aef3 	bne.w	80014bc <menuActualizar+0x340>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <menuActualizar+0x5dc>)
 80016d8:	220b      	movs	r2, #11
 80016da:	711a      	strb	r2, [r3, #4]
 80016dc:	e014      	b.n	8001708 <menuActualizar+0x58c>
				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 80016de:	f004 fdeb 	bl	80062b8 <xTaskGetTickCount>
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <menuActualizar+0x5dc>)
 80016e4:	6158      	str	r0, [r3, #20]
					switch(getMenu()->GuardarNombre.posicion_y){
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <menuActualizar+0x5dc>)
 80016e8:	795b      	ldrb	r3, [r3, #5]
 80016ea:	2b2a      	cmp	r3, #42	; 0x2a
 80016ec:	f43f aea6 	beq.w	800143c <menuActualizar+0x2c0>
 80016f0:	2b39      	cmp	r3, #57	; 0x39
 80016f2:	f43f aea8 	beq.w	8001446 <menuActualizar+0x2ca>
 80016f6:	2500      	movs	r5, #0
 80016f8:	e006      	b.n	8001708 <menuActualizar+0x58c>
			Timenow = xTaskGetTickCount();
 80016fa:	f004 fddd 	bl	80062b8 <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <menuActualizar+0x5dc>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	1ac0      	subs	r0, r0, r3
 8001704:	2896      	cmp	r0, #150	; 0x96
 8001706:	d8ea      	bhi.n	80016de <menuActualizar+0x562>
			Timenow = xTaskGetTickCount();
 8001708:	f004 fdd6 	bl	80062b8 <xTaskGetTickCount>
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <menuActualizar+0x5dc>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	1ac0      	subs	r0, r0, r3
 8001712:	2864      	cmp	r0, #100	; 0x64
 8001714:	d903      	bls.n	800171e <menuActualizar+0x5a2>
 8001716:	9b03      	ldr	r3, [sp, #12]
 8001718:	2b04      	cmp	r3, #4
 800171a:	f47f aee0 	bne.w	80014de <menuActualizar+0x362>
			Timenow = xTaskGetTickCount();
 800171e:	f004 fdcb 	bl	80062b8 <xTaskGetTickCount>
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <menuActualizar+0x5dc>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	1ac0      	subs	r0, r0, r3
 8001728:	2864      	cmp	r0, #100	; 0x64
 800172a:	d902      	bls.n	8001732 <menuActualizar+0x5b6>
 800172c:	2e00      	cmp	r6, #0
 800172e:	f47f af23 	bne.w	8001578 <menuActualizar+0x3fc>
				SSD1306_DrawFilledCircle(getMenu()->GuardarNombre.posicion_x,  getMenu()->GuardarNombre.posicion_y, 5, 1);
 8001732:	4c09      	ldr	r4, [pc, #36]	; (8001758 <menuActualizar+0x5dc>)
 8001734:	2301      	movs	r3, #1
 8001736:	2205      	movs	r2, #5
 8001738:	7961      	ldrb	r1, [r4, #5]
 800173a:	7920      	ldrb	r0, [r4, #4]
 800173c:	f000 fa8b 	bl	8001c56 <SSD1306_DrawFilledCircle>
				SSD1306_GotoXY(43, 5);
 8001740:	2105      	movs	r1, #5
 8001742:	202b      	movs	r0, #43	; 0x2b
 8001744:	f000 f89a 	bl	800187c <SSD1306_GotoXY>
				SSD1306_Puts(getMenu()->GuardarNombre.nombre, &Font_7x10, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	4909      	ldr	r1, [pc, #36]	; (8001770 <menuActualizar+0x5f4>)
 800174c:	1da0      	adds	r0, r4, #6
 800174e:	f000 f8e7 	bl	8001920 <SSD1306_Puts>
}
 8001752:	b00d      	add	sp, #52	; 0x34
 8001754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001758:	200002b0 	.word	0x200002b0
 800175c:	2aaaaaab 	.word	0x2aaaaaab
 8001760:	200002b6 	.word	0x200002b6
 8001764:	2000027c 	.word	0x2000027c
 8001768:	20000280 	.word	0x20000280
 800176c:	08008f1c 	.word	0x08008f1c
 8001770:	20000000 	.word	0x20000000

08001774 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001774:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001776:	2800      	cmp	r0, #0
 8001778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177c:	bf0c      	ite	eq
 800177e:	2100      	moveq	r1, #0
 8001780:	21ff      	movne	r1, #255	; 0xff
 8001782:	4802      	ldr	r0, [pc, #8]	; (800178c <SSD1306_Fill+0x18>)
 8001784:	f005 ffd3 	bl	800772e <memset>
}
 8001788:	bd08      	pop	{r3, pc}
 800178a:	bf00      	nop
 800178c:	200002d4 	.word	0x200002d4

08001790 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001790:	287f      	cmp	r0, #127	; 0x7f
 8001792:	d822      	bhi.n	80017da <SSD1306_DrawPixel+0x4a>
		x >= SSD1306_WIDTH ||
 8001794:	293f      	cmp	r1, #63	; 0x3f
 8001796:	d820      	bhi.n	80017da <SSD1306_DrawPixel+0x4a>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <SSD1306_DrawPixel+0x4c>)
 800179a:	791b      	ldrb	r3, [r3, #4]
 800179c:	b17b      	cbz	r3, 80017be <SSD1306_DrawPixel+0x2e>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800179e:	b182      	cbz	r2, 80017c2 <SSD1306_DrawPixel+0x32>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017a0:	b410      	push	{r4}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017a2:	08cb      	lsrs	r3, r1, #3
 80017a4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80017a8:	4c0d      	ldr	r4, [pc, #52]	; (80017e0 <SSD1306_DrawPixel+0x50>)
 80017aa:	f001 0107 	and.w	r1, r1, #7
 80017ae:	2201      	movs	r2, #1
 80017b0:	408a      	lsls	r2, r1
 80017b2:	5c23      	ldrb	r3, [r4, r0]
 80017b4:	ea23 0302 	bic.w	r3, r3, r2
 80017b8:	5423      	strb	r3, [r4, r0]
	}
}
 80017ba:	bc10      	pop	{r4}
 80017bc:	4770      	bx	lr
	if (color == SSD1306_COLOR_WHITE) {
 80017be:	2a01      	cmp	r2, #1
 80017c0:	d1ee      	bne.n	80017a0 <SSD1306_DrawPixel+0x10>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017c2:	08cb      	lsrs	r3, r1, #3
 80017c4:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SSD1306_DrawPixel+0x50>)
 80017ca:	f001 0107 	and.w	r1, r1, #7
 80017ce:	2301      	movs	r3, #1
 80017d0:	408b      	lsls	r3, r1
 80017d2:	5c11      	ldrb	r1, [r2, r0]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	5413      	strb	r3, [r2, r0]
 80017d8:	4770      	bx	lr
 80017da:	4770      	bx	lr
 80017dc:	200002cc 	.word	0x200002cc
 80017e0:	200002d4 	.word	0x200002d4

080017e4 <SSD1306_DrawBitmap>:
{
 80017e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e8:	b085      	sub	sp, #20
 80017ea:	4683      	mov	fp, r0
 80017ec:	4688      	mov	r8, r1
 80017ee:	9203      	str	r2, [sp, #12]
 80017f0:	461e      	mov	r6, r3
 80017f2:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80017f6:	9301      	str	r3, [sp, #4]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80017f8:	1df3      	adds	r3, r6, #7
 80017fa:	bf48      	it	mi
 80017fc:	3307      	addmi	r3, #7
 80017fe:	10db      	asrs	r3, r3, #3
 8001800:	9302      	str	r3, [sp, #8]
    for(int16_t j=0; j<h; j++, y++)
 8001802:	9b01      	ldr	r3, [sp, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dd36      	ble.n	8001876 <SSD1306_DrawBitmap+0x92>
 8001808:	2700      	movs	r7, #0
    uint8_t byte = 0;
 800180a:	463d      	mov	r5, r7
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800180c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	e026      	b.n	8001862 <SSD1306_DrawBitmap+0x7e>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001814:	461a      	mov	r2, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfb8      	it	lt
 800181a:	1dda      	addlt	r2, r3, #7
 800181c:	f342 02cf 	sbfx	r2, r2, #3, #16
 8001820:	f819 5002 	ldrb.w	r5, [r9, r2]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001824:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001828:	d10a      	bne.n	8001840 <SSD1306_DrawBitmap+0x5c>
        for(int16_t i=0; i<w; i++)
 800182a:	3401      	adds	r4, #1
 800182c:	b223      	sxth	r3, r4
 800182e:	42b3      	cmp	r3, r6
 8001830:	d00e      	beq.n	8001850 <SSD1306_DrawBitmap+0x6c>
            if(i & 7)
 8001832:	b29c      	uxth	r4, r3
 8001834:	f013 0f07 	tst.w	r3, #7
 8001838:	d0ec      	beq.n	8001814 <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 800183a:	006d      	lsls	r5, r5, #1
 800183c:	b2ed      	uxtb	r5, r5
 800183e:	e7f1      	b.n	8001824 <SSD1306_DrawBitmap+0x40>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001840:	eb04 000b 	add.w	r0, r4, fp
 8001844:	9a00      	ldr	r2, [sp, #0]
 8001846:	4651      	mov	r1, sl
 8001848:	b280      	uxth	r0, r0
 800184a:	f7ff ffa1 	bl	8001790 <SSD1306_DrawPixel>
 800184e:	e7ec      	b.n	800182a <SSD1306_DrawBitmap+0x46>
    for(int16_t j=0; j<h; j++, y++)
 8001850:	3701      	adds	r7, #1
 8001852:	b23f      	sxth	r7, r7
 8001854:	f108 0801 	add.w	r8, r8, #1
 8001858:	fa0f f888 	sxth.w	r8, r8
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	42bb      	cmp	r3, r7
 8001860:	dd09      	ble.n	8001876 <SSD1306_DrawBitmap+0x92>
        for(int16_t i=0; i<w; i++)
 8001862:	2e00      	cmp	r6, #0
 8001864:	ddf4      	ble.n	8001850 <SSD1306_DrawBitmap+0x6c>
 8001866:	2300      	movs	r3, #0
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001868:	9a03      	ldr	r2, [sp, #12]
 800186a:	9902      	ldr	r1, [sp, #8]
 800186c:	fb07 2901 	mla	r9, r7, r1, r2
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001870:	fa1f fa88 	uxth.w	sl, r8
 8001874:	e7dd      	b.n	8001832 <SSD1306_DrawBitmap+0x4e>
}
 8001876:	b005      	add	sp, #20
 8001878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800187c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800187c:	4b01      	ldr	r3, [pc, #4]	; (8001884 <SSD1306_GotoXY+0x8>)
 800187e:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001880:	8059      	strh	r1, [r3, #2]
}
 8001882:	4770      	bx	lr
 8001884:	200002cc 	.word	0x200002cc

08001888 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800188c:	b083      	sub	sp, #12
 800188e:	9001      	str	r0, [sp, #4]
 8001890:	4691      	mov	r9, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <SSD1306_Putc+0x94>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	780b      	ldrb	r3, [r1, #0]
 800189c:	4413      	add	r3, r2
	if (
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	dc38      	bgt.n	8001914 <SSD1306_Putc+0x8c>
 80018a2:	460e      	mov	r6, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <SSD1306_Putc+0x94>)
 80018a6:	885f      	ldrh	r7, [r3, #2]
 80018a8:	784b      	ldrb	r3, [r1, #1]
 80018aa:	18fa      	adds	r2, r7, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018ac:	2a3f      	cmp	r2, #63	; 0x3f
 80018ae:	dc33      	bgt.n	8001918 <SSD1306_Putc+0x90>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80018b0:	b333      	cbz	r3, 8001900 <SSD1306_Putc+0x78>
 80018b2:	f04f 0a00 	mov.w	sl, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80018b6:	f1a0 0b20 	sub.w	fp, r0, #32
 80018ba:	fb03 a30b 	mla	r3, r3, fp, sl
 80018be:	6872      	ldr	r2, [r6, #4]
 80018c0:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80018c4:	7833      	ldrb	r3, [r6, #0]
 80018c6:	b1a3      	cbz	r3, 80018f2 <SSD1306_Putc+0x6a>
 80018c8:	9c00      	ldr	r4, [sp, #0]
 80018ca:	2500      	movs	r5, #0
			if ((b << j) & 0x8000) {
 80018cc:	fa08 f305 	lsl.w	r3, r8, r5
 80018d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80018d4:	bf12      	itee	ne
 80018d6:	464a      	movne	r2, r9
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80018d8:	fab9 f289 	clzeq	r2, r9
 80018dc:	0952      	lsreq	r2, r2, #5
 80018de:	4639      	mov	r1, r7
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ff55 	bl	8001790 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018e6:	3501      	adds	r5, #1
 80018e8:	3401      	adds	r4, #1
 80018ea:	b2a4      	uxth	r4, r4
 80018ec:	7833      	ldrb	r3, [r6, #0]
 80018ee:	42ab      	cmp	r3, r5
 80018f0:	d8ec      	bhi.n	80018cc <SSD1306_Putc+0x44>
	for (i = 0; i < Font->FontHeight; i++) {
 80018f2:	f10a 0a01 	add.w	sl, sl, #1
 80018f6:	7873      	ldrb	r3, [r6, #1]
 80018f8:	3701      	adds	r7, #1
 80018fa:	b2bf      	uxth	r7, r7
 80018fc:	4553      	cmp	r3, sl
 80018fe:	d8dc      	bhi.n	80018ba <SSD1306_Putc+0x32>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001900:	7833      	ldrb	r3, [r6, #0]
 8001902:	9a00      	ldr	r2, [sp, #0]
 8001904:	441a      	add	r2, r3
 8001906:	4613      	mov	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <SSD1306_Putc+0x94>)
 800190a:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 800190c:	9801      	ldr	r0, [sp, #4]
}
 800190e:	b003      	add	sp, #12
 8001910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001914:	2000      	movs	r0, #0
 8001916:	e7fa      	b.n	800190e <SSD1306_Putc+0x86>
 8001918:	2000      	movs	r0, #0
 800191a:	e7f8      	b.n	800190e <SSD1306_Putc+0x86>
 800191c:	200002cc 	.word	0x200002cc

08001920 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	4604      	mov	r4, r0
 8001924:	460e      	mov	r6, r1
 8001926:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8001928:	7800      	ldrb	r0, [r0, #0]
 800192a:	b158      	cbz	r0, 8001944 <SSD1306_Puts+0x24>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800192c:	462a      	mov	r2, r5
 800192e:	4631      	mov	r1, r6
 8001930:	f7ff ffaa 	bl	8001888 <SSD1306_Putc>
 8001934:	4603      	mov	r3, r0
 8001936:	7820      	ldrb	r0, [r4, #0]
 8001938:	4283      	cmp	r3, r0
 800193a:	d103      	bne.n	8001944 <SSD1306_Puts+0x24>
	while (*str) {
 800193c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001940:	2800      	cmp	r0, #0
 8001942:	d1f3      	bne.n	800192c <SSD1306_Puts+0xc>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001944:	bd70      	pop	{r4, r5, r6, pc}

08001946 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800194a:	b085      	sub	sp, #20
 800194c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001950:	287f      	cmp	r0, #127	; 0x7f
 8001952:	bf28      	it	cs
 8001954:	207f      	movcs	r0, #127	; 0x7f
 8001956:	4605      	mov	r5, r0
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8001958:	2a7f      	cmp	r2, #127	; 0x7f
 800195a:	bf28      	it	cs
 800195c:	227f      	movcs	r2, #127	; 0x7f
 800195e:	4690      	mov	r8, r2
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001960:	293f      	cmp	r1, #63	; 0x3f
 8001962:	bf28      	it	cs
 8001964:	213f      	movcs	r1, #63	; 0x3f
 8001966:	460c      	mov	r4, r1
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001968:	2b3f      	cmp	r3, #63	; 0x3f
 800196a:	bf28      	it	cs
 800196c:	233f      	movcs	r3, #63	; 0x3f
 800196e:	9301      	str	r3, [sp, #4]
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001970:	4290      	cmp	r0, r2
 8001972:	d21c      	bcs.n	80019ae <SSD1306_DrawLine+0x68>
 8001974:	eba2 0a00 	sub.w	sl, r2, r0
 8001978:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800197c:	4299      	cmp	r1, r3
 800197e:	d326      	bcc.n	80019ce <SSD1306_DrawLine+0x88>
 8001980:	9b01      	ldr	r3, [sp, #4]
 8001982:	1ae7      	subs	r7, r4, r3
 8001984:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001986:	4545      	cmp	r5, r8
 8001988:	d230      	bcs.n	80019ec <SSD1306_DrawLine+0xa6>
 800198a:	2301      	movs	r3, #1
 800198c:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	9302      	str	r3, [sp, #8]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001994:	4557      	cmp	r7, sl
 8001996:	da2e      	bge.n	80019f6 <SSD1306_DrawLine+0xb0>
 8001998:	eb0a 76da 	add.w	r6, sl, sl, lsr #31
 800199c:	1076      	asrs	r6, r6, #1

	if (dx == 0) {
 800199e:	f1ba 0f00 	cmp.w	sl, #0
 80019a2:	d02e      	beq.n	8001a02 <SSD1306_DrawLine+0xbc>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 80019a4:	2f00      	cmp	r7, #0
 80019a6:	d047      	beq.n	8001a38 <SSD1306_DrawLine+0xf2>
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 80019a8:	f1ca 0b00 	rsb	fp, sl, #0
 80019ac:	e06c      	b.n	8001a88 <SSD1306_DrawLine+0x142>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80019ae:	eba0 0a02 	sub.w	sl, r0, r2
 80019b2:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80019b6:	9b01      	ldr	r3, [sp, #4]
 80019b8:	4299      	cmp	r1, r3
 80019ba:	d2e1      	bcs.n	8001980 <SSD1306_DrawLine+0x3a>
 80019bc:	9b01      	ldr	r3, [sp, #4]
 80019be:	1a5f      	subs	r7, r3, r1
 80019c0:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 80019c8:	2301      	movs	r3, #1
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	e7e2      	b.n	8001994 <SSD1306_DrawLine+0x4e>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80019ce:	9b01      	ldr	r3, [sp, #4]
 80019d0:	1a5f      	subs	r7, r3, r1
 80019d2:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 80019d4:	4290      	cmp	r0, r2
 80019d6:	d203      	bcs.n	80019e0 <SSD1306_DrawLine+0x9a>
 80019d8:	2301      	movs	r3, #1
 80019da:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	e7d9      	b.n	8001994 <SSD1306_DrawLine+0x4e>
	sx = (x0 < x1) ? 1 : -1; 
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295
 80019e4:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 80019e6:	2301      	movs	r3, #1
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	e7d3      	b.n	8001994 <SSD1306_DrawLine+0x4e>
	sx = (x0 < x1) ? 1 : -1; 
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 80019f2:	9302      	str	r3, [sp, #8]
 80019f4:	e7ce      	b.n	8001994 <SSD1306_DrawLine+0x4e>
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019f6:	eb07 76d7 	add.w	r6, r7, r7, lsr #31
 80019fa:	1076      	asrs	r6, r6, #1
 80019fc:	4276      	negs	r6, r6
 80019fe:	b236      	sxth	r6, r6
 8001a00:	e7cd      	b.n	800199e <SSD1306_DrawLine+0x58>
		if (y1 < y0) {
 8001a02:	9a01      	ldr	r2, [sp, #4]
 8001a04:	4294      	cmp	r4, r2
 8001a06:	d902      	bls.n	8001a0e <SSD1306_DrawLine+0xc8>
 8001a08:	4623      	mov	r3, r4
			y0 = tmp;
 8001a0a:	4614      	mov	r4, r2
			y1 = y0;
 8001a0c:	9301      	str	r3, [sp, #4]
		if (x1 < x0) {
 8001a0e:	45a8      	cmp	r8, r5
 8001a10:	bf28      	it	cs
 8001a12:	46a8      	movcs	r8, r5
 8001a14:	fa1f f888 	uxth.w	r8, r8
		for (i = y0; i <= y1; i++) {
 8001a18:	b224      	sxth	r4, r4
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	461d      	mov	r5, r3
 8001a1e:	429c      	cmp	r4, r3
 8001a20:	dc26      	bgt.n	8001a70 <SSD1306_DrawLine+0x12a>
			SSD1306_DrawPixel(x0, i, c);
 8001a22:	b2a4      	uxth	r4, r4
 8001a24:	464a      	mov	r2, r9
 8001a26:	4621      	mov	r1, r4
 8001a28:	4640      	mov	r0, r8
 8001a2a:	f7ff feb1 	bl	8001790 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001a2e:	3401      	adds	r4, #1
 8001a30:	b224      	sxth	r4, r4
 8001a32:	42ac      	cmp	r4, r5
 8001a34:	ddf5      	ble.n	8001a22 <SSD1306_DrawLine+0xdc>
 8001a36:	e01b      	b.n	8001a70 <SSD1306_DrawLine+0x12a>
		if (y1 < y0) {
 8001a38:	9b01      	ldr	r3, [sp, #4]
 8001a3a:	429c      	cmp	r4, r3
 8001a3c:	bf28      	it	cs
 8001a3e:	461c      	movcs	r4, r3
 8001a40:	b2a4      	uxth	r4, r4
		if (x1 < x0) {
 8001a42:	4545      	cmp	r5, r8
 8001a44:	d902      	bls.n	8001a4c <SSD1306_DrawLine+0x106>
 8001a46:	462b      	mov	r3, r5
			x0 = tmp;
 8001a48:	4645      	mov	r5, r8
			x1 = x0;
 8001a4a:	4698      	mov	r8, r3
		for (i = x0; i <= x1; i++) {
 8001a4c:	b22d      	sxth	r5, r5
 8001a4e:	4646      	mov	r6, r8
 8001a50:	4545      	cmp	r5, r8
 8001a52:	dc0d      	bgt.n	8001a70 <SSD1306_DrawLine+0x12a>
			SSD1306_DrawPixel(i, y0, c);
 8001a54:	b2ad      	uxth	r5, r5
 8001a56:	464a      	mov	r2, r9
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f7ff fe98 	bl	8001790 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001a60:	3501      	adds	r5, #1
 8001a62:	b22d      	sxth	r5, r5
 8001a64:	42b5      	cmp	r5, r6
 8001a66:	ddf5      	ble.n	8001a54 <SSD1306_DrawLine+0x10e>
 8001a68:	e002      	b.n	8001a70 <SSD1306_DrawLine+0x12a>
		if (x0 == x1 && y0 == y1) {
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	429c      	cmp	r4, r3
 8001a6e:	d112      	bne.n	8001a96 <SSD1306_DrawLine+0x150>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8001a70:	b005      	add	sp, #20
 8001a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a76:	4633      	mov	r3, r6
		if (e2 < dy) {
 8001a78:	42be      	cmp	r6, r7
 8001a7a:	da04      	bge.n	8001a86 <SSD1306_DrawLine+0x140>
			err += dx;
 8001a7c:	4453      	add	r3, sl
 8001a7e:	b21b      	sxth	r3, r3
			y0 += sy;
 8001a80:	9a02      	ldr	r2, [sp, #8]
 8001a82:	4414      	add	r4, r2
 8001a84:	b2a4      	uxth	r4, r4
			x1 = x0;
 8001a86:	461e      	mov	r6, r3
		SSD1306_DrawPixel(x0, y0, c);
 8001a88:	464a      	mov	r2, r9
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f7ff fe7f 	bl	8001790 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001a92:	45a8      	cmp	r8, r5
 8001a94:	d0e9      	beq.n	8001a6a <SSD1306_DrawLine+0x124>
		if (e2 > -dx) {
 8001a96:	455e      	cmp	r6, fp
 8001a98:	dded      	ble.n	8001a76 <SSD1306_DrawLine+0x130>
			err -= dy;
 8001a9a:	1bf3      	subs	r3, r6, r7
 8001a9c:	b21b      	sxth	r3, r3
			x0 += sx;
 8001a9e:	9a03      	ldr	r2, [sp, #12]
 8001aa0:	4415      	add	r5, r2
 8001aa2:	b2ad      	uxth	r5, r5
 8001aa4:	e7e8      	b.n	8001a78 <SSD1306_DrawLine+0x132>

08001aa6 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* Check input parameters */
	if (
 8001ab0:	287f      	cmp	r0, #127	; 0x7f
 8001ab2:	d832      	bhi.n	8001b1a <SSD1306_DrawRectangle+0x74>
 8001ab4:	4606      	mov	r6, r0
 8001ab6:	460f      	mov	r7, r1
 8001ab8:	461d      	mov	r5, r3
		x >= SSD1306_WIDTH ||
 8001aba:	293f      	cmp	r1, #63	; 0x3f
 8001abc:	d82d      	bhi.n	8001b1a <SSD1306_DrawRectangle+0x74>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001abe:	1883      	adds	r3, r0, r2
 8001ac0:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8001ac2:	bfc4      	itt	gt
 8001ac4:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
 8001ac8:	b292      	uxthgt	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001aca:	194b      	adds	r3, r1, r5
 8001acc:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 8001ace:	bfc4      	itt	gt
 8001ad0:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8001ad4:	b2ad      	uxthgt	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001ad6:	1814      	adds	r4, r2, r0
 8001ad8:	b2a4      	uxth	r4, r4
 8001ada:	f8cd 8000 	str.w	r8, [sp]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	f7ff ff30 	bl	8001946 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001ae6:	443d      	add	r5, r7
 8001ae8:	b2ad      	uxth	r5, r5
 8001aea:	f8cd 8000 	str.w	r8, [sp]
 8001aee:	462b      	mov	r3, r5
 8001af0:	4622      	mov	r2, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	4630      	mov	r0, r6
 8001af6:	f7ff ff26 	bl	8001946 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001afa:	f8cd 8000 	str.w	r8, [sp]
 8001afe:	462b      	mov	r3, r5
 8001b00:	4632      	mov	r2, r6
 8001b02:	4639      	mov	r1, r7
 8001b04:	4630      	mov	r0, r6
 8001b06:	f7ff ff1e 	bl	8001946 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001b0a:	f8cd 8000 	str.w	r8, [sp]
 8001b0e:	462b      	mov	r3, r5
 8001b10:	4622      	mov	r2, r4
 8001b12:	4639      	mov	r1, r7
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff ff16 	bl	8001946 <SSD1306_DrawLine>
}
 8001b1a:	b002      	add	sp, #8
 8001b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b20 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b24:	b085      	sub	sp, #20
 8001b26:	4615      	mov	r5, r2
 8001b28:	9200      	str	r2, [sp, #0]
 8001b2a:	461e      	mov	r6, r3
	int16_t f = 1 - r;
 8001b2c:	b294      	uxth	r4, r2
 8001b2e:	f1c4 0301 	rsb	r3, r4, #1
 8001b32:	fa0f f983 	sxth.w	r9, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8001b36:	ebc4 33c4 	rsb	r3, r4, r4, lsl #15
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	9303      	str	r3, [sp, #12]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001b40:	fa1f fa80 	uxth.w	sl, r0
 8001b44:	fa1f fb81 	uxth.w	fp, r1
 8001b48:	eb04 010b 	add.w	r1, r4, fp
 8001b4c:	4632      	mov	r2, r6
 8001b4e:	b289      	uxth	r1, r1
 8001b50:	4650      	mov	r0, sl
 8001b52:	f7ff fe1d 	bl	8001790 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001b56:	ebab 0104 	sub.w	r1, fp, r4
 8001b5a:	4632      	mov	r2, r6
 8001b5c:	b289      	uxth	r1, r1
 8001b5e:	4650      	mov	r0, sl
 8001b60:	f7ff fe16 	bl	8001790 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001b64:	eb04 000a 	add.w	r0, r4, sl
 8001b68:	4632      	mov	r2, r6
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	b280      	uxth	r0, r0
 8001b6e:	f7ff fe0f 	bl	8001790 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001b72:	ebaa 0004 	sub.w	r0, sl, r4
 8001b76:	4632      	mov	r2, r6
 8001b78:	4659      	mov	r1, fp
 8001b7a:	b280      	uxth	r0, r0
 8001b7c:	f7ff fe08 	bl	8001790 <SSD1306_DrawPixel>

    while (x < y) {
 8001b80:	2d00      	cmp	r5, #0
 8001b82:	dd65      	ble.n	8001c50 <SSD1306_DrawCircle+0x130>
	int16_t x = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	e05e      	b.n	8001c48 <SSD1306_DrawCircle+0x128>
        if (f >= 0) {
            y--;
 8001b8a:	9b00      	ldr	r3, [sp, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	9300      	str	r3, [sp, #0]
            ddF_y += 2;
 8001b92:	9b03      	ldr	r3, [sp, #12]
 8001b94:	3302      	adds	r3, #2
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 8001b9a:	444b      	add	r3, r9
 8001b9c:	fa0f f983 	sxth.w	r9, r3
        }
        x++;
 8001ba0:	9b01      	ldr	r3, [sp, #4]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	b29c      	uxth	r4, r3
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	9301      	str	r3, [sp, #4]
        ddF_x += 2;
 8001baa:	eb09 0944 	add.w	r9, r9, r4, lsl #1
        f += ddF_x;
 8001bae:	f109 0901 	add.w	r9, r9, #1
 8001bb2:	fa0f f989 	sxth.w	r9, r9

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001bb6:	eb0a 0304 	add.w	r3, sl, r4
 8001bba:	b298      	uxth	r0, r3
 8001bbc:	f8bd 5000 	ldrh.w	r5, [sp]
 8001bc0:	eb0b 0805 	add.w	r8, fp, r5
 8001bc4:	fa1f f888 	uxth.w	r8, r8
 8001bc8:	4632      	mov	r2, r6
 8001bca:	4641      	mov	r1, r8
 8001bcc:	9002      	str	r0, [sp, #8]
 8001bce:	f7ff fddf 	bl	8001790 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001bd2:	ebaa 0704 	sub.w	r7, sl, r4
 8001bd6:	b2bf      	uxth	r7, r7
 8001bd8:	4632      	mov	r2, r6
 8001bda:	4641      	mov	r1, r8
 8001bdc:	4638      	mov	r0, r7
 8001bde:	f7ff fdd7 	bl	8001790 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001be2:	ebab 0805 	sub.w	r8, fp, r5
 8001be6:	fa1f f888 	uxth.w	r8, r8
 8001bea:	4632      	mov	r2, r6
 8001bec:	4641      	mov	r1, r8
 8001bee:	9802      	ldr	r0, [sp, #8]
 8001bf0:	f7ff fdce 	bl	8001790 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001bf4:	4632      	mov	r2, r6
 8001bf6:	4641      	mov	r1, r8
 8001bf8:	4638      	mov	r0, r7
 8001bfa:	f7ff fdc9 	bl	8001790 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001bfe:	eb0a 0705 	add.w	r7, sl, r5
 8001c02:	b2bf      	uxth	r7, r7
 8001c04:	eb0b 0804 	add.w	r8, fp, r4
 8001c08:	fa1f f888 	uxth.w	r8, r8
 8001c0c:	4632      	mov	r2, r6
 8001c0e:	4641      	mov	r1, r8
 8001c10:	4638      	mov	r0, r7
 8001c12:	f7ff fdbd 	bl	8001790 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001c16:	ebaa 0505 	sub.w	r5, sl, r5
 8001c1a:	b2ad      	uxth	r5, r5
 8001c1c:	4632      	mov	r2, r6
 8001c1e:	4641      	mov	r1, r8
 8001c20:	4628      	mov	r0, r5
 8001c22:	f7ff fdb5 	bl	8001790 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001c26:	ebab 0404 	sub.w	r4, fp, r4
 8001c2a:	b2a4      	uxth	r4, r4
 8001c2c:	4632      	mov	r2, r6
 8001c2e:	4621      	mov	r1, r4
 8001c30:	4638      	mov	r0, r7
 8001c32:	f7ff fdad 	bl	8001790 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001c36:	4632      	mov	r2, r6
 8001c38:	4621      	mov	r1, r4
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	f7ff fda8 	bl	8001790 <SSD1306_DrawPixel>
    while (x < y) {
 8001c40:	9a00      	ldr	r2, [sp, #0]
 8001c42:	9b01      	ldr	r3, [sp, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dd03      	ble.n	8001c50 <SSD1306_DrawCircle+0x130>
        if (f >= 0) {
 8001c48:	f1b9 0f00 	cmp.w	r9, #0
 8001c4c:	da9d      	bge.n	8001b8a <SSD1306_DrawCircle+0x6a>
 8001c4e:	e7a7      	b.n	8001ba0 <SSD1306_DrawCircle+0x80>
    }
}
 8001c50:	b005      	add	sp, #20
 8001c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c56 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	4690      	mov	r8, r2
 8001c5e:	9203      	str	r2, [sp, #12]
 8001c60:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 8001c62:	b295      	uxth	r5, r2
 8001c64:	f1c5 0401 	rsb	r4, r5, #1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8001c68:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001c72:	fa1f fb80 	uxth.w	fp, r0
 8001c76:	b28f      	uxth	r7, r1
 8001c78:	19e9      	adds	r1, r5, r7
 8001c7a:	4652      	mov	r2, sl
 8001c7c:	b289      	uxth	r1, r1
 8001c7e:	4658      	mov	r0, fp
 8001c80:	f7ff fd86 	bl	8001790 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001c84:	1b79      	subs	r1, r7, r5
 8001c86:	4652      	mov	r2, sl
 8001c88:	b289      	uxth	r1, r1
 8001c8a:	4658      	mov	r0, fp
 8001c8c:	f7ff fd80 	bl	8001790 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001c90:	eb05 060b 	add.w	r6, r5, fp
 8001c94:	b2b6      	uxth	r6, r6
 8001c96:	4652      	mov	r2, sl
 8001c98:	4639      	mov	r1, r7
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f7ff fd78 	bl	8001790 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001ca0:	ebab 0505 	sub.w	r5, fp, r5
 8001ca4:	b2ad      	uxth	r5, r5
 8001ca6:	4652      	mov	r2, sl
 8001ca8:	4639      	mov	r1, r7
 8001caa:	4628      	mov	r0, r5
 8001cac:	f7ff fd70 	bl	8001790 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001cb0:	f8cd a000 	str.w	sl, [sp]
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	4632      	mov	r2, r6
 8001cb8:	4639      	mov	r1, r7
 8001cba:	4628      	mov	r0, r5
 8001cbc:	f7ff fe43 	bl	8001946 <SSD1306_DrawLine>

    while (x < y) {
 8001cc0:	4643      	mov	r3, r8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	dd52      	ble.n	8001d6c <SSD1306_DrawFilledCircle+0x116>
 8001cc6:	b224      	sxth	r4, r4
	int16_t x = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9304      	str	r3, [sp, #16]
 8001ccc:	e04b      	b.n	8001d66 <SSD1306_DrawFilledCircle+0x110>
        if (f >= 0) {
            y--;
 8001cce:	9b03      	ldr	r3, [sp, #12]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	9303      	str	r3, [sp, #12]
            ddF_y += 2;
 8001cd6:	9b05      	ldr	r3, [sp, #20]
 8001cd8:	3302      	adds	r3, #2
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8001cde:	4423      	add	r3, r4
 8001ce0:	b21c      	sxth	r4, r3
        }
        x++;
 8001ce2:	9b04      	ldr	r3, [sp, #16]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b29d      	uxth	r5, r3
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	9304      	str	r3, [sp, #16]
        ddF_x += 2;
 8001cec:	eb04 0445 	add.w	r4, r4, r5, lsl #1
        f += ddF_x;
 8001cf0:	3401      	adds	r4, #1
 8001cf2:	b224      	sxth	r4, r4

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8001cf4:	ebab 0905 	sub.w	r9, fp, r5
 8001cf8:	fa1f f989 	uxth.w	r9, r9
 8001cfc:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8001d00:	19b9      	adds	r1, r7, r6
 8001d02:	b289      	uxth	r1, r1
 8001d04:	eb0b 0805 	add.w	r8, fp, r5
 8001d08:	fa1f f888 	uxth.w	r8, r8
 8001d0c:	f8cd a000 	str.w	sl, [sp]
 8001d10:	460b      	mov	r3, r1
 8001d12:	4642      	mov	r2, r8
 8001d14:	4648      	mov	r0, r9
 8001d16:	f7ff fe16 	bl	8001946 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8001d1a:	1bb9      	subs	r1, r7, r6
 8001d1c:	b289      	uxth	r1, r1
 8001d1e:	f8cd a000 	str.w	sl, [sp]
 8001d22:	460b      	mov	r3, r1
 8001d24:	464a      	mov	r2, r9
 8001d26:	4640      	mov	r0, r8
 8001d28:	f7ff fe0d 	bl	8001946 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001d2c:	eb0b 0806 	add.w	r8, fp, r6
 8001d30:	fa1f f888 	uxth.w	r8, r8
 8001d34:	1979      	adds	r1, r7, r5
 8001d36:	b289      	uxth	r1, r1
 8001d38:	ebab 0606 	sub.w	r6, fp, r6
 8001d3c:	b2b6      	uxth	r6, r6
 8001d3e:	f8cd a000 	str.w	sl, [sp]
 8001d42:	460b      	mov	r3, r1
 8001d44:	4632      	mov	r2, r6
 8001d46:	4640      	mov	r0, r8
 8001d48:	f7ff fdfd 	bl	8001946 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001d4c:	1b79      	subs	r1, r7, r5
 8001d4e:	b289      	uxth	r1, r1
 8001d50:	f8cd a000 	str.w	sl, [sp]
 8001d54:	460b      	mov	r3, r1
 8001d56:	4632      	mov	r2, r6
 8001d58:	4640      	mov	r0, r8
 8001d5a:	f7ff fdf4 	bl	8001946 <SSD1306_DrawLine>
    while (x < y) {
 8001d5e:	9a03      	ldr	r2, [sp, #12]
 8001d60:	9b04      	ldr	r3, [sp, #16]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dd02      	ble.n	8001d6c <SSD1306_DrawFilledCircle+0x116>
        if (f >= 0) {
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	dab1      	bge.n	8001cce <SSD1306_DrawFilledCircle+0x78>
 8001d6a:	e7ba      	b.n	8001ce2 <SSD1306_DrawFilledCircle+0x8c>
    }
}
 8001d6c:	b007      	add	sp, #28
 8001d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001d74 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d74:	b500      	push	{lr}
 8001d76:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8001d78:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	b173      	cbz	r3, 8001d9e <ssd1306_I2C_WriteMulti+0x2a>
 8001d80:	f04f 0e00 	mov.w	lr, #0
dt[i+1] = data[i];
 8001d84:	ab02      	add	r3, sp, #8
 8001d86:	eb03 0c0e 	add.w	ip, r3, lr
 8001d8a:	f812 300e 	ldrb.w	r3, [r2, lr]
 8001d8e:	f88c 3001 	strb.w	r3, [ip, #1]
for(i = 0; i < count; i++)
 8001d92:	f10e 0c01 	add.w	ip, lr, #1
 8001d96:	fa5f fe8c 	uxtb.w	lr, ip
 8001d9a:	458e      	cmp	lr, r1
 8001d9c:	d3f2      	bcc.n	8001d84 <ssd1306_I2C_WriteMulti+0x10>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d9e:	1c4b      	adds	r3, r1, #1
 8001da0:	220a      	movs	r2, #10
 8001da2:	9200      	str	r2, [sp, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	aa02      	add	r2, sp, #8
 8001da8:	4601      	mov	r1, r0
 8001daa:	4803      	ldr	r0, [pc, #12]	; (8001db8 <ssd1306_I2C_WriteMulti+0x44>)
 8001dac:	f001 f98e 	bl	80030cc <HAL_I2C_Master_Transmit>
}
 8001db0:	b043      	add	sp, #268	; 0x10c
 8001db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001db6:	bf00      	nop
 8001db8:	20000180 	.word	0x20000180

08001dbc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001dbc:	b500      	push	{lr}
 8001dbe:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8001dc0:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8001dc4:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dc8:	230a      	movs	r3, #10
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2302      	movs	r3, #2
 8001dce:	aa03      	add	r2, sp, #12
 8001dd0:	4601      	mov	r1, r0
 8001dd2:	4803      	ldr	r0, [pc, #12]	; (8001de0 <ssd1306_I2C_Write+0x24>)
 8001dd4:	f001 f97a 	bl	80030cc <HAL_I2C_Master_Transmit>
}
 8001dd8:	b005      	add	sp, #20
 8001dda:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dde:	bf00      	nop
 8001de0:	20000180 	.word	0x20000180

08001de4 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8001de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (m = 0; m < 8; m++) {
 8001de8:	4f10      	ldr	r7, [pc, #64]	; (8001e2c <SSD1306_UpdateScreen+0x48>)
void SSD1306_UpdateScreen(void) {
 8001dea:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001dec:	2600      	movs	r6, #0
 8001dee:	2578      	movs	r5, #120	; 0x78
		SSD1306_WRITECOMMAND(0x10);
 8001df0:	f04f 0810 	mov.w	r8, #16
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001df4:	4622      	mov	r2, r4
 8001df6:	4631      	mov	r1, r6
 8001df8:	4628      	mov	r0, r5
 8001dfa:	f7ff ffdf 	bl	8001dbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001dfe:	4632      	mov	r2, r6
 8001e00:	4631      	mov	r1, r6
 8001e02:	4628      	mov	r0, r5
 8001e04:	f7ff ffda 	bl	8001dbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001e08:	4642      	mov	r2, r8
 8001e0a:	4631      	mov	r1, r6
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7ff ffd5 	bl	8001dbc <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	463a      	mov	r2, r7
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f7ff ffab 	bl	8001d74 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001e1e:	3401      	adds	r4, #1
 8001e20:	b2e4      	uxtb	r4, r4
 8001e22:	3780      	adds	r7, #128	; 0x80
 8001e24:	2cb8      	cmp	r4, #184	; 0xb8
 8001e26:	d1e5      	bne.n	8001df4 <SSD1306_UpdateScreen+0x10>
}
 8001e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e2c:	200002d4 	.word	0x200002d4

08001e30 <SSD1306_Clear>:
{
 8001e30:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fc9e 	bl	8001774 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001e38:	f7ff ffd4 	bl	8001de4 <SSD1306_UpdateScreen>
}
 8001e3c:	bd08      	pop	{r3, pc}
	...

08001e40 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001e40:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001e42:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001e46:	2201      	movs	r2, #1
 8001e48:	2178      	movs	r1, #120	; 0x78
 8001e4a:	4854      	ldr	r0, [pc, #336]	; (8001f9c <SSD1306_Init+0x15c>)
 8001e4c:	f001 fa42 	bl	80032d4 <HAL_I2C_IsDeviceReady>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	f040 80a1 	bne.w	8001f98 <SSD1306_Init+0x158>
 8001e56:	f640 13c4 	movw	r3, #2500	; 0x9c4
	while(p>0)
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	d1fd      	bne.n	8001e5a <SSD1306_Init+0x1a>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001e5e:	22ae      	movs	r2, #174	; 0xae
 8001e60:	2100      	movs	r1, #0
 8001e62:	2078      	movs	r0, #120	; 0x78
 8001e64:	f7ff ffaa 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001e68:	2220      	movs	r2, #32
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2078      	movs	r0, #120	; 0x78
 8001e6e:	f7ff ffa5 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001e72:	2210      	movs	r2, #16
 8001e74:	2100      	movs	r1, #0
 8001e76:	2078      	movs	r0, #120	; 0x78
 8001e78:	f7ff ffa0 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e7c:	22b0      	movs	r2, #176	; 0xb0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2078      	movs	r0, #120	; 0x78
 8001e82:	f7ff ff9b 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001e86:	22c8      	movs	r2, #200	; 0xc8
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2078      	movs	r0, #120	; 0x78
 8001e8c:	f7ff ff96 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001e90:	2200      	movs	r2, #0
 8001e92:	4611      	mov	r1, r2
 8001e94:	2078      	movs	r0, #120	; 0x78
 8001e96:	f7ff ff91 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2078      	movs	r0, #120	; 0x78
 8001ea0:	f7ff ff8c 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001ea4:	2240      	movs	r2, #64	; 0x40
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2078      	movs	r0, #120	; 0x78
 8001eaa:	f7ff ff87 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001eae:	2281      	movs	r2, #129	; 0x81
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2078      	movs	r0, #120	; 0x78
 8001eb4:	f7ff ff82 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001eb8:	22ff      	movs	r2, #255	; 0xff
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2078      	movs	r0, #120	; 0x78
 8001ebe:	f7ff ff7d 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001ec2:	22a1      	movs	r2, #161	; 0xa1
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2078      	movs	r0, #120	; 0x78
 8001ec8:	f7ff ff78 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001ecc:	22a6      	movs	r2, #166	; 0xa6
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2078      	movs	r0, #120	; 0x78
 8001ed2:	f7ff ff73 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001ed6:	22a8      	movs	r2, #168	; 0xa8
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2078      	movs	r0, #120	; 0x78
 8001edc:	f7ff ff6e 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ee0:	223f      	movs	r2, #63	; 0x3f
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2078      	movs	r0, #120	; 0x78
 8001ee6:	f7ff ff69 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001eea:	22a4      	movs	r2, #164	; 0xa4
 8001eec:	2100      	movs	r1, #0
 8001eee:	2078      	movs	r0, #120	; 0x78
 8001ef0:	f7ff ff64 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001ef4:	22d3      	movs	r2, #211	; 0xd3
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2078      	movs	r0, #120	; 0x78
 8001efa:	f7ff ff5f 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001efe:	2200      	movs	r2, #0
 8001f00:	4611      	mov	r1, r2
 8001f02:	2078      	movs	r0, #120	; 0x78
 8001f04:	f7ff ff5a 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f08:	22d5      	movs	r2, #213	; 0xd5
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2078      	movs	r0, #120	; 0x78
 8001f0e:	f7ff ff55 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001f12:	22f0      	movs	r2, #240	; 0xf0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2078      	movs	r0, #120	; 0x78
 8001f18:	f7ff ff50 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001f1c:	22d9      	movs	r2, #217	; 0xd9
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2078      	movs	r0, #120	; 0x78
 8001f22:	f7ff ff4b 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001f26:	2222      	movs	r2, #34	; 0x22
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2078      	movs	r0, #120	; 0x78
 8001f2c:	f7ff ff46 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001f30:	22da      	movs	r2, #218	; 0xda
 8001f32:	2100      	movs	r1, #0
 8001f34:	2078      	movs	r0, #120	; 0x78
 8001f36:	f7ff ff41 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001f3a:	2212      	movs	r2, #18
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2078      	movs	r0, #120	; 0x78
 8001f40:	f7ff ff3c 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001f44:	22db      	movs	r2, #219	; 0xdb
 8001f46:	2100      	movs	r1, #0
 8001f48:	2078      	movs	r0, #120	; 0x78
 8001f4a:	f7ff ff37 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001f4e:	2220      	movs	r2, #32
 8001f50:	2100      	movs	r1, #0
 8001f52:	2078      	movs	r0, #120	; 0x78
 8001f54:	f7ff ff32 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001f58:	228d      	movs	r2, #141	; 0x8d
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2078      	movs	r0, #120	; 0x78
 8001f5e:	f7ff ff2d 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001f62:	2214      	movs	r2, #20
 8001f64:	2100      	movs	r1, #0
 8001f66:	2078      	movs	r0, #120	; 0x78
 8001f68:	f7ff ff28 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001f6c:	22af      	movs	r2, #175	; 0xaf
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2078      	movs	r0, #120	; 0x78
 8001f72:	f7ff ff23 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001f76:	222e      	movs	r2, #46	; 0x2e
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2078      	movs	r0, #120	; 0x78
 8001f7c:	f7ff ff1e 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff fbf7 	bl	8001774 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001f86:	f7ff ff2d 	bl	8001de4 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SSD1306_Init+0x160>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001f90:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001f92:	2001      	movs	r0, #1
 8001f94:	7158      	strb	r0, [r3, #5]
}
 8001f96:	bd08      	pop	{r3, pc}
		return 0;
 8001f98:	2000      	movs	r0, #0
 8001f9a:	e7fc      	b.n	8001f96 <SSD1306_Init+0x156>
 8001f9c:	20000180 	.word	0x20000180
 8001fa0:	200002cc 	.word	0x200002cc

08001fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b500      	push	{lr}
 8001fa6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	619a      	str	r2, [r3, #24]
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	f002 0201 	and.w	r2, r2, #1
 8001fb8:	9200      	str	r2, [sp, #0]
 8001fba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fc2:	61da      	str	r2, [r3, #28]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	210f      	movs	r1, #15
 8001fd2:	f06f 0001 	mvn.w	r0, #1
 8001fd6:	f000 fd15 	bl	8002a04 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fda:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <HAL_MspInit+0x50>)
 8001fdc:	6853      	ldr	r3, [r2, #4]
 8001fde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe8:	b003      	add	sp, #12
 8001fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000

08001ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b500      	push	{lr}
 8001ffa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9304      	str	r3, [sp, #16]
 8002000:	9305      	str	r3, [sp, #20]
 8002002:	9306      	str	r3, [sp, #24]
 8002004:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002006:	6803      	ldr	r3, [r0, #0]
 8002008:	4a20      	ldr	r2, [pc, #128]	; (800208c <HAL_ADC_MspInit+0x94>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d005      	beq.n	800201a <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <HAL_ADC_MspInit+0x98>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d01e      	beq.n	8002052 <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002014:	b009      	add	sp, #36	; 0x24
 8002016:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_ADC_MspInit+0x9c>)
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800202a:	9200      	str	r2, [sp, #0]
 800202c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	f042 0204 	orr.w	r2, r2, #4
 8002034:	619a      	str	r2, [r3, #24]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002040:	2308      	movs	r3, #8
 8002042:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002044:	2303      	movs	r3, #3
 8002046:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	a904      	add	r1, sp, #16
 800204a:	4813      	ldr	r0, [pc, #76]	; (8002098 <HAL_ADC_MspInit+0xa0>)
 800204c:	f000 fd1e 	bl	8002a8c <HAL_GPIO_Init>
 8002050:	e7e0      	b.n	8002014 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_ADC_MspInit+0x9c>)
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800205a:	619a      	str	r2, [r3, #24]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002062:	9202      	str	r2, [sp, #8]
 8002064:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	f042 0204 	orr.w	r2, r2, #4
 800206c:	619a      	str	r2, [r3, #24]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	9303      	str	r3, [sp, #12]
 8002076:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002078:	2302      	movs	r3, #2
 800207a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207c:	2303      	movs	r3, #3
 800207e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	a904      	add	r1, sp, #16
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <HAL_ADC_MspInit+0xa0>)
 8002084:	f000 fd02 	bl	8002a8c <HAL_GPIO_Init>
}
 8002088:	e7c4      	b.n	8002014 <HAL_ADC_MspInit+0x1c>
 800208a:	bf00      	nop
 800208c:	40012400 	.word	0x40012400
 8002090:	40012800 	.word	0x40012800
 8002094:	40021000 	.word	0x40021000
 8002098:	40010800 	.word	0x40010800

0800209c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800209c:	b510      	push	{r4, lr}
 800209e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	2300      	movs	r3, #0
 80020a2:	9302      	str	r3, [sp, #8]
 80020a4:	9303      	str	r3, [sp, #12]
 80020a6:	9304      	str	r3, [sp, #16]
 80020a8:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 80020aa:	6802      	ldr	r2, [r0, #0]
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_I2C_MspInit+0x58>)
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020b2:	b006      	add	sp, #24
 80020b4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	4c10      	ldr	r4, [pc, #64]	; (80020f8 <HAL_I2C_MspInit+0x5c>)
 80020b8:	69a3      	ldr	r3, [r4, #24]
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	61a3      	str	r3, [r4, #24]
 80020c0:	69a3      	ldr	r3, [r4, #24]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ca:	23c0      	movs	r3, #192	; 0xc0
 80020cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ce:	2312      	movs	r3, #18
 80020d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d2:	2303      	movs	r3, #3
 80020d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	a902      	add	r1, sp, #8
 80020d8:	4808      	ldr	r0, [pc, #32]	; (80020fc <HAL_I2C_MspInit+0x60>)
 80020da:	f000 fcd7 	bl	8002a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020de:	69e3      	ldr	r3, [r4, #28]
 80020e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e4:	61e3      	str	r3, [r4, #28]
 80020e6:	69e3      	ldr	r3, [r4, #28]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	9b01      	ldr	r3, [sp, #4]
}
 80020f0:	e7df      	b.n	80020b2 <HAL_I2C_MspInit+0x16>
 80020f2:	bf00      	nop
 80020f4:	40005400 	.word	0x40005400
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010c00 	.word	0x40010c00

08002100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002100:	b510      	push	{r4, lr}
 8002102:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	2300      	movs	r3, #0
 8002106:	9302      	str	r3, [sp, #8]
 8002108:	9303      	str	r3, [sp, #12]
 800210a:	9304      	str	r3, [sp, #16]
 800210c:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 800210e:	6802      	ldr	r2, [r0, #0]
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_SPI_MspInit+0x6c>)
 8002112:	429a      	cmp	r2, r3
 8002114:	d001      	beq.n	800211a <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002116:	b006      	add	sp, #24
 8002118:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800211a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002124:	619a      	str	r2, [r3, #24]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800212c:	9200      	str	r2, [sp, #0]
 800212e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	f042 0204 	orr.w	r2, r2, #4
 8002136:	619a      	str	r2, [r3, #24]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002142:	23a0      	movs	r3, #160	; 0xa0
 8002144:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	4c08      	ldr	r4, [pc, #32]	; (8002170 <HAL_SPI_MspInit+0x70>)
 8002150:	a902      	add	r1, sp, #8
 8002152:	4620      	mov	r0, r4
 8002154:	f000 fc9a 	bl	8002a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002158:	2340      	movs	r3, #64	; 0x40
 800215a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215c:	2300      	movs	r3, #0
 800215e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	a902      	add	r1, sp, #8
 8002164:	4620      	mov	r0, r4
 8002166:	f000 fc91 	bl	8002a8c <HAL_GPIO_Init>
}
 800216a:	e7d4      	b.n	8002116 <HAL_SPI_MspInit+0x16>
 800216c:	40013000 	.word	0x40013000
 8002170:	40010800 	.word	0x40010800

08002174 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002174:	6803      	ldr	r3, [r0, #0]
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217a:	d000      	beq.n	800217e <HAL_TIM_Base_MspInit+0xa>
 800217c:	4770      	bx	lr
{
 800217e:	b500      	push	{lr}
 8002180:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002182:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	61da      	str	r2, [r3, #28]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002198:	2200      	movs	r2, #0
 800219a:	4611      	mov	r1, r2
 800219c:	201c      	movs	r0, #28
 800219e:	f000 fc31 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021a2:	201c      	movs	r0, #28
 80021a4:	f000 fc64 	bl	8002a70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021a8:	b003      	add	sp, #12
 80021aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080021b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b530      	push	{r4, r5, lr}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_InitTick+0x8c>)
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	f042 0204 	orr.w	r2, r2, #4
 80021be:	61da      	str	r2, [r3, #28]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021ca:	a902      	add	r1, sp, #8
 80021cc:	a803      	add	r0, sp, #12
 80021ce:	f001 fc6f 	bl	8003ab0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021d2:	9b06      	ldr	r3, [sp, #24]
 80021d4:	b9cb      	cbnz	r3, 800220a <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021d6:	f001 fc4b 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 80021da:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80021dc:	4818      	ldr	r0, [pc, #96]	; (8002240 <HAL_InitTick+0x90>)
 80021de:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_InitTick+0x94>)
 80021e0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80021e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021e6:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021e8:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_InitTick+0x98>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0c9b      	lsrs	r3, r3, #18
 80021f0:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80021f2:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80021fc:	f002 fa96 	bl	800472c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002200:	4605      	mov	r5, r0
 8002202:	b130      	cbz	r0, 8002212 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8002204:	4628      	mov	r0, r5
 8002206:	b009      	add	sp, #36	; 0x24
 8002208:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800220a:	f001 fc31 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 800220e:	0043      	lsls	r3, r0, #1
 8002210:	e7e4      	b.n	80021dc <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <HAL_InitTick+0x90>)
 8002214:	f002 f946 	bl	80044a4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002218:	4605      	mov	r5, r0
 800221a:	2800      	cmp	r0, #0
 800221c:	d1f2      	bne.n	8002204 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800221e:	201e      	movs	r0, #30
 8002220:	f000 fc26 	bl	8002a70 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002224:	2c0f      	cmp	r4, #15
 8002226:	d901      	bls.n	800222c <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 8002228:	2501      	movs	r5, #1
 800222a:	e7eb      	b.n	8002204 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800222c:	2200      	movs	r2, #0
 800222e:	4621      	mov	r1, r4
 8002230:	201e      	movs	r0, #30
 8002232:	f000 fbe7 	bl	8002a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_InitTick+0x9c>)
 8002238:	601c      	str	r4, [r3, #0]
 800223a:	e7e3      	b.n	8002204 <HAL_InitTick+0x54>
 800223c:	40021000 	.word	0x40021000
 8002240:	200006d4 	.word	0x200006d4
 8002244:	40000800 	.word	0x40000800
 8002248:	431bde83 	.word	0x431bde83
 800224c:	20000010 	.word	0x20000010

08002250 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <NMI_Handler>

08002252 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <HardFault_Handler>

08002254 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <MemManage_Handler>

08002256 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <BusFault_Handler>

08002258 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <UsageFault_Handler>

0800225a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225a:	4770      	bx	lr

0800225c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800225c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800225e:	4802      	ldr	r0, [pc, #8]	; (8002268 <TIM2_IRQHandler+0xc>)
 8002260:	f002 f958 	bl	8004514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002264:	bd08      	pop	{r3, pc}
 8002266:	bf00      	nop
 8002268:	2000022c 	.word	0x2000022c

0800226c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800226c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800226e:	4802      	ldr	r0, [pc, #8]	; (8002278 <TIM4_IRQHandler+0xc>)
 8002270:	f002 f950 	bl	8004514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002274:	bd08      	pop	{r3, pc}
 8002276:	bf00      	nop
 8002278:	200006d4 	.word	0x200006d4

0800227c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800227c:	2001      	movs	r0, #1
 800227e:	4770      	bx	lr

08002280 <_kill>:

int _kill(int pid, int sig)
{
 8002280:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002282:	f005 faa3 	bl	80077cc <__errno>
 8002286:	2316      	movs	r3, #22
 8002288:	6003      	str	r3, [r0, #0]
  return -1;
}
 800228a:	f04f 30ff 	mov.w	r0, #4294967295
 800228e:	bd08      	pop	{r3, pc}

08002290 <_exit>:

void _exit (int status)
{
 8002290:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002292:	f005 fa9b 	bl	80077cc <__errno>
 8002296:	2316      	movs	r3, #22
 8002298:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800229a:	e7fe      	b.n	800229a <_exit+0xa>

0800229c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	1e16      	subs	r6, r2, #0
 80022a0:	dd07      	ble.n	80022b2 <_read+0x16>
 80022a2:	460c      	mov	r4, r1
 80022a4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80022a6:	f3af 8000 	nop.w
 80022aa:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	42a5      	cmp	r5, r4
 80022b0:	d1f9      	bne.n	80022a6 <_read+0xa>
  }

  return len;
}
 80022b2:	4630      	mov	r0, r6
 80022b4:	bd70      	pop	{r4, r5, r6, pc}

080022b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b6:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b8:	1e16      	subs	r6, r2, #0
 80022ba:	dd07      	ble.n	80022cc <_write+0x16>
 80022bc:	460c      	mov	r4, r1
 80022be:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80022c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80022c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c8:	42a5      	cmp	r5, r4
 80022ca:	d1f9      	bne.n	80022c0 <_write+0xa>
  }
  return len;
}
 80022cc:	4630      	mov	r0, r6
 80022ce:	bd70      	pop	{r4, r5, r6, pc}

080022d0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	4770      	bx	lr

080022d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80022d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022da:	604b      	str	r3, [r1, #4]
  return 0;
}
 80022dc:	2000      	movs	r0, #0
 80022de:	4770      	bx	lr

080022e0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80022e0:	2001      	movs	r0, #1
 80022e2:	4770      	bx	lr

080022e4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80022e4:	2000      	movs	r0, #0
 80022e6:	4770      	bx	lr

080022e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e8:	b508      	push	{r3, lr}
 80022ea:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ec:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <_sbrk+0x38>)
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	b152      	cbz	r2, 8002308 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <_sbrk+0x38>)
 80022f4:	6810      	ldr	r0, [r2, #0]
 80022f6:	4403      	add	r3, r0
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <_sbrk+0x3c>)
 80022fa:	490b      	ldr	r1, [pc, #44]	; (8002328 <_sbrk+0x40>)
 80022fc:	1a52      	subs	r2, r2, r1
 80022fe:	4293      	cmp	r3, r2
 8002300:	d806      	bhi.n	8002310 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <_sbrk+0x38>)
 8002304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002306:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8002308:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_sbrk+0x38>)
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <_sbrk+0x44>)
 800230c:	6011      	str	r1, [r2, #0]
 800230e:	e7f0      	b.n	80022f2 <_sbrk+0xa>
    errno = ENOMEM;
 8002310:	f005 fa5c 	bl	80077cc <__errno>
 8002314:	230c      	movs	r3, #12
 8002316:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	e7f3      	b.n	8002306 <_sbrk+0x1e>
 800231e:	bf00      	nop
 8002320:	2000071c 	.word	0x2000071c
 8002324:	20005000 	.word	0x20005000
 8002328:	00000400 	.word	0x00000400
 800232c:	20002558 	.word	0x20002558

08002330 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002330:	4770      	bx	lr
	...

08002334 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8002334:	f7ff fffc 	bl	8002330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002338:	480b      	ldr	r0, [pc, #44]	; (8002368 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800233a:	490c      	ldr	r1, [pc, #48]	; (800236c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <LoopFillZerobss+0x16>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002350:	4c09      	ldr	r4, [pc, #36]	; (8002378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235e:	f005 fa3b 	bl	80077d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002362:	f7fe fabf 	bl	80008e4 <main>
  bx lr
 8002366:	4770      	bx	lr
  ldr r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800236c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002370:	08009288 	.word	0x08009288
  ldr r2, =_sbss
 8002374:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002378:	20002554 	.word	0x20002554

0800237c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC1_2_IRQHandler>
	...

08002380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002380:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_Init+0x20>)
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	f043 0310 	orr.w	r3, r3, #16
 800238a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238c:	2003      	movs	r0, #3
 800238e:	f000 fb27 	bl	80029e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002392:	200f      	movs	r0, #15
 8002394:	f7ff ff0c 	bl	80021b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002398:	f7ff fe04 	bl	8001fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800239c:	2000      	movs	r0, #0
 800239e:	bd08      	pop	{r3, pc}
 80023a0:	40022000 	.word	0x40022000

080023a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023a4:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <HAL_IncTick+0x10>)
 80023a6:	6811      	ldr	r1, [r2, #0]
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_IncTick+0x14>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	440b      	add	r3, r1
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000720 	.word	0x20000720
 80023b8:	2000000c 	.word	0x2000000c

080023bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023bc:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <HAL_GetTick+0x8>)
 80023be:	6818      	ldr	r0, [r3, #0]
}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000720 	.word	0x20000720

080023c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c8:	b538      	push	{r3, r4, r5, lr}
 80023ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff fff6 	bl	80023bc <HAL_GetTick>
 80023d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80023d6:	d002      	beq.n	80023de <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_Delay+0x24>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023de:	f7ff ffed 	bl	80023bc <HAL_GetTick>
 80023e2:	1b40      	subs	r0, r0, r5
 80023e4:	42a0      	cmp	r0, r4
 80023e6:	d3fa      	bcc.n	80023de <HAL_Delay+0x16>
  {
  }
}
 80023e8:	bd38      	pop	{r3, r4, r5, pc}
 80023ea:	bf00      	nop
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	b083      	sub	sp, #12
 80023f4:	4606      	mov	r6, r0
 80023f6:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002400:	6833      	ldr	r3, [r6, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002408:	d124      	bne.n	8002454 <HAL_ADC_PollForConversion+0x64>
 800240a:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002412:	d103      	bne.n	800241c <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002416:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800241a:	d02a      	beq.n	8002472 <HAL_ADC_PollForConversion+0x82>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_ADC_PollForConversion+0x170>)
 800241e:	681d      	ldr	r5, [r3, #0]
 8002420:	2002      	movs	r0, #2
 8002422:	f001 fbf1 	bl	8003c08 <HAL_RCCEx_GetPeriphCLKFreq>
 8002426:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800242a:	6833      	ldr	r3, [r6, #0]
 800242c:	6919      	ldr	r1, [r3, #16]
 800242e:	4a4d      	ldr	r2, [pc, #308]	; (8002564 <HAL_ADC_PollForConversion+0x174>)
 8002430:	4211      	tst	r1, r2
 8002432:	d137      	bne.n	80024a4 <HAL_ADC_PollForConversion+0xb4>
 8002434:	68d9      	ldr	r1, [r3, #12]
 8002436:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 800243a:	4211      	tst	r1, r2
 800243c:	d132      	bne.n	80024a4 <HAL_ADC_PollForConversion+0xb4>
 800243e:	6919      	ldr	r1, [r3, #16]
 8002440:	4a49      	ldr	r2, [pc, #292]	; (8002568 <HAL_ADC_PollForConversion+0x178>)
 8002442:	4211      	tst	r1, r2
 8002444:	d158      	bne.n	80024f8 <HAL_ADC_PollForConversion+0x108>
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	4b48      	ldr	r3, [pc, #288]	; (800256c <HAL_ADC_PollForConversion+0x17c>)
 800244a:	421a      	tst	r2, r3
 800244c:	bf14      	ite	ne
 800244e:	2329      	movne	r3, #41	; 0x29
 8002450:	2314      	moveq	r3, #20
 8002452:	e03b      	b.n	80024cc <HAL_ADC_PollForConversion+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002454:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002456:	f043 0320 	orr.w	r3, r3, #32
 800245a:	62b3      	str	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800245c:	2300      	movs	r3, #0
 800245e:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    return HAL_ERROR;
 8002462:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8002464:	b003      	add	sp, #12
 8002466:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002468:	6833      	ldr	r3, [r6, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f013 0f02 	tst.w	r3, #2
 8002470:	d00f      	beq.n	8002492 <HAL_ADC_PollForConversion+0xa2>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002472:	6832      	ldr	r2, [r6, #0]
 8002474:	6813      	ldr	r3, [r2, #0]
 8002476:	f013 0f02 	tst.w	r3, #2
 800247a:	d12c      	bne.n	80024d6 <HAL_ADC_PollForConversion+0xe6>
      if(Timeout != HAL_MAX_DELAY)
 800247c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002480:	d0f8      	beq.n	8002474 <HAL_ADC_PollForConversion+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002482:	2c00      	cmp	r4, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_ADC_PollForConversion+0x78>
 8002486:	f7ff ff99 	bl	80023bc <HAL_GetTick>
 800248a:	1bc3      	subs	r3, r0, r7
 800248c:	42a3      	cmp	r3, r4
 800248e:	d9f0      	bls.n	8002472 <HAL_ADC_PollForConversion+0x82>
 8002490:	e7ea      	b.n	8002468 <HAL_ADC_PollForConversion+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002492:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	62b3      	str	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800249a:	2300      	movs	r3, #0
 800249c:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            return HAL_TIMEOUT;
 80024a0:	2003      	movs	r0, #3
 80024a2:	e7df      	b.n	8002464 <HAL_ADC_PollForConversion+0x74>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80024a4:	6919      	ldr	r1, [r3, #16]
 80024a6:	4a30      	ldr	r2, [pc, #192]	; (8002568 <HAL_ADC_PollForConversion+0x178>)
 80024a8:	4211      	tst	r1, r2
 80024aa:	d104      	bne.n	80024b6 <HAL_ADC_PollForConversion+0xc6>
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80024b2:	4211      	tst	r1, r2
 80024b4:	d022      	beq.n	80024fc <HAL_ADC_PollForConversion+0x10c>
 80024b6:	6919      	ldr	r1, [r3, #16]
 80024b8:	4a2d      	ldr	r2, [pc, #180]	; (8002570 <HAL_ADC_PollForConversion+0x180>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	bb02      	cbnz	r2, 8002500 <HAL_ADC_PollForConversion+0x110>
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_ADC_PollForConversion+0x180>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	23fc      	movne	r3, #252	; 0xfc
 80024ca:	2354      	moveq	r3, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024cc:	fb03 f505 	mul.w	r5, r3, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024d0:	9b01      	ldr	r3, [sp, #4]
 80024d2:	429d      	cmp	r5, r3
 80024d4:	d81f      	bhi.n	8002516 <HAL_ADC_PollForConversion+0x126>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024d6:	6833      	ldr	r3, [r6, #0]
 80024d8:	f06f 0212 	mvn.w	r2, #18
 80024dc:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80024e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e4:	62b3      	str	r3, [r6, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024e6:	6833      	ldr	r3, [r6, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024f2:	d024      	beq.n	800253e <HAL_ADC_PollForConversion+0x14e>
  return HAL_OK;
 80024f4:	2000      	movs	r0, #0
 80024f6:	e7b5      	b.n	8002464 <HAL_ADC_PollForConversion+0x74>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80024f8:	2329      	movs	r3, #41	; 0x29
 80024fa:	e7e7      	b.n	80024cc <HAL_ADC_PollForConversion+0xdc>
 80024fc:	2354      	movs	r3, #84	; 0x54
 80024fe:	e7e5      	b.n	80024cc <HAL_ADC_PollForConversion+0xdc>
 8002500:	23fc      	movs	r3, #252	; 0xfc
 8002502:	e7e3      	b.n	80024cc <HAL_ADC_PollForConversion+0xdc>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002504:	9b01      	ldr	r3, [sp, #4]
 8002506:	42ab      	cmp	r3, r5
 8002508:	d310      	bcc.n	800252c <HAL_ADC_PollForConversion+0x13c>
      Conversion_Timeout_CPU_cycles ++;
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	3301      	adds	r3, #1
 800250e:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002510:	9b01      	ldr	r3, [sp, #4]
 8002512:	42ab      	cmp	r3, r5
 8002514:	d2df      	bcs.n	80024d6 <HAL_ADC_PollForConversion+0xe6>
      if(Timeout != HAL_MAX_DELAY)
 8002516:	f1b4 3fff 	cmp.w	r4, #4294967295
 800251a:	d0f6      	beq.n	800250a <HAL_ADC_PollForConversion+0x11a>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800251c:	2c00      	cmp	r4, #0
 800251e:	d0f1      	beq.n	8002504 <HAL_ADC_PollForConversion+0x114>
 8002520:	f7ff ff4c 	bl	80023bc <HAL_GetTick>
 8002524:	1bc0      	subs	r0, r0, r7
 8002526:	42a0      	cmp	r0, r4
 8002528:	d9ef      	bls.n	800250a <HAL_ADC_PollForConversion+0x11a>
 800252a:	e7eb      	b.n	8002504 <HAL_ADC_PollForConversion+0x114>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800252c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	62b3      	str	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002534:	2300      	movs	r3, #0
 8002536:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            return HAL_TIMEOUT;
 800253a:	2003      	movs	r0, #3
 800253c:	e792      	b.n	8002464 <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800253e:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002540:	b960      	cbnz	r0, 800255c <HAL_ADC_PollForConversion+0x16c>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002542:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002548:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800254c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002550:	d188      	bne.n	8002464 <HAL_ADC_PollForConversion+0x74>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002552:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	62b3      	str	r3, [r6, #40]	; 0x28
 800255a:	e783      	b.n	8002464 <HAL_ADC_PollForConversion+0x74>
  return HAL_OK;
 800255c:	2000      	movs	r0, #0
 800255e:	e781      	b.n	8002464 <HAL_ADC_PollForConversion+0x74>
 8002560:	20000008 	.word	0x20000008
 8002564:	24924924 	.word	0x24924924
 8002568:	12492492 	.word	0x12492492
 800256c:	00492492 	.word	0x00492492
 8002570:	00249249 	.word	0x00249249

08002574 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002574:	6803      	ldr	r3, [r0, #0]
 8002576:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002578:	4770      	bx	lr
	...

0800257c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800257c:	b430      	push	{r4, r5}
 800257e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002580:	2200      	movs	r2, #0
 8002582:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002584:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002588:	2a01      	cmp	r2, #1
 800258a:	f000 8093 	beq.w	80026b4 <HAL_ADC_ConfigChannel+0x138>
 800258e:	4603      	mov	r3, r0
 8002590:	2201      	movs	r2, #1
 8002592:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002596:	684a      	ldr	r2, [r1, #4]
 8002598:	2a06      	cmp	r2, #6
 800259a:	d82d      	bhi.n	80025f8 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800259c:	6804      	ldr	r4, [r0, #0]
 800259e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80025a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025a4:	3a05      	subs	r2, #5
 80025a6:	f04f 0c1f 	mov.w	ip, #31
 80025aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80025ae:	ea20 000c 	bic.w	r0, r0, ip
 80025b2:	680d      	ldr	r5, [r1, #0]
 80025b4:	fa05 f202 	lsl.w	r2, r5, r2
 80025b8:	4302      	orrs	r2, r0
 80025ba:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80025bc:	680a      	ldr	r2, [r1, #0]
 80025be:	2a09      	cmp	r2, #9
 80025c0:	d938      	bls.n	8002634 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025c2:	681c      	ldr	r4, [r3, #0]
 80025c4:	68e0      	ldr	r0, [r4, #12]
 80025c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80025ca:	3a1e      	subs	r2, #30
 80025cc:	f04f 0c07 	mov.w	ip, #7
 80025d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80025d4:	ea20 000c 	bic.w	r0, r0, ip
 80025d8:	688d      	ldr	r5, [r1, #8]
 80025da:	fa05 f202 	lsl.w	r2, r5, r2
 80025de:	4302      	orrs	r2, r0
 80025e0:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025e2:	680a      	ldr	r2, [r1, #0]
 80025e4:	3a10      	subs	r2, #16
 80025e6:	2a01      	cmp	r2, #1
 80025e8:	d934      	bls.n	8002654 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ea:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80025f2:	b002      	add	sp, #8
 80025f4:	bc30      	pop	{r4, r5}
 80025f6:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80025f8:	2a0c      	cmp	r2, #12
 80025fa:	d80d      	bhi.n	8002618 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025fc:	6805      	ldr	r5, [r0, #0]
 80025fe:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002600:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002604:	3a23      	subs	r2, #35	; 0x23
 8002606:	241f      	movs	r4, #31
 8002608:	4094      	lsls	r4, r2
 800260a:	ea20 0004 	bic.w	r0, r0, r4
 800260e:	680c      	ldr	r4, [r1, #0]
 8002610:	4094      	lsls	r4, r2
 8002612:	4320      	orrs	r0, r4
 8002614:	6328      	str	r0, [r5, #48]	; 0x30
 8002616:	e7d1      	b.n	80025bc <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002618:	6805      	ldr	r5, [r0, #0]
 800261a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800261c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002620:	3a41      	subs	r2, #65	; 0x41
 8002622:	241f      	movs	r4, #31
 8002624:	4094      	lsls	r4, r2
 8002626:	ea20 0004 	bic.w	r0, r0, r4
 800262a:	680c      	ldr	r4, [r1, #0]
 800262c:	4094      	lsls	r4, r2
 800262e:	4320      	orrs	r0, r4
 8002630:	62e8      	str	r0, [r5, #44]	; 0x2c
 8002632:	e7c3      	b.n	80025bc <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002634:	681c      	ldr	r4, [r3, #0]
 8002636:	6920      	ldr	r0, [r4, #16]
 8002638:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800263c:	f04f 0c07 	mov.w	ip, #7
 8002640:	fa0c fc02 	lsl.w	ip, ip, r2
 8002644:	ea20 000c 	bic.w	r0, r0, ip
 8002648:	688d      	ldr	r5, [r1, #8]
 800264a:	fa05 f202 	lsl.w	r2, r5, r2
 800264e:	4302      	orrs	r2, r0
 8002650:	6122      	str	r2, [r4, #16]
 8002652:	e7c6      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <HAL_ADC_ConfigChannel+0x13c>)
 8002658:	4290      	cmp	r0, r2
 800265a:	d005      	beq.n	8002668 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800265c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265e:	f042 0220 	orr.w	r2, r2, #32
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002664:	2001      	movs	r0, #1
 8002666:	e7c1      	b.n	80025ec <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002668:	6892      	ldr	r2, [r2, #8]
 800266a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 800266e:	d11d      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002670:	4811      	ldr	r0, [pc, #68]	; (80026b8 <HAL_ADC_ConfigChannel+0x13c>)
 8002672:	6882      	ldr	r2, [r0, #8]
 8002674:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002678:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800267a:	680a      	ldr	r2, [r1, #0]
 800267c:	2a10      	cmp	r2, #16
 800267e:	d001      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x108>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002680:	2000      	movs	r0, #0
 8002682:	e7b3      	b.n	80025ec <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <HAL_ADC_ConfigChannel+0x140>)
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	490d      	ldr	r1, [pc, #52]	; (80026c0 <HAL_ADC_ConfigChannel+0x144>)
 800268a:	fba1 1202 	umull	r1, r2, r1, r2
 800268e:	0c92      	lsrs	r2, r2, #18
 8002690:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002694:	0052      	lsls	r2, r2, #1
 8002696:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002698:	9a01      	ldr	r2, [sp, #4]
 800269a:	b14a      	cbz	r2, 80026b0 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 800269c:	9a01      	ldr	r2, [sp, #4]
 800269e:	3a01      	subs	r2, #1
 80026a0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80026a2:	9a01      	ldr	r2, [sp, #4]
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d1f9      	bne.n	800269c <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a8:	2000      	movs	r0, #0
 80026aa:	e79f      	b.n	80025ec <HAL_ADC_ConfigChannel+0x70>
 80026ac:	2000      	movs	r0, #0
 80026ae:	e79d      	b.n	80025ec <HAL_ADC_ConfigChannel+0x70>
 80026b0:	2000      	movs	r0, #0
 80026b2:	e79b      	b.n	80025ec <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80026b4:	2002      	movs	r0, #2
 80026b6:	e79c      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x76>
 80026b8:	40012400 	.word	0x40012400
 80026bc:	20000008 	.word	0x20000008
 80026c0:	431bde83 	.word	0x431bde83

080026c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026c4:	b530      	push	{r4, r5, lr}
 80026c6:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026cc:	6803      	ldr	r3, [r0, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	f012 0f01 	tst.w	r2, #1
 80026d4:	d13b      	bne.n	800274e <ADC_Enable+0x8a>
 80026d6:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <ADC_Enable+0x90>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <ADC_Enable+0x94>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0c9b      	lsrs	r3, r3, #18
 80026ec:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80026ee:	9b01      	ldr	r3, [sp, #4]
 80026f0:	b12b      	cbz	r3, 80026fe <ADC_Enable+0x3a>
    {
      wait_loop_index--;
 80026f2:	9b01      	ldr	r3, [sp, #4]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80026f8:	9b01      	ldr	r3, [sp, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f9      	bne.n	80026f2 <ADC_Enable+0x2e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026fe:	f7ff fe5d 	bl	80023bc <HAL_GetTick>
 8002702:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f013 0f01 	tst.w	r3, #1
 800270c:	d006      	beq.n	800271c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800270e:	2000      	movs	r0, #0
 8002710:	e01e      	b.n	8002750 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f013 0f01 	tst.w	r3, #1
 800271a:	d116      	bne.n	800274a <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800271c:	f7ff fe4e 	bl	80023bc <HAL_GetTick>
 8002720:	1b43      	subs	r3, r0, r5
 8002722:	2b02      	cmp	r3, #2
 8002724:	d9f5      	bls.n	8002712 <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f013 0f01 	tst.w	r3, #1
 800272e:	d1f0      	bne.n	8002712 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002732:	f043 0310 	orr.w	r3, r3, #16
 8002736:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002740:	2300      	movs	r3, #0
 8002742:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8002746:	2001      	movs	r0, #1
 8002748:	e002      	b.n	8002750 <ADC_Enable+0x8c>
  return HAL_OK;
 800274a:	2000      	movs	r0, #0
 800274c:	e000      	b.n	8002750 <ADC_Enable+0x8c>
 800274e:	2000      	movs	r0, #0
}
 8002750:	b003      	add	sp, #12
 8002752:	bd30      	pop	{r4, r5, pc}
 8002754:	20000008 	.word	0x20000008
 8002758:	431bde83 	.word	0x431bde83

0800275c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800275c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002760:	2b01      	cmp	r3, #1
 8002762:	d066      	beq.n	8002832 <HAL_ADC_Start+0xd6>
{
 8002764:	b510      	push	{r4, lr}
 8002766:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002768:	2301      	movs	r3, #1
 800276a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800276e:	f7ff ffa9 	bl	80026c4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002772:	2800      	cmp	r0, #0
 8002774:	d159      	bne.n	800282a <HAL_ADC_Start+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 8002776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <HAL_ADC_Start+0xdc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d028      	beq.n	80027e0 <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002790:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002794:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800279c:	d005      	beq.n	80027aa <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800279e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027a0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80027a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027a8:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027ac:	f412 5f80 	tst.w	r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027b0:	bf1a      	itte	ne
 80027b2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80027b4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80027b8:	2200      	moveq	r2, #0
 80027ba:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80027bc:	2200      	movs	r2, #0
 80027be:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027c2:	f06f 0202 	mvn.w	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80027d0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80027d4:	d01a      	beq.n	800280c <HAL_ADC_Start+0xb0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	e027      	b.n	8002830 <HAL_ADC_Start+0xd4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027e0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80027e4:	6852      	ldr	r2, [r2, #4]
 80027e6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80027ea:	d0d0      	beq.n	800278e <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027f2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027f4:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_ADC_Start+0xe0>)
 80027f6:	6852      	ldr	r2, [r2, #4]
 80027f8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80027fc:	d0d5      	beq.n	80027aa <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002800:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002808:	62a2      	str	r2, [r4, #40]	; 0x28
 800280a:	e7ce      	b.n	80027aa <HAL_ADC_Start+0x4e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_ADC_Start+0xdc>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_ADC_Start+0xc0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	e009      	b.n	8002830 <HAL_ADC_Start+0xd4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800281c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002820:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002822:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002826:	d1d6      	bne.n	80027d6 <HAL_ADC_Start+0x7a>
 8002828:	e7f3      	b.n	8002812 <HAL_ADC_Start+0xb6>
    __HAL_UNLOCK(hadc);
 800282a:	2300      	movs	r3, #0
 800282c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002830:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002832:	2002      	movs	r0, #2
}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40012800 	.word	0x40012800
 800283c:	40012400 	.word	0x40012400

08002840 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002840:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	f012 0f01 	tst.w	r2, #1
 800284a:	d101      	bne.n	8002850 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800284c:	2000      	movs	r0, #0
}
 800284e:	bd38      	pop	{r3, r4, r5, pc}
 8002850:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800285a:	f7ff fdaf 	bl	80023bc <HAL_GetTick>
 800285e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f013 0f01 	tst.w	r3, #1
 8002868:	d106      	bne.n	8002878 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 800286a:	2000      	movs	r0, #0
 800286c:	e7ef      	b.n	800284e <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f013 0f01 	tst.w	r3, #1
 8002876:	d013      	beq.n	80028a0 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002878:	f7ff fda0 	bl	80023bc <HAL_GetTick>
 800287c:	1b43      	subs	r3, r0, r5
 800287e:	2b02      	cmp	r3, #2
 8002880:	d9f5      	bls.n	800286e <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f013 0f01 	tst.w	r3, #1
 800288a:	d0f0      	beq.n	800286e <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800288e:	f043 0310 	orr.w	r3, r3, #16
 8002892:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800289c:	2001      	movs	r0, #1
 800289e:	e7d6      	b.n	800284e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80028a0:	2000      	movs	r0, #0
 80028a2:	e7d4      	b.n	800284e <ADC_ConversionStop_Disable+0xe>

080028a4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d07a      	beq.n	800299e <HAL_ADC_Init+0xfa>
{
 80028a8:	b570      	push	{r4, r5, r6, lr}
 80028aa:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d04f      	beq.n	8002952 <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff ffc4 	bl	8002840 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028ba:	f013 0310 	ands.w	r3, r3, #16
 80028be:	d168      	bne.n	8002992 <HAL_ADC_Init+0xee>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d166      	bne.n	8002992 <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 80028c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028c6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80028ca:	f022 0202 	bic.w	r2, r2, #2
 80028ce:	f042 0202 	orr.w	r2, r2, #2
 80028d2:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028d4:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028d6:	6862      	ldr	r2, [r4, #4]
 80028d8:	69e5      	ldr	r5, [r4, #28]
 80028da:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028dc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028e0:	68a5      	ldr	r5, [r4, #8]
 80028e2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80028e6:	d004      	beq.n	80028f2 <HAL_ADC_Init+0x4e>
 80028e8:	2d01      	cmp	r5, #1
 80028ea:	bf14      	ite	ne
 80028ec:	2500      	movne	r5, #0
 80028ee:	2501      	moveq	r5, #1
 80028f0:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f2:	7d26      	ldrb	r6, [r4, #20]
 80028f4:	2e01      	cmp	r6, #1
 80028f6:	d032      	beq.n	800295e <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 80028f8:	6826      	ldr	r6, [r4, #0]
 80028fa:	6871      	ldr	r1, [r6, #4]
 80028fc:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002900:	4329      	orrs	r1, r5
 8002902:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002904:	6825      	ldr	r5, [r4, #0]
 8002906:	68ae      	ldr	r6, [r5, #8]
 8002908:	4926      	ldr	r1, [pc, #152]	; (80029a4 <HAL_ADC_Init+0x100>)
 800290a:	4031      	ands	r1, r6
 800290c:	4311      	orrs	r1, r2
 800290e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002910:	68a1      	ldr	r1, [r4, #8]
 8002912:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002916:	d001      	beq.n	800291c <HAL_ADC_Init+0x78>
 8002918:	2901      	cmp	r1, #1
 800291a:	d102      	bne.n	8002922 <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800291c:	6923      	ldr	r3, [r4, #16]
 800291e:	3b01      	subs	r3, #1
 8002920:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002922:	6825      	ldr	r5, [r4, #0]
 8002924:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002926:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800292a:	430b      	orrs	r3, r1
 800292c:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_ADC_Init+0x104>)
 8002934:	400b      	ands	r3, r1
 8002936:	429a      	cmp	r2, r3
 8002938:	d022      	beq.n	8002980 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 800293a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800293c:	f023 0312 	bic.w	r3, r3, #18
 8002940:	f043 0310 	orr.w	r3, r3, #16
 8002944:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002946:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800294e:	2001      	movs	r0, #1
 8002950:	e024      	b.n	800299c <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002952:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002954:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002958:	f7ff fb4e 	bl	8001ff8 <HAL_ADC_MspInit>
 800295c:	e7a9      	b.n	80028b2 <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800295e:	b931      	cbnz	r1, 800296e <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002960:	69a1      	ldr	r1, [r4, #24]
 8002962:	3901      	subs	r1, #1
 8002964:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002968:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 800296c:	e7c4      	b.n	80028f8 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002970:	f041 0120 	orr.w	r1, r1, #32
 8002974:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002978:	f041 0101 	orr.w	r1, r1, #1
 800297c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800297e:	e7bb      	b.n	80028f8 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8002980:	2300      	movs	r3, #0
 8002982:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002990:	e004      	b.n	800299c <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002994:	f043 0310 	orr.w	r3, r3, #16
 8002998:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800299a:	2001      	movs	r0, #1
}
 800299c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800299e:	2001      	movs	r0, #1
}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	ffe1f7fd 	.word	0xffe1f7fd
 80029a8:	ff1f0efe 	.word	0xff1f0efe

080029ac <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80029ac:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d013      	beq.n	80029dc <HAL_ADC_Stop+0x30>
{
 80029b4:	b510      	push	{r4, lr}
 80029b6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80029b8:	2301      	movs	r3, #1
 80029ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029be:	f7ff ff3f 	bl	8002840 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80029c2:	b938      	cbnz	r0, 80029d4 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 80029c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80029d4:	2300      	movs	r3, #0
 80029d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80029da:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80029dc:	2002      	movs	r0, #2
}
 80029de:	4770      	bx	lr

080029e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4907      	ldr	r1, [pc, #28]	; (8002a00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80029e2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029e4:	0203      	lsls	r3, r0, #8
 80029e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ee:	0412      	lsls	r2, r2, #16
 80029f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a04:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_NVIC_SetPriority+0x64>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0e:	f1c3 0c07 	rsb	ip, r3, #7
 8002a12:	f1bc 0f04 	cmp.w	ip, #4
 8002a16:	bf28      	it	cs
 8002a18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1c:	f103 0e04 	add.w	lr, r3, #4
 8002a20:	f1be 0f06 	cmp.w	lr, #6
 8002a24:	bf8c      	ite	hi
 8002a26:	3b03      	subhi	r3, #3
 8002a28:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2a:	f04f 3eff 	mov.w	lr, #4294967295
 8002a2e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002a32:	ea21 010c 	bic.w	r1, r1, ip
 8002a36:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	fa0e fe03 	lsl.w	lr, lr, r3
 8002a3c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002a42:	2800      	cmp	r0, #0
 8002a44:	db09      	blt.n	8002a5a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a46:	0109      	lsls	r1, r1, #4
 8002a48:	b2c9      	uxtb	r1, r1
 8002a4a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a4e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a52:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a56:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	f000 000f 	and.w	r0, r0, #15
 8002a5e:	0109      	lsls	r1, r1, #4
 8002a60:	b2c9      	uxtb	r1, r1
 8002a62:	4b02      	ldr	r3, [pc, #8]	; (8002a6c <HAL_NVIC_SetPriority+0x68>)
 8002a64:	5419      	strb	r1, [r3, r0]
 8002a66:	e7f6      	b.n	8002a56 <HAL_NVIC_SetPriority+0x52>
 8002a68:	e000ed00 	.word	0xe000ed00
 8002a6c:	e000ed14 	.word	0xe000ed14

08002a70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a70:	2800      	cmp	r0, #0
 8002a72:	db07      	blt.n	8002a84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a74:	0941      	lsrs	r1, r0, #5
 8002a76:	f000 001f 	and.w	r0, r0, #31
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4083      	lsls	r3, r0
 8002a7e:	4a02      	ldr	r2, [pc, #8]	; (8002a88 <HAL_NVIC_EnableIRQ+0x18>)
 8002a80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000e100 	.word	0xe000e100

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a90:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	f8d1 9000 	ldr.w	r9, [r1]
 8002a96:	f1b9 0f00 	cmp.w	r9, #0
 8002a9a:	f000 811f 	beq.w	8002cdc <HAL_GPIO_Init+0x250>
 8002a9e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002aa0:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002aa2:	4e90      	ldr	r6, [pc, #576]	; (8002ce4 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002aa4:	4c90      	ldr	r4, [pc, #576]	; (8002ce8 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8002aa6:	4d91      	ldr	r5, [pc, #580]	; (8002cec <HAL_GPIO_Init+0x260>)
 8002aa8:	f8df e244 	ldr.w	lr, [pc, #580]	; 8002cf0 <HAL_GPIO_Init+0x264>
 8002aac:	4694      	mov	ip, r2
 8002aae:	e0ba      	b.n	8002c26 <HAL_GPIO_Init+0x19a>
 8002ab0:	f04f 0c00 	mov.w	ip, #0
 8002ab4:	e025      	b.n	8002b02 <HAL_GPIO_Init+0x76>
 8002ab6:	45a9      	cmp	r9, r5
 8002ab8:	d00f      	beq.n	8002ada <HAL_GPIO_Init+0x4e>
 8002aba:	d906      	bls.n	8002aca <HAL_GPIO_Init+0x3e>
 8002abc:	45f1      	cmp	r9, lr
 8002abe:	d00c      	beq.n	8002ada <HAL_GPIO_Init+0x4e>
 8002ac0:	f8df a230 	ldr.w	sl, [pc, #560]	; 8002cf4 <HAL_GPIO_Init+0x268>
 8002ac4:	45d1      	cmp	r9, sl
 8002ac6:	d008      	beq.n	8002ada <HAL_GPIO_Init+0x4e>
 8002ac8:	e01b      	b.n	8002b02 <HAL_GPIO_Init+0x76>
 8002aca:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002cf8 <HAL_GPIO_Init+0x26c>
 8002ace:	45d1      	cmp	r9, sl
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x4e>
 8002ad2:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002ad6:	45d1      	cmp	r9, sl
 8002ad8:	d10f      	bne.n	8002afa <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ada:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002ade:	f1bc 0f00 	cmp.w	ip, #0
 8002ae2:	f000 80ef 	beq.w	8002cc4 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ae6:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002aea:	bf0c      	ite	eq
 8002aec:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002af0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af4:	f04f 0c08 	mov.w	ip, #8
 8002af8:	e003      	b.n	8002b02 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002afa:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002afe:	45d1      	cmp	r9, sl
 8002b00:	d0eb      	beq.n	8002ada <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b02:	2fff      	cmp	r7, #255	; 0xff
 8002b04:	bf99      	ittee	ls
 8002b06:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b08:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b0a:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b0e:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b12:	f8d9 8000 	ldr.w	r8, [r9]
 8002b16:	f04f 0b0f 	mov.w	fp, #15
 8002b1a:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002b1e:	ea28 080b 	bic.w	r8, r8, fp
 8002b22:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002b26:	ea48 080a 	orr.w	r8, r8, sl
 8002b2a:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b2e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002b32:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002b36:	d06f      	beq.n	8002c18 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b38:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002b3c:	f048 0801 	orr.w	r8, r8, #1
 8002b40:	f8c6 8018 	str.w	r8, [r6, #24]
 8002b44:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002b48:	f008 0801 	and.w	r8, r8, #1
 8002b4c:	f8cd 8004 	str.w	r8, [sp, #4]
 8002b50:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002b54:	f023 0803 	bic.w	r8, r3, #3
 8002b58:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002b5c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002b60:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b64:	f003 0b03 	and.w	fp, r3, #3
 8002b68:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002b6c:	f04f 090f 	mov.w	r9, #15
 8002b70:	fa09 f90b 	lsl.w	r9, r9, fp
 8002b74:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b78:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002cfc <HAL_GPIO_Init+0x270>
 8002b7c:	4548      	cmp	r0, r9
 8002b7e:	f000 80a4 	beq.w	8002cca <HAL_GPIO_Init+0x23e>
 8002b82:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002b86:	4548      	cmp	r0, r9
 8002b88:	f000 80a2 	beq.w	8002cd0 <HAL_GPIO_Init+0x244>
 8002b8c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002b90:	4548      	cmp	r0, r9
 8002b92:	f000 80a0 	beq.w	8002cd6 <HAL_GPIO_Init+0x24a>
 8002b96:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002b9a:	4548      	cmp	r0, r9
 8002b9c:	bf0c      	ite	eq
 8002b9e:	f04f 0903 	moveq.w	r9, #3
 8002ba2:	f04f 0904 	movne.w	r9, #4
 8002ba6:	fa09 f90b 	lsl.w	r9, r9, fp
 8002baa:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002bae:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002bb6:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bba:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002bbe:	bf14      	ite	ne
 8002bc0:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bc4:	ea28 0807 	biceq.w	r8, r8, r7
 8002bc8:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bcc:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002bd0:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bd4:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002bd8:	bf14      	ite	ne
 8002bda:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bde:	ea28 0807 	biceq.w	r8, r8, r7
 8002be2:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002bea:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002bee:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002bf2:	bf14      	ite	ne
 8002bf4:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bf8:	ea28 0807 	biceq.w	r8, r8, r7
 8002bfc:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c00:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002c04:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002c08:	f8d4 8000 	ldr.w	r8, [r4]
 8002c0c:	bf14      	ite	ne
 8002c0e:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c12:	ea28 0707 	biceq.w	r7, r8, r7
 8002c16:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8002c18:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1a:	f8d1 9000 	ldr.w	r9, [r1]
 8002c1e:	3204      	adds	r2, #4
 8002c20:	fa39 f703 	lsrs.w	r7, r9, r3
 8002c24:	d05a      	beq.n	8002cdc <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8002c26:	f04f 0801 	mov.w	r8, #1
 8002c2a:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2e:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002c32:	ea38 0909 	bics.w	r9, r8, r9
 8002c36:	d1ef      	bne.n	8002c18 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002c38:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002c3c:	f1b9 0f12 	cmp.w	r9, #18
 8002c40:	f63f af39 	bhi.w	8002ab6 <HAL_GPIO_Init+0x2a>
 8002c44:	f1b9 0f12 	cmp.w	r9, #18
 8002c48:	f63f af5b 	bhi.w	8002b02 <HAL_GPIO_Init+0x76>
 8002c4c:	f20f 0a04 	addw	sl, pc, #4
 8002c50:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002c54:	08002adb 	.word	0x08002adb
 8002c58:	08002ca1 	.word	0x08002ca1
 8002c5c:	08002cb1 	.word	0x08002cb1
 8002c60:	08002ab1 	.word	0x08002ab1
 8002c64:	08002b03 	.word	0x08002b03
 8002c68:	08002b03 	.word	0x08002b03
 8002c6c:	08002b03 	.word	0x08002b03
 8002c70:	08002b03 	.word	0x08002b03
 8002c74:	08002b03 	.word	0x08002b03
 8002c78:	08002b03 	.word	0x08002b03
 8002c7c:	08002b03 	.word	0x08002b03
 8002c80:	08002b03 	.word	0x08002b03
 8002c84:	08002b03 	.word	0x08002b03
 8002c88:	08002b03 	.word	0x08002b03
 8002c8c:	08002b03 	.word	0x08002b03
 8002c90:	08002b03 	.word	0x08002b03
 8002c94:	08002b03 	.word	0x08002b03
 8002c98:	08002ca7 	.word	0x08002ca7
 8002c9c:	08002cbb 	.word	0x08002cbb
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8002ca4:	e72d      	b.n	8002b02 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ca6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002caa:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002cae:	e728      	b.n	8002b02 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cb0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002cb4:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002cb8:	e723      	b.n	8002b02 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cba:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002cbe:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8002cc2:	e71e      	b.n	8002b02 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cc4:	f04f 0c04 	mov.w	ip, #4
 8002cc8:	e71b      	b.n	8002b02 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cca:	f04f 0900 	mov.w	r9, #0
 8002cce:	e76a      	b.n	8002ba6 <HAL_GPIO_Init+0x11a>
 8002cd0:	f04f 0901 	mov.w	r9, #1
 8002cd4:	e767      	b.n	8002ba6 <HAL_GPIO_Init+0x11a>
 8002cd6:	f04f 0902 	mov.w	r9, #2
 8002cda:	e764      	b.n	8002ba6 <HAL_GPIO_Init+0x11a>
  }
}
 8002cdc:	b003      	add	sp, #12
 8002cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010400 	.word	0x40010400
 8002cec:	10220000 	.word	0x10220000
 8002cf0:	10310000 	.word	0x10310000
 8002cf4:	10320000 	.word	0x10320000
 8002cf8:	10120000 	.word	0x10120000
 8002cfc:	40010800 	.word	0x40010800

08002d00 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d00:	6883      	ldr	r3, [r0, #8]
 8002d02:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002d04:	bf14      	ite	ne
 8002d06:	2001      	movne	r0, #1
 8002d08:	2000      	moveq	r0, #0
 8002d0a:	4770      	bx	lr

08002d0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d0c:	b10a      	cbz	r2, 8002d12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0e:	6101      	str	r1, [r0, #16]
 8002d10:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d12:	0409      	lsls	r1, r1, #16
 8002d14:	6101      	str	r1, [r0, #16]
  }
}
 8002d16:	4770      	bx	lr

08002d18 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d18:	6803      	ldr	r3, [r0, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002d20:	d101      	bne.n	8002d26 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8002d22:	2000      	movs	r0, #0
}
 8002d24:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d2a:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d30:	2220      	movs	r2, #32
 8002d32:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d36:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002d3c:	f042 0204 	orr.w	r2, r2, #4
 8002d40:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002d42:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
 8002d48:	4770      	bx	lr

08002d4a <I2C_WaitOnFlagUntilTimeout>:
{
 8002d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d4e:	4605      	mov	r5, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	4616      	mov	r6, r2
 8002d54:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d56:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002d5a:	f1b8 0f01 	cmp.w	r8, #1
 8002d5e:	682b      	ldr	r3, [r5, #0]
 8002d60:	bf0c      	ite	eq
 8002d62:	695b      	ldreq	r3, [r3, #20]
 8002d64:	699b      	ldrne	r3, [r3, #24]
 8002d66:	ea24 0c03 	bic.w	ip, r4, r3
 8002d6a:	fa1f fc8c 	uxth.w	ip, ip
 8002d6e:	fabc fc8c 	clz	ip, ip
 8002d72:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002d76:	4566      	cmp	r6, ip
 8002d78:	d127      	bne.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 8002d7a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002d7e:	d0ec      	beq.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d80:	f7ff fb1c 	bl	80023bc <HAL_GetTick>
 8002d84:	9b06      	ldr	r3, [sp, #24]
 8002d86:	1ac0      	subs	r0, r0, r3
 8002d88:	42b8      	cmp	r0, r7
 8002d8a:	d801      	bhi.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x46>
 8002d8c:	2f00      	cmp	r7, #0
 8002d8e:	d1e4      	bne.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d90:	f1b8 0f01 	cmp.w	r8, #1
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	bf0c      	ite	eq
 8002d98:	695b      	ldreq	r3, [r3, #20]
 8002d9a:	699b      	ldrne	r3, [r3, #24]
 8002d9c:	ea24 0303 	bic.w	r3, r4, r3
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	429e      	cmp	r6, r3
 8002daa:	d1d6      	bne.n	8002d5a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002db0:	2220      	movs	r2, #32
 8002db2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002db6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002dbc:	f042 0220 	orr.w	r2, r2, #32
 8002dc0:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002dc2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	e000      	b.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8002dca:	2000      	movs	r0, #0
}
 8002dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd4:	4605      	mov	r5, r0
 8002dd6:	460e      	mov	r6, r1
 8002dd8:	4617      	mov	r7, r2
 8002dda:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ddc:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002de0:	f1b8 0f01 	cmp.w	r8, #1
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	bf0c      	ite	eq
 8002de8:	695c      	ldreq	r4, [r3, #20]
 8002dea:	699c      	ldrne	r4, [r3, #24]
 8002dec:	ea26 0404 	bic.w	r4, r6, r4
 8002df0:	b2a4      	uxth	r4, r4
 8002df2:	3c00      	subs	r4, #0
 8002df4:	bf18      	it	ne
 8002df6:	2401      	movne	r4, #1
 8002df8:	2c00      	cmp	r4, #0
 8002dfa:	d044      	beq.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e04:	d127      	bne.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002e0a:	d0e9      	beq.n	8002de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0c:	f7ff fad6 	bl	80023bc <HAL_GetTick>
 8002e10:	eba0 0009 	sub.w	r0, r0, r9
 8002e14:	42b8      	cmp	r0, r7
 8002e16:	d801      	bhi.n	8002e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8002e18:	2f00      	cmp	r7, #0
 8002e1a:	d1e1      	bne.n	8002de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e1c:	f1b8 0f01 	cmp.w	r8, #1
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	bf0c      	ite	eq
 8002e24:	695b      	ldreq	r3, [r3, #20]
 8002e26:	699b      	ldrne	r3, [r3, #24]
 8002e28:	ea26 0303 	bic.w	r3, r6, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b00      	subs	r3, #0
 8002e30:	bf18      	it	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0d3      	beq.n	8002de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e42:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e46:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e48:	f042 0220 	orr.w	r2, r2, #32
 8002e4c:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002e4e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8002e52:	2001      	movs	r0, #1
 8002e54:	e015      	b.n	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5e:	682b      	ldr	r3, [r5, #0]
 8002e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e64:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e74:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e76:	f042 0204 	orr.w	r2, r2, #4
 8002e7a:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002e7c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
}
 8002e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8002e86:	2000      	movs	r0, #0
 8002e88:	e7fb      	b.n	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08002e8a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002e8a:	b570      	push	{r4, r5, r6, lr}
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	460d      	mov	r5, r1
 8002e90:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e9a:	d121      	bne.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7ff ff3b 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002ea2:	b9f8      	cbnz	r0, 8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ea8:	d0f3      	beq.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eaa:	f7ff fa87 	bl	80023bc <HAL_GetTick>
 8002eae:	1b80      	subs	r0, r0, r6
 8002eb0:	42a8      	cmp	r0, r5
 8002eb2:	d801      	bhi.n	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	d1ec      	bne.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ec0:	d1e7      	bne.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ecc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ed2:	f042 0220 	orr.w	r2, r2, #32
 8002ed6:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002ed8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002edc:	2001      	movs	r0, #1
 8002ede:	e000      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8002ee0:	2000      	movs	r0, #0
}
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	e7fc      	b.n	8002ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08002ee8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4604      	mov	r4, r0
 8002eec:	460d      	mov	r5, r1
 8002eee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f013 0f04 	tst.w	r3, #4
 8002ef8:	d121      	bne.n	8002f3e <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7ff ff0c 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002f00:	b9f8      	cbnz	r0, 8002f42 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002f06:	d0f3      	beq.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f08:	f7ff fa58 	bl	80023bc <HAL_GetTick>
 8002f0c:	1b80      	subs	r0, r0, r6
 8002f0e:	42a8      	cmp	r0, r5
 8002f10:	d801      	bhi.n	8002f16 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	d1ec      	bne.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f013 0f04 	tst.w	r3, #4
 8002f1e:	d1e7      	bne.n	8002ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f24:	2220      	movs	r2, #32
 8002f26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f30:	f042 0220 	orr.w	r2, r2, #32
 8002f34:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002f36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	e000      	b.n	8002f40 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8002f3e:	2000      	movs	r0, #0
}
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
 8002f44:	e7fc      	b.n	8002f40 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
	...

08002f48 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	f000 80b1 	beq.w	80030b0 <HAL_I2C_Init+0x168>
{
 8002f4e:	b538      	push	{r3, r4, r5, lr}
 8002f50:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d074      	beq.n	8003044 <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f5a:	2324      	movs	r3, #36	; 0x24
 8002f5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f6a:	6822      	ldr	r2, [r4, #0]
 8002f6c:	6813      	ldr	r3, [r2, #0]
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f72:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f7c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f7e:	f000 fd77 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f82:	6862      	ldr	r2, [r4, #4]
 8002f84:	4b4c      	ldr	r3, [pc, #304]	; (80030b8 <HAL_I2C_Init+0x170>)
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d861      	bhi.n	800304e <HAL_I2C_Init+0x106>
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_I2C_Init+0x174>)
 8002f8c:	4298      	cmp	r0, r3
 8002f8e:	f240 8091 	bls.w	80030b4 <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 8002f92:	494b      	ldr	r1, [pc, #300]	; (80030c0 <HAL_I2C_Init+0x178>)
 8002f94:	fba1 3100 	umull	r3, r1, r1, r0
 8002f98:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9a:	6825      	ldr	r5, [r4, #0]
 8002f9c:	686a      	ldr	r2, [r5, #4]
 8002f9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002fa2:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002fa6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fa8:	6821      	ldr	r1, [r4, #0]
 8002faa:	6a0a      	ldr	r2, [r1, #32]
 8002fac:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002fb0:	4d41      	ldr	r5, [pc, #260]	; (80030b8 <HAL_I2C_Init+0x170>)
 8002fb2:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8002fb6:	45ac      	cmp	ip, r5
 8002fb8:	d84e      	bhi.n	8003058 <HAL_I2C_Init+0x110>
 8002fba:	3301      	adds	r3, #1
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fc0:	6821      	ldr	r1, [r4, #0]
 8002fc2:	69ca      	ldr	r2, [r1, #28]
 8002fc4:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8002fc8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fcc:	6865      	ldr	r5, [r4, #4]
 8002fce:	4b3a      	ldr	r3, [pc, #232]	; (80030b8 <HAL_I2C_Init+0x170>)
 8002fd0:	429d      	cmp	r5, r3
 8002fd2:	d84b      	bhi.n	800306c <HAL_I2C_Init+0x124>
 8002fd4:	1e43      	subs	r3, r0, #1
 8002fd6:	006d      	lsls	r5, r5, #1
 8002fd8:	fbb3 f3f5 	udiv	r3, r3, r5
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002fe2:	4203      	tst	r3, r0
 8002fe4:	d05e      	beq.n	80030a4 <HAL_I2C_Init+0x15c>
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	431a      	orrs	r2, r3
 8002fec:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fee:	6821      	ldr	r1, [r4, #0]
 8002ff0:	680a      	ldr	r2, [r1, #0]
 8002ff2:	69e3      	ldr	r3, [r4, #28]
 8002ff4:	6a20      	ldr	r0, [r4, #32]
 8002ff6:	4303      	orrs	r3, r0
 8002ff8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003000:	6821      	ldr	r1, [r4, #0]
 8003002:	688a      	ldr	r2, [r1, #8]
 8003004:	6923      	ldr	r3, [r4, #16]
 8003006:	68e0      	ldr	r0, [r4, #12]
 8003008:	4303      	orrs	r3, r0
 800300a:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800300e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003016:	6821      	ldr	r1, [r4, #0]
 8003018:	68ca      	ldr	r2, [r1, #12]
 800301a:	6963      	ldr	r3, [r4, #20]
 800301c:	69a0      	ldr	r0, [r4, #24]
 800301e:	4303      	orrs	r3, r0
 8003020:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003024:	4313      	orrs	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003028:	6822      	ldr	r2, [r4, #0]
 800302a:	6813      	ldr	r3, [r2, #0]
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003032:	2000      	movs	r0, #0
 8003034:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003036:	2320      	movs	r3, #32
 8003038:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800303c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003042:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003044:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003048:	f7ff f828 	bl	800209c <HAL_I2C_MspInit>
 800304c:	e785      	b.n	8002f5a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_I2C_Init+0x17c>)
 8003050:	4298      	cmp	r0, r3
 8003052:	d89e      	bhi.n	8002f92 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003054:	2001      	movs	r0, #1
 8003056:	e7f4      	b.n	8003042 <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003058:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800305c:	fb05 f303 	mul.w	r3, r5, r3
 8003060:	4d19      	ldr	r5, [pc, #100]	; (80030c8 <HAL_I2C_Init+0x180>)
 8003062:	fba5 5303 	umull	r5, r3, r5, r3
 8003066:	099b      	lsrs	r3, r3, #6
 8003068:	3301      	adds	r3, #1
 800306a:	e7a7      	b.n	8002fbc <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800306c:	68a3      	ldr	r3, [r4, #8]
 800306e:	b95b      	cbnz	r3, 8003088 <HAL_I2C_Init+0x140>
 8003070:	1e43      	subs	r3, r0, #1
 8003072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003076:	fbb3 f3f5 	udiv	r3, r3, r5
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	b193      	cbz	r3, 80030a8 <HAL_I2C_Init+0x160>
 8003082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003086:	e7b0      	b.n	8002fea <HAL_I2C_Init+0xa2>
 8003088:	1e43      	subs	r3, r0, #1
 800308a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800308e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003092:	fbb3 f3f5 	udiv	r3, r3, r5
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	b133      	cbz	r3, 80030ac <HAL_I2C_Init+0x164>
 800309e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a2:	e7a2      	b.n	8002fea <HAL_I2C_Init+0xa2>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e7a0      	b.n	8002fea <HAL_I2C_Init+0xa2>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e79e      	b.n	8002fea <HAL_I2C_Init+0xa2>
 80030ac:	2301      	movs	r3, #1
 80030ae:	e79c      	b.n	8002fea <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 80030b0:	2001      	movs	r0, #1
}
 80030b2:	4770      	bx	lr
    return HAL_ERROR;
 80030b4:	2001      	movs	r0, #1
 80030b6:	e7c4      	b.n	8003042 <HAL_I2C_Init+0xfa>
 80030b8:	000186a0 	.word	0x000186a0
 80030bc:	001e847f 	.word	0x001e847f
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	003d08ff 	.word	0x003d08ff
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_I2C_Master_Transmit>:
{
 80030cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030d0:	b085      	sub	sp, #20
 80030d2:	4604      	mov	r4, r0
 80030d4:	460f      	mov	r7, r1
 80030d6:	4691      	mov	r9, r2
 80030d8:	4698      	mov	r8, r3
 80030da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff f96e 	bl	80023bc <HAL_GetTick>
 80030e0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80030e6:	b2c0      	uxtb	r0, r0
 80030e8:	2820      	cmp	r0, #32
 80030ea:	d004      	beq.n	80030f6 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80030ec:	2702      	movs	r7, #2
}
 80030ee:	4638      	mov	r0, r7
 80030f0:	b005      	add	sp, #20
 80030f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f6:	9500      	str	r5, [sp, #0]
 80030f8:	2319      	movs	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	4971      	ldr	r1, [pc, #452]	; (80032c4 <HAL_I2C_Master_Transmit+0x1f8>)
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff fe23 	bl	8002d4a <I2C_WaitOnFlagUntilTimeout>
 8003104:	2800      	cmp	r0, #0
 8003106:	f040 80d7 	bne.w	80032b8 <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 800310a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	f000 80d4 	beq.w	80032bc <HAL_I2C_Master_Transmit+0x1f0>
 8003114:	2301      	movs	r3, #1
 8003116:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	f012 0f01 	tst.w	r2, #1
 8003122:	d103      	bne.n	800312c <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003134:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003136:	2321      	movs	r3, #33	; 0x21
 8003138:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800313c:	2310      	movs	r3, #16
 800313e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003142:	2300      	movs	r3, #0
 8003144:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003146:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800314a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800314e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003150:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_I2C_Master_Transmit+0x1fc>)
 8003154:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003156:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003158:	2b08      	cmp	r3, #8
 800315a:	d00d      	beq.n	8003178 <HAL_I2C_Master_Transmit+0xac>
 800315c:	2b01      	cmp	r3, #1
 800315e:	d00b      	beq.n	8003178 <HAL_I2C_Master_Transmit+0xac>
 8003160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003164:	d008      	beq.n	8003178 <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003168:	2b12      	cmp	r3, #18
 800316a:	d10a      	bne.n	8003182 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e004      	b.n	8003182 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003182:	9500      	str	r5, [sp, #0]
 8003184:	4633      	mov	r3, r6
 8003186:	2200      	movs	r2, #0
 8003188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800318c:	4620      	mov	r0, r4
 800318e:	f7ff fddc 	bl	8002d4a <I2C_WaitOnFlagUntilTimeout>
 8003192:	b9d0      	cbnz	r0, 80031ca <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003194:	6923      	ldr	r3, [r4, #16]
 8003196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319a:	d120      	bne.n	80031de <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80031a2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a4:	462b      	mov	r3, r5
 80031a6:	4632      	mov	r2, r6
 80031a8:	4948      	ldr	r1, [pc, #288]	; (80032cc <HAL_I2C_Master_Transmit+0x200>)
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7ff fe10 	bl	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031b0:	4607      	mov	r7, r0
 80031b2:	2800      	cmp	r0, #0
 80031b4:	f040 8084 	bne.w	80032c0 <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b8:	2300      	movs	r3, #0
 80031ba:	9303      	str	r3, [sp, #12]
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	9203      	str	r2, [sp, #12]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	9303      	str	r3, [sp, #12]
 80031c6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80031c8:	e02f      	b.n	800322a <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80031d2:	d002      	beq.n	80031da <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d8:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80031da:	2701      	movs	r7, #1
 80031dc:	e787      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	11fb      	asrs	r3, r7, #7
 80031e2:	f003 0306 	and.w	r3, r3, #6
 80031e6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80031ea:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031ec:	462b      	mov	r3, r5
 80031ee:	4632      	mov	r2, r6
 80031f0:	4937      	ldr	r1, [pc, #220]	; (80032d0 <HAL_I2C_Master_Transmit+0x204>)
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff fdec 	bl	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d1ee      	bne.n	80031da <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	b2ff      	uxtb	r7, r7
 8003200:	611f      	str	r7, [r3, #16]
 8003202:	e7cf      	b.n	80031a4 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003206:	2b04      	cmp	r3, #4
 8003208:	d001      	beq.n	800320e <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 800320a:	2701      	movs	r7, #1
 800320c:	e76f      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320e:	6822      	ldr	r2, [r4, #0]
 8003210:	6813      	ldr	r3, [r2, #0]
 8003212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003216:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003218:	2701      	movs	r7, #1
 800321a:	e768      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321c:	462a      	mov	r2, r5
 800321e:	4631      	mov	r1, r6
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff fe61 	bl	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003226:	2800      	cmp	r0, #0
 8003228:	d12c      	bne.n	8003284 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 800322a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d035      	beq.n	800329c <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003230:	462a      	mov	r2, r5
 8003232:	4631      	mov	r1, r6
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff fe28 	bl	8002e8a <I2C_WaitOnTXEFlagUntilTimeout>
 800323a:	2800      	cmp	r0, #0
 800323c:	d1e2      	bne.n	8003204 <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003246:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003248:	1c53      	adds	r3, r2, #1
 800324a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800324c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800324e:	3901      	subs	r1, #1
 8003250:	b289      	uxth	r1, r1
 8003252:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003254:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003256:	3901      	subs	r1, #1
 8003258:	b289      	uxth	r1, r1
 800325a:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	6958      	ldr	r0, [r3, #20]
 8003260:	f010 0f04 	tst.w	r0, #4
 8003264:	d0da      	beq.n	800321c <HAL_I2C_Master_Transmit+0x150>
 8003266:	2900      	cmp	r1, #0
 8003268:	d0d8      	beq.n	800321c <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326a:	7852      	ldrb	r2, [r2, #1]
 800326c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800326e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003270:	3301      	adds	r3, #1
 8003272:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003274:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003276:	3b01      	subs	r3, #1
 8003278:	b29b      	uxth	r3, r3
 800327a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800327c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	8523      	strh	r3, [r4, #40]	; 0x28
 8003282:	e7cb      	b.n	800321c <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d001      	beq.n	800328e <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 800328a:	2701      	movs	r7, #1
 800328c:	e72f      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	6822      	ldr	r2, [r4, #0]
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003296:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003298:	2701      	movs	r7, #1
 800329a:	e728      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	2320      	movs	r3, #32
 80032a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80032b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80032b6:	e71a      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80032b8:	2702      	movs	r7, #2
 80032ba:	e718      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80032bc:	2702      	movs	r7, #2
 80032be:	e716      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80032c0:	2701      	movs	r7, #1
 80032c2:	e714      	b.n	80030ee <HAL_I2C_Master_Transmit+0x22>
 80032c4:	00100002 	.word	0x00100002
 80032c8:	ffff0000 	.word	0xffff0000
 80032cc:	00010002 	.word	0x00010002
 80032d0:	00010008 	.word	0x00010008

080032d4 <HAL_I2C_IsDeviceReady>:
{
 80032d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d8:	b085      	sub	sp, #20
 80032da:	4604      	mov	r4, r0
 80032dc:	4689      	mov	r9, r1
 80032de:	4692      	mov	sl, r2
 80032e0:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80032e2:	f7ff f86b 	bl	80023bc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d003      	beq.n	80032f8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80032f0:	2002      	movs	r0, #2
}
 80032f2:	b005      	add	sp, #20
 80032f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032f8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032fa:	9000      	str	r0, [sp, #0]
 80032fc:	2319      	movs	r3, #25
 80032fe:	2201      	movs	r2, #1
 8003300:	495d      	ldr	r1, [pc, #372]	; (8003478 <HAL_I2C_IsDeviceReady+0x1a4>)
 8003302:	4620      	mov	r0, r4
 8003304:	f7ff fd21 	bl	8002d4a <I2C_WaitOnFlagUntilTimeout>
 8003308:	2800      	cmp	r0, #0
 800330a:	f040 80ab 	bne.w	8003464 <HAL_I2C_IsDeviceReady+0x190>
    __HAL_LOCK(hi2c);
 800330e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	f000 80a8 	beq.w	8003468 <HAL_I2C_IsDeviceReady+0x194>
 8003318:	2301      	movs	r3, #1
 800331a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f012 0f01 	tst.w	r2, #1
 8003326:	d103      	bne.n	8003330 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003338:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800333a:	2324      	movs	r3, #36	; 0x24
 800333c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	2300      	movs	r3, #0
 8003342:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003344:	4a4d      	ldr	r2, [pc, #308]	; (800347c <HAL_I2C_IsDeviceReady+0x1a8>)
 8003346:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 0U;
 8003348:	4698      	mov	r8, r3
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334a:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800334e:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003478 <HAL_I2C_IsDeviceReady+0x1a4>
 8003352:	e03f      	b.n	80033d4 <HAL_I2C_IsDeviceReady+0x100>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f413 7f80 	tst.w	r3, #256	; 0x100
 800335c:	f000 8086 	beq.w	800346c <HAL_I2C_IsDeviceReady+0x198>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003364:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003366:	2003      	movs	r0, #3
 8003368:	e7c3      	b.n	80032f2 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800336a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800336e:	6822      	ldr	r2, [r4, #0]
 8003370:	6953      	ldr	r3, [r2, #20]
 8003372:	f003 0302 	and.w	r3, r3, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003376:	6951      	ldr	r1, [r2, #20]
 8003378:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800337c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	2aa0      	cmp	r2, #160	; 0xa0
 8003384:	d009      	beq.n	800339a <HAL_I2C_IsDeviceReady+0xc6>
 8003386:	430b      	orrs	r3, r1
 8003388:	d107      	bne.n	800339a <HAL_I2C_IsDeviceReady+0xc6>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7ff f817 	bl	80023bc <HAL_GetTick>
 800338e:	1b80      	subs	r0, r0, r6
 8003390:	42a8      	cmp	r0, r5
 8003392:	d8ea      	bhi.n	800336a <HAL_I2C_IsDeviceReady+0x96>
 8003394:	2d00      	cmp	r5, #0
 8003396:	d1ea      	bne.n	800336e <HAL_I2C_IsDeviceReady+0x9a>
 8003398:	e7e7      	b.n	800336a <HAL_I2C_IsDeviceReady+0x96>
      hi2c->State = HAL_I2C_STATE_READY;
 800339a:	2320      	movs	r3, #32
 800339c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	f012 0f02 	tst.w	r2, #2
 80033a8:	d139      	bne.n	800341e <HAL_I2C_IsDeviceReady+0x14a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033b8:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ba:	9600      	str	r6, [sp, #0]
 80033bc:	2319      	movs	r3, #25
 80033be:	2201      	movs	r2, #1
 80033c0:	4659      	mov	r1, fp
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff fcc1 	bl	8002d4a <I2C_WaitOnFlagUntilTimeout>
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d153      	bne.n	8003474 <HAL_I2C_IsDeviceReady+0x1a0>
      I2C_Trials++;
 80033cc:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 80033d0:	45d0      	cmp	r8, sl
 80033d2:	d23f      	bcs.n	8003454 <HAL_I2C_IsDeviceReady+0x180>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033de:	9600      	str	r6, [sp, #0]
 80033e0:	462b      	mov	r3, r5
 80033e2:	2200      	movs	r2, #0
 80033e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e8:	4620      	mov	r0, r4
 80033ea:	f7ff fcae 	bl	8002d4a <I2C_WaitOnFlagUntilTimeout>
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d1b0      	bne.n	8003354 <HAL_I2C_IsDeviceReady+0x80>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80033f8:	f7fe ffe0 	bl	80023bc <HAL_GetTick>
 80033fc:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	6953      	ldr	r3, [r2, #20]
 8003402:	f003 0302 	and.w	r3, r3, #2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003406:	6951      	ldr	r1, [r2, #20]
 8003408:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800340c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	2aa0      	cmp	r2, #160	; 0xa0
 8003414:	d0c1      	beq.n	800339a <HAL_I2C_IsDeviceReady+0xc6>
 8003416:	430b      	orrs	r3, r1
 8003418:	d1bf      	bne.n	800339a <HAL_I2C_IsDeviceReady+0xc6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800341a:	27a0      	movs	r7, #160	; 0xa0
 800341c:	e7b5      	b.n	800338a <HAL_I2C_IsDeviceReady+0xb6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003424:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	9303      	str	r3, [sp, #12]
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	9203      	str	r2, [sp, #12]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	9303      	str	r3, [sp, #12]
 8003434:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003436:	9600      	str	r6, [sp, #0]
 8003438:	2319      	movs	r3, #25
 800343a:	2201      	movs	r2, #1
 800343c:	490e      	ldr	r1, [pc, #56]	; (8003478 <HAL_I2C_IsDeviceReady+0x1a4>)
 800343e:	4620      	mov	r0, r4
 8003440:	f7ff fc83 	bl	8002d4a <I2C_WaitOnFlagUntilTimeout>
 8003444:	b9a0      	cbnz	r0, 8003470 <HAL_I2C_IsDeviceReady+0x19c>
        hi2c->State = HAL_I2C_STATE_READY;
 8003446:	2320      	movs	r3, #32
 8003448:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800344c:	2300      	movs	r3, #0
 800344e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8003452:	e74e      	b.n	80032f2 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	2320      	movs	r3, #32
 8003456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800345a:	2300      	movs	r3, #0
 800345c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003460:	2001      	movs	r0, #1
 8003462:	e746      	b.n	80032f2 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003464:	2002      	movs	r0, #2
 8003466:	e744      	b.n	80032f2 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003468:	2002      	movs	r0, #2
 800346a:	e742      	b.n	80032f2 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 800346c:	2003      	movs	r0, #3
 800346e:	e740      	b.n	80032f2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003470:	2001      	movs	r0, #1
 8003472:	e73e      	b.n	80032f2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003474:	2001      	movs	r0, #1
 8003476:	e73c      	b.n	80032f2 <HAL_I2C_IsDeviceReady+0x1e>
 8003478:	00100002 	.word	0x00100002
 800347c:	ffff0000 	.word	0xffff0000

08003480 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003480:	2800      	cmp	r0, #0
 8003482:	f000 8201 	beq.w	8003888 <HAL_RCC_OscConfig+0x408>
{
 8003486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348e:	6803      	ldr	r3, [r0, #0]
 8003490:	f013 0f01 	tst.w	r3, #1
 8003494:	d02c      	beq.n	80034f0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003496:	4b9f      	ldr	r3, [pc, #636]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d01d      	beq.n	80034de <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a2:	4b9c      	ldr	r3, [pc, #624]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d012      	beq.n	80034d4 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	6863      	ldr	r3, [r4, #4]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d041      	beq.n	800353a <HAL_RCC_OscConfig+0xba>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d155      	bne.n	8003566 <HAL_RCC_OscConfig+0xe6>
 80034ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034be:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e037      	b.n	8003544 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034d4:	4b8f      	ldr	r3, [pc, #572]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80034dc:	d0e7      	beq.n	80034ae <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034de:	4b8d      	ldr	r3, [pc, #564]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034e6:	d003      	beq.n	80034f0 <HAL_RCC_OscConfig+0x70>
 80034e8:	6863      	ldr	r3, [r4, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 81ce 	beq.w	800388c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	f013 0f02 	tst.w	r3, #2
 80034f6:	d075      	beq.n	80035e4 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f8:	4b86      	ldr	r3, [pc, #536]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f013 0f0c 	tst.w	r3, #12
 8003500:	d05f      	beq.n	80035c2 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003502:	4b84      	ldr	r3, [pc, #528]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b08      	cmp	r3, #8
 800350c:	d054      	beq.n	80035b8 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800350e:	6923      	ldr	r3, [r4, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 808a 	beq.w	800362a <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003516:	4b80      	ldr	r3, [pc, #512]	; (8003718 <HAL_RCC_OscConfig+0x298>)
 8003518:	2201      	movs	r2, #1
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe ff4e 	bl	80023bc <HAL_GetTick>
 8003520:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003522:	4e7c      	ldr	r6, [pc, #496]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 8003524:	6833      	ldr	r3, [r6, #0]
 8003526:	f013 0f02 	tst.w	r3, #2
 800352a:	d175      	bne.n	8003618 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fe ff46 	bl	80023bc <HAL_GetTick>
 8003530:	1b40      	subs	r0, r0, r5
 8003532:	2802      	cmp	r0, #2
 8003534:	d9f6      	bls.n	8003524 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8003536:	2003      	movs	r0, #3
 8003538:	e1ad      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353a:	4a76      	ldr	r2, [pc, #472]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 800353c:	6813      	ldr	r3, [r2, #0]
 800353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003544:	6863      	ldr	r3, [r4, #4]
 8003546:	b343      	cbz	r3, 800359a <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003548:	f7fe ff38 	bl	80023bc <HAL_GetTick>
 800354c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4e71      	ldr	r6, [pc, #452]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 8003550:	6833      	ldr	r3, [r6, #0]
 8003552:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003556:	d1cb      	bne.n	80034f0 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe ff30 	bl	80023bc <HAL_GetTick>
 800355c:	1b40      	subs	r0, r0, r5
 800355e:	2864      	cmp	r0, #100	; 0x64
 8003560:	d9f6      	bls.n	8003550 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8003562:	2003      	movs	r0, #3
 8003564:	e197      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003566:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356a:	d009      	beq.n	8003580 <HAL_RCC_OscConfig+0x100>
 800356c:	4b69      	ldr	r3, [pc, #420]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e7e1      	b.n	8003544 <HAL_RCC_OscConfig+0xc4>
 8003580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003584:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e7d4      	b.n	8003544 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800359a:	f7fe ff0f 	bl	80023bc <HAL_GetTick>
 800359e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a0:	4e5c      	ldr	r6, [pc, #368]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80035a2:	6833      	ldr	r3, [r6, #0]
 80035a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035a8:	d0a2      	beq.n	80034f0 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035aa:	f7fe ff07 	bl	80023bc <HAL_GetTick>
 80035ae:	1b40      	subs	r0, r0, r5
 80035b0:	2864      	cmp	r0, #100	; 0x64
 80035b2:	d9f6      	bls.n	80035a2 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80035b4:	2003      	movs	r0, #3
 80035b6:	e16e      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035b8:	4b56      	ldr	r3, [pc, #344]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80035c0:	d1a5      	bne.n	800350e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	4b54      	ldr	r3, [pc, #336]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f013 0f02 	tst.w	r3, #2
 80035ca:	d003      	beq.n	80035d4 <HAL_RCC_OscConfig+0x154>
 80035cc:	6923      	ldr	r3, [r4, #16]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	f040 815e 	bne.w	8003890 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d4:	4a4f      	ldr	r2, [pc, #316]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	6961      	ldr	r1, [r4, #20]
 80035da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80035de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035e2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	f013 0f08 	tst.w	r3, #8
 80035ea:	d03d      	beq.n	8003668 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ec:	69a3      	ldr	r3, [r4, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d066      	beq.n	80036c0 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b49      	ldr	r3, [pc, #292]	; (8003718 <HAL_RCC_OscConfig+0x298>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fe fedf 	bl	80023bc <HAL_GetTick>
 80035fe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003600:	4e44      	ldr	r6, [pc, #272]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 8003602:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003604:	f013 0f02 	tst.w	r3, #2
 8003608:	d121      	bne.n	800364e <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360a:	f7fe fed7 	bl	80023bc <HAL_GetTick>
 800360e:	1b40      	subs	r0, r0, r5
 8003610:	2802      	cmp	r0, #2
 8003612:	d9f6      	bls.n	8003602 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003614:	2003      	movs	r0, #3
 8003616:	e13e      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4a3e      	ldr	r2, [pc, #248]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	6961      	ldr	r1, [r4, #20]
 800361e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003622:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	e7dc      	b.n	80035e4 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_OscConfig+0x298>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003630:	f7fe fec4 	bl	80023bc <HAL_GetTick>
 8003634:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003636:	4e37      	ldr	r6, [pc, #220]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 8003638:	6833      	ldr	r3, [r6, #0]
 800363a:	f013 0f02 	tst.w	r3, #2
 800363e:	d0d1      	beq.n	80035e4 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003640:	f7fe febc 	bl	80023bc <HAL_GetTick>
 8003644:	1b40      	subs	r0, r0, r5
 8003646:	2802      	cmp	r0, #2
 8003648:	d9f6      	bls.n	8003638 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 800364a:	2003      	movs	r0, #3
 800364c:	e123      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_RCC_OscConfig+0x29c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a33      	ldr	r2, [pc, #204]	; (8003720 <HAL_RCC_OscConfig+0x2a0>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	0a5b      	lsrs	r3, r3, #9
 800365a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800365c:	bf00      	nop
  }
  while (Delay --);
 800365e:	9b01      	ldr	r3, [sp, #4]
 8003660:	1e5a      	subs	r2, r3, #1
 8003662:	9201      	str	r2, [sp, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f9      	bne.n	800365c <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	f013 0f04 	tst.w	r3, #4
 800366e:	f000 809b 	beq.w	80037a8 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003672:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800367a:	d134      	bne.n	80036e6 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003684:	61da      	str	r2, [r3, #28]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003690:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCC_OscConfig+0x2a4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f413 7f80 	tst.w	r3, #256	; 0x100
 800369a:	d026      	beq.n	80036ea <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369c:	68e3      	ldr	r3, [r4, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d042      	beq.n	8003728 <HAL_RCC_OscConfig+0x2a8>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d158      	bne.n	8003758 <HAL_RCC_OscConfig+0x2d8>
 80036a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80036ae:	6a1a      	ldr	r2, [r3, #32]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	621a      	str	r2, [r3, #32]
 80036b6:	6a1a      	ldr	r2, [r3, #32]
 80036b8:	f022 0204 	bic.w	r2, r2, #4
 80036bc:	621a      	str	r2, [r3, #32]
 80036be:	e038      	b.n	8003732 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_RCC_OscConfig+0x298>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80036c8:	f7fe fe78 	bl	80023bc <HAL_GetTick>
 80036cc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ce:	4e11      	ldr	r6, [pc, #68]	; (8003714 <HAL_RCC_OscConfig+0x294>)
 80036d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036d2:	f013 0f02 	tst.w	r3, #2
 80036d6:	d0c7      	beq.n	8003668 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fe fe70 	bl	80023bc <HAL_GetTick>
 80036dc:	1b40      	subs	r0, r0, r5
 80036de:	2802      	cmp	r0, #2
 80036e0:	d9f6      	bls.n	80036d0 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80036e2:	2003      	movs	r0, #3
 80036e4:	e0d7      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80036e6:	2500      	movs	r5, #0
 80036e8:	e7d3      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ea:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_RCC_OscConfig+0x2a4>)
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80036f4:	f7fe fe62 	bl	80023bc <HAL_GetTick>
 80036f8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fa:	4f0a      	ldr	r7, [pc, #40]	; (8003724 <HAL_RCC_OscConfig+0x2a4>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003702:	d1cb      	bne.n	800369c <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fe fe5a 	bl	80023bc <HAL_GetTick>
 8003708:	1b80      	subs	r0, r0, r6
 800370a:	2864      	cmp	r0, #100	; 0x64
 800370c:	d9f6      	bls.n	80036fc <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800370e:	2003      	movs	r0, #3
 8003710:	e0c1      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	42420000 	.word	0x42420000
 800371c:	20000008 	.word	0x20000008
 8003720:	10624dd3 	.word	0x10624dd3
 8003724:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003728:	4a5e      	ldr	r2, [pc, #376]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 800372a:	6a13      	ldr	r3, [r2, #32]
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	b333      	cbz	r3, 8003784 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003736:	f7fe fe41 	bl	80023bc <HAL_GetTick>
 800373a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373c:	4f59      	ldr	r7, [pc, #356]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f013 0f02 	tst.w	r3, #2
 8003748:	d12d      	bne.n	80037a6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe fe37 	bl	80023bc <HAL_GetTick>
 800374e:	1b80      	subs	r0, r0, r6
 8003750:	4540      	cmp	r0, r8
 8003752:	d9f6      	bls.n	8003742 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003754:	2003      	movs	r0, #3
 8003756:	e09e      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	2b05      	cmp	r3, #5
 800375a:	d009      	beq.n	8003770 <HAL_RCC_OscConfig+0x2f0>
 800375c:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 800375e:	6a1a      	ldr	r2, [r3, #32]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	621a      	str	r2, [r3, #32]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	f022 0204 	bic.w	r2, r2, #4
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	e7e0      	b.n	8003732 <HAL_RCC_OscConfig+0x2b2>
 8003770:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 8003772:	6a1a      	ldr	r2, [r3, #32]
 8003774:	f042 0204 	orr.w	r2, r2, #4
 8003778:	621a      	str	r2, [r3, #32]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	621a      	str	r2, [r3, #32]
 8003782:	e7d6      	b.n	8003732 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003784:	f7fe fe1a 	bl	80023bc <HAL_GetTick>
 8003788:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378a:	4f46      	ldr	r7, [pc, #280]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	f013 0f02 	tst.w	r3, #2
 8003796:	d006      	beq.n	80037a6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003798:	f7fe fe10 	bl	80023bc <HAL_GetTick>
 800379c:	1b80      	subs	r0, r0, r6
 800379e:	4540      	cmp	r0, r8
 80037a0:	d9f6      	bls.n	8003790 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80037a2:	2003      	movs	r0, #3
 80037a4:	e077      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80037a6:	b9e5      	cbnz	r5, 80037e2 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a8:	69e3      	ldr	r3, [r4, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d072      	beq.n	8003894 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ae:	4a3d      	ldr	r2, [pc, #244]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 80037b0:	6852      	ldr	r2, [r2, #4]
 80037b2:	f002 020c 	and.w	r2, r2, #12
 80037b6:	2a08      	cmp	r2, #8
 80037b8:	d056      	beq.n	8003868 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d017      	beq.n	80037ee <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80037be:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCC_OscConfig+0x428>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80037c4:	f7fe fdfa 	bl	80023bc <HAL_GetTick>
 80037c8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ca:	4d36      	ldr	r5, [pc, #216]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037d2:	d047      	beq.n	8003864 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe fdf2 	bl	80023bc <HAL_GetTick>
 80037d8:	1b00      	subs	r0, r0, r4
 80037da:	2802      	cmp	r0, #2
 80037dc:	d9f6      	bls.n	80037cc <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80037de:	2003      	movs	r0, #3
 80037e0:	e059      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e2:	4a30      	ldr	r2, [pc, #192]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 80037e4:	69d3      	ldr	r3, [r2, #28]
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ea:	61d3      	str	r3, [r2, #28]
 80037ec:	e7dc      	b.n	80037a8 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <HAL_RCC_OscConfig+0x428>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80037f4:	f7fe fde2 	bl	80023bc <HAL_GetTick>
 80037f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	4e2a      	ldr	r6, [pc, #168]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 80037fc:	6833      	ldr	r3, [r6, #0]
 80037fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003802:	d006      	beq.n	8003812 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fdda 	bl	80023bc <HAL_GetTick>
 8003808:	1b40      	subs	r0, r0, r5
 800380a:	2802      	cmp	r0, #2
 800380c:	d9f6      	bls.n	80037fc <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800380e:	2003      	movs	r0, #3
 8003810:	e041      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003812:	6a23      	ldr	r3, [r4, #32]
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003818:	d01a      	beq.n	8003850 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800381a:	4922      	ldr	r1, [pc, #136]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 800381c:	684a      	ldr	r2, [r1, #4]
 800381e:	6a23      	ldr	r3, [r4, #32]
 8003820:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003822:	4303      	orrs	r3, r0
 8003824:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCC_OscConfig+0x428>)
 800382e:	2201      	movs	r2, #1
 8003830:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003832:	f7fe fdc3 	bl	80023bc <HAL_GetTick>
 8003836:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003838:	4d1a      	ldr	r5, [pc, #104]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003840:	d10e      	bne.n	8003860 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7fe fdbb 	bl	80023bc <HAL_GetTick>
 8003846:	1b00      	subs	r0, r0, r4
 8003848:	2802      	cmp	r0, #2
 800384a:	d9f6      	bls.n	800383a <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 800384c:	2003      	movs	r0, #3
 800384e:	e022      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003850:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 8003852:	6853      	ldr	r3, [r2, #4]
 8003854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003858:	68a1      	ldr	r1, [r4, #8]
 800385a:	430b      	orrs	r3, r1
 800385c:	6053      	str	r3, [r2, #4]
 800385e:	e7dc      	b.n	800381a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003860:	2000      	movs	r0, #0
 8003862:	e018      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
 8003864:	2000      	movs	r0, #0
 8003866:	e016      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003868:	2b01      	cmp	r3, #1
 800386a:	d017      	beq.n	800389c <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <HAL_RCC_OscConfig+0x424>)
 800386e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003870:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003874:	6a22      	ldr	r2, [r4, #32]
 8003876:	4291      	cmp	r1, r2
 8003878:	d112      	bne.n	80038a0 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800387a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8003880:	1a18      	subs	r0, r3, r0
 8003882:	bf18      	it	ne
 8003884:	2001      	movne	r0, #1
 8003886:	e006      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
 8003888:	2001      	movs	r0, #1
}
 800388a:	4770      	bx	lr
        return HAL_ERROR;
 800388c:	2001      	movs	r0, #1
 800388e:	e002      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003894:	2000      	movs	r0, #0
}
 8003896:	b002      	add	sp, #8
 8003898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
 800389e:	e7fa      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80038a0:	2001      	movs	r0, #1
 80038a2:	e7f8      	b.n	8003896 <HAL_RCC_OscConfig+0x416>
 80038a4:	40021000 	.word	0x40021000
 80038a8:	42420000 	.word	0x42420000

080038ac <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_RCC_GetSysClockFreq+0x40>)
 80038ae:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80038b0:	f003 020c 	and.w	r2, r3, #12
 80038b4:	2a08      	cmp	r2, #8
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80038b8:	480d      	ldr	r0, [pc, #52]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80038ba:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038bc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80038c0:	490c      	ldr	r1, [pc, #48]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x48>)
 80038c2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_RCC_GetSysClockFreq+0x40>)
 80038cc:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x44>)
 80038d0:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80038d8:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x4c>)
 80038da:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80038e0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_RCC_GetSysClockFreq+0x50>)
 80038e4:	fb03 f000 	mul.w	r0, r3, r0
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	007a1200 	.word	0x007a1200
 80038f4:	0800913c 	.word	0x0800913c
 80038f8:	0800914c 	.word	0x0800914c
 80038fc:	003d0900 	.word	0x003d0900

08003900 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003900:	2800      	cmp	r0, #0
 8003902:	f000 80a2 	beq.w	8003a4a <HAL_RCC_ClockConfig+0x14a>
{
 8003906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390a:	460d      	mov	r5, r1
 800390c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800390e:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <HAL_RCC_ClockConfig+0x15c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	428b      	cmp	r3, r1
 8003918:	d20b      	bcs.n	8003932 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4a50      	ldr	r2, [pc, #320]	; (8003a5c <HAL_RCC_ClockConfig+0x15c>)
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	f023 0307 	bic.w	r3, r3, #7
 8003922:	430b      	orrs	r3, r1
 8003924:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	428b      	cmp	r3, r1
 800392e:	f040 808e 	bne.w	8003a4e <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	f013 0f02 	tst.w	r3, #2
 8003938:	d017      	beq.n	800396a <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393a:	f013 0f04 	tst.w	r3, #4
 800393e:	d004      	beq.n	800394a <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4a47      	ldr	r2, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 8003942:	6853      	ldr	r3, [r2, #4]
 8003944:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003948:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	f013 0f08 	tst.w	r3, #8
 8003950:	d004      	beq.n	800395c <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 8003954:	6853      	ldr	r3, [r2, #4]
 8003956:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800395a:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4a40      	ldr	r2, [pc, #256]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 800395e:	6853      	ldr	r3, [r2, #4]
 8003960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003964:	68a1      	ldr	r1, [r4, #8]
 8003966:	430b      	orrs	r3, r1
 8003968:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	f013 0f01 	tst.w	r3, #1
 8003970:	d031      	beq.n	80039d6 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003972:	6862      	ldr	r2, [r4, #4]
 8003974:	2a01      	cmp	r2, #1
 8003976:	d020      	beq.n	80039ba <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003978:	2a02      	cmp	r2, #2
 800397a:	d025      	beq.n	80039c8 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397c:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f013 0f02 	tst.w	r3, #2
 8003984:	d065      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003986:	4936      	ldr	r1, [pc, #216]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 8003988:	684b      	ldr	r3, [r1, #4]
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	4313      	orrs	r3, r2
 8003990:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003992:	f7fe fd13 	bl	80023bc <HAL_GetTick>
 8003996:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003998:	4f31      	ldr	r7, [pc, #196]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	6862      	ldr	r2, [r4, #4]
 80039a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039aa:	d014      	beq.n	80039d6 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fe fd06 	bl	80023bc <HAL_GetTick>
 80039b0:	1b80      	subs	r0, r0, r6
 80039b2:	4540      	cmp	r0, r8
 80039b4:	d9f3      	bls.n	800399e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80039b6:	2003      	movs	r0, #3
 80039b8:	e045      	b.n	8003a46 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80039c2:	d1e0      	bne.n	8003986 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80039c4:	2001      	movs	r0, #1
 80039c6:	e03e      	b.n	8003a46 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039d0:	d1d9      	bne.n	8003986 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
 80039d4:	e037      	b.n	8003a46 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d6:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <HAL_RCC_ClockConfig+0x15c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	42ab      	cmp	r3, r5
 80039e0:	d90a      	bls.n	80039f8 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <HAL_RCC_ClockConfig+0x15c>)
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	432b      	orrs	r3, r5
 80039ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	42ab      	cmp	r3, r5
 80039f6:	d12e      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	f013 0f04 	tst.w	r3, #4
 80039fe:	d006      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a00:	4a17      	ldr	r2, [pc, #92]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 8003a02:	6853      	ldr	r3, [r2, #4]
 8003a04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a08:	68e1      	ldr	r1, [r4, #12]
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	f013 0f08 	tst.w	r3, #8
 8003a14:	d007      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a16:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 8003a18:	6853      	ldr	r3, [r2, #4]
 8003a1a:	6921      	ldr	r1, [r4, #16]
 8003a1c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003a20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a24:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a26:	f7ff ff41 	bl	80038ac <HAL_RCC_GetSysClockFreq>
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <HAL_RCC_ClockConfig+0x160>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a32:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <HAL_RCC_ClockConfig+0x164>)
 8003a34:	5cd3      	ldrb	r3, [r2, r3]
 8003a36:	40d8      	lsrs	r0, r3
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCC_ClockConfig+0x168>)
 8003a3a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_RCC_ClockConfig+0x16c>)
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	f7fe fbb6 	bl	80021b0 <HAL_InitTick>
  return HAL_OK;
 8003a44:	2000      	movs	r0, #0
}
 8003a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003a4a:	2001      	movs	r0, #1
}
 8003a4c:	4770      	bx	lr
    return HAL_ERROR;
 8003a4e:	2001      	movs	r0, #1
 8003a50:	e7f9      	b.n	8003a46 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003a52:	2001      	movs	r0, #1
 8003a54:	e7f7      	b.n	8003a46 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003a56:	2001      	movs	r0, #1
 8003a58:	e7f5      	b.n	8003a46 <HAL_RCC_ClockConfig+0x146>
 8003a5a:	bf00      	nop
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40021000 	.word	0x40021000
 8003a64:	08009124 	.word	0x08009124
 8003a68:	20000008 	.word	0x20000008
 8003a6c:	20000010 	.word	0x20000010

08003a70 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a78:	4a03      	ldr	r2, [pc, #12]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a7a:	5cd3      	ldrb	r3, [r2, r3]
 8003a7c:	4a03      	ldr	r2, [pc, #12]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a7e:	6810      	ldr	r0, [r2, #0]
}
 8003a80:	40d8      	lsrs	r0, r3
 8003a82:	4770      	bx	lr
 8003a84:	40021000 	.word	0x40021000
 8003a88:	08009134 	.word	0x08009134
 8003a8c:	20000008 	.word	0x20000008

08003a90 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a98:	4a03      	ldr	r2, [pc, #12]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	4a03      	ldr	r2, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a9e:	6810      	ldr	r0, [r2, #0]
}
 8003aa0:	40d8      	lsrs	r0, r3
 8003aa2:	4770      	bx	lr
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08009134 	.word	0x08009134
 8003aac:	20000008 	.word	0x20000008

08003ab0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_GetClockConfig+0x34>)
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	f002 0203 	and.w	r2, r2, #3
 8003abc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003ac4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003acc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ad6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <HAL_RCC_GetClockConfig+0x38>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	600b      	str	r3, [r1, #0]
}
 8003ae2:	4770      	bx	lr
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40022000 	.word	0x40022000

08003aec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003af4:	6803      	ldr	r3, [r0, #0]
 8003af6:	f013 0f01 	tst.w	r3, #1
 8003afa:	d036      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afc:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003b04:	d149      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b0e:	61da      	str	r2, [r3, #28]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b1a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b24:	d03b      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b26:	4b35      	ldr	r3, [pc, #212]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003b30:	6862      	ldr	r2, [r4, #4]
 8003b32:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d00e      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b3a:	4a30      	ldr	r2, [pc, #192]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b3c:	6a13      	ldr	r3, [r2, #32]
 8003b3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b42:	4930      	ldr	r1, [pc, #192]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003b44:	2601      	movs	r6, #1
 8003b46:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4a:	2600      	movs	r6, #0
 8003b4c:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b50:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b52:	f013 0f01 	tst.w	r3, #1
 8003b56:	d136      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b58:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b5a:	6a13      	ldr	r3, [r2, #32]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	d13e      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	f013 0f02 	tst.w	r3, #2
 8003b70:	d006      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b74:	6853      	ldr	r3, [r2, #4]
 8003b76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b7a:	68a1      	ldr	r1, [r4, #8]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	f013 0f10 	tst.w	r3, #16
 8003b86:	d034      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003b8a:	6853      	ldr	r3, [r2, #4]
 8003b8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b90:	68e1      	ldr	r1, [r4, #12]
 8003b92:	430b      	orrs	r3, r1
 8003b94:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b96:	2000      	movs	r0, #0
 8003b98:	e02c      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003b9a:	2500      	movs	r5, #0
 8003b9c:	e7be      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9e:	4a18      	ldr	r2, [pc, #96]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003ba0:	6813      	ldr	r3, [r2, #0]
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003ba8:	f7fe fc08 	bl	80023bc <HAL_GetTick>
 8003bac:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bae:	4f14      	ldr	r7, [pc, #80]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bb6:	d1b6      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb8:	f7fe fc00 	bl	80023bc <HAL_GetTick>
 8003bbc:	1b80      	subs	r0, r0, r6
 8003bbe:	2864      	cmp	r0, #100	; 0x64
 8003bc0:	d9f6      	bls.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003bc2:	2003      	movs	r0, #3
 8003bc4:	e016      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fbf9 	bl	80023bc <HAL_GetTick>
 8003bca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4f0b      	ldr	r7, [pc, #44]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	f013 0f02 	tst.w	r3, #2
 8003bd8:	d1be      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe fbef 	bl	80023bc <HAL_GetTick>
 8003bde:	1b80      	subs	r0, r0, r6
 8003be0:	4540      	cmp	r0, r8
 8003be2:	d9f6      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003be4:	2003      	movs	r0, #3
 8003be6:	e005      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be8:	69d3      	ldr	r3, [r2, #28]
 8003bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bee:	61d3      	str	r3, [r2, #28]
 8003bf0:	e7bb      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003bf2:	2000      	movs	r0, #0
}
 8003bf4:	b002      	add	sp, #8
 8003bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42420000 	.word	0x42420000

08003c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c08:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c0a:	2802      	cmp	r0, #2
 8003c0c:	d050      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8003c0e:	2810      	cmp	r0, #16
 8003c10:	d003      	beq.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8003c12:	2801      	cmp	r0, #1
 8003c14:	d028      	beq.n	8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003c16:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003c18:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003c1c:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003c24:	d0f8      	beq.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c26:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003c2a:	4929      	ldr	r1, [pc, #164]	; (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8003c2c:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c2e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003c32:	d015      	beq.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003c3c:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8003c3e:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8003c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c46:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003c52:	d1e1      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8003c54:	0040      	lsls	r0, r0, #1
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8003c58:	fba3 3000 	umull	r3, r0, r3, r0
 8003c5c:	0840      	lsrs	r0, r0, #1
 8003c5e:	e7db      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c60:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003c62:	fb03 f000 	mul.w	r0, r3, r0
 8003c66:	e7f0      	b.n	8003c4a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8003c68:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c6c:	f240 3202 	movw	r2, #770	; 0x302
 8003c70:	401a      	ands	r2, r3
 8003c72:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8003c76:	d026      	beq.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c80:	d004      	beq.n	8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c88:	2000      	movs	r0, #0
  return (frequency);
 8003c8a:	e7c5      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003c8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
        frequency = LSI_VALUE;
 8003c90:	f010 0002 	ands.w	r0, r0, #2
 8003c94:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c98:	bf18      	it	ne
 8003c9a:	4618      	movne	r0, r3
 8003c9c:	e7bc      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003ca0:	6818      	ldr	r0, [r3, #0]
        frequency = HSE_VALUE / 128U;
 8003ca2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003ca6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003caa:	bf18      	it	ne
 8003cac:	4618      	movne	r0, r3
 8003cae:	e7b3      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003cb0:	f7ff feee 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003cc4:	e7a8      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 8003cc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003cca:	e7a5      	b.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	08009150 	.word	0x08009150
 8003cd4:	08009160 	.word	0x08009160
 8003cd8:	007a1200 	.word	0x007a1200
 8003cdc:	aaaaaaab 	.word	0xaaaaaaab
 8003ce0:	003d0900 	.word	0x003d0900

08003ce4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	4681      	mov	r9, r0
 8003cec:	460f      	mov	r7, r1
 8003cee:	4616      	mov	r6, r2
 8003cf0:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cf2:	f7fe fb63 	bl	80023bc <HAL_GetTick>
 8003cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cf8:	442b      	add	r3, r5
 8003cfa:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003cfe:	f7fe fb5d 	bl	80023bc <HAL_GetTick>
 8003d02:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003d0c:	fb08 f303 	mul.w	r3, r8, r3
 8003d10:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d12:	f8d9 2000 	ldr.w	r2, [r9]
 8003d16:	6894      	ldr	r4, [r2, #8]
 8003d18:	ea37 0404 	bics.w	r4, r7, r4
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	42b3      	cmp	r3, r6
 8003d24:	d044      	beq.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003d2a:	d0f4      	beq.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d2c:	f7fe fb46 	bl	80023bc <HAL_GetTick>
 8003d30:	eba0 000a 	sub.w	r0, r0, sl
 8003d34:	4540      	cmp	r0, r8
 8003d36:	d207      	bcs.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d38:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf08      	it	eq
 8003d3e:	4698      	moveq	r8, r3
      }
      count--;
 8003d40:	9b01      	ldr	r3, [sp, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	e7e4      	b.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d48:	f8d9 2000 	ldr.w	r2, [r9]
 8003d4c:	6853      	ldr	r3, [r2, #4]
 8003d4e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003d52:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5c:	d00c      	beq.n	8003d78 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d5e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	d016      	beq.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8003d74:	2003      	movs	r0, #3
 8003d76:	e01c      	b.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d78:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d80:	d002      	beq.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d1ea      	bne.n	8003d5e <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8003d88:	f8d9 2000 	ldr.w	r2, [r9]
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e7e3      	b.n	8003d5e <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8003d96:	f8d9 2000 	ldr.w	r2, [r9]
 8003d9a:	6813      	ldr	r3, [r2, #0]
 8003d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	f8d9 2000 	ldr.w	r2, [r9]
 8003da6:	6813      	ldr	r3, [r2, #0]
 8003da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e7db      	b.n	8003d68 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8003db0:	2000      	movs	r0, #0
}
 8003db2:	b002      	add	sp, #8
 8003db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db8:	20000008 	.word	0x20000008

08003dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b510      	push	{r4, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc4:	9200      	str	r2, [sp, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	f7ff ff8b 	bl	8003ce4 <SPI_WaitFlagStateUntilTimeout>
 8003dce:	b908      	cbnz	r0, 8003dd4 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8003dd0:	b002      	add	sp, #8
 8003dd2:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003dd6:	f043 0320 	orr.w	r3, r3, #32
 8003dda:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8003ddc:	2003      	movs	r0, #3
 8003dde:	e7f7      	b.n	8003dd0 <SPI_EndRxTxTransaction+0x14>

08003de0 <SPI_EndRxTransaction>:
{
 8003de0:	b510      	push	{r4, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	4604      	mov	r4, r0
 8003de6:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de8:	6841      	ldr	r1, [r0, #4]
 8003dea:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003dee:	d008      	beq.n	8003e02 <SPI_EndRxTransaction+0x22>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003df0:	9200      	str	r2, [sp, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	4620      	mov	r0, r4
 8003df8:	f7ff ff74 	bl	8003ce4 <SPI_WaitFlagStateUntilTimeout>
 8003dfc:	bb18      	cbnz	r0, 8003e46 <SPI_EndRxTransaction+0x66>
}
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e02:	6881      	ldr	r1, [r0, #8]
 8003e04:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e08:	d002      	beq.n	8003e10 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e0a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003e0e:	d1ef      	bne.n	8003df0 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	6801      	ldr	r1, [r0, #0]
 8003e14:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003e18:	6001      	str	r1, [r0, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003e1a:	6861      	ldr	r1, [r4, #4]
 8003e1c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003e20:	d1e6      	bne.n	8003df0 <SPI_EndRxTransaction+0x10>
 8003e22:	68a1      	ldr	r1, [r4, #8]
 8003e24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003e28:	d1e2      	bne.n	8003df0 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2a:	9200      	str	r2, [sp, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7ff ff57 	bl	8003ce4 <SPI_WaitFlagStateUntilTimeout>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d0e1      	beq.n	8003dfe <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e3c:	f043 0320 	orr.w	r3, r3, #32
 8003e40:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e42:	2003      	movs	r0, #3
 8003e44:	e7db      	b.n	8003dfe <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e48:	f043 0320 	orr.w	r3, r3, #32
 8003e4c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e4e:	2003      	movs	r0, #3
 8003e50:	e7d5      	b.n	8003dfe <SPI_EndRxTransaction+0x1e>

08003e52 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d056      	beq.n	8003f04 <HAL_SPI_Init+0xb2>
{
 8003e56:	b510      	push	{r4, lr}
 8003e58:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003e5c:	b933      	cbnz	r3, 8003e6c <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e5e:	6843      	ldr	r3, [r0, #4]
 8003e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e64:	d005      	beq.n	8003e72 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61c3      	str	r3, [r0, #28]
 8003e6a:	e002      	b.n	8003e72 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e70:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e76:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d03c      	beq.n	8003ef8 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	6813      	ldr	r3, [r2, #0]
 8003e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	6863      	ldr	r3, [r4, #4]
 8003e92:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003e96:	68a1      	ldr	r1, [r4, #8]
 8003e98:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	68e1      	ldr	r1, [r4, #12]
 8003ea0:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6921      	ldr	r1, [r4, #16]
 8003ea8:	f001 0102 	and.w	r1, r1, #2
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6961      	ldr	r1, [r4, #20]
 8003eb0:	f001 0101 	and.w	r1, r1, #1
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	69a1      	ldr	r1, [r4, #24]
 8003eb8:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	69e1      	ldr	r1, [r4, #28]
 8003ec0:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6a21      	ldr	r1, [r4, #32]
 8003ec8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ed0:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	8b63      	ldrh	r3, [r4, #26]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ee2:	6822      	ldr	r2, [r4, #0]
 8003ee4:	69d3      	ldr	r3, [r2, #28]
 8003ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eea:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eec:	2000      	movs	r0, #0
 8003eee:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003ef6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003ef8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003efc:	4620      	mov	r0, r4
 8003efe:	f7fe f8ff 	bl	8002100 <HAL_SPI_MspInit>
 8003f02:	e7bc      	b.n	8003e7e <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8003f04:	2001      	movs	r0, #1
}
 8003f06:	4770      	bx	lr

08003f08 <HAL_SPI_Transmit>:
{
 8003f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003f10:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	f000 80d6 	beq.w	80040c6 <HAL_SPI_Transmit+0x1be>
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4688      	mov	r8, r1
 8003f1e:	4691      	mov	r9, r2
 8003f20:	2301      	movs	r3, #1
 8003f22:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003f26:	f7fe fa49 	bl	80023bc <HAL_GetTick>
 8003f2a:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003f2c:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8003f30:	b2f6      	uxtb	r6, r6
 8003f32:	2e01      	cmp	r6, #1
 8003f34:	f040 80bf 	bne.w	80040b6 <HAL_SPI_Transmit+0x1ae>
  if ((pData == NULL) || (Size == 0U))
 8003f38:	f1b8 0f00 	cmp.w	r8, #0
 8003f3c:	f000 80bc 	beq.w	80040b8 <HAL_SPI_Transmit+0x1b0>
 8003f40:	f1b9 0f00 	cmp.w	r9, #0
 8003f44:	f000 80b8 	beq.w	80040b8 <HAL_SPI_Transmit+0x1b0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f52:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f56:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f5a:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f5e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f60:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f62:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f64:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f66:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f68:	68a3      	ldr	r3, [r4, #8]
 8003f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6e:	d039      	beq.n	8003fe4 <HAL_SPI_Transmit+0xdc>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003f78:	d103      	bne.n	8003f82 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f80:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f82:	68e3      	ldr	r3, [r4, #12]
 8003f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f88:	d037      	beq.n	8003ffa <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	b113      	cbz	r3, 8003f94 <HAL_SPI_Transmit+0x8c>
 8003f8e:	f1b9 0f01 	cmp.w	r9, #1
 8003f92:	d10a      	bne.n	8003faa <HAL_SPI_Transmit+0xa2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003fa2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003faa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d166      	bne.n	8004080 <HAL_SPI_Transmit+0x178>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb2:	463a      	mov	r2, r7
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f7ff ff00 	bl	8003dbc <SPI_EndRxTxTransaction>
 8003fbc:	b108      	cbz	r0, 8003fc2 <HAL_SPI_Transmit+0xba>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	b933      	cbnz	r3, 8003fd4 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	9201      	str	r2, [sp, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d16e      	bne.n	80040b8 <HAL_SPI_Transmit+0x1b0>
    hspi->State = HAL_SPI_STATE_READY;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	e069      	b.n	80040b8 <HAL_SPI_Transmit+0x1b0>
    __HAL_SPI_DISABLE(hspi);
 8003fe4:	6822      	ldr	r2, [r4, #0]
 8003fe6:	6813      	ldr	r3, [r2, #0]
 8003fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fec:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003fee:	6822      	ldr	r2, [r4, #0]
 8003ff0:	6813      	ldr	r3, [r2, #0]
 8003ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e7ba      	b.n	8003f70 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffa:	6863      	ldr	r3, [r4, #4]
 8003ffc:	b113      	cbz	r3, 8004004 <HAL_SPI_Transmit+0xfc>
 8003ffe:	f1b9 0f01 	cmp.w	r9, #1
 8004002:	d10a      	bne.n	800401a <HAL_SPI_Transmit+0x112>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004008:	8812      	ldrh	r2, [r2, #0]
 800400a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800400c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800400e:	3302      	adds	r3, #2
 8004010:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004014:	3b01      	subs	r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800401a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800401c:	b29b      	uxth	r3, r3
 800401e:	b963      	cbnz	r3, 800403a <HAL_SPI_Transmit+0x132>
 8004020:	e7c7      	b.n	8003fb2 <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004022:	f7fe f9cb 	bl	80023bc <HAL_GetTick>
 8004026:	1bc0      	subs	r0, r0, r7
 8004028:	42a8      	cmp	r0, r5
 800402a:	d316      	bcc.n	800405a <HAL_SPI_Transmit+0x152>
 800402c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004030:	d115      	bne.n	800405e <HAL_SPI_Transmit+0x156>
    while (hspi->TxXferCount > 0U)
 8004032:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0bb      	beq.n	8003fb2 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	f012 0f02 	tst.w	r2, #2
 8004042:	d0ee      	beq.n	8004022 <HAL_SPI_Transmit+0x11a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004044:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004046:	8812      	ldrh	r2, [r2, #0]
 8004048:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800404a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800404c:	3302      	adds	r3, #2
 800404e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004050:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004052:	3b01      	subs	r3, #1
 8004054:	b29b      	uxth	r3, r3
 8004056:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004058:	e7eb      	b.n	8004032 <HAL_SPI_Transmit+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800405a:	2d00      	cmp	r5, #0
 800405c:	d1e9      	bne.n	8004032 <HAL_SPI_Transmit+0x12a>
          hspi->State = HAL_SPI_STATE_READY;
 800405e:	2301      	movs	r3, #1
 8004060:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004064:	2603      	movs	r6, #3
          goto error;
 8004066:	e027      	b.n	80040b8 <HAL_SPI_Transmit+0x1b0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004068:	f7fe f9a8 	bl	80023bc <HAL_GetTick>
 800406c:	1bc0      	subs	r0, r0, r7
 800406e:	42a8      	cmp	r0, r5
 8004070:	d31a      	bcc.n	80040a8 <HAL_SPI_Transmit+0x1a0>
 8004072:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004076:	d119      	bne.n	80040ac <HAL_SPI_Transmit+0x1a4>
    while (hspi->TxXferCount > 0U)
 8004078:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800407a:	b289      	uxth	r1, r1
 800407c:	2900      	cmp	r1, #0
 800407e:	d098      	beq.n	8003fb2 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	f012 0f02 	tst.w	r2, #2
 8004088:	d0ee      	beq.n	8004068 <HAL_SPI_Transmit+0x160>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800408a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800408c:	7812      	ldrb	r2, [r2, #0]
 800408e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004090:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004092:	3301      	adds	r3, #1
 8004094:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004096:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 800409a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800409e:	fa1f fc8c 	uxth.w	ip, ip
 80040a2:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 80040a6:	e7e7      	b.n	8004078 <HAL_SPI_Transmit+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	d1e5      	bne.n	8004078 <HAL_SPI_Transmit+0x170>
          hspi->State = HAL_SPI_STATE_READY;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80040b2:	2603      	movs	r6, #3
          goto error;
 80040b4:	e000      	b.n	80040b8 <HAL_SPI_Transmit+0x1b0>
    errorcode = HAL_BUSY;
 80040b6:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80040b8:	2300      	movs	r3, #0
 80040ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80040be:	4630      	mov	r0, r6
 80040c0:	b003      	add	sp, #12
 80040c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80040c6:	2602      	movs	r6, #2
 80040c8:	e7f9      	b.n	80040be <HAL_SPI_Transmit+0x1b6>

080040ca <HAL_SPI_TransmitReceive>:
{
 80040ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040ce:	b083      	sub	sp, #12
 80040d0:	461f      	mov	r7, r3
 80040d2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80040d4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f000 8115 	beq.w	8004308 <HAL_SPI_TransmitReceive+0x23e>
 80040de:	4604      	mov	r4, r0
 80040e0:	4688      	mov	r8, r1
 80040e2:	4691      	mov	r9, r2
 80040e4:	2301      	movs	r3, #1
 80040e6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80040ea:	f7fe f967 	bl	80023bc <HAL_GetTick>
 80040ee:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80040f0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80040f4:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80040f6:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040f8:	2801      	cmp	r0, #1
 80040fa:	d00a      	beq.n	8004112 <HAL_SPI_TransmitReceive+0x48>
 80040fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004100:	f040 80ef 	bne.w	80042e2 <HAL_SPI_TransmitReceive+0x218>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004104:	68a3      	ldr	r3, [r4, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 80f2 	bne.w	80042f0 <HAL_SPI_TransmitReceive+0x226>
 800410c:	2804      	cmp	r0, #4
 800410e:	f040 80f1 	bne.w	80042f4 <HAL_SPI_TransmitReceive+0x22a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004112:	f1b8 0f00 	cmp.w	r8, #0
 8004116:	f000 80ef 	beq.w	80042f8 <HAL_SPI_TransmitReceive+0x22e>
 800411a:	f1b9 0f00 	cmp.w	r9, #0
 800411e:	f000 80ed 	beq.w	80042fc <HAL_SPI_TransmitReceive+0x232>
 8004122:	2f00      	cmp	r7, #0
 8004124:	f000 80ec 	beq.w	8004300 <HAL_SPI_TransmitReceive+0x236>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004128:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004130:	bf1c      	itt	ne
 8004132:	2305      	movne	r3, #5
 8004134:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004138:	2300      	movs	r3, #0
 800413a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800413c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004140:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004142:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004144:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004148:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800414a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800414c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800414e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004158:	d103      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004160:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004162:	68e3      	ldr	r3, [r4, #12]
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004168:	d012      	beq.n	8004190 <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416a:	6863      	ldr	r3, [r4, #4]
 800416c:	b10b      	cbz	r3, 8004172 <HAL_SPI_TransmitReceive+0xa8>
 800416e:	2f01      	cmp	r7, #1
 8004170:	d10a      	bne.n	8004188 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800417a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800417c:	3301      	adds	r3, #1
 800417e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004180:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004182:	3b01      	subs	r3, #1
 8004184:	b29b      	uxth	r3, r3
 8004186:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004188:	2701      	movs	r7, #1
        txallowed = 0U;
 800418a:	f04f 0800 	mov.w	r8, #0
 800418e:	e06b      	b.n	8004268 <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004190:	6863      	ldr	r3, [r4, #4]
 8004192:	b10b      	cbz	r3, 8004198 <HAL_SPI_TransmitReceive+0xce>
 8004194:	2f01      	cmp	r7, #1
 8004196:	d10a      	bne.n	80041ae <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041a2:	3302      	adds	r3, #2
 80041a4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80041a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80041ae:	2701      	movs	r7, #1
        txallowed = 0U;
 80041b0:	f04f 0800 	mov.w	r8, #0
 80041b4:	e01a      	b.n	80041ec <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	6893      	ldr	r3, [r2, #8]
 80041ba:	f013 0301 	ands.w	r3, r3, #1
 80041be:	d00d      	beq.n	80041dc <HAL_SPI_TransmitReceive+0x112>
 80041c0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80041c2:	b289      	uxth	r1, r1
 80041c4:	b151      	cbz	r1, 80041dc <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041c6:	68d1      	ldr	r1, [r2, #12]
 80041c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041ca:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041ce:	3202      	adds	r2, #2
 80041d0:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80041d2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80041d4:	3a01      	subs	r2, #1
 80041d6:	b292      	uxth	r2, r2
 80041d8:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 80041da:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041dc:	f7fe f8ee 	bl	80023bc <HAL_GetTick>
 80041e0:	1b80      	subs	r0, r0, r6
 80041e2:	42a8      	cmp	r0, r5
 80041e4:	d302      	bcc.n	80041ec <HAL_SPI_TransmitReceive+0x122>
 80041e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80041ea:	d11d      	bne.n	8004228 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	b91b      	cbnz	r3, 80041fa <HAL_SPI_TransmitReceive+0x130>
 80041f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d05a      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x1e6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	f012 0f02 	tst.w	r2, #2
 8004202:	d0d8      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0xec>
 8004204:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004206:	b292      	uxth	r2, r2
 8004208:	2a00      	cmp	r2, #0
 800420a:	d0d4      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0xec>
 800420c:	2f00      	cmp	r7, #0
 800420e:	d0d2      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004210:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004212:	8812      	ldrh	r2, [r2, #0]
 8004214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004216:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004218:	3302      	adds	r3, #2
 800421a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800421c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800421e:	3b01      	subs	r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004224:	4647      	mov	r7, r8
 8004226:	e7c6      	b.n	80041b6 <HAL_SPI_TransmitReceive+0xec>
        hspi->State = HAL_SPI_STATE_READY;
 8004228:	2301      	movs	r3, #1
 800422a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 800422e:	2003      	movs	r0, #3
        goto error;
 8004230:	e058      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	6893      	ldr	r3, [r2, #8]
 8004236:	f013 0301 	ands.w	r3, r3, #1
 800423a:	d00d      	beq.n	8004258 <HAL_SPI_TransmitReceive+0x18e>
 800423c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800423e:	b289      	uxth	r1, r1
 8004240:	b151      	cbz	r1, 8004258 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004242:	68d1      	ldr	r1, [r2, #12]
 8004244:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004246:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 8004248:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800424a:	3201      	adds	r2, #1
 800424c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800424e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004250:	3a01      	subs	r2, #1
 8004252:	b292      	uxth	r2, r2
 8004254:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004256:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004258:	f7fe f8b0 	bl	80023bc <HAL_GetTick>
 800425c:	1b83      	subs	r3, r0, r6
 800425e:	42ab      	cmp	r3, r5
 8004260:	d31f      	bcc.n	80042a2 <HAL_SPI_TransmitReceive+0x1d8>
 8004262:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004266:	d11e      	bne.n	80042a6 <HAL_SPI_TransmitReceive+0x1dc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004268:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800426a:	b29b      	uxth	r3, r3
 800426c:	b913      	cbnz	r3, 8004274 <HAL_SPI_TransmitReceive+0x1aa>
 800426e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	b1eb      	cbz	r3, 80042b0 <HAL_SPI_TransmitReceive+0x1e6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	f012 0f02 	tst.w	r2, #2
 800427c:	d0d9      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x168>
 800427e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004280:	b292      	uxth	r2, r2
 8004282:	2a00      	cmp	r2, #0
 8004284:	d0d5      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x168>
 8004286:	2f01      	cmp	r7, #1
 8004288:	d1d3      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800428a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800428c:	7812      	ldrb	r2, [r2, #0]
 800428e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004290:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004292:	3301      	adds	r3, #1
 8004294:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004296:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004298:	3b01      	subs	r3, #1
 800429a:	b29b      	uxth	r3, r3
 800429c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800429e:	4647      	mov	r7, r8
 80042a0:	e7c7      	b.n	8004232 <HAL_SPI_TransmitReceive+0x168>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042a2:	2d00      	cmp	r5, #0
 80042a4:	d1e0      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x19e>
        hspi->State = HAL_SPI_STATE_READY;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 80042ac:	2003      	movs	r0, #3
        goto error;
 80042ae:	e019      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b0:	4632      	mov	r2, r6
 80042b2:	4629      	mov	r1, r5
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff fd81 	bl	8003dbc <SPI_EndRxTxTransaction>
 80042ba:	b970      	cbnz	r0, 80042da <HAL_SPI_TransmitReceive+0x210>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042bc:	68a3      	ldr	r3, [r4, #8]
 80042be:	b933      	cbnz	r3, 80042ce <HAL_SPI_TransmitReceive+0x204>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	9201      	str	r2, [sp, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042d0:	b9c3      	cbnz	r3, 8004304 <HAL_SPI_TransmitReceive+0x23a>
    hspi->State = HAL_SPI_STATE_READY;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80042d8:	e004      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042da:	2320      	movs	r3, #32
 80042dc:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80042de:	2001      	movs	r0, #1
    goto error;
 80042e0:	e000      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_BUSY;
 80042e2:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80042e4:	2300      	movs	r3, #0
 80042e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80042ea:	b003      	add	sp, #12
 80042ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80042f0:	2002      	movs	r0, #2
 80042f2:	e7f7      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
 80042f4:	2002      	movs	r0, #2
 80042f6:	e7f5      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 80042f8:	2001      	movs	r0, #1
 80042fa:	e7f3      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
 80042fc:	2001      	movs	r0, #1
 80042fe:	e7f1      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
 8004300:	2001      	movs	r0, #1
 8004302:	e7ef      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 8004304:	2001      	movs	r0, #1
 8004306:	e7ed      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x21a>
  __HAL_LOCK(hspi);
 8004308:	2002      	movs	r0, #2
 800430a:	e7ee      	b.n	80042ea <HAL_SPI_TransmitReceive+0x220>

0800430c <HAL_SPI_Receive>:
{
 800430c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004310:	b083      	sub	sp, #12
 8004312:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004314:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 8004318:	b2ed      	uxtb	r5, r5
 800431a:	2d01      	cmp	r5, #1
 800431c:	f040 80b7 	bne.w	800448e <HAL_SPI_Receive+0x182>
 8004320:	4688      	mov	r8, r1
 8004322:	4691      	mov	r9, r2
 8004324:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004326:	6843      	ldr	r3, [r0, #4]
 8004328:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432c:	d045      	beq.n	80043ba <HAL_SPI_Receive+0xae>
  __HAL_LOCK(hspi);
 800432e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004332:	2b01      	cmp	r3, #1
 8004334:	f000 80b3 	beq.w	800449e <HAL_SPI_Receive+0x192>
 8004338:	2301      	movs	r3, #1
 800433a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800433e:	f7fe f83d 	bl	80023bc <HAL_GetTick>
 8004342:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8004344:	f1b8 0f00 	cmp.w	r8, #0
 8004348:	f000 80a2 	beq.w	8004490 <HAL_SPI_Receive+0x184>
 800434c:	f1b9 0f00 	cmp.w	r9, #0
 8004350:	f000 809e 	beq.w	8004490 <HAL_SPI_Receive+0x184>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004354:	2304      	movs	r3, #4
 8004356:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800435a:	2300      	movs	r3, #0
 800435c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800435e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004362:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004366:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800436a:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800436c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800436e:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004370:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004372:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004374:	68a3      	ldr	r3, [r4, #8]
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437a:	d02b      	beq.n	80043d4 <HAL_SPI_Receive+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004384:	d103      	bne.n	800438e <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800438c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800438e:	68e3      	ldr	r3, [r4, #12]
 8004390:	b35b      	cbz	r3, 80043ea <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 8004392:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d15e      	bne.n	8004458 <HAL_SPI_Receive+0x14c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800439a:	463a      	mov	r2, r7
 800439c:	4631      	mov	r1, r6
 800439e:	4620      	mov	r0, r4
 80043a0:	f7ff fd1e 	bl	8003de0 <SPI_EndRxTransaction>
 80043a4:	b108      	cbz	r0, 80043aa <HAL_SPI_Receive+0x9e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043a6:	2320      	movs	r3, #32
 80043a8:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d16f      	bne.n	8004490 <HAL_SPI_Receive+0x184>
    hspi->State = HAL_SPI_STATE_READY;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043b6:	2500      	movs	r5, #0
 80043b8:	e06a      	b.n	8004490 <HAL_SPI_Receive+0x184>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043ba:	6883      	ldr	r3, [r0, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1b6      	bne.n	800432e <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043c0:	2304      	movs	r3, #4
 80043c2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043c6:	9600      	str	r6, [sp, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	460a      	mov	r2, r1
 80043cc:	f7ff fe7d 	bl	80040ca <HAL_SPI_TransmitReceive>
 80043d0:	4605      	mov	r5, r0
 80043d2:	e060      	b.n	8004496 <HAL_SPI_Receive+0x18a>
    __HAL_SPI_DISABLE(hspi);
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043dc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	6813      	ldr	r3, [r2, #0]
 80043e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e7c8      	b.n	800437c <HAL_SPI_Receive+0x70>
    while (hspi->RxXferCount > 0U)
 80043ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	b963      	cbnz	r3, 800440a <HAL_SPI_Receive+0xfe>
 80043f0:	e7d3      	b.n	800439a <HAL_SPI_Receive+0x8e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f2:	f7fd ffe3 	bl	80023bc <HAL_GetTick>
 80043f6:	1bc0      	subs	r0, r0, r7
 80043f8:	42b0      	cmp	r0, r6
 80043fa:	d31a      	bcc.n	8004432 <HAL_SPI_Receive+0x126>
 80043fc:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004400:	d119      	bne.n	8004436 <HAL_SPI_Receive+0x12a>
    while (hspi->RxXferCount > 0U)
 8004402:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0c7      	beq.n	800439a <HAL_SPI_Receive+0x8e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	f012 0f01 	tst.w	r2, #1
 8004412:	d0ee      	beq.n	80043f2 <HAL_SPI_Receive+0xe6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004414:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004416:	7b1b      	ldrb	r3, [r3, #12]
 8004418:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800441a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800441c:	3301      	adds	r3, #1
 800441e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004420:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8004424:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004428:	fa1f fc8c 	uxth.w	ip, ip
 800442c:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8004430:	e7e7      	b.n	8004402 <HAL_SPI_Receive+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004432:	2e00      	cmp	r6, #0
 8004434:	d1e5      	bne.n	8004402 <HAL_SPI_Receive+0xf6>
          hspi->State = HAL_SPI_STATE_READY;
 8004436:	2301      	movs	r3, #1
 8004438:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 800443c:	2503      	movs	r5, #3
          goto error;
 800443e:	e027      	b.n	8004490 <HAL_SPI_Receive+0x184>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004440:	f7fd ffbc 	bl	80023bc <HAL_GetTick>
 8004444:	1bc0      	subs	r0, r0, r7
 8004446:	42b0      	cmp	r0, r6
 8004448:	d31a      	bcc.n	8004480 <HAL_SPI_Receive+0x174>
 800444a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800444e:	d119      	bne.n	8004484 <HAL_SPI_Receive+0x178>
    while (hspi->RxXferCount > 0U)
 8004450:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0a0      	beq.n	800439a <HAL_SPI_Receive+0x8e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	f012 0f01 	tst.w	r2, #1
 8004460:	d0ee      	beq.n	8004440 <HAL_SPI_Receive+0x134>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004466:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800446a:	3302      	adds	r3, #2
 800446c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800446e:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8004472:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004476:	fa1f fc8c 	uxth.w	ip, ip
 800447a:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800447e:	e7e7      	b.n	8004450 <HAL_SPI_Receive+0x144>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004480:	2e00      	cmp	r6, #0
 8004482:	d1e5      	bne.n	8004450 <HAL_SPI_Receive+0x144>
          hspi->State = HAL_SPI_STATE_READY;
 8004484:	2301      	movs	r3, #1
 8004486:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 800448a:	2503      	movs	r5, #3
          goto error;
 800448c:	e000      	b.n	8004490 <HAL_SPI_Receive+0x184>
    errorcode = HAL_BUSY;
 800448e:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8004490:	2300      	movs	r3, #0
 8004492:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004496:	4628      	mov	r0, r5
 8004498:	b003      	add	sp, #12
 800449a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800449e:	2502      	movs	r5, #2
 80044a0:	e7f9      	b.n	8004496 <HAL_SPI_Receive+0x18a>
	...

080044a4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d127      	bne.n	80044fe <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ae:	2302      	movs	r3, #2
 80044b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044b4:	6802      	ldr	r2, [r0, #0]
 80044b6:	68d3      	ldr	r3, [r2, #12]
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044be:	6803      	ldr	r3, [r0, #0]
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_TIM_Base_Start_IT+0x64>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d010      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x44>
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d00d      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x44>
 80044cc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d009      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x44>
 80044d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044d8:	4293      	cmp	r3, r2
 80044da:	d005      	beq.n	80044e8 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e4:	2000      	movs	r0, #0
 80044e6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	2a06      	cmp	r2, #6
 80044f0:	d007      	beq.n	8004502 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80044fa:	2000      	movs	r0, #0
 80044fc:	4770      	bx	lr
    return HAL_ERROR;
 80044fe:	2001      	movs	r0, #1
 8004500:	4770      	bx	lr
  return HAL_OK;
 8004502:	2000      	movs	r0, #0
}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00

0800450c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800450c:	4770      	bx	lr

0800450e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800450e:	4770      	bx	lr

08004510 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004510:	4770      	bx	lr

08004512 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_IRQHandler>:
{
 8004514:	b510      	push	{r4, lr}
 8004516:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004518:	6803      	ldr	r3, [r0, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	f012 0f02 	tst.w	r2, #2
 8004520:	d011      	beq.n	8004546 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	f012 0f02 	tst.w	r2, #2
 8004528:	d00d      	beq.n	8004546 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800452a:	f06f 0202 	mvn.w	r2, #2
 800452e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004530:	2301      	movs	r3, #1
 8004532:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004534:	6803      	ldr	r3, [r0, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f013 0f03 	tst.w	r3, #3
 800453c:	d070      	beq.n	8004620 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800453e:	f7ff ffe6 	bl	800450e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	2300      	movs	r3, #0
 8004544:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	f012 0f04 	tst.w	r2, #4
 800454e:	d012      	beq.n	8004576 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	f012 0f04 	tst.w	r2, #4
 8004556:	d00e      	beq.n	8004576 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004558:	f06f 0204 	mvn.w	r2, #4
 800455c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455e:	2302      	movs	r3, #2
 8004560:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f413 7f40 	tst.w	r3, #768	; 0x300
 800456a:	d05f      	beq.n	800462c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800456c:	4620      	mov	r0, r4
 800456e:	f7ff ffce 	bl	800450e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	2300      	movs	r3, #0
 8004574:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	f012 0f08 	tst.w	r2, #8
 800457e:	d012      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	f012 0f08 	tst.w	r2, #8
 8004586:	d00e      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	2304      	movs	r3, #4
 8004590:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f013 0f03 	tst.w	r3, #3
 800459a:	d04e      	beq.n	800463a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800459c:	4620      	mov	r0, r4
 800459e:	f7ff ffb6 	bl	800450e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	2300      	movs	r3, #0
 80045a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	f012 0f10 	tst.w	r2, #16
 80045ae:	d012      	beq.n	80045d6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	f012 0f10 	tst.w	r2, #16
 80045b6:	d00e      	beq.n	80045d6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045b8:	f06f 0210 	mvn.w	r2, #16
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045be:	2308      	movs	r3, #8
 80045c0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80045ca:	d03d      	beq.n	8004648 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7ff ff9e 	bl	800450e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	2300      	movs	r3, #0
 80045d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	f012 0f01 	tst.w	r2, #1
 80045de:	d003      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	f012 0f01 	tst.w	r2, #1
 80045e6:	d136      	bne.n	8004656 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045f8:	d134      	bne.n	8004664 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004602:	d003      	beq.n	800460c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	f012 0f40 	tst.w	r2, #64	; 0x40
 800460a:	d132      	bne.n	8004672 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	f012 0f20 	tst.w	r2, #32
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	f012 0f20 	tst.w	r2, #32
 800461c:	d130      	bne.n	8004680 <HAL_TIM_IRQHandler+0x16c>
}
 800461e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004620:	f7ff ff74 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	4620      	mov	r0, r4
 8004626:	f7ff ff73 	bl	8004510 <HAL_TIM_PWM_PulseFinishedCallback>
 800462a:	e78a      	b.n	8004542 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff ff6d 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff ff6c 	bl	8004510 <HAL_TIM_PWM_PulseFinishedCallback>
 8004638:	e79b      	b.n	8004572 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff ff66 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	4620      	mov	r0, r4
 8004642:	f7ff ff65 	bl	8004510 <HAL_TIM_PWM_PulseFinishedCallback>
 8004646:	e7ac      	b.n	80045a2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff ff5f 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464e:	4620      	mov	r0, r4
 8004650:	f7ff ff5e 	bl	8004510 <HAL_TIM_PWM_PulseFinishedCallback>
 8004654:	e7bd      	b.n	80045d2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004656:	f06f 0201 	mvn.w	r2, #1
 800465a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800465c:	4620      	mov	r0, r4
 800465e:	f7fc fad7 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
 8004662:	e7c1      	b.n	80045e8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004668:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800466a:	4620      	mov	r0, r4
 800466c:	f000 f981 	bl	8004972 <HAL_TIMEx_BreakCallback>
 8004670:	e7c3      	b.n	80045fa <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004672:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004676:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff ff4a 	bl	8004512 <HAL_TIM_TriggerCallback>
 800467e:	e7c5      	b.n	800460c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004680:	f06f 0220 	mvn.w	r2, #32
 8004684:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004686:	4620      	mov	r0, r4
 8004688:	f000 f972 	bl	8004970 <HAL_TIMEx_CommutCallback>
}
 800468c:	e7c7      	b.n	800461e <HAL_TIM_IRQHandler+0x10a>
	...

08004690 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004690:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004692:	4a25      	ldr	r2, [pc, #148]	; (8004728 <TIM_Base_SetConfig+0x98>)
 8004694:	4290      	cmp	r0, r2
 8004696:	d014      	beq.n	80046c2 <TIM_Base_SetConfig+0x32>
 8004698:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800469c:	d026      	beq.n	80046ec <TIM_Base_SetConfig+0x5c>
 800469e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80046a2:	4290      	cmp	r0, r2
 80046a4:	d036      	beq.n	8004714 <TIM_Base_SetConfig+0x84>
 80046a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046aa:	4290      	cmp	r0, r2
 80046ac:	d037      	beq.n	800471e <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b2:	694a      	ldr	r2, [r1, #20]
 80046b4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80046b6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b8:	688b      	ldr	r3, [r1, #8]
 80046ba:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046bc:	680b      	ldr	r3, [r1, #0]
 80046be:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c0:	e025      	b.n	800470e <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80046c6:	684a      	ldr	r2, [r1, #4]
 80046c8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ce:	68ca      	ldr	r2, [r1, #12]
 80046d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d6:	694a      	ldr	r2, [r1, #20]
 80046d8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80046da:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	688b      	ldr	r3, [r1, #8]
 80046de:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80046e0:	680b      	ldr	r3, [r1, #0]
 80046e2:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	690a      	ldr	r2, [r1, #16]
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <TIM_Base_SetConfig+0x98>)
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ea:	e010      	b.n	800470e <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80046f0:	684a      	ldr	r2, [r1, #4]
 80046f2:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80046f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f8:	68ca      	ldr	r2, [r1, #12]
 80046fa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004700:	694a      	ldr	r2, [r1, #20]
 8004702:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004704:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004706:	688b      	ldr	r3, [r1, #8]
 8004708:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800470a:	680b      	ldr	r3, [r1, #0]
 800470c:	6283      	str	r3, [r0, #40]	; 0x28
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800470e:	2301      	movs	r3, #1
 8004710:	6143      	str	r3, [r0, #20]
}
 8004712:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004718:	684a      	ldr	r2, [r1, #4]
 800471a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471c:	e7ea      	b.n	80046f4 <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004722:	684a      	ldr	r2, [r1, #4]
 8004724:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004726:	e7e5      	b.n	80046f4 <TIM_Base_SetConfig+0x64>
 8004728:	40012c00 	.word	0x40012c00

0800472c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800472c:	b340      	cbz	r0, 8004780 <HAL_TIM_Base_Init+0x54>
{
 800472e:	b510      	push	{r4, lr}
 8004730:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004732:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004736:	b1f3      	cbz	r3, 8004776 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	2302      	movs	r3, #2
 800473a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473e:	4621      	mov	r1, r4
 8004740:	f851 0b04 	ldr.w	r0, [r1], #4
 8004744:	f7ff ffa4 	bl	8004690 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004748:	2301      	movs	r3, #1
 800474a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004752:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004756:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800475a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004766:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800476a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800476e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004772:	2000      	movs	r0, #0
}
 8004774:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004776:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800477a:	f7fd fcfb 	bl	8002174 <HAL_TIM_Base_MspInit>
 800477e:	e7db      	b.n	8004738 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004780:	2001      	movs	r0, #1
}
 8004782:	4770      	bx	lr

08004784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004784:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004786:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004788:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800478c:	430a      	orrs	r2, r1
 800478e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004792:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004796:	6082      	str	r2, [r0, #8]
}
 8004798:	bc10      	pop	{r4}
 800479a:	4770      	bx	lr

0800479c <HAL_TIM_ConfigClockSource>:
{
 800479c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800479e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	f000 80ad 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x166>
 80047a8:	4604      	mov	r4, r0
 80047aa:	2301      	movs	r3, #1
 80047ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	2302      	movs	r3, #2
 80047b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80047b6:	6802      	ldr	r2, [r0, #0]
 80047b8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80047c2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80047c4:	680b      	ldr	r3, [r1, #0]
 80047c6:	2b60      	cmp	r3, #96	; 0x60
 80047c8:	d060      	beq.n	800488c <HAL_TIM_ConfigClockSource+0xf0>
 80047ca:	d83d      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0xac>
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d079      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x128>
 80047d0:	d91c      	bls.n	800480c <HAL_TIM_ConfigClockSource+0x70>
 80047d2:	2b50      	cmp	r3, #80	; 0x50
 80047d4:	d136      	bne.n	8004844 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d8:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80047da:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80047dc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	6a1a      	ldr	r2, [r3, #32]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e6:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047ec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047f0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80047f4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047fa:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80047fc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004802:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004806:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2000      	movs	r0, #0
}
 800480a:	e012      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 800480c:	2b20      	cmp	r3, #32
 800480e:	d002      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x7a>
 8004810:	d90b      	bls.n	800482a <HAL_TIM_ConfigClockSource+0x8e>
 8004812:	2b30      	cmp	r3, #48	; 0x30
 8004814:	d114      	bne.n	8004840 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004816:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004818:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800481a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481e:	4313      	orrs	r3, r2
 8004820:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004824:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2000      	movs	r0, #0
}
 8004828:	e003      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 800482a:	f033 0210 	bics.w	r2, r3, #16
 800482e:	d0f2      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x7a>
 8004830:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004832:	2301      	movs	r3, #1
 8004834:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004838:	2300      	movs	r3, #0
 800483a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800483e:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004840:	2001      	movs	r0, #1
 8004842:	e7f6      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
 8004844:	2001      	movs	r0, #1
 8004846:	e7f4      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
 8004848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484c:	d055      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x15e>
 800484e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004852:	d10c      	bne.n	800486e <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8004854:	68cb      	ldr	r3, [r1, #12]
 8004856:	684a      	ldr	r2, [r1, #4]
 8004858:	6889      	ldr	r1, [r1, #8]
 800485a:	6800      	ldr	r0, [r0, #0]
 800485c:	f7ff ff92 	bl	8004784 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	6893      	ldr	r3, [r2, #8]
 8004864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004868:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2000      	movs	r0, #0
      break;
 800486c:	e7e1      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 800486e:	2b70      	cmp	r3, #112	; 0x70
 8004870:	d145      	bne.n	80048fe <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8004872:	68cb      	ldr	r3, [r1, #12]
 8004874:	684a      	ldr	r2, [r1, #4]
 8004876:	6889      	ldr	r1, [r1, #8]
 8004878:	6800      	ldr	r0, [r0, #0]
 800487a:	f7ff ff83 	bl	8004784 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004882:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004886:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2000      	movs	r0, #0
      break;
 800488a:	e7d2      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800488c:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800488e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004890:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004892:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004894:	6a19      	ldr	r1, [r3, #32]
 8004896:	f021 0110 	bic.w	r1, r1, #16
 800489a:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489c:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a2:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80048aa:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80048ae:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b0:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80048b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ba:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80048be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2000      	movs	r0, #0
}
 80048c2:	e7b6      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c4:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 80048c6:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80048c8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80048ca:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048da:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048de:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80048e2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80048e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048e8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80048ea:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80048f4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2000      	movs	r0, #0
}
 80048f8:	e79b      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2000      	movs	r0, #0
 80048fc:	e799      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80048fe:	2001      	movs	r0, #1
 8004900:	e797      	b.n	8004832 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8004902:	2002      	movs	r0, #2
 8004904:	e79b      	b.n	800483e <HAL_TIM_ConfigClockSource+0xa2>
	...

08004908 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004908:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800490c:	2a01      	cmp	r2, #1
 800490e:	d02b      	beq.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8004910:	b430      	push	{r4, r5}
 8004912:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004914:	2201      	movs	r2, #1
 8004916:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491a:	2202      	movs	r2, #2
 800491c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004920:	6804      	ldr	r4, [r0, #0]
 8004922:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004926:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800492a:	680d      	ldr	r5, [r1, #0]
 800492c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800492e:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4c0e      	ldr	r4, [pc, #56]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004934:	42a2      	cmp	r2, r4
 8004936:	d00a      	beq.n	800494e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004938:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800493c:	d007      	beq.n	800494e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800493e:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004942:	42a2      	cmp	r2, r4
 8004944:	d003      	beq.n	800494e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004946:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800494a:	42a2      	cmp	r2, r4
 800494c:	d104      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800494e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004952:	6849      	ldr	r1, [r1, #4]
 8004954:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004956:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800495e:	2000      	movs	r0, #0
 8004960:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8004964:	bc30      	pop	{r4, r5}
 8004966:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004968:	2002      	movs	r0, #2
}
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00

08004970 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004970:	4770      	bx	lr

08004972 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004972:	4770      	bx	lr

08004974 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004974:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004978:	b9a3      	cbnz	r3, 80049a4 <osKernelInitialize+0x30>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497a:	f3ef 8310 	mrs	r3, PRIMASK
 800497e:	b9a3      	cbnz	r3, 80049aa <osKernelInitialize+0x36>
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <osKernelInitialize+0x44>)
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	2802      	cmp	r0, #2
 8004986:	d004      	beq.n	8004992 <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004988:	b990      	cbnz	r0, 80049b0 <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <osKernelInitialize+0x44>)
 800498c:	2201      	movs	r2, #1
 800498e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004990:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004992:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 8004996:	2b00      	cmp	r3, #0
 8004998:	bf14      	ite	ne
 800499a:	f06f 0005 	mvnne.w	r0, #5
 800499e:	f04f 30ff 	moveq.w	r0, #4294967295
 80049a2:	4770      	bx	lr
    stat = osErrorISR;
 80049a4:	f06f 0005 	mvn.w	r0, #5
 80049a8:	4770      	bx	lr
 80049aa:	f06f 0005 	mvn.w	r0, #5
 80049ae:	4770      	bx	lr
      stat = osError;
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000980 	.word	0x20000980

080049bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049bc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049be:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80049c2:	b9c3      	cbnz	r3, 80049f6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c4:	f3ef 8310 	mrs	r3, PRIMASK
 80049c8:	b9c3      	cbnz	r3, 80049fc <osKernelStart+0x40>
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <osKernelStart+0x4c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d008      	beq.n	80049e4 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d115      	bne.n	8004a02 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <osKernelStart+0x4c>)
 80049d8:	2202      	movs	r2, #2
 80049da:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80049dc:	f001 fc1e 	bl	800621c <vTaskStartScheduler>
      stat = osOK;
 80049e0:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80049e2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e4:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	f06f 0005 	mvnne.w	r0, #5
 80049f0:	f04f 30ff 	moveq.w	r0, #4294967295
 80049f4:	e7f5      	b.n	80049e2 <osKernelStart+0x26>
    stat = osErrorISR;
 80049f6:	f06f 0005 	mvn.w	r0, #5
 80049fa:	e7f2      	b.n	80049e2 <osKernelStart+0x26>
 80049fc:	f06f 0005 	mvn.w	r0, #5
 8004a00:	e7ef      	b.n	80049e2 <osKernelStart+0x26>
      stat = osError;
 8004a02:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8004a06:	e7ec      	b.n	80049e2 <osKernelStart+0x26>
 8004a08:	20000980 	.word	0x20000980

08004a0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0e:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a10:	2400      	movs	r4, #0
 8004a12:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a14:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004a18:	b9d4      	cbnz	r4, 8004a50 <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1e:	b9bb      	cbnz	r3, 8004a50 <osThreadNew+0x44>
 8004a20:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <osThreadNew+0xc8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d00f      	beq.n	8004a48 <osThreadNew+0x3c>
 8004a28:	b190      	cbz	r0, 8004a50 <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8004a30:	2a00      	cmp	r2, #0
 8004a32:	d03a      	beq.n	8004aaa <osThreadNew+0x9e>
      if (attr->name != NULL) {
 8004a34:	6814      	ldr	r4, [r2, #0]
 8004a36:	b174      	cbz	r4, 8004a56 <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004a38:	6993      	ldr	r3, [r2, #24]
 8004a3a:	b17b      	cbz	r3, 8004a5c <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 8004a3c:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	2b37      	cmp	r3, #55	; 0x37
 8004a42:	d90c      	bls.n	8004a5e <osThreadNew+0x52>
        return (NULL);
 8004a44:	2000      	movs	r0, #0
 8004a46:	e004      	b.n	8004a52 <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a48:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0eb      	beq.n	8004a28 <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a50:	9804      	ldr	r0, [sp, #16]
}
 8004a52:	b007      	add	sp, #28
 8004a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 8004a56:	f10d 0417 	add.w	r4, sp, #23
 8004a5a:	e7ed      	b.n	8004a38 <osThreadNew+0x2c>
 8004a5c:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a5e:	6853      	ldr	r3, [r2, #4]
 8004a60:	f013 0f01 	tst.w	r3, #1
 8004a64:	d134      	bne.n	8004ad0 <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 8004a66:	6953      	ldr	r3, [r2, #20]
 8004a68:	b113      	cbz	r3, 8004a70 <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 8004a6a:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004a6e:	e001      	b.n	8004a74 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8004a70:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a74:	6896      	ldr	r6, [r2, #8]
 8004a76:	b18e      	cbz	r6, 8004a9c <osThreadNew+0x90>
 8004a78:	68d7      	ldr	r7, [r2, #12]
 8004a7a:	2f5b      	cmp	r7, #91	; 0x5b
 8004a7c:	d9e8      	bls.n	8004a50 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a7e:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a80:	2a00      	cmp	r2, #0
 8004a82:	d0e5      	beq.n	8004a50 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0e3      	beq.n	8004a50 <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a88:	9602      	str	r6, [sp, #8]
 8004a8a:	9201      	str	r2, [sp, #4]
 8004a8c:	9500      	str	r5, [sp, #0]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4662      	mov	r2, ip
 8004a92:	4621      	mov	r1, r4
 8004a94:	f001 fb56 	bl	8006144 <xTaskCreateStatic>
 8004a98:	9004      	str	r0, [sp, #16]
 8004a9a:	e7d9      	b.n	8004a50 <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a9c:	68d3      	ldr	r3, [r2, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d6      	bne.n	8004a50 <osThreadNew+0x44>
      if (mem == 0) {
 8004aa2:	6913      	ldr	r3, [r2, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1d3      	bne.n	8004a50 <osThreadNew+0x44>
 8004aa8:	e004      	b.n	8004ab4 <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 8004aaa:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8004aac:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8004ab0:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ab4:	ab04      	add	r3, sp, #16
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	9500      	str	r5, [sp, #0]
 8004aba:	460b      	mov	r3, r1
 8004abc:	fa1f f28c 	uxth.w	r2, ip
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	f001 fb79 	bl	80061b8 <xTaskCreate>
 8004ac6:	2801      	cmp	r0, #1
          hTask = NULL;
 8004ac8:	bf1c      	itt	ne
 8004aca:	2300      	movne	r3, #0
 8004acc:	9304      	strne	r3, [sp, #16]
 8004ace:	e7bf      	b.n	8004a50 <osThreadNew+0x44>
        return (NULL);
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	e7be      	b.n	8004a52 <osThreadNew+0x46>
 8004ad4:	20000980 	.word	0x20000980

08004ad8 <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad8:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8004adc:	b9f2      	cbnz	r2, 8004b1c <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004ade:	b508      	push	{r3, lr}
 8004ae0:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae2:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8004ae6:	b9da      	cbnz	r2, 8004b20 <osEventFlagsNew+0x48>
 8004ae8:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <osEventFlagsNew+0x4c>)
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	2a02      	cmp	r2, #2
 8004aee:	d007      	beq.n	8004b00 <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 8004af0:	b173      	cbz	r3, 8004b10 <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004af2:	6898      	ldr	r0, [r3, #8]
 8004af4:	b150      	cbz	r0, 8004b0c <osEventFlagsNew+0x34>
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b1f      	cmp	r3, #31
 8004afa:	d80c      	bhi.n	8004b16 <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 8004afc:	2000      	movs	r0, #0
 8004afe:	e009      	b.n	8004b14 <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b00:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d0f3      	beq.n	8004af0 <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 8004b08:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004b0a:	e003      	b.n	8004b14 <osEventFlagsNew+0x3c>
      if (mem == 0) {
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	b90b      	cbnz	r3, 8004b14 <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 8004b10:	f000 fb0b 	bl	800512a <xEventGroupCreate>
}
 8004b14:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004b16:	f000 fae3 	bl	80050e0 <xEventGroupCreateStatic>
 8004b1a:	e7fb      	b.n	8004b14 <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 8004b1c:	2000      	movs	r0, #0
}
 8004b1e:	4770      	bx	lr
  hEventGroup = NULL;
 8004b20:	2000      	movs	r0, #0
 8004b22:	e7f7      	b.n	8004b14 <osEventFlagsNew+0x3c>
 8004b24:	20000980 	.word	0x20000980

08004b28 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004b28:	b370      	cbz	r0, 8004b88 <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	460c      	mov	r4, r1
 8004b30:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004b32:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8004b36:	d12a      	bne.n	8004b8e <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b38:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8004b3c:	b94a      	cbnz	r2, 8004b52 <osEventFlagsSet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3e:	f3ef 8210 	mrs	r2, PRIMASK
 8004b42:	b932      	cbnz	r2, 8004b52 <osEventFlagsSet+0x2a>
 8004b44:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <osEventFlagsSet+0x78>)
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	2a02      	cmp	r2, #2
 8004b4a:	d118      	bne.n	8004b7e <osEventFlagsSet+0x56>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b4c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b50:	b1aa      	cbz	r2, 8004b7e <osEventFlagsSet+0x56>
    yield = pdFALSE;
 8004b52:	2200      	movs	r2, #0
 8004b54:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004b56:	aa01      	add	r2, sp, #4
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fbca 	bl	80052f4 <xEventGroupSetBitsFromISR>
 8004b60:	b9c8      	cbnz	r0, 8004b96 <osEventFlagsSet+0x6e>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 8004b62:	9b01      	ldr	r3, [sp, #4]
 8004b64:	b1d3      	cbz	r3, 8004b9c <osEventFlagsSet+0x74>
 8004b66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	f3bf 8f6f 	isb	sy
      rflags = flags;
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	e009      	b.n	8004b92 <osEventFlagsSet+0x6a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fb6a 	bl	800525a <xEventGroupSetBits>
 8004b86:	e004      	b.n	8004b92 <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8004b88:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 8004b8c:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 8004b8e:	f06f 0003 	mvn.w	r0, #3
}
 8004b92:	b002      	add	sp, #8
 8004b94:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8004b96:	f06f 0002 	mvn.w	r0, #2
 8004b9a:	e7fa      	b.n	8004b92 <osEventFlagsSet+0x6a>
      rflags = flags;
 8004b9c:	4620      	mov	r0, r4
  return (rflags);
 8004b9e:	e7f8      	b.n	8004b92 <osEventFlagsSet+0x6a>
 8004ba0:	20000980 	.word	0x20000980

08004ba4 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d037      	beq.n	8004c18 <osEventFlagsWait+0x74>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	460c      	mov	r4, r1
 8004bae:	461d      	mov	r5, r3
 8004bb0:	4684      	mov	ip, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004bb2:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8004bb6:	d132      	bne.n	8004c1e <osEventFlagsWait+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bb8:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8004bbc:	bb9b      	cbnz	r3, 8004c26 <osEventFlagsWait+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc2:	bb9b      	cbnz	r3, 8004c2c <osEventFlagsWait+0x88>
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <osEventFlagsWait+0x90>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d015      	beq.n	8004bf8 <osEventFlagsWait+0x54>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 8004bcc:	f002 0601 	and.w	r6, r2, #1
      wait_all = pdTRUE;
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 8004bd0:	f082 0202 	eor.w	r2, r2, #2
      exit_clr = pdFAIL;
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004bd4:	9500      	str	r5, [sp, #0]
 8004bd6:	4633      	mov	r3, r6
 8004bd8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4660      	mov	r0, ip
 8004be0:	f000 fab1 	bl	8005146 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 8004be4:	b17e      	cbz	r6, 8004c06 <osEventFlagsWait+0x62>
      if (flags != rflags) {
 8004be6:	4284      	cmp	r4, r0
 8004be8:	d01b      	beq.n	8004c22 <osEventFlagsWait+0x7e>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	bf14      	ite	ne
 8004bee:	f06f 0001 	mvnne.w	r0, #1
 8004bf2:	f06f 0002 	mvneq.w	r0, #2
 8004bf6:	e014      	b.n	8004c22 <osEventFlagsWait+0x7e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bf8:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0e5      	beq.n	8004bcc <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorISR;
 8004c00:	f06f 0005 	mvn.w	r0, #5
 8004c04:	e00d      	b.n	8004c22 <osEventFlagsWait+0x7e>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004c06:	4204      	tst	r4, r0
 8004c08:	d10b      	bne.n	8004c22 <osEventFlagsWait+0x7e>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 8004c0a:	2d00      	cmp	r5, #0
 8004c0c:	bf14      	ite	ne
 8004c0e:	f06f 0001 	mvnne.w	r0, #1
 8004c12:	f06f 0002 	mvneq.w	r0, #2
 8004c16:	e004      	b.n	8004c22 <osEventFlagsWait+0x7e>
    rflags = (uint32_t)osErrorParameter;
 8004c18:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 8004c1c:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 8004c1e:	f06f 0003 	mvn.w	r0, #3
}
 8004c22:	b002      	add	sp, #8
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8004c26:	f06f 0005 	mvn.w	r0, #5
 8004c2a:	e7fa      	b.n	8004c22 <osEventFlagsWait+0x7e>
 8004c2c:	f06f 0005 	mvn.w	r0, #5
 8004c30:	e7f7      	b.n	8004c22 <osEventFlagsWait+0x7e>
 8004c32:	bf00      	nop
 8004c34:	20000980 	.word	0x20000980

08004c38 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004c38:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c3a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d145      	bne.n	8004cce <osMutexNew+0x96>
 8004c42:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c44:	f3ef 8310 	mrs	r3, PRIMASK
 8004c48:	461e      	mov	r6, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d142      	bne.n	8004cd4 <osMutexNew+0x9c>
 8004c4e:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <osMutexNew+0xa4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d00f      	beq.n	8004c76 <osMutexNew+0x3e>
    if (attr != NULL) {
 8004c56:	2c00      	cmp	r4, #0
 8004c58:	d034      	beq.n	8004cc4 <osMutexNew+0x8c>
      type = attr->attr_bits;
 8004c5a:	6863      	ldr	r3, [r4, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004c5c:	f013 0f08 	tst.w	r3, #8
 8004c60:	d13a      	bne.n	8004cd8 <osMutexNew+0xa0>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004c62:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 8004c66:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c68:	68a1      	ldr	r1, [r4, #8]
 8004c6a:	b151      	cbz	r1, 8004c82 <osMutexNew+0x4a>
 8004c6c:	68e2      	ldr	r2, [r4, #12]
 8004c6e:	2a4f      	cmp	r2, #79	; 0x4f
 8004c70:	d813      	bhi.n	8004c9a <osMutexNew+0x62>
  hMutex = NULL;
 8004c72:	2500      	movs	r5, #0
 8004c74:	e02c      	b.n	8004cd0 <osMutexNew+0x98>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c76:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0eb      	beq.n	8004c56 <osMutexNew+0x1e>
  hMutex = NULL;
 8004c7e:	2500      	movs	r5, #0
 8004c80:	e026      	b.n	8004cd0 <osMutexNew+0x98>
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 8004c82:	68e2      	ldr	r2, [r4, #12]
 8004c84:	2a00      	cmp	r2, #0
 8004c86:	d1f4      	bne.n	8004c72 <osMutexNew+0x3a>
          if (rmtx != 0U) {
 8004c88:	b1e3      	cbz	r3, 8004cc4 <osMutexNew+0x8c>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004c8a:	2004      	movs	r0, #4
 8004c8c:	f000 fde8 	bl	8005860 <xQueueCreateMutex>
 8004c90:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004c92:	2d00      	cmp	r5, #0
 8004c94:	d0ed      	beq.n	8004c72 <osMutexNew+0x3a>
        if (attr != NULL) {
 8004c96:	b93c      	cbnz	r4, 8004ca8 <osMutexNew+0x70>
 8004c98:	e007      	b.n	8004caa <osMutexNew+0x72>
        if (rmtx != 0U) {
 8004c9a:	b173      	cbz	r3, 8004cba <osMutexNew+0x82>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004c9c:	2004      	movs	r0, #4
 8004c9e:	f000 fdea 	bl	8005876 <xQueueCreateMutexStatic>
 8004ca2:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8004ca4:	2d00      	cmp	r5, #0
 8004ca6:	d0e4      	beq.n	8004c72 <osMutexNew+0x3a>
          name = attr->name;
 8004ca8:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8004caa:	4621      	mov	r1, r4
 8004cac:	4628      	mov	r0, r5
 8004cae:	f001 f873 	bl	8005d98 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004cb2:	b16e      	cbz	r6, 8004cd0 <osMutexNew+0x98>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004cb4:	f045 0501 	orr.w	r5, r5, #1
 8004cb8:	e00a      	b.n	8004cd0 <osMutexNew+0x98>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004cba:	2001      	movs	r0, #1
 8004cbc:	f000 fddb 	bl	8005876 <xQueueCreateMutexStatic>
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	e7ef      	b.n	8004ca4 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateMutex ();
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f000 fdcb 	bl	8005860 <xQueueCreateMutex>
 8004cca:	4605      	mov	r5, r0
 8004ccc:	e7e1      	b.n	8004c92 <osMutexNew+0x5a>
  hMutex = NULL;
 8004cce:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8004cd4:	2500      	movs	r5, #0
 8004cd6:	e7fb      	b.n	8004cd0 <osMutexNew+0x98>
 8004cd8:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8004cda:	e7f9      	b.n	8004cd0 <osMutexNew+0x98>
 8004cdc:	20000980 	.word	0x20000980

08004ce0 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce0:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8004ce4:	bb72      	cbnz	r2, 8004d44 <osMutexAcquire+0x64>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	f020 0001 	bic.w	r0, r0, #1
 8004cf0:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf4:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8004cf8:	bb3a      	cbnz	r2, 8004d4a <osMutexAcquire+0x6a>
 8004cfa:	4a19      	ldr	r2, [pc, #100]	; (8004d60 <osMutexAcquire+0x80>)
 8004cfc:	6812      	ldr	r2, [r2, #0]
 8004cfe:	2a02      	cmp	r2, #2
 8004d00:	d00d      	beq.n	8004d1e <osMutexAcquire+0x3e>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004d02:	b328      	cbz	r0, 8004d50 <osMutexAcquire+0x70>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8004d04:	b193      	cbz	r3, 8004d2c <osMutexAcquire+0x4c>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004d06:	4621      	mov	r1, r4
 8004d08:	f000 ffcf 	bl	8005caa <xQueueTakeMutexRecursive>
 8004d0c:	2801      	cmp	r0, #1
 8004d0e:	d022      	beq.n	8004d56 <osMutexAcquire+0x76>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8004d10:	2c00      	cmp	r4, #0
 8004d12:	bf14      	ite	ne
 8004d14:	f06f 0001 	mvnne.w	r0, #1
 8004d18:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8004d1c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d1e:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	d0ed      	beq.n	8004d02 <osMutexAcquire+0x22>
    stat = osErrorISR;
 8004d26:	f06f 0005 	mvn.w	r0, #5
 8004d2a:	e7f7      	b.n	8004d1c <osMutexAcquire+0x3c>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	f000 fee9 	bl	8005b04 <xQueueSemaphoreTake>
 8004d32:	2801      	cmp	r0, #1
 8004d34:	d011      	beq.n	8004d5a <osMutexAcquire+0x7a>
          stat = osErrorResource;
 8004d36:	2c00      	cmp	r4, #0
 8004d38:	bf14      	ite	ne
 8004d3a:	f06f 0001 	mvnne.w	r0, #1
 8004d3e:	f06f 0002 	mvneq.w	r0, #2
 8004d42:	e7eb      	b.n	8004d1c <osMutexAcquire+0x3c>
    stat = osErrorISR;
 8004d44:	f06f 0005 	mvn.w	r0, #5
}
 8004d48:	4770      	bx	lr
    stat = osErrorISR;
 8004d4a:	f06f 0005 	mvn.w	r0, #5
 8004d4e:	e7e5      	b.n	8004d1c <osMutexAcquire+0x3c>
    stat = osErrorParameter;
 8004d50:	f06f 0003 	mvn.w	r0, #3
 8004d54:	e7e2      	b.n	8004d1c <osMutexAcquire+0x3c>
  stat = osOK;
 8004d56:	2000      	movs	r0, #0
 8004d58:	e7e0      	b.n	8004d1c <osMutexAcquire+0x3c>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	e7de      	b.n	8004d1c <osMutexAcquire+0x3c>
 8004d5e:	bf00      	nop
 8004d60:	20000980 	.word	0x20000980

08004d64 <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d64:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8004d68:	bb42      	cbnz	r2, 8004dbc <osMutexRelease+0x58>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004d6a:	b508      	push	{r3, lr}
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f020 0001 	bic.w	r0, r0, #1
 8004d72:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d76:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8004d7a:	bb12      	cbnz	r2, 8004dc2 <osMutexRelease+0x5e>
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <osMutexRelease+0x6c>)
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	2a02      	cmp	r2, #2
 8004d82:	d009      	beq.n	8004d98 <osMutexRelease+0x34>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004d84:	b300      	cbz	r0, 8004dc8 <osMutexRelease+0x64>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8004d86:	b173      	cbz	r3, 8004da6 <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004d88:	f000 fd84 	bl	8005894 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 8004d8c:	2801      	cmp	r0, #1
 8004d8e:	bf0c      	ite	eq
 8004d90:	2000      	moveq	r0, #0
 8004d92:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8004d96:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d98:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8004d9c:	2a00      	cmp	r2, #0
 8004d9e:	d0f1      	beq.n	8004d84 <osMutexRelease+0x20>
    stat = osErrorISR;
 8004da0:	f06f 0005 	mvn.w	r0, #5
 8004da4:	e7f7      	b.n	8004d96 <osMutexRelease+0x32>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004da6:	2300      	movs	r3, #0
 8004da8:	461a      	mov	r2, r3
 8004daa:	4619      	mov	r1, r3
 8004dac:	f000 fc80 	bl	80056b0 <xQueueGenericSend>
        stat = osErrorResource;
 8004db0:	2801      	cmp	r0, #1
 8004db2:	bf0c      	ite	eq
 8004db4:	2000      	moveq	r0, #0
 8004db6:	f06f 0002 	mvnne.w	r0, #2
 8004dba:	e7ec      	b.n	8004d96 <osMutexRelease+0x32>
    stat = osErrorISR;
 8004dbc:	f06f 0005 	mvn.w	r0, #5
}
 8004dc0:	4770      	bx	lr
    stat = osErrorISR;
 8004dc2:	f06f 0005 	mvn.w	r0, #5
 8004dc6:	e7e6      	b.n	8004d96 <osMutexRelease+0x32>
    stat = osErrorParameter;
 8004dc8:	f06f 0003 	mvn.w	r0, #3
 8004dcc:	e7e3      	b.n	8004d96 <osMutexRelease+0x32>
 8004dce:	bf00      	nop
 8004dd0:	20000980 	.word	0x20000980

08004dd4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d146      	bne.n	8004e6e <osSemaphoreNew+0x9a>
 8004de0:	460e      	mov	r6, r1
 8004de2:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de4:	f3ef 8310 	mrs	r3, PRIMASK
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d144      	bne.n	8004e76 <osSemaphoreNew+0xa2>
 8004dec:	4b32      	ldr	r3, [pc, #200]	; (8004eb8 <osSemaphoreNew+0xe4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d00c      	beq.n	8004e0e <osSemaphoreNew+0x3a>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d040      	beq.n	8004e7a <osSemaphoreNew+0xa6>
 8004df8:	42b0      	cmp	r0, r6
 8004dfa:	d340      	bcc.n	8004e7e <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 8004dfc:	2d00      	cmp	r5, #0
 8004dfe:	d04a      	beq.n	8004e96 <osSemaphoreNew+0xc2>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e00:	68ac      	ldr	r4, [r5, #8]
 8004e02:	b154      	cbz	r4, 8004e1a <osSemaphoreNew+0x46>
 8004e04:	68eb      	ldr	r3, [r5, #12]
 8004e06:	2b4f      	cmp	r3, #79	; 0x4f
 8004e08:	d83b      	bhi.n	8004e82 <osSemaphoreNew+0xae>
  hSemaphore = NULL;
 8004e0a:	2400      	movs	r4, #0
 8004e0c:	e030      	b.n	8004e70 <osSemaphoreNew+0x9c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e0e:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0ee      	beq.n	8004df4 <osSemaphoreNew+0x20>
  hSemaphore = NULL;
 8004e16:	2400      	movs	r4, #0
 8004e18:	e02a      	b.n	8004e70 <osSemaphoreNew+0x9c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e1a:	68eb      	ldr	r3, [r5, #12]
 8004e1c:	bb43      	cbnz	r3, 8004e70 <osSemaphoreNew+0x9c>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8004e1e:	2801      	cmp	r0, #1
 8004e20:	d142      	bne.n	8004ea8 <osSemaphoreNew+0xd4>
        if (mem == 1) {
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004e22:	2203      	movs	r2, #3
 8004e24:	2100      	movs	r1, #0
 8004e26:	2001      	movs	r0, #1
 8004e28:	f000 fbd9 	bl	80055de <xQueueGenericCreate>
 8004e2c:	4604      	mov	r4, r0
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004e2e:	b1fc      	cbz	r4, 8004e70 <osSemaphoreNew+0x9c>
 8004e30:	b986      	cbnz	r6, 8004e54 <osSemaphoreNew+0x80>
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 8004e32:	b105      	cbz	r5, 8004e36 <osSemaphoreNew+0x62>
          name = attr->name;
 8004e34:	682d      	ldr	r5, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004e36:	4629      	mov	r1, r5
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 ffad 	bl	8005d98 <vQueueAddToRegistry>
 8004e3e:	e017      	b.n	8004e70 <osSemaphoreNew+0x9c>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004e40:	2303      	movs	r3, #3
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4623      	mov	r3, r4
 8004e46:	2200      	movs	r2, #0
 8004e48:	4611      	mov	r1, r2
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f000 fb75 	bl	800553a <xQueueGenericCreateStatic>
 8004e50:	4604      	mov	r4, r0
 8004e52:	e7ec      	b.n	8004e2e <osSemaphoreNew+0x5a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e54:	2300      	movs	r3, #0
 8004e56:	461a      	mov	r2, r3
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 fc28 	bl	80056b0 <xQueueGenericSend>
 8004e60:	2801      	cmp	r0, #1
 8004e62:	d0e6      	beq.n	8004e32 <osSemaphoreNew+0x5e>
            vSemaphoreDelete (hSemaphore);
 8004e64:	4620      	mov	r0, r4
 8004e66:	f000 ffc1 	bl	8005dec <vQueueDelete>
            hSemaphore = NULL;
 8004e6a:	2400      	movs	r4, #0
 8004e6c:	e000      	b.n	8004e70 <osSemaphoreNew+0x9c>
  hSemaphore = NULL;
 8004e6e:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8004e70:	4620      	mov	r0, r4
 8004e72:	b002      	add	sp, #8
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8004e76:	2400      	movs	r4, #0
 8004e78:	e7fa      	b.n	8004e70 <osSemaphoreNew+0x9c>
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	e7f8      	b.n	8004e70 <osSemaphoreNew+0x9c>
 8004e7e:	2400      	movs	r4, #0
  return ((osSemaphoreId_t)hSemaphore);
 8004e80:	e7f6      	b.n	8004e70 <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 8004e82:	2801      	cmp	r0, #1
 8004e84:	d0dc      	beq.n	8004e40 <osSemaphoreNew+0x6c>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004e86:	4622      	mov	r2, r4
 8004e88:	4631      	mov	r1, r6
 8004e8a:	f000 fbd0 	bl	800562e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8004e8e:	4604      	mov	r4, r0
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d1cf      	bne.n	8004e34 <osSemaphoreNew+0x60>
 8004e94:	e7ec      	b.n	8004e70 <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 8004e96:	2801      	cmp	r0, #1
 8004e98:	d0c3      	beq.n	8004e22 <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	f000 fbea 	bl	8005674 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d0e4      	beq.n	8004e70 <osSemaphoreNew+0x9c>
 8004ea6:	e7c6      	b.n	8004e36 <osSemaphoreNew+0x62>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004ea8:	4631      	mov	r1, r6
 8004eaa:	f000 fbe3 	bl	8005674 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8004eae:	4604      	mov	r4, r0
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d1bf      	bne.n	8004e34 <osSemaphoreNew+0x60>
 8004eb4:	e7dc      	b.n	8004e70 <osSemaphoreNew+0x9c>
 8004eb6:	bf00      	nop
 8004eb8:	20000980 	.word	0x20000980

08004ebc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004ebc:	b530      	push	{r4, r5, lr}
 8004ebe:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d13e      	bne.n	8004f46 <osMessageQueueNew+0x8a>
 8004ec8:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d13d      	bne.n	8004f4e <osMessageQueueNew+0x92>
 8004ed2:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <osMessageQueueNew+0xb4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d014      	beq.n	8004f04 <osMessageQueueNew+0x48>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d039      	beq.n	8004f52 <osMessageQueueNew+0x96>
 8004ede:	2900      	cmp	r1, #0
 8004ee0:	d039      	beq.n	8004f56 <osMessageQueueNew+0x9a>
    mem = -1;

    if (attr != NULL) {
 8004ee2:	2d00      	cmp	r5, #0
 8004ee4:	d03d      	beq.n	8004f62 <osMessageQueueNew+0xa6>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ee6:	68ac      	ldr	r4, [r5, #8]
 8004ee8:	b194      	cbz	r4, 8004f10 <osMessageQueueNew+0x54>
 8004eea:	68eb      	ldr	r3, [r5, #12]
 8004eec:	2b4f      	cmp	r3, #79	; 0x4f
 8004eee:	d934      	bls.n	8004f5a <osMessageQueueNew+0x9e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ef0:	692a      	ldr	r2, [r5, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ef2:	b3a2      	cbz	r2, 8004f5e <osMessageQueueNew+0xa2>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ef4:	fb01 f300 	mul.w	r3, r1, r0
 8004ef8:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004efc:	459c      	cmp	ip, r3
 8004efe:	d219      	bcs.n	8004f34 <osMessageQueueNew+0x78>
  hQueue = NULL;
 8004f00:	2400      	movs	r4, #0
 8004f02:	e021      	b.n	8004f48 <osMessageQueueNew+0x8c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f04:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0e6      	beq.n	8004eda <osMessageQueueNew+0x1e>
  hQueue = NULL;
 8004f0c:	2400      	movs	r4, #0
 8004f0e:	e01b      	b.n	8004f48 <osMessageQueueNew+0x8c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f10:	68eb      	ldr	r3, [r5, #12]
 8004f12:	b9cb      	cbnz	r3, 8004f48 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f14:	692a      	ldr	r2, [r5, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f16:	b9ba      	cbnz	r2, 8004f48 <osMessageQueueNew+0x8c>

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8004f18:	696b      	ldr	r3, [r5, #20]
  hQueue = NULL;
 8004f1a:	4614      	mov	r4, r2
      if (mem == 0) {
 8004f1c:	b9a3      	cbnz	r3, 8004f48 <osMessageQueueNew+0x8c>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f000 fb5d 	bl	80055de <xQueueGenericCreate>
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004f24:	4604      	mov	r4, r0
 8004f26:	b178      	cbz	r0, 8004f48 <osMessageQueueNew+0x8c>
      if (attr != NULL) {
        name = attr->name;
 8004f28:	682d      	ldr	r5, [r5, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f000 ff33 	bl	8005d98 <vQueueAddToRegistry>
 8004f32:	e009      	b.n	8004f48 <osMessageQueueNew+0x8c>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004f34:	2300      	movs	r3, #0
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	4623      	mov	r3, r4
 8004f3a:	f000 fafe 	bl	800553a <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8004f3e:	4604      	mov	r4, r0
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d1f1      	bne.n	8004f28 <osMessageQueueNew+0x6c>
 8004f44:	e000      	b.n	8004f48 <osMessageQueueNew+0x8c>
  hQueue = NULL;
 8004f46:	2400      	movs	r4, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004f48:	4620      	mov	r0, r4
 8004f4a:	b003      	add	sp, #12
 8004f4c:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 8004f4e:	2400      	movs	r4, #0
 8004f50:	e7fa      	b.n	8004f48 <osMessageQueueNew+0x8c>
 8004f52:	2400      	movs	r4, #0
 8004f54:	e7f8      	b.n	8004f48 <osMessageQueueNew+0x8c>
 8004f56:	2400      	movs	r4, #0
 8004f58:	e7f6      	b.n	8004f48 <osMessageQueueNew+0x8c>
 8004f5a:	2400      	movs	r4, #0
 8004f5c:	e7f4      	b.n	8004f48 <osMessageQueueNew+0x8c>
 8004f5e:	4614      	mov	r4, r2
  return ((osMessageQueueId_t)hQueue);
 8004f60:	e7f2      	b.n	8004f48 <osMessageQueueNew+0x8c>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004f62:	2200      	movs	r2, #0
 8004f64:	f000 fb3b 	bl	80055de <xQueueGenericCreate>
    if (hQueue != NULL) {
 8004f68:	4604      	mov	r4, r0
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d0ec      	beq.n	8004f48 <osMessageQueueNew+0x8c>
 8004f6e:	e7dc      	b.n	8004f2a <osMessageQueueNew+0x6e>
 8004f70:	20000980 	.word	0x20000980

08004f74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004f74:	b510      	push	{r4, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f7a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8004f7e:	b9cb      	cbnz	r3, 8004fb4 <osMessageQueuePut+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f80:	f3ef 8310 	mrs	r3, PRIMASK
 8004f84:	b9b3      	cbnz	r3, 8004fb4 <osMessageQueuePut+0x40>
 8004f86:	4b22      	ldr	r3, [pc, #136]	; (8005010 <osMessageQueuePut+0x9c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d00e      	beq.n	8004fac <osMessageQueuePut+0x38>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f8e:	b3b0      	cbz	r0, 8004ffe <osMessageQueuePut+0x8a>
 8004f90:	b3c1      	cbz	r1, 8005004 <osMessageQueuePut+0x90>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f92:	2300      	movs	r3, #0
 8004f94:	4622      	mov	r2, r4
 8004f96:	f000 fb8b 	bl	80056b0 <xQueueGenericSend>
 8004f9a:	2801      	cmp	r0, #1
 8004f9c:	d035      	beq.n	800500a <osMessageQueuePut+0x96>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	bf14      	ite	ne
 8004fa2:	f06f 0001 	mvnne.w	r0, #1
 8004fa6:	f06f 0002 	mvneq.w	r0, #2
 8004faa:	e01a      	b.n	8004fe2 <osMessageQueuePut+0x6e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fac:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0ec      	beq.n	8004f8e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004fb4:	b1b8      	cbz	r0, 8004fe6 <osMessageQueuePut+0x72>
 8004fb6:	b1c9      	cbz	r1, 8004fec <osMessageQueuePut+0x78>
 8004fb8:	b9dc      	cbnz	r4, 8004ff2 <osMessageQueuePut+0x7e>
      yield = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004fbe:	aa01      	add	r2, sp, #4
 8004fc0:	f000 fc88 	bl	80058d4 <xQueueGenericSendFromISR>
 8004fc4:	2801      	cmp	r0, #1
 8004fc6:	d117      	bne.n	8004ff8 <osMessageQueuePut+0x84>
        portYIELD_FROM_ISR (yield);
 8004fc8:	9801      	ldr	r0, [sp, #4]
 8004fca:	b150      	cbz	r0, 8004fe2 <osMessageQueuePut+0x6e>
 8004fcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004fe0:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8004fe6:	f06f 0003 	mvn.w	r0, #3
 8004fea:	e7fa      	b.n	8004fe2 <osMessageQueuePut+0x6e>
 8004fec:	f06f 0003 	mvn.w	r0, #3
 8004ff0:	e7f7      	b.n	8004fe2 <osMessageQueuePut+0x6e>
 8004ff2:	f06f 0003 	mvn.w	r0, #3
 8004ff6:	e7f4      	b.n	8004fe2 <osMessageQueuePut+0x6e>
        stat = osErrorResource;
 8004ff8:	f06f 0002 	mvn.w	r0, #2
 8004ffc:	e7f1      	b.n	8004fe2 <osMessageQueuePut+0x6e>
      stat = osErrorParameter;
 8004ffe:	f06f 0003 	mvn.w	r0, #3
 8005002:	e7ee      	b.n	8004fe2 <osMessageQueuePut+0x6e>
 8005004:	f06f 0003 	mvn.w	r0, #3
 8005008:	e7eb      	b.n	8004fe2 <osMessageQueuePut+0x6e>
  stat = osOK;
 800500a:	2000      	movs	r0, #0
 800500c:	e7e9      	b.n	8004fe2 <osMessageQueuePut+0x6e>
 800500e:	bf00      	nop
 8005010:	20000980 	.word	0x20000980

08005014 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005014:	b510      	push	{r4, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800501a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800501e:	b9c3      	cbnz	r3, 8005052 <osMessageQueueGet+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005020:	f3ef 8310 	mrs	r3, PRIMASK
 8005024:	b9ab      	cbnz	r3, 8005052 <osMessageQueueGet+0x3e>
 8005026:	4b21      	ldr	r3, [pc, #132]	; (80050ac <osMessageQueueGet+0x98>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d00d      	beq.n	800504a <osMessageQueueGet+0x36>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800502e:	b3a8      	cbz	r0, 800509c <osMessageQueueGet+0x88>
 8005030:	b3b9      	cbz	r1, 80050a2 <osMessageQueueGet+0x8e>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005032:	4622      	mov	r2, r4
 8005034:	f000 fcb4 	bl	80059a0 <xQueueReceive>
 8005038:	2801      	cmp	r0, #1
 800503a:	d035      	beq.n	80050a8 <osMessageQueueGet+0x94>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 800503c:	2c00      	cmp	r4, #0
 800503e:	bf14      	ite	ne
 8005040:	f06f 0001 	mvnne.w	r0, #1
 8005044:	f06f 0002 	mvneq.w	r0, #2
 8005048:	e01a      	b.n	8005080 <osMessageQueueGet+0x6c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800504a:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0ed      	beq.n	800502e <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005052:	b1b8      	cbz	r0, 8005084 <osMessageQueueGet+0x70>
 8005054:	b1c9      	cbz	r1, 800508a <osMessageQueueGet+0x76>
 8005056:	b9dc      	cbnz	r4, 8005090 <osMessageQueueGet+0x7c>
      yield = pdFALSE;
 8005058:	2300      	movs	r3, #0
 800505a:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800505c:	aa01      	add	r2, sp, #4
 800505e:	f000 fe44 	bl	8005cea <xQueueReceiveFromISR>
 8005062:	2801      	cmp	r0, #1
 8005064:	d117      	bne.n	8005096 <osMessageQueueGet+0x82>
        portYIELD_FROM_ISR (yield);
 8005066:	9801      	ldr	r0, [sp, #4]
 8005068:	b150      	cbz	r0, 8005080 <osMessageQueueGet+0x6c>
 800506a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005072:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800507e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005080:	b002      	add	sp, #8
 8005082:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005084:	f06f 0003 	mvn.w	r0, #3
 8005088:	e7fa      	b.n	8005080 <osMessageQueueGet+0x6c>
 800508a:	f06f 0003 	mvn.w	r0, #3
 800508e:	e7f7      	b.n	8005080 <osMessageQueueGet+0x6c>
 8005090:	f06f 0003 	mvn.w	r0, #3
 8005094:	e7f4      	b.n	8005080 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
 8005096:	f06f 0002 	mvn.w	r0, #2
 800509a:	e7f1      	b.n	8005080 <osMessageQueueGet+0x6c>
      stat = osErrorParameter;
 800509c:	f06f 0003 	mvn.w	r0, #3
 80050a0:	e7ee      	b.n	8005080 <osMessageQueueGet+0x6c>
 80050a2:	f06f 0003 	mvn.w	r0, #3
 80050a6:	e7eb      	b.n	8005080 <osMessageQueueGet+0x6c>
  stat = osOK;
 80050a8:	2000      	movs	r0, #0
 80050aa:	e7e9      	b.n	8005080 <osMessageQueueGet+0x6c>
 80050ac:	20000980 	.word	0x20000980

080050b0 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <vApplicationGetIdleTaskMemory+0x10>)
 80050b2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <vApplicationGetIdleTaskMemory+0x14>)
 80050b6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	6013      	str	r3, [r2, #0]
}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000924 	.word	0x20000924
 80050c4:	20000724 	.word	0x20000724

080050c8 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <vApplicationGetTimerTaskMemory+0x10>)
 80050ca:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050cc:	4b03      	ldr	r3, [pc, #12]	; (80050dc <vApplicationGetTimerTaskMemory+0x14>)
 80050ce:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050d4:	6013      	str	r3, [r2, #0]
}
 80050d6:	4770      	bx	lr
 80050d8:	20000d84 	.word	0x20000d84
 80050dc:	20000984 	.word	0x20000984

080050e0 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80050e0:	b180      	cbz	r0, 8005104 <xEventGroupCreateStatic+0x24>
	{
 80050e2:	b510      	push	{r4, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80050e8:	2320      	movs	r3, #32
 80050ea:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80050ec:	9b01      	ldr	r3, [sp, #4]
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d011      	beq.n	8005116 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	e7fe      	b.n	8005102 <xEventGroupCreateStatic+0x22>
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8005114:	e7fe      	b.n	8005114 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800511c:	f000 f8f4 	bl	8005308 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005120:	2301      	movs	r3, #1
 8005122:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005124:	4620      	mov	r0, r4
 8005126:	b002      	add	sp, #8
 8005128:	bd10      	pop	{r4, pc}

0800512a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800512a:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800512c:	2020      	movs	r0, #32
 800512e:	f002 f893 	bl	8007258 <pvPortMalloc>

		if( pxEventBits != NULL )
 8005132:	4604      	mov	r4, r0
 8005134:	b128      	cbz	r0, 8005142 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8005136:	2500      	movs	r5, #0
 8005138:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800513c:	f000 f8e4 	bl	8005308 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005140:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005142:	4620      	mov	r0, r4
 8005144:	bd38      	pop	{r3, r4, r5, pc}

08005146 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005146:	b188      	cbz	r0, 800516c <xEventGroupWaitBits+0x26>
{
 8005148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514c:	460c      	mov	r4, r1
 800514e:	4616      	mov	r6, r2
 8005150:	461d      	mov	r5, r3
 8005152:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005154:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005158:	d011      	beq.n	800517e <xEventGroupWaitBits+0x38>
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	e7fe      	b.n	800516a <xEventGroupWaitBits+0x24>
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 800517c:	e7fe      	b.n	800517c <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 800517e:	b941      	cbnz	r1, 8005192 <xEventGroupWaitBits+0x4c>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	e7fe      	b.n	8005190 <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005192:	f001 fb97 	bl	80068c4 <xTaskGetSchedulerState>
 8005196:	b950      	cbnz	r0, 80051ae <xEventGroupWaitBits+0x68>
 8005198:	9b06      	ldr	r3, [sp, #24]
 800519a:	b143      	cbz	r3, 80051ae <xEventGroupWaitBits+0x68>
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	e7fe      	b.n	80051ac <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 80051ae:	f001 f87b 	bl	80062a8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80051b2:	f8d7 8000 	ldr.w	r8, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80051b6:	bb5d      	cbnz	r5, 8005210 <xEventGroupWaitBits+0xca>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80051b8:	ea14 0f08 	tst.w	r4, r8
 80051bc:	bf14      	ite	ne
 80051be:	2001      	movne	r0, #1
 80051c0:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 80051c2:	bb58      	cbnz	r0, 800521c <xEventGroupWaitBits+0xd6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80051c4:	9b06      	ldr	r3, [sp, #24]
 80051c6:	b36b      	cbz	r3, 8005224 <xEventGroupWaitBits+0xde>
			if( xClearOnExit != pdFALSE )
 80051c8:	1e31      	subs	r1, r6, #0
 80051ca:	bf18      	it	ne
 80051cc:	2101      	movne	r1, #1
 80051ce:	0609      	lsls	r1, r1, #24
			if( xWaitForAllBits != pdFALSE )
 80051d0:	b10d      	cbz	r5, 80051d6 <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80051d2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80051d6:	9a06      	ldr	r2, [sp, #24]
 80051d8:	4321      	orrs	r1, r4
 80051da:	1d38      	adds	r0, r7, #4
 80051dc:	f001 fa46 	bl	800666c <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 80051e0:	f001 f90a 	bl	80063f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80051e4:	b948      	cbnz	r0, 80051fa <xEventGroupWaitBits+0xb4>
			portYIELD_WITHIN_API();
 80051e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80051ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 80051fa:	f001 fc57 	bl	8006aac <uxTaskResetEventItemValue>
 80051fe:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005200:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005204:	d011      	beq.n	800522a <xEventGroupWaitBits+0xe4>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005206:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
}
 800520a:	4640      	mov	r0, r8
 800520c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005210:	ea34 0308 	bics.w	r3, r4, r8
 8005214:	bf0c      	ite	eq
 8005216:	2001      	moveq	r0, #1
 8005218:	2000      	movne	r0, #0
 800521a:	e7d2      	b.n	80051c2 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 800521c:	b116      	cbz	r6, 8005224 <xEventGroupWaitBits+0xde>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800521e:	ea28 0404 	bic.w	r4, r8, r4
 8005222:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8005224:	f001 f8e8 	bl	80063f8 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8005228:	e7ef      	b.n	800520a <xEventGroupWaitBits+0xc4>
			taskENTER_CRITICAL();
 800522a:	f001 fecb 	bl	8006fc4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 800522e:	f8d7 8000 	ldr.w	r8, [r7]
	if( xWaitForAllBits == pdFALSE )
 8005232:	b965      	cbnz	r5, 800524e <xEventGroupWaitBits+0x108>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005234:	ea14 0f08 	tst.w	r4, r8
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800523e:	b11b      	cbz	r3, 8005248 <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 8005240:	b116      	cbz	r6, 8005248 <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005242:	ea28 0404 	bic.w	r4, r8, r4
 8005246:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 8005248:	f001 fede 	bl	8007008 <vPortExitCritical>
 800524c:	e7db      	b.n	8005206 <xEventGroupWaitBits+0xc0>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800524e:	ea34 0308 	bics.w	r3, r4, r8
 8005252:	bf0c      	ite	eq
 8005254:	2301      	moveq	r3, #1
 8005256:	2300      	movne	r3, #0
 8005258:	e7f1      	b.n	800523e <xEventGroupWaitBits+0xf8>

0800525a <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 800525a:	b178      	cbz	r0, 800527c <xEventGroupSetBits+0x22>
{
 800525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005260:	460e      	mov	r6, r1
 8005262:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005264:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005268:	d011      	beq.n	800528e <xEventGroupSetBits+0x34>
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	e7fe      	b.n	800527a <xEventGroupSetBits+0x20>
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 800528c:	e7fe      	b.n	800528c <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800528e:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 8005292:	f001 f809 	bl	80062a8 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005296:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	4333      	orrs	r3, r6
 800529c:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 800529e:	42a7      	cmp	r7, r4
 80052a0:	d118      	bne.n	80052d4 <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	ea23 0308 	bic.w	r3, r3, r8
 80052a8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80052aa:	f001 f8a5 	bl	80063f8 <xTaskResumeAll>
}
 80052ae:	6828      	ldr	r0, [r5, #0]
 80052b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80052b4:	6829      	ldr	r1, [r5, #0]
 80052b6:	ea32 0101 	bics.w	r1, r2, r1
 80052ba:	d109      	bne.n	80052d0 <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80052bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 80052c0:	bf18      	it	ne
 80052c2:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80052c6:	6829      	ldr	r1, [r5, #0]
 80052c8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80052cc:	f001 fa5c 	bl	8006788 <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 80052d0:	42a7      	cmp	r7, r4
 80052d2:	d0e6      	beq.n	80052a2 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 80052d4:	4620      	mov	r0, r4
 80052d6:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80052d8:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80052da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80052de:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80052e2:	d1e7      	bne.n	80052b4 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80052e4:	6829      	ldr	r1, [r5, #0]
 80052e6:	420a      	tst	r2, r1
 80052e8:	d1e8      	bne.n	80052bc <xEventGroupSetBits+0x62>
 80052ea:	e7f1      	b.n	80052d0 <xEventGroupSetBits+0x76>

080052ec <vEventGroupSetBitsCallback>:
{
 80052ec:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80052ee:	f7ff ffb4 	bl	800525a <xEventGroupSetBits>
}
 80052f2:	bd08      	pop	{r3, pc}

080052f4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80052f4:	b508      	push	{r3, lr}
 80052f6:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80052f8:	460a      	mov	r2, r1
 80052fa:	4601      	mov	r1, r0
 80052fc:	4801      	ldr	r0, [pc, #4]	; (8005304 <xEventGroupSetBitsFromISR+0x10>)
 80052fe:	f001 fdf3 	bl	8006ee8 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005302:	bd08      	pop	{r3, pc}
 8005304:	080052ed 	.word	0x080052ed

08005308 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005308:	f100 0308 	add.w	r3, r0, #8
 800530c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800530e:	f04f 32ff 	mov.w	r2, #4294967295
 8005312:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005314:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005316:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800531c:	4770      	bx	lr

0800531e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005322:	4770      	bx	lr

08005324 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005324:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005326:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800532c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800532e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005330:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005332:	6803      	ldr	r3, [r0, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	6003      	str	r3, [r0, #0]
}
 8005338:	4770      	bx	lr

0800533a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800533a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800533c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800533e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005342:	d011      	beq.n	8005368 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005344:	f100 0308 	add.w	r3, r0, #8
 8005348:	461c      	mov	r4, r3
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	42aa      	cmp	r2, r5
 8005350:	d9fa      	bls.n	8005348 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005352:	6863      	ldr	r3, [r4, #4]
 8005354:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005356:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005358:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800535a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800535c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	6003      	str	r3, [r0, #0]
}
 8005364:	bc30      	pop	{r4, r5}
 8005366:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005368:	6904      	ldr	r4, [r0, #16]
 800536a:	e7f2      	b.n	8005352 <vListInsert+0x18>

0800536c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800536c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800536e:	6841      	ldr	r1, [r0, #4]
 8005370:	6882      	ldr	r2, [r0, #8]
 8005372:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005374:	6841      	ldr	r1, [r0, #4]
 8005376:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800537c:	bf04      	itt	eq
 800537e:	6882      	ldreq	r2, [r0, #8]
 8005380:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005382:	2200      	movs	r2, #0
 8005384:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	3a01      	subs	r2, #1
 800538a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800538c:	6818      	ldr	r0, [r3, #0]
}
 800538e:	4770      	bx	lr

08005390 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005390:	b510      	push	{r4, lr}
 8005392:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005394:	f001 fe16 	bl	8006fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005398:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800539a:	f001 fe35 	bl	8007008 <vPortExitCritical>

	return xReturn;
}
 800539e:	fab4 f084 	clz	r0, r4
 80053a2:	0940      	lsrs	r0, r0, #5
 80053a4:	bd10      	pop	{r4, pc}

080053a6 <prvCopyDataToQueue>:
{
 80053a6:	b570      	push	{r4, r5, r6, lr}
 80053a8:	4604      	mov	r4, r0
 80053aa:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053ae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80053b0:	b95a      	cbnz	r2, 80053ca <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053b2:	6803      	ldr	r3, [r0, #0]
 80053b4:	b11b      	cbz	r3, 80053be <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80053b6:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053b8:	3601      	adds	r6, #1
 80053ba:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80053be:	6840      	ldr	r0, [r0, #4]
 80053c0:	f001 fadc 	bl	800697c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	e7f6      	b.n	80053b8 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80053ca:	b96d      	cbnz	r5, 80053e8 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80053cc:	6880      	ldr	r0, [r0, #8]
 80053ce:	f002 fa32 	bl	8007836 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053d6:	4413      	add	r3, r2
 80053d8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053da:	6862      	ldr	r2, [r4, #4]
 80053dc:	4293      	cmp	r3, r2
 80053de:	d319      	bcc.n	8005414 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80053e4:	4628      	mov	r0, r5
 80053e6:	e7e7      	b.n	80053b8 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e8:	68c0      	ldr	r0, [r0, #12]
 80053ea:	f002 fa24 	bl	8007836 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80053ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053f0:	4251      	negs	r1, r2
 80053f2:	68e3      	ldr	r3, [r4, #12]
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d202      	bcs.n	8005404 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80053fe:	6863      	ldr	r3, [r4, #4]
 8005400:	440b      	add	r3, r1
 8005402:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005404:	2d02      	cmp	r5, #2
 8005406:	d001      	beq.n	800540c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005408:	2000      	movs	r0, #0
 800540a:	e7d5      	b.n	80053b8 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800540c:	b126      	cbz	r6, 8005418 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800540e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005410:	2000      	movs	r0, #0
 8005412:	e7d1      	b.n	80053b8 <prvCopyDataToQueue+0x12>
 8005414:	4628      	mov	r0, r5
 8005416:	e7cf      	b.n	80053b8 <prvCopyDataToQueue+0x12>
 8005418:	2000      	movs	r0, #0
 800541a:	e7cd      	b.n	80053b8 <prvCopyDataToQueue+0x12>

0800541c <prvCopyDataFromQueue>:
{
 800541c:	b508      	push	{r3, lr}
 800541e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005420:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005422:	b162      	cbz	r2, 800543e <prvCopyDataFromQueue+0x22>
 8005424:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005426:	68d9      	ldr	r1, [r3, #12]
 8005428:	4411      	add	r1, r2
 800542a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800542c:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005430:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005432:	bf24      	itt	cs
 8005434:	6819      	ldrcs	r1, [r3, #0]
 8005436:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005438:	68d9      	ldr	r1, [r3, #12]
 800543a:	f002 f9fc 	bl	8007836 <memcpy>
}
 800543e:	bd08      	pop	{r3, pc}

08005440 <prvUnlockQueue>:
{
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005444:	f001 fdbe 	bl	8006fc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005448:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800544c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800544e:	2c00      	cmp	r4, #0
 8005450:	dd0f      	ble.n	8005472 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005452:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005456:	e002      	b.n	800545e <prvUnlockQueue+0x1e>
			--cTxLock;
 8005458:	3c01      	subs	r4, #1
 800545a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800545c:	b14c      	cbz	r4, 8005472 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800545e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005460:	b13b      	cbz	r3, 8005472 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005462:	4630      	mov	r0, r6
 8005464:	f001 f94c 	bl	8006700 <xTaskRemoveFromEventList>
 8005468:	2800      	cmp	r0, #0
 800546a:	d0f5      	beq.n	8005458 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800546c:	f001 fa1e 	bl	80068ac <vTaskMissedYield>
 8005470:	e7f2      	b.n	8005458 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005472:	23ff      	movs	r3, #255	; 0xff
 8005474:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005478:	f001 fdc6 	bl	8007008 <vPortExitCritical>
	taskENTER_CRITICAL();
 800547c:	f001 fda2 	bl	8006fc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005480:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005484:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005486:	2c00      	cmp	r4, #0
 8005488:	dd0f      	ble.n	80054aa <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800548a:	f105 0610 	add.w	r6, r5, #16
 800548e:	e002      	b.n	8005496 <prvUnlockQueue+0x56>
				--cRxLock;
 8005490:	3c01      	subs	r4, #1
 8005492:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005494:	b14c      	cbz	r4, 80054aa <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005496:	692b      	ldr	r3, [r5, #16]
 8005498:	b13b      	cbz	r3, 80054aa <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549a:	4630      	mov	r0, r6
 800549c:	f001 f930 	bl	8006700 <xTaskRemoveFromEventList>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d0f5      	beq.n	8005490 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 80054a4:	f001 fa02 	bl	80068ac <vTaskMissedYield>
 80054a8:	e7f2      	b.n	8005490 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 80054aa:	23ff      	movs	r3, #255	; 0xff
 80054ac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80054b0:	f001 fdaa 	bl	8007008 <vPortExitCritical>
}
 80054b4:	bd70      	pop	{r4, r5, r6, pc}

080054b6 <xQueueGenericReset>:
{
 80054b6:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80054b8:	b1e0      	cbz	r0, 80054f4 <xQueueGenericReset+0x3e>
 80054ba:	460d      	mov	r5, r1
 80054bc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80054be:	f001 fd81 	bl	8006fc4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80054c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	18d0      	adds	r0, r2, r3
 80054ce:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054d0:	2000      	movs	r0, #0
 80054d2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054d4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054d6:	1a5b      	subs	r3, r3, r1
 80054d8:	441a      	add	r2, r3
 80054da:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054dc:	23ff      	movs	r3, #255	; 0xff
 80054de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80054e6:	b9fd      	cbnz	r5, 8005528 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	b963      	cbnz	r3, 8005506 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80054ec:	f001 fd8c 	bl	8007008 <vPortExitCritical>
}
 80054f0:	2001      	movs	r0, #1
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005504:	e7fe      	b.n	8005504 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005506:	f104 0010 	add.w	r0, r4, #16
 800550a:	f001 f8f9 	bl	8006700 <xTaskRemoveFromEventList>
 800550e:	2800      	cmp	r0, #0
 8005510:	d0ec      	beq.n	80054ec <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005512:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	e7e1      	b.n	80054ec <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005528:	f104 0010 	add.w	r0, r4, #16
 800552c:	f7ff feec 	bl	8005308 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005530:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005534:	f7ff fee8 	bl	8005308 <vListInitialise>
 8005538:	e7d8      	b.n	80054ec <xQueueGenericReset+0x36>

0800553a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800553a:	b940      	cbnz	r0, 800554e <xQueueGenericCreateStatic+0x14>
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	e7fe      	b.n	800554c <xQueueGenericCreateStatic+0x12>
	{
 800554e:	b510      	push	{r4, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	461c      	mov	r4, r3
 8005554:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8005556:	b154      	cbz	r4, 800556e <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005558:	b192      	cbz	r2, 8005580 <xQueueGenericCreateStatic+0x46>
 800555a:	b9d9      	cbnz	r1, 8005594 <xQueueGenericCreateStatic+0x5a>
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	e7fe      	b.n	800556c <xQueueGenericCreateStatic+0x32>
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800557e:	e7fe      	b.n	800557e <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005580:	b1b1      	cbz	r1, 80055b0 <xQueueGenericCreateStatic+0x76>
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	e7fe      	b.n	8005592 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005594:	2050      	movs	r0, #80	; 0x50
 8005596:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005598:	9801      	ldr	r0, [sp, #4]
 800559a:	2850      	cmp	r0, #80	; 0x50
 800559c:	d00e      	beq.n	80055bc <xQueueGenericCreateStatic+0x82>
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	e7fe      	b.n	80055ae <xQueueGenericCreateStatic+0x74>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055b0:	2250      	movs	r2, #80	; 0x50
 80055b2:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055b4:	9a01      	ldr	r2, [sp, #4]
 80055b6:	2a50      	cmp	r2, #80	; 0x50
 80055b8:	d1f1      	bne.n	800559e <xQueueGenericCreateStatic+0x64>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055ba:	4622      	mov	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055bc:	2001      	movs	r0, #1
 80055be:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 80055c2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80055c4:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055c6:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055c8:	4601      	mov	r1, r0
 80055ca:	4620      	mov	r0, r4
 80055cc:	f7ff ff73 	bl	80054b6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80055d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80055d4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80055d8:	4620      	mov	r0, r4
 80055da:	b002      	add	sp, #8
 80055dc:	bd10      	pop	{r4, pc}

080055de <xQueueGenericCreate>:
	{
 80055de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055e0:	b940      	cbnz	r0, 80055f4 <xQueueGenericCreate+0x16>
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	e7fe      	b.n	80055f2 <xQueueGenericCreate+0x14>
 80055f4:	460c      	mov	r4, r1
 80055f6:	4616      	mov	r6, r2
 80055f8:	4607      	mov	r7, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055fa:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80055fe:	3050      	adds	r0, #80	; 0x50
 8005600:	f001 fe2a 	bl	8007258 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005604:	4605      	mov	r5, r0
 8005606:	b170      	cbz	r0, 8005626 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005608:	2300      	movs	r3, #0
 800560a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800560e:	b164      	cbz	r4, 800562a <xQueueGenericCreate+0x4c>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005610:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005614:	602b      	str	r3, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005616:	63ef      	str	r7, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005618:	642c      	str	r4, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800561a:	2101      	movs	r1, #1
 800561c:	4628      	mov	r0, r5
 800561e:	f7ff ff4a 	bl	80054b6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005622:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
	}
 8005626:	4628      	mov	r0, r5
 8005628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800562a:	4603      	mov	r3, r0
 800562c:	e7f2      	b.n	8005614 <xQueueGenericCreate+0x36>

0800562e <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800562e:	b940      	cbnz	r0, 8005642 <xQueueCreateCountingSemaphoreStatic+0x14>
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	e7fe      	b.n	8005640 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8005642:	b510      	push	{r4, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005648:	4288      	cmp	r0, r1
 800564a:	d208      	bcs.n	800565e <xQueueCreateCountingSemaphoreStatic+0x30>
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	e7fe      	b.n	800565c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800565e:	2302      	movs	r3, #2
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	2200      	movs	r2, #0
 8005666:	4611      	mov	r1, r2
 8005668:	f7ff ff67 	bl	800553a <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800566c:	b100      	cbz	r0, 8005670 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800566e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005670:	b002      	add	sp, #8
 8005672:	bd10      	pop	{r4, pc}

08005674 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8005674:	b940      	cbnz	r0, 8005688 <xQueueCreateCountingSemaphore+0x14>
 8005676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	e7fe      	b.n	8005686 <xQueueCreateCountingSemaphore+0x12>
	{
 8005688:	b510      	push	{r4, lr}
 800568a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800568c:	4288      	cmp	r0, r1
 800568e:	d208      	bcs.n	80056a2 <xQueueCreateCountingSemaphore+0x2e>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	e7fe      	b.n	80056a0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056a2:	2202      	movs	r2, #2
 80056a4:	2100      	movs	r1, #0
 80056a6:	f7ff ff9a 	bl	80055de <xQueueGenericCreate>
		if( xHandle != NULL )
 80056aa:	b100      	cbz	r0, 80056ae <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056ac:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80056ae:	bd10      	pop	{r4, pc}

080056b0 <xQueueGenericSend>:
{
 80056b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056b4:	b085      	sub	sp, #20
 80056b6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80056b8:	b188      	cbz	r0, 80056de <xQueueGenericSend+0x2e>
 80056ba:	460e      	mov	r6, r1
 80056bc:	461d      	mov	r5, r3
 80056be:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056c0:	b1b1      	cbz	r1, 80056f0 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056c2:	2d02      	cmp	r5, #2
 80056c4:	d120      	bne.n	8005708 <xQueueGenericSend+0x58>
 80056c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d01d      	beq.n	8005708 <xQueueGenericSend+0x58>
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	e7fe      	b.n	80056dc <xQueueGenericSend+0x2c>
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80056ee:	e7fe      	b.n	80056ee <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0e5      	beq.n	80056c2 <xQueueGenericSend+0x12>
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	e7fe      	b.n	8005706 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005708:	f001 f8dc 	bl	80068c4 <xTaskGetSchedulerState>
 800570c:	b950      	cbnz	r0, 8005724 <xQueueGenericSend+0x74>
 800570e:	9b01      	ldr	r3, [sp, #4]
 8005710:	b163      	cbz	r3, 800572c <xQueueGenericSend+0x7c>
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	e7fe      	b.n	8005722 <xQueueGenericSend+0x72>
 8005724:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005728:	2700      	movs	r7, #0
 800572a:	e03a      	b.n	80057a2 <xQueueGenericSend+0xf2>
 800572c:	f04f 0800 	mov.w	r8, #0
 8005730:	e7fa      	b.n	8005728 <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005732:	462a      	mov	r2, r5
 8005734:	4631      	mov	r1, r6
 8005736:	4620      	mov	r0, r4
 8005738:	f7ff fe35 	bl	80053a6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800573c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800573e:	b983      	cbnz	r3, 8005762 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8005740:	b148      	cbz	r0, 8005756 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8005742:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005756:	f001 fc57 	bl	8007008 <vPortExitCritical>
				return pdPASS;
 800575a:	2001      	movs	r0, #1
}
 800575c:	b005      	add	sp, #20
 800575e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005762:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005766:	f000 ffcb 	bl	8006700 <xTaskRemoveFromEventList>
 800576a:	2800      	cmp	r0, #0
 800576c:	d0f3      	beq.n	8005756 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 800576e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005776:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	e7e8      	b.n	8005756 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8005784:	f001 fc40 	bl	8007008 <vPortExitCritical>
					return errQUEUE_FULL;
 8005788:	2000      	movs	r0, #0
 800578a:	e7e7      	b.n	800575c <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800578c:	a802      	add	r0, sp, #8
 800578e:	f001 f83f 	bl	8006810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005792:	e014      	b.n	80057be <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8005794:	4620      	mov	r0, r4
 8005796:	f7ff fe53 	bl	8005440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800579a:	f000 fe2d 	bl	80063f8 <xTaskResumeAll>
 800579e:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 80057a2:	f001 fc0f 	bl	8006fc4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3c1      	bcc.n	8005732 <xQueueGenericSend+0x82>
 80057ae:	2d02      	cmp	r5, #2
 80057b0:	d0bf      	beq.n	8005732 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 80057b2:	9b01      	ldr	r3, [sp, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0e5      	beq.n	8005784 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 80057b8:	f1b8 0f00 	cmp.w	r8, #0
 80057bc:	d0e6      	beq.n	800578c <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 80057be:	f001 fc23 	bl	8007008 <vPortExitCritical>
		vTaskSuspendAll();
 80057c2:	f000 fd71 	bl	80062a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c6:	f001 fbfd 	bl	8006fc4 <vPortEnterCritical>
 80057ca:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80057ce:	b252      	sxtb	r2, r2
 80057d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80057d4:	bf08      	it	eq
 80057d6:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80057da:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80057de:	b252      	sxtb	r2, r2
 80057e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80057e4:	bf08      	it	eq
 80057e6:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80057ea:	f001 fc0d 	bl	8007008 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057ee:	a901      	add	r1, sp, #4
 80057f0:	a802      	add	r0, sp, #8
 80057f2:	f001 f819 	bl	8006828 <xTaskCheckForTimeOut>
 80057f6:	bb00      	cbnz	r0, 800583a <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057f8:	f001 fbe4 	bl	8006fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057fc:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8005800:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005804:	f001 fc00 	bl	8007008 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005808:	45c1      	cmp	r9, r8
 800580a:	d1c3      	bne.n	8005794 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800580c:	9901      	ldr	r1, [sp, #4]
 800580e:	f104 0010 	add.w	r0, r4, #16
 8005812:	f000 ff13 	bl	800663c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005816:	4620      	mov	r0, r4
 8005818:	f7ff fe12 	bl	8005440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800581c:	f000 fdec 	bl	80063f8 <xTaskResumeAll>
 8005820:	2800      	cmp	r0, #0
 8005822:	d1bc      	bne.n	800579e <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005824:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	e7b1      	b.n	800579e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 800583a:	4620      	mov	r0, r4
 800583c:	f7ff fe00 	bl	8005440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005840:	f000 fdda 	bl	80063f8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005844:	2000      	movs	r0, #0
 8005846:	e789      	b.n	800575c <xQueueGenericSend+0xac>

08005848 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8005848:	b148      	cbz	r0, 800585e <prvInitialiseMutex+0x16>
	{
 800584a:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800584c:	2100      	movs	r1, #0
 800584e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005850:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005852:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005854:	460b      	mov	r3, r1
 8005856:	460a      	mov	r2, r1
 8005858:	f7ff ff2a 	bl	80056b0 <xQueueGenericSend>
	}
 800585c:	bd08      	pop	{r3, pc}
 800585e:	4770      	bx	lr

08005860 <xQueueCreateMutex>:
	{
 8005860:	b510      	push	{r4, lr}
 8005862:	4602      	mov	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005864:	2100      	movs	r1, #0
 8005866:	2001      	movs	r0, #1
 8005868:	f7ff feb9 	bl	80055de <xQueueGenericCreate>
 800586c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800586e:	f7ff ffeb 	bl	8005848 <prvInitialiseMutex>
	}
 8005872:	4620      	mov	r0, r4
 8005874:	bd10      	pop	{r4, pc}

08005876 <xQueueCreateMutexStatic>:
	{
 8005876:	b510      	push	{r4, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800587c:	9000      	str	r0, [sp, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	4611      	mov	r1, r2
 8005882:	2001      	movs	r0, #1
 8005884:	f7ff fe59 	bl	800553a <xQueueGenericCreateStatic>
 8005888:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800588a:	f7ff ffdd 	bl	8005848 <prvInitialiseMutex>
	}
 800588e:	4620      	mov	r0, r4
 8005890:	b002      	add	sp, #8
 8005892:	bd10      	pop	{r4, pc}

08005894 <xQueueGiveMutexRecursive>:
	{
 8005894:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8005896:	b138      	cbz	r0, 80058a8 <xQueueGiveMutexRecursive+0x14>
 8005898:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800589a:	6845      	ldr	r5, [r0, #4]
 800589c:	f001 f80c 	bl	80068b8 <xTaskGetCurrentTaskHandle>
 80058a0:	4285      	cmp	r5, r0
 80058a2:	d00a      	beq.n	80058ba <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 80058a4:	2000      	movs	r0, #0
	}
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80058b8:	e7fe      	b.n	80058b8 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 80058ba:	68e3      	ldr	r3, [r4, #12]
 80058bc:	3b01      	subs	r3, #1
 80058be:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80058c0:	b10b      	cbz	r3, 80058c6 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 80058c2:	2001      	movs	r0, #1
		return xReturn;
 80058c4:	e7ef      	b.n	80058a6 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80058c6:	461a      	mov	r2, r3
 80058c8:	4619      	mov	r1, r3
 80058ca:	4620      	mov	r0, r4
 80058cc:	f7ff fef0 	bl	80056b0 <xQueueGenericSend>
			xReturn = pdPASS;
 80058d0:	2001      	movs	r0, #1
 80058d2:	e7e8      	b.n	80058a6 <xQueueGiveMutexRecursive+0x12>

080058d4 <xQueueGenericSendFromISR>:
{
 80058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80058d8:	b190      	cbz	r0, 8005900 <xQueueGenericSendFromISR+0x2c>
 80058da:	460f      	mov	r7, r1
 80058dc:	4616      	mov	r6, r2
 80058de:	461c      	mov	r4, r3
 80058e0:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e2:	b1b1      	cbz	r1, 8005912 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058e4:	2c02      	cmp	r4, #2
 80058e6:	d120      	bne.n	800592a <xQueueGenericSendFromISR+0x56>
 80058e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d01d      	beq.n	800592a <xQueueGenericSendFromISR+0x56>
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	e7fe      	b.n	80058fe <xQueueGenericSendFromISR+0x2a>
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005910:	e7fe      	b.n	8005910 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005912:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0e5      	beq.n	80058e4 <xQueueGenericSendFromISR+0x10>
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	e7fe      	b.n	8005928 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800592a:	f001 fc39 	bl	80071a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800592e:	f3ef 8811 	mrs	r8, BASEPRI
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005942:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005944:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005946:	429a      	cmp	r2, r3
 8005948:	d306      	bcc.n	8005958 <xQueueGenericSendFromISR+0x84>
 800594a:	2c02      	cmp	r4, #2
 800594c:	d004      	beq.n	8005958 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800594e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005950:	f388 8811 	msr	BASEPRI, r8
}
 8005954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005958:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 800595c:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005960:	4622      	mov	r2, r4
 8005962:	4639      	mov	r1, r7
 8005964:	4628      	mov	r0, r5
 8005966:	f7ff fd1e 	bl	80053a6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800596a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800596e:	d006      	beq.n	800597e <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005970:	f109 0301 	add.w	r3, r9, #1
 8005974:	b25b      	sxtb	r3, r3
 8005976:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800597a:	2001      	movs	r0, #1
 800597c:	e7e8      	b.n	8005950 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800597e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005980:	b90b      	cbnz	r3, 8005986 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8005982:	2001      	movs	r0, #1
 8005984:	e7e4      	b.n	8005950 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005986:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800598a:	f000 feb9 	bl	8006700 <xTaskRemoveFromEventList>
 800598e:	b118      	cbz	r0, 8005998 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8005990:	b126      	cbz	r6, 800599c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005992:	2001      	movs	r0, #1
 8005994:	6030      	str	r0, [r6, #0]
 8005996:	e7db      	b.n	8005950 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005998:	2001      	movs	r0, #1
 800599a:	e7d9      	b.n	8005950 <xQueueGenericSendFromISR+0x7c>
 800599c:	2001      	movs	r0, #1
 800599e:	e7d7      	b.n	8005950 <xQueueGenericSendFromISR+0x7c>

080059a0 <xQueueReceive>:
{
 80059a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80059a8:	b180      	cbz	r0, 80059cc <xQueueReceive+0x2c>
 80059aa:	460e      	mov	r6, r1
 80059ac:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ae:	b1b1      	cbz	r1, 80059de <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059b0:	f000 ff88 	bl	80068c4 <xTaskGetSchedulerState>
 80059b4:	b9f8      	cbnz	r0, 80059f6 <xQueueReceive+0x56>
 80059b6:	9b01      	ldr	r3, [sp, #4]
 80059b8:	b30b      	cbz	r3, 80059fe <xQueueReceive+0x5e>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	e7fe      	b.n	80059ca <xQueueReceive+0x2a>
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80059dc:	e7fe      	b.n	80059dc <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0e5      	beq.n	80059b0 <xQueueReceive+0x10>
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	e7fe      	b.n	80059f4 <xQueueReceive+0x54>
 80059f6:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 80059fa:	2700      	movs	r7, #0
 80059fc:	e03b      	b.n	8005a76 <xQueueReceive+0xd6>
 80059fe:	f04f 0800 	mov.w	r8, #0
 8005a02:	e7fa      	b.n	80059fa <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a04:	4631      	mov	r1, r6
 8005a06:	4620      	mov	r0, r4
 8005a08:	f7ff fd08 	bl	800541c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a0c:	3d01      	subs	r5, #1
 8005a0e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a10:	6923      	ldr	r3, [r4, #16]
 8005a12:	b92b      	cbnz	r3, 8005a20 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8005a14:	f001 faf8 	bl	8007008 <vPortExitCritical>
				return pdPASS;
 8005a18:	2001      	movs	r0, #1
}
 8005a1a:	b004      	add	sp, #16
 8005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a20:	f104 0010 	add.w	r0, r4, #16
 8005a24:	f000 fe6c 	bl	8006700 <xTaskRemoveFromEventList>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d0f3      	beq.n	8005a14 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 8005a2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	e7e8      	b.n	8005a14 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8005a42:	f001 fae1 	bl	8007008 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005a46:	2000      	movs	r0, #0
 8005a48:	e7e7      	b.n	8005a1a <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a4a:	a802      	add	r0, sp, #8
 8005a4c:	f000 fee0 	bl	8006810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a50:	e01c      	b.n	8005a8c <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8005a52:	4620      	mov	r0, r4
 8005a54:	f7ff fcf4 	bl	8005440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a58:	f000 fcce 	bl	80063f8 <xTaskResumeAll>
 8005a5c:	e009      	b.n	8005a72 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff fcee 	bl	8005440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a64:	f000 fcc8 	bl	80063f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f7ff fc91 	bl	8005390 <prvIsQueueEmpty>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d146      	bne.n	8005b00 <xQueueReceive+0x160>
 8005a72:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8005a76:	f001 faa5 	bl	8006fc4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a7a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a7c:	2d00      	cmp	r5, #0
 8005a7e:	d1c1      	bne.n	8005a04 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a80:	9b01      	ldr	r3, [sp, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0dd      	beq.n	8005a42 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8005a86:	f1b8 0f00 	cmp.w	r8, #0
 8005a8a:	d0de      	beq.n	8005a4a <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 8005a8c:	f001 fabc 	bl	8007008 <vPortExitCritical>
		vTaskSuspendAll();
 8005a90:	f000 fc0a 	bl	80062a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a94:	f001 fa96 	bl	8006fc4 <vPortEnterCritical>
 8005a98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a9c:	b25b      	sxtb	r3, r3
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	bf08      	it	eq
 8005aa4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005aa8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	bf08      	it	eq
 8005ab4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005ab8:	f001 faa6 	bl	8007008 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005abc:	a901      	add	r1, sp, #4
 8005abe:	a802      	add	r0, sp, #8
 8005ac0:	f000 feb2 	bl	8006828 <xTaskCheckForTimeOut>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d1ca      	bne.n	8005a5e <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f7ff fc61 	bl	8005390 <prvIsQueueEmpty>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d0bf      	beq.n	8005a52 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ad2:	9901      	ldr	r1, [sp, #4]
 8005ad4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ad8:	f000 fdb0 	bl	800663c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005adc:	4620      	mov	r0, r4
 8005ade:	f7ff fcaf 	bl	8005440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ae2:	f000 fc89 	bl	80063f8 <xTaskResumeAll>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d1c3      	bne.n	8005a72 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 8005aea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	e7b8      	b.n	8005a72 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8005b00:	2000      	movs	r0, #0
 8005b02:	e78a      	b.n	8005a1a <xQueueReceive+0x7a>

08005b04 <xQueueSemaphoreTake>:
{
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b06:	b085      	sub	sp, #20
 8005b08:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005b0a:	b158      	cbz	r0, 8005b24 <xQueueSemaphoreTake+0x20>
 8005b0c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b10:	b18b      	cbz	r3, 8005b36 <xQueueSemaphoreTake+0x32>
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	e7fe      	b.n	8005b22 <xQueueSemaphoreTake+0x1e>
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005b34:	e7fe      	b.n	8005b34 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b36:	f000 fec5 	bl	80068c4 <xTaskGetSchedulerState>
 8005b3a:	b950      	cbnz	r0, 8005b52 <xQueueSemaphoreTake+0x4e>
 8005b3c:	9b01      	ldr	r3, [sp, #4]
 8005b3e:	b163      	cbz	r3, 8005b5a <xQueueSemaphoreTake+0x56>
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	e7fe      	b.n	8005b50 <xQueueSemaphoreTake+0x4c>
 8005b52:	2600      	movs	r6, #0
 8005b54:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 8005b56:	2500      	movs	r5, #0
 8005b58:	e04e      	b.n	8005bf8 <xQueueSemaphoreTake+0xf4>
 8005b5a:	2600      	movs	r6, #0
 8005b5c:	4637      	mov	r7, r6
 8005b5e:	e7fa      	b.n	8005b56 <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b60:	3b01      	subs	r3, #1
 8005b62:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	b13b      	cbz	r3, 8005b78 <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	b94b      	cbnz	r3, 8005b80 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 8005b6c:	f001 fa4c 	bl	8007008 <vPortExitCritical>
				return pdPASS;
 8005b70:	2601      	movs	r6, #1
}
 8005b72:	4630      	mov	r0, r6
 8005b74:	b005      	add	sp, #20
 8005b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005b78:	f000 ffa4 	bl	8006ac4 <pvTaskIncrementMutexHeldCount>
 8005b7c:	6060      	str	r0, [r4, #4]
 8005b7e:	e7f3      	b.n	8005b68 <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b80:	f104 0010 	add.w	r0, r4, #16
 8005b84:	f000 fdbc 	bl	8006700 <xTaskRemoveFromEventList>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d0ef      	beq.n	8005b6c <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 8005b8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	e7e4      	b.n	8005b6c <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ba2:	b146      	cbz	r6, 8005bb6 <xQueueSemaphoreTake+0xb2>
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	e7fe      	b.n	8005bb4 <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 8005bb6:	f001 fa27 	bl	8007008 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005bba:	e7da      	b.n	8005b72 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bbc:	a802      	add	r0, sp, #8
 8005bbe:	f000 fe27 	bl	8006810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bc2:	e023      	b.n	8005c0c <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 8005bc4:	f001 f9fe 	bl	8006fc4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005bc8:	6860      	ldr	r0, [r4, #4]
 8005bca:	f000 fe8b 	bl	80068e4 <xTaskPriorityInherit>
 8005bce:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8005bd0:	f001 fa1a 	bl	8007008 <vPortExitCritical>
 8005bd4:	e040      	b.n	8005c58 <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f7ff fc32 	bl	8005440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bdc:	f000 fc0c 	bl	80063f8 <xTaskResumeAll>
 8005be0:	e009      	b.n	8005bf6 <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 8005be2:	4620      	mov	r0, r4
 8005be4:	f7ff fc2c 	bl	8005440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005be8:	f000 fc06 	bl	80063f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bec:	4620      	mov	r0, r4
 8005bee:	f7ff fbcf 	bl	8005390 <prvIsQueueEmpty>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d147      	bne.n	8005c86 <xQueueSemaphoreTake+0x182>
 8005bf6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8005bf8:	f001 f9e4 	bl	8006fc4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1ae      	bne.n	8005b60 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c02:	9b01      	ldr	r3, [sp, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0cc      	beq.n	8005ba2 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 8005c08:	2f00      	cmp	r7, #0
 8005c0a:	d0d7      	beq.n	8005bbc <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 8005c0c:	f001 f9fc 	bl	8007008 <vPortExitCritical>
		vTaskSuspendAll();
 8005c10:	f000 fb4a 	bl	80062a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c14:	f001 f9d6 	bl	8006fc4 <vPortEnterCritical>
 8005c18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c1c:	b25b      	sxtb	r3, r3
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	bf08      	it	eq
 8005c24:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 8005c28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	bf08      	it	eq
 8005c34:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 8005c38:	f001 f9e6 	bl	8007008 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c3c:	a901      	add	r1, sp, #4
 8005c3e:	a802      	add	r0, sp, #8
 8005c40:	f000 fdf2 	bl	8006828 <xTaskCheckForTimeOut>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d1cc      	bne.n	8005be2 <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7ff fba1 	bl	8005390 <prvIsQueueEmpty>
 8005c4e:	2800      	cmp	r0, #0
 8005c50:	d0c1      	beq.n	8005bd6 <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0b5      	beq.n	8005bc4 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c58:	9901      	ldr	r1, [sp, #4]
 8005c5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c5e:	f000 fced 	bl	800663c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c62:	4620      	mov	r0, r4
 8005c64:	f7ff fbec 	bl	8005440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c68:	f000 fbc6 	bl	80063f8 <xTaskResumeAll>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d1c2      	bne.n	8005bf6 <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 8005c70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	e7b7      	b.n	8005bf6 <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 8005c86:	2e00      	cmp	r6, #0
 8005c88:	f43f af73 	beq.w	8005b72 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 8005c8c:	f001 f99a 	bl	8006fc4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005c90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005c92:	b119      	cbz	r1, 8005c9c <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c96:	6819      	ldr	r1, [r3, #0]
 8005c98:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005c9c:	6860      	ldr	r0, [r4, #4]
 8005c9e:	f000 feb5 	bl	8006a0c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005ca2:	f001 f9b1 	bl	8007008 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	e763      	b.n	8005b72 <xQueueSemaphoreTake+0x6e>

08005caa <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8005caa:	b180      	cbz	r0, 8005cce <xQueueTakeMutexRecursive+0x24>
	{
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	460c      	mov	r4, r1
 8005cb0:	4605      	mov	r5, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005cb2:	6846      	ldr	r6, [r0, #4]
 8005cb4:	f000 fe00 	bl	80068b8 <xTaskGetCurrentTaskHandle>
 8005cb8:	4286      	cmp	r6, r0
 8005cba:	d011      	beq.n	8005ce0 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7ff ff20 	bl	8005b04 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8005cc4:	b180      	cbz	r0, 8005ce8 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.uxRecursiveCallCount )++;
 8005cc6:	68eb      	ldr	r3, [r5, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8005ccc:	e00c      	b.n	8005ce8 <xQueueTakeMutexRecursive+0x3e>
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8005cde:	e7fe      	b.n	8005cde <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.uxRecursiveCallCount )++;
 8005ce0:	68eb      	ldr	r3, [r5, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8005ce6:	2001      	movs	r0, #1
	}
 8005ce8:	bd70      	pop	{r4, r5, r6, pc}

08005cea <xQueueReceiveFromISR>:
{
 8005cea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005cee:	b1b0      	cbz	r0, 8005d1e <xQueueReceiveFromISR+0x34>
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	4690      	mov	r8, r2
 8005cf4:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cf6:	b1d9      	cbz	r1, 8005d30 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cf8:	f001 fa52 	bl	80071a0 <vPortValidateInterruptPriority>
	__asm volatile
 8005cfc:	f3ef 8711 	mrs	r7, BASEPRI
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d12:	b9ce      	cbnz	r6, 8005d48 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8005d14:	2000      	movs	r0, #0
	__asm volatile
 8005d16:	f387 8811 	msr	BASEPRI, r7
}
 8005d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005d2e:	e7fe      	b.n	8005d2e <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d30:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0e0      	beq.n	8005cf8 <xQueueReceiveFromISR+0xe>
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	e7fe      	b.n	8005d46 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d48:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8005d4c:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d50:	4629      	mov	r1, r5
 8005d52:	4620      	mov	r0, r4
 8005d54:	f7ff fb62 	bl	800541c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d58:	1e73      	subs	r3, r6, #1
 8005d5a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005d5c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005d60:	d006      	beq.n	8005d70 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d62:	f109 0301 	add.w	r3, r9, #1
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	e7d2      	b.n	8005d16 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	b90b      	cbnz	r3, 8005d78 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8005d74:	2001      	movs	r0, #1
 8005d76:	e7ce      	b.n	8005d16 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d78:	f104 0010 	add.w	r0, r4, #16
 8005d7c:	f000 fcc0 	bl	8006700 <xTaskRemoveFromEventList>
 8005d80:	b130      	cbz	r0, 8005d90 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8005d82:	f1b8 0f00 	cmp.w	r8, #0
 8005d86:	d005      	beq.n	8005d94 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f8c8 0000 	str.w	r0, [r8]
 8005d8e:	e7c2      	b.n	8005d16 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8005d90:	2001      	movs	r0, #1
 8005d92:	e7c0      	b.n	8005d16 <xQueueReceiveFromISR+0x2c>
 8005d94:	2001      	movs	r0, #1
 8005d96:	e7be      	b.n	8005d16 <xQueueReceiveFromISR+0x2c>

08005d98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d98:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d9a:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d9c:	4c07      	ldr	r4, [pc, #28]	; (8005dbc <vQueueAddToRegistry+0x24>)
 8005d9e:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8005da2:	b122      	cbz	r2, 8005dae <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005da4:	3301      	adds	r3, #1
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d1f9      	bne.n	8005d9e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005daa:	bc10      	pop	{r4}
 8005dac:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dae:	4a03      	ldr	r2, [pc, #12]	; (8005dbc <vQueueAddToRegistry+0x24>)
 8005db0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005db4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8005db8:	6050      	str	r0, [r2, #4]
				break;
 8005dba:	e7f6      	b.n	8005daa <vQueueAddToRegistry+0x12>
 8005dbc:	20000de0 	.word	0x20000de0

08005dc0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005dc2:	4909      	ldr	r1, [pc, #36]	; (8005de8 <vQueueUnregisterQueue+0x28>)
 8005dc4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8005dc8:	6852      	ldr	r2, [r2, #4]
 8005dca:	4282      	cmp	r2, r0
 8005dcc:	d003      	beq.n	8005dd6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dce:	3301      	adds	r3, #1
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d1f7      	bne.n	8005dc4 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005dd4:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005dd6:	4a04      	ldr	r2, [pc, #16]	; (8005de8 <vQueueUnregisterQueue+0x28>)
 8005dd8:	2100      	movs	r1, #0
 8005dda:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005dde:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8005de2:	6051      	str	r1, [r2, #4]
				break;
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000de0 	.word	0x20000de0

08005dec <vQueueDelete>:
	configASSERT( pxQueue );
 8005dec:	b138      	cbz	r0, 8005dfe <vQueueDelete+0x12>
{
 8005dee:	b510      	push	{r4, lr}
 8005df0:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8005df2:	f7ff ffe5 	bl	8005dc0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005df6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005dfa:	b14b      	cbz	r3, 8005e10 <vQueueDelete+0x24>
}
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005e0e:	e7fe      	b.n	8005e0e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8005e10:	4620      	mov	r0, r4
 8005e12:	f001 fab7 	bl	8007384 <vPortFree>
}
 8005e16:	e7f1      	b.n	8005dfc <vQueueDelete+0x10>

08005e18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e20:	f001 f8d0 	bl	8006fc4 <vPortEnterCritical>
 8005e24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005e28:	b25b      	sxtb	r3, r3
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	bf04      	itt	eq
 8005e30:	2300      	moveq	r3, #0
 8005e32:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8005e36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005e3a:	b25b      	sxtb	r3, r3
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	bf04      	itt	eq
 8005e42:	2300      	moveq	r3, #0
 8005e44:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8005e48:	f001 f8de 	bl	8007008 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e4e:	b11b      	cbz	r3, 8005e58 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7ff faf5 	bl	8005440 <prvUnlockQueue>
	}
 8005e56:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e58:	4632      	mov	r2, r6
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005e60:	f000 fc30 	bl	80066c4 <vTaskPlaceOnEventListRestricted>
 8005e64:	e7f4      	b.n	8005e50 <vQueueWaitForMessageRestricted+0x38>
	...

08005e68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e68:	4b08      	ldr	r3, [pc, #32]	; (8005e8c <prvResetNextTaskUnblockTime+0x24>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	b923      	cbnz	r3, 8005e7a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e70:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <prvResetNextTaskUnblockTime+0x28>)
 8005e72:	f04f 32ff 	mov.w	r2, #4294967295
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e7a:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <prvResetNextTaskUnblockTime+0x24>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	4b02      	ldr	r3, [pc, #8]	; (8005e90 <prvResetNextTaskUnblockTime+0x28>)
 8005e86:	601a      	str	r2, [r3, #0]
	}
}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000e24 	.word	0x20000e24
 8005e90:	200012cc 	.word	0x200012cc

08005e94 <prvInitialiseNewTask>:
{
 8005e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	4606      	mov	r6, r0
 8005e9a:	4689      	mov	r9, r1
 8005e9c:	461f      	mov	r7, r3
 8005e9e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8005ea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ea4:	0095      	lsls	r5, r2, #2
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	21a5      	movs	r1, #165	; 0xa5
 8005eaa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005eac:	f001 fc3f 	bl	800772e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005eb0:	3d04      	subs	r5, #4
 8005eb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005eb4:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005eb6:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eba:	f109 3cff 	add.w	ip, r9, #4294967295
 8005ebe:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8005ec2:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ec6:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8005eca:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 8005ece:	b10a      	cbz	r2, 8005ed4 <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ed0:	458c      	cmp	ip, r1
 8005ed2:	d1f8      	bne.n	8005ec6 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ed4:	f04f 0a00 	mov.w	sl, #0
 8005ed8:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005edc:	9b08      	ldr	r3, [sp, #32]
 8005ede:	2b37      	cmp	r3, #55	; 0x37
 8005ee0:	bf28      	it	cs
 8005ee2:	2337      	movcs	r3, #55	; 0x37
 8005ee4:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8005ee6:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005ee8:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005eea:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005eee:	1d20      	adds	r0, r4, #4
 8005ef0:	f7ff fa15 	bl	800531e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ef4:	f104 0018 	add.w	r0, r4, #24
 8005ef8:	f7ff fa11 	bl	800531e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005efc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005efe:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8005f02:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f04:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005f06:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f0a:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f0e:	463a      	mov	r2, r7
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	f001 f82c 	bl	8006f70 <pxPortInitialiseStack>
 8005f18:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8005f1a:	f1b8 0f00 	cmp.w	r8, #0
 8005f1e:	d001      	beq.n	8005f24 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f20:	f8c8 4000 	str.w	r4, [r8]
}
 8005f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005f28 <prvAddNewTaskToReadyList>:
{
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005f2c:	f001 f84a 	bl	8006fc4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005f30:	4a30      	ldr	r2, [pc, #192]	; (8005ff4 <prvAddNewTaskToReadyList+0xcc>)
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f38:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <prvAddNewTaskToReadyList+0xd0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d034      	beq.n	8005faa <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 8005f40:	4b2e      	ldr	r3, [pc, #184]	; (8005ffc <prvAddNewTaskToReadyList+0xd4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	b93b      	cbnz	r3, 8005f56 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f46:	4b2c      	ldr	r3, [pc, #176]	; (8005ff8 <prvAddNewTaskToReadyList+0xd0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f4e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005f50:	bf9c      	itt	ls
 8005f52:	4b29      	ldrls	r3, [pc, #164]	; (8005ff8 <prvAddNewTaskToReadyList+0xd0>)
 8005f54:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 8005f56:	4a2a      	ldr	r2, [pc, #168]	; (8006000 <prvAddNewTaskToReadyList+0xd8>)
 8005f58:	6813      	ldr	r3, [r2, #0]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f5e:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005f60:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005f62:	4b28      	ldr	r3, [pc, #160]	; (8006004 <prvAddNewTaskToReadyList+0xdc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4298      	cmp	r0, r3
 8005f68:	bf84      	itt	hi
 8005f6a:	4b26      	ldrhi	r3, [pc, #152]	; (8006004 <prvAddNewTaskToReadyList+0xdc>)
 8005f6c:	6018      	strhi	r0, [r3, #0]
 8005f6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f72:	1d29      	adds	r1, r5, #4
 8005f74:	4b24      	ldr	r3, [pc, #144]	; (8006008 <prvAddNewTaskToReadyList+0xe0>)
 8005f76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f7a:	f7ff f9d3 	bl	8005324 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005f7e:	f001 f843 	bl	8007008 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005f82:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <prvAddNewTaskToReadyList+0xd4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	b17b      	cbz	r3, 8005fa8 <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f88:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <prvAddNewTaskToReadyList+0xd0>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d209      	bcs.n	8005fa8 <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 8005f94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	f3bf 8f6f 	isb	sy
}
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8005faa:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <prvAddNewTaskToReadyList+0xd0>)
 8005fac:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d1d0      	bne.n	8005f56 <prvAddNewTaskToReadyList+0x2e>
 8005fb4:	4c14      	ldr	r4, [pc, #80]	; (8006008 <prvAddNewTaskToReadyList+0xe0>)
 8005fb6:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7ff f9a4 	bl	8005308 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fc0:	3414      	adds	r4, #20
 8005fc2:	42b4      	cmp	r4, r6
 8005fc4:	d1f9      	bne.n	8005fba <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 8005fc6:	4e11      	ldr	r6, [pc, #68]	; (800600c <prvAddNewTaskToReadyList+0xe4>)
 8005fc8:	4630      	mov	r0, r6
 8005fca:	f7ff f99d 	bl	8005308 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fce:	4c10      	ldr	r4, [pc, #64]	; (8006010 <prvAddNewTaskToReadyList+0xe8>)
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff f999 	bl	8005308 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fd6:	480f      	ldr	r0, [pc, #60]	; (8006014 <prvAddNewTaskToReadyList+0xec>)
 8005fd8:	f7ff f996 	bl	8005308 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005fdc:	480e      	ldr	r0, [pc, #56]	; (8006018 <prvAddNewTaskToReadyList+0xf0>)
 8005fde:	f7ff f993 	bl	8005308 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005fe2:	480e      	ldr	r0, [pc, #56]	; (800601c <prvAddNewTaskToReadyList+0xf4>)
 8005fe4:	f7ff f990 	bl	8005308 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <prvAddNewTaskToReadyList+0xf8>)
 8005fea:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fec:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <prvAddNewTaskToReadyList+0xfc>)
 8005fee:	601c      	str	r4, [r3, #0]
}
 8005ff0:	e7b1      	b.n	8005f56 <prvAddNewTaskToReadyList+0x2e>
 8005ff2:	bf00      	nop
 8005ff4:	2000128c 	.word	0x2000128c
 8005ff8:	20000e20 	.word	0x20000e20
 8005ffc:	200012e8 	.word	0x200012e8
 8006000:	2000129c 	.word	0x2000129c
 8006004:	200012a0 	.word	0x200012a0
 8006008:	20000e2c 	.word	0x20000e2c
 800600c:	200012a4 	.word	0x200012a4
 8006010:	200012b8 	.word	0x200012b8
 8006014:	200012d4 	.word	0x200012d4
 8006018:	20001300 	.word	0x20001300
 800601c:	200012ec 	.word	0x200012ec
 8006020:	20000e24 	.word	0x20000e24
 8006024:	20000e28 	.word	0x20000e28

08006028 <prvDeleteTCB>:
	{
 8006028:	b510      	push	{r4, lr}
 800602a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800602c:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8006030:	b163      	cbz	r3, 800604c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006032:	2b01      	cmp	r3, #1
 8006034:	d011      	beq.n	800605a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006036:	2b02      	cmp	r3, #2
 8006038:	d00e      	beq.n	8006058 <prvDeleteTCB+0x30>
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	e7fe      	b.n	800604a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800604c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800604e:	f001 f999 	bl	8007384 <vPortFree>
				vPortFree( pxTCB );
 8006052:	4620      	mov	r0, r4
 8006054:	f001 f996 	bl	8007384 <vPortFree>
	}
 8006058:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800605a:	f001 f993 	bl	8007384 <vPortFree>
 800605e:	e7fb      	b.n	8006058 <prvDeleteTCB+0x30>

08006060 <prvIdleTask>:
{
 8006060:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006062:	4c15      	ldr	r4, [pc, #84]	; (80060b8 <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006064:	4f15      	ldr	r7, [pc, #84]	; (80060bc <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8006066:	4e16      	ldr	r6, [pc, #88]	; (80060c0 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006068:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80060c4 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	b1a3      	cbz	r3, 800609a <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8006070:	f000 ffa8 	bl	8006fc4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006078:	1d28      	adds	r0, r5, #4
 800607a:	f7ff f977 	bl	800536c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800607e:	6833      	ldr	r3, [r6, #0]
 8006080:	3b01      	subs	r3, #1
 8006082:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	3b01      	subs	r3, #1
 8006088:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800608a:	f000 ffbd 	bl	8007008 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800608e:	4628      	mov	r0, r5
 8006090:	f7ff ffca 	bl	8006028 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1ea      	bne.n	8006070 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800609a:	f8d8 3000 	ldr.w	r3, [r8]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d9e4      	bls.n	800606c <prvIdleTask+0xc>
				taskYIELD();
 80060a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	e7d9      	b.n	800606c <prvIdleTask+0xc>
 80060b8:	20001290 	.word	0x20001290
 80060bc:	20001300 	.word	0x20001300
 80060c0:	2000128c 	.word	0x2000128c
 80060c4:	20000e2c 	.word	0x20000e2c

080060c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060c8:	b570      	push	{r4, r5, r6, lr}
 80060ca:	4604      	mov	r4, r0
 80060cc:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <prvAddCurrentTaskToDelayedList+0x64>)
 80060d0:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d2:	4b17      	ldr	r3, [pc, #92]	; (8006130 <prvAddCurrentTaskToDelayedList+0x68>)
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	3004      	adds	r0, #4
 80060d8:	f7ff f948 	bl	800536c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80060e0:	d00d      	beq.n	80060fe <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e2:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <prvAddCurrentTaskToDelayedList+0x68>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80060ea:	42a6      	cmp	r6, r4
 80060ec:	d910      	bls.n	8006110 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ee:	4b11      	ldr	r3, [pc, #68]	; (8006134 <prvAddCurrentTaskToDelayedList+0x6c>)
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <prvAddCurrentTaskToDelayedList+0x68>)
 80060f4:	6819      	ldr	r1, [r3, #0]
 80060f6:	3104      	adds	r1, #4
 80060f8:	f7ff f91f 	bl	800533a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060fe:	2d00      	cmp	r5, #0
 8006100:	d0ef      	beq.n	80060e2 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006102:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <prvAddCurrentTaskToDelayedList+0x68>)
 8006104:	6819      	ldr	r1, [r3, #0]
 8006106:	3104      	adds	r1, #4
 8006108:	480b      	ldr	r0, [pc, #44]	; (8006138 <prvAddCurrentTaskToDelayedList+0x70>)
 800610a:	f7ff f90b 	bl	8005324 <vListInsertEnd>
 800610e:	e7f5      	b.n	80060fc <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <prvAddCurrentTaskToDelayedList+0x74>)
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	4b06      	ldr	r3, [pc, #24]	; (8006130 <prvAddCurrentTaskToDelayedList+0x68>)
 8006116:	6819      	ldr	r1, [r3, #0]
 8006118:	3104      	adds	r1, #4
 800611a:	f7ff f90e 	bl	800533a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800611e:	4b08      	ldr	r3, [pc, #32]	; (8006140 <prvAddCurrentTaskToDelayedList+0x78>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006124:	bf84      	itt	hi
 8006126:	4b06      	ldrhi	r3, [pc, #24]	; (8006140 <prvAddCurrentTaskToDelayedList+0x78>)
 8006128:	601c      	strhi	r4, [r3, #0]
}
 800612a:	e7e7      	b.n	80060fc <prvAddCurrentTaskToDelayedList+0x34>
 800612c:	20001314 	.word	0x20001314
 8006130:	20000e20 	.word	0x20000e20
 8006134:	20000e28 	.word	0x20000e28
 8006138:	200012ec 	.word	0x200012ec
 800613c:	20000e24 	.word	0x20000e24
 8006140:	200012cc 	.word	0x200012cc

08006144 <xTaskCreateStatic>:
	{
 8006144:	b530      	push	{r4, r5, lr}
 8006146:	b087      	sub	sp, #28
 8006148:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800614a:	b17c      	cbz	r4, 800616c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800614c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800614e:	b1b5      	cbz	r5, 800617e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006150:	255c      	movs	r5, #92	; 0x5c
 8006152:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006154:	9d04      	ldr	r5, [sp, #16]
 8006156:	2d5c      	cmp	r5, #92	; 0x5c
 8006158:	d01a      	beq.n	8006190 <xTaskCreateStatic+0x4c>
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	e7fe      	b.n	800616a <xTaskCreateStatic+0x26>
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800617c:	e7fe      	b.n	800617c <xTaskCreateStatic+0x38>
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800618e:	e7fe      	b.n	800618e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006190:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006192:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006194:	2402      	movs	r4, #2
 8006196:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800619a:	2400      	movs	r4, #0
 800619c:	9403      	str	r4, [sp, #12]
 800619e:	9502      	str	r5, [sp, #8]
 80061a0:	ac05      	add	r4, sp, #20
 80061a2:	9401      	str	r4, [sp, #4]
 80061a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061a6:	9400      	str	r4, [sp, #0]
 80061a8:	f7ff fe74 	bl	8005e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80061ae:	f7ff febb 	bl	8005f28 <prvAddNewTaskToReadyList>
	}
 80061b2:	9805      	ldr	r0, [sp, #20]
 80061b4:	b007      	add	sp, #28
 80061b6:	bd30      	pop	{r4, r5, pc}

080061b8 <xTaskCreate>:
	{
 80061b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061bc:	b085      	sub	sp, #20
 80061be:	4607      	mov	r7, r0
 80061c0:	4688      	mov	r8, r1
 80061c2:	4614      	mov	r4, r2
 80061c4:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c6:	0090      	lsls	r0, r2, #2
 80061c8:	f001 f846 	bl	8007258 <pvPortMalloc>
			if( pxStack != NULL )
 80061cc:	b308      	cbz	r0, 8006212 <xTaskCreate+0x5a>
 80061ce:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80061d0:	205c      	movs	r0, #92	; 0x5c
 80061d2:	f001 f841 	bl	8007258 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80061d6:	4605      	mov	r5, r0
 80061d8:	b1a8      	cbz	r0, 8006206 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80061da:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061de:	2300      	movs	r3, #0
 80061e0:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061e4:	9303      	str	r3, [sp, #12]
 80061e6:	9002      	str	r0, [sp, #8]
 80061e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	4633      	mov	r3, r6
 80061f2:	4622      	mov	r2, r4
 80061f4:	4641      	mov	r1, r8
 80061f6:	4638      	mov	r0, r7
 80061f8:	f7ff fe4c 	bl	8005e94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061fc:	4628      	mov	r0, r5
 80061fe:	f7ff fe93 	bl	8005f28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006202:	2001      	movs	r0, #1
 8006204:	e007      	b.n	8006216 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006206:	4648      	mov	r0, r9
 8006208:	f001 f8bc 	bl	8007384 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	e001      	b.n	8006216 <xTaskCreate+0x5e>
 8006212:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006216:	b005      	add	sp, #20
 8006218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800621c <vTaskStartScheduler>:
{
 800621c:	b510      	push	{r4, lr}
 800621e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006220:	2400      	movs	r4, #0
 8006222:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006224:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006226:	aa07      	add	r2, sp, #28
 8006228:	a906      	add	r1, sp, #24
 800622a:	a805      	add	r0, sp, #20
 800622c:	f7fe ff40 	bl	80050b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006230:	9b05      	ldr	r3, [sp, #20]
 8006232:	9302      	str	r3, [sp, #8]
 8006234:	9b06      	ldr	r3, [sp, #24]
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	9400      	str	r4, [sp, #0]
 800623a:	4623      	mov	r3, r4
 800623c:	9a07      	ldr	r2, [sp, #28]
 800623e:	4915      	ldr	r1, [pc, #84]	; (8006294 <vTaskStartScheduler+0x78>)
 8006240:	4815      	ldr	r0, [pc, #84]	; (8006298 <vTaskStartScheduler+0x7c>)
 8006242:	f7ff ff7f 	bl	8006144 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006246:	b310      	cbz	r0, 800628e <vTaskStartScheduler+0x72>
			xReturn = xTimerCreateTimerTask();
 8006248:	f000 fca6 	bl	8006b98 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800624c:	2801      	cmp	r0, #1
 800624e:	d00b      	beq.n	8006268 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006250:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006254:	d11b      	bne.n	800628e <vTaskStartScheduler+0x72>
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	e7fe      	b.n	8006266 <vTaskStartScheduler+0x4a>
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006278:	4b08      	ldr	r3, [pc, #32]	; (800629c <vTaskStartScheduler+0x80>)
 800627a:	f04f 32ff 	mov.w	r2, #4294967295
 800627e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <vTaskStartScheduler+0x84>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006286:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <vTaskStartScheduler+0x88>)
 8006288:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800628a:	f000 ff25 	bl	80070d8 <xPortStartScheduler>
}
 800628e:	b008      	add	sp, #32
 8006290:	bd10      	pop	{r4, pc}
 8006292:	bf00      	nop
 8006294:	08009164 	.word	0x08009164
 8006298:	08006061 	.word	0x08006061
 800629c:	200012cc 	.word	0x200012cc
 80062a0:	200012e8 	.word	0x200012e8
 80062a4:	20001314 	.word	0x20001314

080062a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80062a8:	4a02      	ldr	r2, [pc, #8]	; (80062b4 <vTaskSuspendAll+0xc>)
 80062aa:	6813      	ldr	r3, [r2, #0]
 80062ac:	3301      	adds	r3, #1
 80062ae:	6013      	str	r3, [r2, #0]
}
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20001298 	.word	0x20001298

080062b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80062b8:	4b01      	ldr	r3, [pc, #4]	; (80062c0 <xTaskGetTickCount+0x8>)
 80062ba:	6818      	ldr	r0, [r3, #0]
}
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20001314 	.word	0x20001314

080062c4 <xTaskIncrementTick>:
{
 80062c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c8:	4b40      	ldr	r3, [pc, #256]	; (80063cc <xTaskIncrementTick+0x108>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d170      	bne.n	80063b2 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062d0:	4b3f      	ldr	r3, [pc, #252]	; (80063d0 <xTaskIncrementTick+0x10c>)
 80062d2:	681e      	ldr	r6, [r3, #0]
 80062d4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80062d6:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062d8:	b9c6      	cbnz	r6, 800630c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 80062da:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <xTaskIncrementTick+0x110>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	b143      	cbz	r3, 80062f4 <xTaskIncrementTick+0x30>
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	e7fe      	b.n	80062f2 <xTaskIncrementTick+0x2e>
 80062f4:	4a37      	ldr	r2, [pc, #220]	; (80063d4 <xTaskIncrementTick+0x110>)
 80062f6:	6811      	ldr	r1, [r2, #0]
 80062f8:	4b37      	ldr	r3, [pc, #220]	; (80063d8 <xTaskIncrementTick+0x114>)
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	6010      	str	r0, [r2, #0]
 80062fe:	6019      	str	r1, [r3, #0]
 8006300:	4a36      	ldr	r2, [pc, #216]	; (80063dc <xTaskIncrementTick+0x118>)
 8006302:	6813      	ldr	r3, [r2, #0]
 8006304:	3301      	adds	r3, #1
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	f7ff fdae 	bl	8005e68 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800630c:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <xTaskIncrementTick+0x11c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	42b3      	cmp	r3, r6
 8006312:	d841      	bhi.n	8006398 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006314:	4b2f      	ldr	r3, [pc, #188]	; (80063d4 <xTaskIncrementTick+0x110>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	b13b      	cbz	r3, 800632c <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 800631c:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800631e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80063d4 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8006322:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80063e4 <xTaskIncrementTick+0x120>
 8006326:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80063e8 <xTaskIncrementTick+0x124>
 800632a:	e022      	b.n	8006372 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 800632c:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800632e:	4b2c      	ldr	r3, [pc, #176]	; (80063e0 <xTaskIncrementTick+0x11c>)
 8006330:	f04f 32ff 	mov.w	r2, #4294967295
 8006334:	601a      	str	r2, [r3, #0]
					break;
 8006336:	e030      	b.n	800639a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8006338:	4a29      	ldr	r2, [pc, #164]	; (80063e0 <xTaskIncrementTick+0x11c>)
 800633a:	6013      	str	r3, [r2, #0]
						break;
 800633c:	e02d      	b.n	800639a <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 800633e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006340:	f8d9 3000 	ldr.w	r3, [r9]
 8006344:	4298      	cmp	r0, r3
 8006346:	bf88      	it	hi
 8006348:	f8c9 0000 	strhi.w	r0, [r9]
 800634c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006350:	4639      	mov	r1, r7
 8006352:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006356:	f7fe ffe5 	bl	8005324 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800635a:	4b24      	ldr	r3, [pc, #144]	; (80063ec <xTaskIncrementTick+0x128>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006362:	429a      	cmp	r2, r3
 8006364:	bf28      	it	cs
 8006366:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006368:	f8d8 3000 	ldr.w	r3, [r8]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0dd      	beq.n	800632e <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006372:	f8d8 3000 	ldr.w	r3, [r8]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800637a:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800637c:	429e      	cmp	r6, r3
 800637e:	d3db      	bcc.n	8006338 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006380:	1d27      	adds	r7, r4, #4
 8006382:	4638      	mov	r0, r7
 8006384:	f7fe fff2 	bl	800536c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006388:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0d7      	beq.n	800633e <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800638e:	f104 0018 	add.w	r0, r4, #24
 8006392:	f7fe ffeb 	bl	800536c <uxListRemove>
 8006396:	e7d2      	b.n	800633e <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8006398:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800639a:	4b14      	ldr	r3, [pc, #80]	; (80063ec <xTaskIncrementTick+0x128>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4a10      	ldr	r2, [pc, #64]	; (80063e8 <xTaskIncrementTick+0x124>)
 80063a8:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	bf28      	it	cs
 80063ae:	2501      	movcs	r5, #1
 80063b0:	e004      	b.n	80063bc <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 80063b2:	4a0f      	ldr	r2, [pc, #60]	; (80063f0 <xTaskIncrementTick+0x12c>)
 80063b4:	6813      	ldr	r3, [r2, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80063ba:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <xTaskIncrementTick+0x130>)
 80063be:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80063c0:	2b00      	cmp	r3, #0
}
 80063c2:	bf0c      	ite	eq
 80063c4:	4628      	moveq	r0, r5
 80063c6:	2001      	movne	r0, #1
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	20001298 	.word	0x20001298
 80063d0:	20001314 	.word	0x20001314
 80063d4:	20000e24 	.word	0x20000e24
 80063d8:	20000e28 	.word	0x20000e28
 80063dc:	200012d0 	.word	0x200012d0
 80063e0:	200012cc 	.word	0x200012cc
 80063e4:	200012a0 	.word	0x200012a0
 80063e8:	20000e2c 	.word	0x20000e2c
 80063ec:	20000e20 	.word	0x20000e20
 80063f0:	20001294 	.word	0x20001294
 80063f4:	20001318 	.word	0x20001318

080063f8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80063f8:	4b38      	ldr	r3, [pc, #224]	; (80064dc <xTaskResumeAll+0xe4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	b943      	cbnz	r3, 8006410 <xTaskResumeAll+0x18>
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	e7fe      	b.n	800640e <xTaskResumeAll+0x16>
{
 8006410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006414:	f000 fdd6 	bl	8006fc4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006418:	4b30      	ldr	r3, [pc, #192]	; (80064dc <xTaskResumeAll+0xe4>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	3a01      	subs	r2, #1
 800641e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d149      	bne.n	80064ba <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006426:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <xTaskResumeAll+0xe8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d04b      	beq.n	80064c6 <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800642e:	4b2d      	ldr	r3, [pc, #180]	; (80064e4 <xTaskResumeAll+0xec>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d04b      	beq.n	80064ce <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006436:	4e2b      	ldr	r6, [pc, #172]	; (80064e4 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8006438:	4f2b      	ldr	r7, [pc, #172]	; (80064e8 <xTaskResumeAll+0xf0>)
 800643a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80064ec <xTaskResumeAll+0xf4>
 800643e:	e002      	b.n	8006446 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d041      	beq.n	80064ca <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006446:	68f3      	ldr	r3, [r6, #12]
 8006448:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800644a:	f104 0018 	add.w	r0, r4, #24
 800644e:	f7fe ff8d 	bl	800536c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006452:	1d25      	adds	r5, r4, #4
 8006454:	4628      	mov	r0, r5
 8006456:	f7fe ff89 	bl	800536c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800645a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	4298      	cmp	r0, r3
 8006460:	bf88      	it	hi
 8006462:	6038      	strhi	r0, [r7, #0]
 8006464:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006468:	4629      	mov	r1, r5
 800646a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800646e:	f7fe ff59 	bl	8005324 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006472:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <xTaskResumeAll+0xf8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	429a      	cmp	r2, r3
 800647c:	d3e0      	bcc.n	8006440 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 800647e:	4b1d      	ldr	r3, [pc, #116]	; (80064f4 <xTaskResumeAll+0xfc>)
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e7dc      	b.n	8006440 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006486:	3c01      	subs	r4, #1
 8006488:	d005      	beq.n	8006496 <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 800648a:	f7ff ff1b 	bl	80062c4 <xTaskIncrementTick>
 800648e:	2800      	cmp	r0, #0
 8006490:	d0f9      	beq.n	8006486 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8006492:	6035      	str	r5, [r6, #0]
 8006494:	e7f7      	b.n	8006486 <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 8006496:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <xTaskResumeAll+0x100>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800649c:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <xTaskResumeAll+0xfc>)
 800649e:	681c      	ldr	r4, [r3, #0]
 80064a0:	b164      	cbz	r4, 80064bc <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 80064a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80064a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80064b6:	2401      	movs	r4, #1
 80064b8:	e000      	b.n	80064bc <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 80064ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80064bc:	f000 fda4 	bl	8007008 <vPortExitCritical>
}
 80064c0:	4620      	mov	r0, r4
 80064c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 80064c6:	2400      	movs	r4, #0
 80064c8:	e7f8      	b.n	80064bc <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 80064ca:	f7ff fccd 	bl	8005e68 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <xTaskResumeAll+0x100>)
 80064d0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064d2:	2c00      	cmp	r4, #0
 80064d4:	d0e2      	beq.n	800649c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80064d6:	4e07      	ldr	r6, [pc, #28]	; (80064f4 <xTaskResumeAll+0xfc>)
 80064d8:	2501      	movs	r5, #1
 80064da:	e7d6      	b.n	800648a <xTaskResumeAll+0x92>
 80064dc:	20001298 	.word	0x20001298
 80064e0:	2000128c 	.word	0x2000128c
 80064e4:	200012d4 	.word	0x200012d4
 80064e8:	200012a0 	.word	0x200012a0
 80064ec:	20000e2c 	.word	0x20000e2c
 80064f0:	20000e20 	.word	0x20000e20
 80064f4:	20001318 	.word	0x20001318
 80064f8:	20001294 	.word	0x20001294

080064fc <vTaskDelayUntil>:
	{
 80064fc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 80064fe:	b158      	cbz	r0, 8006518 <vTaskDelayUntil+0x1c>
 8006500:	460c      	mov	r4, r1
 8006502:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8006504:	b989      	cbnz	r1, 800652a <vTaskDelayUntil+0x2e>
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	e7fe      	b.n	8006516 <vTaskDelayUntil+0x1a>
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8006528:	e7fe      	b.n	8006528 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 800652a:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <vTaskDelayUntil+0x98>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	b143      	cbz	r3, 8006542 <vTaskDelayUntil+0x46>
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	e7fe      	b.n	8006540 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 8006542:	f7ff feb1 	bl	80062a8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <vTaskDelayUntil+0x9c>)
 8006548:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 800654e:	4283      	cmp	r3, r0
 8006550:	d907      	bls.n	8006562 <vTaskDelayUntil+0x66>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006552:	42a3      	cmp	r3, r4
 8006554:	d801      	bhi.n	800655a <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 8006556:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006558:	e00e      	b.n	8006578 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800655a:	42a0      	cmp	r0, r4
 800655c:	d307      	bcc.n	800656e <vTaskDelayUntil+0x72>
			*pxPreviousWakeTime = xTimeToWake;
 800655e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006560:	e00a      	b.n	8006578 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006562:	42a3      	cmp	r3, r4
 8006564:	d803      	bhi.n	800656e <vTaskDelayUntil+0x72>
 8006566:	42a0      	cmp	r0, r4
 8006568:	d301      	bcc.n	800656e <vTaskDelayUntil+0x72>
			*pxPreviousWakeTime = xTimeToWake;
 800656a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800656c:	e004      	b.n	8006578 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 800656e:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006570:	2100      	movs	r1, #0
 8006572:	1a20      	subs	r0, r4, r0
 8006574:	f7ff fda8 	bl	80060c8 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8006578:	f7ff ff3e 	bl	80063f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800657c:	b948      	cbnz	r0, 8006592 <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 800657e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006586:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	f3bf 8f6f 	isb	sy
	}
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20001298 	.word	0x20001298
 8006598:	20001314 	.word	0x20001314

0800659c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800659c:	4b22      	ldr	r3, [pc, #136]	; (8006628 <vTaskSwitchContext+0x8c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	b11b      	cbz	r3, 80065aa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80065a2:	4b22      	ldr	r3, [pc, #136]	; (800662c <vTaskSwitchContext+0x90>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80065aa:	4b20      	ldr	r3, [pc, #128]	; (800662c <vTaskSwitchContext+0x90>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065b0:	4b1f      	ldr	r3, [pc, #124]	; (8006630 <vTaskSwitchContext+0x94>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80065b8:	0092      	lsls	r2, r2, #2
 80065ba:	491e      	ldr	r1, [pc, #120]	; (8006634 <vTaskSwitchContext+0x98>)
 80065bc:	588a      	ldr	r2, [r1, r2]
 80065be:	b98a      	cbnz	r2, 80065e4 <vTaskSwitchContext+0x48>
 80065c0:	b13b      	cbz	r3, 80065d2 <vTaskSwitchContext+0x36>
 80065c2:	3b01      	subs	r3, #1
 80065c4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80065c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80065cc:	b952      	cbnz	r2, 80065e4 <vTaskSwitchContext+0x48>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f7      	bne.n	80065c2 <vTaskSwitchContext+0x26>
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	e7fe      	b.n	80065e2 <vTaskSwitchContext+0x46>
 80065e4:	4a13      	ldr	r2, [pc, #76]	; (8006634 <vTaskSwitchContext+0x98>)
 80065e6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80065ea:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80065ee:	6848      	ldr	r0, [r1, #4]
 80065f0:	6840      	ldr	r0, [r0, #4]
 80065f2:	6048      	str	r0, [r1, #4]
 80065f4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80065f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80065fc:	3208      	adds	r2, #8
 80065fe:	4290      	cmp	r0, r2
 8006600:	d00b      	beq.n	800661a <vTaskSwitchContext+0x7e>
 8006602:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006606:	4a0b      	ldr	r2, [pc, #44]	; (8006634 <vTaskSwitchContext+0x98>)
 8006608:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800660c:	6852      	ldr	r2, [r2, #4]
 800660e:	68d1      	ldr	r1, [r2, #12]
 8006610:	4a09      	ldr	r2, [pc, #36]	; (8006638 <vTaskSwitchContext+0x9c>)
 8006612:	6011      	str	r1, [r2, #0]
 8006614:	4a06      	ldr	r2, [pc, #24]	; (8006630 <vTaskSwitchContext+0x94>)
 8006616:	6013      	str	r3, [r2, #0]
}
 8006618:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800661a:	6840      	ldr	r0, [r0, #4]
 800661c:	4a05      	ldr	r2, [pc, #20]	; (8006634 <vTaskSwitchContext+0x98>)
 800661e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006622:	6050      	str	r0, [r2, #4]
 8006624:	e7ed      	b.n	8006602 <vTaskSwitchContext+0x66>
 8006626:	bf00      	nop
 8006628:	20001298 	.word	0x20001298
 800662c:	20001318 	.word	0x20001318
 8006630:	200012a0 	.word	0x200012a0
 8006634:	20000e2c 	.word	0x20000e2c
 8006638:	20000e20 	.word	0x20000e20

0800663c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800663c:	b158      	cbz	r0, 8006656 <vTaskPlaceOnEventList+0x1a>
{
 800663e:	b510      	push	{r4, lr}
 8006640:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006642:	4a09      	ldr	r2, [pc, #36]	; (8006668 <vTaskPlaceOnEventList+0x2c>)
 8006644:	6811      	ldr	r1, [r2, #0]
 8006646:	3118      	adds	r1, #24
 8006648:	f7fe fe77 	bl	800533a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800664c:	2101      	movs	r1, #1
 800664e:	4620      	mov	r0, r4
 8006650:	f7ff fd3a 	bl	80060c8 <prvAddCurrentTaskToDelayedList>
}
 8006654:	bd10      	pop	{r4, pc}
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006666:	e7fe      	b.n	8006666 <vTaskPlaceOnEventList+0x2a>
 8006668:	20000e20 	.word	0x20000e20

0800666c <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 800666c:	b170      	cbz	r0, 800668c <vTaskPlaceOnUnorderedEventList+0x20>
{
 800666e:	b510      	push	{r4, lr}
 8006670:	4614      	mov	r4, r2
 8006672:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8006674:	4b11      	ldr	r3, [pc, #68]	; (80066bc <vTaskPlaceOnUnorderedEventList+0x50>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	b98b      	cbnz	r3, 800669e <vTaskPlaceOnUnorderedEventList+0x32>
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	e7fe      	b.n	800668a <vTaskPlaceOnUnorderedEventList+0x1e>
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800669c:	e7fe      	b.n	800669c <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <vTaskPlaceOnUnorderedEventList+0x54>)
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80066a6:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066a8:	6819      	ldr	r1, [r3, #0]
 80066aa:	3118      	adds	r1, #24
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7fe fe39 	bl	8005324 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066b2:	2101      	movs	r1, #1
 80066b4:	4620      	mov	r0, r4
 80066b6:	f7ff fd07 	bl	80060c8 <prvAddCurrentTaskToDelayedList>
}
 80066ba:	bd10      	pop	{r4, pc}
 80066bc:	20001298 	.word	0x20001298
 80066c0:	20000e20 	.word	0x20000e20

080066c4 <vTaskPlaceOnEventListRestricted>:
	{
 80066c4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80066c6:	b178      	cbz	r0, 80066e8 <vTaskPlaceOnEventListRestricted+0x24>
 80066c8:	460d      	mov	r5, r1
 80066ca:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066cc:	4a0b      	ldr	r2, [pc, #44]	; (80066fc <vTaskPlaceOnEventListRestricted+0x38>)
 80066ce:	6811      	ldr	r1, [r2, #0]
 80066d0:	3118      	adds	r1, #24
 80066d2:	f7fe fe27 	bl	8005324 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80066d6:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066d8:	4621      	mov	r1, r4
 80066da:	bf0c      	ite	eq
 80066dc:	4628      	moveq	r0, r5
 80066de:	f04f 30ff 	movne.w	r0, #4294967295
 80066e2:	f7ff fcf1 	bl	80060c8 <prvAddCurrentTaskToDelayedList>
	}
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80066f8:	e7fe      	b.n	80066f8 <vTaskPlaceOnEventListRestricted+0x34>
 80066fa:	bf00      	nop
 80066fc:	20000e20 	.word	0x20000e20

08006700 <xTaskRemoveFromEventList>:
{
 8006700:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006702:	68c3      	ldr	r3, [r0, #12]
 8006704:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006706:	b32c      	cbz	r4, 8006754 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006708:	f104 0518 	add.w	r5, r4, #24
 800670c:	4628      	mov	r0, r5
 800670e:	f7fe fe2d 	bl	800536c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006712:	4b17      	ldr	r3, [pc, #92]	; (8006770 <xTaskRemoveFromEventList+0x70>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	bb33      	cbnz	r3, 8006766 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006718:	1d25      	adds	r5, r4, #4
 800671a:	4628      	mov	r0, r5
 800671c:	f7fe fe26 	bl	800536c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006720:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006722:	4b14      	ldr	r3, [pc, #80]	; (8006774 <xTaskRemoveFromEventList+0x74>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4298      	cmp	r0, r3
 8006728:	bf84      	itt	hi
 800672a:	4b12      	ldrhi	r3, [pc, #72]	; (8006774 <xTaskRemoveFromEventList+0x74>)
 800672c:	6018      	strhi	r0, [r3, #0]
 800672e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006732:	4629      	mov	r1, r5
 8006734:	4b10      	ldr	r3, [pc, #64]	; (8006778 <xTaskRemoveFromEventList+0x78>)
 8006736:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800673a:	f7fe fdf3 	bl	8005324 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <xTaskRemoveFromEventList+0x7c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006748:	bf83      	ittte	hi
 800674a:	2001      	movhi	r0, #1
 800674c:	4b0c      	ldrhi	r3, [pc, #48]	; (8006780 <xTaskRemoveFromEventList+0x80>)
 800674e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006750:	2000      	movls	r0, #0
}
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006764:	e7fe      	b.n	8006764 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006766:	4629      	mov	r1, r5
 8006768:	4806      	ldr	r0, [pc, #24]	; (8006784 <xTaskRemoveFromEventList+0x84>)
 800676a:	f7fe fddb 	bl	8005324 <vListInsertEnd>
 800676e:	e7e6      	b.n	800673e <xTaskRemoveFromEventList+0x3e>
 8006770:	20001298 	.word	0x20001298
 8006774:	200012a0 	.word	0x200012a0
 8006778:	20000e2c 	.word	0x20000e2c
 800677c:	20000e20 	.word	0x20000e20
 8006780:	20001318 	.word	0x20001318
 8006784:	200012d4 	.word	0x200012d4

08006788 <vTaskRemoveFromUnorderedEventList>:
{
 8006788:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800678a:	4b1c      	ldr	r3, [pc, #112]	; (80067fc <vTaskRemoveFromUnorderedEventList+0x74>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	b943      	cbnz	r3, 80067a2 <vTaskRemoveFromUnorderedEventList+0x1a>
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	e7fe      	b.n	80067a0 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80067a2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80067a6:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80067a8:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 80067aa:	b1f4      	cbz	r4, 80067ea <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 80067ac:	f7fe fdde 	bl	800536c <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067b0:	1d25      	adds	r5, r4, #4
 80067b2:	4628      	mov	r0, r5
 80067b4:	f7fe fdda 	bl	800536c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80067b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <vTaskRemoveFromUnorderedEventList+0x78>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4298      	cmp	r0, r3
 80067c0:	bf84      	itt	hi
 80067c2:	4b0f      	ldrhi	r3, [pc, #60]	; (8006800 <vTaskRemoveFromUnorderedEventList+0x78>)
 80067c4:	6018      	strhi	r0, [r3, #0]
 80067c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80067ca:	4629      	mov	r1, r5
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <vTaskRemoveFromUnorderedEventList+0x7c>)
 80067ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067d2:	f7fe fda7 	bl	8005324 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <vTaskRemoveFromUnorderedEventList+0x80>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	429a      	cmp	r2, r3
 80067e0:	d902      	bls.n	80067e8 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <vTaskRemoveFromUnorderedEventList+0x84>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
}
 80067e8:	bd38      	pop	{r3, r4, r5, pc}
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80067fa:	e7fe      	b.n	80067fa <vTaskRemoveFromUnorderedEventList+0x72>
 80067fc:	20001298 	.word	0x20001298
 8006800:	200012a0 	.word	0x200012a0
 8006804:	20000e2c 	.word	0x20000e2c
 8006808:	20000e20 	.word	0x20000e20
 800680c:	20001318 	.word	0x20001318

08006810 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006810:	4b03      	ldr	r3, [pc, #12]	; (8006820 <vTaskInternalSetTimeOutState+0x10>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006816:	4b03      	ldr	r3, [pc, #12]	; (8006824 <vTaskInternalSetTimeOutState+0x14>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6043      	str	r3, [r0, #4]
}
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	200012d0 	.word	0x200012d0
 8006824:	20001314 	.word	0x20001314

08006828 <xTaskCheckForTimeOut>:
{
 8006828:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 800682a:	b1d0      	cbz	r0, 8006862 <xTaskCheckForTimeOut+0x3a>
 800682c:	460c      	mov	r4, r1
 800682e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006830:	b301      	cbz	r1, 8006874 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8006832:	f000 fbc7 	bl	8006fc4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006836:	4b1b      	ldr	r3, [pc, #108]	; (80068a4 <xTaskCheckForTimeOut+0x7c>)
 8006838:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d029      	beq.n	8006896 <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006842:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006844:	4818      	ldr	r0, [pc, #96]	; (80068a8 <xTaskCheckForTimeOut+0x80>)
 8006846:	6800      	ldr	r0, [r0, #0]
 8006848:	f8d5 c000 	ldr.w	ip, [r5]
 800684c:	4584      	cmp	ip, r0
 800684e:	d001      	beq.n	8006854 <xTaskCheckForTimeOut+0x2c>
 8006850:	4291      	cmp	r1, r2
 8006852:	d925      	bls.n	80068a0 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006854:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006856:	4283      	cmp	r3, r0
 8006858:	d815      	bhi.n	8006886 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800685e:	2401      	movs	r4, #1
 8006860:	e01a      	b.n	8006898 <xTaskCheckForTimeOut+0x70>
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006872:	e7fe      	b.n	8006872 <xTaskCheckForTimeOut+0x4a>
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006884:	e7fe      	b.n	8006884 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	440b      	add	r3, r1
 800688a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800688c:	4628      	mov	r0, r5
 800688e:	f7ff ffbf 	bl	8006810 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006892:	2400      	movs	r4, #0
 8006894:	e000      	b.n	8006898 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8006896:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006898:	f000 fbb6 	bl	8007008 <vPortExitCritical>
}
 800689c:	4620      	mov	r0, r4
 800689e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80068a0:	2401      	movs	r4, #1
 80068a2:	e7f9      	b.n	8006898 <xTaskCheckForTimeOut+0x70>
 80068a4:	20001314 	.word	0x20001314
 80068a8:	200012d0 	.word	0x200012d0

080068ac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80068ac:	4b01      	ldr	r3, [pc, #4]	; (80068b4 <vTaskMissedYield+0x8>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	601a      	str	r2, [r3, #0]
}
 80068b2:	4770      	bx	lr
 80068b4:	20001318 	.word	0x20001318

080068b8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80068b8:	4b01      	ldr	r3, [pc, #4]	; (80068c0 <xTaskGetCurrentTaskHandle+0x8>)
 80068ba:	6818      	ldr	r0, [r3, #0]
	}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000e20 	.word	0x20000e20

080068c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <xTaskGetSchedulerState+0x18>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	b133      	cbz	r3, 80068d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ca:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <xTaskGetSchedulerState+0x1c>)
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	fab0 f080 	clz	r0, r0
 80068d2:	0940      	lsrs	r0, r0, #5
 80068d4:	0040      	lsls	r0, r0, #1
 80068d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068d8:	2001      	movs	r0, #1
	}
 80068da:	4770      	bx	lr
 80068dc:	200012e8 	.word	0x200012e8
 80068e0:	20001298 	.word	0x20001298

080068e4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d040      	beq.n	800696a <xTaskPriorityInherit+0x86>
	{
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80068ee:	4a20      	ldr	r2, [pc, #128]	; (8006970 <xTaskPriorityInherit+0x8c>)
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d22f      	bcs.n	8006958 <xTaskPriorityInherit+0x74>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068f8:	6982      	ldr	r2, [r0, #24]
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	db05      	blt.n	800690a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068fe:	4a1c      	ldr	r2, [pc, #112]	; (8006970 <xTaskPriorityInherit+0x8c>)
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006904:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006908:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800690a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800690e:	4a19      	ldr	r2, [pc, #100]	; (8006974 <xTaskPriorityInherit+0x90>)
 8006910:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006914:	6962      	ldr	r2, [r4, #20]
 8006916:	429a      	cmp	r2, r3
 8006918:	d005      	beq.n	8006926 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800691a:	4b15      	ldr	r3, [pc, #84]	; (8006970 <xTaskPriorityInherit+0x8c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8006922:	2001      	movs	r0, #1
 8006924:	e020      	b.n	8006968 <xTaskPriorityInherit+0x84>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006926:	1d25      	adds	r5, r4, #4
 8006928:	4628      	mov	r0, r5
 800692a:	f7fe fd1f 	bl	800536c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800692e:	4b10      	ldr	r3, [pc, #64]	; (8006970 <xTaskPriorityInherit+0x8c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006934:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <xTaskPriorityInherit+0x94>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4298      	cmp	r0, r3
 800693c:	d809      	bhi.n	8006952 <xTaskPriorityInherit+0x6e>
 800693e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006942:	4629      	mov	r1, r5
 8006944:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <xTaskPriorityInherit+0x90>)
 8006946:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800694a:	f7fe fceb 	bl	8005324 <vListInsertEnd>
				xReturn = pdTRUE;
 800694e:	2001      	movs	r0, #1
 8006950:	e00a      	b.n	8006968 <xTaskPriorityInherit+0x84>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <xTaskPriorityInherit+0x94>)
 8006954:	6018      	str	r0, [r3, #0]
 8006956:	e7f2      	b.n	800693e <xTaskPriorityInherit+0x5a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006958:	4b05      	ldr	r3, [pc, #20]	; (8006970 <xTaskPriorityInherit+0x8c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	4298      	cmp	r0, r3
 8006962:	bf2c      	ite	cs
 8006964:	2000      	movcs	r0, #0
 8006966:	2001      	movcc	r0, #1
	}
 8006968:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800696a:	2000      	movs	r0, #0
	}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20000e20 	.word	0x20000e20
 8006974:	20000e2c 	.word	0x20000e2c
 8006978:	200012a0 	.word	0x200012a0

0800697c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800697c:	2800      	cmp	r0, #0
 800697e:	d03b      	beq.n	80069f8 <xTaskPriorityDisinherit+0x7c>
	{
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006984:	4b1e      	ldr	r3, [pc, #120]	; (8006a00 <xTaskPriorityDisinherit+0x84>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4283      	cmp	r3, r0
 800698a:	d008      	beq.n	800699e <xTaskPriorityDisinherit+0x22>
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	e7fe      	b.n	800699c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800699e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80069a0:	b943      	cbnz	r3, 80069b4 <xTaskPriorityDisinherit+0x38>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	e7fe      	b.n	80069b2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80069b4:	3b01      	subs	r3, #1
 80069b6:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069b8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80069ba:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80069bc:	4291      	cmp	r1, r2
 80069be:	d01d      	beq.n	80069fc <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069c0:	b10b      	cbz	r3, 80069c6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80069c2:	2000      	movs	r0, #0
	}
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069c6:	1d05      	adds	r5, r0, #4
 80069c8:	4628      	mov	r0, r5
 80069ca:	f7fe fccf 	bl	800536c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069ce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80069d0:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d2:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 80069d6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <xTaskPriorityDisinherit+0x88>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4298      	cmp	r0, r3
 80069de:	bf84      	itt	hi
 80069e0:	4b08      	ldrhi	r3, [pc, #32]	; (8006a04 <xTaskPriorityDisinherit+0x88>)
 80069e2:	6018      	strhi	r0, [r3, #0]
 80069e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069e8:	4629      	mov	r1, r5
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <xTaskPriorityDisinherit+0x8c>)
 80069ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80069f0:	f7fe fc98 	bl	8005324 <vListInsertEnd>
					xReturn = pdTRUE;
 80069f4:	2001      	movs	r0, #1
 80069f6:	e7e5      	b.n	80069c4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80069f8:	2000      	movs	r0, #0
	}
 80069fa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80069fc:	2000      	movs	r0, #0
 80069fe:	e7e1      	b.n	80069c4 <xTaskPriorityDisinherit+0x48>
 8006a00:	20000e20 	.word	0x20000e20
 8006a04:	200012a0 	.word	0x200012a0
 8006a08:	20000e2c 	.word	0x20000e2c

08006a0c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d046      	beq.n	8006a9e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8006a14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006a16:	b943      	cbnz	r3, 8006a2a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	e7fe      	b.n	8006a28 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006a2a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8006a2c:	4291      	cmp	r1, r2
 8006a2e:	bf38      	it	cc
 8006a30:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006a32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8006a34:	428a      	cmp	r2, r1
 8006a36:	d001      	beq.n	8006a3c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d000      	beq.n	8006a3e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8006a3c:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8006a3e:	4b18      	ldr	r3, [pc, #96]	; (8006aa0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4283      	cmp	r3, r0
 8006a44:	d022      	beq.n	8006a8c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8006a46:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a48:	6983      	ldr	r3, [r0, #24]
 8006a4a:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4c:	bfa4      	itt	ge
 8006a4e:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 8006a52:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a54:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006a58:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006a5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006a5e:	6942      	ldr	r2, [r0, #20]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d1eb      	bne.n	8006a3c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a64:	1d05      	adds	r5, r0, #4
 8006a66:	4628      	mov	r0, r5
 8006a68:	f7fe fc80 	bl	800536c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8006a6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006a6e:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4298      	cmp	r0, r3
 8006a74:	bf84      	itt	hi
 8006a76:	4b0c      	ldrhi	r3, [pc, #48]	; (8006aa8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8006a78:	6018      	strhi	r0, [r3, #0]
 8006a7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006a82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a86:	f7fe fc4d 	bl	8005324 <vListInsertEnd>
	}
 8006a8a:	e7d7      	b.n	8006a3c <vTaskPriorityDisinheritAfterTimeout+0x30>
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8006a9c:	e7fe      	b.n	8006a9c <vTaskPriorityDisinheritAfterTimeout+0x90>
 8006a9e:	4770      	bx	lr
 8006aa0:	20000e20 	.word	0x20000e20
 8006aa4:	20000e2c 	.word	0x20000e2c
 8006aa8:	200012a0 	.word	0x200012a0

08006aac <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <uxTaskResetEventItemValue+0x14>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006ab8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006abc:	6193      	str	r3, [r2, #24]
}
 8006abe:	4770      	bx	lr
 8006ac0:	20000e20 	.word	0x20000e20

08006ac4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006ac4:	4b05      	ldr	r3, [pc, #20]	; (8006adc <pvTaskIncrementMutexHeldCount+0x18>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	b123      	cbz	r3, 8006ad4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006aca:	4b04      	ldr	r3, [pc, #16]	; (8006adc <pvTaskIncrementMutexHeldCount+0x18>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8006ad4:	4b01      	ldr	r3, [pc, #4]	; (8006adc <pvTaskIncrementMutexHeldCount+0x18>)
 8006ad6:	6818      	ldr	r0, [r3, #0]
	}
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000e20 	.word	0x20000e20

08006ae0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ae0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ae2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ae4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d80c      	bhi.n	8006b04 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	6983      	ldr	r3, [r0, #24]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d301      	bcc.n	8006af6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006af2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8006af4:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006af6:	1d01      	adds	r1, r0, #4
 8006af8:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <prvInsertTimerInActiveList+0x40>)
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	f7fe fc1d 	bl	800533a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006b00:	2000      	movs	r0, #0
 8006b02:	e7f7      	b.n	8006af4 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d201      	bcs.n	8006b0c <prvInsertTimerInActiveList+0x2c>
 8006b08:	4299      	cmp	r1, r3
 8006b0a:	d206      	bcs.n	8006b1a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b0c:	1d01      	adds	r1, r0, #4
 8006b0e:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <prvInsertTimerInActiveList+0x44>)
 8006b10:	6818      	ldr	r0, [r3, #0]
 8006b12:	f7fe fc12 	bl	800533a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006b16:	2000      	movs	r0, #0
 8006b18:	e7ec      	b.n	8006af4 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8006b1a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006b1c:	e7ea      	b.n	8006af4 <prvInsertTimerInActiveList+0x14>
 8006b1e:	bf00      	nop
 8006b20:	20001320 	.word	0x20001320
 8006b24:	2000131c 	.word	0x2000131c

08006b28 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b28:	b530      	push	{r4, r5, lr}
 8006b2a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b2c:	f000 fa4a 	bl	8006fc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b30:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <prvCheckForValidListAndQueue+0x50>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	b11b      	cbz	r3, 8006b3e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b36:	f000 fa67 	bl	8007008 <vPortExitCritical>
}
 8006b3a:	b003      	add	sp, #12
 8006b3c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006b3e:	4d0f      	ldr	r5, [pc, #60]	; (8006b7c <prvCheckForValidListAndQueue+0x54>)
 8006b40:	4628      	mov	r0, r5
 8006b42:	f7fe fbe1 	bl	8005308 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b46:	4c0e      	ldr	r4, [pc, #56]	; (8006b80 <prvCheckForValidListAndQueue+0x58>)
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7fe fbdd 	bl	8005308 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <prvCheckForValidListAndQueue+0x5c>)
 8006b50:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b54:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b56:	2300      	movs	r3, #0
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b5c:	4a0c      	ldr	r2, [pc, #48]	; (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b5e:	2110      	movs	r1, #16
 8006b60:	200a      	movs	r0, #10
 8006b62:	f7fe fcea 	bl	800553a <xQueueGenericCreateStatic>
 8006b66:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <prvCheckForValidListAndQueue+0x50>)
 8006b68:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d0e3      	beq.n	8006b36 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b6e:	4909      	ldr	r1, [pc, #36]	; (8006b94 <prvCheckForValidListAndQueue+0x6c>)
 8006b70:	f7ff f912 	bl	8005d98 <vQueueAddToRegistry>
 8006b74:	e7df      	b.n	8006b36 <prvCheckForValidListAndQueue+0xe>
 8006b76:	bf00      	nop
 8006b78:	20001440 	.word	0x20001440
 8006b7c:	200013c4 	.word	0x200013c4
 8006b80:	200013d8 	.word	0x200013d8
 8006b84:	2000131c 	.word	0x2000131c
 8006b88:	20001320 	.word	0x20001320
 8006b8c:	200013f0 	.word	0x200013f0
 8006b90:	20001324 	.word	0x20001324
 8006b94:	0800916c 	.word	0x0800916c

08006b98 <xTimerCreateTimerTask>:
{
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006b9c:	f7ff ffc4 	bl	8006b28 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006ba0:	4b12      	ldr	r3, [pc, #72]	; (8006bec <xTimerCreateTimerTask+0x54>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	b1cb      	cbz	r3, 8006bda <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006baa:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bac:	aa07      	add	r2, sp, #28
 8006bae:	a906      	add	r1, sp, #24
 8006bb0:	a805      	add	r0, sp, #20
 8006bb2:	f7fe fa89 	bl	80050c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bb6:	9b05      	ldr	r3, [sp, #20]
 8006bb8:	9302      	str	r3, [sp, #8]
 8006bba:	9b06      	ldr	r3, [sp, #24]
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	4623      	mov	r3, r4
 8006bc4:	9a07      	ldr	r2, [sp, #28]
 8006bc6:	490a      	ldr	r1, [pc, #40]	; (8006bf0 <xTimerCreateTimerTask+0x58>)
 8006bc8:	480a      	ldr	r0, [pc, #40]	; (8006bf4 <xTimerCreateTimerTask+0x5c>)
 8006bca:	f7ff fabb 	bl	8006144 <xTaskCreateStatic>
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <xTimerCreateTimerTask+0x60>)
 8006bd0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006bd2:	b110      	cbz	r0, 8006bda <xTimerCreateTimerTask+0x42>
}
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	b008      	add	sp, #32
 8006bd8:	bd10      	pop	{r4, pc}
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006bea:	e7fe      	b.n	8006bea <xTimerCreateTimerTask+0x52>
 8006bec:	20001440 	.word	0x20001440
 8006bf0:	08009174 	.word	0x08009174
 8006bf4:	08006d05 	.word	0x08006d05
 8006bf8:	20001444 	.word	0x20001444

08006bfc <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006bfc:	b1d8      	cbz	r0, 8006c36 <xTimerGenericCommand+0x3a>
 8006bfe:	469c      	mov	ip, r3
 8006c00:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8006c02:	4815      	ldr	r0, [pc, #84]	; (8006c58 <xTimerGenericCommand+0x5c>)
 8006c04:	6800      	ldr	r0, [r0, #0]
 8006c06:	b328      	cbz	r0, 8006c54 <xTimerGenericCommand+0x58>
{
 8006c08:	b500      	push	{lr}
 8006c0a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8006c0c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c0e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006c10:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c12:	2905      	cmp	r1, #5
 8006c14:	dc18      	bgt.n	8006c48 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c16:	f7ff fe55 	bl	80068c4 <xTaskGetSchedulerState>
 8006c1a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	bf0c      	ite	eq
 8006c22:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c24:	461a      	movne	r2, r3
 8006c26:	4669      	mov	r1, sp
 8006c28:	480b      	ldr	r0, [pc, #44]	; (8006c58 <xTimerGenericCommand+0x5c>)
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	f7fe fd40 	bl	80056b0 <xQueueGenericSend>
}
 8006c30:	b005      	add	sp, #20
 8006c32:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006c46:	e7fe      	b.n	8006c46 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4662      	mov	r2, ip
 8006c4c:	4669      	mov	r1, sp
 8006c4e:	f7fe fe41 	bl	80058d4 <xQueueGenericSendFromISR>
 8006c52:	e7ed      	b.n	8006c30 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8006c54:	2000      	movs	r0, #0
}
 8006c56:	4770      	bx	lr
 8006c58:	20001440 	.word	0x20001440

08006c5c <prvSampleTimeNow>:
{
 8006c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	b082      	sub	sp, #8
 8006c62:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 8006c64:	f7ff fb28 	bl	80062b8 <xTaskGetTickCount>
 8006c68:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8006c6a:	4b23      	ldr	r3, [pc, #140]	; (8006cf8 <prvSampleTimeNow+0x9c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4283      	cmp	r3, r0
 8006c70:	d808      	bhi.n	8006c84 <prvSampleTimeNow+0x28>
 8006c72:	2300      	movs	r3, #0
		*pxTimerListsWereSwitched = pdTRUE;
 8006c74:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 8006c78:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <prvSampleTimeNow+0x9c>)
 8006c7a:	601e      	str	r6, [r3, #0]
}
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	b002      	add	sp, #8
 8006c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c84:	4d1d      	ldr	r5, [pc, #116]	; (8006cfc <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c86:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c8a:	682b      	ldr	r3, [r5, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	b35a      	cbz	r2, 8006ce8 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c94:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c96:	f104 0904 	add.w	r9, r4, #4
 8006c9a:	4648      	mov	r0, r9
 8006c9c:	f7fe fb66 	bl	800536c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ca6:	69e3      	ldr	r3, [r4, #28]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d1ee      	bne.n	8006c8a <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cac:	69a3      	ldr	r3, [r4, #24]
 8006cae:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8006cb0:	429f      	cmp	r7, r3
 8006cb2:	d206      	bcs.n	8006cc2 <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cb4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cb6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cb8:	4649      	mov	r1, r9
 8006cba:	6828      	ldr	r0, [r5, #0]
 8006cbc:	f7fe fb3d 	bl	800533a <vListInsert>
 8006cc0:	e7e3      	b.n	8006c8a <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cc2:	f8cd 8000 	str.w	r8, [sp]
 8006cc6:	4643      	mov	r3, r8
 8006cc8:	463a      	mov	r2, r7
 8006cca:	4641      	mov	r1, r8
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f7ff ff95 	bl	8006bfc <xTimerGenericCommand>
				configASSERT( xResult );
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d1d9      	bne.n	8006c8a <prvSampleTimeNow+0x2e>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	e7fe      	b.n	8006ce6 <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 8006ce8:	4a05      	ldr	r2, [pc, #20]	; (8006d00 <prvSampleTimeNow+0xa4>)
 8006cea:	6810      	ldr	r0, [r2, #0]
 8006cec:	4903      	ldr	r1, [pc, #12]	; (8006cfc <prvSampleTimeNow+0xa0>)
 8006cee:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006cf0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e7be      	b.n	8006c74 <prvSampleTimeNow+0x18>
 8006cf6:	bf00      	nop
 8006cf8:	200013ec 	.word	0x200013ec
 8006cfc:	2000131c 	.word	0x2000131c
 8006d00:	20001320 	.word	0x20001320

08006d04 <prvTimerTask>:
{
 8006d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d08:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d0a:	4e74      	ldr	r6, [pc, #464]	; (8006edc <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d0c:	4d74      	ldr	r5, [pc, #464]	; (8006ee0 <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d0e:	4f75      	ldr	r7, [pc, #468]	; (8006ee4 <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d10:	6833      	ldr	r3, [r6, #0]
 8006d12:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8006d16:	f1b8 0f00 	cmp.w	r8, #0
 8006d1a:	d00f      	beq.n	8006d3c <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8006d22:	f7ff fac1 	bl	80062a8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d26:	a804      	add	r0, sp, #16
 8006d28:	f7ff ff98 	bl	8006c5c <prvSampleTimeNow>
 8006d2c:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d154      	bne.n	8006dde <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d34:	4580      	cmp	r8, r0
 8006d36:	d923      	bls.n	8006d80 <prvTimerTask+0x7c>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	e00d      	b.n	8006d58 <prvTimerTask+0x54>
	vTaskSuspendAll();
 8006d3c:	f7ff fab4 	bl	80062a8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d40:	a804      	add	r0, sp, #16
 8006d42:	f7ff ff8b 	bl	8006c5c <prvSampleTimeNow>
 8006d46:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006d48:	9b04      	ldr	r3, [sp, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d147      	bne.n	8006dde <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	fab2 f282 	clz	r2, r2
 8006d56:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d58:	eba8 0104 	sub.w	r1, r8, r4
 8006d5c:	6828      	ldr	r0, [r5, #0]
 8006d5e:	f7ff f85b 	bl	8005e18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d62:	f7ff fb49 	bl	80063f8 <xTaskResumeAll>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d13b      	bne.n	8006de2 <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 8006d6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	e030      	b.n	8006de2 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8006d80:	f7ff fb3a 	bl	80063f8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d84:	6833      	ldr	r3, [r6, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d8c:	f109 0004 	add.w	r0, r9, #4
 8006d90:	f7fe faec 	bl	800536c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d004      	beq.n	8006da6 <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d9c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006da0:	4648      	mov	r0, r9
 8006da2:	4798      	blx	r3
}
 8006da4:	e01d      	b.n	8006de2 <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006da6:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8006daa:	4643      	mov	r3, r8
 8006dac:	4622      	mov	r2, r4
 8006dae:	4441      	add	r1, r8
 8006db0:	4648      	mov	r0, r9
 8006db2:	f7ff fe95 	bl	8006ae0 <prvInsertTimerInActiveList>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d0f0      	beq.n	8006d9c <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dba:	2100      	movs	r1, #0
 8006dbc:	9100      	str	r1, [sp, #0]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	4648      	mov	r0, r9
 8006dc4:	f7ff ff1a 	bl	8006bfc <xTimerGenericCommand>
			configASSERT( xResult );
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d1e7      	bne.n	8006d9c <prvTimerTask+0x98>
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	e7fe      	b.n	8006ddc <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 8006dde:	f7ff fb0b 	bl	80063f8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006de2:	2400      	movs	r4, #0
}
 8006de4:	e006      	b.n	8006df4 <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006de6:	9907      	ldr	r1, [sp, #28]
 8006de8:	9806      	ldr	r0, [sp, #24]
 8006dea:	9b05      	ldr	r3, [sp, #20]
 8006dec:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	da09      	bge.n	8006e08 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006df4:	4622      	mov	r2, r4
 8006df6:	a904      	add	r1, sp, #16
 8006df8:	6828      	ldr	r0, [r5, #0]
 8006dfa:	f7fe fdd1 	bl	80059a0 <xQueueReceive>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d086      	beq.n	8006d10 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e02:	9b04      	ldr	r3, [sp, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	dbee      	blt.n	8006de6 <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e08:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e0c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006e10:	b11b      	cbz	r3, 8006e1a <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e12:	f108 0004 	add.w	r0, r8, #4
 8006e16:	f7fe faa9 	bl	800536c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e1a:	a803      	add	r0, sp, #12
 8006e1c:	f7ff ff1e 	bl	8006c5c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006e20:	9b04      	ldr	r3, [sp, #16]
 8006e22:	2b09      	cmp	r3, #9
 8006e24:	d8e6      	bhi.n	8006df4 <prvTimerTask+0xf0>
 8006e26:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <prvTimerTask+0x128>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e55 	.word	0x08006e55
 8006e38:	08006df5 	.word	0x08006df5
 8006e3c:	08006ea3 	.word	0x08006ea3
 8006e40:	08006ecb 	.word	0x08006ecb
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e55 	.word	0x08006e55
 8006e4c:	08006df5 	.word	0x08006df5
 8006e50:	08006ea3 	.word	0x08006ea3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e54:	9b05      	ldr	r3, [sp, #20]
 8006e56:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	4419      	add	r1, r3
 8006e5e:	4640      	mov	r0, r8
 8006e60:	f7ff fe3e 	bl	8006ae0 <prvInsertTimerInActiveList>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d0c5      	beq.n	8006df4 <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e68:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e70:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d1bd      	bne.n	8006df4 <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e78:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8006e7c:	9400      	str	r4, [sp, #0]
 8006e7e:	4623      	mov	r3, r4
 8006e80:	9905      	ldr	r1, [sp, #20]
 8006e82:	440a      	add	r2, r1
 8006e84:	4621      	mov	r1, r4
 8006e86:	4640      	mov	r0, r8
 8006e88:	f7ff feb8 	bl	8006bfc <xTimerGenericCommand>
							configASSERT( xResult );
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d1b1      	bne.n	8006df4 <prvTimerTask+0xf0>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	e7fe      	b.n	8006ea0 <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ea2:	9905      	ldr	r1, [sp, #20]
 8006ea4:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ea8:	b131      	cbz	r1, 8006eb8 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4602      	mov	r2, r0
 8006eae:	4401      	add	r1, r0
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	f7ff fe15 	bl	8006ae0 <prvInsertTimerInActiveList>
					break;
 8006eb6:	e79d      	b.n	8006df4 <prvTimerTask+0xf0>
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ec8:	e7fe      	b.n	8006ec8 <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006eca:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d190      	bne.n	8006df4 <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	f000 fa56 	bl	8007384 <vPortFree>
 8006ed8:	e78c      	b.n	8006df4 <prvTimerTask+0xf0>
 8006eda:	bf00      	nop
 8006edc:	2000131c 	.word	0x2000131c
 8006ee0:	20001440 	.word	0x20001440
 8006ee4:	20001320 	.word	0x20001320

08006ee8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	4614      	mov	r4, r2
 8006eee:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006ef0:	f06f 0301 	mvn.w	r3, #1
 8006ef4:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006ef6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006ef8:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006efa:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006efc:	2300      	movs	r3, #0
 8006efe:	4669      	mov	r1, sp
 8006f00:	4802      	ldr	r0, [pc, #8]	; (8006f0c <xTimerPendFunctionCallFromISR+0x24>)
 8006f02:	6800      	ldr	r0, [r0, #0]
 8006f04:	f7fe fce6 	bl	80058d4 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8006f08:	b004      	add	sp, #16
 8006f0a:	bd10      	pop	{r4, pc}
 8006f0c:	20001440 	.word	0x20001440

08006f10 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f10:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <prvTaskExitError+0x3c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d008      	beq.n	8006f32 <prvTaskExitError+0x22>
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	e7fe      	b.n	8006f30 <prvTaskExitError+0x20>
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f42:	9b01      	ldr	r3, [sp, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0fc      	beq.n	8006f42 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f48:	b002      	add	sp, #8
 8006f4a:	4770      	bx	lr
 8006f4c:	20000014 	.word	0x20000014

08006f50 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f50:	4806      	ldr	r0, [pc, #24]	; (8006f6c <prvPortStartFirstTask+0x1c>)
 8006f52:	6800      	ldr	r0, [r0, #0]
 8006f54:	6800      	ldr	r0, [r0, #0]
 8006f56:	f380 8808 	msr	MSP, r0
 8006f5a:	b662      	cpsie	i
 8006f5c:	b661      	cpsie	f
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	df00      	svc	0
 8006f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f6a:	0000      	.short	0x0000
 8006f6c:	e000ed08 	.word	0xe000ed08

08006f70 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f74:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f78:	f021 0101 	bic.w	r1, r1, #1
 8006f7c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f80:	4b03      	ldr	r3, [pc, #12]	; (8006f90 <pxPortInitialiseStack+0x20>)
 8006f82:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f86:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006f8a:	3840      	subs	r0, #64	; 0x40
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	08006f11 	.word	0x08006f11
	...

08006fa0 <SVC_Handler>:
	__asm volatile (
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <pxCurrentTCBConst2>)
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	6808      	ldr	r0, [r1, #0]
 8006fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006faa:	f380 8809 	msr	PSP, r0
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8811 	msr	BASEPRI, r0
 8006fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8006fbe:	4770      	bx	lr

08006fc0 <pxCurrentTCBConst2>:
 8006fc0:	20000e20 	.word	0x20000e20

08006fc4 <vPortEnterCritical>:
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fd4:	4a0b      	ldr	r2, [pc, #44]	; (8007004 <vPortEnterCritical+0x40>)
 8006fd6:	6813      	ldr	r3, [r2, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d000      	beq.n	8006fe2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8006fe0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fe2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006fe6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006fea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006fee:	d0f7      	beq.n	8006fe0 <vPortEnterCritical+0x1c>
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	e7fe      	b.n	8007000 <vPortEnterCritical+0x3c>
 8007002:	bf00      	nop
 8007004:	20000014 	.word	0x20000014

08007008 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <vPortExitCritical+0x28>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	b943      	cbnz	r3, 8007020 <vPortExitCritical+0x18>
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	e7fe      	b.n	800701e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007020:	3b01      	subs	r3, #1
 8007022:	4a03      	ldr	r2, [pc, #12]	; (8007030 <vPortExitCritical+0x28>)
 8007024:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007026:	b90b      	cbnz	r3, 800702c <vPortExitCritical+0x24>
	__asm volatile
 8007028:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000014 	.word	0x20000014
	...

08007040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007040:	f3ef 8009 	mrs	r0, PSP
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <pxCurrentTCBConst>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007050:	6010      	str	r0, [r2, #0]
 8007052:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007056:	f04f 0050 	mov.w	r0, #80	; 0x50
 800705a:	f380 8811 	msr	BASEPRI, r0
 800705e:	f7ff fa9d 	bl	800659c <vTaskSwitchContext>
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800706e:	6819      	ldr	r1, [r3, #0]
 8007070:	6808      	ldr	r0, [r1, #0]
 8007072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007076:	f380 8809 	msr	PSP, r0
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	4770      	bx	lr

08007080 <pxCurrentTCBConst>:
 8007080:	20000e20 	.word	0x20000e20

08007084 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007084:	b508      	push	{r3, lr}
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007096:	f7ff f915 	bl	80062c4 <xTaskIncrementTick>
 800709a:	b128      	cbz	r0, 80070a8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800709c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80070a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80070a8:	2300      	movs	r3, #0
 80070aa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80070ae:	bd08      	pop	{r3, pc}

080070b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80070b4:	2300      	movs	r3, #0
 80070b6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070b8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <vPortSetupTimerInterrupt+0x20>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4905      	ldr	r1, [pc, #20]	; (80070d4 <vPortSetupTimerInterrupt+0x24>)
 80070c0:	fba1 1303 	umull	r1, r3, r1, r3
 80070c4:	099b      	lsrs	r3, r3, #6
 80070c6:	3b01      	subs	r3, #1
 80070c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ca:	2307      	movs	r3, #7
 80070cc:	6113      	str	r3, [r2, #16]
}
 80070ce:	4770      	bx	lr
 80070d0:	20000008 	.word	0x20000008
 80070d4:	10624dd3 	.word	0x10624dd3

080070d8 <xPortStartScheduler>:
{
 80070d8:	b510      	push	{r4, lr}
 80070da:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070dc:	4b2c      	ldr	r3, [pc, #176]	; (8007190 <xPortStartScheduler+0xb8>)
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070e4:	22ff      	movs	r2, #255	; 0xff
 80070e6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80070f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070f8:	4a26      	ldr	r2, [pc, #152]	; (8007194 <xPortStartScheduler+0xbc>)
 80070fa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070fc:	4b26      	ldr	r3, [pc, #152]	; (8007198 <xPortStartScheduler+0xc0>)
 80070fe:	2207      	movs	r2, #7
 8007100:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007102:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007106:	f013 0f80 	tst.w	r3, #128	; 0x80
 800710a:	d013      	beq.n	8007134 <xPortStartScheduler+0x5c>
 800710c:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800710e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800711a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800711e:	4610      	mov	r0, r2
 8007120:	3a01      	subs	r2, #1
 8007122:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007126:	d1f2      	bne.n	800710e <xPortStartScheduler+0x36>
 8007128:	4a1b      	ldr	r2, [pc, #108]	; (8007198 <xPortStartScheduler+0xc0>)
 800712a:	6010      	str	r0, [r2, #0]
 800712c:	f88d 3003 	strb.w	r3, [sp, #3]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007130:	2803      	cmp	r0, #3
 8007132:	d008      	beq.n	8007146 <xPortStartScheduler+0x6e>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	e7fe      	b.n	8007144 <xPortStartScheduler+0x6c>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <xPortStartScheduler+0xc0>)
 8007148:	f44f 7240 	mov.w	r2, #768	; 0x300
 800714c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	4a0f      	ldr	r2, [pc, #60]	; (8007190 <xPortStartScheduler+0xb8>)
 8007154:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007156:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800715a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800715e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007162:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007166:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800716a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800716e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007172:	f7ff ff9d 	bl	80070b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007176:	2400      	movs	r4, #0
 8007178:	4b08      	ldr	r3, [pc, #32]	; (800719c <xPortStartScheduler+0xc4>)
 800717a:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800717c:	f7ff fee8 	bl	8006f50 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007180:	f7ff fa0c 	bl	800659c <vTaskSwitchContext>
	prvTaskExitError();
 8007184:	f7ff fec4 	bl	8006f10 <prvTaskExitError>
}
 8007188:	4620      	mov	r0, r4
 800718a:	b002      	add	sp, #8
 800718c:	bd10      	pop	{r4, pc}
 800718e:	bf00      	nop
 8007190:	e000e400 	.word	0xe000e400
 8007194:	20001448 	.word	0x20001448
 8007198:	2000144c 	.word	0x2000144c
 800719c:	20000014 	.word	0x20000014

080071a0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071a0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071a4:	2b0f      	cmp	r3, #15
 80071a6:	d90f      	bls.n	80071c8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071a8:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <vPortValidateInterruptPriority+0x50>)
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071ae:	4a11      	ldr	r2, [pc, #68]	; (80071f4 <vPortValidateInterruptPriority+0x54>)
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d908      	bls.n	80071c8 <vPortValidateInterruptPriority+0x28>
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	e7fe      	b.n	80071c6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80071cc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80071d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071d4:	4a08      	ldr	r2, [pc, #32]	; (80071f8 <vPortValidateInterruptPriority+0x58>)
 80071d6:	6812      	ldr	r2, [r2, #0]
 80071d8:	4293      	cmp	r3, r2
 80071da:	d908      	bls.n	80071ee <vPortValidateInterruptPriority+0x4e>
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	e7fe      	b.n	80071ec <vPortValidateInterruptPriority+0x4c>
	}
 80071ee:	4770      	bx	lr
 80071f0:	e000e3f0 	.word	0xe000e3f0
 80071f4:	20001448 	.word	0x20001448
 80071f8:	2000144c 	.word	0x2000144c

080071fc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071fc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071fe:	4b14      	ldr	r3, [pc, #80]	; (8007250 <prvInsertBlockIntoFreeList+0x54>)
 8007200:	461a      	mov	r2, r3
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4283      	cmp	r3, r0
 8007206:	d3fb      	bcc.n	8007200 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007208:	6854      	ldr	r4, [r2, #4]
 800720a:	1911      	adds	r1, r2, r4
 800720c:	4288      	cmp	r0, r1
 800720e:	d009      	beq.n	8007224 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007210:	6844      	ldr	r4, [r0, #4]
 8007212:	1901      	adds	r1, r0, r4
 8007214:	428b      	cmp	r3, r1
 8007216:	d00f      	beq.n	8007238 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007218:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800721a:	4282      	cmp	r2, r0
 800721c:	d000      	beq.n	8007220 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800721e:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007220:	bc10      	pop	{r4}
 8007222:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007224:	6841      	ldr	r1, [r0, #4]
 8007226:	4421      	add	r1, r4
 8007228:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800722a:	460c      	mov	r4, r1
 800722c:	4411      	add	r1, r2
 800722e:	428b      	cmp	r3, r1
 8007230:	d001      	beq.n	8007236 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007232:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8007234:	e7f4      	b.n	8007220 <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007236:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007238:	4906      	ldr	r1, [pc, #24]	; (8007254 <prvInsertBlockIntoFreeList+0x58>)
 800723a:	6809      	ldr	r1, [r1, #0]
 800723c:	428b      	cmp	r3, r1
 800723e:	d005      	beq.n	800724c <prvInsertBlockIntoFreeList+0x50>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	4423      	add	r3, r4
 8007244:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	e7e5      	b.n	8007218 <prvInsertBlockIntoFreeList+0x1c>
 800724c:	460b      	mov	r3, r1
 800724e:	e7e3      	b.n	8007218 <prvInsertBlockIntoFreeList+0x1c>
 8007250:	20002400 	.word	0x20002400
 8007254:	20001450 	.word	0x20001450

08007258 <pvPortMalloc>:
{
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800725c:	f7ff f824 	bl	80062a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007260:	4b42      	ldr	r3, [pc, #264]	; (800736c <pvPortMalloc+0x114>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b1b3      	cbz	r3, 8007294 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007266:	4b42      	ldr	r3, [pc, #264]	; (8007370 <pvPortMalloc+0x118>)
 8007268:	681d      	ldr	r5, [r3, #0]
 800726a:	4225      	tst	r5, r4
 800726c:	d179      	bne.n	8007362 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 800726e:	2c00      	cmp	r4, #0
 8007270:	d077      	beq.n	8007362 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007272:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007276:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800727a:	bf1c      	itt	ne
 800727c:	f022 0207 	bicne.w	r2, r2, #7
 8007280:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007282:	2a00      	cmp	r2, #0
 8007284:	d06d      	beq.n	8007362 <pvPortMalloc+0x10a>
 8007286:	4b3b      	ldr	r3, [pc, #236]	; (8007374 <pvPortMalloc+0x11c>)
 8007288:	681e      	ldr	r6, [r3, #0]
 800728a:	4296      	cmp	r6, r2
 800728c:	d369      	bcc.n	8007362 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 800728e:	493a      	ldr	r1, [pc, #232]	; (8007378 <pvPortMalloc+0x120>)
 8007290:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007292:	e027      	b.n	80072e4 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007294:	4a39      	ldr	r2, [pc, #228]	; (800737c <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007296:	f012 0f07 	tst.w	r2, #7
 800729a:	d007      	beq.n	80072ac <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800729c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800729e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072a2:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 80072a6:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072a8:	460a      	mov	r2, r1
 80072aa:	e001      	b.n	80072b0 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072ac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072b0:	4831      	ldr	r0, [pc, #196]	; (8007378 <pvPortMalloc+0x120>)
 80072b2:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072b4:	2100      	movs	r1, #0
 80072b6:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072b8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80072ba:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072bc:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80072c0:	482a      	ldr	r0, [pc, #168]	; (800736c <pvPortMalloc+0x114>)
 80072c2:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80072c4:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072c6:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072c8:	1a99      	subs	r1, r3, r2
 80072ca:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072cc:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072ce:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <pvPortMalloc+0x128>)
 80072d0:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072d2:	4b28      	ldr	r3, [pc, #160]	; (8007374 <pvPortMalloc+0x11c>)
 80072d4:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072d6:	4b26      	ldr	r3, [pc, #152]	; (8007370 <pvPortMalloc+0x118>)
 80072d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072dc:	601a      	str	r2, [r3, #0]
}
 80072de:	e7c2      	b.n	8007266 <pvPortMalloc+0xe>
 80072e0:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80072e2:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072e4:	6863      	ldr	r3, [r4, #4]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d202      	bcs.n	80072f0 <pvPortMalloc+0x98>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f7      	bne.n	80072e0 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 80072f0:	4b1e      	ldr	r3, [pc, #120]	; (800736c <pvPortMalloc+0x114>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	d034      	beq.n	8007362 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072f8:	680f      	ldr	r7, [r1, #0]
 80072fa:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007300:	6863      	ldr	r3, [r4, #4]
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	2b10      	cmp	r3, #16
 8007306:	d910      	bls.n	800732a <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007308:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800730a:	f010 0f07 	tst.w	r0, #7
 800730e:	d008      	beq.n	8007322 <pvPortMalloc+0xca>
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	e7fe      	b.n	8007320 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007322:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007324:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007326:	f7ff ff69 	bl	80071fc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	1af6      	subs	r6, r6, r3
 800732e:	4a11      	ldr	r2, [pc, #68]	; (8007374 <pvPortMalloc+0x11c>)
 8007330:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007332:	4a13      	ldr	r2, [pc, #76]	; (8007380 <pvPortMalloc+0x128>)
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007338:	bf3c      	itt	cc
 800733a:	4a11      	ldrcc	r2, [pc, #68]	; (8007380 <pvPortMalloc+0x128>)
 800733c:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800733e:	431d      	orrs	r5, r3
 8007340:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007342:	2300      	movs	r3, #0
 8007344:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8007346:	f7ff f857 	bl	80063f8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800734a:	f017 0f07 	tst.w	r7, #7
 800734e:	d00b      	beq.n	8007368 <pvPortMalloc+0x110>
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	e7fe      	b.n	8007360 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007362:	f7ff f849 	bl	80063f8 <xTaskResumeAll>
 8007366:	2700      	movs	r7, #0
}
 8007368:	4638      	mov	r0, r7
 800736a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800736c:	20001450 	.word	0x20001450
 8007370:	200023f4 	.word	0x200023f4
 8007374:	200023f8 	.word	0x200023f8
 8007378:	20002400 	.word	0x20002400
 800737c:	20001454 	.word	0x20001454
 8007380:	200023fc 	.word	0x200023fc

08007384 <vPortFree>:
	if( pv != NULL )
 8007384:	b378      	cbz	r0, 80073e6 <vPortFree+0x62>
{
 8007386:	b510      	push	{r4, lr}
 8007388:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800738a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800738e:	4a16      	ldr	r2, [pc, #88]	; (80073e8 <vPortFree+0x64>)
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	4213      	tst	r3, r2
 8007394:	d108      	bne.n	80073a8 <vPortFree+0x24>
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	e7fe      	b.n	80073a6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80073ac:	b141      	cbz	r1, 80073c0 <vPortFree+0x3c>
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	e7fe      	b.n	80073be <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073c0:	ea23 0302 	bic.w	r3, r3, r2
 80073c4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80073c8:	f7fe ff6e 	bl	80062a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073cc:	4a07      	ldr	r2, [pc, #28]	; (80073ec <vPortFree+0x68>)
 80073ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80073d2:	6811      	ldr	r1, [r2, #0]
 80073d4:	440b      	add	r3, r1
 80073d6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073d8:	f1a4 0008 	sub.w	r0, r4, #8
 80073dc:	f7ff ff0e 	bl	80071fc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80073e0:	f7ff f80a 	bl	80063f8 <xTaskResumeAll>
}
 80073e4:	bd10      	pop	{r4, pc}
 80073e6:	4770      	bx	lr
 80073e8:	200023f4 	.word	0x200023f4
 80073ec:	200023f8 	.word	0x200023f8

080073f0 <__itoa>:
 80073f0:	1e93      	subs	r3, r2, #2
 80073f2:	2b22      	cmp	r3, #34	; 0x22
 80073f4:	b510      	push	{r4, lr}
 80073f6:	460c      	mov	r4, r1
 80073f8:	d904      	bls.n	8007404 <__itoa+0x14>
 80073fa:	2300      	movs	r3, #0
 80073fc:	461c      	mov	r4, r3
 80073fe:	700b      	strb	r3, [r1, #0]
 8007400:	4620      	mov	r0, r4
 8007402:	bd10      	pop	{r4, pc}
 8007404:	2a0a      	cmp	r2, #10
 8007406:	d109      	bne.n	800741c <__itoa+0x2c>
 8007408:	2800      	cmp	r0, #0
 800740a:	da07      	bge.n	800741c <__itoa+0x2c>
 800740c:	232d      	movs	r3, #45	; 0x2d
 800740e:	700b      	strb	r3, [r1, #0]
 8007410:	2101      	movs	r1, #1
 8007412:	4240      	negs	r0, r0
 8007414:	4421      	add	r1, r4
 8007416:	f000 f843 	bl	80074a0 <__utoa>
 800741a:	e7f1      	b.n	8007400 <__itoa+0x10>
 800741c:	2100      	movs	r1, #0
 800741e:	e7f9      	b.n	8007414 <__itoa+0x24>

08007420 <itoa>:
 8007420:	f7ff bfe6 	b.w	80073f0 <__itoa>

08007424 <rand>:
 8007424:	4b16      	ldr	r3, [pc, #88]	; (8007480 <rand+0x5c>)
 8007426:	b510      	push	{r4, lr}
 8007428:	681c      	ldr	r4, [r3, #0]
 800742a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800742c:	b9b3      	cbnz	r3, 800745c <rand+0x38>
 800742e:	2018      	movs	r0, #24
 8007430:	f000 fa76 	bl	8007920 <malloc>
 8007434:	4602      	mov	r2, r0
 8007436:	6320      	str	r0, [r4, #48]	; 0x30
 8007438:	b920      	cbnz	r0, 8007444 <rand+0x20>
 800743a:	2152      	movs	r1, #82	; 0x52
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <rand+0x60>)
 800743e:	4812      	ldr	r0, [pc, #72]	; (8007488 <rand+0x64>)
 8007440:	f000 fa08 	bl	8007854 <__assert_func>
 8007444:	4911      	ldr	r1, [pc, #68]	; (800748c <rand+0x68>)
 8007446:	4b12      	ldr	r3, [pc, #72]	; (8007490 <rand+0x6c>)
 8007448:	e9c0 1300 	strd	r1, r3, [r0]
 800744c:	4b11      	ldr	r3, [pc, #68]	; (8007494 <rand+0x70>)
 800744e:	2100      	movs	r1, #0
 8007450:	6083      	str	r3, [r0, #8]
 8007452:	230b      	movs	r3, #11
 8007454:	8183      	strh	r3, [r0, #12]
 8007456:	2001      	movs	r0, #1
 8007458:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800745c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800745e:	480e      	ldr	r0, [pc, #56]	; (8007498 <rand+0x74>)
 8007460:	690b      	ldr	r3, [r1, #16]
 8007462:	694c      	ldr	r4, [r1, #20]
 8007464:	4358      	muls	r0, r3
 8007466:	4a0d      	ldr	r2, [pc, #52]	; (800749c <rand+0x78>)
 8007468:	fb02 0004 	mla	r0, r2, r4, r0
 800746c:	fba3 3202 	umull	r3, r2, r3, r2
 8007470:	3301      	adds	r3, #1
 8007472:	eb40 0002 	adc.w	r0, r0, r2
 8007476:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800747a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800747e:	bd10      	pop	{r4, pc}
 8007480:	20000070 	.word	0x20000070
 8007484:	0800917c 	.word	0x0800917c
 8007488:	08009193 	.word	0x08009193
 800748c:	abcd330e 	.word	0xabcd330e
 8007490:	e66d1234 	.word	0xe66d1234
 8007494:	0005deec 	.word	0x0005deec
 8007498:	5851f42d 	.word	0x5851f42d
 800749c:	4c957f2d 	.word	0x4c957f2d

080074a0 <__utoa>:
 80074a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074a2:	b08b      	sub	sp, #44	; 0x2c
 80074a4:	4605      	mov	r5, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	466e      	mov	r6, sp
 80074aa:	4c1d      	ldr	r4, [pc, #116]	; (8007520 <__utoa+0x80>)
 80074ac:	f104 0c20 	add.w	ip, r4, #32
 80074b0:	4637      	mov	r7, r6
 80074b2:	6820      	ldr	r0, [r4, #0]
 80074b4:	6861      	ldr	r1, [r4, #4]
 80074b6:	3408      	adds	r4, #8
 80074b8:	c703      	stmia	r7!, {r0, r1}
 80074ba:	4564      	cmp	r4, ip
 80074bc:	463e      	mov	r6, r7
 80074be:	d1f7      	bne.n	80074b0 <__utoa+0x10>
 80074c0:	7921      	ldrb	r1, [r4, #4]
 80074c2:	6820      	ldr	r0, [r4, #0]
 80074c4:	7139      	strb	r1, [r7, #4]
 80074c6:	1e91      	subs	r1, r2, #2
 80074c8:	2922      	cmp	r1, #34	; 0x22
 80074ca:	6038      	str	r0, [r7, #0]
 80074cc:	f04f 0100 	mov.w	r1, #0
 80074d0:	d904      	bls.n	80074dc <__utoa+0x3c>
 80074d2:	7019      	strb	r1, [r3, #0]
 80074d4:	460b      	mov	r3, r1
 80074d6:	4618      	mov	r0, r3
 80074d8:	b00b      	add	sp, #44	; 0x2c
 80074da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074dc:	1e58      	subs	r0, r3, #1
 80074de:	4684      	mov	ip, r0
 80074e0:	fbb5 f7f2 	udiv	r7, r5, r2
 80074e4:	fb02 5617 	mls	r6, r2, r7, r5
 80074e8:	3628      	adds	r6, #40	; 0x28
 80074ea:	446e      	add	r6, sp
 80074ec:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80074f0:	460c      	mov	r4, r1
 80074f2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80074f6:	462e      	mov	r6, r5
 80074f8:	42b2      	cmp	r2, r6
 80074fa:	463d      	mov	r5, r7
 80074fc:	f101 0101 	add.w	r1, r1, #1
 8007500:	d9ee      	bls.n	80074e0 <__utoa+0x40>
 8007502:	2200      	movs	r2, #0
 8007504:	545a      	strb	r2, [r3, r1]
 8007506:	1919      	adds	r1, r3, r4
 8007508:	1aa5      	subs	r5, r4, r2
 800750a:	42aa      	cmp	r2, r5
 800750c:	dae3      	bge.n	80074d6 <__utoa+0x36>
 800750e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007512:	780e      	ldrb	r6, [r1, #0]
 8007514:	3201      	adds	r2, #1
 8007516:	7006      	strb	r6, [r0, #0]
 8007518:	f801 5901 	strb.w	r5, [r1], #-1
 800751c:	e7f4      	b.n	8007508 <__utoa+0x68>
 800751e:	bf00      	nop
 8007520:	080091eb 	.word	0x080091eb

08007524 <std>:
 8007524:	2300      	movs	r3, #0
 8007526:	b510      	push	{r4, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	e9c0 3300 	strd	r3, r3, [r0]
 800752e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007532:	6083      	str	r3, [r0, #8]
 8007534:	8181      	strh	r1, [r0, #12]
 8007536:	6643      	str	r3, [r0, #100]	; 0x64
 8007538:	81c2      	strh	r2, [r0, #14]
 800753a:	6183      	str	r3, [r0, #24]
 800753c:	4619      	mov	r1, r3
 800753e:	2208      	movs	r2, #8
 8007540:	305c      	adds	r0, #92	; 0x5c
 8007542:	f000 f8f4 	bl	800772e <memset>
 8007546:	4b0d      	ldr	r3, [pc, #52]	; (800757c <std+0x58>)
 8007548:	6224      	str	r4, [r4, #32]
 800754a:	6263      	str	r3, [r4, #36]	; 0x24
 800754c:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <std+0x5c>)
 800754e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <std+0x60>)
 8007552:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007554:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <std+0x64>)
 8007556:	6323      	str	r3, [r4, #48]	; 0x30
 8007558:	4b0c      	ldr	r3, [pc, #48]	; (800758c <std+0x68>)
 800755a:	429c      	cmp	r4, r3
 800755c:	d006      	beq.n	800756c <std+0x48>
 800755e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007562:	4294      	cmp	r4, r2
 8007564:	d002      	beq.n	800756c <std+0x48>
 8007566:	33d0      	adds	r3, #208	; 0xd0
 8007568:	429c      	cmp	r4, r3
 800756a:	d105      	bne.n	8007578 <std+0x54>
 800756c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007574:	f000 b954 	b.w	8007820 <__retarget_lock_init_recursive>
 8007578:	bd10      	pop	{r4, pc}
 800757a:	bf00      	nop
 800757c:	080076a9 	.word	0x080076a9
 8007580:	080076cb 	.word	0x080076cb
 8007584:	08007703 	.word	0x08007703
 8007588:	08007727 	.word	0x08007727
 800758c:	20002408 	.word	0x20002408

08007590 <stdio_exit_handler>:
 8007590:	4a02      	ldr	r2, [pc, #8]	; (800759c <stdio_exit_handler+0xc>)
 8007592:	4903      	ldr	r1, [pc, #12]	; (80075a0 <stdio_exit_handler+0x10>)
 8007594:	4803      	ldr	r0, [pc, #12]	; (80075a4 <stdio_exit_handler+0x14>)
 8007596:	f000 b869 	b.w	800766c <_fwalk_sglue>
 800759a:	bf00      	nop
 800759c:	20000018 	.word	0x20000018
 80075a0:	08007b8d 	.word	0x08007b8d
 80075a4:	20000024 	.word	0x20000024

080075a8 <cleanup_stdio>:
 80075a8:	6841      	ldr	r1, [r0, #4]
 80075aa:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <cleanup_stdio+0x34>)
 80075ac:	b510      	push	{r4, lr}
 80075ae:	4299      	cmp	r1, r3
 80075b0:	4604      	mov	r4, r0
 80075b2:	d001      	beq.n	80075b8 <cleanup_stdio+0x10>
 80075b4:	f000 faea 	bl	8007b8c <_fflush_r>
 80075b8:	68a1      	ldr	r1, [r4, #8]
 80075ba:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <cleanup_stdio+0x38>)
 80075bc:	4299      	cmp	r1, r3
 80075be:	d002      	beq.n	80075c6 <cleanup_stdio+0x1e>
 80075c0:	4620      	mov	r0, r4
 80075c2:	f000 fae3 	bl	8007b8c <_fflush_r>
 80075c6:	68e1      	ldr	r1, [r4, #12]
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <cleanup_stdio+0x3c>)
 80075ca:	4299      	cmp	r1, r3
 80075cc:	d004      	beq.n	80075d8 <cleanup_stdio+0x30>
 80075ce:	4620      	mov	r0, r4
 80075d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d4:	f000 bada 	b.w	8007b8c <_fflush_r>
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	20002408 	.word	0x20002408
 80075e0:	20002470 	.word	0x20002470
 80075e4:	200024d8 	.word	0x200024d8

080075e8 <global_stdio_init.part.0>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <global_stdio_init.part.0+0x30>)
 80075ec:	4c0b      	ldr	r4, [pc, #44]	; (800761c <global_stdio_init.part.0+0x34>)
 80075ee:	4a0c      	ldr	r2, [pc, #48]	; (8007620 <global_stdio_init.part.0+0x38>)
 80075f0:	4620      	mov	r0, r4
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	2104      	movs	r1, #4
 80075f6:	2200      	movs	r2, #0
 80075f8:	f7ff ff94 	bl	8007524 <std>
 80075fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007600:	2201      	movs	r2, #1
 8007602:	2109      	movs	r1, #9
 8007604:	f7ff ff8e 	bl	8007524 <std>
 8007608:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800760c:	2202      	movs	r2, #2
 800760e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007612:	2112      	movs	r1, #18
 8007614:	f7ff bf86 	b.w	8007524 <std>
 8007618:	20002540 	.word	0x20002540
 800761c:	20002408 	.word	0x20002408
 8007620:	08007591 	.word	0x08007591

08007624 <__sfp_lock_acquire>:
 8007624:	4801      	ldr	r0, [pc, #4]	; (800762c <__sfp_lock_acquire+0x8>)
 8007626:	f000 b8fc 	b.w	8007822 <__retarget_lock_acquire_recursive>
 800762a:	bf00      	nop
 800762c:	20002549 	.word	0x20002549

08007630 <__sfp_lock_release>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__sfp_lock_release+0x8>)
 8007632:	f000 b8f7 	b.w	8007824 <__retarget_lock_release_recursive>
 8007636:	bf00      	nop
 8007638:	20002549 	.word	0x20002549

0800763c <__sinit>:
 800763c:	b510      	push	{r4, lr}
 800763e:	4604      	mov	r4, r0
 8007640:	f7ff fff0 	bl	8007624 <__sfp_lock_acquire>
 8007644:	6a23      	ldr	r3, [r4, #32]
 8007646:	b11b      	cbz	r3, 8007650 <__sinit+0x14>
 8007648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764c:	f7ff bff0 	b.w	8007630 <__sfp_lock_release>
 8007650:	4b04      	ldr	r3, [pc, #16]	; (8007664 <__sinit+0x28>)
 8007652:	6223      	str	r3, [r4, #32]
 8007654:	4b04      	ldr	r3, [pc, #16]	; (8007668 <__sinit+0x2c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f5      	bne.n	8007648 <__sinit+0xc>
 800765c:	f7ff ffc4 	bl	80075e8 <global_stdio_init.part.0>
 8007660:	e7f2      	b.n	8007648 <__sinit+0xc>
 8007662:	bf00      	nop
 8007664:	080075a9 	.word	0x080075a9
 8007668:	20002540 	.word	0x20002540

0800766c <_fwalk_sglue>:
 800766c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007670:	4607      	mov	r7, r0
 8007672:	4688      	mov	r8, r1
 8007674:	4614      	mov	r4, r2
 8007676:	2600      	movs	r6, #0
 8007678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800767c:	f1b9 0901 	subs.w	r9, r9, #1
 8007680:	d505      	bpl.n	800768e <_fwalk_sglue+0x22>
 8007682:	6824      	ldr	r4, [r4, #0]
 8007684:	2c00      	cmp	r4, #0
 8007686:	d1f7      	bne.n	8007678 <_fwalk_sglue+0xc>
 8007688:	4630      	mov	r0, r6
 800768a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d907      	bls.n	80076a4 <_fwalk_sglue+0x38>
 8007694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007698:	3301      	adds	r3, #1
 800769a:	d003      	beq.n	80076a4 <_fwalk_sglue+0x38>
 800769c:	4629      	mov	r1, r5
 800769e:	4638      	mov	r0, r7
 80076a0:	47c0      	blx	r8
 80076a2:	4306      	orrs	r6, r0
 80076a4:	3568      	adds	r5, #104	; 0x68
 80076a6:	e7e9      	b.n	800767c <_fwalk_sglue+0x10>

080076a8 <__sread>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	460c      	mov	r4, r1
 80076ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b0:	f000 f868 	bl	8007784 <_read_r>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	bfab      	itete	ge
 80076b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076ba:	89a3      	ldrhlt	r3, [r4, #12]
 80076bc:	181b      	addge	r3, r3, r0
 80076be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076c2:	bfac      	ite	ge
 80076c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80076c6:	81a3      	strhlt	r3, [r4, #12]
 80076c8:	bd10      	pop	{r4, pc}

080076ca <__swrite>:
 80076ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ce:	461f      	mov	r7, r3
 80076d0:	898b      	ldrh	r3, [r1, #12]
 80076d2:	4605      	mov	r5, r0
 80076d4:	05db      	lsls	r3, r3, #23
 80076d6:	460c      	mov	r4, r1
 80076d8:	4616      	mov	r6, r2
 80076da:	d505      	bpl.n	80076e8 <__swrite+0x1e>
 80076dc:	2302      	movs	r3, #2
 80076de:	2200      	movs	r2, #0
 80076e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e4:	f000 f83c 	bl	8007760 <_lseek_r>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	4632      	mov	r2, r6
 80076ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	4628      	mov	r0, r5
 80076f4:	463b      	mov	r3, r7
 80076f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	f000 b853 	b.w	80077a8 <_write_r>

08007702 <__sseek>:
 8007702:	b510      	push	{r4, lr}
 8007704:	460c      	mov	r4, r1
 8007706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770a:	f000 f829 	bl	8007760 <_lseek_r>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	bf15      	itete	ne
 8007714:	6560      	strne	r0, [r4, #84]	; 0x54
 8007716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800771a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800771e:	81a3      	strheq	r3, [r4, #12]
 8007720:	bf18      	it	ne
 8007722:	81a3      	strhne	r3, [r4, #12]
 8007724:	bd10      	pop	{r4, pc}

08007726 <__sclose>:
 8007726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772a:	f000 b809 	b.w	8007740 <_close_r>

0800772e <memset>:
 800772e:	4603      	mov	r3, r0
 8007730:	4402      	add	r2, r0
 8007732:	4293      	cmp	r3, r2
 8007734:	d100      	bne.n	8007738 <memset+0xa>
 8007736:	4770      	bx	lr
 8007738:	f803 1b01 	strb.w	r1, [r3], #1
 800773c:	e7f9      	b.n	8007732 <memset+0x4>
	...

08007740 <_close_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	2300      	movs	r3, #0
 8007744:	4d05      	ldr	r5, [pc, #20]	; (800775c <_close_r+0x1c>)
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	f7fa fdc0 	bl	80022d0 <_close>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_close_r+0x1a>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_close_r+0x1a>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	20002544 	.word	0x20002544

08007760 <_lseek_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4604      	mov	r4, r0
 8007764:	4608      	mov	r0, r1
 8007766:	4611      	mov	r1, r2
 8007768:	2200      	movs	r2, #0
 800776a:	4d05      	ldr	r5, [pc, #20]	; (8007780 <_lseek_r+0x20>)
 800776c:	602a      	str	r2, [r5, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	f7fa fdb8 	bl	80022e4 <_lseek>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_lseek_r+0x1e>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_lseek_r+0x1e>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20002544 	.word	0x20002544

08007784 <_read_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4604      	mov	r4, r0
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	2200      	movs	r2, #0
 800778e:	4d05      	ldr	r5, [pc, #20]	; (80077a4 <_read_r+0x20>)
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f7fa fd82 	bl	800229c <_read>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_read_r+0x1e>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_read_r+0x1e>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20002544 	.word	0x20002544

080077a8 <_write_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4604      	mov	r4, r0
 80077ac:	4608      	mov	r0, r1
 80077ae:	4611      	mov	r1, r2
 80077b0:	2200      	movs	r2, #0
 80077b2:	4d05      	ldr	r5, [pc, #20]	; (80077c8 <_write_r+0x20>)
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f7fa fd7d 	bl	80022b6 <_write>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_write_r+0x1e>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_write_r+0x1e>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	20002544 	.word	0x20002544

080077cc <__errno>:
 80077cc:	4b01      	ldr	r3, [pc, #4]	; (80077d4 <__errno+0x8>)
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	20000070 	.word	0x20000070

080077d8 <__libc_init_array>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	2600      	movs	r6, #0
 80077dc:	4d0c      	ldr	r5, [pc, #48]	; (8007810 <__libc_init_array+0x38>)
 80077de:	4c0d      	ldr	r4, [pc, #52]	; (8007814 <__libc_init_array+0x3c>)
 80077e0:	1b64      	subs	r4, r4, r5
 80077e2:	10a4      	asrs	r4, r4, #2
 80077e4:	42a6      	cmp	r6, r4
 80077e6:	d109      	bne.n	80077fc <__libc_init_array+0x24>
 80077e8:	f000 fe62 	bl	80084b0 <_init>
 80077ec:	2600      	movs	r6, #0
 80077ee:	4d0a      	ldr	r5, [pc, #40]	; (8007818 <__libc_init_array+0x40>)
 80077f0:	4c0a      	ldr	r4, [pc, #40]	; (800781c <__libc_init_array+0x44>)
 80077f2:	1b64      	subs	r4, r4, r5
 80077f4:	10a4      	asrs	r4, r4, #2
 80077f6:	42a6      	cmp	r6, r4
 80077f8:	d105      	bne.n	8007806 <__libc_init_array+0x2e>
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007800:	4798      	blx	r3
 8007802:	3601      	adds	r6, #1
 8007804:	e7ee      	b.n	80077e4 <__libc_init_array+0xc>
 8007806:	f855 3b04 	ldr.w	r3, [r5], #4
 800780a:	4798      	blx	r3
 800780c:	3601      	adds	r6, #1
 800780e:	e7f2      	b.n	80077f6 <__libc_init_array+0x1e>
 8007810:	08009280 	.word	0x08009280
 8007814:	08009280 	.word	0x08009280
 8007818:	08009280 	.word	0x08009280
 800781c:	08009284 	.word	0x08009284

08007820 <__retarget_lock_init_recursive>:
 8007820:	4770      	bx	lr

08007822 <__retarget_lock_acquire_recursive>:
 8007822:	4770      	bx	lr

08007824 <__retarget_lock_release_recursive>:
 8007824:	4770      	bx	lr

08007826 <strcpy>:
 8007826:	4603      	mov	r3, r0
 8007828:	f811 2b01 	ldrb.w	r2, [r1], #1
 800782c:	f803 2b01 	strb.w	r2, [r3], #1
 8007830:	2a00      	cmp	r2, #0
 8007832:	d1f9      	bne.n	8007828 <strcpy+0x2>
 8007834:	4770      	bx	lr

08007836 <memcpy>:
 8007836:	440a      	add	r2, r1
 8007838:	4291      	cmp	r1, r2
 800783a:	f100 33ff 	add.w	r3, r0, #4294967295
 800783e:	d100      	bne.n	8007842 <memcpy+0xc>
 8007840:	4770      	bx	lr
 8007842:	b510      	push	{r4, lr}
 8007844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007848:	4291      	cmp	r1, r2
 800784a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800784e:	d1f9      	bne.n	8007844 <memcpy+0xe>
 8007850:	bd10      	pop	{r4, pc}
	...

08007854 <__assert_func>:
 8007854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007856:	4614      	mov	r4, r2
 8007858:	461a      	mov	r2, r3
 800785a:	4b09      	ldr	r3, [pc, #36]	; (8007880 <__assert_func+0x2c>)
 800785c:	4605      	mov	r5, r0
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68d8      	ldr	r0, [r3, #12]
 8007862:	b14c      	cbz	r4, 8007878 <__assert_func+0x24>
 8007864:	4b07      	ldr	r3, [pc, #28]	; (8007884 <__assert_func+0x30>)
 8007866:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800786a:	9100      	str	r1, [sp, #0]
 800786c:	462b      	mov	r3, r5
 800786e:	4906      	ldr	r1, [pc, #24]	; (8007888 <__assert_func+0x34>)
 8007870:	f000 f9b4 	bl	8007bdc <fiprintf>
 8007874:	f000 f9d4 	bl	8007c20 <abort>
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <__assert_func+0x38>)
 800787a:	461c      	mov	r4, r3
 800787c:	e7f3      	b.n	8007866 <__assert_func+0x12>
 800787e:	bf00      	nop
 8007880:	20000070 	.word	0x20000070
 8007884:	08009210 	.word	0x08009210
 8007888:	0800921d 	.word	0x0800921d
 800788c:	0800924b 	.word	0x0800924b

08007890 <_free_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4605      	mov	r5, r0
 8007894:	2900      	cmp	r1, #0
 8007896:	d040      	beq.n	800791a <_free_r+0x8a>
 8007898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789c:	1f0c      	subs	r4, r1, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfb8      	it	lt
 80078a2:	18e4      	addlt	r4, r4, r3
 80078a4:	f000 f8e4 	bl	8007a70 <__malloc_lock>
 80078a8:	4a1c      	ldr	r2, [pc, #112]	; (800791c <_free_r+0x8c>)
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	b933      	cbnz	r3, 80078bc <_free_r+0x2c>
 80078ae:	6063      	str	r3, [r4, #4]
 80078b0:	6014      	str	r4, [r2, #0]
 80078b2:	4628      	mov	r0, r5
 80078b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b8:	f000 b8e0 	b.w	8007a7c <__malloc_unlock>
 80078bc:	42a3      	cmp	r3, r4
 80078be:	d908      	bls.n	80078d2 <_free_r+0x42>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	1821      	adds	r1, r4, r0
 80078c4:	428b      	cmp	r3, r1
 80078c6:	bf01      	itttt	eq
 80078c8:	6819      	ldreq	r1, [r3, #0]
 80078ca:	685b      	ldreq	r3, [r3, #4]
 80078cc:	1809      	addeq	r1, r1, r0
 80078ce:	6021      	streq	r1, [r4, #0]
 80078d0:	e7ed      	b.n	80078ae <_free_r+0x1e>
 80078d2:	461a      	mov	r2, r3
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	b10b      	cbz	r3, 80078dc <_free_r+0x4c>
 80078d8:	42a3      	cmp	r3, r4
 80078da:	d9fa      	bls.n	80078d2 <_free_r+0x42>
 80078dc:	6811      	ldr	r1, [r2, #0]
 80078de:	1850      	adds	r0, r2, r1
 80078e0:	42a0      	cmp	r0, r4
 80078e2:	d10b      	bne.n	80078fc <_free_r+0x6c>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	4401      	add	r1, r0
 80078e8:	1850      	adds	r0, r2, r1
 80078ea:	4283      	cmp	r3, r0
 80078ec:	6011      	str	r1, [r2, #0]
 80078ee:	d1e0      	bne.n	80078b2 <_free_r+0x22>
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	4408      	add	r0, r1
 80078f6:	6010      	str	r0, [r2, #0]
 80078f8:	6053      	str	r3, [r2, #4]
 80078fa:	e7da      	b.n	80078b2 <_free_r+0x22>
 80078fc:	d902      	bls.n	8007904 <_free_r+0x74>
 80078fe:	230c      	movs	r3, #12
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	e7d6      	b.n	80078b2 <_free_r+0x22>
 8007904:	6820      	ldr	r0, [r4, #0]
 8007906:	1821      	adds	r1, r4, r0
 8007908:	428b      	cmp	r3, r1
 800790a:	bf01      	itttt	eq
 800790c:	6819      	ldreq	r1, [r3, #0]
 800790e:	685b      	ldreq	r3, [r3, #4]
 8007910:	1809      	addeq	r1, r1, r0
 8007912:	6021      	streq	r1, [r4, #0]
 8007914:	6063      	str	r3, [r4, #4]
 8007916:	6054      	str	r4, [r2, #4]
 8007918:	e7cb      	b.n	80078b2 <_free_r+0x22>
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	2000254c 	.word	0x2000254c

08007920 <malloc>:
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <malloc+0xc>)
 8007922:	4601      	mov	r1, r0
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	f000 b823 	b.w	8007970 <_malloc_r>
 800792a:	bf00      	nop
 800792c:	20000070 	.word	0x20000070

08007930 <sbrk_aligned>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	4e0e      	ldr	r6, [pc, #56]	; (800796c <sbrk_aligned+0x3c>)
 8007934:	460c      	mov	r4, r1
 8007936:	6831      	ldr	r1, [r6, #0]
 8007938:	4605      	mov	r5, r0
 800793a:	b911      	cbnz	r1, 8007942 <sbrk_aligned+0x12>
 800793c:	f000 f960 	bl	8007c00 <_sbrk_r>
 8007940:	6030      	str	r0, [r6, #0]
 8007942:	4621      	mov	r1, r4
 8007944:	4628      	mov	r0, r5
 8007946:	f000 f95b 	bl	8007c00 <_sbrk_r>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d00a      	beq.n	8007964 <sbrk_aligned+0x34>
 800794e:	1cc4      	adds	r4, r0, #3
 8007950:	f024 0403 	bic.w	r4, r4, #3
 8007954:	42a0      	cmp	r0, r4
 8007956:	d007      	beq.n	8007968 <sbrk_aligned+0x38>
 8007958:	1a21      	subs	r1, r4, r0
 800795a:	4628      	mov	r0, r5
 800795c:	f000 f950 	bl	8007c00 <_sbrk_r>
 8007960:	3001      	adds	r0, #1
 8007962:	d101      	bne.n	8007968 <sbrk_aligned+0x38>
 8007964:	f04f 34ff 	mov.w	r4, #4294967295
 8007968:	4620      	mov	r0, r4
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	20002550 	.word	0x20002550

08007970 <_malloc_r>:
 8007970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007974:	1ccd      	adds	r5, r1, #3
 8007976:	f025 0503 	bic.w	r5, r5, #3
 800797a:	3508      	adds	r5, #8
 800797c:	2d0c      	cmp	r5, #12
 800797e:	bf38      	it	cc
 8007980:	250c      	movcc	r5, #12
 8007982:	2d00      	cmp	r5, #0
 8007984:	4607      	mov	r7, r0
 8007986:	db01      	blt.n	800798c <_malloc_r+0x1c>
 8007988:	42a9      	cmp	r1, r5
 800798a:	d905      	bls.n	8007998 <_malloc_r+0x28>
 800798c:	230c      	movs	r3, #12
 800798e:	2600      	movs	r6, #0
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	4630      	mov	r0, r6
 8007994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007998:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a6c <_malloc_r+0xfc>
 800799c:	f000 f868 	bl	8007a70 <__malloc_lock>
 80079a0:	f8d8 3000 	ldr.w	r3, [r8]
 80079a4:	461c      	mov	r4, r3
 80079a6:	bb5c      	cbnz	r4, 8007a00 <_malloc_r+0x90>
 80079a8:	4629      	mov	r1, r5
 80079aa:	4638      	mov	r0, r7
 80079ac:	f7ff ffc0 	bl	8007930 <sbrk_aligned>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	4604      	mov	r4, r0
 80079b4:	d155      	bne.n	8007a62 <_malloc_r+0xf2>
 80079b6:	f8d8 4000 	ldr.w	r4, [r8]
 80079ba:	4626      	mov	r6, r4
 80079bc:	2e00      	cmp	r6, #0
 80079be:	d145      	bne.n	8007a4c <_malloc_r+0xdc>
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	d048      	beq.n	8007a56 <_malloc_r+0xe6>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	4631      	mov	r1, r6
 80079c8:	4638      	mov	r0, r7
 80079ca:	eb04 0903 	add.w	r9, r4, r3
 80079ce:	f000 f917 	bl	8007c00 <_sbrk_r>
 80079d2:	4581      	cmp	r9, r0
 80079d4:	d13f      	bne.n	8007a56 <_malloc_r+0xe6>
 80079d6:	6821      	ldr	r1, [r4, #0]
 80079d8:	4638      	mov	r0, r7
 80079da:	1a6d      	subs	r5, r5, r1
 80079dc:	4629      	mov	r1, r5
 80079de:	f7ff ffa7 	bl	8007930 <sbrk_aligned>
 80079e2:	3001      	adds	r0, #1
 80079e4:	d037      	beq.n	8007a56 <_malloc_r+0xe6>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	442b      	add	r3, r5
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	f8d8 3000 	ldr.w	r3, [r8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d038      	beq.n	8007a66 <_malloc_r+0xf6>
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	42a2      	cmp	r2, r4
 80079f8:	d12b      	bne.n	8007a52 <_malloc_r+0xe2>
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
 80079fe:	e00f      	b.n	8007a20 <_malloc_r+0xb0>
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	1b52      	subs	r2, r2, r5
 8007a04:	d41f      	bmi.n	8007a46 <_malloc_r+0xd6>
 8007a06:	2a0b      	cmp	r2, #11
 8007a08:	d917      	bls.n	8007a3a <_malloc_r+0xca>
 8007a0a:	1961      	adds	r1, r4, r5
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	6025      	str	r5, [r4, #0]
 8007a10:	bf18      	it	ne
 8007a12:	6059      	strne	r1, [r3, #4]
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	bf08      	it	eq
 8007a18:	f8c8 1000 	streq.w	r1, [r8]
 8007a1c:	5162      	str	r2, [r4, r5]
 8007a1e:	604b      	str	r3, [r1, #4]
 8007a20:	4638      	mov	r0, r7
 8007a22:	f104 060b 	add.w	r6, r4, #11
 8007a26:	f000 f829 	bl	8007a7c <__malloc_unlock>
 8007a2a:	f026 0607 	bic.w	r6, r6, #7
 8007a2e:	1d23      	adds	r3, r4, #4
 8007a30:	1af2      	subs	r2, r6, r3
 8007a32:	d0ae      	beq.n	8007992 <_malloc_r+0x22>
 8007a34:	1b9b      	subs	r3, r3, r6
 8007a36:	50a3      	str	r3, [r4, r2]
 8007a38:	e7ab      	b.n	8007992 <_malloc_r+0x22>
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	6862      	ldr	r2, [r4, #4]
 8007a3e:	d1dd      	bne.n	80079fc <_malloc_r+0x8c>
 8007a40:	f8c8 2000 	str.w	r2, [r8]
 8007a44:	e7ec      	b.n	8007a20 <_malloc_r+0xb0>
 8007a46:	4623      	mov	r3, r4
 8007a48:	6864      	ldr	r4, [r4, #4]
 8007a4a:	e7ac      	b.n	80079a6 <_malloc_r+0x36>
 8007a4c:	4634      	mov	r4, r6
 8007a4e:	6876      	ldr	r6, [r6, #4]
 8007a50:	e7b4      	b.n	80079bc <_malloc_r+0x4c>
 8007a52:	4613      	mov	r3, r2
 8007a54:	e7cc      	b.n	80079f0 <_malloc_r+0x80>
 8007a56:	230c      	movs	r3, #12
 8007a58:	4638      	mov	r0, r7
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	f000 f80e 	bl	8007a7c <__malloc_unlock>
 8007a60:	e797      	b.n	8007992 <_malloc_r+0x22>
 8007a62:	6025      	str	r5, [r4, #0]
 8007a64:	e7dc      	b.n	8007a20 <_malloc_r+0xb0>
 8007a66:	605b      	str	r3, [r3, #4]
 8007a68:	deff      	udf	#255	; 0xff
 8007a6a:	bf00      	nop
 8007a6c:	2000254c 	.word	0x2000254c

08007a70 <__malloc_lock>:
 8007a70:	4801      	ldr	r0, [pc, #4]	; (8007a78 <__malloc_lock+0x8>)
 8007a72:	f7ff bed6 	b.w	8007822 <__retarget_lock_acquire_recursive>
 8007a76:	bf00      	nop
 8007a78:	20002548 	.word	0x20002548

08007a7c <__malloc_unlock>:
 8007a7c:	4801      	ldr	r0, [pc, #4]	; (8007a84 <__malloc_unlock+0x8>)
 8007a7e:	f7ff bed1 	b.w	8007824 <__retarget_lock_release_recursive>
 8007a82:	bf00      	nop
 8007a84:	20002548 	.word	0x20002548

08007a88 <__sflush_r>:
 8007a88:	898a      	ldrh	r2, [r1, #12]
 8007a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	0710      	lsls	r0, r2, #28
 8007a90:	460c      	mov	r4, r1
 8007a92:	d457      	bmi.n	8007b44 <__sflush_r+0xbc>
 8007a94:	684b      	ldr	r3, [r1, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dc04      	bgt.n	8007aa4 <__sflush_r+0x1c>
 8007a9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	dc01      	bgt.n	8007aa4 <__sflush_r+0x1c>
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aa6:	2e00      	cmp	r6, #0
 8007aa8:	d0fa      	beq.n	8007aa0 <__sflush_r+0x18>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ab0:	682f      	ldr	r7, [r5, #0]
 8007ab2:	6a21      	ldr	r1, [r4, #32]
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	d032      	beq.n	8007b1e <__sflush_r+0x96>
 8007ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	075a      	lsls	r2, r3, #29
 8007abe:	d505      	bpl.n	8007acc <__sflush_r+0x44>
 8007ac0:	6863      	ldr	r3, [r4, #4]
 8007ac2:	1ac0      	subs	r0, r0, r3
 8007ac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ac6:	b10b      	cbz	r3, 8007acc <__sflush_r+0x44>
 8007ac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aca:	1ac0      	subs	r0, r0, r3
 8007acc:	2300      	movs	r3, #0
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	6a21      	ldr	r1, [r4, #32]
 8007ad6:	47b0      	blx	r6
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	d106      	bne.n	8007aec <__sflush_r+0x64>
 8007ade:	6829      	ldr	r1, [r5, #0]
 8007ae0:	291d      	cmp	r1, #29
 8007ae2:	d82b      	bhi.n	8007b3c <__sflush_r+0xb4>
 8007ae4:	4a28      	ldr	r2, [pc, #160]	; (8007b88 <__sflush_r+0x100>)
 8007ae6:	410a      	asrs	r2, r1
 8007ae8:	07d6      	lsls	r6, r2, #31
 8007aea:	d427      	bmi.n	8007b3c <__sflush_r+0xb4>
 8007aec:	2200      	movs	r2, #0
 8007aee:	6062      	str	r2, [r4, #4]
 8007af0:	6922      	ldr	r2, [r4, #16]
 8007af2:	04d9      	lsls	r1, r3, #19
 8007af4:	6022      	str	r2, [r4, #0]
 8007af6:	d504      	bpl.n	8007b02 <__sflush_r+0x7a>
 8007af8:	1c42      	adds	r2, r0, #1
 8007afa:	d101      	bne.n	8007b00 <__sflush_r+0x78>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b903      	cbnz	r3, 8007b02 <__sflush_r+0x7a>
 8007b00:	6560      	str	r0, [r4, #84]	; 0x54
 8007b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b04:	602f      	str	r7, [r5, #0]
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d0ca      	beq.n	8007aa0 <__sflush_r+0x18>
 8007b0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	d002      	beq.n	8007b18 <__sflush_r+0x90>
 8007b12:	4628      	mov	r0, r5
 8007b14:	f7ff febc 	bl	8007890 <_free_r>
 8007b18:	2000      	movs	r0, #0
 8007b1a:	6360      	str	r0, [r4, #52]	; 0x34
 8007b1c:	e7c1      	b.n	8007aa2 <__sflush_r+0x1a>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b0      	blx	r6
 8007b24:	1c41      	adds	r1, r0, #1
 8007b26:	d1c8      	bne.n	8007aba <__sflush_r+0x32>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d0c5      	beq.n	8007aba <__sflush_r+0x32>
 8007b2e:	2b1d      	cmp	r3, #29
 8007b30:	d001      	beq.n	8007b36 <__sflush_r+0xae>
 8007b32:	2b16      	cmp	r3, #22
 8007b34:	d101      	bne.n	8007b3a <__sflush_r+0xb2>
 8007b36:	602f      	str	r7, [r5, #0]
 8007b38:	e7b2      	b.n	8007aa0 <__sflush_r+0x18>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	e7ae      	b.n	8007aa2 <__sflush_r+0x1a>
 8007b44:	690f      	ldr	r7, [r1, #16]
 8007b46:	2f00      	cmp	r7, #0
 8007b48:	d0aa      	beq.n	8007aa0 <__sflush_r+0x18>
 8007b4a:	0793      	lsls	r3, r2, #30
 8007b4c:	bf18      	it	ne
 8007b4e:	2300      	movne	r3, #0
 8007b50:	680e      	ldr	r6, [r1, #0]
 8007b52:	bf08      	it	eq
 8007b54:	694b      	ldreq	r3, [r1, #20]
 8007b56:	1bf6      	subs	r6, r6, r7
 8007b58:	600f      	str	r7, [r1, #0]
 8007b5a:	608b      	str	r3, [r1, #8]
 8007b5c:	2e00      	cmp	r6, #0
 8007b5e:	dd9f      	ble.n	8007aa0 <__sflush_r+0x18>
 8007b60:	4633      	mov	r3, r6
 8007b62:	463a      	mov	r2, r7
 8007b64:	4628      	mov	r0, r5
 8007b66:	6a21      	ldr	r1, [r4, #32]
 8007b68:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b6c:	47e0      	blx	ip
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	dc06      	bgt.n	8007b80 <__sflush_r+0xf8>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295
 8007b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	e790      	b.n	8007aa2 <__sflush_r+0x1a>
 8007b80:	4407      	add	r7, r0
 8007b82:	1a36      	subs	r6, r6, r0
 8007b84:	e7ea      	b.n	8007b5c <__sflush_r+0xd4>
 8007b86:	bf00      	nop
 8007b88:	dfbffffe 	.word	0xdfbffffe

08007b8c <_fflush_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	690b      	ldr	r3, [r1, #16]
 8007b90:	4605      	mov	r5, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	b913      	cbnz	r3, 8007b9c <_fflush_r+0x10>
 8007b96:	2500      	movs	r5, #0
 8007b98:	4628      	mov	r0, r5
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	b118      	cbz	r0, 8007ba6 <_fflush_r+0x1a>
 8007b9e:	6a03      	ldr	r3, [r0, #32]
 8007ba0:	b90b      	cbnz	r3, 8007ba6 <_fflush_r+0x1a>
 8007ba2:	f7ff fd4b 	bl	800763c <__sinit>
 8007ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0f3      	beq.n	8007b96 <_fflush_r+0xa>
 8007bae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bb0:	07d0      	lsls	r0, r2, #31
 8007bb2:	d404      	bmi.n	8007bbe <_fflush_r+0x32>
 8007bb4:	0599      	lsls	r1, r3, #22
 8007bb6:	d402      	bmi.n	8007bbe <_fflush_r+0x32>
 8007bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bba:	f7ff fe32 	bl	8007822 <__retarget_lock_acquire_recursive>
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	f7ff ff61 	bl	8007a88 <__sflush_r>
 8007bc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bc8:	4605      	mov	r5, r0
 8007bca:	07da      	lsls	r2, r3, #31
 8007bcc:	d4e4      	bmi.n	8007b98 <_fflush_r+0xc>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	059b      	lsls	r3, r3, #22
 8007bd2:	d4e1      	bmi.n	8007b98 <_fflush_r+0xc>
 8007bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd6:	f7ff fe25 	bl	8007824 <__retarget_lock_release_recursive>
 8007bda:	e7dd      	b.n	8007b98 <_fflush_r+0xc>

08007bdc <fiprintf>:
 8007bdc:	b40e      	push	{r1, r2, r3}
 8007bde:	b503      	push	{r0, r1, lr}
 8007be0:	4601      	mov	r1, r0
 8007be2:	ab03      	add	r3, sp, #12
 8007be4:	4805      	ldr	r0, [pc, #20]	; (8007bfc <fiprintf+0x20>)
 8007be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	f000 f845 	bl	8007c7c <_vfiprintf_r>
 8007bf2:	b002      	add	sp, #8
 8007bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf8:	b003      	add	sp, #12
 8007bfa:	4770      	bx	lr
 8007bfc:	20000070 	.word	0x20000070

08007c00 <_sbrk_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	2300      	movs	r3, #0
 8007c04:	4d05      	ldr	r5, [pc, #20]	; (8007c1c <_sbrk_r+0x1c>)
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	602b      	str	r3, [r5, #0]
 8007c0c:	f7fa fb6c 	bl	80022e8 <_sbrk>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_sbrk_r+0x1a>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_sbrk_r+0x1a>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20002544 	.word	0x20002544

08007c20 <abort>:
 8007c20:	2006      	movs	r0, #6
 8007c22:	b508      	push	{r3, lr}
 8007c24:	f000 fb96 	bl	8008354 <raise>
 8007c28:	2001      	movs	r0, #1
 8007c2a:	f7fa fb31 	bl	8002290 <_exit>

08007c2e <__sfputc_r>:
 8007c2e:	6893      	ldr	r3, [r2, #8]
 8007c30:	b410      	push	{r4}
 8007c32:	3b01      	subs	r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	6093      	str	r3, [r2, #8]
 8007c38:	da07      	bge.n	8007c4a <__sfputc_r+0x1c>
 8007c3a:	6994      	ldr	r4, [r2, #24]
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	db01      	blt.n	8007c44 <__sfputc_r+0x16>
 8007c40:	290a      	cmp	r1, #10
 8007c42:	d102      	bne.n	8007c4a <__sfputc_r+0x1c>
 8007c44:	bc10      	pop	{r4}
 8007c46:	f000 bac7 	b.w	80081d8 <__swbuf_r>
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	1c58      	adds	r0, r3, #1
 8007c4e:	6010      	str	r0, [r2, #0]
 8007c50:	7019      	strb	r1, [r3, #0]
 8007c52:	4608      	mov	r0, r1
 8007c54:	bc10      	pop	{r4}
 8007c56:	4770      	bx	lr

08007c58 <__sfputs_r>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	460f      	mov	r7, r1
 8007c5e:	4614      	mov	r4, r2
 8007c60:	18d5      	adds	r5, r2, r3
 8007c62:	42ac      	cmp	r4, r5
 8007c64:	d101      	bne.n	8007c6a <__sfputs_r+0x12>
 8007c66:	2000      	movs	r0, #0
 8007c68:	e007      	b.n	8007c7a <__sfputs_r+0x22>
 8007c6a:	463a      	mov	r2, r7
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c72:	f7ff ffdc 	bl	8007c2e <__sfputc_r>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	d1f3      	bne.n	8007c62 <__sfputs_r+0xa>
 8007c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c7c <_vfiprintf_r>:
 8007c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	460d      	mov	r5, r1
 8007c82:	4614      	mov	r4, r2
 8007c84:	4698      	mov	r8, r3
 8007c86:	4606      	mov	r6, r0
 8007c88:	b09d      	sub	sp, #116	; 0x74
 8007c8a:	b118      	cbz	r0, 8007c94 <_vfiprintf_r+0x18>
 8007c8c:	6a03      	ldr	r3, [r0, #32]
 8007c8e:	b90b      	cbnz	r3, 8007c94 <_vfiprintf_r+0x18>
 8007c90:	f7ff fcd4 	bl	800763c <__sinit>
 8007c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c96:	07d9      	lsls	r1, r3, #31
 8007c98:	d405      	bmi.n	8007ca6 <_vfiprintf_r+0x2a>
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	059a      	lsls	r2, r3, #22
 8007c9e:	d402      	bmi.n	8007ca6 <_vfiprintf_r+0x2a>
 8007ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ca2:	f7ff fdbe 	bl	8007822 <__retarget_lock_acquire_recursive>
 8007ca6:	89ab      	ldrh	r3, [r5, #12]
 8007ca8:	071b      	lsls	r3, r3, #28
 8007caa:	d501      	bpl.n	8007cb0 <_vfiprintf_r+0x34>
 8007cac:	692b      	ldr	r3, [r5, #16]
 8007cae:	b99b      	cbnz	r3, 8007cd8 <_vfiprintf_r+0x5c>
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f000 face 	bl	8008254 <__swsetup_r>
 8007cb8:	b170      	cbz	r0, 8007cd8 <_vfiprintf_r+0x5c>
 8007cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cbc:	07dc      	lsls	r4, r3, #31
 8007cbe:	d504      	bpl.n	8007cca <_vfiprintf_r+0x4e>
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	b01d      	add	sp, #116	; 0x74
 8007cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	0598      	lsls	r0, r3, #22
 8007cce:	d4f7      	bmi.n	8007cc0 <_vfiprintf_r+0x44>
 8007cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cd2:	f7ff fda7 	bl	8007824 <__retarget_lock_release_recursive>
 8007cd6:	e7f3      	b.n	8007cc0 <_vfiprintf_r+0x44>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9309      	str	r3, [sp, #36]	; 0x24
 8007cdc:	2320      	movs	r3, #32
 8007cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ce2:	2330      	movs	r3, #48	; 0x30
 8007ce4:	f04f 0901 	mov.w	r9, #1
 8007ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007e9c <_vfiprintf_r+0x220>
 8007cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf4:	4623      	mov	r3, r4
 8007cf6:	469a      	mov	sl, r3
 8007cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cfc:	b10a      	cbz	r2, 8007d02 <_vfiprintf_r+0x86>
 8007cfe:	2a25      	cmp	r2, #37	; 0x25
 8007d00:	d1f9      	bne.n	8007cf6 <_vfiprintf_r+0x7a>
 8007d02:	ebba 0b04 	subs.w	fp, sl, r4
 8007d06:	d00b      	beq.n	8007d20 <_vfiprintf_r+0xa4>
 8007d08:	465b      	mov	r3, fp
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7ff ffa2 	bl	8007c58 <__sfputs_r>
 8007d14:	3001      	adds	r0, #1
 8007d16:	f000 80a9 	beq.w	8007e6c <_vfiprintf_r+0x1f0>
 8007d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d1c:	445a      	add	r2, fp
 8007d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d20:	f89a 3000 	ldrb.w	r3, [sl]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80a1 	beq.w	8007e6c <_vfiprintf_r+0x1f0>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d34:	f10a 0a01 	add.w	sl, sl, #1
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	9307      	str	r3, [sp, #28]
 8007d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d40:	931a      	str	r3, [sp, #104]	; 0x68
 8007d42:	4654      	mov	r4, sl
 8007d44:	2205      	movs	r2, #5
 8007d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d4a:	4854      	ldr	r0, [pc, #336]	; (8007e9c <_vfiprintf_r+0x220>)
 8007d4c:	f000 fb1e 	bl	800838c <memchr>
 8007d50:	9a04      	ldr	r2, [sp, #16]
 8007d52:	b9d8      	cbnz	r0, 8007d8c <_vfiprintf_r+0x110>
 8007d54:	06d1      	lsls	r1, r2, #27
 8007d56:	bf44      	itt	mi
 8007d58:	2320      	movmi	r3, #32
 8007d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5e:	0713      	lsls	r3, r2, #28
 8007d60:	bf44      	itt	mi
 8007d62:	232b      	movmi	r3, #43	; 0x2b
 8007d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d68:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d6e:	d015      	beq.n	8007d9c <_vfiprintf_r+0x120>
 8007d70:	4654      	mov	r4, sl
 8007d72:	2000      	movs	r0, #0
 8007d74:	f04f 0c0a 	mov.w	ip, #10
 8007d78:	9a07      	ldr	r2, [sp, #28]
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d80:	3b30      	subs	r3, #48	; 0x30
 8007d82:	2b09      	cmp	r3, #9
 8007d84:	d94d      	bls.n	8007e22 <_vfiprintf_r+0x1a6>
 8007d86:	b1b0      	cbz	r0, 8007db6 <_vfiprintf_r+0x13a>
 8007d88:	9207      	str	r2, [sp, #28]
 8007d8a:	e014      	b.n	8007db6 <_vfiprintf_r+0x13a>
 8007d8c:	eba0 0308 	sub.w	r3, r0, r8
 8007d90:	fa09 f303 	lsl.w	r3, r9, r3
 8007d94:	4313      	orrs	r3, r2
 8007d96:	46a2      	mov	sl, r4
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	e7d2      	b.n	8007d42 <_vfiprintf_r+0xc6>
 8007d9c:	9b03      	ldr	r3, [sp, #12]
 8007d9e:	1d19      	adds	r1, r3, #4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	9103      	str	r1, [sp, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bfbb      	ittet	lt
 8007da8:	425b      	neglt	r3, r3
 8007daa:	f042 0202 	orrlt.w	r2, r2, #2
 8007dae:	9307      	strge	r3, [sp, #28]
 8007db0:	9307      	strlt	r3, [sp, #28]
 8007db2:	bfb8      	it	lt
 8007db4:	9204      	strlt	r2, [sp, #16]
 8007db6:	7823      	ldrb	r3, [r4, #0]
 8007db8:	2b2e      	cmp	r3, #46	; 0x2e
 8007dba:	d10c      	bne.n	8007dd6 <_vfiprintf_r+0x15a>
 8007dbc:	7863      	ldrb	r3, [r4, #1]
 8007dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc0:	d134      	bne.n	8007e2c <_vfiprintf_r+0x1b0>
 8007dc2:	9b03      	ldr	r3, [sp, #12]
 8007dc4:	3402      	adds	r4, #2
 8007dc6:	1d1a      	adds	r2, r3, #4
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	9203      	str	r2, [sp, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bfb8      	it	lt
 8007dd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dd4:	9305      	str	r3, [sp, #20]
 8007dd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ea0 <_vfiprintf_r+0x224>
 8007dda:	2203      	movs	r2, #3
 8007ddc:	4650      	mov	r0, sl
 8007dde:	7821      	ldrb	r1, [r4, #0]
 8007de0:	f000 fad4 	bl	800838c <memchr>
 8007de4:	b138      	cbz	r0, 8007df6 <_vfiprintf_r+0x17a>
 8007de6:	2240      	movs	r2, #64	; 0x40
 8007de8:	9b04      	ldr	r3, [sp, #16]
 8007dea:	eba0 000a 	sub.w	r0, r0, sl
 8007dee:	4082      	lsls	r2, r0
 8007df0:	4313      	orrs	r3, r2
 8007df2:	3401      	adds	r4, #1
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dfa:	2206      	movs	r2, #6
 8007dfc:	4829      	ldr	r0, [pc, #164]	; (8007ea4 <_vfiprintf_r+0x228>)
 8007dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e02:	f000 fac3 	bl	800838c <memchr>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d03f      	beq.n	8007e8a <_vfiprintf_r+0x20e>
 8007e0a:	4b27      	ldr	r3, [pc, #156]	; (8007ea8 <_vfiprintf_r+0x22c>)
 8007e0c:	bb1b      	cbnz	r3, 8007e56 <_vfiprintf_r+0x1da>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	f023 0307 	bic.w	r3, r3, #7
 8007e16:	3308      	adds	r3, #8
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1c:	443b      	add	r3, r7
 8007e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e20:	e768      	b.n	8007cf4 <_vfiprintf_r+0x78>
 8007e22:	460c      	mov	r4, r1
 8007e24:	2001      	movs	r0, #1
 8007e26:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e2a:	e7a6      	b.n	8007d7a <_vfiprintf_r+0xfe>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f04f 0c0a 	mov.w	ip, #10
 8007e32:	4619      	mov	r1, r3
 8007e34:	3401      	adds	r4, #1
 8007e36:	9305      	str	r3, [sp, #20]
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3e:	3a30      	subs	r2, #48	; 0x30
 8007e40:	2a09      	cmp	r2, #9
 8007e42:	d903      	bls.n	8007e4c <_vfiprintf_r+0x1d0>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0c6      	beq.n	8007dd6 <_vfiprintf_r+0x15a>
 8007e48:	9105      	str	r1, [sp, #20]
 8007e4a:	e7c4      	b.n	8007dd6 <_vfiprintf_r+0x15a>
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	2301      	movs	r3, #1
 8007e50:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e54:	e7f0      	b.n	8007e38 <_vfiprintf_r+0x1bc>
 8007e56:	ab03      	add	r3, sp, #12
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	462a      	mov	r2, r5
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <_vfiprintf_r+0x230>)
 8007e60:	a904      	add	r1, sp, #16
 8007e62:	f3af 8000 	nop.w
 8007e66:	4607      	mov	r7, r0
 8007e68:	1c78      	adds	r0, r7, #1
 8007e6a:	d1d6      	bne.n	8007e1a <_vfiprintf_r+0x19e>
 8007e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e6e:	07d9      	lsls	r1, r3, #31
 8007e70:	d405      	bmi.n	8007e7e <_vfiprintf_r+0x202>
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	059a      	lsls	r2, r3, #22
 8007e76:	d402      	bmi.n	8007e7e <_vfiprintf_r+0x202>
 8007e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e7a:	f7ff fcd3 	bl	8007824 <__retarget_lock_release_recursive>
 8007e7e:	89ab      	ldrh	r3, [r5, #12]
 8007e80:	065b      	lsls	r3, r3, #25
 8007e82:	f53f af1d 	bmi.w	8007cc0 <_vfiprintf_r+0x44>
 8007e86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e88:	e71c      	b.n	8007cc4 <_vfiprintf_r+0x48>
 8007e8a:	ab03      	add	r3, sp, #12
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	462a      	mov	r2, r5
 8007e90:	4630      	mov	r0, r6
 8007e92:	4b06      	ldr	r3, [pc, #24]	; (8007eac <_vfiprintf_r+0x230>)
 8007e94:	a904      	add	r1, sp, #16
 8007e96:	f000 f87d 	bl	8007f94 <_printf_i>
 8007e9a:	e7e4      	b.n	8007e66 <_vfiprintf_r+0x1ea>
 8007e9c:	0800924c 	.word	0x0800924c
 8007ea0:	08009252 	.word	0x08009252
 8007ea4:	08009256 	.word	0x08009256
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	08007c59 	.word	0x08007c59

08007eb0 <_printf_common>:
 8007eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	4699      	mov	r9, r3
 8007eb8:	688a      	ldr	r2, [r1, #8]
 8007eba:	690b      	ldr	r3, [r1, #16]
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	bfb8      	it	lt
 8007ec2:	4613      	movlt	r3, r2
 8007ec4:	6033      	str	r3, [r6, #0]
 8007ec6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007eca:	460c      	mov	r4, r1
 8007ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ed0:	b10a      	cbz	r2, 8007ed6 <_printf_common+0x26>
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	6033      	str	r3, [r6, #0]
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	0699      	lsls	r1, r3, #26
 8007eda:	bf42      	ittt	mi
 8007edc:	6833      	ldrmi	r3, [r6, #0]
 8007ede:	3302      	addmi	r3, #2
 8007ee0:	6033      	strmi	r3, [r6, #0]
 8007ee2:	6825      	ldr	r5, [r4, #0]
 8007ee4:	f015 0506 	ands.w	r5, r5, #6
 8007ee8:	d106      	bne.n	8007ef8 <_printf_common+0x48>
 8007eea:	f104 0a19 	add.w	sl, r4, #25
 8007eee:	68e3      	ldr	r3, [r4, #12]
 8007ef0:	6832      	ldr	r2, [r6, #0]
 8007ef2:	1a9b      	subs	r3, r3, r2
 8007ef4:	42ab      	cmp	r3, r5
 8007ef6:	dc2b      	bgt.n	8007f50 <_printf_common+0xa0>
 8007ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007efc:	1e13      	subs	r3, r2, #0
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	bf18      	it	ne
 8007f02:	2301      	movne	r3, #1
 8007f04:	0692      	lsls	r2, r2, #26
 8007f06:	d430      	bmi.n	8007f6a <_printf_common+0xba>
 8007f08:	4649      	mov	r1, r9
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f10:	47c0      	blx	r8
 8007f12:	3001      	adds	r0, #1
 8007f14:	d023      	beq.n	8007f5e <_printf_common+0xae>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	6922      	ldr	r2, [r4, #16]
 8007f1a:	f003 0306 	and.w	r3, r3, #6
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	bf14      	ite	ne
 8007f22:	2500      	movne	r5, #0
 8007f24:	6833      	ldreq	r3, [r6, #0]
 8007f26:	f04f 0600 	mov.w	r6, #0
 8007f2a:	bf08      	it	eq
 8007f2c:	68e5      	ldreq	r5, [r4, #12]
 8007f2e:	f104 041a 	add.w	r4, r4, #26
 8007f32:	bf08      	it	eq
 8007f34:	1aed      	subeq	r5, r5, r3
 8007f36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007f3a:	bf08      	it	eq
 8007f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f40:	4293      	cmp	r3, r2
 8007f42:	bfc4      	itt	gt
 8007f44:	1a9b      	subgt	r3, r3, r2
 8007f46:	18ed      	addgt	r5, r5, r3
 8007f48:	42b5      	cmp	r5, r6
 8007f4a:	d11a      	bne.n	8007f82 <_printf_common+0xd2>
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	e008      	b.n	8007f62 <_printf_common+0xb2>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4652      	mov	r2, sl
 8007f54:	4649      	mov	r1, r9
 8007f56:	4638      	mov	r0, r7
 8007f58:	47c0      	blx	r8
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d103      	bne.n	8007f66 <_printf_common+0xb6>
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f66:	3501      	adds	r5, #1
 8007f68:	e7c1      	b.n	8007eee <_printf_common+0x3e>
 8007f6a:	2030      	movs	r0, #48	; 0x30
 8007f6c:	18e1      	adds	r1, r4, r3
 8007f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f78:	4422      	add	r2, r4
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f80:	e7c2      	b.n	8007f08 <_printf_common+0x58>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4622      	mov	r2, r4
 8007f86:	4649      	mov	r1, r9
 8007f88:	4638      	mov	r0, r7
 8007f8a:	47c0      	blx	r8
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d0e6      	beq.n	8007f5e <_printf_common+0xae>
 8007f90:	3601      	adds	r6, #1
 8007f92:	e7d9      	b.n	8007f48 <_printf_common+0x98>

08007f94 <_printf_i>:
 8007f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	7e0f      	ldrb	r7, [r1, #24]
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	2f78      	cmp	r7, #120	; 0x78
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	469a      	mov	sl, r3
 8007fa4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007faa:	d807      	bhi.n	8007fbc <_printf_i+0x28>
 8007fac:	2f62      	cmp	r7, #98	; 0x62
 8007fae:	d80a      	bhi.n	8007fc6 <_printf_i+0x32>
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	f000 80d5 	beq.w	8008160 <_printf_i+0x1cc>
 8007fb6:	2f58      	cmp	r7, #88	; 0x58
 8007fb8:	f000 80c1 	beq.w	800813e <_printf_i+0x1aa>
 8007fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fc4:	e03a      	b.n	800803c <_printf_i+0xa8>
 8007fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fca:	2b15      	cmp	r3, #21
 8007fcc:	d8f6      	bhi.n	8007fbc <_printf_i+0x28>
 8007fce:	a101      	add	r1, pc, #4	; (adr r1, 8007fd4 <_printf_i+0x40>)
 8007fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd4:	0800802d 	.word	0x0800802d
 8007fd8:	08008041 	.word	0x08008041
 8007fdc:	08007fbd 	.word	0x08007fbd
 8007fe0:	08007fbd 	.word	0x08007fbd
 8007fe4:	08007fbd 	.word	0x08007fbd
 8007fe8:	08007fbd 	.word	0x08007fbd
 8007fec:	08008041 	.word	0x08008041
 8007ff0:	08007fbd 	.word	0x08007fbd
 8007ff4:	08007fbd 	.word	0x08007fbd
 8007ff8:	08007fbd 	.word	0x08007fbd
 8007ffc:	08007fbd 	.word	0x08007fbd
 8008000:	08008147 	.word	0x08008147
 8008004:	0800806d 	.word	0x0800806d
 8008008:	08008101 	.word	0x08008101
 800800c:	08007fbd 	.word	0x08007fbd
 8008010:	08007fbd 	.word	0x08007fbd
 8008014:	08008169 	.word	0x08008169
 8008018:	08007fbd 	.word	0x08007fbd
 800801c:	0800806d 	.word	0x0800806d
 8008020:	08007fbd 	.word	0x08007fbd
 8008024:	08007fbd 	.word	0x08007fbd
 8008028:	08008109 	.word	0x08008109
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	1d1a      	adds	r2, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	602a      	str	r2, [r5, #0]
 8008034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800803c:	2301      	movs	r3, #1
 800803e:	e0a0      	b.n	8008182 <_printf_i+0x1ee>
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	682b      	ldr	r3, [r5, #0]
 8008044:	0607      	lsls	r7, r0, #24
 8008046:	f103 0104 	add.w	r1, r3, #4
 800804a:	6029      	str	r1, [r5, #0]
 800804c:	d501      	bpl.n	8008052 <_printf_i+0xbe>
 800804e:	681e      	ldr	r6, [r3, #0]
 8008050:	e003      	b.n	800805a <_printf_i+0xc6>
 8008052:	0646      	lsls	r6, r0, #25
 8008054:	d5fb      	bpl.n	800804e <_printf_i+0xba>
 8008056:	f9b3 6000 	ldrsh.w	r6, [r3]
 800805a:	2e00      	cmp	r6, #0
 800805c:	da03      	bge.n	8008066 <_printf_i+0xd2>
 800805e:	232d      	movs	r3, #45	; 0x2d
 8008060:	4276      	negs	r6, r6
 8008062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008066:	230a      	movs	r3, #10
 8008068:	4859      	ldr	r0, [pc, #356]	; (80081d0 <_printf_i+0x23c>)
 800806a:	e012      	b.n	8008092 <_printf_i+0xfe>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	1d19      	adds	r1, r3, #4
 8008072:	6029      	str	r1, [r5, #0]
 8008074:	0605      	lsls	r5, r0, #24
 8008076:	d501      	bpl.n	800807c <_printf_i+0xe8>
 8008078:	681e      	ldr	r6, [r3, #0]
 800807a:	e002      	b.n	8008082 <_printf_i+0xee>
 800807c:	0641      	lsls	r1, r0, #25
 800807e:	d5fb      	bpl.n	8008078 <_printf_i+0xe4>
 8008080:	881e      	ldrh	r6, [r3, #0]
 8008082:	2f6f      	cmp	r7, #111	; 0x6f
 8008084:	bf0c      	ite	eq
 8008086:	2308      	moveq	r3, #8
 8008088:	230a      	movne	r3, #10
 800808a:	4851      	ldr	r0, [pc, #324]	; (80081d0 <_printf_i+0x23c>)
 800808c:	2100      	movs	r1, #0
 800808e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008092:	6865      	ldr	r5, [r4, #4]
 8008094:	2d00      	cmp	r5, #0
 8008096:	bfa8      	it	ge
 8008098:	6821      	ldrge	r1, [r4, #0]
 800809a:	60a5      	str	r5, [r4, #8]
 800809c:	bfa4      	itt	ge
 800809e:	f021 0104 	bicge.w	r1, r1, #4
 80080a2:	6021      	strge	r1, [r4, #0]
 80080a4:	b90e      	cbnz	r6, 80080aa <_printf_i+0x116>
 80080a6:	2d00      	cmp	r5, #0
 80080a8:	d04b      	beq.n	8008142 <_printf_i+0x1ae>
 80080aa:	4615      	mov	r5, r2
 80080ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80080b0:	fb03 6711 	mls	r7, r3, r1, r6
 80080b4:	5dc7      	ldrb	r7, [r0, r7]
 80080b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080ba:	4637      	mov	r7, r6
 80080bc:	42bb      	cmp	r3, r7
 80080be:	460e      	mov	r6, r1
 80080c0:	d9f4      	bls.n	80080ac <_printf_i+0x118>
 80080c2:	2b08      	cmp	r3, #8
 80080c4:	d10b      	bne.n	80080de <_printf_i+0x14a>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	07de      	lsls	r6, r3, #31
 80080ca:	d508      	bpl.n	80080de <_printf_i+0x14a>
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	6861      	ldr	r1, [r4, #4]
 80080d0:	4299      	cmp	r1, r3
 80080d2:	bfde      	ittt	le
 80080d4:	2330      	movle	r3, #48	; 0x30
 80080d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080de:	1b52      	subs	r2, r2, r5
 80080e0:	6122      	str	r2, [r4, #16]
 80080e2:	464b      	mov	r3, r9
 80080e4:	4621      	mov	r1, r4
 80080e6:	4640      	mov	r0, r8
 80080e8:	f8cd a000 	str.w	sl, [sp]
 80080ec:	aa03      	add	r2, sp, #12
 80080ee:	f7ff fedf 	bl	8007eb0 <_printf_common>
 80080f2:	3001      	adds	r0, #1
 80080f4:	d14a      	bne.n	800818c <_printf_i+0x1f8>
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295
 80080fa:	b004      	add	sp, #16
 80080fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	f043 0320 	orr.w	r3, r3, #32
 8008106:	6023      	str	r3, [r4, #0]
 8008108:	2778      	movs	r7, #120	; 0x78
 800810a:	4832      	ldr	r0, [pc, #200]	; (80081d4 <_printf_i+0x240>)
 800810c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	6829      	ldr	r1, [r5, #0]
 8008114:	061f      	lsls	r7, r3, #24
 8008116:	f851 6b04 	ldr.w	r6, [r1], #4
 800811a:	d402      	bmi.n	8008122 <_printf_i+0x18e>
 800811c:	065f      	lsls	r7, r3, #25
 800811e:	bf48      	it	mi
 8008120:	b2b6      	uxthmi	r6, r6
 8008122:	07df      	lsls	r7, r3, #31
 8008124:	bf48      	it	mi
 8008126:	f043 0320 	orrmi.w	r3, r3, #32
 800812a:	6029      	str	r1, [r5, #0]
 800812c:	bf48      	it	mi
 800812e:	6023      	strmi	r3, [r4, #0]
 8008130:	b91e      	cbnz	r6, 800813a <_printf_i+0x1a6>
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	f023 0320 	bic.w	r3, r3, #32
 8008138:	6023      	str	r3, [r4, #0]
 800813a:	2310      	movs	r3, #16
 800813c:	e7a6      	b.n	800808c <_printf_i+0xf8>
 800813e:	4824      	ldr	r0, [pc, #144]	; (80081d0 <_printf_i+0x23c>)
 8008140:	e7e4      	b.n	800810c <_printf_i+0x178>
 8008142:	4615      	mov	r5, r2
 8008144:	e7bd      	b.n	80080c2 <_printf_i+0x12e>
 8008146:	682b      	ldr	r3, [r5, #0]
 8008148:	6826      	ldr	r6, [r4, #0]
 800814a:	1d18      	adds	r0, r3, #4
 800814c:	6961      	ldr	r1, [r4, #20]
 800814e:	6028      	str	r0, [r5, #0]
 8008150:	0635      	lsls	r5, r6, #24
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	d501      	bpl.n	800815a <_printf_i+0x1c6>
 8008156:	6019      	str	r1, [r3, #0]
 8008158:	e002      	b.n	8008160 <_printf_i+0x1cc>
 800815a:	0670      	lsls	r0, r6, #25
 800815c:	d5fb      	bpl.n	8008156 <_printf_i+0x1c2>
 800815e:	8019      	strh	r1, [r3, #0]
 8008160:	2300      	movs	r3, #0
 8008162:	4615      	mov	r5, r2
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	e7bc      	b.n	80080e2 <_printf_i+0x14e>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	2100      	movs	r1, #0
 800816c:	1d1a      	adds	r2, r3, #4
 800816e:	602a      	str	r2, [r5, #0]
 8008170:	681d      	ldr	r5, [r3, #0]
 8008172:	6862      	ldr	r2, [r4, #4]
 8008174:	4628      	mov	r0, r5
 8008176:	f000 f909 	bl	800838c <memchr>
 800817a:	b108      	cbz	r0, 8008180 <_printf_i+0x1ec>
 800817c:	1b40      	subs	r0, r0, r5
 800817e:	6060      	str	r0, [r4, #4]
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	2300      	movs	r3, #0
 8008186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800818a:	e7aa      	b.n	80080e2 <_printf_i+0x14e>
 800818c:	462a      	mov	r2, r5
 800818e:	4649      	mov	r1, r9
 8008190:	4640      	mov	r0, r8
 8008192:	6923      	ldr	r3, [r4, #16]
 8008194:	47d0      	blx	sl
 8008196:	3001      	adds	r0, #1
 8008198:	d0ad      	beq.n	80080f6 <_printf_i+0x162>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	079b      	lsls	r3, r3, #30
 800819e:	d413      	bmi.n	80081c8 <_printf_i+0x234>
 80081a0:	68e0      	ldr	r0, [r4, #12]
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	4298      	cmp	r0, r3
 80081a6:	bfb8      	it	lt
 80081a8:	4618      	movlt	r0, r3
 80081aa:	e7a6      	b.n	80080fa <_printf_i+0x166>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4632      	mov	r2, r6
 80081b0:	4649      	mov	r1, r9
 80081b2:	4640      	mov	r0, r8
 80081b4:	47d0      	blx	sl
 80081b6:	3001      	adds	r0, #1
 80081b8:	d09d      	beq.n	80080f6 <_printf_i+0x162>
 80081ba:	3501      	adds	r5, #1
 80081bc:	68e3      	ldr	r3, [r4, #12]
 80081be:	9903      	ldr	r1, [sp, #12]
 80081c0:	1a5b      	subs	r3, r3, r1
 80081c2:	42ab      	cmp	r3, r5
 80081c4:	dcf2      	bgt.n	80081ac <_printf_i+0x218>
 80081c6:	e7eb      	b.n	80081a0 <_printf_i+0x20c>
 80081c8:	2500      	movs	r5, #0
 80081ca:	f104 0619 	add.w	r6, r4, #25
 80081ce:	e7f5      	b.n	80081bc <_printf_i+0x228>
 80081d0:	0800925d 	.word	0x0800925d
 80081d4:	0800926e 	.word	0x0800926e

080081d8 <__swbuf_r>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	460e      	mov	r6, r1
 80081dc:	4614      	mov	r4, r2
 80081de:	4605      	mov	r5, r0
 80081e0:	b118      	cbz	r0, 80081ea <__swbuf_r+0x12>
 80081e2:	6a03      	ldr	r3, [r0, #32]
 80081e4:	b90b      	cbnz	r3, 80081ea <__swbuf_r+0x12>
 80081e6:	f7ff fa29 	bl	800763c <__sinit>
 80081ea:	69a3      	ldr	r3, [r4, #24]
 80081ec:	60a3      	str	r3, [r4, #8]
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	071a      	lsls	r2, r3, #28
 80081f2:	d525      	bpl.n	8008240 <__swbuf_r+0x68>
 80081f4:	6923      	ldr	r3, [r4, #16]
 80081f6:	b31b      	cbz	r3, 8008240 <__swbuf_r+0x68>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	6922      	ldr	r2, [r4, #16]
 80081fc:	b2f6      	uxtb	r6, r6
 80081fe:	1a98      	subs	r0, r3, r2
 8008200:	6963      	ldr	r3, [r4, #20]
 8008202:	4637      	mov	r7, r6
 8008204:	4283      	cmp	r3, r0
 8008206:	dc04      	bgt.n	8008212 <__swbuf_r+0x3a>
 8008208:	4621      	mov	r1, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f7ff fcbe 	bl	8007b8c <_fflush_r>
 8008210:	b9e0      	cbnz	r0, 800824c <__swbuf_r+0x74>
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	3b01      	subs	r3, #1
 8008216:	60a3      	str	r3, [r4, #8]
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	6022      	str	r2, [r4, #0]
 800821e:	701e      	strb	r6, [r3, #0]
 8008220:	6962      	ldr	r2, [r4, #20]
 8008222:	1c43      	adds	r3, r0, #1
 8008224:	429a      	cmp	r2, r3
 8008226:	d004      	beq.n	8008232 <__swbuf_r+0x5a>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	07db      	lsls	r3, r3, #31
 800822c:	d506      	bpl.n	800823c <__swbuf_r+0x64>
 800822e:	2e0a      	cmp	r6, #10
 8008230:	d104      	bne.n	800823c <__swbuf_r+0x64>
 8008232:	4621      	mov	r1, r4
 8008234:	4628      	mov	r0, r5
 8008236:	f7ff fca9 	bl	8007b8c <_fflush_r>
 800823a:	b938      	cbnz	r0, 800824c <__swbuf_r+0x74>
 800823c:	4638      	mov	r0, r7
 800823e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008240:	4621      	mov	r1, r4
 8008242:	4628      	mov	r0, r5
 8008244:	f000 f806 	bl	8008254 <__swsetup_r>
 8008248:	2800      	cmp	r0, #0
 800824a:	d0d5      	beq.n	80081f8 <__swbuf_r+0x20>
 800824c:	f04f 37ff 	mov.w	r7, #4294967295
 8008250:	e7f4      	b.n	800823c <__swbuf_r+0x64>
	...

08008254 <__swsetup_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4b2a      	ldr	r3, [pc, #168]	; (8008300 <__swsetup_r+0xac>)
 8008258:	4605      	mov	r5, r0
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	460c      	mov	r4, r1
 800825e:	b118      	cbz	r0, 8008268 <__swsetup_r+0x14>
 8008260:	6a03      	ldr	r3, [r0, #32]
 8008262:	b90b      	cbnz	r3, 8008268 <__swsetup_r+0x14>
 8008264:	f7ff f9ea 	bl	800763c <__sinit>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800826e:	0718      	lsls	r0, r3, #28
 8008270:	d422      	bmi.n	80082b8 <__swsetup_r+0x64>
 8008272:	06d9      	lsls	r1, r3, #27
 8008274:	d407      	bmi.n	8008286 <__swsetup_r+0x32>
 8008276:	2309      	movs	r3, #9
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800827e:	f04f 30ff 	mov.w	r0, #4294967295
 8008282:	81a3      	strh	r3, [r4, #12]
 8008284:	e034      	b.n	80082f0 <__swsetup_r+0x9c>
 8008286:	0758      	lsls	r0, r3, #29
 8008288:	d512      	bpl.n	80082b0 <__swsetup_r+0x5c>
 800828a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800828c:	b141      	cbz	r1, 80082a0 <__swsetup_r+0x4c>
 800828e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008292:	4299      	cmp	r1, r3
 8008294:	d002      	beq.n	800829c <__swsetup_r+0x48>
 8008296:	4628      	mov	r0, r5
 8008298:	f7ff fafa 	bl	8007890 <_free_r>
 800829c:	2300      	movs	r3, #0
 800829e:	6363      	str	r3, [r4, #52]	; 0x34
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082a6:	81a3      	strh	r3, [r4, #12]
 80082a8:	2300      	movs	r3, #0
 80082aa:	6063      	str	r3, [r4, #4]
 80082ac:	6923      	ldr	r3, [r4, #16]
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f043 0308 	orr.w	r3, r3, #8
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	b94b      	cbnz	r3, 80082d0 <__swsetup_r+0x7c>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c6:	d003      	beq.n	80082d0 <__swsetup_r+0x7c>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4628      	mov	r0, r5
 80082cc:	f000 f891 	bl	80083f2 <__smakebuf_r>
 80082d0:	89a0      	ldrh	r0, [r4, #12]
 80082d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d6:	f010 0301 	ands.w	r3, r0, #1
 80082da:	d00a      	beq.n	80082f2 <__swsetup_r+0x9e>
 80082dc:	2300      	movs	r3, #0
 80082de:	60a3      	str	r3, [r4, #8]
 80082e0:	6963      	ldr	r3, [r4, #20]
 80082e2:	425b      	negs	r3, r3
 80082e4:	61a3      	str	r3, [r4, #24]
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	b943      	cbnz	r3, 80082fc <__swsetup_r+0xa8>
 80082ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082ee:	d1c4      	bne.n	800827a <__swsetup_r+0x26>
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	0781      	lsls	r1, r0, #30
 80082f4:	bf58      	it	pl
 80082f6:	6963      	ldrpl	r3, [r4, #20]
 80082f8:	60a3      	str	r3, [r4, #8]
 80082fa:	e7f4      	b.n	80082e6 <__swsetup_r+0x92>
 80082fc:	2000      	movs	r0, #0
 80082fe:	e7f7      	b.n	80082f0 <__swsetup_r+0x9c>
 8008300:	20000070 	.word	0x20000070

08008304 <_raise_r>:
 8008304:	291f      	cmp	r1, #31
 8008306:	b538      	push	{r3, r4, r5, lr}
 8008308:	4604      	mov	r4, r0
 800830a:	460d      	mov	r5, r1
 800830c:	d904      	bls.n	8008318 <_raise_r+0x14>
 800830e:	2316      	movs	r3, #22
 8008310:	6003      	str	r3, [r0, #0]
 8008312:	f04f 30ff 	mov.w	r0, #4294967295
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800831a:	b112      	cbz	r2, 8008322 <_raise_r+0x1e>
 800831c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008320:	b94b      	cbnz	r3, 8008336 <_raise_r+0x32>
 8008322:	4620      	mov	r0, r4
 8008324:	f000 f830 	bl	8008388 <_getpid_r>
 8008328:	462a      	mov	r2, r5
 800832a:	4601      	mov	r1, r0
 800832c:	4620      	mov	r0, r4
 800832e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008332:	f000 b817 	b.w	8008364 <_kill_r>
 8008336:	2b01      	cmp	r3, #1
 8008338:	d00a      	beq.n	8008350 <_raise_r+0x4c>
 800833a:	1c59      	adds	r1, r3, #1
 800833c:	d103      	bne.n	8008346 <_raise_r+0x42>
 800833e:	2316      	movs	r3, #22
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	2001      	movs	r0, #1
 8008344:	e7e7      	b.n	8008316 <_raise_r+0x12>
 8008346:	2400      	movs	r4, #0
 8008348:	4628      	mov	r0, r5
 800834a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800834e:	4798      	blx	r3
 8008350:	2000      	movs	r0, #0
 8008352:	e7e0      	b.n	8008316 <_raise_r+0x12>

08008354 <raise>:
 8008354:	4b02      	ldr	r3, [pc, #8]	; (8008360 <raise+0xc>)
 8008356:	4601      	mov	r1, r0
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f7ff bfd3 	b.w	8008304 <_raise_r>
 800835e:	bf00      	nop
 8008360:	20000070 	.word	0x20000070

08008364 <_kill_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	2300      	movs	r3, #0
 8008368:	4d06      	ldr	r5, [pc, #24]	; (8008384 <_kill_r+0x20>)
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	4611      	mov	r1, r2
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	f7f9 ff85 	bl	8002280 <_kill>
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	d102      	bne.n	8008380 <_kill_r+0x1c>
 800837a:	682b      	ldr	r3, [r5, #0]
 800837c:	b103      	cbz	r3, 8008380 <_kill_r+0x1c>
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	bd38      	pop	{r3, r4, r5, pc}
 8008382:	bf00      	nop
 8008384:	20002544 	.word	0x20002544

08008388 <_getpid_r>:
 8008388:	f7f9 bf78 	b.w	800227c <_getpid>

0800838c <memchr>:
 800838c:	4603      	mov	r3, r0
 800838e:	b510      	push	{r4, lr}
 8008390:	b2c9      	uxtb	r1, r1
 8008392:	4402      	add	r2, r0
 8008394:	4293      	cmp	r3, r2
 8008396:	4618      	mov	r0, r3
 8008398:	d101      	bne.n	800839e <memchr+0x12>
 800839a:	2000      	movs	r0, #0
 800839c:	e003      	b.n	80083a6 <memchr+0x1a>
 800839e:	7804      	ldrb	r4, [r0, #0]
 80083a0:	3301      	adds	r3, #1
 80083a2:	428c      	cmp	r4, r1
 80083a4:	d1f6      	bne.n	8008394 <memchr+0x8>
 80083a6:	bd10      	pop	{r4, pc}

080083a8 <__swhatbuf_r>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	460c      	mov	r4, r1
 80083ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b0:	4615      	mov	r5, r2
 80083b2:	2900      	cmp	r1, #0
 80083b4:	461e      	mov	r6, r3
 80083b6:	b096      	sub	sp, #88	; 0x58
 80083b8:	da0c      	bge.n	80083d4 <__swhatbuf_r+0x2c>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	2100      	movs	r1, #0
 80083be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083c2:	bf0c      	ite	eq
 80083c4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80083c8:	2340      	movne	r3, #64	; 0x40
 80083ca:	2000      	movs	r0, #0
 80083cc:	6031      	str	r1, [r6, #0]
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	b016      	add	sp, #88	; 0x58
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	466a      	mov	r2, sp
 80083d6:	f000 f849 	bl	800846c <_fstat_r>
 80083da:	2800      	cmp	r0, #0
 80083dc:	dbed      	blt.n	80083ba <__swhatbuf_r+0x12>
 80083de:	9901      	ldr	r1, [sp, #4]
 80083e0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083e4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083e8:	4259      	negs	r1, r3
 80083ea:	4159      	adcs	r1, r3
 80083ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f0:	e7eb      	b.n	80083ca <__swhatbuf_r+0x22>

080083f2 <__smakebuf_r>:
 80083f2:	898b      	ldrh	r3, [r1, #12]
 80083f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083f6:	079d      	lsls	r5, r3, #30
 80083f8:	4606      	mov	r6, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	d507      	bpl.n	800840e <__smakebuf_r+0x1c>
 80083fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	2301      	movs	r3, #1
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	b002      	add	sp, #8
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	466a      	mov	r2, sp
 8008410:	ab01      	add	r3, sp, #4
 8008412:	f7ff ffc9 	bl	80083a8 <__swhatbuf_r>
 8008416:	9900      	ldr	r1, [sp, #0]
 8008418:	4605      	mov	r5, r0
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff faa8 	bl	8007970 <_malloc_r>
 8008420:	b948      	cbnz	r0, 8008436 <__smakebuf_r+0x44>
 8008422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008426:	059a      	lsls	r2, r3, #22
 8008428:	d4ef      	bmi.n	800840a <__smakebuf_r+0x18>
 800842a:	f023 0303 	bic.w	r3, r3, #3
 800842e:	f043 0302 	orr.w	r3, r3, #2
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	e7e3      	b.n	80083fe <__smakebuf_r+0xc>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	6020      	str	r0, [r4, #0]
 800843a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	6120      	str	r0, [r4, #16]
 8008444:	6163      	str	r3, [r4, #20]
 8008446:	9b01      	ldr	r3, [sp, #4]
 8008448:	b15b      	cbz	r3, 8008462 <__smakebuf_r+0x70>
 800844a:	4630      	mov	r0, r6
 800844c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008450:	f000 f81e 	bl	8008490 <_isatty_r>
 8008454:	b128      	cbz	r0, 8008462 <__smakebuf_r+0x70>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	431d      	orrs	r5, r3
 8008466:	81a5      	strh	r5, [r4, #12]
 8008468:	e7cf      	b.n	800840a <__smakebuf_r+0x18>
	...

0800846c <_fstat_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	2300      	movs	r3, #0
 8008470:	4d06      	ldr	r5, [pc, #24]	; (800848c <_fstat_r+0x20>)
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f7f9 ff2c 	bl	80022d6 <_fstat>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d102      	bne.n	8008488 <_fstat_r+0x1c>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	b103      	cbz	r3, 8008488 <_fstat_r+0x1c>
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20002544 	.word	0x20002544

08008490 <_isatty_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	2300      	movs	r3, #0
 8008494:	4d05      	ldr	r5, [pc, #20]	; (80084ac <_isatty_r+0x1c>)
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	f7f9 ff20 	bl	80022e0 <_isatty>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_isatty_r+0x1a>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_isatty_r+0x1a>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20002544 	.word	0x20002544

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
