
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a690  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c7c  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b41c  0800b41c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800b41c  0800b41c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b41c  0800b41c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b41c  0800b41c  0001b41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b420  0800b420  0001b420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800b424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002344  20000018  0800b43c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000235c  0800b43c  0002235c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b25d  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043fb  00000000  00000000  0003b2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  0003f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138f  00000000  00000000  00041008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad32  00000000  00000000  00042397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001edce  00000000  00000000  0005d0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b497  00000000  00000000  0007be97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a10  00000000  00000000  00117330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a788 	.word	0x0800a788

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	0800a788 	.word	0x0800a788

08000150 <getPlayer>:


extern dificultad_t dificultad;


player_t *getPlayer(){
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

	return &Player;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <getPlayer+0x10>)
}
 8000156:	4618      	mov	r0, r3
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000034 	.word	0x20000034

08000164 <getAlien>:

alien_t *getAlien(uint8_t fila, uint8_t columna){
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	460a      	mov	r2, r1
 800016e:	71fb      	strb	r3, [r7, #7]
 8000170:	4613      	mov	r3, r2
 8000172:	71bb      	strb	r3, [r7, #6]
	return &Alien[fila][columna];
 8000174:	79f9      	ldrb	r1, [r7, #7]
 8000176:	79bb      	ldrb	r3, [r7, #6]
 8000178:	461a      	mov	r2, r3
 800017a:	0092      	lsls	r2, r2, #2
 800017c:	441a      	add	r2, r3
 800017e:	460b      	mov	r3, r1
 8000180:	009b      	lsls	r3, r3, #2
 8000182:	440b      	add	r3, r1
 8000184:	00d9      	lsls	r1, r3, #3
 8000186:	1ac9      	subs	r1, r1, r3
 8000188:	1853      	adds	r3, r2, r1
 800018a:	4a03      	ldr	r2, [pc, #12]	; (8000198 <getAlien+0x34>)
 800018c:	4413      	add	r3, r2
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000040 	.word	0x20000040

0800019c <getMovAliens>:

movimiento_aliens_t *getMovAliens(){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	return &movimiento_Aliens;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <getMovAliens+0x10>)
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000003c 	.word	0x2000003c

080001b0 <getDisparo>:

disparo_t *getDisparo(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	return &Disparo;
 80001b4:	4b02      	ldr	r3, [pc, #8]	; (80001c0 <getDisparo+0x10>)
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000038 	.word	0x20000038

080001c4 <playerInit>:

void playerInit(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	Player.posicion_X = 64;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <playerInit+0x14>)
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	705a      	strb	r2, [r3, #1]

}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000034 	.word	0x20000034

080001dc <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af02      	add	r7, sp, #8
 80001e2:	4603      	mov	r3, r0
 80001e4:	6039      	str	r1, [r7, #0]
 80001e6:	71fb      	strb	r3, [r7, #7]

	if(direccion == derecha){
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10e      	bne.n	800020c <plotPlayer+0x30>

		if(player->posicion_X >= 120){
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	2b77      	cmp	r3, #119	; 0x77
 80001f4:	d903      	bls.n	80001fe <plotPlayer+0x22>
			player->posicion_X = 120;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2278      	movs	r2, #120	; 0x78
 80001fa:	705a      	strb	r2, [r3, #1]
 80001fc:	e017      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X + 4;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	3304      	adds	r3, #4
 8000204:	b2da      	uxtb	r2, r3
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	705a      	strb	r2, [r3, #1]
 800020a:	e010      	b.n	800022e <plotPlayer+0x52>
		}

	}
	else if(direccion == izquierda){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b03      	cmp	r3, #3
 8000210:	d10d      	bne.n	800022e <plotPlayer+0x52>

		if(player->posicion_X <= 0){
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d103      	bne.n	8000222 <plotPlayer+0x46>
			player->posicion_X = 0;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	705a      	strb	r2, [r3, #1]
 8000220:	e005      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X - 4;
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	3b04      	subs	r3, #4
 8000228:	b2da      	uxtb	r2, r3
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	705a      	strb	r2, [r3, #1]
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	b218      	sxth	r0, r3
 8000234:	2301      	movs	r3, #1
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	2308      	movs	r3, #8
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2308      	movs	r3, #8
 800023e:	4a04      	ldr	r2, [pc, #16]	; (8000250 <plotPlayer+0x74>)
 8000240:	2138      	movs	r1, #56	; 0x38
 8000242:	f001 ffa9 	bl	8002198 <SSD1306_DrawBitmap>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	0800afe0 	.word	0x0800afe0

08000254 <InvaderInit>:



void InvaderInit(){
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

	movimiento_Aliens.orientacion = mov_derecha;
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <InvaderInit+0xa0>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000260:	2300      	movs	r3, #0
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	e03e      	b.n	80002e4 <InvaderInit+0x90>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	e035      	b.n	80002d8 <InvaderInit+0x84>
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	461a      	mov	r2, r3
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	441a      	add	r2, r3
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	4413      	add	r3, r2
 8000278:	b2dc      	uxtb	r4, r3
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff6f 	bl	8000164 <getAlien>
 8000286:	4603      	mov	r3, r0
 8000288:	f104 020a 	add.w	r2, r4, #10
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	701a      	strb	r2, [r3, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff64 	bl	8000164 <getAlien>
 800029c:	4602      	mov	r2, r0
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4619      	mov	r1, r3
 80002a2:	0089      	lsls	r1, r1, #2
 80002a4:	4419      	add	r1, r3
 80002a6:	0049      	lsls	r1, r1, #1
 80002a8:	440b      	add	r3, r1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	7053      	strb	r3, [r2, #1]
			getAlien(y, x)->vivo = true;
 80002ae:	79ba      	ldrb	r2, [r7, #6]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff55 	bl	8000164 <getAlien>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2201      	movs	r2, #1
 80002be:	709a      	strb	r2, [r3, #2]
			getAlien(y, x)->conteo_explosion = 2;
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff4c 	bl	8000164 <getAlien>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2202      	movs	r2, #2
 80002d0:	711a      	strb	r2, [r3, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b06      	cmp	r3, #6
 80002dc:	d9c6      	bls.n	800026c <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	3301      	adds	r3, #1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d9bd      	bls.n	8000266 <InvaderInit+0x12>
		}
	}

}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	2000003c 	.word	0x2000003c

080002f8 <plotAliens>:

void plotAliens(){
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af02      	add	r7, sp, #8


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80002fe:	f7ff ff4d 	bl	800019c <getMovAliens>
 8000302:	4603      	mov	r3, r0
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	4aa9      	ldr	r2, [pc, #676]	; (80005ac <plotAliens+0x2b4>)
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	fbb3 f1f2 	udiv	r1, r3, r2
 800030e:	fb01 f202 	mul.w	r2, r1, r2
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 80a8 	bne.w	800046c <plotAliens+0x174>
			switch(getMovAliens()->orientacion){
 800031c:	f7ff ff3e 	bl	800019c <getMovAliens>
 8000320:	4603      	mov	r3, r0
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <plotAliens+0x36>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d025      	beq.n	8000378 <plotAliens+0x80>
							}
						}

						break;
				default:
					break;
 800032c:	e049      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	e01d      	b.n	8000370 <plotAliens+0x78>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000334:	2300      	movs	r3, #0
 8000336:	71bb      	strb	r3, [r7, #6]
 8000338:	e014      	b.n	8000364 <plotAliens+0x6c>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 1;
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff0f 	bl	8000164 <getAlien>
 8000346:	4603      	mov	r3, r0
 8000348:	781c      	ldrb	r4, [r3, #0]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff07 	bl	8000164 <getAlien>
 8000356:	4603      	mov	r3, r0
 8000358:	1c62      	adds	r2, r4, #1
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3301      	adds	r3, #1
 8000362:	71bb      	strb	r3, [r7, #6]
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	2b06      	cmp	r3, #6
 8000368:	d9e7      	bls.n	800033a <plotAliens+0x42>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	3301      	adds	r3, #1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d9de      	bls.n	8000334 <plotAliens+0x3c>
					break;
 8000376:	e024      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000378:	2300      	movs	r3, #0
 800037a:	717b      	strb	r3, [r7, #5]
 800037c:	e01d      	b.n	80003ba <plotAliens+0xc2>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800037e:	2300      	movs	r3, #0
 8000380:	713b      	strb	r3, [r7, #4]
 8000382:	e014      	b.n	80003ae <plotAliens+0xb6>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 1;
 8000384:	793a      	ldrb	r2, [r7, #4]
 8000386:	797b      	ldrb	r3, [r7, #5]
 8000388:	4611      	mov	r1, r2
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff feea 	bl	8000164 <getAlien>
 8000390:	4603      	mov	r3, r0
 8000392:	781c      	ldrb	r4, [r3, #0]
 8000394:	793a      	ldrb	r2, [r7, #4]
 8000396:	797b      	ldrb	r3, [r7, #5]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fee2 	bl	8000164 <getAlien>
 80003a0:	4603      	mov	r3, r0
 80003a2:	1e62      	subs	r2, r4, #1
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003a8:	793b      	ldrb	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	713b      	strb	r3, [r7, #4]
 80003ae:	793b      	ldrb	r3, [r7, #4]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d9e7      	bls.n	8000384 <plotAliens+0x8c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	3301      	adds	r3, #1
 80003b8:	717b      	strb	r3, [r7, #5]
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d9de      	bls.n	800037e <plotAliens+0x86>
						break;
 80003c0:	bf00      	nop
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 80003c2:	2106      	movs	r1, #6
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fecd 	bl	8000164 <getAlien>
 80003ca:	4603      	mov	r3, r0
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b72      	cmp	r3, #114	; 0x72
 80003d0:	d904      	bls.n	80003dc <plotAliens+0xe4>

				getMovAliens()->orientacion = mov_izquierda;
 80003d2:	f7ff fee3 	bl	800019c <getMovAliens>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 80003dc:	2100      	movs	r1, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff fec0 	bl	8000164 <getAlien>
 80003e4:	4603      	mov	r3, r0
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10e      	bne.n	800040a <plotAliens+0x112>
				getMovAliens()->orientacion = mov_derecha;
 80003ec:	f7ff fed6 	bl	800019c <getMovAliens>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 80003f6:	f7ff fed1 	bl	800019c <getMovAliens>
 80003fa:	4603      	mov	r3, r0
 80003fc:	789c      	ldrb	r4, [r3, #2]
 80003fe:	f7ff fecd 	bl	800019c <getMovAliens>
 8000402:	4603      	mov	r3, r0
 8000404:	1c62      	adds	r2, r4, #1
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 800040a:	f7ff fec7 	bl	800019c <getMovAliens>
 800040e:	4603      	mov	r3, r0
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	2b0a      	cmp	r3, #10
 8000414:	d12a      	bne.n	800046c <plotAliens+0x174>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000416:	2300      	movs	r3, #0
 8000418:	70fb      	strb	r3, [r7, #3]
 800041a:	e024      	b.n	8000466 <plotAliens+0x16e>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800041c:	2300      	movs	r3, #0
 800041e:	70bb      	strb	r3, [r7, #2]
 8000420:	e01b      	b.n	800045a <plotAliens+0x162>

						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 8000422:	78ba      	ldrb	r2, [r7, #2]
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe9b 	bl	8000164 <getAlien>
 800042e:	4603      	mov	r3, r0
 8000430:	785d      	ldrb	r5, [r3, #1]
 8000432:	4b5e      	ldr	r3, [pc, #376]	; (80005ac <plotAliens+0x2b4>)
 8000434:	785c      	ldrb	r4, [r3, #1]
 8000436:	78ba      	ldrb	r2, [r7, #2]
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe91 	bl	8000164 <getAlien>
 8000442:	4603      	mov	r3, r0
 8000444:	192a      	adds	r2, r5, r4
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	705a      	strb	r2, [r3, #1]
						getMovAliens()->conteo_bajada = 0;
 800044a:	f7ff fea7 	bl	800019c <getMovAliens>
 800044e:	4603      	mov	r3, r0
 8000450:	2200      	movs	r2, #0
 8000452:	709a      	strb	r2, [r3, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	3301      	adds	r3, #1
 8000458:	70bb      	strb	r3, [r7, #2]
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	2b06      	cmp	r3, #6
 800045e:	d9e0      	bls.n	8000422 <plotAliens+0x12a>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	3301      	adds	r3, #1
 8000464:	70fb      	strb	r3, [r7, #3]
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d9d7      	bls.n	800041c <plotAliens+0x124>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 800046c:	f7ff fe96 	bl	800019c <getMovAliens>
 8000470:	4603      	mov	r3, r0
 8000472:	785c      	ldrb	r4, [r3, #1]
 8000474:	f7ff fe92 	bl	800019c <getMovAliens>
 8000478:	4603      	mov	r3, r0
 800047a:	1c62      	adds	r2, r4, #1
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	705a      	strb	r2, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000480:	2300      	movs	r3, #0
 8000482:	707b      	strb	r3, [r7, #1]
 8000484:	e089      	b.n	800059a <plotAliens+0x2a2>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000486:	2300      	movs	r3, #0
 8000488:	703b      	strb	r3, [r7, #0]
 800048a:	e07f      	b.n	800058c <plotAliens+0x294>

					switch(y){
 800048c:	787b      	ldrb	r3, [r7, #1]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <plotAliens+0x1a0>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d026      	beq.n	80004e4 <plotAliens+0x1ec>
 8000496:	e04b      	b.n	8000530 <plotAliens+0x238>

					case 0:
						if(getAlien(y,x)->vivo == true){
 8000498:	783a      	ldrb	r2, [r7, #0]
 800049a:	787b      	ldrb	r3, [r7, #1]
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe60 	bl	8000164 <getAlien>
 80004a4:	4603      	mov	r3, r0
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d167      	bne.n	800057c <plotAliens+0x284>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004ac:	783a      	ldrb	r2, [r7, #0]
 80004ae:	787b      	ldrb	r3, [r7, #1]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe56 	bl	8000164 <getAlien>
 80004b8:	4603      	mov	r3, r0
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b21c      	sxth	r4, r3
 80004be:	783a      	ldrb	r2, [r7, #0]
 80004c0:	787b      	ldrb	r3, [r7, #1]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe4d 	bl	8000164 <getAlien>
 80004ca:	4603      	mov	r3, r0
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	b219      	sxth	r1, r3
 80004d0:	2301      	movs	r3, #1
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2308      	movs	r3, #8
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2310      	movs	r3, #16
 80004da:	4a35      	ldr	r2, [pc, #212]	; (80005b0 <plotAliens+0x2b8>)
 80004dc:	4620      	mov	r0, r4
 80004de:	f001 fe5b 	bl	8002198 <SSD1306_DrawBitmap>
						}
						break;
 80004e2:	e04b      	b.n	800057c <plotAliens+0x284>
					case 1:
						if(getAlien(y,x)->vivo == true){
 80004e4:	783a      	ldrb	r2, [r7, #0]
 80004e6:	787b      	ldrb	r3, [r7, #1]
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe3a 	bl	8000164 <getAlien>
 80004f0:	4603      	mov	r3, r0
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d143      	bne.n	8000580 <plotAliens+0x288>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004f8:	783a      	ldrb	r2, [r7, #0]
 80004fa:	787b      	ldrb	r3, [r7, #1]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe30 	bl	8000164 <getAlien>
 8000504:	4603      	mov	r3, r0
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b21c      	sxth	r4, r3
 800050a:	783a      	ldrb	r2, [r7, #0]
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe27 	bl	8000164 <getAlien>
 8000516:	4603      	mov	r3, r0
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	b219      	sxth	r1, r3
 800051c:	2301      	movs	r3, #1
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2308      	movs	r3, #8
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2310      	movs	r3, #16
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <plotAliens+0x2b8>)
 8000528:	4620      	mov	r0, r4
 800052a:	f001 fe35 	bl	8002198 <SSD1306_DrawBitmap>
						}
						break;
 800052e:	e027      	b.n	8000580 <plotAliens+0x288>
					default:
						if(getAlien(y,x)->vivo == true){
 8000530:	783a      	ldrb	r2, [r7, #0]
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe14 	bl	8000164 <getAlien>
 800053c:	4603      	mov	r3, r0
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d11f      	bne.n	8000584 <plotAliens+0x28c>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000544:	783a      	ldrb	r2, [r7, #0]
 8000546:	787b      	ldrb	r3, [r7, #1]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe0a 	bl	8000164 <getAlien>
 8000550:	4603      	mov	r3, r0
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b21c      	sxth	r4, r3
 8000556:	783a      	ldrb	r2, [r7, #0]
 8000558:	787b      	ldrb	r3, [r7, #1]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe01 	bl	8000164 <getAlien>
 8000562:	4603      	mov	r3, r0
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	b219      	sxth	r1, r3
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2308      	movs	r3, #8
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2310      	movs	r3, #16
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <plotAliens+0x2bc>)
 8000574:	4620      	mov	r0, r4
 8000576:	f001 fe0f 	bl	8002198 <SSD1306_DrawBitmap>
						}
						break;
 800057a:	e003      	b.n	8000584 <plotAliens+0x28c>
						break;
 800057c:	bf00      	nop
 800057e:	e002      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000580:	bf00      	nop
 8000582:	e000      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000584:	bf00      	nop
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000586:	783b      	ldrb	r3, [r7, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	703b      	strb	r3, [r7, #0]
 800058c:	783b      	ldrb	r3, [r7, #0]
 800058e:	2b06      	cmp	r3, #6
 8000590:	f67f af7c 	bls.w	800048c <plotAliens+0x194>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000594:	787b      	ldrb	r3, [r7, #1]
 8000596:	3301      	adds	r3, #1
 8000598:	707b      	strb	r3, [r7, #1]
 800059a:	787b      	ldrb	r3, [r7, #1]
 800059c:	2b02      	cmp	r3, #2
 800059e:	f67f af72 	bls.w	8000486 <plotAliens+0x18e>
					}
			}

		}

}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	200000ac 	.word	0x200000ac
 80005b0:	0800afc0 	.word	0x0800afc0
 80005b4:	0800afd0 	.word	0x0800afd0

080005b8 <disparoInit>:


void disparoInit(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

	Disparo.posicion_x = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <disparoInit+0x20>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <disparoInit+0x20>)
 80005c4:	223c      	movs	r2, #60	; 0x3c
 80005c6:	705a      	strb	r2, [r3, #1]
	Disparo.disparo = false;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <disparoInit+0x20>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	709a      	strb	r2, [r3, #2]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000038 	.word	0x20000038

080005dc <disparar>:


void disparar(){
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8


			if(getDisparo()->numero_disparos == 1){
 80005e2:	f7ff fde5 	bl	80001b0 <getDisparo>
 80005e6:	4603      	mov	r3, r0
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10c      	bne.n	8000608 <disparar+0x2c>
				getDisparo()->disparo = true;
 80005ee:	f7ff fddf 	bl	80001b0 <getDisparo>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2201      	movs	r2, #1
 80005f6:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 80005f8:	f7ff fdaa 	bl	8000150 <getPlayer>
 80005fc:	4604      	mov	r4, r0
 80005fe:	f7ff fdd7 	bl	80001b0 <getDisparo>
 8000602:	4603      	mov	r3, r0
 8000604:	7862      	ldrb	r2, [r4, #1]
 8000606:	701a      	strb	r2, [r3, #0]
			}


			if(getDisparo()->disparo == true){
 8000608:	f7ff fdd2 	bl	80001b0 <getDisparo>
 800060c:	4603      	mov	r3, r0
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d145      	bne.n	80006a0 <disparar+0xc4>
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 3, 1);
 8000614:	f7ff fdcc 	bl	80001b0 <getDisparo>
 8000618:	4603      	mov	r3, r0
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3304      	adds	r3, #4
 8000620:	b29c      	uxth	r4, r3
 8000622:	f7ff fdc5 	bl	80001b0 <getDisparo>
 8000626:	4603      	mov	r3, r0
 8000628:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800062c:	b29d      	uxth	r5, r3
 800062e:	f7ff fdbf 	bl	80001b0 <getDisparo>
 8000632:	4603      	mov	r3, r0
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	3304      	adds	r3, #4
 800063a:	b29e      	uxth	r6, r3
 800063c:	f7ff fdb8 	bl	80001b0 <getDisparo>
 8000640:	4603      	mov	r3, r0
 8000642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000646:	b29b      	uxth	r3, r3
 8000648:	3303      	adds	r3, #3
 800064a:	b29b      	uxth	r3, r3
 800064c:	2201      	movs	r2, #1
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	4632      	mov	r2, r6
 8000652:	4629      	mov	r1, r5
 8000654:	4620      	mov	r0, r4
 8000656:	f002 f82a 	bl	80026ae <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800065a:	f7ff fda9 	bl	80001b0 <getDisparo>
 800065e:	4603      	mov	r3, r0
 8000660:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b06      	subs	r3, #6
 8000668:	b2dc      	uxtb	r4, r3
 800066a:	f7ff fda1 	bl	80001b0 <getDisparo>
 800066e:	4603      	mov	r3, r0
 8000670:	b262      	sxtb	r2, r4
 8000672:	705a      	strb	r2, [r3, #1]


				if(getDisparo()->posicion_y <= 0){
 8000674:	f7ff fd9c 	bl	80001b0 <getDisparo>
 8000678:	4603      	mov	r3, r0
 800067a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800067e:	2b00      	cmp	r3, #0
 8000680:	dc0e      	bgt.n	80006a0 <disparar+0xc4>
					//Se reinician los valores del disparo
					getDisparo()->disparo = false;
 8000682:	f7ff fd95 	bl	80001b0 <getDisparo>
 8000686:	4603      	mov	r3, r0
 8000688:	2200      	movs	r2, #0
 800068a:	709a      	strb	r2, [r3, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800068c:	f7ff fd90 	bl	80001b0 <getDisparo>
 8000690:	4603      	mov	r3, r0
 8000692:	223c      	movs	r2, #60	; 0x3c
 8000694:	705a      	strb	r2, [r3, #1]
					getDisparo()->numero_disparos = 0;
 8000696:	f7ff fd8b 	bl	80001b0 <getDisparo>
 800069a:	4603      	mov	r3, r0
 800069c:	2200      	movs	r2, #0
 800069e:	70da      	strb	r2, [r3, #3]
				}
			}


			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e0c0      	b.n	8000828 <disparar+0x24c>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	e0b6      	b.n	800081a <disparar+0x23e>

					if( (getDisparo()->posicion_x >= getAlien(y,x)->posicion_X) &&  (getDisparo()->posicion_x <= getAlien(y,x)->posicion_X + (TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS) )){
 80006ac:	f7ff fd80 	bl	80001b0 <getDisparo>
 80006b0:	4603      	mov	r3, r0
 80006b2:	781c      	ldrb	r4, [r3, #0]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd52 	bl	8000164 <getAlien>
 80006c0:	4603      	mov	r3, r0
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d35b      	bcc.n	8000780 <disparar+0x1a4>
 80006c8:	f7ff fd72 	bl	80001b0 <getDisparo>
 80006cc:	4603      	mov	r3, r0
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461c      	mov	r4, r3
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd43 	bl	8000164 <getAlien>
 80006de:	4603      	mov	r3, r0
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	330d      	adds	r3, #13
 80006e4:	429c      	cmp	r4, r3
 80006e6:	dc4b      	bgt.n	8000780 <disparar+0x1a4>
						if( (getDisparo()->posicion_y >= getAlien(y,x)->posicion_Y) && (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + (TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS)) ){
 80006e8:	f7ff fd62 	bl	80001b0 <getDisparo>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f2:	461c      	mov	r4, r3
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd32 	bl	8000164 <getAlien>
 8000700:	4603      	mov	r3, r0
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	429c      	cmp	r4, r3
 8000706:	db3b      	blt.n	8000780 <disparar+0x1a4>
 8000708:	f7ff fd52 	bl	80001b0 <getDisparo>
 800070c:	4603      	mov	r3, r0
 800070e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000712:	461c      	mov	r4, r3
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd22 	bl	8000164 <getAlien>
 8000720:	4603      	mov	r3, r0
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	330b      	adds	r3, #11
 8000726:	429c      	cmp	r4, r3
 8000728:	dc2a      	bgt.n	8000780 <disparar+0x1a4>

								if(getAlien(y,x)->vivo == true){
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd17 	bl	8000164 <getAlien>
 8000736:	4603      	mov	r3, r0
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d120      	bne.n	8000780 <disparar+0x1a4>
									getAlien(y,x)->vivo = false;
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd0d 	bl	8000164 <getAlien>
 800074a:	4603      	mov	r3, r0
 800074c:	2200      	movs	r2, #0
 800074e:	709a      	strb	r2, [r3, #2]
									getAlien(y,x)->explosion = true;
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd04 	bl	8000164 <getAlien>
 800075c:	4603      	mov	r3, r0
 800075e:	2201      	movs	r2, #1
 8000760:	70da      	strb	r2, [r3, #3]

									//Se reinician los valores del disparo
									getDisparo()->disparo = false;
 8000762:	f7ff fd25 	bl	80001b0 <getDisparo>
 8000766:	4603      	mov	r3, r0
 8000768:	2200      	movs	r2, #0
 800076a:	709a      	strb	r2, [r3, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800076c:	f7ff fd20 	bl	80001b0 <getDisparo>
 8000770:	4603      	mov	r3, r0
 8000772:	223c      	movs	r2, #60	; 0x3c
 8000774:	705a      	strb	r2, [r3, #1]
									getDisparo()->numero_disparos = 0;
 8000776:	f7ff fd1b 	bl	80001b0 <getDisparo>
 800077a:	4603      	mov	r3, r0
 800077c:	2200      	movs	r2, #0
 800077e:	70da      	strb	r2, [r3, #3]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fcec 	bl	8000164 <getAlien>
 800078c:	4603      	mov	r3, r0
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d13f      	bne.n	8000814 <disparar+0x238>
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fce2 	bl	8000164 <getAlien>
 80007a0:	4603      	mov	r3, r0
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b21c      	sxth	r4, r3
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fcd9 	bl	8000164 <getAlien>
 80007b2:	4603      	mov	r3, r0
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	b219      	sxth	r1, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2308      	movs	r3, #8
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2310      	movs	r3, #16
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <disparar+0x260>)
 80007c4:	4620      	mov	r0, r4
 80007c6:	f001 fce7 	bl	8002198 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fcc7 	bl	8000164 <getAlien>
 80007d6:	4603      	mov	r3, r0
 80007d8:	791c      	ldrb	r4, [r3, #4]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcbf 	bl	8000164 <getAlien>
 80007e6:	4603      	mov	r3, r0
 80007e8:	1e62      	subs	r2, r4, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	711a      	strb	r2, [r3, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fcb5 	bl	8000164 <getAlien>
 80007fa:	4603      	mov	r3, r0
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <disparar+0x238>
							getAlien(y,x)->explosion = false;
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fcab 	bl	8000164 <getAlien>
 800080e:	4603      	mov	r3, r0
 8000810:	2200      	movs	r2, #0
 8000812:	70da      	strb	r2, [r3, #3]
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	3301      	adds	r3, #1
 8000818:	71bb      	strb	r3, [r7, #6]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	2b06      	cmp	r3, #6
 800081e:	f67f af45 	bls.w	80006ac <disparar+0xd0>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b02      	cmp	r3, #2
 800082c:	f67f af3b 	bls.w	80006a6 <disparar+0xca>
						}
					}
				}
			}
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	bf00      	nop
 800083c:	0800afe8 	.word	0x0800afe8

08000840 <actualizarPantalla>:



void actualizarPantalla(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

    SSD1306_UpdateScreen(); // update screen
 8000844:	f001 fdd4 	bl	80023f0 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000848:	2000      	movs	r0, #0
 800084a:	f001 fdff 	bl	800244c <SSD1306_Fill>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f002 fcce 	bl	80031f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f86e 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f000 f9a8 	bl	8000bb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000864:	f000 f8c6 	bl	80009f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000868:	f000 f940 	bl	8000aec <MX_I2C1_Init>
  MX_SPI1_Init();
 800086c:	f000 f96c 	bl	8000b48 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000870:	f000 f8fe 	bl	8000a70 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000874:	f005 ff4a 	bl	800670c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutexPuntajes */
  mutexPuntajesHandle = osMutexNew(&mutexPuntajes_attributes);
 8000878:	481e      	ldr	r0, [pc, #120]	; (80008f4 <main+0xa0>)
 800087a:	f006 f9a5 	bl	8006bc8 <osMutexNew>
 800087e:	4603      	mov	r3, r0
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <main+0xa4>)
 8000882:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueJoystPant */
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <main+0xa8>)
 8000886:	2103      	movs	r1, #3
 8000888:	200a      	movs	r0, #10
 800088a:	f006 fae5 	bl	8006e58 <osMessageQueueNew>
 800088e:	4603      	mov	r3, r0
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <main+0xac>)
 8000892:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of JoystickTask */
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <main+0xb0>)
 8000896:	2100      	movs	r1, #0
 8000898:	481b      	ldr	r0, [pc, #108]	; (8000908 <main+0xb4>)
 800089a:	f005 ff9d 	bl	80067d8 <osThreadNew>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a1a      	ldr	r2, [pc, #104]	; (800090c <main+0xb8>)
 80008a2:	6013      	str	r3, [r2, #0]

  /* creation of PantallaTask */
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 80008a4:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <main+0xbc>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	481a      	ldr	r0, [pc, #104]	; (8000914 <main+0xc0>)
 80008aa:	f005 ff95 	bl	80067d8 <osThreadNew>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <main+0xc4>)
 80008b2:	6013      	str	r3, [r2, #0]

  /* creation of MemoriaTask */
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <main+0xc8>)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4819      	ldr	r0, [pc, #100]	; (8000920 <main+0xcc>)
 80008ba:	f005 ff8d 	bl	80067d8 <osThreadNew>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a18      	ldr	r2, [pc, #96]	; (8000924 <main+0xd0>)
 80008c2:	6013      	str	r3, [r2, #0]

  /* creation of SonidoTask */
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 80008c4:	4a18      	ldr	r2, [pc, #96]	; (8000928 <main+0xd4>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4818      	ldr	r0, [pc, #96]	; (800092c <main+0xd8>)
 80008ca:	f005 ff85 	bl	80067d8 <osThreadNew>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <main+0xdc>)
 80008d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */

  //Creacion de la cola notificacion.
  notificationFlag = osEventFlagsNew(NULL);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f006 f857 	bl	8006988 <osEventFlagsNew>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a15      	ldr	r2, [pc, #84]	; (8000934 <main+0xe0>)
 80008de:	6013      	str	r3, [r2, #0]
  notificationFlag2 = osEventFlagsNew(NULL);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f006 f851 	bl	8006988 <osEventFlagsNew>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <main+0xe4>)
 80008ea:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008ec:	f005 ff40 	bl	8006770 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008f0:	e7fe      	b.n	80008f0 <main+0x9c>
 80008f2:	bf00      	nop
 80008f4:	0800b0a0 	.word	0x0800b0a0
 80008f8:	200001d0 	.word	0x200001d0
 80008fc:	0800b088 	.word	0x0800b088
 8000900:	200001cc 	.word	0x200001cc
 8000904:	0800aff8 	.word	0x0800aff8
 8000908:	08000cd5 	.word	0x08000cd5
 800090c:	200001bc 	.word	0x200001bc
 8000910:	0800b01c 	.word	0x0800b01c
 8000914:	08000dc1 	.word	0x08000dc1
 8000918:	200001c0 	.word	0x200001c0
 800091c:	0800b040 	.word	0x0800b040
 8000920:	08000e2d 	.word	0x08000e2d
 8000924:	200001c4 	.word	0x200001c4
 8000928:	0800b064 	.word	0x0800b064
 800092c:	08000fa5 	.word	0x08000fa5
 8000930:	200001c8 	.word	0x200001c8
 8000934:	200001d4 	.word	0x200001d4
 8000938:	200001d8 	.word	0x200001d8

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000946:	2228      	movs	r2, #40	; 0x28
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f009 feda 	bl	800a704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097a:	2301      	movs	r3, #1
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000988:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000992:	4618      	mov	r0, r3
 8000994:	f004 f93c 	bl	8004c10 <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800099e:	f000 fb1b 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2102      	movs	r1, #2
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 fba8 	bl	8005114 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009ca:	f000 fb05 	bl	8000fd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ce:	2302      	movs	r3, #2
 80009d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 fd58 	bl	8005490 <HAL_RCCEx_PeriphCLKConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009e6:	f000 faf7 	bl	8000fd8 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	; 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a04:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a06:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <MX_ADC1_Init+0x78>)
 8000a08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a1e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a32:	f002 fc37 	bl	80032a4 <HAL_ADC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 facc 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_ADC1_Init+0x74>)
 8000a52:	f002 feeb 	bl	800382c <HAL_ADC_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a5c:	f000 fabc 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000b0 	.word	0x200000b0
 8000a6c:	40012400 	.word	0x40012400

08000a70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <MX_ADC2_Init+0x78>)
 8000a84:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000a9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000aae:	f002 fbf9 	bl	80032a4 <HAL_ADC_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000ab8:	f000 fa8e 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_ADC2_Init+0x74>)
 8000ace:	f002 fead 	bl	800382c <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000ad8:	f000 fa7e 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000e0 	.word	0x200000e0
 8000ae8:	40012800 	.word	0x40012800

08000aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <MX_I2C1_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_I2C1_Init+0x58>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_I2C1_Init+0x50>)
 8000b2a:	f003 faa7 	bl	800407c <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 fa50 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000110 	.word	0x20000110
 8000b40:	40005400 	.word	0x40005400
 8000b44:	00061a80 	.word	0x00061a80

08000b48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <MX_SPI1_Init+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b7c:	2218      	movs	r2, #24
 8000b7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_SPI1_Init+0x64>)
 8000b9a:	f004 fde5 	bl	8005768 <HAL_SPI_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba4:	f000 fa18 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000164 	.word	0x20000164
 8000bb0:	40013000 	.word	0x40013000

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be0:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000be6:	f043 0320 	orr.w	r3, r3, #32
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <MX_GPIO_Init+0x110>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2e:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000c30:	f003 fa0b 	bl	800404a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3a:	4824      	ldr	r0, [pc, #144]	; (8000ccc <MX_GPIO_Init+0x118>)
 8000c3c:	f003 fa05 	bl	800404a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2120      	movs	r1, #32
 8000c44:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <MX_GPIO_Init+0x11c>)
 8000c46:	f003 fa00 	bl	800404a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	4819      	ldr	r0, [pc, #100]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000c64:	f003 f856 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4814      	ldr	r0, [pc, #80]	; (8000ccc <MX_GPIO_Init+0x118>)
 8000c7c:	f003 f84a 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_GPIO_Init+0x118>)
 8000c9a:	f003 f83b 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_GPIO_Init+0x11c>)
 8000cb6:	f003 f82d 	bl	8003d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000cdc:	f007 ffd2 	bl	8008c84 <xTaskGetTickCount>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60bb      	str	r3, [r7, #8]

  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  HAL_ADC_Start(&hadc1);
 8000ce4:	4831      	ldr	r0, [pc, #196]	; (8000dac <entryJoystick+0xd8>)
 8000ce6:	f002 fbb5 	bl	8003454 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000cea:	210a      	movs	r1, #10
 8000cec:	482f      	ldr	r0, [pc, #188]	; (8000dac <entryJoystick+0xd8>)
 8000cee:	f002 fc8b 	bl	8003608 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000cf2:	482e      	ldr	r0, [pc, #184]	; (8000dac <entryJoystick+0xd8>)
 8000cf4:	f002 fd8e 	bl	8003814 <HAL_ADC_GetValue>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	82fb      	strh	r3, [r7, #22]
	  HAL_ADC_Stop(&hadc1);
 8000cfc:	482b      	ldr	r0, [pc, #172]	; (8000dac <entryJoystick+0xd8>)
 8000cfe:	f002 fc57 	bl	80035b0 <HAL_ADC_Stop>

	  //Joystick eje Y: arriba o abajo.
	  HAL_ADC_Start(&hadc2);
 8000d02:	482b      	ldr	r0, [pc, #172]	; (8000db0 <entryJoystick+0xdc>)
 8000d04:	f002 fba6 	bl	8003454 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000d08:	210a      	movs	r1, #10
 8000d0a:	4829      	ldr	r0, [pc, #164]	; (8000db0 <entryJoystick+0xdc>)
 8000d0c:	f002 fc7c 	bl	8003608 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000d10:	4827      	ldr	r0, [pc, #156]	; (8000db0 <entryJoystick+0xdc>)
 8000d12:	f002 fd7f 	bl	8003814 <HAL_ADC_GetValue>
 8000d16:	4603      	mov	r3, r0
 8000d18:	82bb      	strh	r3, [r7, #20]
	  HAL_ADC_Stop(&hadc2);
 8000d1a:	4825      	ldr	r0, [pc, #148]	; (8000db0 <entryJoystick+0xdc>)
 8000d1c:	f002 fc48 	bl	80035b0 <HAL_ADC_Stop>

	  if(val_x > 2000){
 8000d20:	8afb      	ldrh	r3, [r7, #22]
 8000d22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d26:	d902      	bls.n	8000d2e <entryJoystick+0x5a>
		  joystick.x_value = derecha;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	733b      	strb	r3, [r7, #12]
 8000d2c:	e008      	b.n	8000d40 <entryJoystick+0x6c>
	  }
	  else if(val_x < 1600){
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000d34:	d202      	bcs.n	8000d3c <entryJoystick+0x68>
		  joystick.x_value = izquierda;
 8000d36:	2303      	movs	r3, #3
 8000d38:	733b      	strb	r3, [r7, #12]
 8000d3a:	e001      	b.n	8000d40 <entryJoystick+0x6c>
	  }
	  else{
		  joystick.x_value = nulo;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	733b      	strb	r3, [r7, #12]
	  }


	  if(val_y > 2000){
 8000d40:	8abb      	ldrh	r3, [r7, #20]
 8000d42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d46:	d902      	bls.n	8000d4e <entryJoystick+0x7a>
		  joystick.y_value = abajo;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	737b      	strb	r3, [r7, #13]
 8000d4c:	e008      	b.n	8000d60 <entryJoystick+0x8c>
	  }
	  else if(val_y < 1600){
 8000d4e:	8abb      	ldrh	r3, [r7, #20]
 8000d50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000d54:	d202      	bcs.n	8000d5c <entryJoystick+0x88>
		  joystick.y_value = arriba;
 8000d56:	2300      	movs	r3, #0
 8000d58:	737b      	strb	r3, [r7, #13]
 8000d5a:	e001      	b.n	8000d60 <entryJoystick+0x8c>
	  }
	  else{
		  joystick.y_value = nulo;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	737b      	strb	r3, [r7, #13]
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000d60:	2104      	movs	r1, #4
 8000d62:	4814      	ldr	r0, [pc, #80]	; (8000db4 <entryJoystick+0xe0>)
 8000d64:	f003 f95a 	bl	800401c <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <entryJoystick+0xa0>
		  joystick.boton = true;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	e001      	b.n	8000d78 <entryJoystick+0xa4>
	  }
	  else{
		  joystick.boton = false;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73bb      	strb	r3, [r7, #14]
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <entryJoystick+0xe4>)
 8000d7a:	6818      	ldr	r0, [r3, #0]
 8000d7c:	f107 010c 	add.w	r1, r7, #12
 8000d80:	2300      	movs	r3, #0
 8000d82:	2200      	movs	r2, #0
 8000d84:	f006 f8ee 	bl	8006f64 <osMessageQueuePut>
 8000d88:	6138      	str	r0, [r7, #16]
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <entryJoystick+0xc8>
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d96:	4809      	ldr	r0, [pc, #36]	; (8000dbc <entryJoystick+0xe8>)
 8000d98:	f003 f957 	bl	800404a <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	2132      	movs	r1, #50	; 0x32
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 fdaa 	bl	80088fc <vTaskDelayUntil>
  {
 8000da8:	e79c      	b.n	8000ce4 <entryJoystick+0x10>
 8000daa:	bf00      	nop
 8000dac:	200000b0 	.word	0x200000b0
 8000db0:	200000e0 	.word	0x200000e0
 8000db4:	40010800 	.word	0x40010800
 8000db8:	200001cc 	.word	0x200001cc
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000dc8:	f000 fd06 	bl	80017d8 <menuInit>


	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 1;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <entryPantalla+0x60>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 1;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <entryPantalla+0x60>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	705a      	strb	r2, [r3, #1]

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <entryPantalla+0x64>)
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	f107 0108 	add.w	r1, r7, #8
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	2200      	movs	r2, #0
 8000de6:	f006 f931 	bl	800704c <osMessageQueueGet>
 8000dea:	60f8      	str	r0, [r7, #12]

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <entryPantalla+0x40>
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <entryPantalla+0x68>)
 8000dfa:	f003 f926 	bl	800404a <HAL_GPIO_WritePin>
 8000dfe:	e7eb      	b.n	8000dd8 <entryPantalla+0x18>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <entryPantalla+0x68>)
 8000e08:	f003 f91f 	bl	800404a <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000e0c:	7a3b      	ldrb	r3, [r7, #8]
 8000e0e:	7a79      	ldrb	r1, [r7, #9]
 8000e10:	7aba      	ldrb	r2, [r7, #10]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fd0a 	bl	800182c <menuActualizar>
		actualizarPantalla();
 8000e18:	f7ff fd12 	bl	8000840 <actualizarPantalla>
  {
 8000e1c:	e7dc      	b.n	8000dd8 <entryPantalla+0x18>
 8000e1e:	bf00      	nop
 8000e20:	200000ac 	.word	0x200000ac
 8000e24:	200001cc 	.word	0x200001cc
 8000e28:	40011000 	.word	0x40011000

08000e2c <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b099      	sub	sp, #100	; 0x64
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryMemoria */

	uint8_t dataBuffer[TAMANO_PAGINA];
	uint16_t address = MEMORIA_ADDRESS;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	char buff[] = {'a','x','e','l','\0','\0','a','a'};
 8000e3a:	4a54      	ldr	r2, [pc, #336]	; (8000f8c <entryMemoria+0x160>)
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e44:	e883 0003 	stmia.w	r3, {r0, r1}

	osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 8000e48:	4b51      	ldr	r3, [pc, #324]	; (8000f90 <entryMemoria+0x164>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 ff53 	bl	8006cfc <osMutexAcquire>

	address = MEMORIA_ADDRESS + 32;
 8000e56:	2320      	movs	r3, #32
 8000e58:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	//Write_Memoria(address, buff_nuevosPuntajes[32]);

	uint8_t data[3];
	data[0] = WRITE;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	733b      	strb	r3, [r7, #12]
	data[1] = address>>8;
 8000e60:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	737b      	strb	r3, [r7, #13]
	data[2] = address;
 8000e6c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	73bb      	strb	r3, [r7, #14]
	//data[4] = value;

	uint8_t wren = WREN;
 8000e74:	2306      	movs	r3, #6
 8000e76:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	4845      	ldr	r0, [pc, #276]	; (8000f94 <entryMemoria+0x168>)
 8000e7e:	f003 f8e4 	bl	800404a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &wren, 1, 100);  // write data to register
 8000e82:	f107 010b 	add.w	r1, r7, #11
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4843      	ldr	r0, [pc, #268]	; (8000f98 <entryMemoria+0x16c>)
 8000e8c:	f004 fcf0 	bl	8005870 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000e90:	2201      	movs	r2, #1
 8000e92:	2120      	movs	r1, #32
 8000e94:	483f      	ldr	r0, [pc, #252]	; (8000f94 <entryMemoria+0x168>)
 8000e96:	f003 f8d8 	bl	800404a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000e9a:	200a      	movs	r0, #10
 8000e9c:	f002 f9de 	bl	800325c <HAL_Delay>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	483b      	ldr	r0, [pc, #236]	; (8000f94 <entryMemoria+0x168>)
 8000ea6:	f003 f8d0 	bl	800404a <HAL_GPIO_WritePin>

	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // write data to register
 8000eaa:	f107 010c 	add.w	r1, r7, #12
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	4839      	ldr	r0, [pc, #228]	; (8000f98 <entryMemoria+0x16c>)
 8000eb4:	f004 fcdc 	bl	8005870 <HAL_SPI_Transmit>



	for(uint8_t i=0; i<8;i++){
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8000ebe:	e00f      	b.n	8000ee0 <entryMemoria+0xb4>
		//Write_Memoria(address, buff[i]);
		//HAL_Delay(10);
		HAL_SPI_Transmit (&hspi1, (uint8_t *)&buff[i], 1, HAL_MAX_DELAY);  // write data to register
 8000ec0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000ec4:	f107 0210 	add.w	r2, r7, #16
 8000ec8:	18d1      	adds	r1, r2, r3
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4831      	ldr	r0, [pc, #196]	; (8000f98 <entryMemoria+0x16c>)
 8000ed2:	f004 fccd 	bl	8005870 <HAL_SPI_Transmit>
	for(uint8_t i=0; i<8;i++){
 8000ed6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000eda:	3301      	adds	r3, #1
 8000edc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8000ee0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d9eb      	bls.n	8000ec0 <entryMemoria+0x94>
		//address++;

	}


	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2120      	movs	r1, #32
 8000eec:	4829      	ldr	r0, [pc, #164]	; (8000f94 <entryMemoria+0x168>)
 8000eee:	f003 f8ac 	bl	800404a <HAL_GPIO_WritePin>

	address = MEMORIA_ADDRESS;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for(uint8_t i=0; i<TAMANO_PAGINA;i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000efe:	e017      	b.n	8000f30 <entryMemoria+0x104>

		dataBuffer[i] = Read_memoria(address);
 8000f00:	f897 405c 	ldrb.w	r4, [r7, #92]	; 0x5c
 8000f04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f8c3 	bl	8001094 <Read_memoria>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8000f16:	443b      	add	r3, r7
 8000f18:	f803 2c48 	strb.w	r2, [r3, #-72]
		address++;
 8000f1c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000f20:	3301      	adds	r3, #1
 8000f22:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	for(uint8_t i=0; i<TAMANO_PAGINA;i++){
 8000f26:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8000f30:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000f34:	2b3f      	cmp	r3, #63	; 0x3f
 8000f36:	d9e3      	bls.n	8000f00 <entryMemoria+0xd4>


	//EEPROM_ReadPage_DMA(MEMORIA_ADDRESS, dataBuffer);

	//puntajesActualizar();
	memoriaInit();
 8000f38:	f000 f8dc 	bl	80010f4 <memoriaInit>
	//Ordenamiento_Puntajes();

	osMutexRelease(mutexPuntajesHandle);
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <entryMemoria+0x164>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 ff39 	bl	8006db8 <osMutexRelease>
  for(;;)
  {

	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado
	  //del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <entryMemoria+0x170>)
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2101      	movs	r1, #1
 8000f52:	f005 fdc3 	bl	8006adc <osEventFlagsWait>
 8000f56:	65b8      	str	r0, [r7, #88]	; 0x58

	      // Realiza acciones basadas en la notificación recibida
	      if (flags == NOTIFICATION_VALUE)
 8000f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d1f3      	bne.n	8000f46 <entryMemoria+0x11a>
	      {
	    	  //Acceso al mutex, ya que se comparte el periférico SPI con la tarea SonidoTask.
	    	  osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <entryMemoria+0x164>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f04f 31ff 	mov.w	r1, #4294967295
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 fec8 	bl	8006cfc <osMutexAcquire>

	    	  //Ordenamiento_Puntajes();
	    	  writeNuevosPuntajes(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f000 fa45 	bl	80013fc <writeNuevosPuntajes>
	    	  //guardarNuevosPuntaje();

	    	  osMutexRelease(mutexPuntajesHandle);
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <entryMemoria+0x164>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f005 ff1e 	bl	8006db8 <osMutexRelease>


	    	  //Envio la notificacion 2 para que la tarea PantallaTask pueda pasar del menu guardado_nombre al menu de puntajes una vez que los puntajes
	    	  //ya se encuentran ordenadas y guardadas, ya que sin esta segunda sincronizacion, puede pasarse al menu puntajes sin que estos se encuentren
	    	  //ordenados. El ordenado se realiza en esta tarea MemoriaTask ya que las escrituras de puntajes se realizan solo en esta tarea.
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <entryMemoria+0x174>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2102      	movs	r1, #2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f005 fd52 	bl	8006a2c <osEventFlagsSet>
  {
 8000f88:	e7dd      	b.n	8000f46 <entryMemoria+0x11a>
 8000f8a:	bf00      	nop
 8000f8c:	0800a7f8 	.word	0x0800a7f8
 8000f90:	200001d0 	.word	0x200001d0
 8000f94:	40010c00 	.word	0x40010c00
 8000f98:	20000164 	.word	0x20000164
 8000f9c:	200001d4 	.word	0x200001d4
 8000fa0:	200001d8 	.word	0x200001d8

08000fa4 <entrySonido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySonido */
void entrySonido(void *argument)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entrySonido */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f005 fcbd 	bl	800692c <osDelay>
 8000fb2:	e7fb      	b.n	8000fac <entrySonido+0x8>

08000fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fc6:	f002 f92d 	bl	8003224 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40000800 	.word	0x40000800

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <getPuntajes>:

extern SPI_HandleTypeDef hspi1;

puntajes_t Puntajes[5];

puntajes_t *getPuntajes(uint8_t indice){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4a03      	ldr	r2, [pc, #12]	; (8001000 <getPuntajes+0x1c>)
 8000ff4:	4413      	add	r3, r2
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	200001dc 	.word	0x200001dc

08001004 <Write_Memoria>:

void Write_Memoria(uint16_t address, uint8_t value){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	4613      	mov	r3, r2
 8001012:	717b      	strb	r3, [r7, #5]

	uint8_t data[3];
	data[0] = WRITE;
 8001014:	2302      	movs	r3, #2
 8001016:	733b      	strb	r3, [r7, #12]
	data[1] = address>>8;
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29b      	uxth	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	737b      	strb	r3, [r7, #13]
	data[2] = address;
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	73bb      	strb	r3, [r7, #14]
	//data[4] = value;

	uint8_t wren = WREN;
 8001028:	2306      	movs	r3, #6
 800102a:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 800102c:	2200      	movs	r2, #0
 800102e:	2120      	movs	r1, #32
 8001030:	4816      	ldr	r0, [pc, #88]	; (800108c <Write_Memoria+0x88>)
 8001032:	f003 f80a 	bl	800404a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &wren, 1, 100);  // write data to register
 8001036:	f107 010b 	add.w	r1, r7, #11
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	2201      	movs	r2, #1
 800103e:	4814      	ldr	r0, [pc, #80]	; (8001090 <Write_Memoria+0x8c>)
 8001040:	f004 fc16 	bl	8005870 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8001044:	2201      	movs	r2, #1
 8001046:	2120      	movs	r1, #32
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <Write_Memoria+0x88>)
 800104a:	f002 fffe 	bl	800404a <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f002 f904 	bl	800325c <HAL_Delay>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8001054:	2200      	movs	r2, #0
 8001056:	2120      	movs	r1, #32
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <Write_Memoria+0x88>)
 800105a:	f002 fff6 	bl	800404a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // write data to register
 800105e:	f107 010c 	add.w	r1, r7, #12
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	2203      	movs	r2, #3
 8001066:	480a      	ldr	r0, [pc, #40]	; (8001090 <Write_Memoria+0x8c>)
 8001068:	f004 fc02 	bl	8005870 <HAL_SPI_Transmit>
	HAL_SPI_Transmit (&hspi1, &value, 1, 100);  // write data to register
 800106c:	1d79      	adds	r1, r7, #5
 800106e:	2364      	movs	r3, #100	; 0x64
 8001070:	2201      	movs	r2, #1
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <Write_Memoria+0x8c>)
 8001074:	f004 fbfc 	bl	8005870 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8001078:	2201      	movs	r2, #1
 800107a:	2120      	movs	r1, #32
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <Write_Memoria+0x88>)
 800107e:	f002 ffe4 	bl	800404a <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010c00 	.word	0x40010c00
 8001090:	20000164 	.word	0x20000164

08001094 <Read_memoria>:


uint8_t Read_memoria(uint16_t address)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
	uint8_t data_rec;
	uint8_t data[3];
	data[0] = READ;
 800109e:	2303      	movs	r3, #3
 80010a0:	733b      	strb	r3, [r7, #12]
	data[1] = address>>8;
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	737b      	strb	r3, [r7, #13]
	data[2] = address;
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the pin low
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <Read_memoria+0x58>)
 80010b8:	f002 ffc7 	bl	800404a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // send address
 80010bc:	f107 010c 	add.w	r1, r7, #12
 80010c0:	2364      	movs	r3, #100	; 0x64
 80010c2:	2203      	movs	r2, #3
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <Read_memoria+0x5c>)
 80010c6:	f004 fbd3 	bl	8005870 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, &data_rec, 1, 100);  // receive 6 bytes data
 80010ca:	f107 010f 	add.w	r1, r7, #15
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <Read_memoria+0x5c>)
 80010d4:	f004 fd0f 	bl	8005af6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the pin high
 80010d8:	2201      	movs	r2, #1
 80010da:	2120      	movs	r1, #32
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <Read_memoria+0x58>)
 80010de:	f002 ffb4 	bl	800404a <HAL_GPIO_WritePin>

	return data_rec;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	20000164 	.word	0x20000164

080010f4 <memoriaInit>:



void memoriaInit(){
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

		//puntajesActualizar();

		char buff_nombre[7];

		uint16_t address = MEMORIA_ADDRESS;
 80010fa:	2300      	movs	r3, #0
 80010fc:	81fb      	strh	r3, [r7, #14]
		uint8_t j = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	737b      	strb	r3, [r7, #13]
		uint8_t permiso = true;
 8001102:	2301      	movs	r3, #1
 8001104:	733b      	strb	r3, [r7, #12]
		uint8_t i=0;
 8001106:	2300      	movs	r3, #0
 8001108:	72fb      	strb	r3, [r7, #11]
		uint8_t puntaje_lsb;
		uint8_t puntaje_msb;
		//uint8_t byte_dumb;


		buff_nombre[0]  = Read_memoria(address);
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ffc1 	bl	8001094 <Read_memoria>
 8001112:	4603      	mov	r3, r0
 8001114:	703b      	strb	r3, [r7, #0]
		HAL_Delay(3);
 8001116:	2003      	movs	r0, #3
 8001118:	f002 f8a0 	bl	800325c <HAL_Delay>

		strcpy(buff_nombre, "      ");
 800111c:	4ab6      	ldr	r2, [pc, #728]	; (80013f8 <memoriaInit+0x304>)
 800111e:	463b      	mov	r3, r7
 8001120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001124:	6018      	str	r0, [r3, #0]
 8001126:	3304      	adds	r3, #4
 8001128:	8019      	strh	r1, [r3, #0]
 800112a:	3302      	adds	r3, #2
 800112c:	0c0a      	lsrs	r2, r1, #16
 800112e:	701a      	strb	r2, [r3, #0]

		do{

			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	2b06      	cmp	r3, #6
 8001134:	d00b      	beq.n	800114e <memoriaInit+0x5a>
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	2b0e      	cmp	r3, #14
 800113a:	d008      	beq.n	800114e <memoriaInit+0x5a>
 800113c:	7afb      	ldrb	r3, [r7, #11]
 800113e:	2b16      	cmp	r3, #22
 8001140:	d005      	beq.n	800114e <memoriaInit+0x5a>
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	2b1e      	cmp	r3, #30
 8001146:	d002      	beq.n	800114e <memoriaInit+0x5a>
 8001148:	7afb      	ldrb	r3, [r7, #11]
 800114a:	2b26      	cmp	r3, #38	; 0x26
 800114c:	d109      	bne.n	8001162 <memoriaInit+0x6e>

				puntaje_msb = Read_memoria(address);
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff9f 	bl	8001094 <Read_memoria>
 8001156:	4603      	mov	r3, r0
 8001158:	72bb      	strb	r3, [r7, #10]
				HAL_Delay(3);
 800115a:	2003      	movs	r0, #3
 800115c:	f002 f87e 	bl	800325c <HAL_Delay>
 8001160:	e13a      	b.n	80013d8 <memoriaInit+0x2e4>
			}
			else if((i==7) || (i==15) || (i==23) || (i==31) || (i==39)){
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	2b07      	cmp	r3, #7
 8001166:	d00c      	beq.n	8001182 <memoriaInit+0x8e>
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	2b0f      	cmp	r3, #15
 800116c:	d009      	beq.n	8001182 <memoriaInit+0x8e>
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	2b17      	cmp	r3, #23
 8001172:	d006      	beq.n	8001182 <memoriaInit+0x8e>
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	2b1f      	cmp	r3, #31
 8001178:	d003      	beq.n	8001182 <memoriaInit+0x8e>
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	2b27      	cmp	r3, #39	; 0x27
 800117e:	f040 80a0 	bne.w	80012c2 <memoriaInit+0x1ce>

				puntaje_lsb = Read_memoria(address);
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff85 	bl	8001094 <Read_memoria>
 800118a:	4603      	mov	r3, r0
 800118c:	727b      	strb	r3, [r7, #9]
				HAL_Delay(3);
 800118e:	2003      	movs	r0, #3
 8001190:	f002 f864 	bl	800325c <HAL_Delay>

				switch(i){
 8001194:	7afb      	ldrb	r3, [r7, #11]
 8001196:	3b07      	subs	r3, #7
 8001198:	2b20      	cmp	r3, #32
 800119a:	f200 808b 	bhi.w	80012b4 <memoriaInit+0x1c0>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <memoriaInit+0xb0>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	08001229 	.word	0x08001229
 80011a8:	080012b5 	.word	0x080012b5
 80011ac:	080012b5 	.word	0x080012b5
 80011b0:	080012b5 	.word	0x080012b5
 80011b4:	080012b5 	.word	0x080012b5
 80011b8:	080012b5 	.word	0x080012b5
 80011bc:	080012b5 	.word	0x080012b5
 80011c0:	080012b5 	.word	0x080012b5
 80011c4:	08001245 	.word	0x08001245
 80011c8:	080012b5 	.word	0x080012b5
 80011cc:	080012b5 	.word	0x080012b5
 80011d0:	080012b5 	.word	0x080012b5
 80011d4:	080012b5 	.word	0x080012b5
 80011d8:	080012b5 	.word	0x080012b5
 80011dc:	080012b5 	.word	0x080012b5
 80011e0:	080012b5 	.word	0x080012b5
 80011e4:	08001261 	.word	0x08001261
 80011e8:	080012b5 	.word	0x080012b5
 80011ec:	080012b5 	.word	0x080012b5
 80011f0:	080012b5 	.word	0x080012b5
 80011f4:	080012b5 	.word	0x080012b5
 80011f8:	080012b5 	.word	0x080012b5
 80011fc:	080012b5 	.word	0x080012b5
 8001200:	080012b5 	.word	0x080012b5
 8001204:	0800127d 	.word	0x0800127d
 8001208:	080012b5 	.word	0x080012b5
 800120c:	080012b5 	.word	0x080012b5
 8001210:	080012b5 	.word	0x080012b5
 8001214:	080012b5 	.word	0x080012b5
 8001218:	080012b5 	.word	0x080012b5
 800121c:	080012b5 	.word	0x080012b5
 8001220:	080012b5 	.word	0x080012b5
 8001224:	08001299 	.word	0x08001299

				case 7:
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001228:	7abb      	ldrb	r3, [r7, #10]
 800122a:	b29b      	uxth	r3, r3
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b29d      	uxth	r5, r3
 8001230:	7a7b      	ldrb	r3, [r7, #9]
 8001232:	b29c      	uxth	r4, r3
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fed5 	bl	8000fe4 <getPuntajes>
 800123a:	4603      	mov	r3, r0
 800123c:	192a      	adds	r2, r5, r4
 800123e:	b292      	uxth	r2, r2
 8001240:	80da      	strh	r2, [r3, #6]
					break;
 8001242:	e037      	b.n	80012b4 <memoriaInit+0x1c0>
				case 15:
					getPuntajes(1)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	b29b      	uxth	r3, r3
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b29d      	uxth	r5, r3
 800124c:	7a7b      	ldrb	r3, [r7, #9]
 800124e:	b29c      	uxth	r4, r3
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff fec7 	bl	8000fe4 <getPuntajes>
 8001256:	4603      	mov	r3, r0
 8001258:	192a      	adds	r2, r5, r4
 800125a:	b292      	uxth	r2, r2
 800125c:	80da      	strh	r2, [r3, #6]
					break;
 800125e:	e029      	b.n	80012b4 <memoriaInit+0x1c0>
				case 23:
					getPuntajes(2)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001260:	7abb      	ldrb	r3, [r7, #10]
 8001262:	b29b      	uxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b29d      	uxth	r5, r3
 8001268:	7a7b      	ldrb	r3, [r7, #9]
 800126a:	b29c      	uxth	r4, r3
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff feb9 	bl	8000fe4 <getPuntajes>
 8001272:	4603      	mov	r3, r0
 8001274:	192a      	adds	r2, r5, r4
 8001276:	b292      	uxth	r2, r2
 8001278:	80da      	strh	r2, [r3, #6]
					break;
 800127a:	e01b      	b.n	80012b4 <memoriaInit+0x1c0>
				case 31:
					getPuntajes(3)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 800127c:	7abb      	ldrb	r3, [r7, #10]
 800127e:	b29b      	uxth	r3, r3
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b29d      	uxth	r5, r3
 8001284:	7a7b      	ldrb	r3, [r7, #9]
 8001286:	b29c      	uxth	r4, r3
 8001288:	2003      	movs	r0, #3
 800128a:	f7ff feab 	bl	8000fe4 <getPuntajes>
 800128e:	4603      	mov	r3, r0
 8001290:	192a      	adds	r2, r5, r4
 8001292:	b292      	uxth	r2, r2
 8001294:	80da      	strh	r2, [r3, #6]
					break;
 8001296:	e00d      	b.n	80012b4 <memoriaInit+0x1c0>
				case 39:
					getPuntajes(4)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001298:	7abb      	ldrb	r3, [r7, #10]
 800129a:	b29b      	uxth	r3, r3
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b29d      	uxth	r5, r3
 80012a0:	7a7b      	ldrb	r3, [r7, #9]
 80012a2:	b29c      	uxth	r4, r3
 80012a4:	2004      	movs	r0, #4
 80012a6:	f7ff fe9d 	bl	8000fe4 <getPuntajes>
 80012aa:	4603      	mov	r3, r0
 80012ac:	192a      	adds	r2, r5, r4
 80012ae:	b292      	uxth	r2, r2
 80012b0:	80da      	strh	r2, [r3, #6]
					break;
 80012b2:	bf00      	nop

				}

				puntaje_msb = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	72bb      	strb	r3, [r7, #10]
				puntaje_lsb = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	727b      	strb	r3, [r7, #9]
				permiso = true;
 80012bc:	2301      	movs	r3, #1
 80012be:	733b      	strb	r3, [r7, #12]
 80012c0:	e08a      	b.n	80013d8 <memoriaInit+0x2e4>

			}
			else{

				if( (buff_nombre[j] != '\0') && permiso==true){
 80012c2:	7b7b      	ldrb	r3, [r7, #13]
 80012c4:	3310      	adds	r3, #16
 80012c6:	443b      	add	r3, r7
 80012c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d07c      	beq.n	80013ca <memoriaInit+0x2d6>
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d179      	bne.n	80013ca <memoriaInit+0x2d6>
					buff_nombre[j]  = Read_memoria(address);
 80012d6:	7b7c      	ldrb	r4, [r7, #13]
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff feda 	bl	8001094 <Read_memoria>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	f104 0310 	add.w	r3, r4, #16
 80012e8:	443b      	add	r3, r7
 80012ea:	f803 2c10 	strb.w	r2, [r3, #-16]
					HAL_Delay(3);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f001 ffb4 	bl	800325c <HAL_Delay>

					if(buff_nombre[j] == '\0'){
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	3310      	adds	r3, #16
 80012f8:	443b      	add	r3, r7
 80012fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d15f      	bne.n	80013c2 <memoriaInit+0x2ce>

						if((i>=0 && i<6)){
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	2b05      	cmp	r3, #5
 8001306:	d80a      	bhi.n	800131e <memoriaInit+0x22a>
							strcpy(getPuntajes(0)->nombre, buff_nombre);
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff fe6b 	bl	8000fe4 <getPuntajes>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4610      	mov	r0, r2
 8001318:	f009 fa20 	bl	800a75c <strcpy>
 800131c:	e042      	b.n	80013a4 <memoriaInit+0x2b0>
						}
						else if((i>=8 && i<14)){
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	2b07      	cmp	r3, #7
 8001322:	d90d      	bls.n	8001340 <memoriaInit+0x24c>
 8001324:	7afb      	ldrb	r3, [r7, #11]
 8001326:	2b0d      	cmp	r3, #13
 8001328:	d80a      	bhi.n	8001340 <memoriaInit+0x24c>
							strcpy(getPuntajes(1)->nombre, buff_nombre);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fe5a 	bl	8000fe4 <getPuntajes>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4610      	mov	r0, r2
 800133a:	f009 fa0f 	bl	800a75c <strcpy>
 800133e:	e031      	b.n	80013a4 <memoriaInit+0x2b0>
						}
						else if((i>=16 && i<22)){
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	2b0f      	cmp	r3, #15
 8001344:	d90d      	bls.n	8001362 <memoriaInit+0x26e>
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	2b15      	cmp	r3, #21
 800134a:	d80a      	bhi.n	8001362 <memoriaInit+0x26e>
							strcpy(getPuntajes(2)->nombre, buff_nombre);
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff fe49 	bl	8000fe4 <getPuntajes>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f009 f9fe 	bl	800a75c <strcpy>
 8001360:	e020      	b.n	80013a4 <memoriaInit+0x2b0>
						}
						else if((i>=24 && i<30)){
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	2b17      	cmp	r3, #23
 8001366:	d90d      	bls.n	8001384 <memoriaInit+0x290>
 8001368:	7afb      	ldrb	r3, [r7, #11]
 800136a:	2b1d      	cmp	r3, #29
 800136c:	d80a      	bhi.n	8001384 <memoriaInit+0x290>
							strcpy(getPuntajes(3)->nombre, buff_nombre);
 800136e:	2003      	movs	r0, #3
 8001370:	f7ff fe38 	bl	8000fe4 <getPuntajes>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f009 f9ed 	bl	800a75c <strcpy>
 8001382:	e00f      	b.n	80013a4 <memoriaInit+0x2b0>
						}
						else if((i>=32 && i<38)){
 8001384:	7afb      	ldrb	r3, [r7, #11]
 8001386:	2b1f      	cmp	r3, #31
 8001388:	d90c      	bls.n	80013a4 <memoriaInit+0x2b0>
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	2b25      	cmp	r3, #37	; 0x25
 800138e:	d809      	bhi.n	80013a4 <memoriaInit+0x2b0>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8001390:	2004      	movs	r0, #4
 8001392:	f7ff fe27 	bl	8000fe4 <getPuntajes>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4610      	mov	r0, r2
 80013a0:	f009 f9dc 	bl	800a75c <strcpy>
						}

						j = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	737b      	strb	r3, [r7, #13]
						strcpy(buff_nombre, "      ");
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <memoriaInit+0x304>)
 80013aa:	463b      	mov	r3, r7
 80013ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b0:	6018      	str	r0, [r3, #0]
 80013b2:	3304      	adds	r3, #4
 80013b4:	8019      	strh	r1, [r3, #0]
 80013b6:	3302      	adds	r3, #2
 80013b8:	0c0a      	lsrs	r2, r1, #16
 80013ba:	701a      	strb	r2, [r3, #0]
						permiso = false;
 80013bc:	2300      	movs	r3, #0
 80013be:	733b      	strb	r3, [r7, #12]
					if(buff_nombre[j] == '\0'){
 80013c0:	e00a      	b.n	80013d8 <memoriaInit+0x2e4>
					}
					else{
						j++;
 80013c2:	7b7b      	ldrb	r3, [r7, #13]
 80013c4:	3301      	adds	r3, #1
 80013c6:	737b      	strb	r3, [r7, #13]
					if(buff_nombre[j] == '\0'){
 80013c8:	e006      	b.n	80013d8 <memoriaInit+0x2e4>
					}
				}

				else{
					Read_memoria(address);
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe61 	bl	8001094 <Read_memoria>
					HAL_Delay(3);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f001 ff42 	bl	800325c <HAL_Delay>
				}

			}
			i++;
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	3301      	adds	r3, #1
 80013dc:	72fb      	strb	r3, [r7, #11]
			address++;
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	3301      	adds	r3, #1
 80013e2:	81fb      	strh	r3, [r7, #14]
			//HAL_Delay(3);

		}while(i != 40);
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	2b28      	cmp	r3, #40	; 0x28
 80013e8:	f47f aea2 	bne.w	8001130 <memoriaInit+0x3c>



}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800a800 	.word	0x0800a800

080013fc <writeNuevosPuntajes>:



void writeNuevosPuntajes(uint8_t cambios){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]

	char buff_nuevosPuntajes[TAMANO_TOTAL_PUNTAJES];

	//Primero almaceno los datos en el 'buff_nuevosPuntaje' y luego escribo la memoria con este buffer.

	uint8_t k=0;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint16_t address;


	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001412:	e188      	b.n	8001726 <writeNuevosPuntajes+0x32a>

		if(i>=0 && i<6){
 8001414:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001418:	2b05      	cmp	r3, #5
 800141a:	d812      	bhi.n	8001442 <writeNuevosPuntajes+0x46>

			buff_nuevosPuntajes[i] = getPuntajes(0)->nombre[k];
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff fde1 	bl	8000fe4 <getPuntajes>
 8001422:	4601      	mov	r1, r0
 8001424:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001428:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800142c:	5c8a      	ldrb	r2, [r1, r2]
 800142e:	3338      	adds	r3, #56	; 0x38
 8001430:	443b      	add	r3, r7
 8001432:	f803 2c30 	strb.w	r2, [r3, #-48]
			k++;
 8001436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800143a:	3301      	adds	r3, #1
 800143c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001440:	e06a      	b.n	8001518 <writeNuevosPuntajes+0x11c>
		}
		else if(i>=8 && i<14){
 8001442:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001446:	2b07      	cmp	r3, #7
 8001448:	d916      	bls.n	8001478 <writeNuevosPuntajes+0x7c>
 800144a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800144e:	2b0d      	cmp	r3, #13
 8001450:	d812      	bhi.n	8001478 <writeNuevosPuntajes+0x7c>

			buff_nuevosPuntajes[i] = getPuntajes(1)->nombre[k];
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff fdc6 	bl	8000fe4 <getPuntajes>
 8001458:	4601      	mov	r1, r0
 800145a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800145e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001462:	5c8a      	ldrb	r2, [r1, r2]
 8001464:	3338      	adds	r3, #56	; 0x38
 8001466:	443b      	add	r3, r7
 8001468:	f803 2c30 	strb.w	r2, [r3, #-48]
			k++;
 800146c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001470:	3301      	adds	r3, #1
 8001472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001476:	e04f      	b.n	8001518 <writeNuevosPuntajes+0x11c>
		}
		else if(i>=16 && i<22){
 8001478:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d916      	bls.n	80014ae <writeNuevosPuntajes+0xb2>
 8001480:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001484:	2b15      	cmp	r3, #21
 8001486:	d812      	bhi.n	80014ae <writeNuevosPuntajes+0xb2>

			buff_nuevosPuntajes[i] = getPuntajes(2)->nombre[k];
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff fdab 	bl	8000fe4 <getPuntajes>
 800148e:	4601      	mov	r1, r0
 8001490:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001494:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001498:	5c8a      	ldrb	r2, [r1, r2]
 800149a:	3338      	adds	r3, #56	; 0x38
 800149c:	443b      	add	r3, r7
 800149e:	f803 2c30 	strb.w	r2, [r3, #-48]
			k++;
 80014a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014a6:	3301      	adds	r3, #1
 80014a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80014ac:	e034      	b.n	8001518 <writeNuevosPuntajes+0x11c>
		}
		else if(i>=24 && i<30){
 80014ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014b2:	2b17      	cmp	r3, #23
 80014b4:	d916      	bls.n	80014e4 <writeNuevosPuntajes+0xe8>
 80014b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ba:	2b1d      	cmp	r3, #29
 80014bc:	d812      	bhi.n	80014e4 <writeNuevosPuntajes+0xe8>

			buff_nuevosPuntajes[i] = getPuntajes(3)->nombre[k];
 80014be:	2003      	movs	r0, #3
 80014c0:	f7ff fd90 	bl	8000fe4 <getPuntajes>
 80014c4:	4601      	mov	r1, r0
 80014c6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80014ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ce:	5c8a      	ldrb	r2, [r1, r2]
 80014d0:	3338      	adds	r3, #56	; 0x38
 80014d2:	443b      	add	r3, r7
 80014d4:	f803 2c30 	strb.w	r2, [r3, #-48]
			k++;
 80014d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014dc:	3301      	adds	r3, #1
 80014de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80014e2:	e019      	b.n	8001518 <writeNuevosPuntajes+0x11c>
		}
		else if(i>=32 && i<38){
 80014e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014e8:	2b1f      	cmp	r3, #31
 80014ea:	d915      	bls.n	8001518 <writeNuevosPuntajes+0x11c>
 80014ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014f0:	2b25      	cmp	r3, #37	; 0x25
 80014f2:	d811      	bhi.n	8001518 <writeNuevosPuntajes+0x11c>

			buff_nuevosPuntajes[i] = getPuntajes(4)->nombre[k];
 80014f4:	2004      	movs	r0, #4
 80014f6:	f7ff fd75 	bl	8000fe4 <getPuntajes>
 80014fa:	4601      	mov	r1, r0
 80014fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001504:	5c8a      	ldrb	r2, [r1, r2]
 8001506:	3338      	adds	r3, #56	; 0x38
 8001508:	443b      	add	r3, r7
 800150a:	f803 2c30 	strb.w	r2, [r3, #-48]
			k++;
 800150e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001512:	3301      	adds	r3, #1
 8001514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}




		switch(i){
 8001518:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800151c:	3b06      	subs	r3, #6
 800151e:	2b21      	cmp	r3, #33	; 0x21
 8001520:	f200 80fc 	bhi.w	800171c <writeNuevosPuntajes+0x320>
 8001524:	a201      	add	r2, pc, #4	; (adr r2, 800152c <writeNuevosPuntajes+0x130>)
 8001526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152a:	bf00      	nop
 800152c:	080015b5 	.word	0x080015b5
 8001530:	080015d9 	.word	0x080015d9
 8001534:	0800171d 	.word	0x0800171d
 8001538:	0800171d 	.word	0x0800171d
 800153c:	0800171d 	.word	0x0800171d
 8001540:	0800171d 	.word	0x0800171d
 8001544:	0800171d 	.word	0x0800171d
 8001548:	0800171d 	.word	0x0800171d
 800154c:	080015fd 	.word	0x080015fd
 8001550:	08001621 	.word	0x08001621
 8001554:	0800171d 	.word	0x0800171d
 8001558:	0800171d 	.word	0x0800171d
 800155c:	0800171d 	.word	0x0800171d
 8001560:	0800171d 	.word	0x0800171d
 8001564:	0800171d 	.word	0x0800171d
 8001568:	0800171d 	.word	0x0800171d
 800156c:	08001645 	.word	0x08001645
 8001570:	08001669 	.word	0x08001669
 8001574:	0800171d 	.word	0x0800171d
 8001578:	0800171d 	.word	0x0800171d
 800157c:	0800171d 	.word	0x0800171d
 8001580:	0800171d 	.word	0x0800171d
 8001584:	0800171d 	.word	0x0800171d
 8001588:	0800171d 	.word	0x0800171d
 800158c:	0800168d 	.word	0x0800168d
 8001590:	080016b1 	.word	0x080016b1
 8001594:	0800171d 	.word	0x0800171d
 8001598:	0800171d 	.word	0x0800171d
 800159c:	0800171d 	.word	0x0800171d
 80015a0:	0800171d 	.word	0x0800171d
 80015a4:	0800171d 	.word	0x0800171d
 80015a8:	0800171d 	.word	0x0800171d
 80015ac:	080016d5 	.word	0x080016d5
 80015b0:	080016f9 	.word	0x080016f9


		case 6:
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje >>8;
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff fd15 	bl	8000fe4 <getPuntajes>
 80015ba:	4603      	mov	r3, r0
 80015bc:	88db      	ldrh	r3, [r3, #6]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	3338      	adds	r3, #56	; 0x38
 80015ca:	443b      	add	r3, r7
 80015cc:	f803 2c30 	strb.w	r2, [r3, #-48]
			k = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 80015d6:	e0a1      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 7:
			buff_nuevosPuntajes[i] = getPuntajes(0)->puntaje && 0xFF;
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fd03 	bl	8000fe4 <getPuntajes>
 80015de:	4603      	mov	r3, r0
 80015e0:	88db      	ldrh	r3, [r3, #6]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <writeNuevosPuntajes+0x1ee>
 80015e6:	2201      	movs	r2, #1
 80015e8:	e000      	b.n	80015ec <writeNuevosPuntajes+0x1f0>
 80015ea:	2200      	movs	r2, #0
 80015ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	3338      	adds	r3, #56	; 0x38
 80015f4:	443b      	add	r3, r7
 80015f6:	f803 2c30 	strb.w	r2, [r3, #-48]
			break;
 80015fa:	e08f      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 14:
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje >>8;
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fcf1 	bl	8000fe4 <getPuntajes>
 8001602:	4603      	mov	r3, r0
 8001604:	88db      	ldrh	r3, [r3, #6]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	b29a      	uxth	r2, r3
 800160a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	3338      	adds	r3, #56	; 0x38
 8001612:	443b      	add	r3, r7
 8001614:	f803 2c30 	strb.w	r2, [r3, #-48]
			k = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 800161e:	e07d      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 15:
			buff_nuevosPuntajes[i] = getPuntajes(1)->puntaje && 0xFF;
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff fcdf 	bl	8000fe4 <getPuntajes>
 8001626:	4603      	mov	r3, r0
 8001628:	88db      	ldrh	r3, [r3, #6]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <writeNuevosPuntajes+0x236>
 800162e:	2201      	movs	r2, #1
 8001630:	e000      	b.n	8001634 <writeNuevosPuntajes+0x238>
 8001632:	2200      	movs	r2, #0
 8001634:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	3338      	adds	r3, #56	; 0x38
 800163c:	443b      	add	r3, r7
 800163e:	f803 2c30 	strb.w	r2, [r3, #-48]
			break;
 8001642:	e06b      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 22:
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje >>8;
 8001644:	2002      	movs	r0, #2
 8001646:	f7ff fccd 	bl	8000fe4 <getPuntajes>
 800164a:	4603      	mov	r3, r0
 800164c:	88db      	ldrh	r3, [r3, #6]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29a      	uxth	r2, r3
 8001652:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	3338      	adds	r3, #56	; 0x38
 800165a:	443b      	add	r3, r7
 800165c:	f803 2c30 	strb.w	r2, [r3, #-48]
			k = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 8001666:	e059      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 23:
			buff_nuevosPuntajes[i] = getPuntajes(2)->puntaje && 0xFF;
 8001668:	2002      	movs	r0, #2
 800166a:	f7ff fcbb 	bl	8000fe4 <getPuntajes>
 800166e:	4603      	mov	r3, r0
 8001670:	88db      	ldrh	r3, [r3, #6]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <writeNuevosPuntajes+0x27e>
 8001676:	2201      	movs	r2, #1
 8001678:	e000      	b.n	800167c <writeNuevosPuntajes+0x280>
 800167a:	2200      	movs	r2, #0
 800167c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	3338      	adds	r3, #56	; 0x38
 8001684:	443b      	add	r3, r7
 8001686:	f803 2c30 	strb.w	r2, [r3, #-48]
			break;
 800168a:	e047      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 30:
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje >>8;
 800168c:	2003      	movs	r0, #3
 800168e:	f7ff fca9 	bl	8000fe4 <getPuntajes>
 8001692:	4603      	mov	r3, r0
 8001694:	88db      	ldrh	r3, [r3, #6]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29a      	uxth	r2, r3
 800169a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	3338      	adds	r3, #56	; 0x38
 80016a2:	443b      	add	r3, r7
 80016a4:	f803 2c30 	strb.w	r2, [r3, #-48]
			k = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 80016ae:	e035      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 31:
			buff_nuevosPuntajes[i] = getPuntajes(3)->puntaje && 0xFF;
 80016b0:	2003      	movs	r0, #3
 80016b2:	f7ff fc97 	bl	8000fe4 <getPuntajes>
 80016b6:	4603      	mov	r3, r0
 80016b8:	88db      	ldrh	r3, [r3, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <writeNuevosPuntajes+0x2c6>
 80016be:	2201      	movs	r2, #1
 80016c0:	e000      	b.n	80016c4 <writeNuevosPuntajes+0x2c8>
 80016c2:	2200      	movs	r2, #0
 80016c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	3338      	adds	r3, #56	; 0x38
 80016cc:	443b      	add	r3, r7
 80016ce:	f803 2c30 	strb.w	r2, [r3, #-48]
			break;
 80016d2:	e023      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 38:
			buff_nuevosPuntajes[i] = getPuntajes(4)->puntaje >>8;
 80016d4:	2004      	movs	r0, #4
 80016d6:	f7ff fc85 	bl	8000fe4 <getPuntajes>
 80016da:	4603      	mov	r3, r0
 80016dc:	88db      	ldrh	r3, [r3, #6]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	3338      	adds	r3, #56	; 0x38
 80016ea:	443b      	add	r3, r7
 80016ec:	f803 2c30 	strb.w	r2, [r3, #-48]
			k = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			break;
 80016f6:	e011      	b.n	800171c <writeNuevosPuntajes+0x320>
		case 39:
			buff_nuevosPuntajes[i] = getPuntajes(4)->puntaje && 0xFF;
 80016f8:	2004      	movs	r0, #4
 80016fa:	f7ff fc73 	bl	8000fe4 <getPuntajes>
 80016fe:	4603      	mov	r3, r0
 8001700:	88db      	ldrh	r3, [r3, #6]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <writeNuevosPuntajes+0x30e>
 8001706:	2201      	movs	r2, #1
 8001708:	e000      	b.n	800170c <writeNuevosPuntajes+0x310>
 800170a:	2200      	movs	r2, #0
 800170c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	3338      	adds	r3, #56	; 0x38
 8001714:	443b      	add	r3, r7
 8001716:	f803 2c30 	strb.w	r2, [r3, #-48]
			break;
 800171a:	bf00      	nop
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 800171c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001720:	3301      	adds	r3, #1
 8001722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001726:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800172a:	2b27      	cmp	r3, #39	; 0x27
 800172c:	f67f ae72 	bls.w	8001414 <writeNuevosPuntajes+0x18>
	//Ahora sí se realiza la escritura.
	//La escritura se realizará siempre que se realice mas de un cambio en las posiciones de los puntajes.
	//La reescritura de la posicion 5 (getPuntajes(4)) siempre se realizará.


		if(cambios > 1){
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d91d      	bls.n	8001772 <writeNuevosPuntajes+0x376>

			address = MEMORIA_ADDRESS;
 8001736:	2300      	movs	r3, #0
 8001738:	86bb      	strh	r3, [r7, #52]	; 0x34

			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001740:	e012      	b.n	8001768 <writeNuevosPuntajes+0x36c>
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 8001742:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001746:	3338      	adds	r3, #56	; 0x38
 8001748:	443b      	add	r3, r7
 800174a:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 800174e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fc56 	bl	8001004 <Write_Memoria>
				address++;
 8001758:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800175a:	3301      	adds	r3, #1
 800175c:	86bb      	strh	r3, [r7, #52]	; 0x34
			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 800175e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001762:	3301      	adds	r3, #1
 8001764:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001768:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800176c:	2b27      	cmp	r3, #39	; 0x27
 800176e:	d9e8      	bls.n	8001742 <writeNuevosPuntajes+0x346>

			}

		}

}
 8001770:	e023      	b.n	80017ba <writeNuevosPuntajes+0x3be>
			address = MEMORIA_ADDRESS + 32;
 8001772:	2320      	movs	r3, #32
 8001774:	86bb      	strh	r3, [r7, #52]	; 0x34
			Write_Memoria(address, buff_nuevosPuntajes[32]);
 8001776:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800177a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc40 	bl	8001004 <Write_Memoria>
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001784:	2320      	movs	r3, #32
 8001786:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800178a:	e012      	b.n	80017b2 <writeNuevosPuntajes+0x3b6>
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 800178c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001790:	3338      	adds	r3, #56	; 0x38
 8001792:	443b      	add	r3, r7
 8001794:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8001798:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fc31 	bl	8001004 <Write_Memoria>
				address++;
 80017a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80017a4:	3301      	adds	r3, #1
 80017a6:	86bb      	strh	r3, [r7, #52]	; 0x34
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 80017a8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80017ac:	3301      	adds	r3, #1
 80017ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80017b2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80017b6:	2b27      	cmp	r3, #39	; 0x27
 80017b8:	d9e8      	bls.n	800178c <writeNuevosPuntajes+0x390>
}
 80017ba:	bf00      	nop
 80017bc:	3738      	adds	r7, #56	; 0x38
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop

080017c4 <getMenu>:
extern osEventFlagsId_t notificationFlag;
extern osEventFlagsId_t notificationFlag2;

menu_t menu;

menu_t *getMenu(){
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

	return &menu;
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <getMenu+0x10>)
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000204 	.word	0x20000204

080017d8 <menuInit>:


void menuInit(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 80017dc:	f000 fd44 	bl	8002268 <SSD1306_Init>
	SSD1306_Clear();
 80017e0:	f001 fa79 	bl	8002cd6 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 80017e4:	f000 fe04 	bl	80023f0 <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 80017e8:	f7fe fcec 	bl	80001c4 <playerInit>
	InvaderInit();
 80017ec:	f7fe fd32 	bl	8000254 <InvaderInit>
	disparoInit();
 80017f0:	f7fe fee2 	bl	80005b8 <disparoInit>

	//Se inicializa el cursor de la pantalla principal.
	//getMenu()->menuActual = guardar_nombre;
	getMenu()->menuActual = menu_principal;
 80017f4:	f7ff ffe6 	bl	80017c4 <getMenu>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80017fe:	f7ff ffe1 	bl	80017c4 <getMenu>
 8001802:	4603      	mov	r3, r0
 8001804:	2226      	movs	r2, #38	; 0x26
 8001806:	705a      	strb	r2, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001808:	f7ff ffdc 	bl	80017c4 <getMenu>
 800180c:	4603      	mov	r3, r0
 800180e:	2209      	movs	r2, #9
 8001810:	711a      	strb	r2, [r3, #4]
	getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001812:	f7ff ffd7 	bl	80017c4 <getMenu>
 8001816:	4603      	mov	r3, r0
 8001818:	221b      	movs	r2, #27
 800181a:	715a      	strb	r2, [r3, #5]
	getMenu()->GuardarNombre.indice = 0;
 800181c:	f7ff ffd2 	bl	80017c4 <getMenu>
 8001820:	4603      	mov	r3, r0
 8001822:	2200      	movs	r2, #0
 8001824:	731a      	strb	r2, [r3, #12]

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <menuActualizar>:

void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b092      	sub	sp, #72	; 0x48
 8001830:	af02      	add	r7, sp, #8
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	460b      	mov	r3, r1
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	4613      	mov	r3, r2
 800183c:	717b      	strb	r3, [r7, #5]


	switch(getMenu()->menuActual){
 800183e:	f7ff ffc1 	bl	80017c4 <getMenu>
 8001842:	4603      	mov	r3, r0
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b04      	cmp	r3, #4
 8001848:	f200 8494 	bhi.w	8002174 <menuActualizar+0x948>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <menuActualizar+0x28>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001869 	.word	0x08001869
 8001858:	08001923 	.word	0x08001923
 800185c:	08001975 	.word	0x08001975
 8001860:	08001a55 	.word	0x08001a55
 8001864:	0800214f 	.word	0x0800214f

//--------------------------------------------------------------MENU PRINCIPAL-----------------------------------------------------------------------------
	case menu_principal:

		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 8001868:	2301      	movs	r3, #1
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2320      	movs	r3, #32
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2340      	movs	r3, #64	; 0x40
 8001872:	4aab      	ldr	r2, [pc, #684]	; (8001b20 <menuActualizar+0x2f4>)
 8001874:	2100      	movs	r1, #0
 8001876:	2023      	movs	r0, #35	; 0x23
 8001878:	f000 fc8e 	bl	8002198 <SSD1306_DrawBitmap>

		SSD1306_GotoXY(45, 35);
 800187c:	2123      	movs	r1, #35	; 0x23
 800187e:	202d      	movs	r0, #45	; 0x2d
 8001880:	f000 fe5a 	bl	8002538 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8001884:	2201      	movs	r2, #1
 8001886:	49a7      	ldr	r1, [pc, #668]	; (8001b24 <menuActualizar+0x2f8>)
 8001888:	48a7      	ldr	r0, [pc, #668]	; (8001b28 <menuActualizar+0x2fc>)
 800188a:	f000 feeb 	bl	8002664 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 800188e:	212d      	movs	r1, #45	; 0x2d
 8001890:	202d      	movs	r0, #45	; 0x2d
 8001892:	f000 fe51 	bl	8002538 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8001896:	2201      	movs	r2, #1
 8001898:	49a2      	ldr	r1, [pc, #648]	; (8001b24 <menuActualizar+0x2f8>)
 800189a:	48a4      	ldr	r0, [pc, #656]	; (8001b2c <menuActualizar+0x300>)
 800189c:	f000 fee2 	bl	8002664 <SSD1306_Puts>


		if(y == arriba){
 80018a0:	79bb      	ldrb	r3, [r7, #6]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d105      	bne.n	80018b2 <menuActualizar+0x86>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80018a6:	f7ff ff8d 	bl	80017c4 <getMenu>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2226      	movs	r2, #38	; 0x26
 80018ae:	705a      	strb	r2, [r3, #1]
 80018b0:	e007      	b.n	80018c2 <menuActualizar+0x96>
		}
		else if(y == abajo){
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d104      	bne.n	80018c2 <menuActualizar+0x96>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 80018b8:	f7ff ff84 	bl	80017c4 <getMenu>
 80018bc:	4603      	mov	r3, r0
 80018be:	2230      	movs	r2, #48	; 0x30
 80018c0:	705a      	strb	r2, [r3, #1]
		}

		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 80018c2:	f7ff ff7f 	bl	80017c4 <getMenu>
 80018c6:	4603      	mov	r3, r0
 80018c8:	785b      	ldrb	r3, [r3, #1]
 80018ca:	b219      	sxth	r1, r3
 80018cc:	2301      	movs	r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	2027      	movs	r0, #39	; 0x27
 80018d2:	f001 f851 	bl	8002978 <SSD1306_DrawCircle>


		switch(boton){
 80018d6:	797b      	ldrb	r3, [r7, #5]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d019      	beq.n	8001910 <menuActualizar+0xe4>
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d11a      	bne.n	8001916 <menuActualizar+0xea>
		case true:
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 80018e0:	f7ff ff70 	bl	80017c4 <getMenu>
 80018e4:	4603      	mov	r3, r0
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	2b26      	cmp	r3, #38	; 0x26
 80018ea:	d105      	bne.n	80018f8 <menuActualizar+0xcc>
				getMenu()->menuActual = juego;
 80018ec:	f7ff ff6a 	bl	80017c4 <getMenu>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
			}
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
				getMenu()->menuActual = puntajes;
			}
			break;
 80018f6:	e011      	b.n	800191c <menuActualizar+0xf0>
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 80018f8:	f7ff ff64 	bl	80017c4 <getMenu>
 80018fc:	4603      	mov	r3, r0
 80018fe:	785b      	ldrb	r3, [r3, #1]
 8001900:	2b30      	cmp	r3, #48	; 0x30
 8001902:	d10b      	bne.n	800191c <menuActualizar+0xf0>
				getMenu()->menuActual = puntajes;
 8001904:	f7ff ff5e 	bl	80017c4 <getMenu>
 8001908:	4603      	mov	r3, r0
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
			break;
 800190e:	e005      	b.n	800191c <menuActualizar+0xf0>
		case false:
			break;
 8001910:	bf00      	nop
 8001912:	f000 bc32 	b.w	800217a <menuActualizar+0x94e>
		default:
			break;
 8001916:	bf00      	nop
 8001918:	f000 bc2f 	b.w	800217a <menuActualizar+0x94e>
			break;
 800191c:	bf00      	nop
		}

		break;
 800191e:	f000 bc2c 	b.w	800217a <menuActualizar+0x94e>
//--------------------------------------------------------------  JUEGO -----------------------------------------------------------------------------

	case juego:

		//Se grafican el player, aliens y disparo.
		plotPlayer(x, getPlayer());
 8001922:	f7fe fc15 	bl	8000150 <getPlayer>
 8001926:	4602      	mov	r2, r0
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fc55 	bl	80001dc <plotPlayer>
		plotAliens();
 8001932:	f7fe fce1 	bl	80002f8 <plotAliens>

		disparar();
 8001936:	f7fe fe51 	bl	80005dc <disparar>


		//Prender led si se apretó el boton
		if(boton == true){
 800193a:	797b      	ldrb	r3, [r7, #5]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d111      	bne.n	8001964 <menuActualizar+0x138>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001946:	487a      	ldr	r0, [pc, #488]	; (8001b30 <menuActualizar+0x304>)
 8001948:	f002 fb7f 	bl	800404a <HAL_GPIO_WritePin>
			//boton_apretado = 1;
			getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 800194c:	f7fe fc30 	bl	80001b0 <getDisparo>
 8001950:	4603      	mov	r3, r0
 8001952:	78dc      	ldrb	r4, [r3, #3]
 8001954:	f7fe fc2c 	bl	80001b0 <getDisparo>
 8001958:	4603      	mov	r3, r0
 800195a:	1c62      	adds	r2, r4, #1
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	70da      	strb	r2, [r3, #3]
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		}

		break;
 8001960:	f000 bc0b 	b.w	800217a <menuActualizar+0x94e>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800196a:	4871      	ldr	r0, [pc, #452]	; (8001b30 <menuActualizar+0x304>)
 800196c:	f002 fb6d 	bl	800404a <HAL_GPIO_WritePin>
		break;
 8001970:	f000 bc03 	b.w	800217a <menuActualizar+0x94e>

//-------------------------------------------------------------- PUNTAJES-----------------------------------------------------------------------------
	case puntajes:

		//Titulo 'Puntajes'
		SSD1306_GotoXY(35, 0);
 8001974:	2100      	movs	r1, #0
 8001976:	2023      	movs	r0, #35	; 0x23
 8001978:	f000 fdde 	bl	8002538 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 800197c:	2201      	movs	r2, #1
 800197e:	4969      	ldr	r1, [pc, #420]	; (8001b24 <menuActualizar+0x2f8>)
 8001980:	486a      	ldr	r0, [pc, #424]	; (8001b2c <menuActualizar+0x300>)
 8001982:	f000 fe6f 	bl	8002664 <SSD1306_Puts>

		//char buff_retorno[5][6];

		//Nombres

		for(uint8_t j=0; j<5;j++){
 8001986:	2300      	movs	r3, #0
 8001988:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800198c:	e020      	b.n	80019d0 <menuActualizar+0x1a4>

			posicion = j*10 + 13;
 800198e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001992:	461a      	mov	r2, r3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4413      	add	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	330d      	adds	r3, #13
 800199e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

			SSD1306_GotoXY(15, posicion);
 80019a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4619      	mov	r1, r3
 80019aa:	200f      	movs	r0, #15
 80019ac:	f000 fdc4 	bl	8002538 <SSD1306_GotoXY>
			//strcpy(buff_retorno[j], "jdsa");
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 80019b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fb15 	bl	8000fe4 <getPuntajes>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2201      	movs	r2, #1
 80019be:	4959      	ldr	r1, [pc, #356]	; (8001b24 <menuActualizar+0x2f8>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fe4f 	bl	8002664 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 80019c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ca:	3301      	adds	r3, #1
 80019cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80019d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d9da      	bls.n	800198e <menuActualizar+0x162>
		}


		//Puntuaciones
		for(uint8_t j=0; j<5;j++){
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80019de:	e02a      	b.n	8001a36 <menuActualizar+0x20a>

			posicion = j*10 + 13;
 80019e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019e4:	461a      	mov	r2, r3
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	330d      	adds	r3, #13
 80019f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

			SSD1306_GotoXY(90, posicion);
 80019f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4619      	mov	r1, r3
 80019fc:	205a      	movs	r0, #90	; 0x5a
 80019fe:	f000 fd9b 	bl	8002538 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 8001a02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff faec 	bl	8000fe4 <getPuntajes>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	88db      	ldrh	r3, [r3, #6]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	220a      	movs	r2, #10
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f008 fe2f 	bl	800a67c <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 8001a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a22:	2201      	movs	r2, #1
 8001a24:	493f      	ldr	r1, [pc, #252]	; (8001b24 <menuActualizar+0x2f8>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fe1c 	bl	8002664 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001a2c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a30:	3301      	adds	r3, #1
 8001a32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001a36:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d9d0      	bls.n	80019e0 <menuActualizar+0x1b4>
		}


		switch(y){
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <menuActualizar+0x224>
		case arriba:
				getMenu()->menuActual = menu_principal;
 8001a44:	f7ff febe 	bl	80017c4 <getMenu>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
			break;
 8001a4e:	e000      	b.n	8001a52 <menuActualizar+0x226>
		default:
			break;
 8001a50:	bf00      	nop
		}
		break;
 8001a52:	e392      	b.n	800217a <menuActualizar+0x94e>


//-------------------------------------------------------------- GUARDADO DEL NOMBRE-----------------------------------------------------------------------------
	case guardar_nombre:

		char buff_qwerty[] = "qwertyuiop";
 8001a54:	4a37      	ldr	r2, [pc, #220]	; (8001b34 <menuActualizar+0x308>)
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a5c:	c303      	stmia	r3!, {r0, r1}
 8001a5e:	801a      	strh	r2, [r3, #0]
 8001a60:	3302      	adds	r3, #2
 8001a62:	0c12      	lsrs	r2, r2, #16
 8001a64:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 8001a66:	4a34      	ldr	r2, [pc, #208]	; (8001b38 <menuActualizar+0x30c>)
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a6e:	c303      	stmia	r3!, {r0, r1}
 8001a70:	801a      	strh	r2, [r3, #0]
 8001a72:	3302      	adds	r3, #2
 8001a74:	0c12      	lsrs	r2, r2, #16
 8001a76:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 8001a78:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <menuActualizar+0x310>)
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a82:	e883 0003 	stmia.w	r3, {r0, r1}
		char enter = '<';
 8001a86:	233c      	movs	r3, #60	; 0x3c
 8001a88:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		char borrar = 'x';
 8001a8c:	2378      	movs	r3, #120	; 0x78
 8001a8e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

		uint8_t posicion_x;

		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8001a92:	2301      	movs	r3, #1
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	230f      	movs	r3, #15
 8001a98:	223c      	movs	r2, #60	; 0x3c
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	201e      	movs	r0, #30
 8001a9e:	f000 ff01 	bl	80028a4 <SSD1306_DrawRectangle>
		//SSD1306_GotoXY(43, 5);
		//SSD1306_Puts("capaz", &Font_7x10, 1);


			for(uint8_t i=0;i<10;i++){
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001aa8:	e032      	b.n	8001b10 <menuActualizar+0x2e4>

				posicion_x = i*(12) + 6;
 8001aaa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001aae:	461a      	mov	r2, r3
 8001ab0:	0052      	lsls	r2, r2, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	3306      	adds	r3, #6
 8001aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				SSD1306_GotoXY(posicion_x, 23);
 8001abe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	2117      	movs	r1, #23
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fd36 	bl	8002538 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 8001acc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001ad0:	3340      	adds	r3, #64	; 0x40
 8001ad2:	443b      	add	r3, r7
 8001ad4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4912      	ldr	r1, [pc, #72]	; (8001b24 <menuActualizar+0x2f8>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fd41 	bl	8002564 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 8001ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2126      	movs	r1, #38	; 0x26
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fd24 	bl	8002538 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 8001af0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001af4:	3340      	adds	r3, #64	; 0x40
 8001af6:	443b      	add	r3, r7
 8001af8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4909      	ldr	r1, [pc, #36]	; (8001b24 <menuActualizar+0x2f8>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fd2f 	bl	8002564 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 8001b06:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001b10:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	d9c8      	bls.n	8001aaa <menuActualizar+0x27e>

			}


			for(uint8_t i=0;i<7;i++){
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001b1e:	e030      	b.n	8001b82 <menuActualizar+0x356>
 8001b20:	0800b0b0 	.word	0x0800b0b0
 8001b24:	20000000 	.word	0x20000000
 8001b28:	0800a808 	.word	0x0800a808
 8001b2c:	0800a810 	.word	0x0800a810
 8001b30:	40010800 	.word	0x40010800
 8001b34:	0800a81c 	.word	0x0800a81c
 8001b38:	0800a828 	.word	0x0800a828
 8001b3c:	0800a834 	.word	0x0800a834

				posicion_x = i*(12) + 26;
 8001b40:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b44:	461a      	mov	r2, r3
 8001b46:	0052      	lsls	r2, r2, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	331a      	adds	r3, #26
 8001b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				SSD1306_GotoXY(posicion_x, 53);
 8001b54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2135      	movs	r1, #53	; 0x35
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fceb 	bl	8002538 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 8001b62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b66:	3340      	adds	r3, #64	; 0x40
 8001b68:	443b      	add	r3, r7
 8001b6a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	49c0      	ldr	r1, [pc, #768]	; (8001e74 <menuActualizar+0x648>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fcf6 	bl	8002564 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 8001b78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001b82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d9da      	bls.n	8001b40 <menuActualizar+0x314>
			}

			//BOTON BORRAR
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2310      	movs	r3, #16
 8001b90:	2210      	movs	r2, #16
 8001b92:	2132      	movs	r1, #50	; 0x32
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 fe85 	bl	80028a4 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 8001b9a:	2135      	movs	r1, #53	; 0x35
 8001b9c:	2008      	movs	r0, #8
 8001b9e:	f000 fccb 	bl	8002538 <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 8001ba2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	49b2      	ldr	r1, [pc, #712]	; (8001e74 <menuActualizar+0x648>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fcda 	bl	8002564 <SSD1306_Putc>

			//BOTON ENTER
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	2132      	movs	r1, #50	; 0x32
 8001bba:	206c      	movs	r0, #108	; 0x6c
 8001bbc:	f000 fe72 	bl	80028a4 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 8001bc0:	2135      	movs	r1, #53	; 0x35
 8001bc2:	2071      	movs	r0, #113	; 0x71
 8001bc4:	f000 fcb8 	bl	8002538 <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 8001bc8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001bcc:	2201      	movs	r2, #1
 8001bce:	49a9      	ldr	r1, [pc, #676]	; (8001e74 <menuActualizar+0x648>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fcc7 	bl	8002564 <SSD1306_Putc>

			//Esto es algo "raro" que hice. En lugar de procesar el eje x y el eje y del joystick a la vez, voy a definir una variable mov
			//la cual solo puede tomar el valor de x o el valor de y, es decir, tomara los valores de (arriba, abajo, der,izq, nulo)

			uint8_t mov;
			switch(y){
 8001bd6:	79bb      	ldrb	r3, [r7, #6]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d00e      	beq.n	8001bfa <menuActualizar+0x3ce>
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	dc10      	bgt.n	8001c02 <menuActualizar+0x3d6>
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <menuActualizar+0x3be>
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d004      	beq.n	8001bf2 <menuActualizar+0x3c6>
 8001be8:	e00b      	b.n	8001c02 <menuActualizar+0x3d6>

				case arriba:
					mov = arriba;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					break;
 8001bf0:	e007      	b.n	8001c02 <menuActualizar+0x3d6>
				case abajo:
					mov = abajo;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					break;
 8001bf8:	e003      	b.n	8001c02 <menuActualizar+0x3d6>
				case nulo:
					mov = x;
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					break;
 8001c00:	bf00      	nop

			int8_t div;


			TickType_t Timenow;
			Timenow = xTaskGetTickCount();
 8001c02:	f007 f83f 	bl	8008c84 <xTaskGetTickCount>
 8001c06:	6378      	str	r0, [r7, #52]	; 0x34

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001c08:	f7ff fddc 	bl	80017c4 <getMenu>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b96      	cmp	r3, #150	; 0x96
 8001c16:	f240 80b0 	bls.w	8001d7a <menuActualizar+0x54e>
 8001c1a:	79bb      	ldrb	r3, [r7, #6]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	f000 80ac 	beq.w	8001d7a <menuActualizar+0x54e>

				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 8001c22:	f7ff fdcf 	bl	80017c4 <getMenu>
 8001c26:	4604      	mov	r4, r0
 8001c28:	f007 f82c 	bl	8008c84 <xTaskGetTickCount>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	6163      	str	r3, [r4, #20]

			switch(mov){
 8001c30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <menuActualizar+0x412>
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d04e      	beq.n	8001cda <menuActualizar+0x4ae>
							break;
						}

					break;
				default:
					break;
 8001c3c:	e09d      	b.n	8001d7a <menuActualizar+0x54e>
					switch(getMenu()->GuardarNombre.posicion_y){
 8001c3e:	f7ff fdc1 	bl	80017c4 <getMenu>
 8001c42:	4603      	mov	r3, r0
 8001c44:	795b      	ldrb	r3, [r3, #5]
 8001c46:	2b2a      	cmp	r3, #42	; 0x2a
 8001c48:	d002      	beq.n	8001c50 <menuActualizar+0x424>
 8001c4a:	2b39      	cmp	r3, #57	; 0x39
 8001c4c:	d006      	beq.n	8001c5c <menuActualizar+0x430>
					break;
 8001c4e:	e094      	b.n	8001d7a <menuActualizar+0x54e>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001c50:	f7ff fdb8 	bl	80017c4 <getMenu>
 8001c54:	4603      	mov	r3, r0
 8001c56:	221b      	movs	r2, #27
 8001c58:	715a      	strb	r2, [r3, #5]
							break;
 8001c5a:	e03d      	b.n	8001cd8 <menuActualizar+0x4ac>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001c5c:	f7ff fdb2 	bl	80017c4 <getMenu>
 8001c60:	4603      	mov	r3, r0
 8001c62:	222a      	movs	r2, #42	; 0x2a
 8001c64:	715a      	strb	r2, [r3, #5]
							if(getMenu()->GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 8001c66:	f7ff fdad 	bl	80017c4 <getMenu>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	791b      	ldrb	r3, [r3, #4]
 8001c6e:	2b1b      	cmp	r3, #27
 8001c70:	d92c      	bls.n	8001ccc <menuActualizar+0x4a0>
								div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 8001c72:	f7ff fda7 	bl	80017c4 <getMenu>
 8001c76:	4603      	mov	r3, r0
 8001c78:	791b      	ldrb	r3, [r3, #4]
 8001c7a:	3b1c      	subs	r3, #28
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	da05      	bge.n	8001c96 <menuActualizar+0x46a>
 8001c8a:	f7ff fd9b 	bl	80017c4 <getMenu>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2209      	movs	r2, #9
 8001c92:	711a      	strb	r2, [r3, #4]
							break;
 8001c94:	e01f      	b.n	8001cd6 <menuActualizar+0x4aa>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 8001c96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001c9a:	4a77      	ldr	r2, [pc, #476]	; (8001e78 <menuActualizar+0x64c>)
 8001c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca0:	1052      	asrs	r2, r2, #1
 8001ca2:	17db      	asrs	r3, r3, #31
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
									 getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 8001caa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	0052      	lsls	r2, r2, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	b2dc      	uxtb	r4, r3
 8001cbc:	f7ff fd82 	bl	80017c4 <getMenu>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f104 0209 	add.w	r2, r4, #9
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	711a      	strb	r2, [r3, #4]
							break;
 8001cca:	e004      	b.n	8001cd6 <menuActualizar+0x4aa>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001ccc:	f7ff fd7a 	bl	80017c4 <getMenu>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2209      	movs	r2, #9
 8001cd4:	711a      	strb	r2, [r3, #4]
							break;
 8001cd6:	bf00      	nop
					break;
 8001cd8:	e04f      	b.n	8001d7a <menuActualizar+0x54e>
					switch(getMenu()->GuardarNombre.posicion_y){
 8001cda:	f7ff fd73 	bl	80017c4 <getMenu>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	795b      	ldrb	r3, [r3, #5]
 8001ce2:	2b1b      	cmp	r3, #27
 8001ce4:	d002      	beq.n	8001cec <menuActualizar+0x4c0>
 8001ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ce8:	d006      	beq.n	8001cf8 <menuActualizar+0x4cc>
							break;
 8001cea:	e045      	b.n	8001d78 <menuActualizar+0x54c>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001cec:	f7ff fd6a 	bl	80017c4 <getMenu>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	222a      	movs	r2, #42	; 0x2a
 8001cf4:	715a      	strb	r2, [r3, #5]
							break;
 8001cf6:	e03f      	b.n	8001d78 <menuActualizar+0x54c>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 8001cf8:	f7ff fd64 	bl	80017c4 <getMenu>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2239      	movs	r2, #57	; 0x39
 8001d00:	715a      	strb	r2, [r3, #5]
							div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 8001d02:	f7ff fd5f 	bl	80017c4 <getMenu>
 8001d06:	4603      	mov	r3, r0
 8001d08:	791b      	ldrb	r3, [r3, #4]
 8001d0a:	3b09      	subs	r3, #9
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							div = div/GUARDADO_OFFSET_X_CURSOR;
 8001d12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d16:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <menuActualizar+0x64c>)
 8001d18:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1c:	1052      	asrs	r2, r2, #1
 8001d1e:	17db      	asrs	r3, r3, #31
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							if(div == 0){
 8001d26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <menuActualizar+0x50e>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001d2e:	f7ff fd49 	bl	80017c4 <getMenu>
 8001d32:	4603      	mov	r3, r0
 8001d34:	220b      	movs	r2, #11
 8001d36:	711a      	strb	r2, [r3, #4]
							break;
 8001d38:	e01d      	b.n	8001d76 <menuActualizar+0x54a>
							else if(div == 8 || div == 9){
 8001d3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d003      	beq.n	8001d4a <menuActualizar+0x51e>
 8001d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d46:	2b09      	cmp	r3, #9
 8001d48:	d105      	bne.n	8001d56 <menuActualizar+0x52a>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001d4a:	f7ff fd3b 	bl	80017c4 <getMenu>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2274      	movs	r2, #116	; 0x74
 8001d52:	711a      	strb	r2, [r3, #4]
							break;
 8001d54:	e00f      	b.n	8001d76 <menuActualizar+0x54a>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 8001d56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	0052      	lsls	r2, r2, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	b2dc      	uxtb	r4, r3
 8001d68:	f7ff fd2c 	bl	80017c4 <getMenu>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f104 021c 	add.w	r2, r4, #28
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	711a      	strb	r2, [r3, #4]
							break;
 8001d76:	bf00      	nop
					break;
 8001d78:	bf00      	nop
				}

			}

			Timenow = xTaskGetTickCount();
 8001d7a:	f006 ff83 	bl	8008c84 <xTaskGetTickCount>
 8001d7e:	6378      	str	r0, [r7, #52]	; 0x34

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 8001d80:	f7ff fd20 	bl	80017c4 <getMenu>
 8001d84:	4603      	mov	r3, r0
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b64      	cmp	r3, #100	; 0x64
 8001d8e:	f240 809e 	bls.w	8001ece <menuActualizar+0x6a2>
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	f000 809a 	beq.w	8001ece <menuActualizar+0x6a2>

			getMenu()->GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 8001d9a:	f7ff fd13 	bl	80017c4 <getMenu>
 8001d9e:	4604      	mov	r4, r0
 8001da0:	f006 ff70 	bl	8008c84 <xTaskGetTickCount>
 8001da4:	4603      	mov	r3, r0
 8001da6:	6123      	str	r3, [r4, #16]

			switch(mov){
 8001da8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d043      	beq.n	8001e38 <menuActualizar+0x60c>
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	f040 8087 	bne.w	8001ec4 <menuActualizar+0x698>
				case izquierda:

					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 8001db6:	f7ff fd05 	bl	80017c4 <getMenu>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	791c      	ldrb	r4, [r3, #4]
 8001dbe:	f7ff fd01 	bl	80017c4 <getMenu>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f1a4 020c 	sub.w	r2, r4, #12
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	711a      	strb	r2, [r3, #4]

					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8001dcc:	f7ff fcfa 	bl	80017c4 <getMenu>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	795b      	ldrb	r3, [r3, #5]
 8001dd4:	2b39      	cmp	r3, #57	; 0x39
 8001dd6:	d00b      	beq.n	8001df0 <menuActualizar+0x5c4>

						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 8001dd8:	f7ff fcf4 	bl	80017c4 <getMenu>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	2bfd      	cmp	r3, #253	; 0xfd
 8001de2:	d171      	bne.n	8001ec8 <menuActualizar+0x69c>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 8001de4:	f7ff fcee 	bl	80017c4 <getMenu>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2275      	movs	r2, #117	; 0x75
 8001dec:	711a      	strb	r2, [r3, #4]

							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
						}
					}

					break;
 8001dee:	e06b      	b.n	8001ec8 <menuActualizar+0x69c>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR) ){
 8001df0:	f7ff fce8 	bl	80017c4 <getMenu>
 8001df4:	4603      	mov	r3, r0
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d105      	bne.n	8001e08 <menuActualizar+0x5dc>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001dfc:	f7ff fce2 	bl	80017c4 <getMenu>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220b      	movs	r2, #11
 8001e04:	711a      	strb	r2, [r3, #4]
					break;
 8001e06:	e05f      	b.n	8001ec8 <menuActualizar+0x69c>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 8001e08:	f7ff fcdc 	bl	80017c4 <getMenu>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	791b      	ldrb	r3, [r3, #4]
 8001e10:	2b68      	cmp	r3, #104	; 0x68
 8001e12:	d105      	bne.n	8001e20 <menuActualizar+0x5f4>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 8001e14:	f7ff fcd6 	bl	80017c4 <getMenu>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2264      	movs	r2, #100	; 0x64
 8001e1c:	711a      	strb	r2, [r3, #4]
					break;
 8001e1e:	e053      	b.n	8001ec8 <menuActualizar+0x69c>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 8001e20:	f7ff fcd0 	bl	80017c4 <getMenu>
 8001e24:	4603      	mov	r3, r0
 8001e26:	791b      	ldrb	r3, [r3, #4]
 8001e28:	2bff      	cmp	r3, #255	; 0xff
 8001e2a:	d14d      	bne.n	8001ec8 <menuActualizar+0x69c>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001e2c:	f7ff fcca 	bl	80017c4 <getMenu>
 8001e30:	4603      	mov	r3, r0
 8001e32:	220b      	movs	r2, #11
 8001e34:	711a      	strb	r2, [r3, #4]
					break;
 8001e36:	e047      	b.n	8001ec8 <menuActualizar+0x69c>
				case derecha:

					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 8001e38:	f7ff fcc4 	bl	80017c4 <getMenu>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	791c      	ldrb	r4, [r3, #4]
 8001e40:	f7ff fcc0 	bl	80017c4 <getMenu>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f104 020c 	add.w	r2, r4, #12
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	711a      	strb	r2, [r3, #4]

					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8001e4e:	f7ff fcb9 	bl	80017c4 <getMenu>
 8001e52:	4603      	mov	r3, r0
 8001e54:	795b      	ldrb	r3, [r3, #5]
 8001e56:	2b39      	cmp	r3, #57	; 0x39
 8001e58:	d010      	beq.n	8001e7c <menuActualizar+0x650>

						if(getMenu()->GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 8001e5a:	f7ff fcb3 	bl	80017c4 <getMenu>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	2b75      	cmp	r3, #117	; 0x75
 8001e64:	d932      	bls.n	8001ecc <menuActualizar+0x6a0>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001e66:	f7ff fcad 	bl	80017c4 <getMenu>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2209      	movs	r2, #9
 8001e6e:	711a      	strb	r2, [r3, #4]
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
						}
					}

					break;
 8001e70:	e02c      	b.n	8001ecc <menuActualizar+0x6a0>
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000
 8001e78:	2aaaaaab 	.word	0x2aaaaaab
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 8001e7c:	f7ff fca2 	bl	80017c4 <getMenu>
 8001e80:	4603      	mov	r3, r0
 8001e82:	791b      	ldrb	r3, [r3, #4]
 8001e84:	2b70      	cmp	r3, #112	; 0x70
 8001e86:	d105      	bne.n	8001e94 <menuActualizar+0x668>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001e88:	f7ff fc9c 	bl	80017c4 <getMenu>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2274      	movs	r2, #116	; 0x74
 8001e90:	711a      	strb	r2, [r3, #4]
					break;
 8001e92:	e01b      	b.n	8001ecc <menuActualizar+0x6a0>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 8001e94:	f7ff fc96 	bl	80017c4 <getMenu>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	791b      	ldrb	r3, [r3, #4]
 8001e9c:	2b80      	cmp	r3, #128	; 0x80
 8001e9e:	d105      	bne.n	8001eac <menuActualizar+0x680>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001ea0:	f7ff fc90 	bl	80017c4 <getMenu>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	220b      	movs	r2, #11
 8001ea8:	711a      	strb	r2, [r3, #4]
					break;
 8001eaa:	e00f      	b.n	8001ecc <menuActualizar+0x6a0>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 8001eac:	f7ff fc8a 	bl	80017c4 <getMenu>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	791b      	ldrb	r3, [r3, #4]
 8001eb4:	2b17      	cmp	r3, #23
 8001eb6:	d109      	bne.n	8001ecc <menuActualizar+0x6a0>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 8001eb8:	f7ff fc84 	bl	80017c4 <getMenu>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	221c      	movs	r2, #28
 8001ec0:	711a      	strb	r2, [r3, #4]
					break;
 8001ec2:	e003      	b.n	8001ecc <menuActualizar+0x6a0>
				default:
					break;
 8001ec4:	bf00      	nop
 8001ec6:	e002      	b.n	8001ece <menuActualizar+0x6a2>
					break;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <menuActualizar+0x6a2>
					break;
 8001ecc:	bf00      	nop
				}

		}


			Timenow = xTaskGetTickCount();
 8001ece:	f006 fed9 	bl	8008c84 <xTaskGetTickCount>
 8001ed2:	6378      	str	r0, [r7, #52]	; 0x34

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 8001ed4:	f7ff fc76 	bl	80017c4 <getMenu>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	; 0x64
 8001ee2:	f240 8117 	bls.w	8002114 <menuActualizar+0x8e8>
 8001ee6:	797b      	ldrb	r3, [r7, #5]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8113 	beq.w	8002114 <menuActualizar+0x8e8>

			getMenu()->GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 8001eee:	f7ff fc69 	bl	80017c4 <getMenu>
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	f006 fec6 	bl	8008c84 <xTaskGetTickCount>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	61a3      	str	r3, [r4, #24]

			//uint8_t indice_debug;
			//uint8_t buffer_debug[6];


			if((boton == true) && (getMenu()->GuardarNombre.indice <= 5)){
 8001efc:	797b      	ldrb	r3, [r7, #5]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	f040 8108 	bne.w	8002114 <menuActualizar+0x8e8>
 8001f04:	f7ff fc5e 	bl	80017c4 <getMenu>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	f300 8100 	bgt.w	8002114 <menuActualizar+0x8e8>

						if((getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 8001f14:	f7ff fc56 	bl	80017c4 <getMenu>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	795b      	ldrb	r3, [r3, #5]
 8001f1c:	2b39      	cmp	r3, #57	; 0x39
 8001f1e:	d05e      	beq.n	8001fde <menuActualizar+0x7b2>

							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 8001f20:	f7ff fc50 	bl	80017c4 <getMenu>
 8001f24:	4603      	mov	r3, r0
 8001f26:	791b      	ldrb	r3, [r3, #4]
 8001f28:	3b09      	subs	r3, #9
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 8001f30:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001f34:	4a93      	ldr	r2, [pc, #588]	; (8002184 <menuActualizar+0x958>)
 8001f36:	fb82 1203 	smull	r1, r2, r2, r3
 8001f3a:	1052      	asrs	r2, r2, #1
 8001f3c:	17db      	asrs	r3, r3, #31
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

							if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 8001f44:	f7ff fc3e 	bl	80017c4 <getMenu>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	795b      	ldrb	r3, [r3, #5]
 8001f4c:	2b1b      	cmp	r3, #27
 8001f4e:	d11f      	bne.n	8001f90 <menuActualizar+0x764>
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_qwerty[div];
 8001f50:	f997 4033 	ldrsb.w	r4, [r7, #51]	; 0x33
 8001f54:	f7ff fc36 	bl	80017c4 <getMenu>
 8001f58:	4605      	mov	r5, r0
 8001f5a:	f7ff fc33 	bl	80017c4 <getMenu>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001f6a:	443b      	add	r3, r7
 8001f6c:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001f70:	186b      	adds	r3, r5, r1
 8001f72:	719a      	strb	r2, [r3, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 8001f74:	f7ff fc26 	bl	80017c4 <getMenu>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2dc      	uxtb	r4, r3
 8001f84:	f7ff fc1e 	bl	80017c4 <getMenu>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	b262      	sxtb	r2, r4
 8001f8c:	731a      	strb	r2, [r3, #12]
 8001f8e:	e0b0      	b.n	80020f2 <menuActualizar+0x8c6>

							}
							else if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 8001f90:	f7ff fc18 	bl	80017c4 <getMenu>
 8001f94:	4603      	mov	r3, r0
 8001f96:	795b      	ldrb	r3, [r3, #5]
 8001f98:	2b2a      	cmp	r3, #42	; 0x2a
 8001f9a:	f040 80aa 	bne.w	80020f2 <menuActualizar+0x8c6>
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_asdf[div];
 8001f9e:	f997 4033 	ldrsb.w	r4, [r7, #51]	; 0x33
 8001fa2:	f7ff fc0f 	bl	80017c4 <getMenu>
 8001fa6:	4605      	mov	r5, r0
 8001fa8:	f7ff fc0c 	bl	80017c4 <getMenu>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8001fb8:	443b      	add	r3, r7
 8001fba:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8001fbe:	186b      	adds	r3, r5, r1
 8001fc0:	719a      	strb	r2, [r3, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 8001fc2:	f7ff fbff 	bl	80017c4 <getMenu>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2dc      	uxtb	r4, r3
 8001fd2:	f7ff fbf7 	bl	80017c4 <getMenu>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b262      	sxtb	r2, r4
 8001fda:	731a      	strb	r2, [r3, #12]
 8001fdc:	e089      	b.n	80020f2 <menuActualizar+0x8c6>
						}


						else{

							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 8001fde:	f7ff fbf1 	bl	80017c4 <getMenu>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	791b      	ldrb	r3, [r3, #4]
 8001fe6:	3b1c      	subs	r3, #28
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 8001fee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da24      	bge.n	8002040 <menuActualizar+0x814>


								//indice_debug = getMenu()->GuardarNombre.indice;
								//strcpy(buffer_debug,getMenu()->GuardarNombre.nombre );

								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice - 1;
 8001ff6:	f7ff fbe5 	bl	80017c4 <getMenu>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b2dc      	uxtb	r4, r3
 8002006:	f7ff fbdd 	bl	80017c4 <getMenu>
 800200a:	4603      	mov	r3, r0
 800200c:	b262      	sxtb	r2, r4
 800200e:	731a      	strb	r2, [r3, #12]
								if(getMenu()->GuardarNombre.indice < 0){
 8002010:	f7ff fbd8 	bl	80017c4 <getMenu>
 8002014:	4603      	mov	r3, r0
 8002016:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da04      	bge.n	8002028 <menuActualizar+0x7fc>
										getMenu()->GuardarNombre.indice = 0;
 800201e:	f7ff fbd1 	bl	80017c4 <getMenu>
 8002022:	4603      	mov	r3, r0
 8002024:	2200      	movs	r2, #0
 8002026:	731a      	strb	r2, [r3, #12]
									}

								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = '\0';
 8002028:	f7ff fbcc 	bl	80017c4 <getMenu>
 800202c:	4604      	mov	r4, r0
 800202e:	f7ff fbc9 	bl	80017c4 <getMenu>
 8002032:	4603      	mov	r3, r0
 8002034:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002038:	4423      	add	r3, r4
 800203a:	2200      	movs	r2, #0
 800203c:	719a      	strb	r2, [r3, #6]
 800203e:	e058      	b.n	80020f2 <menuActualizar+0x8c6>
								//indice_debug = getMenu()->GuardarNombre.indice;
								//strcpy(buffer_debug,getMenu()->GuardarNombre.nombre );

							}
							else{
								div = div / GUARDADO_OFFSET_X_CURSOR;
 8002040:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002044:	4a4f      	ldr	r2, [pc, #316]	; (8002184 <menuActualizar+0x958>)
 8002046:	fb82 1203 	smull	r1, r2, r2, r3
 800204a:	1052      	asrs	r2, r2, #1
 800204c:	17db      	asrs	r3, r3, #31
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

								//indice_debug = getMenu()->GuardarNombre.indice;

									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 8002054:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002058:	2b07      	cmp	r3, #7
 800205a:	d12b      	bne.n	80020b4 <menuActualizar+0x888>

										if((getMenu()->GuardarNombre.indice != 0 )){
 800205c:	f7ff fbb2 	bl	80017c4 <getMenu>
 8002060:	4603      	mov	r3, r0
 8002062:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d043      	beq.n	80020f2 <menuActualizar+0x8c6>


											//Guardo el nuevo nombre en la posicion 5 de getPuntajes()->nombre.
											strcpy(getPuntajes(4)->nombre,getMenu()->GuardarNombre.nombre);
 800206a:	2004      	movs	r0, #4
 800206c:	f7fe ffba 	bl	8000fe4 <getPuntajes>
 8002070:	4603      	mov	r3, r0
 8002072:	461c      	mov	r4, r3
 8002074:	f7ff fba6 	bl	80017c4 <getMenu>
 8002078:	4603      	mov	r3, r0
 800207a:	3306      	adds	r3, #6
 800207c:	4619      	mov	r1, r3
 800207e:	4620      	mov	r0, r4
 8002080:	f008 fb6c 	bl	800a75c <strcpy>


										    // Notifica a la tarea Task2 utilizando VTaskNotify
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 8002084:	4b40      	ldr	r3, [pc, #256]	; (8002188 <menuActualizar+0x95c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	4618      	mov	r0, r3
 800208c:	f004 fcce 	bl	8006a2c <osEventFlagsSet>

										    uint32_t flags = osEventFlagsWait(notificationFlag2, NOTIFICATION_VALUE2, osFlagsWaitAny, osWaitForever);
 8002090:	4b3e      	ldr	r3, [pc, #248]	; (800218c <menuActualizar+0x960>)
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
 8002098:	2200      	movs	r2, #0
 800209a:	2102      	movs	r1, #2
 800209c:	f004 fd1e 	bl	8006adc <osEventFlagsWait>
 80020a0:	62f8      	str	r0, [r7, #44]	; 0x2c

										    if (flags == NOTIFICATION_VALUE2){
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d124      	bne.n	80020f2 <menuActualizar+0x8c6>
										    	getMenu()->menuActual = puntajes;
 80020a8:	f7ff fb8c 	bl	80017c4 <getMenu>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2202      	movs	r2, #2
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e01e      	b.n	80020f2 <menuActualizar+0x8c6>

										}
									}
									else{

										getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_zxc[div];
 80020b4:	f997 4033 	ldrsb.w	r4, [r7, #51]	; 0x33
 80020b8:	f7ff fb84 	bl	80017c4 <getMenu>
 80020bc:	4605      	mov	r5, r0
 80020be:	f7ff fb81 	bl	80017c4 <getMenu>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80020ce:	443b      	add	r3, r7
 80020d0:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80020d4:	186b      	adds	r3, r5, r1
 80020d6:	719a      	strb	r2, [r3, #6]
										getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 80020d8:	f7ff fb74 	bl	80017c4 <getMenu>
 80020dc:	4603      	mov	r3, r0
 80020de:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	b2dc      	uxtb	r4, r3
 80020e8:	f7ff fb6c 	bl	80017c4 <getMenu>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b262      	sxtb	r2, r4
 80020f0:	731a      	strb	r2, [r3, #12]
								}


							}

						if(getMenu()->GuardarNombre.indice > 5){
 80020f2:	f7ff fb67 	bl	80017c4 <getMenu>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	dd09      	ble.n	8002114 <menuActualizar+0x8e8>
							getMenu()->GuardarNombre.indice = 5;
 8002100:	f7ff fb60 	bl	80017c4 <getMenu>
 8002104:	4603      	mov	r3, r0
 8002106:	2205      	movs	r2, #5
 8002108:	731a      	strb	r2, [r3, #12]
							getMenu()->GuardarNombre.nombre[5] = '\0';
 800210a:	f7ff fb5b 	bl	80017c4 <getMenu>
 800210e:	4603      	mov	r3, r0
 8002110:	2200      	movs	r2, #0
 8002112:	72da      	strb	r2, [r3, #11]




				//Se actualiza el cursor
				SSD1306_DrawFilledCircle(getMenu()->GuardarNombre.posicion_x,  getMenu()->GuardarNombre.posicion_y, 5, 1);
 8002114:	f7ff fb56 	bl	80017c4 <getMenu>
 8002118:	4603      	mov	r3, r0
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	b21c      	sxth	r4, r3
 800211e:	f7ff fb51 	bl	80017c4 <getMenu>
 8002122:	4603      	mov	r3, r0
 8002124:	795b      	ldrb	r3, [r3, #5]
 8002126:	b219      	sxth	r1, r3
 8002128:	2301      	movs	r3, #1
 800212a:	2205      	movs	r2, #5
 800212c:	4620      	mov	r0, r4
 800212e:	f000 fcf7 	bl	8002b20 <SSD1306_DrawFilledCircle>

				//Se actualiza el nombre en el recuadro.
				SSD1306_GotoXY(43, 5);
 8002132:	2105      	movs	r1, #5
 8002134:	202b      	movs	r0, #43	; 0x2b
 8002136:	f000 f9ff 	bl	8002538 <SSD1306_GotoXY>
				SSD1306_Puts(getMenu()->GuardarNombre.nombre, &Font_7x10, 1);
 800213a:	f7ff fb43 	bl	80017c4 <getMenu>
 800213e:	4603      	mov	r3, r0
 8002140:	3306      	adds	r3, #6
 8002142:	2201      	movs	r2, #1
 8002144:	4912      	ldr	r1, [pc, #72]	; (8002190 <menuActualizar+0x964>)
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fa8c 	bl	8002664 <SSD1306_Puts>


		break;
 800214c:	e015      	b.n	800217a <menuActualizar+0x94e>
	case game_over:

		//SSD1306_GotoXY(35, 25);
		//SSD1306_Puts("GAME OVER", &Font_7x10, 1);

		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 800214e:	2301      	movs	r3, #1
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	2328      	movs	r3, #40	; 0x28
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2364      	movs	r3, #100	; 0x64
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <menuActualizar+0x968>)
 800215a:	210a      	movs	r1, #10
 800215c:	200f      	movs	r0, #15
 800215e:	f000 f81b 	bl	8002198 <SSD1306_DrawBitmap>

		if(y == arriba){
 8002162:	79bb      	ldrb	r3, [r7, #6]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <menuActualizar+0x94c>

			getMenu()->menuActual = guardar_nombre;
 8002168:	f7ff fb2c 	bl	80017c4 <getMenu>
 800216c:	4603      	mov	r3, r0
 800216e:	2203      	movs	r2, #3
 8002170:	701a      	strb	r2, [r3, #0]

		}

		break;
 8002172:	e001      	b.n	8002178 <menuActualizar+0x94c>
	default:
		break;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <menuActualizar+0x94e>
		break;
 8002178:	bf00      	nop
	}

}
 800217a:	bf00      	nop
 800217c:	3740      	adds	r7, #64	; 0x40
 800217e:	46bd      	mov	sp, r7
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
 8002182:	bf00      	nop
 8002184:	2aaaaaab 	.word	0x2aaaaaab
 8002188:	200001d4 	.word	0x200001d4
 800218c:	200001d8 	.word	0x200001d8
 8002190:	20000000 	.word	0x20000000
 8002194:	0800b1b0 	.word	0x0800b1b0

08002198 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	81fb      	strh	r3, [r7, #14]
 80021a6:	460b      	mov	r3, r1
 80021a8:	81bb      	strh	r3, [r7, #12]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80021ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b2:	3307      	adds	r3, #7
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da00      	bge.n	80021ba <SSD1306_DrawBitmap+0x22>
 80021b8:	3307      	adds	r3, #7
 80021ba:	10db      	asrs	r3, r3, #3
 80021bc:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	82bb      	strh	r3, [r7, #20]
 80021c6:	e044      	b.n	8002252 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	827b      	strh	r3, [r7, #18]
 80021cc:	e02f      	b.n	800222e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80021ce:	8a7b      	ldrh	r3, [r7, #18]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
 80021de:	e012      	b.n	8002206 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80021e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021e4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021e8:	fb03 f202 	mul.w	r2, r3, r2
 80021ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da00      	bge.n	80021f6 <SSD1306_DrawBitmap+0x5e>
 80021f4:	3307      	adds	r3, #7
 80021f6:	10db      	asrs	r3, r3, #3
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002206:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800220a:	2b00      	cmp	r3, #0
 800220c:	da09      	bge.n	8002222 <SSD1306_DrawBitmap+0x8a>
 800220e:	89fa      	ldrh	r2, [r7, #14]
 8002210:	8a7b      	ldrh	r3, [r7, #18]
 8002212:	4413      	add	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	89b9      	ldrh	r1, [r7, #12]
 8002218:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f92d 	bl	800247c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002222:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002226:	b29b      	uxth	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	827b      	strh	r3, [r7, #18]
 800222e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002236:	429a      	cmp	r2, r3
 8002238:	dbc9      	blt.n	80021ce <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800223a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800223e:	b29b      	uxth	r3, r3
 8002240:	3301      	adds	r3, #1
 8002242:	b29b      	uxth	r3, r3
 8002244:	82bb      	strh	r3, [r7, #20]
 8002246:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800224a:	b29b      	uxth	r3, r3
 800224c:	3301      	adds	r3, #1
 800224e:	b29b      	uxth	r3, r3
 8002250:	81bb      	strh	r3, [r7, #12]
 8002252:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002256:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800225a:	429a      	cmp	r2, r3
 800225c:	dbb4      	blt.n	80021c8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800226e:	f000 fd3b 	bl	8002ce8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002272:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002276:	2201      	movs	r2, #1
 8002278:	2178      	movs	r1, #120	; 0x78
 800227a:	485b      	ldr	r0, [pc, #364]	; (80023e8 <SSD1306_Init+0x180>)
 800227c:	f002 f940 	bl	8004500 <HAL_I2C_IsDeviceReady>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002286:	2300      	movs	r3, #0
 8002288:	e0a9      	b.n	80023de <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800228a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800228e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002290:	e002      	b.n	8002298 <SSD1306_Init+0x30>
		p--;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3b01      	subs	r3, #1
 8002296:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f9      	bne.n	8002292 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800229e:	22ae      	movs	r2, #174	; 0xae
 80022a0:	2100      	movs	r1, #0
 80022a2:	2078      	movs	r0, #120	; 0x78
 80022a4:	f000 fd9a 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80022a8:	2220      	movs	r2, #32
 80022aa:	2100      	movs	r1, #0
 80022ac:	2078      	movs	r0, #120	; 0x78
 80022ae:	f000 fd95 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80022b2:	2210      	movs	r2, #16
 80022b4:	2100      	movs	r1, #0
 80022b6:	2078      	movs	r0, #120	; 0x78
 80022b8:	f000 fd90 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80022bc:	22b0      	movs	r2, #176	; 0xb0
 80022be:	2100      	movs	r1, #0
 80022c0:	2078      	movs	r0, #120	; 0x78
 80022c2:	f000 fd8b 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80022c6:	22c8      	movs	r2, #200	; 0xc8
 80022c8:	2100      	movs	r1, #0
 80022ca:	2078      	movs	r0, #120	; 0x78
 80022cc:	f000 fd86 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80022d0:	2200      	movs	r2, #0
 80022d2:	2100      	movs	r1, #0
 80022d4:	2078      	movs	r0, #120	; 0x78
 80022d6:	f000 fd81 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80022da:	2210      	movs	r2, #16
 80022dc:	2100      	movs	r1, #0
 80022de:	2078      	movs	r0, #120	; 0x78
 80022e0:	f000 fd7c 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	2100      	movs	r1, #0
 80022e8:	2078      	movs	r0, #120	; 0x78
 80022ea:	f000 fd77 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80022ee:	2281      	movs	r2, #129	; 0x81
 80022f0:	2100      	movs	r1, #0
 80022f2:	2078      	movs	r0, #120	; 0x78
 80022f4:	f000 fd72 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80022f8:	22ff      	movs	r2, #255	; 0xff
 80022fa:	2100      	movs	r1, #0
 80022fc:	2078      	movs	r0, #120	; 0x78
 80022fe:	f000 fd6d 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002302:	22a1      	movs	r2, #161	; 0xa1
 8002304:	2100      	movs	r1, #0
 8002306:	2078      	movs	r0, #120	; 0x78
 8002308:	f000 fd68 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800230c:	22a6      	movs	r2, #166	; 0xa6
 800230e:	2100      	movs	r1, #0
 8002310:	2078      	movs	r0, #120	; 0x78
 8002312:	f000 fd63 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002316:	22a8      	movs	r2, #168	; 0xa8
 8002318:	2100      	movs	r1, #0
 800231a:	2078      	movs	r0, #120	; 0x78
 800231c:	f000 fd5e 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002320:	223f      	movs	r2, #63	; 0x3f
 8002322:	2100      	movs	r1, #0
 8002324:	2078      	movs	r0, #120	; 0x78
 8002326:	f000 fd59 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800232a:	22a4      	movs	r2, #164	; 0xa4
 800232c:	2100      	movs	r1, #0
 800232e:	2078      	movs	r0, #120	; 0x78
 8002330:	f000 fd54 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002334:	22d3      	movs	r2, #211	; 0xd3
 8002336:	2100      	movs	r1, #0
 8002338:	2078      	movs	r0, #120	; 0x78
 800233a:	f000 fd4f 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2078      	movs	r0, #120	; 0x78
 8002344:	f000 fd4a 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002348:	22d5      	movs	r2, #213	; 0xd5
 800234a:	2100      	movs	r1, #0
 800234c:	2078      	movs	r0, #120	; 0x78
 800234e:	f000 fd45 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002352:	22f0      	movs	r2, #240	; 0xf0
 8002354:	2100      	movs	r1, #0
 8002356:	2078      	movs	r0, #120	; 0x78
 8002358:	f000 fd40 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800235c:	22d9      	movs	r2, #217	; 0xd9
 800235e:	2100      	movs	r1, #0
 8002360:	2078      	movs	r0, #120	; 0x78
 8002362:	f000 fd3b 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002366:	2222      	movs	r2, #34	; 0x22
 8002368:	2100      	movs	r1, #0
 800236a:	2078      	movs	r0, #120	; 0x78
 800236c:	f000 fd36 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002370:	22da      	movs	r2, #218	; 0xda
 8002372:	2100      	movs	r1, #0
 8002374:	2078      	movs	r0, #120	; 0x78
 8002376:	f000 fd31 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800237a:	2212      	movs	r2, #18
 800237c:	2100      	movs	r1, #0
 800237e:	2078      	movs	r0, #120	; 0x78
 8002380:	f000 fd2c 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002384:	22db      	movs	r2, #219	; 0xdb
 8002386:	2100      	movs	r1, #0
 8002388:	2078      	movs	r0, #120	; 0x78
 800238a:	f000 fd27 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800238e:	2220      	movs	r2, #32
 8002390:	2100      	movs	r1, #0
 8002392:	2078      	movs	r0, #120	; 0x78
 8002394:	f000 fd22 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002398:	228d      	movs	r2, #141	; 0x8d
 800239a:	2100      	movs	r1, #0
 800239c:	2078      	movs	r0, #120	; 0x78
 800239e:	f000 fd1d 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80023a2:	2214      	movs	r2, #20
 80023a4:	2100      	movs	r1, #0
 80023a6:	2078      	movs	r0, #120	; 0x78
 80023a8:	f000 fd18 	bl	8002ddc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80023ac:	22af      	movs	r2, #175	; 0xaf
 80023ae:	2100      	movs	r1, #0
 80023b0:	2078      	movs	r0, #120	; 0x78
 80023b2:	f000 fd13 	bl	8002ddc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80023b6:	222e      	movs	r2, #46	; 0x2e
 80023b8:	2100      	movs	r1, #0
 80023ba:	2078      	movs	r0, #120	; 0x78
 80023bc:	f000 fd0e 	bl	8002ddc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f000 f843 	bl	800244c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80023c6:	f000 f813 	bl	80023f0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <SSD1306_Init+0x184>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <SSD1306_Init+0x184>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <SSD1306_Init+0x184>)
 80023d8:	2201      	movs	r2, #1
 80023da:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000110 	.word	0x20000110
 80023ec:	20000620 	.word	0x20000620

080023f0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80023f6:	2300      	movs	r3, #0
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	e01d      	b.n	8002438 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	3b50      	subs	r3, #80	; 0x50
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	2100      	movs	r1, #0
 8002406:	2078      	movs	r0, #120	; 0x78
 8002408:	f000 fce8 	bl	8002ddc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800240c:	2200      	movs	r2, #0
 800240e:	2100      	movs	r1, #0
 8002410:	2078      	movs	r0, #120	; 0x78
 8002412:	f000 fce3 	bl	8002ddc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002416:	2210      	movs	r2, #16
 8002418:	2100      	movs	r1, #0
 800241a:	2078      	movs	r0, #120	; 0x78
 800241c:	f000 fcde 	bl	8002ddc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	4a08      	ldr	r2, [pc, #32]	; (8002448 <SSD1306_UpdateScreen+0x58>)
 8002426:	441a      	add	r2, r3
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	2078      	movs	r0, #120	; 0x78
 800242e:	f000 fc6f 	bl	8002d10 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	3301      	adds	r3, #1
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b07      	cmp	r3, #7
 800243c:	d9de      	bls.n	80023fc <SSD1306_UpdateScreen+0xc>
	}
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000220 	.word	0x20000220

0800244c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <SSD1306_Fill+0x14>
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <SSD1306_Fill+0x16>
 8002460:	23ff      	movs	r3, #255	; 0xff
 8002462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002466:	4619      	mov	r1, r3
 8002468:	4803      	ldr	r0, [pc, #12]	; (8002478 <SSD1306_Fill+0x2c>)
 800246a:	f008 f94b 	bl	800a704 <memset>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000220 	.word	0x20000220

0800247c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
 8002486:	460b      	mov	r3, r1
 8002488:	80bb      	strh	r3, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	70fb      	strb	r3, [r7, #3]
	if (
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	2b7f      	cmp	r3, #127	; 0x7f
 8002492:	d848      	bhi.n	8002526 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	2b3f      	cmp	r3, #63	; 0x3f
 8002498:	d845      	bhi.n	8002526 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <SSD1306_DrawPixel+0xb4>)
 800249c:	791b      	ldrb	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d006      	beq.n	80024b0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d11a      	bne.n	80024ec <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	88bb      	ldrh	r3, [r7, #4]
 80024ba:	08db      	lsrs	r3, r3, #3
 80024bc:	b298      	uxth	r0, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	01db      	lsls	r3, r3, #7
 80024c2:	4413      	add	r3, r2
 80024c4:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <SSD1306_DrawPixel+0xb8>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	b25a      	sxtb	r2, r3
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	b259      	sxtb	r1, r3
 80024dc:	88fa      	ldrh	r2, [r7, #6]
 80024de:	4603      	mov	r3, r0
 80024e0:	01db      	lsls	r3, r3, #7
 80024e2:	4413      	add	r3, r2
 80024e4:	b2c9      	uxtb	r1, r1
 80024e6:	4a13      	ldr	r2, [pc, #76]	; (8002534 <SSD1306_DrawPixel+0xb8>)
 80024e8:	54d1      	strb	r1, [r2, r3]
 80024ea:	e01d      	b.n	8002528 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	88bb      	ldrh	r3, [r7, #4]
 80024f0:	08db      	lsrs	r3, r3, #3
 80024f2:	b298      	uxth	r0, r3
 80024f4:	4603      	mov	r3, r0
 80024f6:	01db      	lsls	r3, r3, #7
 80024f8:	4413      	add	r3, r2
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <SSD1306_DrawPixel+0xb8>)
 80024fc:	5cd3      	ldrb	r3, [r2, r3]
 80024fe:	b25a      	sxtb	r2, r3
 8002500:	88bb      	ldrh	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	b25b      	sxtb	r3, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	b25b      	sxtb	r3, r3
 8002512:	4013      	ands	r3, r2
 8002514:	b259      	sxtb	r1, r3
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	4603      	mov	r3, r0
 800251a:	01db      	lsls	r3, r3, #7
 800251c:	4413      	add	r3, r2
 800251e:	b2c9      	uxtb	r1, r1
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <SSD1306_DrawPixel+0xb8>)
 8002522:	54d1      	strb	r1, [r2, r3]
 8002524:	e000      	b.n	8002528 <SSD1306_DrawPixel+0xac>
		return;
 8002526:	bf00      	nop
	}
}
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000620 	.word	0x20000620
 8002534:	20000220 	.word	0x20000220

08002538 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	460a      	mov	r2, r1
 8002542:	80fb      	strh	r3, [r7, #6]
 8002544:	4613      	mov	r3, r2
 8002546:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002548:	4a05      	ldr	r2, [pc, #20]	; (8002560 <SSD1306_GotoXY+0x28>)
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <SSD1306_GotoXY+0x28>)
 8002550:	88bb      	ldrh	r3, [r7, #4]
 8002552:	8053      	strh	r3, [r2, #2]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000620 	.word	0x20000620

08002564 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	71fb      	strb	r3, [r7, #7]
 8002570:	4613      	mov	r3, r2
 8002572:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <SSD1306_Putc+0xfc>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
	if (
 8002580:	2b7f      	cmp	r3, #127	; 0x7f
 8002582:	dc07      	bgt.n	8002594 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002584:	4b36      	ldr	r3, [pc, #216]	; (8002660 <SSD1306_Putc+0xfc>)
 8002586:	885b      	ldrh	r3, [r3, #2]
 8002588:	461a      	mov	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002590:	2b3f      	cmp	r3, #63	; 0x3f
 8002592:	dd01      	ble.n	8002598 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002594:	2300      	movs	r3, #0
 8002596:	e05e      	b.n	8002656 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e04b      	b.n	8002636 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	3b20      	subs	r3, #32
 80025a6:	6839      	ldr	r1, [r7, #0]
 80025a8:	7849      	ldrb	r1, [r1, #1]
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4619      	mov	r1, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	440b      	add	r3, r1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	e030      	b.n	8002624 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d010      	beq.n	80025f4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <SSD1306_Putc+0xfc>)
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4413      	add	r3, r2
 80025dc:	b298      	uxth	r0, r3
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <SSD1306_Putc+0xfc>)
 80025e0:	885a      	ldrh	r2, [r3, #2]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	79ba      	ldrb	r2, [r7, #6]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7ff ff45 	bl	800247c <SSD1306_DrawPixel>
 80025f2:	e014      	b.n	800261e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <SSD1306_Putc+0xfc>)
 80025f6:	881a      	ldrh	r2, [r3, #0]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	b298      	uxth	r0, r3
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <SSD1306_Putc+0xfc>)
 8002602:	885a      	ldrh	r2, [r3, #2]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	b29b      	uxth	r3, r3
 8002608:	4413      	add	r3, r2
 800260a:	b299      	uxth	r1, r3
 800260c:	79bb      	ldrb	r3, [r7, #6]
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	f7ff ff2f 	bl	800247c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	3301      	adds	r3, #1
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4293      	cmp	r3, r2
 800262e:	d3c8      	bcc.n	80025c2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3301      	adds	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	461a      	mov	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4293      	cmp	r3, r2
 8002640:	d3ad      	bcc.n	800259e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002642:	4b07      	ldr	r3, [pc, #28]	; (8002660 <SSD1306_Putc+0xfc>)
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	4413      	add	r3, r2
 800264e:	b29a      	uxth	r2, r3
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <SSD1306_Putc+0xfc>)
 8002652:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002654:	79fb      	ldrb	r3, [r7, #7]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000620 	.word	0x20000620

08002664 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002672:	e012      	b.n	800269a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	79fa      	ldrb	r2, [r7, #7]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff71 	bl	8002564 <SSD1306_Putc>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d002      	beq.n	8002694 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	e008      	b.n	80026a6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	3301      	adds	r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e8      	bne.n	8002674 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	781b      	ldrb	r3, [r3, #0]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80026ae:	b590      	push	{r4, r7, lr}
 80026b0:	b087      	sub	sp, #28
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4604      	mov	r4, r0
 80026b6:	4608      	mov	r0, r1
 80026b8:	4611      	mov	r1, r2
 80026ba:	461a      	mov	r2, r3
 80026bc:	4623      	mov	r3, r4
 80026be:	80fb      	strh	r3, [r7, #6]
 80026c0:	4603      	mov	r3, r0
 80026c2:	80bb      	strh	r3, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
 80026c8:	4613      	mov	r3, r2
 80026ca:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	2b7f      	cmp	r3, #127	; 0x7f
 80026d0:	d901      	bls.n	80026d6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80026d2:	237f      	movs	r3, #127	; 0x7f
 80026d4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	2b7f      	cmp	r3, #127	; 0x7f
 80026da:	d901      	bls.n	80026e0 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80026dc:	237f      	movs	r3, #127	; 0x7f
 80026de:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80026e0:	88bb      	ldrh	r3, [r7, #4]
 80026e2:	2b3f      	cmp	r3, #63	; 0x3f
 80026e4:	d901      	bls.n	80026ea <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80026e6:	233f      	movs	r3, #63	; 0x3f
 80026e8:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80026ea:	883b      	ldrh	r3, [r7, #0]
 80026ec:	2b3f      	cmp	r3, #63	; 0x3f
 80026ee:	d901      	bls.n	80026f4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80026f0:	233f      	movs	r3, #63	; 0x3f
 80026f2:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d205      	bcs.n	8002708 <SSD1306_DrawLine+0x5a>
 80026fc:	887a      	ldrh	r2, [r7, #2]
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	b29b      	uxth	r3, r3
 8002704:	b21b      	sxth	r3, r3
 8002706:	e004      	b.n	8002712 <SSD1306_DrawLine+0x64>
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	b21b      	sxth	r3, r3
 8002712:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002714:	88ba      	ldrh	r2, [r7, #4]
 8002716:	883b      	ldrh	r3, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d205      	bcs.n	8002728 <SSD1306_DrawLine+0x7a>
 800271c:	883a      	ldrh	r2, [r7, #0]
 800271e:	88bb      	ldrh	r3, [r7, #4]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	b29b      	uxth	r3, r3
 8002724:	b21b      	sxth	r3, r3
 8002726:	e004      	b.n	8002732 <SSD1306_DrawLine+0x84>
 8002728:	88ba      	ldrh	r2, [r7, #4]
 800272a:	883b      	ldrh	r3, [r7, #0]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	b21b      	sxth	r3, r3
 8002732:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002734:	88fa      	ldrh	r2, [r7, #6]
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	429a      	cmp	r2, r3
 800273a:	d201      	bcs.n	8002740 <SSD1306_DrawLine+0x92>
 800273c:	2301      	movs	r3, #1
 800273e:	e001      	b.n	8002744 <SSD1306_DrawLine+0x96>
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002746:	88ba      	ldrh	r2, [r7, #4]
 8002748:	883b      	ldrh	r3, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d201      	bcs.n	8002752 <SSD1306_DrawLine+0xa4>
 800274e:	2301      	movs	r3, #1
 8002750:	e001      	b.n	8002756 <SSD1306_DrawLine+0xa8>
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002758:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800275c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	dd06      	ble.n	8002772 <SSD1306_DrawLine+0xc4>
 8002764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002768:	0fda      	lsrs	r2, r3, #31
 800276a:	4413      	add	r3, r2
 800276c:	105b      	asrs	r3, r3, #1
 800276e:	b21b      	sxth	r3, r3
 8002770:	e006      	b.n	8002780 <SSD1306_DrawLine+0xd2>
 8002772:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002776:	0fda      	lsrs	r2, r3, #31
 8002778:	4413      	add	r3, r2
 800277a:	105b      	asrs	r3, r3, #1
 800277c:	425b      	negs	r3, r3
 800277e:	b21b      	sxth	r3, r3
 8002780:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8002782:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d129      	bne.n	80027de <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800278a:	883a      	ldrh	r2, [r7, #0]
 800278c:	88bb      	ldrh	r3, [r7, #4]
 800278e:	429a      	cmp	r2, r3
 8002790:	d205      	bcs.n	800279e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8002792:	883b      	ldrh	r3, [r7, #0]
 8002794:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002796:	88bb      	ldrh	r3, [r7, #4]
 8002798:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800279a:	893b      	ldrh	r3, [r7, #8]
 800279c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d205      	bcs.n	80027b2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80027ae:	893b      	ldrh	r3, [r7, #8]
 80027b0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80027b2:	88bb      	ldrh	r3, [r7, #4]
 80027b4:	82bb      	strh	r3, [r7, #20]
 80027b6:	e00c      	b.n	80027d2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80027b8:	8ab9      	ldrh	r1, [r7, #20]
 80027ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe5b 	bl	800247c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80027c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	82bb      	strh	r3, [r7, #20]
 80027d2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027d6:	883b      	ldrh	r3, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	dded      	ble.n	80027b8 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80027dc:	e05f      	b.n	800289e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80027de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d129      	bne.n	800283a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80027e6:	883a      	ldrh	r2, [r7, #0]
 80027e8:	88bb      	ldrh	r3, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d205      	bcs.n	80027fa <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80027ee:	883b      	ldrh	r3, [r7, #0]
 80027f0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80027f2:	88bb      	ldrh	r3, [r7, #4]
 80027f4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80027f6:	893b      	ldrh	r3, [r7, #8]
 80027f8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d205      	bcs.n	800280e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800280a:	893b      	ldrh	r3, [r7, #8]
 800280c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	82bb      	strh	r3, [r7, #20]
 8002812:	e00c      	b.n	800282e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002814:	8abb      	ldrh	r3, [r7, #20]
 8002816:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800281a:	88b9      	ldrh	r1, [r7, #4]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fe2d 	bl	800247c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002822:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002826:	b29b      	uxth	r3, r3
 8002828:	3301      	adds	r3, #1
 800282a:	b29b      	uxth	r3, r3
 800282c:	82bb      	strh	r3, [r7, #20]
 800282e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	429a      	cmp	r2, r3
 8002836:	dded      	ble.n	8002814 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8002838:	e031      	b.n	800289e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800283a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800283e:	88b9      	ldrh	r1, [r7, #4]
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fe1a 	bl	800247c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002848:	88fa      	ldrh	r2, [r7, #6]
 800284a:	887b      	ldrh	r3, [r7, #2]
 800284c:	429a      	cmp	r2, r3
 800284e:	d103      	bne.n	8002858 <SSD1306_DrawLine+0x1aa>
 8002850:	88ba      	ldrh	r2, [r7, #4]
 8002852:	883b      	ldrh	r3, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d021      	beq.n	800289c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8002858:	8afb      	ldrh	r3, [r7, #22]
 800285a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800285c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002864:	425b      	negs	r3, r3
 8002866:	429a      	cmp	r2, r3
 8002868:	dd08      	ble.n	800287c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800286a:	8afa      	ldrh	r2, [r7, #22]
 800286c:	8a3b      	ldrh	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	b29b      	uxth	r3, r3
 8002872:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002874:	89fa      	ldrh	r2, [r7, #14]
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	4413      	add	r3, r2
 800287a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800287c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002880:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	dad8      	bge.n	800283a <SSD1306_DrawLine+0x18c>
			err += dx;
 8002888:	8afa      	ldrh	r2, [r7, #22]
 800288a:	8a7b      	ldrh	r3, [r7, #18]
 800288c:	4413      	add	r3, r2
 800288e:	b29b      	uxth	r3, r3
 8002890:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002892:	89ba      	ldrh	r2, [r7, #12]
 8002894:	88bb      	ldrh	r3, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800289a:	e7ce      	b.n	800283a <SSD1306_DrawLine+0x18c>
			break;
 800289c:	bf00      	nop
		} 
	}
}
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}

080028a4 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	80fb      	strh	r3, [r7, #6]
 80028b6:	4603      	mov	r3, r0
 80028b8:	80bb      	strh	r3, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	807b      	strh	r3, [r7, #2]
 80028be:	4613      	mov	r3, r2
 80028c0:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2b7f      	cmp	r3, #127	; 0x7f
 80028c6:	d853      	bhi.n	8002970 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80028c8:	88bb      	ldrh	r3, [r7, #4]
 80028ca:	2b3f      	cmp	r3, #63	; 0x3f
 80028cc:	d850      	bhi.n	8002970 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	4413      	add	r3, r2
 80028d4:	2b7f      	cmp	r3, #127	; 0x7f
 80028d6:	dd03      	ble.n	80028e0 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80028de:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80028e0:	88ba      	ldrh	r2, [r7, #4]
 80028e2:	883b      	ldrh	r3, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	2b3f      	cmp	r3, #63	; 0x3f
 80028e8:	dd03      	ble.n	80028f2 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80028ea:	88bb      	ldrh	r3, [r7, #4]
 80028ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80028f0:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	4413      	add	r3, r2
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	88bc      	ldrh	r4, [r7, #4]
 80028fc:	88b9      	ldrh	r1, [r7, #4]
 80028fe:	88f8      	ldrh	r0, [r7, #6]
 8002900:	7e3b      	ldrb	r3, [r7, #24]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	4623      	mov	r3, r4
 8002906:	f7ff fed2 	bl	80026ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 800290a:	88ba      	ldrh	r2, [r7, #4]
 800290c:	883b      	ldrh	r3, [r7, #0]
 800290e:	4413      	add	r3, r2
 8002910:	b299      	uxth	r1, r3
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	887b      	ldrh	r3, [r7, #2]
 8002916:	4413      	add	r3, r2
 8002918:	b29c      	uxth	r4, r3
 800291a:	88ba      	ldrh	r2, [r7, #4]
 800291c:	883b      	ldrh	r3, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	b29a      	uxth	r2, r3
 8002922:	88f8      	ldrh	r0, [r7, #6]
 8002924:	7e3b      	ldrb	r3, [r7, #24]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	4622      	mov	r2, r4
 800292c:	f7ff febf 	bl	80026ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8002930:	88ba      	ldrh	r2, [r7, #4]
 8002932:	883b      	ldrh	r3, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	b29c      	uxth	r4, r3
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	88b9      	ldrh	r1, [r7, #4]
 800293c:	88f8      	ldrh	r0, [r7, #6]
 800293e:	7e3b      	ldrb	r3, [r7, #24]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4623      	mov	r3, r4
 8002944:	f7ff feb3 	bl	80026ae <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	4413      	add	r3, r2
 800294e:	b298      	uxth	r0, r3
 8002950:	88fa      	ldrh	r2, [r7, #6]
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	4413      	add	r3, r2
 8002956:	b29c      	uxth	r4, r3
 8002958:	88ba      	ldrh	r2, [r7, #4]
 800295a:	883b      	ldrh	r3, [r7, #0]
 800295c:	4413      	add	r3, r2
 800295e:	b29a      	uxth	r2, r3
 8002960:	88b9      	ldrh	r1, [r7, #4]
 8002962:	7e3b      	ldrb	r3, [r7, #24]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	4622      	mov	r2, r4
 800296a:	f7ff fea0 	bl	80026ae <SSD1306_DrawLine>
 800296e:	e000      	b.n	8002972 <SSD1306_DrawRectangle+0xce>
		return;
 8002970:	bf00      	nop
}
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}

08002978 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	4604      	mov	r4, r0
 8002980:	4608      	mov	r0, r1
 8002982:	4611      	mov	r1, r2
 8002984:	461a      	mov	r2, r3
 8002986:	4623      	mov	r3, r4
 8002988:	80fb      	strh	r3, [r7, #6]
 800298a:	4603      	mov	r3, r0
 800298c:	80bb      	strh	r3, [r7, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	807b      	strh	r3, [r7, #2]
 8002992:	4613      	mov	r3, r2
 8002994:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	f1c3 0301 	rsb	r3, r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80029a0:	2301      	movs	r3, #1
 80029a2:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	461a      	mov	r2, r3
 80029a8:	03d2      	lsls	r2, r2, #15
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80029ba:	88f8      	ldrh	r0, [r7, #6]
 80029bc:	88ba      	ldrh	r2, [r7, #4]
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	4413      	add	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	787a      	ldrb	r2, [r7, #1]
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7ff fd58 	bl	800247c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80029cc:	88f8      	ldrh	r0, [r7, #6]
 80029ce:	88ba      	ldrh	r2, [r7, #4]
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	787a      	ldrb	r2, [r7, #1]
 80029d8:	4619      	mov	r1, r3
 80029da:	f7ff fd4f 	bl	800247c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	4413      	add	r3, r2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	88b9      	ldrh	r1, [r7, #4]
 80029e8:	787a      	ldrb	r2, [r7, #1]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fd46 	bl	800247c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	88b9      	ldrh	r1, [r7, #4]
 80029fa:	787a      	ldrb	r2, [r7, #1]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fd3d 	bl	800247c <SSD1306_DrawPixel>

    while (x < y) {
 8002a02:	e081      	b.n	8002b08 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8002a04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0e      	blt.n	8002a2a <SSD1306_DrawCircle+0xb2>
            y--;
 8002a0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002a18:	8a7b      	ldrh	r3, [r7, #18]
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002a20:	8afa      	ldrh	r2, [r7, #22]
 8002a22:	8a7b      	ldrh	r3, [r7, #18]
 8002a24:	4413      	add	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002a2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002a36:	8abb      	ldrh	r3, [r7, #20]
 8002a38:	3302      	adds	r3, #2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002a3e:	8afa      	ldrh	r2, [r7, #22]
 8002a40:	8abb      	ldrh	r3, [r7, #20]
 8002a42:	4413      	add	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	8a3b      	ldrh	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b298      	uxth	r0, r3
 8002a50:	88ba      	ldrh	r2, [r7, #4]
 8002a52:	89fb      	ldrh	r3, [r7, #14]
 8002a54:	4413      	add	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	787a      	ldrb	r2, [r7, #1]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7ff fd0e 	bl	800247c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	8a3b      	ldrh	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	b298      	uxth	r0, r3
 8002a68:	88ba      	ldrh	r2, [r7, #4]
 8002a6a:	89fb      	ldrh	r3, [r7, #14]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	787a      	ldrb	r2, [r7, #1]
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7ff fd02 	bl	800247c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	8a3b      	ldrh	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b298      	uxth	r0, r3
 8002a80:	88ba      	ldrh	r2, [r7, #4]
 8002a82:	89fb      	ldrh	r3, [r7, #14]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	787a      	ldrb	r2, [r7, #1]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7ff fcf6 	bl	800247c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	8a3b      	ldrh	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	b298      	uxth	r0, r3
 8002a98:	88ba      	ldrh	r2, [r7, #4]
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	787a      	ldrb	r2, [r7, #1]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f7ff fcea 	bl	800247c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002aa8:	88fa      	ldrh	r2, [r7, #6]
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	4413      	add	r3, r2
 8002aae:	b298      	uxth	r0, r3
 8002ab0:	88ba      	ldrh	r2, [r7, #4]
 8002ab2:	8a3b      	ldrh	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	787a      	ldrb	r2, [r7, #1]
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7ff fcde 	bl	800247c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002ac0:	88fa      	ldrh	r2, [r7, #6]
 8002ac2:	89fb      	ldrh	r3, [r7, #14]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	b298      	uxth	r0, r3
 8002ac8:	88ba      	ldrh	r2, [r7, #4]
 8002aca:	8a3b      	ldrh	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	787a      	ldrb	r2, [r7, #1]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7ff fcd2 	bl	800247c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002ad8:	88fa      	ldrh	r2, [r7, #6]
 8002ada:	89fb      	ldrh	r3, [r7, #14]
 8002adc:	4413      	add	r3, r2
 8002ade:	b298      	uxth	r0, r3
 8002ae0:	88ba      	ldrh	r2, [r7, #4]
 8002ae2:	8a3b      	ldrh	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	787a      	ldrb	r2, [r7, #1]
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7ff fcc6 	bl	800247c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	b298      	uxth	r0, r3
 8002af8:	88ba      	ldrh	r2, [r7, #4]
 8002afa:	8a3b      	ldrh	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	787a      	ldrb	r2, [r7, #1]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f7ff fcba 	bl	800247c <SSD1306_DrawPixel>
    while (x < y) {
 8002b08:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	f6ff af77 	blt.w	8002a04 <SSD1306_DrawCircle+0x8c>
    }
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd90      	pop	{r4, r7, pc}

08002b20 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	4604      	mov	r4, r0
 8002b28:	4608      	mov	r0, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	80fb      	strh	r3, [r7, #6]
 8002b32:	4603      	mov	r3, r0
 8002b34:	80bb      	strh	r3, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	807b      	strh	r3, [r7, #2]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	f1c3 0301 	rsb	r3, r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	03d2      	lsls	r2, r2, #15
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002b62:	88f8      	ldrh	r0, [r7, #6]
 8002b64:	88ba      	ldrh	r2, [r7, #4]
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	4413      	add	r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	787a      	ldrb	r2, [r7, #1]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7ff fc84 	bl	800247c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002b74:	88f8      	ldrh	r0, [r7, #6]
 8002b76:	88ba      	ldrh	r2, [r7, #4]
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	787a      	ldrb	r2, [r7, #1]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7ff fc7b 	bl	800247c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	88b9      	ldrh	r1, [r7, #4]
 8002b90:	787a      	ldrb	r2, [r7, #1]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fc72 	bl	800247c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	88b9      	ldrh	r1, [r7, #4]
 8002ba2:	787a      	ldrb	r2, [r7, #1]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fc69 	bl	800247c <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	b298      	uxth	r0, r3
 8002bb2:	88b9      	ldrh	r1, [r7, #4]
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	4413      	add	r3, r2
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	88bc      	ldrh	r4, [r7, #4]
 8002bbe:	787b      	ldrb	r3, [r7, #1]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	f7ff fd73 	bl	80026ae <SSD1306_DrawLine>

    while (x < y) {
 8002bc8:	e079      	b.n	8002cbe <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8002bca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	db0e      	blt.n	8002bf0 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8002bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002bde:	8a7b      	ldrh	r3, [r7, #18]
 8002be0:	3302      	adds	r3, #2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002be6:	8afa      	ldrh	r2, [r7, #22]
 8002be8:	8a7b      	ldrh	r3, [r7, #18]
 8002bea:	4413      	add	r3, r2
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002bf0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002bfc:	8abb      	ldrh	r3, [r7, #20]
 8002bfe:	3302      	adds	r3, #2
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002c04:	8afa      	ldrh	r2, [r7, #22]
 8002c06:	8abb      	ldrh	r3, [r7, #20]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	8a3b      	ldrh	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	b298      	uxth	r0, r3
 8002c16:	88ba      	ldrh	r2, [r7, #4]
 8002c18:	89fb      	ldrh	r3, [r7, #14]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b299      	uxth	r1, r3
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	8a3b      	ldrh	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	b29c      	uxth	r4, r3
 8002c26:	88ba      	ldrh	r2, [r7, #4]
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	787b      	ldrb	r3, [r7, #1]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	4622      	mov	r2, r4
 8002c36:	f7ff fd3a 	bl	80026ae <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	8a3b      	ldrh	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	b298      	uxth	r0, r3
 8002c42:	88ba      	ldrh	r2, [r7, #4]
 8002c44:	89fb      	ldrh	r3, [r7, #14]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	b299      	uxth	r1, r3
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	8a3b      	ldrh	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b29c      	uxth	r4, r3
 8002c52:	88ba      	ldrh	r2, [r7, #4]
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	787b      	ldrb	r3, [r7, #1]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	4622      	mov	r2, r4
 8002c62:	f7ff fd24 	bl	80026ae <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002c66:	88fa      	ldrh	r2, [r7, #6]
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b298      	uxth	r0, r3
 8002c6e:	88ba      	ldrh	r2, [r7, #4]
 8002c70:	8a3b      	ldrh	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	b299      	uxth	r1, r3
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	89fb      	ldrh	r3, [r7, #14]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	b29c      	uxth	r4, r3
 8002c7e:	88ba      	ldrh	r2, [r7, #4]
 8002c80:	8a3b      	ldrh	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	787b      	ldrb	r3, [r7, #1]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	f7ff fd0e 	bl	80026ae <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	4413      	add	r3, r2
 8002c98:	b298      	uxth	r0, r3
 8002c9a:	88ba      	ldrh	r2, [r7, #4]
 8002c9c:	8a3b      	ldrh	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	b299      	uxth	r1, r3
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	89fb      	ldrh	r3, [r7, #14]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	b29c      	uxth	r4, r3
 8002caa:	88ba      	ldrh	r2, [r7, #4]
 8002cac:	8a3b      	ldrh	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	787b      	ldrb	r3, [r7, #1]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	4622      	mov	r2, r4
 8002cba:	f7ff fcf8 	bl	80026ae <SSD1306_DrawLine>
    while (x < y) {
 8002cbe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	f6ff af7f 	blt.w	8002bca <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd90      	pop	{r4, r7, pc}

08002cd6 <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7ff fbb6 	bl	800244c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002ce0:	f7ff fb86 	bl	80023f0 <SSD1306_UpdateScreen>
}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <ssd1306_I2C_Init+0x24>)
 8002cf0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cf2:	e002      	b.n	8002cfa <ssd1306_I2C_Init+0x12>
		p--;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f9      	bne.n	8002cf4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	0003d090 	.word	0x0003d090

08002d10 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b0c7      	sub	sp, #284	; 0x11c
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	4604      	mov	r4, r0
 8002d18:	4608      	mov	r0, r1
 8002d1a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002d1e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002d22:	600a      	str	r2, [r1, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d2a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002d2e:	4622      	mov	r2, r4
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d36:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	701a      	strb	r2, [r3, #0]
 8002d3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d46:	460a      	mov	r2, r1
 8002d48:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d52:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d56:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002d5a:	7812      	ldrb	r2, [r2, #0]
 8002d5c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d64:	e015      	b.n	8002d92 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002d66:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d6a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d6e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	441a      	add	r2, r3
 8002d76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	7811      	ldrb	r1, [r2, #0]
 8002d7e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d82:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002d86:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002d88:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002d92:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002d9c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002da0:	8812      	ldrh	r2, [r2, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d8df      	bhi.n	8002d66 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002daa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b299      	uxth	r1, r3
 8002db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002db6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f107 020c 	add.w	r2, r7, #12
 8002dc4:	200a      	movs	r0, #10
 8002dc6:	9000      	str	r0, [sp, #0]
 8002dc8:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <ssd1306_I2C_WriteMulti+0xc8>)
 8002dca:	f001 fa9b 	bl	8004304 <HAL_I2C_Master_Transmit>
}
 8002dce:	bf00      	nop
 8002dd0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	20000110 	.word	0x20000110

08002ddc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
 8002de6:	460b      	mov	r3, r1
 8002de8:	71bb      	strb	r3, [r7, #6]
 8002dea:	4613      	mov	r3, r2
 8002dec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002dee:	79bb      	ldrb	r3, [r7, #6]
 8002df0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002df2:	797b      	ldrb	r3, [r7, #5]
 8002df4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	b299      	uxth	r1, r3
 8002dfa:	f107 020c 	add.w	r2, r7, #12
 8002dfe:	230a      	movs	r3, #10
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2302      	movs	r3, #2
 8002e04:	4803      	ldr	r0, [pc, #12]	; (8002e14 <ssd1306_I2C_Write+0x38>)
 8002e06:	f001 fa7d 	bl	8004304 <HAL_I2C_Master_Transmit>
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000110 	.word	0x20000110

08002e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_MspInit+0x68>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <HAL_MspInit+0x68>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6193      	str	r3, [r2, #24]
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_MspInit+0x68>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_MspInit+0x68>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <HAL_MspInit+0x68>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_MspInit+0x68>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	210f      	movs	r1, #15
 8002e52:	f06f 0001 	mvn.w	r0, #1
 8002e56:	f000 ff32 	bl	8003cbe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_MspInit+0x6c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_MspInit+0x6c>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40010000 	.word	0x40010000

08002e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0318 	add.w	r3, r7, #24
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a28      	ldr	r2, [pc, #160]	; (8002f44 <HAL_ADC_MspInit+0xbc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d122      	bne.n	8002eee <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec0:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002ed8:	2309      	movs	r3, #9
 8002eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002edc:	2303      	movs	r3, #3
 8002ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee0:	f107 0318 	add.w	r3, r7, #24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4819      	ldr	r0, [pc, #100]	; (8002f4c <HAL_ADC_MspInit+0xc4>)
 8002ee8:	f000 ff14 	bl	8003d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002eec:	e026      	b.n	8002f3c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_ADC_MspInit+0xc8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d121      	bne.n	8002f3c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f02:	6193      	str	r3, [r2, #24]
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6193      	str	r3, [r2, #24]
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_ADC_MspInit+0xc0>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0318 	add.w	r3, r7, #24
 8002f34:	4619      	mov	r1, r3
 8002f36:	4805      	ldr	r0, [pc, #20]	; (8002f4c <HAL_ADC_MspInit+0xc4>)
 8002f38:	f000 feec 	bl	8003d14 <HAL_GPIO_Init>
}
 8002f3c:	bf00      	nop
 8002f3e:	3728      	adds	r7, #40	; 0x28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40012400 	.word	0x40012400
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40010800 	.word	0x40010800
 8002f50:	40012800 	.word	0x40012800

08002f54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0310 	add.w	r3, r7, #16
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <HAL_I2C_MspInit+0x70>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d123      	bne.n	8002fbc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_I2C_MspInit+0x74>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <HAL_I2C_MspInit+0x74>)
 8002f7a:	f043 0308 	orr.w	r3, r3, #8
 8002f7e:	6193      	str	r3, [r2, #24]
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_I2C_MspInit+0x74>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f8c:	23c0      	movs	r3, #192	; 0xc0
 8002f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f90:	2312      	movs	r3, #18
 8002f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480b      	ldr	r0, [pc, #44]	; (8002fcc <HAL_I2C_MspInit+0x78>)
 8002fa0:	f000 feb8 	bl	8003d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_I2C_MspInit+0x74>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <HAL_I2C_MspInit+0x74>)
 8002faa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fae:	61d3      	str	r3, [r2, #28]
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_I2C_MspInit+0x74>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40005400 	.word	0x40005400
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010c00 	.word	0x40010c00

08002fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <HAL_SPI_MspInit+0x88>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d12f      	bne.n	8003050 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	; (800305c <HAL_SPI_MspInit+0x8c>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_SPI_MspInit+0x8c>)
 8002ff6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ffa:	6193      	str	r3, [r2, #24]
 8002ffc:	4b17      	ldr	r3, [pc, #92]	; (800305c <HAL_SPI_MspInit+0x8c>)
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_SPI_MspInit+0x8c>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	4a13      	ldr	r2, [pc, #76]	; (800305c <HAL_SPI_MspInit+0x8c>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6193      	str	r3, [r2, #24]
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_SPI_MspInit+0x8c>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003020:	23a0      	movs	r3, #160	; 0xa0
 8003022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003024:	2302      	movs	r3, #2
 8003026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003028:	2303      	movs	r3, #3
 800302a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	4619      	mov	r1, r3
 8003032:	480b      	ldr	r0, [pc, #44]	; (8003060 <HAL_SPI_MspInit+0x90>)
 8003034:	f000 fe6e 	bl	8003d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003038:	2340      	movs	r3, #64	; 0x40
 800303a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	4619      	mov	r1, r3
 800304a:	4805      	ldr	r0, [pc, #20]	; (8003060 <HAL_SPI_MspInit+0x90>)
 800304c:	f000 fe62 	bl	8003d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003050:	bf00      	nop
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40013000 	.word	0x40013000
 800305c:	40021000 	.word	0x40021000
 8003060:	40010800 	.word	0x40010800

08003064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	; 0x38
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800307a:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_InitTick+0xe8>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4a33      	ldr	r2, [pc, #204]	; (800314c <HAL_InitTick+0xe8>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	61d3      	str	r3, [r2, #28]
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_InitTick+0xe8>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003092:	f107 0210 	add.w	r2, r7, #16
 8003096:	f107 0314 	add.w	r3, r7, #20
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f002 f9a9 	bl	80053f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d103      	bne.n	80030b4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030ac:	f002 f97a 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 80030b0:	6378      	str	r0, [r7, #52]	; 0x34
 80030b2:	e004      	b.n	80030be <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80030b4:	f002 f976 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 80030b8:	4603      	mov	r3, r0
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	4a23      	ldr	r2, [pc, #140]	; (8003150 <HAL_InitTick+0xec>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9b      	lsrs	r3, r3, #18
 80030c8:	3b01      	subs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_InitTick+0xf0>)
 80030ce:	4a22      	ldr	r2, [pc, #136]	; (8003158 <HAL_InitTick+0xf4>)
 80030d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_InitTick+0xf0>)
 80030d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80030d8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_InitTick+0xf0>)
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_InitTick+0xf0>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_InitTick+0xf0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ec:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_InitTick+0xf0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80030f2:	4818      	ldr	r0, [pc, #96]	; (8003154 <HAL_InitTick+0xf0>)
 80030f4:	f003 f8c0 	bl	8006278 <HAL_TIM_Base_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80030fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11b      	bne.n	800313e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003106:	4813      	ldr	r0, [pc, #76]	; (8003154 <HAL_InitTick+0xf0>)
 8003108:	f003 f90e 	bl	8006328 <HAL_TIM_Base_Start_IT>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003112:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003116:	2b00      	cmp	r3, #0
 8003118:	d111      	bne.n	800313e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800311a:	201e      	movs	r0, #30
 800311c:	f000 fdeb 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d808      	bhi.n	8003138 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003126:	2200      	movs	r2, #0
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	201e      	movs	r0, #30
 800312c:	f000 fdc7 	bl	8003cbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <HAL_InitTick+0xf8>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e002      	b.n	800313e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800313e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003142:	4618      	mov	r0, r3
 8003144:	3738      	adds	r7, #56	; 0x38
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	431bde83 	.word	0x431bde83
 8003154:	20000628 	.word	0x20000628
 8003158:	40000800 	.word	0x40000800
 800315c:	2000000c 	.word	0x2000000c

08003160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003164:	e7fe      	b.n	8003164 <NMI_Handler+0x4>

08003166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <HardFault_Handler+0x4>

0800316c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <MemManage_Handler+0x4>

08003172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <BusFault_Handler+0x4>

08003178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <UsageFault_Handler+0x4>

0800317e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
	...

0800318c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <TIM4_IRQHandler+0x10>)
 8003192:	f003 f91b 	bl	80063cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000628 	.word	0x20000628

080031a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80031ac:	f7ff fff8 	bl	80031a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b0:	480b      	ldr	r0, [pc, #44]	; (80031e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031b2:	490c      	ldr	r1, [pc, #48]	; (80031e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031b4:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80031b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031b8:	e002      	b.n	80031c0 <LoopCopyDataInit>

080031ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031be:	3304      	adds	r3, #4

080031c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c4:	d3f9      	bcc.n	80031ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80031c8:	4c09      	ldr	r4, [pc, #36]	; (80031f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031cc:	e001      	b.n	80031d2 <LoopFillZerobss>

080031ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d0:	3204      	adds	r2, #4

080031d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d4:	d3fb      	bcc.n	80031ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031d6:	f007 fa9d 	bl	800a714 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031da:	f7fd fb3b 	bl	8000854 <main>
  bx lr
 80031de:	4770      	bx	lr
  ldr r0, =_sdata
 80031e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031e4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80031e8:	0800b424 	.word	0x0800b424
  ldr r2, =_sbss
 80031ec:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80031f0:	2000235c 	.word	0x2000235c

080031f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031f4:	e7fe      	b.n	80031f4 <ADC1_2_IRQHandler>
	...

080031f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_Init+0x28>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a07      	ldr	r2, [pc, #28]	; (8003220 <HAL_Init+0x28>)
 8003202:	f043 0310 	orr.w	r3, r3, #16
 8003206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003208:	2003      	movs	r0, #3
 800320a:	f000 fd4d 	bl	8003ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800320e:	200f      	movs	r0, #15
 8003210:	f7ff ff28 	bl	8003064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003214:	f7ff fe00 	bl	8002e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40022000 	.word	0x40022000

08003224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_IncTick+0x1c>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_IncTick+0x20>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4413      	add	r3, r2
 8003234:	4a03      	ldr	r2, [pc, #12]	; (8003244 <HAL_IncTick+0x20>)
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	20000010 	.word	0x20000010
 8003244:	20000670 	.word	0x20000670

08003248 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return uwTick;
 800324c:	4b02      	ldr	r3, [pc, #8]	; (8003258 <HAL_GetTick+0x10>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	20000670 	.word	0x20000670

0800325c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff fff0 	bl	8003248 <HAL_GetTick>
 8003268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d005      	beq.n	8003282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_Delay+0x44>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003282:	bf00      	nop
 8003284:	f7ff ffe0 	bl	8003248 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d8f7      	bhi.n	8003284 <HAL_Delay+0x28>
  {
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000010 	.word	0x20000010

080032a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0be      	b.n	8003444 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fdd0 	bl	8002e88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fbf1 	bl	8003ad0 <ADC_ConversionStop_Disable>
 80032ee:	4603      	mov	r3, r0
 80032f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f040 8099 	bne.w	8003432 <HAL_ADC_Init+0x18e>
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 8095 	bne.w	8003432 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003310:	f023 0302 	bic.w	r3, r3, #2
 8003314:	f043 0202 	orr.w	r2, r3, #2
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003324:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	7b1b      	ldrb	r3, [r3, #12]
 800332a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800332c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	4313      	orrs	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800333c:	d003      	beq.n	8003346 <HAL_ADC_Init+0xa2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_ADC_Init+0xa8>
 8003346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800334a:	e000      	b.n	800334e <HAL_ADC_Init+0xaa>
 800334c:	2300      	movs	r3, #0
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	7d1b      	ldrb	r3, [r3, #20]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d119      	bne.n	8003390 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7b1b      	ldrb	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	3b01      	subs	r3, #1
 800336a:	035a      	lsls	r2, r3, #13
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	e00b      	b.n	8003390 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <HAL_ADC_Init+0x1a8>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c0:	d003      	beq.n	80033ca <HAL_ADC_Init+0x126>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d104      	bne.n	80033d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	051b      	lsls	r3, r3, #20
 80033d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	4b18      	ldr	r3, [pc, #96]	; (8003450 <HAL_ADC_Init+0x1ac>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d10b      	bne.n	8003410 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800340e:	e018      	b.n	8003442 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	f023 0312 	bic.w	r3, r3, #18
 8003418:	f043 0210 	orr.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003430:	e007      	b.n	8003442 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	f043 0210 	orr.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003442:	7dfb      	ldrb	r3, [r7, #23]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	ffe1f7fd 	.word	0xffe1f7fd
 8003450:	ff1f0efe 	.word	0xff1f0efe

08003454 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_ADC_Start+0x1a>
 800346a:	2302      	movs	r3, #2
 800346c:	e098      	b.n	80035a0 <HAL_ADC_Start+0x14c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fad0 	bl	8003a1c <ADC_Enable>
 800347c:	4603      	mov	r3, r0
 800347e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 8087 	bne.w	8003596 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <HAL_ADC_Start+0x154>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d105      	bne.n	80034b2 <HAL_ADC_Start+0x5e>
 80034a6:	4b41      	ldr	r3, [pc, #260]	; (80035ac <HAL_ADC_Start+0x158>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d026      	beq.n	800351a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034dc:	e01d      	b.n	800351a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2f      	ldr	r2, [pc, #188]	; (80035ac <HAL_ADC_Start+0x158>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_ADC_Start+0xaa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2b      	ldr	r2, [pc, #172]	; (80035a8 <HAL_ADC_Start+0x154>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10d      	bne.n	800351a <HAL_ADC_Start+0xc6>
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_ADC_Start+0x158>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003512:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f023 0206 	bic.w	r2, r3, #6
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	62da      	str	r2, [r3, #44]	; 0x2c
 8003532:	e002      	b.n	800353a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f06f 0202 	mvn.w	r2, #2
 800354a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003556:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800355a:	d113      	bne.n	8003584 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <HAL_ADC_Start+0x154>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d105      	bne.n	8003572 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_ADC_Start+0x158>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800356e:	2b00      	cmp	r3, #0
 8003570:	d108      	bne.n	8003584 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	e00c      	b.n	800359e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	e003      	b.n	800359e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40012800 	.word	0x40012800
 80035ac:	40012400 	.word	0x40012400

080035b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_ADC_Stop+0x1a>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e01a      	b.n	8003600 <HAL_ADC_Stop+0x50>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fa7c 	bl	8003ad0 <ADC_ConversionStop_Disable>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800361e:	f7ff fe13 	bl	8003248 <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	f043 0220 	orr.w	r2, r3, #32
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e0d3      	b.n	80037f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d131      	bne.n	80036bc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d12a      	bne.n	80036bc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003666:	e021      	b.n	80036ac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d01d      	beq.n	80036ac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_ADC_PollForConversion+0x7e>
 8003676:	f7ff fde7 	bl	8003248 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d212      	bcs.n	80036ac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f043 0204 	orr.w	r2, r3, #4
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e0a2      	b.n	80037f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0d6      	beq.n	8003668 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036ba:	e070      	b.n	800379e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80036bc:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_ADC_PollForConversion+0x1f4>)
 80036be:	681c      	ldr	r4, [r3, #0]
 80036c0:	2002      	movs	r0, #2
 80036c2:	f001 ff9b 	bl	80055fc <HAL_RCCEx_GetPeriphCLKFreq>
 80036c6:	4603      	mov	r3, r0
 80036c8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6919      	ldr	r1, [r3, #16]
 80036d2:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_ADC_PollForConversion+0x1f8>)
 80036d4:	400b      	ands	r3, r1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d118      	bne.n	800370c <HAL_ADC_PollForConversion+0x104>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68d9      	ldr	r1, [r3, #12]
 80036e0:	4b48      	ldr	r3, [pc, #288]	; (8003804 <HAL_ADC_PollForConversion+0x1fc>)
 80036e2:	400b      	ands	r3, r1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d111      	bne.n	800370c <HAL_ADC_PollForConversion+0x104>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6919      	ldr	r1, [r3, #16]
 80036ee:	4b46      	ldr	r3, [pc, #280]	; (8003808 <HAL_ADC_PollForConversion+0x200>)
 80036f0:	400b      	ands	r3, r1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_ADC_PollForConversion+0x100>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68d9      	ldr	r1, [r3, #12]
 80036fc:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_ADC_PollForConversion+0x204>)
 80036fe:	400b      	ands	r3, r1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_ADC_PollForConversion+0x100>
 8003704:	2314      	movs	r3, #20
 8003706:	e020      	b.n	800374a <HAL_ADC_PollForConversion+0x142>
 8003708:	2329      	movs	r3, #41	; 0x29
 800370a:	e01e      	b.n	800374a <HAL_ADC_PollForConversion+0x142>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6919      	ldr	r1, [r3, #16]
 8003712:	4b3d      	ldr	r3, [pc, #244]	; (8003808 <HAL_ADC_PollForConversion+0x200>)
 8003714:	400b      	ands	r3, r1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_ADC_PollForConversion+0x120>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_ADC_PollForConversion+0x204>)
 8003722:	400b      	ands	r3, r1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_ADC_PollForConversion+0x13c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6919      	ldr	r1, [r3, #16]
 800372e:	4b38      	ldr	r3, [pc, #224]	; (8003810 <HAL_ADC_PollForConversion+0x208>)
 8003730:	400b      	ands	r3, r1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <HAL_ADC_PollForConversion+0x140>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68d9      	ldr	r1, [r3, #12]
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <HAL_ADC_PollForConversion+0x208>)
 800373e:	400b      	ands	r3, r1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_ADC_PollForConversion+0x140>
 8003744:	2354      	movs	r3, #84	; 0x54
 8003746:	e000      	b.n	800374a <HAL_ADC_PollForConversion+0x142>
 8003748:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003750:	e021      	b.n	8003796 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d01a      	beq.n	8003790 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_ADC_PollForConversion+0x168>
 8003760:	f7ff fd72 	bl	8003248 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d20f      	bcs.n	8003790 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	429a      	cmp	r2, r3
 8003776:	d90b      	bls.n	8003790 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377c:	f043 0204 	orr.w	r2, r3, #4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e030      	b.n	80037f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	429a      	cmp	r2, r3
 800379c:	d8d9      	bhi.n	8003752 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f06f 0212 	mvn.w	r2, #18
 80037a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80037c2:	d115      	bne.n	80037f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d111      	bne.n	80037f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000008 	.word	0x20000008
 8003800:	24924924 	.word	0x24924924
 8003804:	00924924 	.word	0x00924924
 8003808:	12492492 	.word	0x12492492
 800380c:	00492492 	.word	0x00492492
 8003810:	00249249 	.word	0x00249249

08003814 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_ADC_ConfigChannel+0x20>
 8003848:	2302      	movs	r3, #2
 800384a:	e0dc      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x1da>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b06      	cmp	r3, #6
 800385a:	d81c      	bhi.n	8003896 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	3b05      	subs	r3, #5
 800386e:	221f      	movs	r2, #31
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	4019      	ands	r1, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	3b05      	subs	r3, #5
 8003888:	fa00 f203 	lsl.w	r2, r0, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	635a      	str	r2, [r3, #52]	; 0x34
 8003894:	e03c      	b.n	8003910 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d81c      	bhi.n	80038d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	3b23      	subs	r3, #35	; 0x23
 80038b0:	221f      	movs	r2, #31
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43db      	mvns	r3, r3
 80038b8:	4019      	ands	r1, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b23      	subs	r3, #35	; 0x23
 80038ca:	fa00 f203 	lsl.w	r2, r0, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
 80038d6:	e01b      	b.n	8003910 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	3b41      	subs	r3, #65	; 0x41
 80038ea:	221f      	movs	r2, #31
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	4019      	ands	r1, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	3b41      	subs	r3, #65	; 0x41
 8003904:	fa00 f203 	lsl.w	r2, r0, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b09      	cmp	r3, #9
 8003916:	d91c      	bls.n	8003952 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68d9      	ldr	r1, [r3, #12]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	4413      	add	r3, r2
 8003928:	3b1e      	subs	r3, #30
 800392a:	2207      	movs	r2, #7
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	4019      	ands	r1, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6898      	ldr	r0, [r3, #8]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	3b1e      	subs	r3, #30
 8003944:	fa00 f203 	lsl.w	r2, r0, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	e019      	b.n	8003986 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6919      	ldr	r1, [r3, #16]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4413      	add	r3, r2
 8003962:	2207      	movs	r2, #7
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	4019      	ands	r1, r3
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6898      	ldr	r0, [r3, #8]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	fa00 f203 	lsl.w	r2, r0, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b10      	cmp	r3, #16
 800398c:	d003      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003992:	2b11      	cmp	r3, #17
 8003994:	d132      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_ADC_ConfigChannel+0x1e4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d125      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d126      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d11a      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <HAL_ADC_ConfigChannel+0x1e8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <HAL_ADC_ConfigChannel+0x1ec>)
 80039cc:	fba2 2303 	umull	r2, r3, r2, r3
 80039d0:	0c9a      	lsrs	r2, r3, #18
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039dc:	e002      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f9      	bne.n	80039de <HAL_ADC_ConfigChannel+0x1b2>
 80039ea:	e007      	b.n	80039fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40012400 	.word	0x40012400
 8003a14:	20000008 	.word	0x20000008
 8003a18:	431bde83 	.word	0x431bde83

08003a1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d040      	beq.n	8003abc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <ADC_Enable+0xac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <ADC_Enable+0xb0>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	0c9b      	lsrs	r3, r3, #18
 8003a56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a58:	e002      	b.n	8003a60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f9      	bne.n	8003a5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a66:	f7ff fbef 	bl	8003248 <HAL_GetTick>
 8003a6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a6c:	e01f      	b.n	8003aae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a6e:	f7ff fbeb 	bl	8003248 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d918      	bls.n	8003aae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d011      	beq.n	8003aae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f043 0210 	orr.w	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e007      	b.n	8003abe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d1d8      	bne.n	8003a6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000008 	.word	0x20000008
 8003acc:	431bde83 	.word	0x431bde83

08003ad0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d12e      	bne.n	8003b48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003afa:	f7ff fba5 	bl	8003248 <HAL_GetTick>
 8003afe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b00:	e01b      	b.n	8003b3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b02:	f7ff fba1 	bl	8003248 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d914      	bls.n	8003b3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d10d      	bne.n	8003b3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f043 0210 	orr.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e007      	b.n	8003b4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d0dc      	beq.n	8003b02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <__NVIC_SetPriorityGrouping+0x44>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b70:	4013      	ands	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b86:	4a04      	ldr	r2, [pc, #16]	; (8003b98 <__NVIC_SetPriorityGrouping+0x44>)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	60d3      	str	r3, [r2, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	f003 0307 	and.w	r3, r3, #7
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	db0b      	blt.n	8003be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	f003 021f 	and.w	r2, r3, #31
 8003bd0:	4906      	ldr	r1, [pc, #24]	; (8003bec <__NVIC_EnableIRQ+0x34>)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2001      	movs	r0, #1
 8003bda:	fa00 f202 	lsl.w	r2, r0, r2
 8003bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100

08003bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	6039      	str	r1, [r7, #0]
 8003bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	db0a      	blt.n	8003c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	490c      	ldr	r1, [pc, #48]	; (8003c3c <__NVIC_SetPriority+0x4c>)
 8003c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	440b      	add	r3, r1
 8003c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c18:	e00a      	b.n	8003c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <__NVIC_SetPriority+0x50>)
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	3b04      	subs	r3, #4
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	761a      	strb	r2, [r3, #24]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f1c3 0307 	rsb	r3, r3, #7
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	bf28      	it	cs
 8003c62:	2304      	movcs	r3, #4
 8003c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d902      	bls.n	8003c74 <NVIC_EncodePriority+0x30>
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3b03      	subs	r3, #3
 8003c72:	e000      	b.n	8003c76 <NVIC_EncodePriority+0x32>
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43da      	mvns	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	401a      	ands	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	4313      	orrs	r3, r2
         );
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3724      	adds	r7, #36	; 0x24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff4f 	bl	8003b54 <__NVIC_SetPriorityGrouping>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd0:	f7ff ff64 	bl	8003b9c <__NVIC_GetPriorityGrouping>
 8003cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	6978      	ldr	r0, [r7, #20]
 8003cdc:	f7ff ffb2 	bl	8003c44 <NVIC_EncodePriority>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff81 	bl	8003bf0 <__NVIC_SetPriority>
}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff57 	bl	8003bb8 <__NVIC_EnableIRQ>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b08b      	sub	sp, #44	; 0x2c
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d26:	e169      	b.n	8003ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d28:	2201      	movs	r2, #1
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	f040 8158 	bne.w	8003ff6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	4a9a      	ldr	r2, [pc, #616]	; (8003fb4 <HAL_GPIO_Init+0x2a0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d05e      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d50:	4a98      	ldr	r2, [pc, #608]	; (8003fb4 <HAL_GPIO_Init+0x2a0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d875      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d56:	4a98      	ldr	r2, [pc, #608]	; (8003fb8 <HAL_GPIO_Init+0x2a4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d058      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d5c:	4a96      	ldr	r2, [pc, #600]	; (8003fb8 <HAL_GPIO_Init+0x2a4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d86f      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d62:	4a96      	ldr	r2, [pc, #600]	; (8003fbc <HAL_GPIO_Init+0x2a8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d052      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d68:	4a94      	ldr	r2, [pc, #592]	; (8003fbc <HAL_GPIO_Init+0x2a8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d869      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d6e:	4a94      	ldr	r2, [pc, #592]	; (8003fc0 <HAL_GPIO_Init+0x2ac>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d04c      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d74:	4a92      	ldr	r2, [pc, #584]	; (8003fc0 <HAL_GPIO_Init+0x2ac>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d863      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d7a:	4a92      	ldr	r2, [pc, #584]	; (8003fc4 <HAL_GPIO_Init+0x2b0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d046      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
 8003d80:	4a90      	ldr	r2, [pc, #576]	; (8003fc4 <HAL_GPIO_Init+0x2b0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d85d      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d86:	2b12      	cmp	r3, #18
 8003d88:	d82a      	bhi.n	8003de0 <HAL_GPIO_Init+0xcc>
 8003d8a:	2b12      	cmp	r3, #18
 8003d8c:	d859      	bhi.n	8003e42 <HAL_GPIO_Init+0x12e>
 8003d8e:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <HAL_GPIO_Init+0x80>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003e0f 	.word	0x08003e0f
 8003d98:	08003de9 	.word	0x08003de9
 8003d9c:	08003dfb 	.word	0x08003dfb
 8003da0:	08003e3d 	.word	0x08003e3d
 8003da4:	08003e43 	.word	0x08003e43
 8003da8:	08003e43 	.word	0x08003e43
 8003dac:	08003e43 	.word	0x08003e43
 8003db0:	08003e43 	.word	0x08003e43
 8003db4:	08003e43 	.word	0x08003e43
 8003db8:	08003e43 	.word	0x08003e43
 8003dbc:	08003e43 	.word	0x08003e43
 8003dc0:	08003e43 	.word	0x08003e43
 8003dc4:	08003e43 	.word	0x08003e43
 8003dc8:	08003e43 	.word	0x08003e43
 8003dcc:	08003e43 	.word	0x08003e43
 8003dd0:	08003e43 	.word	0x08003e43
 8003dd4:	08003e43 	.word	0x08003e43
 8003dd8:	08003df1 	.word	0x08003df1
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	4a79      	ldr	r2, [pc, #484]	; (8003fc8 <HAL_GPIO_Init+0x2b4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003de6:	e02c      	b.n	8003e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	623b      	str	r3, [r7, #32]
          break;
 8003dee:	e029      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	3304      	adds	r3, #4
 8003df6:	623b      	str	r3, [r7, #32]
          break;
 8003df8:	e024      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	623b      	str	r3, [r7, #32]
          break;
 8003e02:	e01f      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	623b      	str	r3, [r7, #32]
          break;
 8003e0c:	e01a      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e16:	2304      	movs	r3, #4
 8003e18:	623b      	str	r3, [r7, #32]
          break;
 8003e1a:	e013      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e24:	2308      	movs	r3, #8
 8003e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	611a      	str	r2, [r3, #16]
          break;
 8003e2e:	e009      	b.n	8003e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e30:	2308      	movs	r3, #8
 8003e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	615a      	str	r2, [r3, #20]
          break;
 8003e3a:	e003      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	623b      	str	r3, [r7, #32]
          break;
 8003e40:	e000      	b.n	8003e44 <HAL_GPIO_Init+0x130>
          break;
 8003e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2bff      	cmp	r3, #255	; 0xff
 8003e48:	d801      	bhi.n	8003e4e <HAL_GPIO_Init+0x13a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	e001      	b.n	8003e52 <HAL_GPIO_Init+0x13e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
 8003e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2bff      	cmp	r3, #255	; 0xff
 8003e58:	d802      	bhi.n	8003e60 <HAL_GPIO_Init+0x14c>
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	e002      	b.n	8003e66 <HAL_GPIO_Init+0x152>
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	3b08      	subs	r3, #8
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	210f      	movs	r1, #15
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	401a      	ands	r2, r3
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e80:	431a      	orrs	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 80b1 	beq.w	8003ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e94:	4b4d      	ldr	r3, [pc, #308]	; (8003fcc <HAL_GPIO_Init+0x2b8>)
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	4a4c      	ldr	r2, [pc, #304]	; (8003fcc <HAL_GPIO_Init+0x2b8>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6193      	str	r3, [r2, #24]
 8003ea0:	4b4a      	ldr	r3, [pc, #296]	; (8003fcc <HAL_GPIO_Init+0x2b8>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003eac:	4a48      	ldr	r2, [pc, #288]	; (8003fd0 <HAL_GPIO_Init+0x2bc>)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	220f      	movs	r2, #15
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a40      	ldr	r2, [pc, #256]	; (8003fd4 <HAL_GPIO_Init+0x2c0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_GPIO_Init+0x1ec>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3f      	ldr	r2, [pc, #252]	; (8003fd8 <HAL_GPIO_Init+0x2c4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00d      	beq.n	8003efc <HAL_GPIO_Init+0x1e8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a3e      	ldr	r2, [pc, #248]	; (8003fdc <HAL_GPIO_Init+0x2c8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <HAL_GPIO_Init+0x1e4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3d      	ldr	r2, [pc, #244]	; (8003fe0 <HAL_GPIO_Init+0x2cc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_GPIO_Init+0x1e0>
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e006      	b.n	8003f02 <HAL_GPIO_Init+0x1ee>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	e004      	b.n	8003f02 <HAL_GPIO_Init+0x1ee>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e002      	b.n	8003f02 <HAL_GPIO_Init+0x1ee>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <HAL_GPIO_Init+0x1ee>
 8003f00:	2300      	movs	r3, #0
 8003f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f04:	f002 0203 	and.w	r2, r2, #3
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	4093      	lsls	r3, r2
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f12:	492f      	ldr	r1, [pc, #188]	; (8003fd0 <HAL_GPIO_Init+0x2bc>)
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	3302      	adds	r3, #2
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f2c:	4b2d      	ldr	r3, [pc, #180]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	492c      	ldr	r1, [pc, #176]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
 8003f38:	e006      	b.n	8003f48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	4928      	ldr	r1, [pc, #160]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d006      	beq.n	8003f62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f54:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	4922      	ldr	r1, [pc, #136]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60cb      	str	r3, [r1, #12]
 8003f60:	e006      	b.n	8003f70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	491e      	ldr	r1, [pc, #120]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4918      	ldr	r1, [pc, #96]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
 8003f88:	e006      	b.n	8003f98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	4914      	ldr	r1, [pc, #80]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d021      	beq.n	8003fe8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	490e      	ldr	r1, [pc, #56]	; (8003fe4 <HAL_GPIO_Init+0x2d0>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
 8003fb0:	e021      	b.n	8003ff6 <HAL_GPIO_Init+0x2e2>
 8003fb2:	bf00      	nop
 8003fb4:	10320000 	.word	0x10320000
 8003fb8:	10310000 	.word	0x10310000
 8003fbc:	10220000 	.word	0x10220000
 8003fc0:	10210000 	.word	0x10210000
 8003fc4:	10120000 	.word	0x10120000
 8003fc8:	10110000 	.word	0x10110000
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40010800 	.word	0x40010800
 8003fd8:	40010c00 	.word	0x40010c00
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	40011400 	.word	0x40011400
 8003fe4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <HAL_GPIO_Init+0x304>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4909      	ldr	r1, [pc, #36]	; (8004018 <HAL_GPIO_Init+0x304>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	f47f ae8e 	bne.w	8003d28 <HAL_GPIO_Init+0x14>
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	372c      	adds	r7, #44	; 0x2c
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	40010400 	.word	0x40010400

0800401c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
 8004038:	e001      	b.n	800403e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	460b      	mov	r3, r1
 8004054:	807b      	strh	r3, [r7, #2]
 8004056:	4613      	mov	r3, r2
 8004058:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800405a:	787b      	ldrb	r3, [r7, #1]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004066:	e003      	b.n	8004070 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004068:	887b      	ldrh	r3, [r7, #2]
 800406a:	041a      	lsls	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	611a      	str	r2, [r3, #16]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr
	...

0800407c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e12b      	b.n	80042e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe ff56 	bl	8002f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040e0:	f001 f960 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 80040e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4a81      	ldr	r2, [pc, #516]	; (80042f0 <HAL_I2C_Init+0x274>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d807      	bhi.n	8004100 <HAL_I2C_Init+0x84>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a80      	ldr	r2, [pc, #512]	; (80042f4 <HAL_I2C_Init+0x278>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	bf94      	ite	ls
 80040f8:	2301      	movls	r3, #1
 80040fa:	2300      	movhi	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	e006      	b.n	800410e <HAL_I2C_Init+0x92>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a7d      	ldr	r2, [pc, #500]	; (80042f8 <HAL_I2C_Init+0x27c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	bf94      	ite	ls
 8004108:	2301      	movls	r3, #1
 800410a:	2300      	movhi	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0e7      	b.n	80042e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4a78      	ldr	r2, [pc, #480]	; (80042fc <HAL_I2C_Init+0x280>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	0c9b      	lsrs	r3, r3, #18
 8004120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a6a      	ldr	r2, [pc, #424]	; (80042f0 <HAL_I2C_Init+0x274>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d802      	bhi.n	8004150 <HAL_I2C_Init+0xd4>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3301      	adds	r3, #1
 800414e:	e009      	b.n	8004164 <HAL_I2C_Init+0xe8>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	4a69      	ldr	r2, [pc, #420]	; (8004300 <HAL_I2C_Init+0x284>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	099b      	lsrs	r3, r3, #6
 8004162:	3301      	adds	r3, #1
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430b      	orrs	r3, r1
 800416a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004176:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	495c      	ldr	r1, [pc, #368]	; (80042f0 <HAL_I2C_Init+0x274>)
 8004180:	428b      	cmp	r3, r1
 8004182:	d819      	bhi.n	80041b8 <HAL_I2C_Init+0x13c>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e59      	subs	r1, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004198:	400b      	ands	r3, r1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_I2C_Init+0x138>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e59      	subs	r1, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041ac:	3301      	adds	r3, #1
 80041ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b2:	e051      	b.n	8004258 <HAL_I2C_Init+0x1dc>
 80041b4:	2304      	movs	r3, #4
 80041b6:	e04f      	b.n	8004258 <HAL_I2C_Init+0x1dc>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d111      	bne.n	80041e4 <HAL_I2C_Init+0x168>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1e58      	subs	r0, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6859      	ldr	r1, [r3, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	440b      	add	r3, r1
 80041ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d2:	3301      	adds	r3, #1
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e012      	b.n	800420a <HAL_I2C_Init+0x18e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e58      	subs	r0, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	0099      	lsls	r1, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041fa:	3301      	adds	r3, #1
 80041fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004200:	2b00      	cmp	r3, #0
 8004202:	bf0c      	ite	eq
 8004204:	2301      	moveq	r3, #1
 8004206:	2300      	movne	r3, #0
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Init+0x196>
 800420e:	2301      	movs	r3, #1
 8004210:	e022      	b.n	8004258 <HAL_I2C_Init+0x1dc>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10e      	bne.n	8004238 <HAL_I2C_Init+0x1bc>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1e58      	subs	r0, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6859      	ldr	r1, [r3, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	440b      	add	r3, r1
 8004228:	fbb0 f3f3 	udiv	r3, r0, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004236:	e00f      	b.n	8004258 <HAL_I2C_Init+0x1dc>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1e58      	subs	r0, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	0099      	lsls	r1, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	fbb0 f3f3 	udiv	r3, r0, r3
 800424e:	3301      	adds	r3, #1
 8004250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	6809      	ldr	r1, [r1, #0]
 800425c:	4313      	orrs	r3, r2
 800425e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004286:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6911      	ldr	r1, [r2, #16]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68d2      	ldr	r2, [r2, #12]
 8004292:	4311      	orrs	r1, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	430b      	orrs	r3, r1
 800429a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	000186a0 	.word	0x000186a0
 80042f4:	001e847f 	.word	0x001e847f
 80042f8:	003d08ff 	.word	0x003d08ff
 80042fc:	431bde83 	.word	0x431bde83
 8004300:	10624dd3 	.word	0x10624dd3

08004304 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	461a      	mov	r2, r3
 8004310:	460b      	mov	r3, r1
 8004312:	817b      	strh	r3, [r7, #10]
 8004314:	4613      	mov	r3, r2
 8004316:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004318:	f7fe ff96 	bl	8003248 <HAL_GetTick>
 800431c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	f040 80e0 	bne.w	80044ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2319      	movs	r3, #25
 8004332:	2201      	movs	r2, #1
 8004334:	4970      	ldr	r1, [pc, #448]	; (80044f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fa92 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004342:	2302      	movs	r3, #2
 8004344:	e0d3      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_I2C_Master_Transmit+0x50>
 8004350:	2302      	movs	r3, #2
 8004352:	e0cc      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d007      	beq.n	800437a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004388:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2221      	movs	r2, #33	; 0x21
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2210      	movs	r2, #16
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	893a      	ldrh	r2, [r7, #8]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a50      	ldr	r2, [pc, #320]	; (80044fc <HAL_I2C_Master_Transmit+0x1f8>)
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043bc:	8979      	ldrh	r1, [r7, #10]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	6a3a      	ldr	r2, [r7, #32]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f9ca 	bl	800475c <I2C_MasterRequestWrite>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e08d      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043e8:	e066      	b.n	80044b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	6a39      	ldr	r1, [r7, #32]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fb50 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d107      	bne.n	8004412 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06b      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b04      	cmp	r3, #4
 8004452:	d11b      	bne.n	800448c <HAL_I2C_Master_Transmit+0x188>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d017      	beq.n	800448c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	781a      	ldrb	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	6a39      	ldr	r1, [r7, #32]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fb47 	bl	8004b24 <I2C_WaitOnBTFFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d107      	bne.n	80044b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e01a      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d194      	bne.n	80043ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	00100002 	.word	0x00100002
 80044fc:	ffff0000 	.word	0xffff0000

08004500 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af02      	add	r7, sp, #8
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	460b      	mov	r3, r1
 800450e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004510:	f7fe fe9a 	bl	8003248 <HAL_GetTick>
 8004514:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b20      	cmp	r3, #32
 8004524:	f040 8111 	bne.w	800474a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2319      	movs	r3, #25
 800452e:	2201      	movs	r2, #1
 8004530:	4988      	ldr	r1, [pc, #544]	; (8004754 <HAL_I2C_IsDeviceReady+0x254>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f994 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	e104      	b.n	800474c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_I2C_IsDeviceReady+0x50>
 800454c:	2302      	movs	r3, #2
 800454e:	e0fd      	b.n	800474c <HAL_I2C_IsDeviceReady+0x24c>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d007      	beq.n	8004576 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f042 0201 	orr.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004584:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2224      	movs	r2, #36	; 0x24
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a70      	ldr	r2, [pc, #448]	; (8004758 <HAL_I2C_IsDeviceReady+0x258>)
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f952 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00d      	beq.n	80045de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d0:	d103      	bne.n	80045da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0b6      	b.n	800474c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045de:	897b      	ldrh	r3, [r7, #10]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80045ee:	f7fe fe2b 	bl	8003248 <HAL_GetTick>
 80045f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004622:	e025      	b.n	8004670 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004624:	f7fe fe10 	bl	8003248 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d302      	bcc.n	800463a <HAL_I2C_IsDeviceReady+0x13a>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	22a0      	movs	r2, #160	; 0xa0
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2ba0      	cmp	r3, #160	; 0xa0
 800467a:	d005      	beq.n	8004688 <HAL_I2C_IsDeviceReady+0x188>
 800467c:	7dfb      	ldrb	r3, [r7, #23]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <HAL_I2C_IsDeviceReady+0x188>
 8004682:	7dbb      	ldrb	r3, [r7, #22]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0cd      	beq.n	8004624 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b02      	cmp	r3, #2
 800469c:	d129      	bne.n	80046f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2319      	movs	r3, #25
 80046ca:	2201      	movs	r2, #1
 80046cc:	4921      	ldr	r1, [pc, #132]	; (8004754 <HAL_I2C_IsDeviceReady+0x254>)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f8c6 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e036      	b.n	800474c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e02c      	b.n	800474c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004700:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800470a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2319      	movs	r3, #25
 8004712:	2201      	movs	r2, #1
 8004714:	490f      	ldr	r1, [pc, #60]	; (8004754 <HAL_I2C_IsDeviceReady+0x254>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f8a2 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e012      	b.n	800474c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	3301      	adds	r3, #1
 800472a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	f4ff af32 	bcc.w	800459a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800474a:	2302      	movs	r3, #2
  }
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	00100002 	.word	0x00100002
 8004758:	ffff0000 	.word	0xffff0000

0800475c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	460b      	mov	r3, r1
 800476a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d006      	beq.n	8004786 <I2C_MasterRequestWrite+0x2a>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d003      	beq.n	8004786 <I2C_MasterRequestWrite+0x2a>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004784:	d108      	bne.n	8004798 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e00b      	b.n	80047b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	2b12      	cmp	r3, #18
 800479e:	d107      	bne.n	80047b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f84f 	bl	8004860 <I2C_WaitOnFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00d      	beq.n	80047e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d6:	d103      	bne.n	80047e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e035      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ec:	d108      	bne.n	8004800 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047fc:	611a      	str	r2, [r3, #16]
 80047fe:	e01b      	b.n	8004838 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004800:	897b      	ldrh	r3, [r7, #10]
 8004802:	11db      	asrs	r3, r3, #7
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0306 	and.w	r3, r3, #6
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f063 030f 	orn	r3, r3, #15
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	490e      	ldr	r1, [pc, #56]	; (8004858 <I2C_MasterRequestWrite+0xfc>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f898 	bl	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e010      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800482e:	897b      	ldrh	r3, [r7, #10]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4907      	ldr	r1, [pc, #28]	; (800485c <I2C_MasterRequestWrite+0x100>)
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f888 	bl	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00010008 	.word	0x00010008
 800485c:	00010002 	.word	0x00010002

08004860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4613      	mov	r3, r2
 800486e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004870:	e048      	b.n	8004904 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d044      	beq.n	8004904 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487a:	f7fe fce5 	bl	8003248 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <I2C_WaitOnFlagUntilTimeout+0x30>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d139      	bne.n	8004904 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d10d      	bne.n	80048b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	43da      	mvns	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	e00c      	b.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	43da      	mvns	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d116      	bne.n	8004904 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e023      	b.n	800494c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d10d      	bne.n	800492a <I2C_WaitOnFlagUntilTimeout+0xca>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	43da      	mvns	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	e00c      	b.n	8004944 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	43da      	mvns	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	429a      	cmp	r2, r3
 8004948:	d093      	beq.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004962:	e071      	b.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004972:	d123      	bne.n	80049bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800498c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f043 0204 	orr.w	r2, r3, #4
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e067      	b.n	8004a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d041      	beq.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c4:	f7fe fc40 	bl	8003248 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d302      	bcc.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d136      	bne.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10c      	bne.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	43da      	mvns	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e00b      	b.n	8004a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	43da      	mvns	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d016      	beq.n	8004a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e021      	b.n	8004a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10c      	bne.n	8004a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	e00b      	b.n	8004a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	43da      	mvns	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4013      	ands	r3, r2
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bf14      	ite	ne
 8004a7e:	2301      	movne	r3, #1
 8004a80:	2300      	moveq	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f af6d 	bne.w	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa0:	e034      	b.n	8004b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f886 	bl	8004bb4 <I2C_IsAcknowledgeFailed>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e034      	b.n	8004b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d028      	beq.n	8004b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7fe fbc5 	bl	8003248 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11d      	bne.n	8004b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d016      	beq.n	8004b0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	f043 0220 	orr.w	r2, r3, #32
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e007      	b.n	8004b1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d1c3      	bne.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b30:	e034      	b.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f83e 	bl	8004bb4 <I2C_IsAcknowledgeFailed>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e034      	b.n	8004bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d028      	beq.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4a:	f7fe fb7d 	bl	8003248 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11d      	bne.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d016      	beq.n	8004b9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e007      	b.n	8004bac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d1c3      	bne.n	8004b32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bca:	d11b      	bne.n	8004c04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	f043 0204 	orr.w	r2, r3, #4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e272      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8087 	beq.w	8004d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c30:	4b92      	ldr	r3, [pc, #584]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 030c 	and.w	r3, r3, #12
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d00c      	beq.n	8004c56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c3c:	4b8f      	ldr	r3, [pc, #572]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d112      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5e>
 8004c48:	4b8c      	ldr	r3, [pc, #560]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c54:	d10b      	bne.n	8004c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c56:	4b89      	ldr	r3, [pc, #548]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d06c      	beq.n	8004d3c <HAL_RCC_OscConfig+0x12c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d168      	bne.n	8004d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e24c      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c76:	d106      	bne.n	8004c86 <HAL_RCC_OscConfig+0x76>
 8004c78:	4b80      	ldr	r3, [pc, #512]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a7f      	ldr	r2, [pc, #508]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e02e      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x98>
 8004c8e:	4b7b      	ldr	r3, [pc, #492]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a7a      	ldr	r2, [pc, #488]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	4b78      	ldr	r3, [pc, #480]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a77      	ldr	r2, [pc, #476]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e01d      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0xbc>
 8004cb2:	4b72      	ldr	r3, [pc, #456]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a71      	ldr	r2, [pc, #452]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6e      	ldr	r2, [pc, #440]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCC_OscConfig+0xd4>
 8004ccc:	4b6b      	ldr	r3, [pc, #428]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a6a      	ldr	r2, [pc, #424]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b68      	ldr	r3, [pc, #416]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a67      	ldr	r2, [pc, #412]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fe faac 	bl	8003248 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fe faa8 	bl	8003248 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e200      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b5d      	ldr	r3, [pc, #372]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xe4>
 8004d12:	e014      	b.n	8004d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d14:	f7fe fa98 	bl	8003248 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fe fa94 	bl	8003248 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e1ec      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2e:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x10c>
 8004d3a:	e000      	b.n	8004d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d063      	beq.n	8004e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d4a:	4b4c      	ldr	r3, [pc, #304]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d56:	4b49      	ldr	r3, [pc, #292]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d11c      	bne.n	8004d9c <HAL_RCC_OscConfig+0x18c>
 8004d62:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d116      	bne.n	8004d9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6e:	4b43      	ldr	r3, [pc, #268]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <HAL_RCC_OscConfig+0x176>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d001      	beq.n	8004d86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e1c0      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d86:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	4939      	ldr	r1, [pc, #228]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9a:	e03a      	b.n	8004e12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d020      	beq.n	8004de6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da4:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <HAL_RCC_OscConfig+0x270>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004daa:	f7fe fa4d 	bl	8003248 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004db2:	f7fe fa49 	bl	8003248 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e1a1      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	4927      	ldr	r1, [pc, #156]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]
 8004de4:	e015      	b.n	8004e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de6:	4b26      	ldr	r3, [pc, #152]	; (8004e80 <HAL_RCC_OscConfig+0x270>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fe fa2c 	bl	8003248 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df4:	f7fe fa28 	bl	8003248 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e180      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d03a      	beq.n	8004e94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d019      	beq.n	8004e5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e26:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e2c:	f7fe fa0c 	bl	8003248 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e34:	f7fe fa08 	bl	8003248 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e160      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e46:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <HAL_RCC_OscConfig+0x26c>)
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e52:	2001      	movs	r0, #1
 8004e54:	f000 fafe 	bl	8005454 <RCC_Delay>
 8004e58:	e01c      	b.n	8004e94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e60:	f7fe f9f2 	bl	8003248 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e66:	e00f      	b.n	8004e88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e68:	f7fe f9ee 	bl	8003248 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d908      	bls.n	8004e88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e146      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	42420000 	.word	0x42420000
 8004e84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	4b92      	ldr	r3, [pc, #584]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e9      	bne.n	8004e68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80a6 	beq.w	8004fee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea6:	4b8b      	ldr	r3, [pc, #556]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10d      	bne.n	8004ece <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	4a87      	ldr	r2, [pc, #540]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	61d3      	str	r3, [r2, #28]
 8004ebe:	4b85      	ldr	r3, [pc, #532]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ece:	4b82      	ldr	r3, [pc, #520]	; (80050d8 <HAL_RCC_OscConfig+0x4c8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d118      	bne.n	8004f0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eda:	4b7f      	ldr	r3, [pc, #508]	; (80050d8 <HAL_RCC_OscConfig+0x4c8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7e      	ldr	r2, [pc, #504]	; (80050d8 <HAL_RCC_OscConfig+0x4c8>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ee6:	f7fe f9af 	bl	8003248 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eee:	f7fe f9ab 	bl	8003248 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b64      	cmp	r3, #100	; 0x64
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e103      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f00:	4b75      	ldr	r3, [pc, #468]	; (80050d8 <HAL_RCC_OscConfig+0x4c8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d106      	bne.n	8004f22 <HAL_RCC_OscConfig+0x312>
 8004f14:	4b6f      	ldr	r3, [pc, #444]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	4a6e      	ldr	r2, [pc, #440]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	6213      	str	r3, [r2, #32]
 8004f20:	e02d      	b.n	8004f7e <HAL_RCC_OscConfig+0x36e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCC_OscConfig+0x334>
 8004f2a:	4b6a      	ldr	r3, [pc, #424]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4a69      	ldr	r2, [pc, #420]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	6213      	str	r3, [r2, #32]
 8004f36:	4b67      	ldr	r3, [pc, #412]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	4a66      	ldr	r2, [pc, #408]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f3c:	f023 0304 	bic.w	r3, r3, #4
 8004f40:	6213      	str	r3, [r2, #32]
 8004f42:	e01c      	b.n	8004f7e <HAL_RCC_OscConfig+0x36e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b05      	cmp	r3, #5
 8004f4a:	d10c      	bne.n	8004f66 <HAL_RCC_OscConfig+0x356>
 8004f4c:	4b61      	ldr	r3, [pc, #388]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	4a60      	ldr	r2, [pc, #384]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	6213      	str	r3, [r2, #32]
 8004f58:	4b5e      	ldr	r3, [pc, #376]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6213      	str	r3, [r2, #32]
 8004f64:	e00b      	b.n	8004f7e <HAL_RCC_OscConfig+0x36e>
 8004f66:	4b5b      	ldr	r3, [pc, #364]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	4a5a      	ldr	r2, [pc, #360]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	6213      	str	r3, [r2, #32]
 8004f72:	4b58      	ldr	r3, [pc, #352]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	4a57      	ldr	r2, [pc, #348]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d015      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fe f95f 	bl	8003248 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fe f95b 	bl	8003248 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0b1      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa4:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ee      	beq.n	8004f8e <HAL_RCC_OscConfig+0x37e>
 8004fb0:	e014      	b.n	8004fdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb2:	f7fe f949 	bl	8003248 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fba:	f7fe f945 	bl	8003248 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e09b      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd0:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ee      	bne.n	8004fba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d105      	bne.n	8004fee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe2:	4b3c      	ldr	r3, [pc, #240]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	4a3b      	ldr	r2, [pc, #236]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8087 	beq.w	8005106 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
 8005000:	2b08      	cmp	r3, #8
 8005002:	d061      	beq.n	80050c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d146      	bne.n	800509a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500c:	4b33      	ldr	r3, [pc, #204]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005012:	f7fe f919 	bl	8003248 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501a:	f7fe f915 	bl	8003248 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e06d      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502c:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d108      	bne.n	8005054 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	4921      	ldr	r1, [pc, #132]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a19      	ldr	r1, [r3, #32]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	430b      	orrs	r3, r1
 8005066:	491b      	ldr	r1, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005072:	f7fe f8e9 	bl	8003248 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507a:	f7fe f8e5 	bl	8003248 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e03d      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x46a>
 8005098:	e035      	b.n	8005106 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_RCC_OscConfig+0x4cc>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fe f8d2 	bl	8003248 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fe f8ce 	bl	8003248 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e026      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x498>
 80050c6:	e01e      	b.n	8005106 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e019      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40007000 	.word	0x40007000
 80050dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <HAL_RCC_OscConfig+0x500>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d106      	bne.n	8005102 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fe:	429a      	cmp	r2, r3
 8005100:	d001      	beq.n	8005106 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40021000 	.word	0x40021000

08005114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0d0      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005128:	4b6a      	ldr	r3, [pc, #424]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d910      	bls.n	8005158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b67      	ldr	r3, [pc, #412]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 0207 	bic.w	r2, r3, #7
 800513e:	4965      	ldr	r1, [pc, #404]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b63      	ldr	r3, [pc, #396]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0b8      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005170:	4b59      	ldr	r3, [pc, #356]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4a58      	ldr	r2, [pc, #352]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800517a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005188:	4b53      	ldr	r3, [pc, #332]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4a52      	ldr	r2, [pc, #328]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b50      	ldr	r3, [pc, #320]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	494d      	ldr	r1, [pc, #308]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d040      	beq.n	8005234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d107      	bne.n	80051ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ba:	4b47      	ldr	r3, [pc, #284]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d115      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e07f      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d2:	4b41      	ldr	r3, [pc, #260]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e073      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e2:	4b3d      	ldr	r3, [pc, #244]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e06b      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f2:	4b39      	ldr	r3, [pc, #228]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f023 0203 	bic.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4936      	ldr	r1, [pc, #216]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	4313      	orrs	r3, r2
 8005202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005204:	f7fe f820 	bl	8003248 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	e00a      	b.n	8005222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520c:	f7fe f81c 	bl	8003248 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	; 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e053      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 020c 	and.w	r2, r3, #12
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	429a      	cmp	r2, r3
 8005232:	d1eb      	bne.n	800520c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005234:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d210      	bcs.n	8005264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f023 0207 	bic.w	r2, r3, #7
 800524a:	4922      	ldr	r1, [pc, #136]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	4313      	orrs	r3, r2
 8005250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005252:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d001      	beq.n	8005264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e032      	b.n	80052ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4916      	ldr	r1, [pc, #88]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	4313      	orrs	r3, r2
 8005280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800528e:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	490e      	ldr	r1, [pc, #56]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052a2:	f000 f821 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 80052a6:	4602      	mov	r2, r0
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	490a      	ldr	r1, [pc, #40]	; (80052dc <HAL_RCC_ClockConfig+0x1c8>)
 80052b4:	5ccb      	ldrb	r3, [r1, r3]
 80052b6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ba:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <HAL_RCC_ClockConfig+0x1cc>)
 80052bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052be:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <HAL_RCC_ClockConfig+0x1d0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd fece 	bl	8003064 <HAL_InitTick>

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40021000 	.word	0x40021000
 80052dc:	0800b3b8 	.word	0x0800b3b8
 80052e0:	20000008 	.word	0x20000008
 80052e4:	2000000c 	.word	0x2000000c

080052e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	2300      	movs	r3, #0
 80052fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCC_GetSysClockFreq+0x94>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 030c 	and.w	r3, r3, #12
 800530e:	2b04      	cmp	r3, #4
 8005310:	d002      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x30>
 8005312:	2b08      	cmp	r3, #8
 8005314:	d003      	beq.n	800531e <HAL_RCC_GetSysClockFreq+0x36>
 8005316:	e027      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <HAL_RCC_GetSysClockFreq+0x98>)
 800531a:	613b      	str	r3, [r7, #16]
      break;
 800531c:	e027      	b.n	800536e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	0c9b      	lsrs	r3, r3, #18
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	4a17      	ldr	r2, [pc, #92]	; (8005384 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005328:	5cd3      	ldrb	r3, [r2, r3]
 800532a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d010      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005336:	4b11      	ldr	r3, [pc, #68]	; (800537c <HAL_RCC_GetSysClockFreq+0x94>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	0c5b      	lsrs	r3, r3, #17
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	4a11      	ldr	r2, [pc, #68]	; (8005388 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <HAL_RCC_GetSysClockFreq+0x98>)
 800534a:	fb03 f202 	mul.w	r2, r3, r2
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e004      	b.n	8005362 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a0c      	ldr	r2, [pc, #48]	; (800538c <HAL_RCC_GetSysClockFreq+0xa4>)
 800535c:	fb02 f303 	mul.w	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	613b      	str	r3, [r7, #16]
      break;
 8005366:	e002      	b.n	800536e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005368:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetSysClockFreq+0x98>)
 800536a:	613b      	str	r3, [r7, #16]
      break;
 800536c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800536e:	693b      	ldr	r3, [r7, #16]
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
 8005380:	007a1200 	.word	0x007a1200
 8005384:	0800b3d0 	.word	0x0800b3d0
 8005388:	0800b3e0 	.word	0x0800b3e0
 800538c:	003d0900 	.word	0x003d0900

08005390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005394:	4b02      	ldr	r3, [pc, #8]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005396:	681b      	ldr	r3, [r3, #0]
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr
 80053a0:	20000008 	.word	0x20000008

080053a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053a8:	f7ff fff2 	bl	8005390 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40021000 	.word	0x40021000
 80053c8:	0800b3c8 	.word	0x0800b3c8

080053cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053d0:	f7ff ffde 	bl	8005390 <HAL_RCC_GetHCLKFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	0adb      	lsrs	r3, r3, #11
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	4903      	ldr	r1, [pc, #12]	; (80053f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40021000 	.word	0x40021000
 80053f0:	0800b3c8 	.word	0x0800b3c8

080053f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	220f      	movs	r2, #15
 8005402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005404:	4b11      	ldr	r3, [pc, #68]	; (800544c <HAL_RCC_GetClockConfig+0x58>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f003 0203 	and.w	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <HAL_RCC_GetClockConfig+0x58>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_RCC_GetClockConfig+0x58>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005428:	4b08      	ldr	r3, [pc, #32]	; (800544c <HAL_RCC_GetClockConfig+0x58>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	08db      	lsrs	r3, r3, #3
 800542e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0207 	and.w	r2, r3, #7
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	40021000 	.word	0x40021000
 8005450:	40022000 	.word	0x40022000

08005454 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <RCC_Delay+0x34>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <RCC_Delay+0x38>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	0a5b      	lsrs	r3, r3, #9
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	fb02 f303 	mul.w	r3, r2, r3
 800546e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005470:	bf00      	nop
  }
  while (Delay --);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	60fa      	str	r2, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f9      	bne.n	8005470 <RCC_Delay+0x1c>
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	20000008 	.word	0x20000008
 800548c:	10624dd3 	.word	0x10624dd3

08005490 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d07d      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054ac:	2300      	movs	r3, #0
 80054ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b0:	4b4f      	ldr	r3, [pc, #316]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10d      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054bc:	4b4c      	ldr	r3, [pc, #304]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	4a4b      	ldr	r2, [pc, #300]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c6:	61d3      	str	r3, [r2, #28]
 80054c8:	4b49      	ldr	r3, [pc, #292]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	4b46      	ldr	r3, [pc, #280]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d118      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e4:	4b43      	ldr	r3, [pc, #268]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a42      	ldr	r2, [pc, #264]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f0:	f7fd feaa 	bl	8003248 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f6:	e008      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f8:	f7fd fea6 	bl	8003248 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	; 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e06d      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550a:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005516:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d02e      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d027      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005534:	4b2e      	ldr	r3, [pc, #184]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800553e:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005544:	4b2c      	ldr	r3, [pc, #176]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800554a:	4a29      	ldr	r2, [pc, #164]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d014      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555a:	f7fd fe75 	bl	8003248 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005560:	e00a      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fd fe71 	bl	8003248 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e036      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ee      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005584:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4917      	ldr	r1, [pc, #92]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	4313      	orrs	r3, r2
 8005594:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d105      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055b4:	4b0e      	ldr	r3, [pc, #56]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	490b      	ldr	r1, [pc, #44]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d2:	4b07      	ldr	r3, [pc, #28]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	4904      	ldr	r1, [pc, #16]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40007000 	.word	0x40007000
 80055f8:	42420440 	.word	0x42420440

080055fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	2300      	movs	r3, #0
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	2300      	movs	r3, #0
 8005616:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b10      	cmp	r3, #16
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b10      	cmp	r3, #16
 8005622:	f200 808a 	bhi.w	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d045      	beq.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d075      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005632:	e082      	b.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005634:	4b46      	ldr	r3, [pc, #280]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800563a:	4b45      	ldr	r3, [pc, #276]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d07b      	beq.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	0c9b      	lsrs	r3, r3, #18
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	4a41      	ldr	r2, [pc, #260]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005650:	5cd3      	ldrb	r3, [r2, r3]
 8005652:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d015      	beq.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800565e:	4b3c      	ldr	r3, [pc, #240]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	0c5b      	lsrs	r3, r3, #17
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	4a3b      	ldr	r2, [pc, #236]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800566a:	5cd3      	ldrb	r3, [r2, r3]
 800566c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00d      	beq.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005678:	4a38      	ldr	r2, [pc, #224]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	e004      	b.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4a34      	ldr	r2, [pc, #208]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800568e:	fb02 f303 	mul.w	r3, r2, r3
 8005692:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005694:	4b2e      	ldr	r3, [pc, #184]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a0:	d102      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	61bb      	str	r3, [r7, #24]
      break;
 80056a6:	e04a      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4a2d      	ldr	r2, [pc, #180]	; (8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
      break;
 80056b6:	e042      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80056b8:	4b25      	ldr	r3, [pc, #148]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c8:	d108      	bne.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80056d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e01f      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e6:	d109      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80056f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	e00f      	b.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005706:	d11c      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005708:	4b11      	ldr	r3, [pc, #68]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d016      	beq.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005714:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005718:	61bb      	str	r3, [r7, #24]
      break;
 800571a:	e012      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800571c:	e011      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800571e:	f7ff fe55 	bl	80053cc <HAL_RCC_GetPCLK2Freq>
 8005722:	4602      	mov	r2, r0
 8005724:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	0b9b      	lsrs	r3, r3, #14
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	3301      	adds	r3, #1
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	fbb2 f3f3 	udiv	r3, r2, r3
 8005736:	61bb      	str	r3, [r7, #24]
      break;
 8005738:	e004      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800573a:	bf00      	nop
 800573c:	e002      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800573e:	bf00      	nop
 8005740:	e000      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005742:	bf00      	nop
    }
  }
  return (frequency);
 8005744:	69bb      	ldr	r3, [r7, #24]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000
 8005754:	0800b3e4 	.word	0x0800b3e4
 8005758:	0800b3f4 	.word	0x0800b3f4
 800575c:	007a1200 	.word	0x007a1200
 8005760:	003d0900 	.word	0x003d0900
 8005764:	aaaaaaab 	.word	0xaaaaaaab

08005768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e076      	b.n	8005868 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2b00      	cmp	r3, #0
 8005780:	d108      	bne.n	8005794 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800578a:	d009      	beq.n	80057a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	61da      	str	r2, [r3, #28]
 8005792:	e005      	b.n	80057a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fd fc08 	bl	8002fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005824:	ea42 0103 	orr.w	r1, r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	0c1a      	lsrs	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f002 0204 	and.w	r2, r2, #4
 8005846:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69da      	ldr	r2, [r3, #28]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005856:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_SPI_Transmit+0x22>
 800588e:	2302      	movs	r3, #2
 8005890:	e12d      	b.n	8005aee <HAL_SPI_Transmit+0x27e>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800589a:	f7fd fcd5 	bl	8003248 <HAL_GetTick>
 800589e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d002      	beq.n	80058b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
 80058b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058b4:	e116      	b.n	8005ae4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_Transmit+0x52>
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058c6:	e10d      	b.n	8005ae4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2203      	movs	r2, #3
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590e:	d10f      	bne.n	8005930 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800592e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d007      	beq.n	800594e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005956:	d14f      	bne.n	80059f8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_SPI_Transmit+0xf6>
 8005960:	8afb      	ldrh	r3, [r7, #22]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d142      	bne.n	80059ec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	881a      	ldrh	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	1c9a      	adds	r2, r3, #2
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800598a:	e02f      	b.n	80059ec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d112      	bne.n	80059c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	881a      	ldrh	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80059be:	e015      	b.n	80059ec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c0:	f7fd fc42 	bl	8003248 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d803      	bhi.n	80059d8 <HAL_SPI_Transmit+0x168>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d102      	bne.n	80059de <HAL_SPI_Transmit+0x16e>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80059ea:	e07b      	b.n	8005ae4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1ca      	bne.n	800598c <HAL_SPI_Transmit+0x11c>
 80059f6:	e050      	b.n	8005a9a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Transmit+0x196>
 8005a00:	8afb      	ldrh	r3, [r7, #22]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d144      	bne.n	8005a90 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	7812      	ldrb	r2, [r2, #0]
 8005a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a2c:	e030      	b.n	8005a90 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d113      	bne.n	8005a64 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	7812      	ldrb	r2, [r2, #0]
 8005a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a62:	e015      	b.n	8005a90 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a64:	f7fd fbf0 	bl	8003248 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d803      	bhi.n	8005a7c <HAL_SPI_Transmit+0x20c>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Transmit+0x212>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a8e:	e029      	b.n	8005ae4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1c9      	bne.n	8005a2e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fbcc 	bl	800623c <SPI_EndRxTxTransaction>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2220      	movs	r2, #32
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e003      	b.n	8005ae4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005aec:	7ffb      	ldrb	r3, [r7, #31]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b088      	sub	sp, #32
 8005afa:	af02      	add	r7, sp, #8
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d002      	beq.n	8005b1c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
 8005b18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b1a:	e0fb      	b.n	8005d14 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b24:	d112      	bne.n	8005b4c <HAL_SPI_Receive+0x56>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10e      	bne.n	8005b4c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2204      	movs	r2, #4
 8005b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 f8ef 	bl	8005d26 <HAL_SPI_TransmitReceive>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	e0e8      	b.n	8005d1e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_SPI_Receive+0x64>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e0e1      	b.n	8005d1e <HAL_SPI_Receive+0x228>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b62:	f7fd fb71 	bl	8003248 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_Receive+0x7e>
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b78:	e0cc      	b.n	8005d14 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc0:	d10f      	bne.n	8005be2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005be0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d007      	beq.n	8005c00 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d16a      	bne.n	8005cde <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c08:	e032      	b.n	8005c70 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d115      	bne.n	8005c44 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f103 020c 	add.w	r2, r3, #12
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	7812      	ldrb	r2, [r2, #0]
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c42:	e015      	b.n	8005c70 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c44:	f7fd fb00 	bl	8003248 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d803      	bhi.n	8005c5c <HAL_SPI_Receive+0x166>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d102      	bne.n	8005c62 <HAL_SPI_Receive+0x16c>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c6e:	e051      	b.n	8005d14 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1c7      	bne.n	8005c0a <HAL_SPI_Receive+0x114>
 8005c7a:	e035      	b.n	8005ce8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d113      	bne.n	8005cb2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	b292      	uxth	r2, r2
 8005c96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	1c9a      	adds	r2, r3, #2
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cb0:	e015      	b.n	8005cde <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cb2:	f7fd fac9 	bl	8003248 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d803      	bhi.n	8005cca <HAL_SPI_Receive+0x1d4>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d102      	bne.n	8005cd0 <HAL_SPI_Receive+0x1da>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005cdc:	e01a      	b.n	8005d14 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1c9      	bne.n	8005c7c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fa53 	bl	8006198 <SPI_EndRxTransaction>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
 8005d0a:	e003      	b.n	8005d14 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b08c      	sub	sp, #48	; 0x30
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d34:	2301      	movs	r3, #1
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_SPI_TransmitReceive+0x26>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e198      	b.n	800607e <HAL_SPI_TransmitReceive+0x358>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d54:	f7fd fa78 	bl	8003248 <HAL_GetTick>
 8005d58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d6a:	887b      	ldrh	r3, [r7, #2]
 8005d6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d00f      	beq.n	8005d96 <HAL_SPI_TransmitReceive+0x70>
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7c:	d107      	bne.n	8005d8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d103      	bne.n	8005d8e <HAL_SPI_TransmitReceive+0x68>
 8005d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d003      	beq.n	8005d96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d94:	e16d      	b.n	8006072 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x82>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x82>
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d103      	bne.n	8005db0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005dae:	e160      	b.n	8006072 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d003      	beq.n	8005dc4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2205      	movs	r2, #5
 8005dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	887a      	ldrh	r2, [r7, #2]
 8005dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	887a      	ldrh	r2, [r7, #2]
 8005dda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	887a      	ldrh	r2, [r7, #2]
 8005de6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	887a      	ldrh	r2, [r7, #2]
 8005dec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d007      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e20:	d17c      	bne.n	8005f1c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SPI_TransmitReceive+0x10a>
 8005e2a:	8b7b      	ldrh	r3, [r7, #26]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d16a      	bne.n	8005f06 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	881a      	ldrh	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	1c9a      	adds	r2, r3, #2
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e54:	e057      	b.n	8005f06 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d11b      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x176>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <HAL_SPI_TransmitReceive+0x176>
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d113      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	1c9a      	adds	r2, r3, #2
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d119      	bne.n	8005ede <HAL_SPI_TransmitReceive+0x1b8>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d014      	beq.n	8005ede <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	b292      	uxth	r2, r2
 8005ec0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec6:	1c9a      	adds	r2, r3, #2
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eda:	2301      	movs	r3, #1
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ede:	f7fd f9b3 	bl	8003248 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d80b      	bhi.n	8005f06 <HAL_SPI_TransmitReceive+0x1e0>
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d007      	beq.n	8005f06 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005f04:	e0b5      	b.n	8006072 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1a2      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x130>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d19d      	bne.n	8005e56 <HAL_SPI_TransmitReceive+0x130>
 8005f1a:	e080      	b.n	800601e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_SPI_TransmitReceive+0x204>
 8005f24:	8b7b      	ldrh	r3, [r7, #26]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d16f      	bne.n	800600a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f50:	e05b      	b.n	800600a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d11c      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x274>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d017      	beq.n	8005f9a <HAL_SPI_TransmitReceive+0x274>
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d114      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	7812      	ldrb	r2, [r2, #0]
 8005f7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d119      	bne.n	8005fdc <HAL_SPI_TransmitReceive+0x2b6>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d014      	beq.n	8005fdc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fdc:	f7fd f934 	bl	8003248 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d803      	bhi.n	8005ff4 <HAL_SPI_TransmitReceive+0x2ce>
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d102      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x2d4>
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d107      	bne.n	800600a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006008:	e033      	b.n	8006072 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d19e      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x22c>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d199      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800601e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f90a 	bl	800623c <SPI_EndRxTxTransaction>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d006      	beq.n	800603c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800603a:	e01a      	b.n	8006072 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006068:	e003      	b.n	8006072 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800607a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800607e:	4618      	mov	r0, r3
 8006080:	3730      	adds	r7, #48	; 0x30
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006098:	f7fd f8d6 	bl	8003248 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a8:	f7fd f8ce 	bl	8003248 <HAL_GetTick>
 80060ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ae:	4b39      	ldr	r3, [pc, #228]	; (8006194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	015b      	lsls	r3, r3, #5
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060be:	e054      	b.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d050      	beq.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c8:	f7fd f8be 	bl	8003248 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d902      	bls.n	80060de <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d13d      	bne.n	800615a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060f6:	d111      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006100:	d004      	beq.n	800610c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d107      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800611a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006124:	d10f      	bne.n	8006146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e017      	b.n	800618a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	3b01      	subs	r3, #1
 8006168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d19b      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000008 	.word	0x20000008

08006198 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ac:	d111      	bne.n	80061d2 <SPI_EndRxTransaction+0x3a>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061b6:	d004      	beq.n	80061c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c0:	d107      	bne.n	80061d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061da:	d117      	bne.n	800620c <SPI_EndRxTransaction+0x74>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e4:	d112      	bne.n	800620c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2101      	movs	r1, #1
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff ff49 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e013      	b.n	8006234 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	2180      	movs	r1, #128	; 0x80
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff ff36 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e000      	b.n	8006234 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	2180      	movs	r1, #128	; 0x80
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff ff18 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d007      	beq.n	800626e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e000      	b.n	8006270 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e041      	b.n	800630e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f839 	bl	8006316 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f000 f9b4 	bl	8006624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d001      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e03a      	b.n	80063b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_TIM_Base_Start_IT+0x98>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x58>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d009      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x58>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x58>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d111      	bne.n	80063a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d010      	beq.n	80063b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	e007      	b.n	80063b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr
 80063c0:	40012c00 	.word	0x40012c00
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800

080063cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d122      	bne.n	8006428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d11b      	bne.n	8006428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0202 	mvn.w	r2, #2
 80063f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8ed 	bl	80065ee <HAL_TIM_IC_CaptureCallback>
 8006414:	e005      	b.n	8006422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f8e0 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f8ef 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b04      	cmp	r3, #4
 8006434:	d122      	bne.n	800647c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b04      	cmp	r3, #4
 8006442:	d11b      	bne.n	800647c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0204 	mvn.w	r2, #4
 800644c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8c3 	bl	80065ee <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f8b6 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8c5 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b08      	cmp	r3, #8
 8006488:	d122      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b08      	cmp	r3, #8
 8006496:	d11b      	bne.n	80064d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0208 	mvn.w	r2, #8
 80064a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2204      	movs	r2, #4
 80064a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f899 	bl	80065ee <HAL_TIM_IC_CaptureCallback>
 80064bc:	e005      	b.n	80064ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f88c 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f89b 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0310 	and.w	r3, r3, #16
 80064da:	2b10      	cmp	r3, #16
 80064dc:	d122      	bne.n	8006524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d11b      	bne.n	8006524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f06f 0210 	mvn.w	r2, #16
 80064f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2208      	movs	r2, #8
 80064fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f86f 	bl	80065ee <HAL_TIM_IC_CaptureCallback>
 8006510:	e005      	b.n	800651e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f862 	bl	80065dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f871 	bl	8006600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b01      	cmp	r3, #1
 8006530:	d10e      	bne.n	8006550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b01      	cmp	r3, #1
 800653e:	d107      	bne.n	8006550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0201 	mvn.w	r2, #1
 8006548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fa fd32 	bl	8000fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655a:	2b80      	cmp	r3, #128	; 0x80
 800655c:	d10e      	bne.n	800657c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006568:	2b80      	cmp	r3, #128	; 0x80
 800656a:	d107      	bne.n	800657c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f8bf 	bl	80066fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d10e      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b40      	cmp	r3, #64	; 0x40
 8006596:	d107      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f835 	bl	8006612 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d10e      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d107      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0220 	mvn.w	r2, #32
 80065cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f88a 	bl	80066e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr

080065ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a29      	ldr	r2, [pc, #164]	; (80066dc <TIM_Base_SetConfig+0xb8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00b      	beq.n	8006654 <TIM_Base_SetConfig+0x30>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d007      	beq.n	8006654 <TIM_Base_SetConfig+0x30>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <TIM_Base_SetConfig+0xbc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_Base_SetConfig+0x30>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a25      	ldr	r2, [pc, #148]	; (80066e4 <TIM_Base_SetConfig+0xc0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d108      	bne.n	8006666 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <TIM_Base_SetConfig+0xb8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00b      	beq.n	8006686 <TIM_Base_SetConfig+0x62>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d007      	beq.n	8006686 <TIM_Base_SetConfig+0x62>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <TIM_Base_SetConfig+0xbc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d003      	beq.n	8006686 <TIM_Base_SetConfig+0x62>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <TIM_Base_SetConfig+0xc0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d108      	bne.n	8006698 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a07      	ldr	r2, [pc, #28]	; (80066dc <TIM_Base_SetConfig+0xb8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d103      	bne.n	80066cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	615a      	str	r2, [r3, #20]
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr
 80066dc:	40012c00 	.word	0x40012c00
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800

080066e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr

080066fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006712:	f3ef 8305 	mrs	r3, IPSR
 8006716:	60bb      	str	r3, [r7, #8]
  return(result);
 8006718:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10f      	bne.n	800673e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671e:	f3ef 8310 	mrs	r3, PRIMASK
 8006722:	607b      	str	r3, [r7, #4]
  return(result);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d109      	bne.n	800673e <osKernelInitialize+0x32>
 800672a:	4b10      	ldr	r3, [pc, #64]	; (800676c <osKernelInitialize+0x60>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d109      	bne.n	8006746 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006732:	f3ef 8311 	mrs	r3, BASEPRI
 8006736:	603b      	str	r3, [r7, #0]
  return(result);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800673e:	f06f 0305 	mvn.w	r3, #5
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e00c      	b.n	8006760 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <osKernelInitialize+0x60>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d105      	bne.n	800675a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <osKernelInitialize+0x60>)
 8006750:	2201      	movs	r2, #1
 8006752:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e002      	b.n	8006760 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800675a:	f04f 33ff 	mov.w	r3, #4294967295
 800675e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006760:	68fb      	ldr	r3, [r7, #12]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr
 800676c:	20000674 	.word	0x20000674

08006770 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006776:	f3ef 8305 	mrs	r3, IPSR
 800677a:	60bb      	str	r3, [r7, #8]
  return(result);
 800677c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006782:	f3ef 8310 	mrs	r3, PRIMASK
 8006786:	607b      	str	r3, [r7, #4]
  return(result);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <osKernelStart+0x32>
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <osKernelStart+0x64>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d109      	bne.n	80067aa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006796:	f3ef 8311 	mrs	r3, BASEPRI
 800679a:	603b      	str	r3, [r7, #0]
  return(result);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80067a2:	f06f 0305 	mvn.w	r3, #5
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e00e      	b.n	80067c8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <osKernelStart+0x64>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d107      	bne.n	80067c2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80067b2:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <osKernelStart+0x64>)
 80067b4:	2202      	movs	r2, #2
 80067b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80067b8:	f002 f952 	bl	8008a60 <vTaskStartScheduler>
      stat = osOK;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	e002      	b.n	80067c8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295
 80067c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80067c8:	68fb      	ldr	r3, [r7, #12]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000674 	.word	0x20000674

080067d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b092      	sub	sp, #72	; 0x48
 80067dc:	af04      	add	r7, sp, #16
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e8:	f3ef 8305 	mrs	r3, IPSR
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f040 8094 	bne.w	800691e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f6:	f3ef 8310 	mrs	r3, PRIMASK
 80067fa:	623b      	str	r3, [r7, #32]
  return(result);
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f040 808d 	bne.w	800691e <osThreadNew+0x146>
 8006804:	4b48      	ldr	r3, [pc, #288]	; (8006928 <osThreadNew+0x150>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d106      	bne.n	800681a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800680c:	f3ef 8311 	mrs	r3, BASEPRI
 8006810:	61fb      	str	r3, [r7, #28]
  return(result);
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f040 8082 	bne.w	800691e <osThreadNew+0x146>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d07e      	beq.n	800691e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006824:	2318      	movs	r3, #24
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006828:	2300      	movs	r3, #0
 800682a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800682c:	f107 031b 	add.w	r3, r7, #27
 8006830:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006832:	f04f 33ff 	mov.w	r3, #4294967295
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d045      	beq.n	80068ca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <osThreadNew+0x74>
        name = attr->name;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <osThreadNew+0x9a>
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	2b38      	cmp	r3, #56	; 0x38
 8006864:	d805      	bhi.n	8006872 <osThreadNew+0x9a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <osThreadNew+0x9e>
        return (NULL);
 8006872:	2300      	movs	r3, #0
 8006874:	e054      	b.n	8006920 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	089b      	lsrs	r3, r3, #2
 8006884:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00e      	beq.n	80068ac <osThreadNew+0xd4>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	2b5b      	cmp	r3, #91	; 0x5b
 8006894:	d90a      	bls.n	80068ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800689a:	2b00      	cmp	r3, #0
 800689c:	d006      	beq.n	80068ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <osThreadNew+0xd4>
        mem = 1;
 80068a6:	2301      	movs	r3, #1
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068aa:	e010      	b.n	80068ce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10c      	bne.n	80068ce <osThreadNew+0xf6>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d108      	bne.n	80068ce <osThreadNew+0xf6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <osThreadNew+0xf6>
          mem = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c8:	e001      	b.n	80068ce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d110      	bne.n	80068f6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068dc:	9202      	str	r2, [sp, #8]
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f001 fe6e 	bl	80085cc <xTaskCreateStatic>
 80068f0:	4603      	mov	r3, r0
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e013      	b.n	800691e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d110      	bne.n	800691e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	b29a      	uxth	r2, r3
 8006900:	f107 0314 	add.w	r3, r7, #20
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f001 feb8 	bl	8008684 <xTaskCreate>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	d001      	beq.n	800691e <osThreadNew+0x146>
          hTask = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800691e:	697b      	ldr	r3, [r7, #20]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3738      	adds	r7, #56	; 0x38
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20000674 	.word	0x20000674

0800692c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006934:	f3ef 8305 	mrs	r3, IPSR
 8006938:	613b      	str	r3, [r7, #16]
  return(result);
 800693a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10f      	bne.n	8006960 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006940:	f3ef 8310 	mrs	r3, PRIMASK
 8006944:	60fb      	str	r3, [r7, #12]
  return(result);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d109      	bne.n	8006960 <osDelay+0x34>
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <osDelay+0x58>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d109      	bne.n	8006968 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006954:	f3ef 8311 	mrs	r3, BASEPRI
 8006958:	60bb      	str	r3, [r7, #8]
  return(result);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <osDelay+0x3c>
    stat = osErrorISR;
 8006960:	f06f 0305 	mvn.w	r3, #5
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e007      	b.n	8006978 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006968:	2300      	movs	r3, #0
 800696a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f002 f840 	bl	80089f8 <vTaskDelay>
    }
  }

  return (stat);
 8006978:	697b      	ldr	r3, [r7, #20]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000674 	.word	0x20000674

08006988 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006994:	f3ef 8305 	mrs	r3, IPSR
 8006998:	617b      	str	r3, [r7, #20]
  return(result);
 800699a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800699c:	2b00      	cmp	r3, #0
 800699e:	d13d      	bne.n	8006a1c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8310 	mrs	r3, PRIMASK
 80069a4:	613b      	str	r3, [r7, #16]
  return(result);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d137      	bne.n	8006a1c <osEventFlagsNew+0x94>
 80069ac:	4b1e      	ldr	r3, [pc, #120]	; (8006a28 <osEventFlagsNew+0xa0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d105      	bne.n	80069c0 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069b4:	f3ef 8311 	mrs	r3, BASEPRI
 80069b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d12d      	bne.n	8006a1c <osEventFlagsNew+0x94>
    mem = -1;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d015      	beq.n	80069f8 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <osEventFlagsNew+0x5a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b1f      	cmp	r3, #31
 80069da:	d902      	bls.n	80069e2 <osEventFlagsNew+0x5a>
        mem = 1;
 80069dc:	2301      	movs	r3, #1
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	e00c      	b.n	80069fc <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d108      	bne.n	80069fc <osEventFlagsNew+0x74>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d104      	bne.n	80069fc <osEventFlagsNew+0x74>
          mem = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e001      	b.n	80069fc <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d106      	bne.n	8006a10 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fbc4 	bl	8007194 <xEventGroupCreateStatic>
 8006a0c:	61f8      	str	r0, [r7, #28]
 8006a0e:	e005      	b.n	8006a1c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d102      	bne.n	8006a1c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8006a16:	f000 fbf4 	bl	8007202 <xEventGroupCreate>
 8006a1a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006a1c:	69fb      	ldr	r3, [r7, #28]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3720      	adds	r7, #32
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000674 	.word	0x20000674

08006a2c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d004      	beq.n	8006a4a <osEventFlagsSet+0x1e>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8006a4a:	f06f 0303 	mvn.w	r3, #3
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e03a      	b.n	8006ac8 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a52:	f3ef 8305 	mrs	r3, IPSR
 8006a56:	617b      	str	r3, [r7, #20]
  return(result);
 8006a58:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10f      	bne.n	8006a7e <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a62:	613b      	str	r3, [r7, #16]
  return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <osEventFlagsSet+0x52>
 8006a6a:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <osEventFlagsSet+0xa8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d123      	bne.n	8006aba <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a72:	f3ef 8311 	mrs	r3, BASEPRI
 8006a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01d      	beq.n	8006aba <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	461a      	mov	r2, r3
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	69b8      	ldr	r0, [r7, #24]
 8006a8c:	f000 fd5c 	bl	8007548 <xEventGroupSetBitsFromISR>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8006a96:	f06f 0302 	mvn.w	r3, #2
 8006a9a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006a9c:	e013      	b.n	8006ac6 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <osEventFlagsSet+0x9a>
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <osEventFlagsSet+0xac>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006ab8:	e005      	b.n	8006ac6 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	69b8      	ldr	r0, [r7, #24]
 8006abe:	f000 fc89 	bl	80073d4 <xEventGroupSetBits>
 8006ac2:	61f8      	str	r0, [r7, #28]
 8006ac4:	e000      	b.n	8006ac8 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8006ac6:	bf00      	nop
  }

  return (rflags);
 8006ac8:	69fb      	ldr	r3, [r7, #28]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000674 	.word	0x20000674
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d004      	beq.n	8006afe <osEventFlagsWait+0x22>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8006afe:	f06f 0303 	mvn.w	r3, #3
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
 8006b04:	e059      	b.n	8006bba <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b06:	f3ef 8305 	mrs	r3, IPSR
 8006b0a:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b0c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10f      	bne.n	8006b32 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b12:	f3ef 8310 	mrs	r3, PRIMASK
 8006b16:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <osEventFlagsWait+0x56>
 8006b1e:	4b29      	ldr	r3, [pc, #164]	; (8006bc4 <osEventFlagsWait+0xe8>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d109      	bne.n	8006b3a <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b26:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2a:	617b      	str	r3, [r7, #20]
  return(result);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8006b32:	f06f 0305 	mvn.w	r3, #5
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
 8006b38:	e03f      	b.n	8006bba <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b48:	e001      	b.n	8006b4e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5c:	e001      	b.n	8006b62 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	6a38      	ldr	r0, [r7, #32]
 8006b6e:	f000 fb63 	bl	8007238 <xEventGroupWaitBits>
 8006b72:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00e      	beq.n	8006b9c <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d019      	beq.n	8006bba <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8006b8c:	f06f 0301 	mvn.w	r3, #1
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
 8006b92:	e012      	b.n	8006bba <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006b94:	f06f 0302 	mvn.w	r3, #2
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	e00e      	b.n	8006bba <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d109      	bne.n	8006bba <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8006bac:	f06f 0301 	mvn.w	r3, #1
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb2:	e002      	b.n	8006bba <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006bb4:	f06f 0302 	mvn.w	r3, #2
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3730      	adds	r7, #48	; 0x30
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20000674 	.word	0x20000674

08006bc8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08a      	sub	sp, #40	; 0x28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bd4:	f3ef 8305 	mrs	r3, IPSR
 8006bd8:	613b      	str	r3, [r7, #16]
  return(result);
 8006bda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 8085 	bne.w	8006cec <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be2:	f3ef 8310 	mrs	r3, PRIMASK
 8006be6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d17e      	bne.n	8006cec <osMutexNew+0x124>
 8006bee:	4b42      	ldr	r3, [pc, #264]	; (8006cf8 <osMutexNew+0x130>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d105      	bne.n	8006c02 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d174      	bne.n	8006cec <osMutexNew+0x124>
    if (attr != NULL) {
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	623b      	str	r3, [r7, #32]
 8006c0e:	e001      	b.n	8006c14 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <osMutexNew+0x5c>
      rmtx = 1U;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	e001      	b.n	8006c28 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d15c      	bne.n	8006cec <osMutexNew+0x124>
      mem = -1;
 8006c32:	f04f 33ff 	mov.w	r3, #4294967295
 8006c36:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d015      	beq.n	8006c6a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d006      	beq.n	8006c54 <osMutexNew+0x8c>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b4f      	cmp	r3, #79	; 0x4f
 8006c4c:	d902      	bls.n	8006c54 <osMutexNew+0x8c>
          mem = 1;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	e00c      	b.n	8006c6e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d108      	bne.n	8006c6e <osMutexNew+0xa6>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <osMutexNew+0xa6>
            mem = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e001      	b.n	8006c6e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d112      	bne.n	8006c9a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	4619      	mov	r1, r3
 8006c80:	2004      	movs	r0, #4
 8006c82:	f000 fe97 	bl	80079b4 <xQueueCreateMutexStatic>
 8006c86:	6278      	str	r0, [r7, #36]	; 0x24
 8006c88:	e016      	b.n	8006cb8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	2001      	movs	r0, #1
 8006c92:	f000 fe8f 	bl	80079b4 <xQueueCreateMutexStatic>
 8006c96:	6278      	str	r0, [r7, #36]	; 0x24
 8006c98:	e00e      	b.n	8006cb8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10b      	bne.n	8006cb8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d004      	beq.n	8006cb0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006ca6:	2004      	movs	r0, #4
 8006ca8:	f000 fe6c 	bl	8007984 <xQueueCreateMutex>
 8006cac:	6278      	str	r0, [r7, #36]	; 0x24
 8006cae:	e003      	b.n	8006cb8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	f000 fe67 	bl	8007984 <xQueueCreateMutex>
 8006cb6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00c      	beq.n	8006cd8 <osMutexNew+0x110>
        if (attr != NULL) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <osMutexNew+0x104>
          name = attr->name;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	e001      	b.n	8006cd0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006cd0:	6979      	ldr	r1, [r7, #20]
 8006cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cd4:	f001 fc1e 	bl	8008514 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d006      	beq.n	8006cec <osMutexNew+0x124>
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	f043 0301 	orr.w	r3, r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3728      	adds	r7, #40	; 0x28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000674 	.word	0x20000674

08006cfc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d1a:	f3ef 8305 	mrs	r3, IPSR
 8006d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8006d20:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10f      	bne.n	8006d46 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d26:	f3ef 8310 	mrs	r3, PRIMASK
 8006d2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <osMutexAcquire+0x4a>
 8006d32:	4b20      	ldr	r3, [pc, #128]	; (8006db4 <osMutexAcquire+0xb8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d109      	bne.n	8006d4e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006d46:	f06f 0305 	mvn.w	r3, #5
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	e02c      	b.n	8006da8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006d54:	f06f 0303 	mvn.w	r3, #3
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	e025      	b.n	8006da8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d011      	beq.n	8006d86 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	69b8      	ldr	r0, [r7, #24]
 8006d66:	f000 fe74 	bl	8007a52 <xQueueTakeMutexRecursive>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d01b      	beq.n	8006da8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006d76:	f06f 0301 	mvn.w	r3, #1
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e014      	b.n	8006da8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006d7e:	f06f 0302 	mvn.w	r3, #2
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e010      	b.n	8006da8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	69b8      	ldr	r0, [r7, #24]
 8006d8a:	f001 f90f 	bl	8007fac <xQueueSemaphoreTake>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d009      	beq.n	8006da8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006d9a:	f06f 0301 	mvn.w	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e002      	b.n	8006da8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006da2:	f06f 0302 	mvn.w	r3, #2
 8006da6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006da8:	69fb      	ldr	r3, [r7, #28]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000674 	.word	0x20000674

08006db8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f023 0301 	bic.w	r3, r3, #1
 8006dc6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd4:	f3ef 8305 	mrs	r3, IPSR
 8006dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8006dda:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10f      	bne.n	8006e00 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de0:	f3ef 8310 	mrs	r3, PRIMASK
 8006de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <osMutexRelease+0x48>
 8006dec:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <osMutexRelease+0x9c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d109      	bne.n	8006e08 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006df4:	f3ef 8311 	mrs	r3, BASEPRI
 8006df8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d003      	beq.n	8006e08 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006e00:	f06f 0305 	mvn.w	r3, #5
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	e01f      	b.n	8006e48 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006e0e:	f06f 0303 	mvn.w	r3, #3
 8006e12:	61fb      	str	r3, [r7, #28]
 8006e14:	e018      	b.n	8006e48 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006e1c:	69b8      	ldr	r0, [r7, #24]
 8006e1e:	f000 fde4 	bl	80079ea <xQueueGiveMutexRecursive>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d00f      	beq.n	8006e48 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006e28:	f06f 0302 	mvn.w	r3, #2
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	e00b      	b.n	8006e48 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006e30:	2300      	movs	r3, #0
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	69b8      	ldr	r0, [r7, #24]
 8006e38:	f000 fe42 	bl	8007ac0 <xQueueGenericSend>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d002      	beq.n	8006e48 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006e42:	f06f 0302 	mvn.w	r3, #2
 8006e46:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006e48:	69fb      	ldr	r3, [r7, #28]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000674 	.word	0x20000674

08006e58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08c      	sub	sp, #48	; 0x30
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e68:	f3ef 8305 	mrs	r3, IPSR
 8006e6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d16f      	bne.n	8006f54 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e74:	f3ef 8310 	mrs	r3, PRIMASK
 8006e78:	617b      	str	r3, [r7, #20]
  return(result);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d169      	bne.n	8006f54 <osMessageQueueNew+0xfc>
 8006e80:	4b37      	ldr	r3, [pc, #220]	; (8006f60 <osMessageQueueNew+0x108>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d105      	bne.n	8006e94 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e88:	f3ef 8311 	mrs	r3, BASEPRI
 8006e8c:	613b      	str	r3, [r7, #16]
  return(result);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d15f      	bne.n	8006f54 <osMessageQueueNew+0xfc>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d05c      	beq.n	8006f54 <osMessageQueueNew+0xfc>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d059      	beq.n	8006f54 <osMessageQueueNew+0xfc>
    mem = -1;
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d029      	beq.n	8006f00 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d012      	beq.n	8006eda <osMessageQueueNew+0x82>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b4f      	cmp	r3, #79	; 0x4f
 8006eba:	d90e      	bls.n	8006eda <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	695a      	ldr	r2, [r3, #20]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d302      	bcc.n	8006eda <osMessageQueueNew+0x82>
        mem = 1;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	623b      	str	r3, [r7, #32]
 8006ed8:	e014      	b.n	8006f04 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d110      	bne.n	8006f04 <osMessageQueueNew+0xac>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10c      	bne.n	8006f04 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d108      	bne.n	8006f04 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <osMessageQueueNew+0xac>
          mem = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	623b      	str	r3, [r7, #32]
 8006efe:	e001      	b.n	8006f04 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d10b      	bne.n	8006f22 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2100      	movs	r1, #0
 8006f14:	9100      	str	r1, [sp, #0]
 8006f16:	68b9      	ldr	r1, [r7, #8]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fc41 	bl	80077a0 <xQueueGenericCreateStatic>
 8006f1e:	6278      	str	r0, [r7, #36]	; 0x24
 8006f20:	e008      	b.n	8006f34 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d105      	bne.n	8006f34 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006f28:	2200      	movs	r2, #0
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fcae 	bl	800788e <xQueueGenericCreate>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00c      	beq.n	8006f54 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e001      	b.n	8006f4c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006f4c:	69f9      	ldr	r1, [r7, #28]
 8006f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f50:	f001 fae0 	bl	8008514 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3728      	adds	r7, #40	; 0x28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000674 	.word	0x20000674

08006f64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	4613      	mov	r3, r2
 8006f72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f7c:	f3ef 8305 	mrs	r3, IPSR
 8006f80:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f82:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10f      	bne.n	8006fa8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f88:	f3ef 8310 	mrs	r3, PRIMASK
 8006f8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d109      	bne.n	8006fa8 <osMessageQueuePut+0x44>
 8006f94:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <osMessageQueuePut+0xe0>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d12e      	bne.n	8006ffa <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d028      	beq.n	8006ffa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <osMessageQueuePut+0x56>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <osMessageQueuePut+0x56>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006fba:	f06f 0303 	mvn.w	r3, #3
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fc0:	e039      	b.n	8007036 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006fc6:	f107 0210 	add.w	r2, r7, #16
 8006fca:	2300      	movs	r3, #0
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	6a38      	ldr	r0, [r7, #32]
 8006fd0:	f000 fe74 	bl	8007cbc <xQueueGenericSendFromISR>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d003      	beq.n	8006fe2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006fda:	f06f 0302 	mvn.w	r3, #2
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fe0:	e029      	b.n	8007036 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d026      	beq.n	8007036 <osMessageQueuePut+0xd2>
 8006fe8:	4b17      	ldr	r3, [pc, #92]	; (8007048 <osMessageQueuePut+0xe4>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ff8:	e01d      	b.n	8007036 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <osMessageQueuePut+0xa2>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d103      	bne.n	800700e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007006:	f06f 0303 	mvn.w	r3, #3
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
 800700c:	e014      	b.n	8007038 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800700e:	2300      	movs	r3, #0
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	6a38      	ldr	r0, [r7, #32]
 8007016:	f000 fd53 	bl	8007ac0 <xQueueGenericSend>
 800701a:	4603      	mov	r3, r0
 800701c:	2b01      	cmp	r3, #1
 800701e:	d00b      	beq.n	8007038 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007026:	f06f 0301 	mvn.w	r3, #1
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
 800702c:	e004      	b.n	8007038 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800702e:	f06f 0302 	mvn.w	r3, #2
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
 8007034:	e000      	b.n	8007038 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007036:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800703a:	4618      	mov	r0, r3
 800703c:	3728      	adds	r7, #40	; 0x28
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000674 	.word	0x20000674
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800705e:	2300      	movs	r3, #0
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007062:	f3ef 8305 	mrs	r3, IPSR
 8007066:	61fb      	str	r3, [r7, #28]
  return(result);
 8007068:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10f      	bne.n	800708e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706e:	f3ef 8310 	mrs	r3, PRIMASK
 8007072:	61bb      	str	r3, [r7, #24]
  return(result);
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <osMessageQueueGet+0x42>
 800707a:	4b2b      	ldr	r3, [pc, #172]	; (8007128 <osMessageQueueGet+0xdc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d12e      	bne.n	80070e0 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007082:	f3ef 8311 	mrs	r3, BASEPRI
 8007086:	617b      	str	r3, [r7, #20]
  return(result);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d028      	beq.n	80070e0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <osMessageQueueGet+0x54>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <osMessageQueueGet+0x54>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80070a0:	f06f 0303 	mvn.w	r3, #3
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80070a6:	e038      	b.n	800711a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	461a      	mov	r2, r3
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	6a38      	ldr	r0, [r7, #32]
 80070b6:	f001 f885 	bl	80081c4 <xQueueReceiveFromISR>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d003      	beq.n	80070c8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80070c0:	f06f 0302 	mvn.w	r3, #2
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80070c6:	e028      	b.n	800711a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d025      	beq.n	800711a <osMessageQueueGet+0xce>
 80070ce:	4b17      	ldr	r3, [pc, #92]	; (800712c <osMessageQueueGet+0xe0>)
 80070d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80070de:	e01c      	b.n	800711a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <osMessageQueueGet+0xa0>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d103      	bne.n	80070f4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80070ec:	f06f 0303 	mvn.w	r3, #3
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
 80070f2:	e013      	b.n	800711c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	6a38      	ldr	r0, [r7, #32]
 80070fa:	f000 fe77 	bl	8007dec <xQueueReceive>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b01      	cmp	r3, #1
 8007102:	d00b      	beq.n	800711c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800710a:	f06f 0301 	mvn.w	r3, #1
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
 8007110:	e004      	b.n	800711c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007112:	f06f 0302 	mvn.w	r3, #2
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
 8007118:	e000      	b.n	800711c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800711a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800711e:	4618      	mov	r0, r3
 8007120:	3728      	adds	r7, #40	; 0x28
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000674 	.word	0x20000674
 800712c:	e000ed04 	.word	0xe000ed04

08007130 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4a06      	ldr	r2, [pc, #24]	; (8007158 <vApplicationGetIdleTaskMemory+0x28>)
 8007140:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	4a05      	ldr	r2, [pc, #20]	; (800715c <vApplicationGetIdleTaskMemory+0x2c>)
 8007146:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2280      	movs	r2, #128	; 0x80
 800714c:	601a      	str	r2, [r3, #0]
}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr
 8007158:	20000678 	.word	0x20000678
 800715c:	200006d4 	.word	0x200006d4

08007160 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a07      	ldr	r2, [pc, #28]	; (800718c <vApplicationGetTimerTaskMemory+0x2c>)
 8007170:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4a06      	ldr	r2, [pc, #24]	; (8007190 <vApplicationGetTimerTaskMemory+0x30>)
 8007176:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800717e:	601a      	str	r2, [r3, #0]
}
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	200008d4 	.word	0x200008d4
 8007190:	20000930 	.word	0x20000930

08007194 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10a      	bne.n	80071b8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071b4:	bf00      	nop
 80071b6:	e7fe      	b.n	80071b6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80071b8:	2320      	movs	r3, #32
 80071ba:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b20      	cmp	r3, #32
 80071c0:	d00a      	beq.n	80071d8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	60fb      	str	r3, [r7, #12]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 f9bf 	bl	8007570 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2201      	movs	r2, #1
 80071f6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80071f8:	697b      	ldr	r3, [r7, #20]
	}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8007208:	2020      	movs	r0, #32
 800720a:	f003 f847 	bl	800a29c <pvPortMalloc>
 800720e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3304      	adds	r3, #4
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f9a5 	bl	8007570 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800722c:	687b      	ldr	r3, [r7, #4]
	}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b090      	sub	sp, #64	; 0x40
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800724e:	2300      	movs	r3, #0
 8007250:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <xEventGroupWaitBits+0x36>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	623b      	str	r3, [r7, #32]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <xEventGroupWaitBits+0x56>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	61fb      	str	r3, [r7, #28]
}
 800728a:	bf00      	nop
 800728c:	e7fe      	b.n	800728c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <xEventGroupWaitBits+0x72>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	61bb      	str	r3, [r7, #24]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072aa:	f002 f8d1 	bl	8009450 <xTaskGetSchedulerState>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <xEventGroupWaitBits+0x82>
 80072b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <xEventGroupWaitBits+0x86>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <xEventGroupWaitBits+0x88>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <xEventGroupWaitBits+0xa2>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	617b      	str	r3, [r7, #20]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80072da:	f001 fc27 	bl	8008b2c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80072de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ea:	f000 f90b 	bl	8007504 <prvTestWaitCondition>
 80072ee:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00e      	beq.n	8007314 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d028      	beq.n	8007356 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	43db      	mvns	r3, r3
 800730c:	401a      	ands	r2, r3
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e020      	b.n	8007356 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007316:	2b00      	cmp	r3, #0
 8007318:	d104      	bne.n	8007324 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800731e:	2301      	movs	r3, #1
 8007320:	633b      	str	r3, [r7, #48]	; 0x30
 8007322:	e018      	b.n	8007356 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007330:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800733e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007342:	1d18      	adds	r0, r3, #4
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	4313      	orrs	r3, r2
 800734a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800734c:	4619      	mov	r1, r3
 800734e:	f001 fde5 	bl	8008f1c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007356:	f001 fbf7 	bl	8008b48 <xTaskResumeAll>
 800735a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800735c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735e:	2b00      	cmp	r3, #0
 8007360:	d031      	beq.n	80073c6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	2b00      	cmp	r3, #0
 8007366:	d107      	bne.n	8007378 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8007368:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <xEventGroupWaitBits+0x198>)
 800736a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007378:	f002 f9ea 	bl	8009750 <uxTaskResetEventItemValue>
 800737c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800737e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d11a      	bne.n	80073be <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8007388:	f002 fe88 	bl	800a09c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800738c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007398:	f000 f8b4 	bl	8007504 <prvTestWaitCondition>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d006      	beq.n	80073b6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80073a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	43db      	mvns	r3, r3
 80073b0:	401a      	ands	r2, r3
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80073ba:	f002 fe9f 	bl	800a0fc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80073be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3740      	adds	r7, #64	; 0x40
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	; 0x38
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80073de:	2300      	movs	r3, #0
 80073e0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10a      	bne.n	8007406 <xEventGroupSetBits+0x32>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	613b      	str	r3, [r7, #16]
}
 8007402:	bf00      	nop
 8007404:	e7fe      	b.n	8007404 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00a      	beq.n	8007426 <xEventGroupSetBits+0x52>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	60fb      	str	r3, [r7, #12]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	3304      	adds	r3, #4
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	3308      	adds	r3, #8
 8007430:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007432:	f001 fb7b 	bl	8008b2c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	431a      	orrs	r2, r3
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007448:	e03c      	b.n	80074c4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800744a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007456:	2300      	movs	r3, #0
 8007458:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007460:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007468:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d108      	bne.n	8007486 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007484:	e008      	b.n	8007498 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	4013      	ands	r3, r2
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	429a      	cmp	r2, r3
 8007492:	d101      	bne.n	8007498 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d010      	beq.n	80074c0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80074a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074b8:	4619      	mov	r1, r3
 80074ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80074bc:	f001 fdfa 	bl	80090b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80074c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d1be      	bne.n	800744a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d2:	43db      	mvns	r3, r3
 80074d4:	401a      	ands	r2, r3
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80074da:	f001 fb35 	bl	8008b48 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	681b      	ldr	r3, [r3, #0]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3738      	adds	r7, #56	; 0x38
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7ff ff6c 	bl	80073d4 <xEventGroupSetBits>
}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007510:	2300      	movs	r3, #0
 8007512:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4013      	ands	r3, r2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007524:	2301      	movs	r3, #1
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e007      	b.n	800753a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4013      	ands	r3, r2
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	429a      	cmp	r2, r3
 8007534:	d101      	bne.n	800753a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007536:	2301      	movs	r3, #1
 8007538:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800753a:	697b      	ldr	r3, [r7, #20]
}
 800753c:	4618      	mov	r0, r3
 800753e:	371c      	adds	r7, #28
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr
	...

08007548 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	68f9      	ldr	r1, [r7, #12]
 800755a:	4804      	ldr	r0, [pc, #16]	; (800756c <xEventGroupSetBitsFromISR+0x24>)
 800755c:	f002 fc8a 	bl	8009e74 <xTimerPendFunctionCallFromISR>
 8007560:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007562:	697b      	ldr	r3, [r7, #20]
	}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	080074eb 	.word	0x080074eb

08007570 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f103 0208 	add.w	r2, r3, #8
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f04f 32ff 	mov.w	r2, #4294967295
 8007588:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f103 0208 	add.w	r2, r3, #8
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f103 0208 	add.w	r2, r3, #8
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr

080075ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bc80      	pop	{r7}
 80075c4:	4770      	bx	lr

080075c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075c6:	b480      	push	{r7}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	601a      	str	r2, [r3, #0]
}
 8007602:	bf00      	nop
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	bc80      	pop	{r7}
 800760a:	4770      	bx	lr

0800760c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d103      	bne.n	800762c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	e00c      	b.n	8007646 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3308      	adds	r3, #8
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	e002      	b.n	800763a <vListInsert+0x2e>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	d2f6      	bcs.n	8007634 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	601a      	str	r2, [r3, #0]
}
 8007672:	bf00      	nop
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6892      	ldr	r2, [r2, #8]
 8007692:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6852      	ldr	r2, [r2, #4]
 800769c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d103      	bne.n	80076b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	1e5a      	subs	r2, r3, #1
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr
	...

080076d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10a      	bne.n	80076fa <xQueueGenericReset+0x2a>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	60bb      	str	r3, [r7, #8]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80076fa:	f002 fccf 	bl	800a09c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800770a:	fb01 f303 	mul.w	r3, r1, r3
 800770e:	441a      	add	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772a:	3b01      	subs	r3, #1
 800772c:	68f9      	ldr	r1, [r7, #12]
 800772e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007730:	fb01 f303 	mul.w	r3, r1, r3
 8007734:	441a      	add	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	22ff      	movs	r2, #255	; 0xff
 800773e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	22ff      	movs	r2, #255	; 0xff
 8007746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d114      	bne.n	800777a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01a      	beq.n	800778e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3310      	adds	r3, #16
 800775c:	4618      	mov	r0, r3
 800775e:	f001 fc45 	bl	8008fec <xTaskRemoveFromEventList>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <xQueueGenericReset+0xcc>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	e009      	b.n	800778e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3310      	adds	r3, #16
 800777e:	4618      	mov	r0, r3
 8007780:	f7ff fef6 	bl	8007570 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3324      	adds	r3, #36	; 0x24
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fef1 	bl	8007570 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800778e:	f002 fcb5 	bl	800a0fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007792:	2301      	movs	r3, #1
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	e000ed04 	.word	0xe000ed04

080077a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08e      	sub	sp, #56	; 0x38
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <xQueueGenericCreateStatic+0x52>
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <xQueueGenericCreateStatic+0x56>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <xQueueGenericCreateStatic+0x58>
 80077f6:	2300      	movs	r3, #0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	623b      	str	r3, [r7, #32]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <xQueueGenericCreateStatic+0x7e>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <xQueueGenericCreateStatic+0x82>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <xQueueGenericCreateStatic+0x84>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	61fb      	str	r3, [r7, #28]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800783e:	2350      	movs	r3, #80	; 0x50
 8007840:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b50      	cmp	r3, #80	; 0x50
 8007846:	d00a      	beq.n	800785e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	61bb      	str	r3, [r7, #24]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00d      	beq.n	8007884 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007870:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	4613      	mov	r3, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f843 	bl	800790a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007886:	4618      	mov	r0, r3
 8007888:	3730      	adds	r7, #48	; 0x30
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800788e:	b580      	push	{r7, lr}
 8007890:	b08a      	sub	sp, #40	; 0x28
 8007892:	af02      	add	r7, sp, #8
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	4613      	mov	r3, r2
 800789a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	613b      	str	r3, [r7, #16]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	e004      	b.n	80078ce <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	3350      	adds	r3, #80	; 0x50
 80078d2:	4618      	mov	r0, r3
 80078d4:	f002 fce2 	bl	800a29c <pvPortMalloc>
 80078d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00f      	beq.n	8007900 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	3350      	adds	r3, #80	; 0x50
 80078e4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078ee:	79fa      	ldrb	r2, [r7, #7]
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f805 	bl	800790a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007900:	69bb      	ldr	r3, [r7, #24]
	}
 8007902:	4618      	mov	r0, r3
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d103      	bne.n	8007926 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	e002      	b.n	800792c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007938:	2101      	movs	r1, #1
 800793a:	69b8      	ldr	r0, [r7, #24]
 800793c:	f7ff fec8 	bl	80076d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	78fa      	ldrb	r2, [r7, #3]
 8007944:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007948:	bf00      	nop
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00e      	beq.n	800797c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007970:	2300      	movs	r3, #0
 8007972:	2200      	movs	r2, #0
 8007974:	2100      	movs	r1, #0
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f8a2 	bl	8007ac0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800798e:	2301      	movs	r3, #1
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	461a      	mov	r2, r3
 800799a:	6939      	ldr	r1, [r7, #16]
 800799c:	6978      	ldr	r0, [r7, #20]
 800799e:	f7ff ff76 	bl	800788e <xQueueGenericCreate>
 80079a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff ffd3 	bl	8007950 <prvInitialiseMutex>

		return pxNewQueue;
 80079aa:	68fb      	ldr	r3, [r7, #12]
	}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	4603      	mov	r3, r0
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80079c0:	2301      	movs	r3, #1
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80079c8:	79fb      	ldrb	r3, [r7, #7]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2200      	movs	r2, #0
 80079d0:	6939      	ldr	r1, [r7, #16]
 80079d2:	6978      	ldr	r0, [r7, #20]
 80079d4:	f7ff fee4 	bl	80077a0 <xQueueGenericCreateStatic>
 80079d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7ff ffb8 	bl	8007950 <prvInitialiseMutex>

		return pxNewQueue;
 80079e0:	68fb      	ldr	r3, [r7, #12]
	}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80079ea:	b590      	push	{r4, r7, lr}
 80079ec:	b087      	sub	sp, #28
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	685c      	ldr	r4, [r3, #4]
 8007a16:	f001 fd0d 	bl	8009434 <xTaskGetCurrentTaskHandle>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	429c      	cmp	r4, r3
 8007a1e:	d111      	bne.n	8007a44 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	1e5a      	subs	r2, r3, #1
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007a32:	2300      	movs	r3, #0
 8007a34:	2200      	movs	r2, #0
 8007a36:	2100      	movs	r1, #0
 8007a38:	6938      	ldr	r0, [r7, #16]
 8007a3a:	f000 f841 	bl	8007ac0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
 8007a42:	e001      	b.n	8007a48 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007a48:	697b      	ldr	r3, [r7, #20]
	}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd90      	pop	{r4, r7, pc}

08007a52 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007a52:	b590      	push	{r4, r7, lr}
 8007a54:	b087      	sub	sp, #28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	60fb      	str	r3, [r7, #12]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	685c      	ldr	r4, [r3, #4]
 8007a80:	f001 fcd8 	bl	8009434 <xTaskGetCurrentTaskHandle>
 8007a84:	4603      	mov	r3, r0
 8007a86:	429c      	cmp	r4, r3
 8007a88:	d107      	bne.n	8007a9a <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e00c      	b.n	8007ab4 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6938      	ldr	r0, [r7, #16]
 8007a9e:	f000 fa85 	bl	8007fac <xQueueSemaphoreTake>
 8007aa2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007ab4:	697b      	ldr	r3, [r7, #20]
	}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd90      	pop	{r4, r7, pc}
	...

08007ac0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	; 0x38
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <xQueueGenericSend+0x32>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <xQueueGenericSend+0x40>
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <xQueueGenericSend+0x44>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e000      	b.n	8007b06 <xQueueGenericSend+0x46>
 8007b04:	2300      	movs	r3, #0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10a      	bne.n	8007b20 <xQueueGenericSend+0x60>
	__asm volatile
 8007b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0e:	f383 8811 	msr	BASEPRI, r3
 8007b12:	f3bf 8f6f 	isb	sy
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b1c:	bf00      	nop
 8007b1e:	e7fe      	b.n	8007b1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d103      	bne.n	8007b2e <xQueueGenericSend+0x6e>
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <xQueueGenericSend+0x72>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <xQueueGenericSend+0x74>
 8007b32:	2300      	movs	r3, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xQueueGenericSend+0x8e>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	623b      	str	r3, [r7, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b4e:	f001 fc7f 	bl	8009450 <xTaskGetSchedulerState>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <xQueueGenericSend+0x9e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <xQueueGenericSend+0xa2>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e000      	b.n	8007b64 <xQueueGenericSend+0xa4>
 8007b62:	2300      	movs	r3, #0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <xQueueGenericSend+0xbe>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	61fb      	str	r3, [r7, #28]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b7e:	f002 fa8d 	bl	800a09c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d302      	bcc.n	8007b94 <xQueueGenericSend+0xd4>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d129      	bne.n	8007be8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	68b9      	ldr	r1, [r7, #8]
 8007b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b9a:	f000 fbaa 	bl	80082f2 <prvCopyDataToQueue>
 8007b9e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d010      	beq.n	8007bca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	3324      	adds	r3, #36	; 0x24
 8007bac:	4618      	mov	r0, r3
 8007bae:	f001 fa1d 	bl	8008fec <xTaskRemoveFromEventList>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d013      	beq.n	8007be0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007bb8:	4b3f      	ldr	r3, [pc, #252]	; (8007cb8 <xQueueGenericSend+0x1f8>)
 8007bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	e00a      	b.n	8007be0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d007      	beq.n	8007be0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007bd0:	4b39      	ldr	r3, [pc, #228]	; (8007cb8 <xQueueGenericSend+0x1f8>)
 8007bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007be0:	f002 fa8c 	bl	800a0fc <vPortExitCritical>
				return pdPASS;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e063      	b.n	8007cb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d103      	bne.n	8007bf6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bee:	f002 fa85 	bl	800a0fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e05c      	b.n	8007cb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	4618      	mov	r0, r3
 8007c02:	f001 fab9 	bl	8009178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c06:	2301      	movs	r3, #1
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c0a:	f002 fa77 	bl	800a0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c0e:	f000 ff8d 	bl	8008b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c12:	f002 fa43 	bl	800a09c <vPortEnterCritical>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c1c:	b25b      	sxtb	r3, r3
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d103      	bne.n	8007c2c <xQueueGenericSend+0x16c>
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c32:	b25b      	sxtb	r3, r3
 8007c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c38:	d103      	bne.n	8007c42 <xQueueGenericSend+0x182>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c42:	f002 fa5b 	bl	800a0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c46:	1d3a      	adds	r2, r7, #4
 8007c48:	f107 0314 	add.w	r3, r7, #20
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 faa8 	bl	80091a4 <xTaskCheckForTimeOut>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d124      	bne.n	8007ca4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c5c:	f000 fc41 	bl	80084e2 <prvIsQueueFull>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d018      	beq.n	8007c98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	3310      	adds	r3, #16
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 f930 	bl	8008ed4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c76:	f000 fbcc 	bl	8008412 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c7a:	f000 ff65 	bl	8008b48 <xTaskResumeAll>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f47f af7c 	bne.w	8007b7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007c86:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <xQueueGenericSend+0x1f8>)
 8007c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	e772      	b.n	8007b7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c9a:	f000 fbba 	bl	8008412 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c9e:	f000 ff53 	bl	8008b48 <xTaskResumeAll>
 8007ca2:	e76c      	b.n	8007b7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ca6:	f000 fbb4 	bl	8008412 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007caa:	f000 ff4d 	bl	8008b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007cae:	2300      	movs	r3, #0
		}
	}
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3738      	adds	r7, #56	; 0x38
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08e      	sub	sp, #56	; 0x38
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d103      	bne.n	8007cf8 <xQueueGenericSendFromISR+0x3c>
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <xQueueGenericSendFromISR+0x40>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e000      	b.n	8007cfe <xQueueGenericSendFromISR+0x42>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	623b      	str	r3, [r7, #32]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d103      	bne.n	8007d26 <xQueueGenericSendFromISR+0x6a>
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <xQueueGenericSendFromISR+0x6e>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <xQueueGenericSendFromISR+0x70>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	61fb      	str	r3, [r7, #28]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d46:	f002 fa6b 	bl	800a220 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d4a:	f3ef 8211 	mrs	r2, BASEPRI
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	61ba      	str	r2, [r7, #24]
 8007d60:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d62:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d302      	bcc.n	8007d78 <xQueueGenericSendFromISR+0xbc>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d12c      	bne.n	8007dd2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d88:	f000 fab3 	bl	80082f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d112      	bne.n	8007dbc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d016      	beq.n	8007dcc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	3324      	adds	r3, #36	; 0x24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 f922 	bl	8008fec <xTaskRemoveFromEventList>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00e      	beq.n	8007dcc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	e007      	b.n	8007dcc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	b25a      	sxtb	r2, r3
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007dd0:	e001      	b.n	8007dd6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007de0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3738      	adds	r7, #56	; 0x38
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08c      	sub	sp, #48	; 0x30
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <xQueueReceive+0x30>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	623b      	str	r3, [r7, #32]
}
 8007e18:	bf00      	nop
 8007e1a:	e7fe      	b.n	8007e1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <xQueueReceive+0x3e>
 8007e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <xQueueReceive+0x42>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <xQueueReceive+0x44>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <xQueueReceive+0x5e>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	61fb      	str	r3, [r7, #28]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e4a:	f001 fb01 	bl	8009450 <xTaskGetSchedulerState>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <xQueueReceive+0x6e>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <xQueueReceive+0x72>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e000      	b.n	8007e60 <xQueueReceive+0x74>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <xQueueReceive+0x8e>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	61bb      	str	r3, [r7, #24]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e7a:	f002 f90f 	bl	800a09c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01f      	beq.n	8007eca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e8a:	68b9      	ldr	r1, [r7, #8]
 8007e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e8e:	f000 fa9a 	bl	80083c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	1e5a      	subs	r2, r3, #1
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00f      	beq.n	8007ec2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	3310      	adds	r3, #16
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 f8a0 	bl	8008fec <xTaskRemoveFromEventList>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d007      	beq.n	8007ec2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007eb2:	4b3d      	ldr	r3, [pc, #244]	; (8007fa8 <xQueueReceive+0x1bc>)
 8007eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ec2:	f002 f91b 	bl	800a0fc <vPortExitCritical>
				return pdPASS;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e069      	b.n	8007f9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d103      	bne.n	8007ed8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ed0:	f002 f914 	bl	800a0fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e062      	b.n	8007f9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ede:	f107 0310 	add.w	r3, r7, #16
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 f948 	bl	8009178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eec:	f002 f906 	bl	800a0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ef0:	f000 fe1c 	bl	8008b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ef4:	f002 f8d2 	bl	800a09c <vPortEnterCritical>
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007efe:	b25b      	sxtb	r3, r3
 8007f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f04:	d103      	bne.n	8007f0e <xQueueReceive+0x122>
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f14:	b25b      	sxtb	r3, r3
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d103      	bne.n	8007f24 <xQueueReceive+0x138>
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f24:	f002 f8ea 	bl	800a0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f28:	1d3a      	adds	r2, r7, #4
 8007f2a:	f107 0310 	add.w	r3, r7, #16
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 f937 	bl	80091a4 <xTaskCheckForTimeOut>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d123      	bne.n	8007f84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3e:	f000 faba 	bl	80084b6 <prvIsQueueEmpty>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d017      	beq.n	8007f78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	3324      	adds	r3, #36	; 0x24
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4611      	mov	r1, r2
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 ffbf 	bl	8008ed4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f58:	f000 fa5b 	bl	8008412 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f5c:	f000 fdf4 	bl	8008b48 <xTaskResumeAll>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d189      	bne.n	8007e7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007f66:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <xQueueReceive+0x1bc>)
 8007f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	e780      	b.n	8007e7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f7a:	f000 fa4a 	bl	8008412 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f7e:	f000 fde3 	bl	8008b48 <xTaskResumeAll>
 8007f82:	e77a      	b.n	8007e7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f86:	f000 fa44 	bl	8008412 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f8a:	f000 fddd 	bl	8008b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f90:	f000 fa91 	bl	80084b6 <prvIsQueueEmpty>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f43f af6f 	beq.w	8007e7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3730      	adds	r7, #48	; 0x30
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	e000ed04 	.word	0xe000ed04

08007fac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08e      	sub	sp, #56	; 0x38
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	623b      	str	r3, [r7, #32]
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	61fb      	str	r3, [r7, #28]
}
 8007ff8:	bf00      	nop
 8007ffa:	e7fe      	b.n	8007ffa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ffc:	f001 fa28 	bl	8009450 <xTaskGetSchedulerState>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <xQueueSemaphoreTake+0x60>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <xQueueSemaphoreTake+0x64>
 800800c:	2301      	movs	r3, #1
 800800e:	e000      	b.n	8008012 <xQueueSemaphoreTake+0x66>
 8008010:	2300      	movs	r3, #0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10a      	bne.n	800802c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	61bb      	str	r3, [r7, #24]
}
 8008028:	bf00      	nop
 800802a:	e7fe      	b.n	800802a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800802c:	f002 f836 	bl	800a09c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	2b00      	cmp	r3, #0
 800803a:	d024      	beq.n	8008086 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800804c:	f001 fb98 	bl	8009780 <pvTaskIncrementMutexHeldCount>
 8008050:	4602      	mov	r2, r0
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	3310      	adds	r3, #16
 8008062:	4618      	mov	r0, r3
 8008064:	f000 ffc2 	bl	8008fec <xTaskRemoveFromEventList>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800806e:	4b54      	ldr	r3, [pc, #336]	; (80081c0 <xQueueSemaphoreTake+0x214>)
 8008070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800807e:	f002 f83d 	bl	800a0fc <vPortExitCritical>
				return pdPASS;
 8008082:	2301      	movs	r3, #1
 8008084:	e097      	b.n	80081b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d111      	bne.n	80080b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	617b      	str	r3, [r7, #20]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080a8:	f002 f828 	bl	800a0fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080ac:	2300      	movs	r3, #0
 80080ae:	e082      	b.n	80081b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080b6:	f107 030c 	add.w	r3, r7, #12
 80080ba:	4618      	mov	r0, r3
 80080bc:	f001 f85c 	bl	8009178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080c4:	f002 f81a 	bl	800a0fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080c8:	f000 fd30 	bl	8008b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080cc:	f001 ffe6 	bl	800a09c <vPortEnterCritical>
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080d6:	b25b      	sxtb	r3, r3
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d103      	bne.n	80080e6 <xQueueSemaphoreTake+0x13a>
 80080de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080ec:	b25b      	sxtb	r3, r3
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f2:	d103      	bne.n	80080fc <xQueueSemaphoreTake+0x150>
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080fc:	f001 fffe 	bl	800a0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008100:	463a      	mov	r2, r7
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f001 f84b 	bl	80091a4 <xTaskCheckForTimeOut>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d132      	bne.n	800817a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008116:	f000 f9ce 	bl	80084b6 <prvIsQueueEmpty>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d026      	beq.n	800816e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d109      	bne.n	800813c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008128:	f001 ffb8 	bl	800a09c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	4618      	mov	r0, r3
 8008132:	f001 f9ab 	bl	800948c <xTaskPriorityInherit>
 8008136:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008138:	f001 ffe0 	bl	800a0fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	3324      	adds	r3, #36	; 0x24
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fec5 	bl	8008ed4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800814a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800814c:	f000 f961 	bl	8008412 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008150:	f000 fcfa 	bl	8008b48 <xTaskResumeAll>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	f47f af68 	bne.w	800802c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800815c:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <xQueueSemaphoreTake+0x214>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	e75e      	b.n	800802c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800816e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008170:	f000 f94f 	bl	8008412 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008174:	f000 fce8 	bl	8008b48 <xTaskResumeAll>
 8008178:	e758      	b.n	800802c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800817a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800817c:	f000 f949 	bl	8008412 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008180:	f000 fce2 	bl	8008b48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008186:	f000 f996 	bl	80084b6 <prvIsQueueEmpty>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	f43f af4d 	beq.w	800802c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00d      	beq.n	80081b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008198:	f001 ff80 	bl	800a09c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800819c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800819e:	f000 f891 	bl	80082c4 <prvGetDisinheritPriorityAfterTimeout>
 80081a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80081a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081aa:	4618      	mov	r0, r3
 80081ac:	f001 fa4a 	bl	8009644 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081b0:	f001 ffa4 	bl	800a0fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3738      	adds	r7, #56	; 0x38
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08e      	sub	sp, #56	; 0x38
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10a      	bne.n	80081f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	623b      	str	r3, [r7, #32]
}
 80081ec:	bf00      	nop
 80081ee:	e7fe      	b.n	80081ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <xQueueReceiveFromISR+0x3a>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <xQueueReceiveFromISR+0x3e>
 80081fe:	2301      	movs	r3, #1
 8008200:	e000      	b.n	8008204 <xQueueReceiveFromISR+0x40>
 8008202:	2300      	movs	r3, #0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	61fb      	str	r3, [r7, #28]
}
 800821a:	bf00      	nop
 800821c:	e7fe      	b.n	800821c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800821e:	f001 ffff 	bl	800a220 <vPortValidateInterruptPriority>
	__asm volatile
 8008222:	f3ef 8211 	mrs	r2, BASEPRI
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	61ba      	str	r2, [r7, #24]
 8008238:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800823a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800823c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d02f      	beq.n	80082aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008258:	f000 f8b5 	bl	80083c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800825c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825e:	1e5a      	subs	r2, r3, #1
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826c:	d112      	bne.n	8008294 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d016      	beq.n	80082a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	3310      	adds	r3, #16
 800827a:	4618      	mov	r0, r3
 800827c:	f000 feb6 	bl	8008fec <xTaskRemoveFromEventList>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00e      	beq.n	80082a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	e007      	b.n	80082a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008298:	3301      	adds	r3, #1
 800829a:	b2db      	uxtb	r3, r3
 800829c:	b25a      	sxtb	r2, r3
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80082a4:	2301      	movs	r3, #1
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
 80082a8:	e001      	b.n	80082ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
 80082ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f383 8811 	msr	BASEPRI, r3
}
 80082b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3738      	adds	r7, #56	; 0x38
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d006      	beq.n	80082e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	e001      	b.n	80082e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80082e6:	68fb      	ldr	r3, [r7, #12]
	}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bc80      	pop	{r7}
 80082f0:	4770      	bx	lr

080082f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b086      	sub	sp, #24
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10d      	bne.n	800832c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d14d      	bne.n	80083b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	4618      	mov	r0, r3
 800831e:	f001 f923 	bl	8009568 <xTaskPriorityDisinherit>
 8008322:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	e043      	b.n	80083b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d119      	bne.n	8008366 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6898      	ldr	r0, [r3, #8]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833a:	461a      	mov	r2, r3
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	f002 fa15 	bl	800a76c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	441a      	add	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d32b      	bcc.n	80083b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	609a      	str	r2, [r3, #8]
 8008364:	e026      	b.n	80083b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	68d8      	ldr	r0, [r3, #12]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	461a      	mov	r2, r3
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	f002 f9fb 	bl	800a76c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	425b      	negs	r3, r3
 8008380:	441a      	add	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d207      	bcs.n	80083a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	425b      	negs	r3, r3
 800839c:	441a      	add	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d105      	bne.n	80083b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083bc:	697b      	ldr	r3, [r7, #20]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b082      	sub	sp, #8
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d018      	beq.n	800840a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68da      	ldr	r2, [r3, #12]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e0:	441a      	add	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d303      	bcc.n	80083fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68d9      	ldr	r1, [r3, #12]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	461a      	mov	r2, r3
 8008404:	6838      	ldr	r0, [r7, #0]
 8008406:	f002 f9b1 	bl	800a76c <memcpy>
	}
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800841a:	f001 fe3f 	bl	800a09c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008424:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008426:	e011      	b.n	800844c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	d012      	beq.n	8008456 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3324      	adds	r3, #36	; 0x24
 8008434:	4618      	mov	r0, r3
 8008436:	f000 fdd9 	bl	8008fec <xTaskRemoveFromEventList>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008440:	f000 ff12 	bl	8009268 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	3b01      	subs	r3, #1
 8008448:	b2db      	uxtb	r3, r3
 800844a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800844c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008450:	2b00      	cmp	r3, #0
 8008452:	dce9      	bgt.n	8008428 <prvUnlockQueue+0x16>
 8008454:	e000      	b.n	8008458 <prvUnlockQueue+0x46>
					break;
 8008456:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	22ff      	movs	r2, #255	; 0xff
 800845c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008460:	f001 fe4c 	bl	800a0fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008464:	f001 fe1a 	bl	800a09c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008470:	e011      	b.n	8008496 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d012      	beq.n	80084a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3310      	adds	r3, #16
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fdb4 	bl	8008fec <xTaskRemoveFromEventList>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800848a:	f000 feed 	bl	8009268 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	3b01      	subs	r3, #1
 8008492:	b2db      	uxtb	r3, r3
 8008494:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800849a:	2b00      	cmp	r3, #0
 800849c:	dce9      	bgt.n	8008472 <prvUnlockQueue+0x60>
 800849e:	e000      	b.n	80084a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80084aa:	f001 fe27 	bl	800a0fc <vPortExitCritical>
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084be:	f001 fded 	bl	800a09c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084ca:	2301      	movs	r3, #1
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	e001      	b.n	80084d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084d4:	f001 fe12 	bl	800a0fc <vPortExitCritical>

	return xReturn;
 80084d8:	68fb      	ldr	r3, [r7, #12]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084ea:	f001 fdd7 	bl	800a09c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d102      	bne.n	8008500 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084fa:	2301      	movs	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	e001      	b.n	8008504 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008504:	f001 fdfa 	bl	800a0fc <vPortExitCritical>

	return xReturn;
 8008508:	68fb      	ldr	r3, [r7, #12]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e014      	b.n	800854e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008524:	4a0e      	ldr	r2, [pc, #56]	; (8008560 <vQueueAddToRegistry+0x4c>)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10b      	bne.n	8008548 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008530:	490b      	ldr	r1, [pc, #44]	; (8008560 <vQueueAddToRegistry+0x4c>)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800853a:	4a09      	ldr	r2, [pc, #36]	; (8008560 <vQueueAddToRegistry+0x4c>)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	4413      	add	r3, r2
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008546:	e006      	b.n	8008556 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3301      	adds	r3, #1
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b07      	cmp	r3, #7
 8008552:	d9e7      	bls.n	8008524 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008554:	bf00      	nop
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr
 8008560:	20000d30 	.word	0x20000d30

08008564 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008574:	f001 fd92 	bl	800a09c <vPortEnterCritical>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800857e:	b25b      	sxtb	r3, r3
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d103      	bne.n	800858e <vQueueWaitForMessageRestricted+0x2a>
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008594:	b25b      	sxtb	r3, r3
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d103      	bne.n	80085a4 <vQueueWaitForMessageRestricted+0x40>
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a4:	f001 fdaa 	bl	800a0fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	3324      	adds	r3, #36	; 0x24
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fceb 	bl	8008f94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085be:	6978      	ldr	r0, [r7, #20]
 80085c0:	f7ff ff27 	bl	8008412 <prvUnlockQueue>
	}
 80085c4:	bf00      	nop
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08e      	sub	sp, #56	; 0x38
 80085d0:	af04      	add	r7, sp, #16
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	623b      	str	r3, [r7, #32]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xTaskCreateStatic+0x46>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	61fb      	str	r3, [r7, #28]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008612:	235c      	movs	r3, #92	; 0x5c
 8008614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b5c      	cmp	r3, #92	; 0x5c
 800861a:	d00a      	beq.n	8008632 <xTaskCreateStatic+0x66>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61bb      	str	r3, [r7, #24]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01e      	beq.n	8008676 <xTaskCreateStatic+0xaa>
 8008638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01b      	beq.n	8008676 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008646:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	2202      	movs	r2, #2
 800864c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008650:	2300      	movs	r3, #0
 8008652:	9303      	str	r3, [sp, #12]
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	9302      	str	r3, [sp, #8]
 8008658:	f107 0314 	add.w	r3, r7, #20
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f850 	bl	800870e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800866e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008670:	f000 f8d4 	bl	800881c <prvAddNewTaskToReadyList>
 8008674:	e001      	b.n	800867a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800867a:	697b      	ldr	r3, [r7, #20]
	}
 800867c:	4618      	mov	r0, r3
 800867e:	3728      	adds	r7, #40	; 0x28
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08c      	sub	sp, #48	; 0x30
 8008688:	af04      	add	r7, sp, #16
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	4613      	mov	r3, r2
 8008692:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4618      	mov	r0, r3
 800869a:	f001 fdff 	bl	800a29c <pvPortMalloc>
 800869e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00e      	beq.n	80086c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80086a6:	205c      	movs	r0, #92	; 0x5c
 80086a8:	f001 fdf8 	bl	800a29c <pvPortMalloc>
 80086ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d003      	beq.n	80086bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30
 80086ba:	e005      	b.n	80086c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086bc:	6978      	ldr	r0, [r7, #20]
 80086be:	f001 feb1 	bl	800a424 <vPortFree>
 80086c2:	e001      	b.n	80086c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d017      	beq.n	80086fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086d6:	88fa      	ldrh	r2, [r7, #6]
 80086d8:	2300      	movs	r3, #0
 80086da:	9303      	str	r3, [sp, #12]
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	9302      	str	r3, [sp, #8]
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	68b9      	ldr	r1, [r7, #8]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f80e 	bl	800870e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f2:	69f8      	ldr	r0, [r7, #28]
 80086f4:	f000 f892 	bl	800881c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086f8:	2301      	movs	r3, #1
 80086fa:	61bb      	str	r3, [r7, #24]
 80086fc:	e002      	b.n	8008704 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008702:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008704:	69bb      	ldr	r3, [r7, #24]
	}
 8008706:	4618      	mov	r0, r3
 8008708:	3720      	adds	r7, #32
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b088      	sub	sp, #32
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	607a      	str	r2, [r7, #4]
 800871a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	461a      	mov	r2, r3
 8008726:	21a5      	movs	r1, #165	; 0xa5
 8008728:	f001 ffec 	bl	800a704 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008736:	3b01      	subs	r3, #1
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	f023 0307 	bic.w	r3, r3, #7
 8008744:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00a      	beq.n	8008766 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	617b      	str	r3, [r7, #20]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008766:	2300      	movs	r3, #0
 8008768:	61fb      	str	r3, [r7, #28]
 800876a:	e012      	b.n	8008792 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	7819      	ldrb	r1, [r3, #0]
 8008774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	3334      	adds	r3, #52	; 0x34
 800877c:	460a      	mov	r2, r1
 800877e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4413      	add	r3, r2
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d006      	beq.n	800879a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3301      	adds	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d9e9      	bls.n	800876c <prvInitialiseNewTask+0x5e>
 8008798:	e000      	b.n	800879c <prvInitialiseNewTask+0x8e>
		{
			break;
 800879a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	2b37      	cmp	r3, #55	; 0x37
 80087a8:	d901      	bls.n	80087ae <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087aa:	2337      	movs	r3, #55	; 0x37
 80087ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087b8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	2200      	movs	r2, #0
 80087be:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	3304      	adds	r3, #4
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fef2 	bl	80075ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	3318      	adds	r3, #24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe feed 	bl	80075ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	2200      	movs	r2, #0
 80087ee:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	68f9      	ldr	r1, [r7, #12]
 80087fc:	69b8      	ldr	r0, [r7, #24]
 80087fe:	f001 fb59 	bl	8009eb4 <pxPortInitialiseStack>
 8008802:	4602      	mov	r2, r0
 8008804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008806:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008812:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008814:	bf00      	nop
 8008816:	3720      	adds	r7, #32
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008824:	f001 fc3a 	bl	800a09c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008828:	4b2d      	ldr	r3, [pc, #180]	; (80088e0 <prvAddNewTaskToReadyList+0xc4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3301      	adds	r3, #1
 800882e:	4a2c      	ldr	r2, [pc, #176]	; (80088e0 <prvAddNewTaskToReadyList+0xc4>)
 8008830:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008832:	4b2c      	ldr	r3, [pc, #176]	; (80088e4 <prvAddNewTaskToReadyList+0xc8>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800883a:	4a2a      	ldr	r2, [pc, #168]	; (80088e4 <prvAddNewTaskToReadyList+0xc8>)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008840:	4b27      	ldr	r3, [pc, #156]	; (80088e0 <prvAddNewTaskToReadyList+0xc4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d110      	bne.n	800886a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008848:	f000 fd32 	bl	80092b0 <prvInitialiseTaskLists>
 800884c:	e00d      	b.n	800886a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800884e:	4b26      	ldr	r3, [pc, #152]	; (80088e8 <prvAddNewTaskToReadyList+0xcc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008856:	4b23      	ldr	r3, [pc, #140]	; (80088e4 <prvAddNewTaskToReadyList+0xc8>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	429a      	cmp	r2, r3
 8008862:	d802      	bhi.n	800886a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008864:	4a1f      	ldr	r2, [pc, #124]	; (80088e4 <prvAddNewTaskToReadyList+0xc8>)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800886a:	4b20      	ldr	r3, [pc, #128]	; (80088ec <prvAddNewTaskToReadyList+0xd0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3301      	adds	r3, #1
 8008870:	4a1e      	ldr	r2, [pc, #120]	; (80088ec <prvAddNewTaskToReadyList+0xd0>)
 8008872:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008874:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <prvAddNewTaskToReadyList+0xd0>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008880:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <prvAddNewTaskToReadyList+0xd4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d903      	bls.n	8008890 <prvAddNewTaskToReadyList+0x74>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	4a18      	ldr	r2, [pc, #96]	; (80088f0 <prvAddNewTaskToReadyList+0xd4>)
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4a15      	ldr	r2, [pc, #84]	; (80088f4 <prvAddNewTaskToReadyList+0xd8>)
 800889e:	441a      	add	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f7fe fe8d 	bl	80075c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088ac:	f001 fc26 	bl	800a0fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088b0:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <prvAddNewTaskToReadyList+0xcc>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00e      	beq.n	80088d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <prvAddNewTaskToReadyList+0xc8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d207      	bcs.n	80088d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088c6:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <prvAddNewTaskToReadyList+0xdc>)
 80088c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20001244 	.word	0x20001244
 80088e4:	20000d70 	.word	0x20000d70
 80088e8:	20001250 	.word	0x20001250
 80088ec:	20001260 	.word	0x20001260
 80088f0:	2000124c 	.word	0x2000124c
 80088f4:	20000d74 	.word	0x20000d74
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008906:	2300      	movs	r3, #0
 8008908:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10a      	bne.n	8008926 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	617b      	str	r3, [r7, #20]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10a      	bne.n	8008942 <vTaskDelayUntil+0x46>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	613b      	str	r3, [r7, #16]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008942:	4b2a      	ldr	r3, [pc, #168]	; (80089ec <vTaskDelayUntil+0xf0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <vTaskDelayUntil+0x64>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	60fb      	str	r3, [r7, #12]
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008960:	f000 f8e4 	bl	8008b2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008964:	4b22      	ldr	r3, [pc, #136]	; (80089f0 <vTaskDelayUntil+0xf4>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	4413      	add	r3, r2
 8008972:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6a3a      	ldr	r2, [r7, #32]
 800897a:	429a      	cmp	r2, r3
 800897c:	d20b      	bcs.n	8008996 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	69fa      	ldr	r2, [r7, #28]
 8008984:	429a      	cmp	r2, r3
 8008986:	d211      	bcs.n	80089ac <vTaskDelayUntil+0xb0>
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	429a      	cmp	r2, r3
 800898e:	d90d      	bls.n	80089ac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
 8008994:	e00a      	b.n	80089ac <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	429a      	cmp	r2, r3
 800899e:	d303      	bcc.n	80089a8 <vTaskDelayUntil+0xac>
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d901      	bls.n	80089ac <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d006      	beq.n	80089c6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fef1 	bl	80097a8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80089c6:	f000 f8bf 	bl	8008b48 <xTaskResumeAll>
 80089ca:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d107      	bne.n	80089e2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80089d2:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <vTaskDelayUntil+0xf8>)
 80089d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089e2:	bf00      	nop
 80089e4:	3728      	adds	r7, #40	; 0x28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	2000126c 	.word	0x2000126c
 80089f0:	20001248 	.word	0x20001248
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d017      	beq.n	8008a3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a0a:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <vTaskDelay+0x60>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <vTaskDelay+0x30>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	60bb      	str	r3, [r7, #8]
}
 8008a24:	bf00      	nop
 8008a26:	e7fe      	b.n	8008a26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a28:	f000 f880 	bl	8008b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 feba 	bl	80097a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a34:	f000 f888 	bl	8008b48 <xTaskResumeAll>
 8008a38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d107      	bne.n	8008a50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <vTaskDelay+0x64>)
 8008a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a50:	bf00      	nop
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	2000126c 	.word	0x2000126c
 8008a5c:	e000ed04 	.word	0xe000ed04

08008a60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	; 0x28
 8008a64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a6e:	463a      	mov	r2, r7
 8008a70:	1d39      	adds	r1, r7, #4
 8008a72:	f107 0308 	add.w	r3, r7, #8
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fb5a 	bl	8007130 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	9202      	str	r2, [sp, #8]
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	2300      	movs	r3, #0
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	460a      	mov	r2, r1
 8008a8e:	4921      	ldr	r1, [pc, #132]	; (8008b14 <vTaskStartScheduler+0xb4>)
 8008a90:	4821      	ldr	r0, [pc, #132]	; (8008b18 <vTaskStartScheduler+0xb8>)
 8008a92:	f7ff fd9b 	bl	80085cc <xTaskCreateStatic>
 8008a96:	4603      	mov	r3, r0
 8008a98:	4a20      	ldr	r2, [pc, #128]	; (8008b1c <vTaskStartScheduler+0xbc>)
 8008a9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a9c:	4b1f      	ldr	r3, [pc, #124]	; (8008b1c <vTaskStartScheduler+0xbc>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e001      	b.n	8008aae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d102      	bne.n	8008aba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ab4:	f000 fecc 	bl	8009850 <xTimerCreateTimerTask>
 8008ab8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d116      	bne.n	8008aee <vTaskStartScheduler+0x8e>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	613b      	str	r3, [r7, #16]
}
 8008ad2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ad4:	4b12      	ldr	r3, [pc, #72]	; (8008b20 <vTaskStartScheduler+0xc0>)
 8008ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ada:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008adc:	4b11      	ldr	r3, [pc, #68]	; (8008b24 <vTaskStartScheduler+0xc4>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008ae2:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <vTaskStartScheduler+0xc8>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ae8:	f001 fa66 	bl	8009fb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008aec:	e00e      	b.n	8008b0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af4:	d10a      	bne.n	8008b0c <vTaskStartScheduler+0xac>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	60fb      	str	r3, [r7, #12]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <vTaskStartScheduler+0xaa>
}
 8008b0c:	bf00      	nop
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	0800a83c 	.word	0x0800a83c
 8008b18:	08009281 	.word	0x08009281
 8008b1c:	20001268 	.word	0x20001268
 8008b20:	20001264 	.word	0x20001264
 8008b24:	20001250 	.word	0x20001250
 8008b28:	20001248 	.word	0x20001248

08008b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b30:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <vTaskSuspendAll+0x18>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	4a03      	ldr	r2, [pc, #12]	; (8008b44 <vTaskSuspendAll+0x18>)
 8008b38:	6013      	str	r3, [r2, #0]
}
 8008b3a:	bf00      	nop
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	2000126c 	.word	0x2000126c

08008b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b56:	4b42      	ldr	r3, [pc, #264]	; (8008c60 <xTaskResumeAll+0x118>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	603b      	str	r3, [r7, #0]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b74:	f001 fa92 	bl	800a09c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b78:	4b39      	ldr	r3, [pc, #228]	; (8008c60 <xTaskResumeAll+0x118>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	4a38      	ldr	r2, [pc, #224]	; (8008c60 <xTaskResumeAll+0x118>)
 8008b80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b82:	4b37      	ldr	r3, [pc, #220]	; (8008c60 <xTaskResumeAll+0x118>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d162      	bne.n	8008c50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b8a:	4b36      	ldr	r3, [pc, #216]	; (8008c64 <xTaskResumeAll+0x11c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d05e      	beq.n	8008c50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b92:	e02f      	b.n	8008bf4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008b94:	4b34      	ldr	r3, [pc, #208]	; (8008c68 <xTaskResumeAll+0x120>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3318      	adds	r3, #24
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fd6b 	bl	800767c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fd66 	bl	800767c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb4:	4b2d      	ldr	r3, [pc, #180]	; (8008c6c <xTaskResumeAll+0x124>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d903      	bls.n	8008bc4 <xTaskResumeAll+0x7c>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	4a2a      	ldr	r2, [pc, #168]	; (8008c6c <xTaskResumeAll+0x124>)
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4a27      	ldr	r2, [pc, #156]	; (8008c70 <xTaskResumeAll+0x128>)
 8008bd2:	441a      	add	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f7fe fcf3 	bl	80075c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be4:	4b23      	ldr	r3, [pc, #140]	; (8008c74 <xTaskResumeAll+0x12c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d302      	bcc.n	8008bf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008bee:	4b22      	ldr	r3, [pc, #136]	; (8008c78 <xTaskResumeAll+0x130>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bf4:	4b1c      	ldr	r3, [pc, #112]	; (8008c68 <xTaskResumeAll+0x120>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1cb      	bne.n	8008b94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c02:	f000 fbf3 	bl	80093ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c06:	4b1d      	ldr	r3, [pc, #116]	; (8008c7c <xTaskResumeAll+0x134>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d010      	beq.n	8008c34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c12:	f000 f845 	bl	8008ca0 <xTaskIncrementTick>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008c1c:	4b16      	ldr	r3, [pc, #88]	; (8008c78 <xTaskResumeAll+0x130>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f1      	bne.n	8008c12 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <xTaskResumeAll+0x134>)
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c34:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <xTaskResumeAll+0x130>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c40:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <xTaskResumeAll+0x138>)
 8008c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c50:	f001 fa54 	bl	800a0fc <vPortExitCritical>

	return xAlreadyYielded;
 8008c54:	68bb      	ldr	r3, [r7, #8]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	2000126c 	.word	0x2000126c
 8008c64:	20001244 	.word	0x20001244
 8008c68:	20001204 	.word	0x20001204
 8008c6c:	2000124c 	.word	0x2000124c
 8008c70:	20000d74 	.word	0x20000d74
 8008c74:	20000d70 	.word	0x20000d70
 8008c78:	20001258 	.word	0x20001258
 8008c7c:	20001254 	.word	0x20001254
 8008c80:	e000ed04 	.word	0xe000ed04

08008c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c8a:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <xTaskGetTickCount+0x18>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c90:	687b      	ldr	r3, [r7, #4]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	20001248 	.word	0x20001248

08008ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008caa:	4b51      	ldr	r3, [pc, #324]	; (8008df0 <xTaskIncrementTick+0x150>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f040 808e 	bne.w	8008dd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cb4:	4b4f      	ldr	r3, [pc, #316]	; (8008df4 <xTaskIncrementTick+0x154>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cbc:	4a4d      	ldr	r2, [pc, #308]	; (8008df4 <xTaskIncrementTick+0x154>)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d120      	bne.n	8008d0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cc8:	4b4b      	ldr	r3, [pc, #300]	; (8008df8 <xTaskIncrementTick+0x158>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	603b      	str	r3, [r7, #0]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <xTaskIncrementTick+0x46>
 8008ce8:	4b43      	ldr	r3, [pc, #268]	; (8008df8 <xTaskIncrementTick+0x158>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	4b43      	ldr	r3, [pc, #268]	; (8008dfc <xTaskIncrementTick+0x15c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a41      	ldr	r2, [pc, #260]	; (8008df8 <xTaskIncrementTick+0x158>)
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	4a41      	ldr	r2, [pc, #260]	; (8008dfc <xTaskIncrementTick+0x15c>)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	4b40      	ldr	r3, [pc, #256]	; (8008e00 <xTaskIncrementTick+0x160>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3301      	adds	r3, #1
 8008d02:	4a3f      	ldr	r2, [pc, #252]	; (8008e00 <xTaskIncrementTick+0x160>)
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	f000 fb71 	bl	80093ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d0a:	4b3e      	ldr	r3, [pc, #248]	; (8008e04 <xTaskIncrementTick+0x164>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d34e      	bcc.n	8008db2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d14:	4b38      	ldr	r3, [pc, #224]	; (8008df8 <xTaskIncrementTick+0x158>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <xTaskIncrementTick+0x82>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <xTaskIncrementTick+0x84>
 8008d22:	2300      	movs	r3, #0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d28:	4b36      	ldr	r3, [pc, #216]	; (8008e04 <xTaskIncrementTick+0x164>)
 8008d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2e:	601a      	str	r2, [r3, #0]
					break;
 8008d30:	e03f      	b.n	8008db2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008d32:	4b31      	ldr	r3, [pc, #196]	; (8008df8 <xTaskIncrementTick+0x158>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d203      	bcs.n	8008d52 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d4a:	4a2e      	ldr	r2, [pc, #184]	; (8008e04 <xTaskIncrementTick+0x164>)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6013      	str	r3, [r2, #0]
						break;
 8008d50:	e02f      	b.n	8008db2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	3304      	adds	r3, #4
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fc90 	bl	800767c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	3318      	adds	r3, #24
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe fc87 	bl	800767c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	4b25      	ldr	r3, [pc, #148]	; (8008e08 <xTaskIncrementTick+0x168>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d903      	bls.n	8008d82 <xTaskIncrementTick+0xe2>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a22      	ldr	r2, [pc, #136]	; (8008e08 <xTaskIncrementTick+0x168>)
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4a1f      	ldr	r2, [pc, #124]	; (8008e0c <xTaskIncrementTick+0x16c>)
 8008d90:	441a      	add	r2, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4619      	mov	r1, r3
 8008d98:	4610      	mov	r0, r2
 8008d9a:	f7fe fc14 	bl	80075c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da2:	4b1b      	ldr	r3, [pc, #108]	; (8008e10 <xTaskIncrementTick+0x170>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d3b3      	bcc.n	8008d14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008db0:	e7b0      	b.n	8008d14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008db2:	4b17      	ldr	r3, [pc, #92]	; (8008e10 <xTaskIncrementTick+0x170>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db8:	4914      	ldr	r1, [pc, #80]	; (8008e0c <xTaskIncrementTick+0x16c>)
 8008dba:	4613      	mov	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	440b      	add	r3, r1
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d907      	bls.n	8008dda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	e004      	b.n	8008dda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008dd0:	4b10      	ldr	r3, [pc, #64]	; (8008e14 <xTaskIncrementTick+0x174>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	4a0f      	ldr	r2, [pc, #60]	; (8008e14 <xTaskIncrementTick+0x174>)
 8008dd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008dda:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <xTaskIncrementTick+0x178>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008de2:	2301      	movs	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008de6:	697b      	ldr	r3, [r7, #20]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	2000126c 	.word	0x2000126c
 8008df4:	20001248 	.word	0x20001248
 8008df8:	200011fc 	.word	0x200011fc
 8008dfc:	20001200 	.word	0x20001200
 8008e00:	2000125c 	.word	0x2000125c
 8008e04:	20001264 	.word	0x20001264
 8008e08:	2000124c 	.word	0x2000124c
 8008e0c:	20000d74 	.word	0x20000d74
 8008e10:	20000d70 	.word	0x20000d70
 8008e14:	20001254 	.word	0x20001254
 8008e18:	20001258 	.word	0x20001258

08008e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e22:	4b27      	ldr	r3, [pc, #156]	; (8008ec0 <vTaskSwitchContext+0xa4>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e2a:	4b26      	ldr	r3, [pc, #152]	; (8008ec4 <vTaskSwitchContext+0xa8>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e30:	e041      	b.n	8008eb6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008e32:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <vTaskSwitchContext+0xa8>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e38:	4b23      	ldr	r3, [pc, #140]	; (8008ec8 <vTaskSwitchContext+0xac>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	60fb      	str	r3, [r7, #12]
 8008e3e:	e010      	b.n	8008e62 <vTaskSwitchContext+0x46>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <vTaskSwitchContext+0x40>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	607b      	str	r3, [r7, #4]
}
 8008e58:	bf00      	nop
 8008e5a:	e7fe      	b.n	8008e5a <vTaskSwitchContext+0x3e>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	491a      	ldr	r1, [pc, #104]	; (8008ecc <vTaskSwitchContext+0xb0>)
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0e4      	beq.n	8008e40 <vTaskSwitchContext+0x24>
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4a12      	ldr	r2, [pc, #72]	; (8008ecc <vTaskSwitchContext+0xb0>)
 8008e82:	4413      	add	r3, r2
 8008e84:	60bb      	str	r3, [r7, #8]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	605a      	str	r2, [r3, #4]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	3308      	adds	r3, #8
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d104      	bne.n	8008ea6 <vTaskSwitchContext+0x8a>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	605a      	str	r2, [r3, #4]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	4a08      	ldr	r2, [pc, #32]	; (8008ed0 <vTaskSwitchContext+0xb4>)
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	4a05      	ldr	r2, [pc, #20]	; (8008ec8 <vTaskSwitchContext+0xac>)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6013      	str	r3, [r2, #0]
}
 8008eb6:	bf00      	nop
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bc80      	pop	{r7}
 8008ebe:	4770      	bx	lr
 8008ec0:	2000126c 	.word	0x2000126c
 8008ec4:	20001258 	.word	0x20001258
 8008ec8:	2000124c 	.word	0x2000124c
 8008ecc:	20000d74 	.word	0x20000d74
 8008ed0:	20000d70 	.word	0x20000d70

08008ed4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10a      	bne.n	8008efa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	60fb      	str	r3, [r7, #12]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008efa:	4b07      	ldr	r3, [pc, #28]	; (8008f18 <vTaskPlaceOnEventList+0x44>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3318      	adds	r3, #24
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7fe fb82 	bl	800760c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f08:	2101      	movs	r1, #1
 8008f0a:	6838      	ldr	r0, [r7, #0]
 8008f0c:	f000 fc4c 	bl	80097a8 <prvAddCurrentTaskToDelayedList>
}
 8008f10:	bf00      	nop
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20000d70 	.word	0x20000d70

08008f1c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	617b      	str	r3, [r7, #20]
}
 8008f40:	bf00      	nop
 8008f42:	e7fe      	b.n	8008f42 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008f44:	4b11      	ldr	r3, [pc, #68]	; (8008f8c <vTaskPlaceOnUnorderedEventList+0x70>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10a      	bne.n	8008f62 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	613b      	str	r3, [r7, #16]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008f62:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008f6c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f6e:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3318      	adds	r3, #24
 8008f74:	4619      	mov	r1, r3
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7fe fb25 	bl	80075c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fc12 	bl	80097a8 <prvAddCurrentTaskToDelayedList>
}
 8008f84:	bf00      	nop
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	2000126c 	.word	0x2000126c
 8008f90:	20000d70 	.word	0x20000d70

08008f94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	617b      	str	r3, [r7, #20]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fbc:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3318      	adds	r3, #24
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7fe fafe 	bl	80075c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fd6:	6879      	ldr	r1, [r7, #4]
 8008fd8:	68b8      	ldr	r0, [r7, #8]
 8008fda:	f000 fbe5 	bl	80097a8 <prvAddCurrentTaskToDelayedList>
	}
 8008fde:	bf00      	nop
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000d70 	.word	0x20000d70

08008fec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	60fb      	str	r3, [r7, #12]
}
 8009014:	bf00      	nop
 8009016:	e7fe      	b.n	8009016 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	3318      	adds	r3, #24
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe fb2d 	bl	800767c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009022:	4b1e      	ldr	r3, [pc, #120]	; (800909c <xTaskRemoveFromEventList+0xb0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d11d      	bne.n	8009066 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	3304      	adds	r3, #4
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fb24 	bl	800767c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009038:	4b19      	ldr	r3, [pc, #100]	; (80090a0 <xTaskRemoveFromEventList+0xb4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d903      	bls.n	8009048 <xTaskRemoveFromEventList+0x5c>
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009044:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <xTaskRemoveFromEventList+0xb4>)
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4a13      	ldr	r2, [pc, #76]	; (80090a4 <xTaskRemoveFromEventList+0xb8>)
 8009056:	441a      	add	r2, r3
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	3304      	adds	r3, #4
 800905c:	4619      	mov	r1, r3
 800905e:	4610      	mov	r0, r2
 8009060:	f7fe fab1 	bl	80075c6 <vListInsertEnd>
 8009064:	e005      	b.n	8009072 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	3318      	adds	r3, #24
 800906a:	4619      	mov	r1, r3
 800906c:	480e      	ldr	r0, [pc, #56]	; (80090a8 <xTaskRemoveFromEventList+0xbc>)
 800906e:	f7fe faaa 	bl	80075c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009076:	4b0d      	ldr	r3, [pc, #52]	; (80090ac <xTaskRemoveFromEventList+0xc0>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	429a      	cmp	r2, r3
 800907e:	d905      	bls.n	800908c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009080:	2301      	movs	r3, #1
 8009082:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009084:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <xTaskRemoveFromEventList+0xc4>)
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	e001      	b.n	8009090 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009090:	697b      	ldr	r3, [r7, #20]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	2000126c 	.word	0x2000126c
 80090a0:	2000124c 	.word	0x2000124c
 80090a4:	20000d74 	.word	0x20000d74
 80090a8:	20001204 	.word	0x20001204
 80090ac:	20000d70 	.word	0x20000d70
 80090b0:	20001258 	.word	0x20001258

080090b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80090be:	4b29      	ldr	r3, [pc, #164]	; (8009164 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	613b      	str	r3, [r7, #16]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	60fb      	str	r3, [r7, #12]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7fe fab7 	bl	800767c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	3304      	adds	r3, #4
 8009112:	4618      	mov	r0, r3
 8009114:	f7fe fab2 	bl	800767c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4b12      	ldr	r3, [pc, #72]	; (8009168 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d903      	bls.n	800912c <vTaskRemoveFromUnorderedEventList+0x78>
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	4a0f      	ldr	r2, [pc, #60]	; (8009168 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a0c      	ldr	r2, [pc, #48]	; (800916c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800913a:	441a      	add	r2, r3
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	3304      	adds	r3, #4
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe fa3f 	bl	80075c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4b08      	ldr	r3, [pc, #32]	; (8009170 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009152:	429a      	cmp	r2, r3
 8009154:	d902      	bls.n	800915c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009156:	4b07      	ldr	r3, [pc, #28]	; (8009174 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009158:	2201      	movs	r2, #1
 800915a:	601a      	str	r2, [r3, #0]
	}
}
 800915c:	bf00      	nop
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	2000126c 	.word	0x2000126c
 8009168:	2000124c 	.word	0x2000124c
 800916c:	20000d74 	.word	0x20000d74
 8009170:	20000d70 	.word	0x20000d70
 8009174:	20001258 	.word	0x20001258

08009178 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <vTaskInternalSetTimeOutState+0x24>)
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009188:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <vTaskInternalSetTimeOutState+0x28>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	605a      	str	r2, [r3, #4]
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	bc80      	pop	{r7}
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	2000125c 	.word	0x2000125c
 80091a0:	20001248 	.word	0x20001248

080091a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	f383 8811 	msr	BASEPRI, r3
 80091bc:	f3bf 8f6f 	isb	sy
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	613b      	str	r3, [r7, #16]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	60fb      	str	r3, [r7, #12]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80091e6:	f000 ff59 	bl	800a09c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80091ea:	4b1d      	ldr	r3, [pc, #116]	; (8009260 <xTaskCheckForTimeOut+0xbc>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009202:	d102      	bne.n	800920a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	e023      	b.n	8009252 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b15      	ldr	r3, [pc, #84]	; (8009264 <xTaskCheckForTimeOut+0xc0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	429a      	cmp	r2, r3
 8009214:	d007      	beq.n	8009226 <xTaskCheckForTimeOut+0x82>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	429a      	cmp	r2, r3
 800921e:	d302      	bcc.n	8009226 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e015      	b.n	8009252 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	429a      	cmp	r2, r3
 800922e:	d20b      	bcs.n	8009248 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	1ad2      	subs	r2, r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff ff9b 	bl	8009178 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009242:	2300      	movs	r3, #0
 8009244:	61fb      	str	r3, [r7, #28]
 8009246:	e004      	b.n	8009252 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800924e:	2301      	movs	r3, #1
 8009250:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009252:	f000 ff53 	bl	800a0fc <vPortExitCritical>

	return xReturn;
 8009256:	69fb      	ldr	r3, [r7, #28]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20001248 	.word	0x20001248
 8009264:	2000125c 	.word	0x2000125c

08009268 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009268:	b480      	push	{r7}
 800926a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800926c:	4b03      	ldr	r3, [pc, #12]	; (800927c <vTaskMissedYield+0x14>)
 800926e:	2201      	movs	r2, #1
 8009270:	601a      	str	r2, [r3, #0]
}
 8009272:	bf00      	nop
 8009274:	46bd      	mov	sp, r7
 8009276:	bc80      	pop	{r7}
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	20001258 	.word	0x20001258

08009280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009288:	f000 f852 	bl	8009330 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800928c:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <prvIdleTask+0x28>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d9f9      	bls.n	8009288 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009294:	4b05      	ldr	r3, [pc, #20]	; (80092ac <prvIdleTask+0x2c>)
 8009296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092a4:	e7f0      	b.n	8009288 <prvIdleTask+0x8>
 80092a6:	bf00      	nop
 80092a8:	20000d74 	.word	0x20000d74
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092b6:	2300      	movs	r3, #0
 80092b8:	607b      	str	r3, [r7, #4]
 80092ba:	e00c      	b.n	80092d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4a12      	ldr	r2, [pc, #72]	; (8009310 <prvInitialiseTaskLists+0x60>)
 80092c8:	4413      	add	r3, r2
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe f950 	bl	8007570 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3301      	adds	r3, #1
 80092d4:	607b      	str	r3, [r7, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b37      	cmp	r3, #55	; 0x37
 80092da:	d9ef      	bls.n	80092bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092dc:	480d      	ldr	r0, [pc, #52]	; (8009314 <prvInitialiseTaskLists+0x64>)
 80092de:	f7fe f947 	bl	8007570 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80092e2:	480d      	ldr	r0, [pc, #52]	; (8009318 <prvInitialiseTaskLists+0x68>)
 80092e4:	f7fe f944 	bl	8007570 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80092e8:	480c      	ldr	r0, [pc, #48]	; (800931c <prvInitialiseTaskLists+0x6c>)
 80092ea:	f7fe f941 	bl	8007570 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80092ee:	480c      	ldr	r0, [pc, #48]	; (8009320 <prvInitialiseTaskLists+0x70>)
 80092f0:	f7fe f93e 	bl	8007570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80092f4:	480b      	ldr	r0, [pc, #44]	; (8009324 <prvInitialiseTaskLists+0x74>)
 80092f6:	f7fe f93b 	bl	8007570 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80092fa:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <prvInitialiseTaskLists+0x78>)
 80092fc:	4a05      	ldr	r2, [pc, #20]	; (8009314 <prvInitialiseTaskLists+0x64>)
 80092fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <prvInitialiseTaskLists+0x7c>)
 8009302:	4a05      	ldr	r2, [pc, #20]	; (8009318 <prvInitialiseTaskLists+0x68>)
 8009304:	601a      	str	r2, [r3, #0]
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	20000d74 	.word	0x20000d74
 8009314:	200011d4 	.word	0x200011d4
 8009318:	200011e8 	.word	0x200011e8
 800931c:	20001204 	.word	0x20001204
 8009320:	20001218 	.word	0x20001218
 8009324:	20001230 	.word	0x20001230
 8009328:	200011fc 	.word	0x200011fc
 800932c:	20001200 	.word	0x20001200

08009330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009336:	e019      	b.n	800936c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009338:	f000 feb0 	bl	800a09c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800933c:	4b10      	ldr	r3, [pc, #64]	; (8009380 <prvCheckTasksWaitingTermination+0x50>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3304      	adds	r3, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe f997 	bl	800767c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800934e:	4b0d      	ldr	r3, [pc, #52]	; (8009384 <prvCheckTasksWaitingTermination+0x54>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3b01      	subs	r3, #1
 8009354:	4a0b      	ldr	r2, [pc, #44]	; (8009384 <prvCheckTasksWaitingTermination+0x54>)
 8009356:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009358:	4b0b      	ldr	r3, [pc, #44]	; (8009388 <prvCheckTasksWaitingTermination+0x58>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3b01      	subs	r3, #1
 800935e:	4a0a      	ldr	r2, [pc, #40]	; (8009388 <prvCheckTasksWaitingTermination+0x58>)
 8009360:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009362:	f000 fecb 	bl	800a0fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f810 	bl	800938c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800936c:	4b06      	ldr	r3, [pc, #24]	; (8009388 <prvCheckTasksWaitingTermination+0x58>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e1      	bne.n	8009338 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20001218 	.word	0x20001218
 8009384:	20001244 	.word	0x20001244
 8009388:	2000122c 	.word	0x2000122c

0800938c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800939a:	2b00      	cmp	r3, #0
 800939c:	d108      	bne.n	80093b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 f83e 	bl	800a424 <vPortFree>
				vPortFree( pxTCB );
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f83b 	bl	800a424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093ae:	e018      	b.n	80093e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d103      	bne.n	80093c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 f832 	bl	800a424 <vPortFree>
	}
 80093c0:	e00f      	b.n	80093e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	d00a      	beq.n	80093e2 <prvDeleteTCB+0x56>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	60fb      	str	r3, [r7, #12]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <prvDeleteTCB+0x54>
	}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093f2:	4b0e      	ldr	r3, [pc, #56]	; (800942c <prvResetNextTaskUnblockTime+0x40>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <prvResetNextTaskUnblockTime+0x14>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <prvResetNextTaskUnblockTime+0x16>
 8009400:	2300      	movs	r3, #0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d004      	beq.n	8009410 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009406:	4b0a      	ldr	r3, [pc, #40]	; (8009430 <prvResetNextTaskUnblockTime+0x44>)
 8009408:	f04f 32ff 	mov.w	r2, #4294967295
 800940c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800940e:	e008      	b.n	8009422 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009410:	4b06      	ldr	r3, [pc, #24]	; (800942c <prvResetNextTaskUnblockTime+0x40>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4a04      	ldr	r2, [pc, #16]	; (8009430 <prvResetNextTaskUnblockTime+0x44>)
 8009420:	6013      	str	r3, [r2, #0]
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	bc80      	pop	{r7}
 800942a:	4770      	bx	lr
 800942c:	200011fc 	.word	0x200011fc
 8009430:	20001264 	.word	0x20001264

08009434 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800943a:	4b04      	ldr	r3, [pc, #16]	; (800944c <xTaskGetCurrentTaskHandle+0x18>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009440:	687b      	ldr	r3, [r7, #4]
	}
 8009442:	4618      	mov	r0, r3
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr
 800944c:	20000d70 	.word	0x20000d70

08009450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <xTaskGetSchedulerState+0x34>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800945e:	2301      	movs	r3, #1
 8009460:	607b      	str	r3, [r7, #4]
 8009462:	e008      	b.n	8009476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009464:	4b08      	ldr	r3, [pc, #32]	; (8009488 <xTaskGetSchedulerState+0x38>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d102      	bne.n	8009472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800946c:	2302      	movs	r3, #2
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	e001      	b.n	8009476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009472:	2300      	movs	r3, #0
 8009474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009476:	687b      	ldr	r3, [r7, #4]
	}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	bc80      	pop	{r7}
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20001250 	.word	0x20001250
 8009488:	2000126c 	.word	0x2000126c

0800948c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d056      	beq.n	8009550 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a6:	4b2d      	ldr	r3, [pc, #180]	; (800955c <xTaskPriorityInherit+0xd0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d246      	bcs.n	800953e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	db06      	blt.n	80094c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b8:	4b28      	ldr	r3, [pc, #160]	; (800955c <xTaskPriorityInherit+0xd0>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6959      	ldr	r1, [r3, #20]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a22      	ldr	r2, [pc, #136]	; (8009560 <xTaskPriorityInherit+0xd4>)
 80094d8:	4413      	add	r3, r2
 80094da:	4299      	cmp	r1, r3
 80094dc:	d101      	bne.n	80094e2 <xTaskPriorityInherit+0x56>
 80094de:	2301      	movs	r3, #1
 80094e0:	e000      	b.n	80094e4 <xTaskPriorityInherit+0x58>
 80094e2:	2300      	movs	r3, #0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d022      	beq.n	800952e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fe f8c5 	bl	800767c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094f2:	4b1a      	ldr	r3, [pc, #104]	; (800955c <xTaskPriorityInherit+0xd0>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	4b18      	ldr	r3, [pc, #96]	; (8009564 <xTaskPriorityInherit+0xd8>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	429a      	cmp	r2, r3
 8009506:	d903      	bls.n	8009510 <xTaskPriorityInherit+0x84>
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	4a15      	ldr	r2, [pc, #84]	; (8009564 <xTaskPriorityInherit+0xd8>)
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4a10      	ldr	r2, [pc, #64]	; (8009560 <xTaskPriorityInherit+0xd4>)
 800951e:	441a      	add	r2, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7fe f84d 	bl	80075c6 <vListInsertEnd>
 800952c:	e004      	b.n	8009538 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800952e:	4b0b      	ldr	r3, [pc, #44]	; (800955c <xTaskPriorityInherit+0xd0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009538:	2301      	movs	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	e008      	b.n	8009550 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <xTaskPriorityInherit+0xd0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	429a      	cmp	r2, r3
 800954a:	d201      	bcs.n	8009550 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800954c:	2301      	movs	r3, #1
 800954e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009550:	68fb      	ldr	r3, [r7, #12]
	}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000d70 	.word	0x20000d70
 8009560:	20000d74 	.word	0x20000d74
 8009564:	2000124c 	.word	0x2000124c

08009568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009574:	2300      	movs	r3, #0
 8009576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d056      	beq.n	800962c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800957e:	4b2e      	ldr	r3, [pc, #184]	; (8009638 <xTaskPriorityDisinherit+0xd0>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	429a      	cmp	r2, r3
 8009586:	d00a      	beq.n	800959e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	60fb      	str	r3, [r7, #12]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	60bb      	str	r3, [r7, #8]
}
 80095b8:	bf00      	nop
 80095ba:	e7fe      	b.n	80095ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c0:	1e5a      	subs	r2, r3, #1
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d02c      	beq.n	800962c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d128      	bne.n	800962c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	3304      	adds	r3, #4
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe f84c 	bl	800767c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fc:	4b0f      	ldr	r3, [pc, #60]	; (800963c <xTaskPriorityDisinherit+0xd4>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <xTaskPriorityDisinherit+0xa4>
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a0c      	ldr	r2, [pc, #48]	; (800963c <xTaskPriorityDisinherit+0xd4>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4a09      	ldr	r2, [pc, #36]	; (8009640 <xTaskPriorityDisinherit+0xd8>)
 800961a:	441a      	add	r2, r3
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7fd ffcf 	bl	80075c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009628:	2301      	movs	r3, #1
 800962a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800962c:	697b      	ldr	r3, [r7, #20]
	}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	20000d70 	.word	0x20000d70
 800963c:	2000124c 	.word	0x2000124c
 8009640:	20000d74 	.word	0x20000d74

08009644 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009652:	2301      	movs	r3, #1
 8009654:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d06f      	beq.n	800973c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10a      	bne.n	800967a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	60fb      	str	r3, [r7, #12]
}
 8009676:	bf00      	nop
 8009678:	e7fe      	b.n	8009678 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d902      	bls.n	800968a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	61fb      	str	r3, [r7, #28]
 8009688:	e002      	b.n	8009690 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	69fa      	ldr	r2, [r7, #28]
 8009696:	429a      	cmp	r2, r3
 8009698:	d050      	beq.n	800973c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d14b      	bne.n	800973c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80096a4:	4b27      	ldr	r3, [pc, #156]	; (8009744 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d10a      	bne.n	80096c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	60bb      	str	r3, [r7, #8]
}
 80096c0:	bf00      	nop
 80096c2:	e7fe      	b.n	80096c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	69fa      	ldr	r2, [r7, #28]
 80096ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	db04      	blt.n	80096e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	6959      	ldr	r1, [r3, #20]
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4a15      	ldr	r2, [pc, #84]	; (8009748 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80096f2:	4413      	add	r3, r2
 80096f4:	4299      	cmp	r1, r3
 80096f6:	d101      	bne.n	80096fc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80096f8:	2301      	movs	r3, #1
 80096fa:	e000      	b.n	80096fe <vTaskPriorityDisinheritAfterTimeout+0xba>
 80096fc:	2300      	movs	r3, #0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d01c      	beq.n	800973c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	3304      	adds	r3, #4
 8009706:	4618      	mov	r0, r3
 8009708:	f7fd ffb8 	bl	800767c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009710:	4b0e      	ldr	r3, [pc, #56]	; (800974c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	429a      	cmp	r2, r3
 8009716:	d903      	bls.n	8009720 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	4a0b      	ldr	r2, [pc, #44]	; (800974c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4a06      	ldr	r2, [pc, #24]	; (8009748 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800972e:	441a      	add	r2, r3
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	3304      	adds	r3, #4
 8009734:	4619      	mov	r1, r3
 8009736:	4610      	mov	r0, r2
 8009738:	f7fd ff45 	bl	80075c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800973c:	bf00      	nop
 800973e:	3720      	adds	r7, #32
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000d70 	.word	0x20000d70
 8009748:	20000d74 	.word	0x20000d74
 800974c:	2000124c 	.word	0x2000124c

08009750 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <uxTaskResetEventItemValue+0x2c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975e:	4b07      	ldr	r3, [pc, #28]	; (800977c <uxTaskResetEventItemValue+0x2c>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	4b05      	ldr	r3, [pc, #20]	; (800977c <uxTaskResetEventItemValue+0x2c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800976c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800976e:	687b      	ldr	r3, [r7, #4]
}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	bc80      	pop	{r7}
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20000d70 	.word	0x20000d70

08009780 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009784:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800978c:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009792:	3201      	adds	r2, #1
 8009794:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009796:	4b03      	ldr	r3, [pc, #12]	; (80097a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009798:	681b      	ldr	r3, [r3, #0]
	}
 800979a:	4618      	mov	r0, r3
 800979c:	46bd      	mov	sp, r7
 800979e:	bc80      	pop	{r7}
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000d70 	.word	0x20000d70

080097a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097b2:	4b21      	ldr	r3, [pc, #132]	; (8009838 <prvAddCurrentTaskToDelayedList+0x90>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097b8:	4b20      	ldr	r3, [pc, #128]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3304      	adds	r3, #4
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fd ff5c 	bl	800767c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ca:	d10a      	bne.n	80097e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d007      	beq.n	80097e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097d2:	4b1a      	ldr	r3, [pc, #104]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3304      	adds	r3, #4
 80097d8:	4619      	mov	r1, r3
 80097da:	4819      	ldr	r0, [pc, #100]	; (8009840 <prvAddCurrentTaskToDelayedList+0x98>)
 80097dc:	f7fd fef3 	bl	80075c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097e0:	e026      	b.n	8009830 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4413      	add	r3, r2
 80097e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097ea:	4b14      	ldr	r3, [pc, #80]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d209      	bcs.n	800980e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097fa:	4b12      	ldr	r3, [pc, #72]	; (8009844 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	4b0f      	ldr	r3, [pc, #60]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3304      	adds	r3, #4
 8009804:	4619      	mov	r1, r3
 8009806:	4610      	mov	r0, r2
 8009808:	f7fd ff00 	bl	800760c <vListInsert>
}
 800980c:	e010      	b.n	8009830 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800980e:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4b0a      	ldr	r3, [pc, #40]	; (800983c <prvAddCurrentTaskToDelayedList+0x94>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3304      	adds	r3, #4
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f7fd fef6 	bl	800760c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009820:	4b0a      	ldr	r3, [pc, #40]	; (800984c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	429a      	cmp	r2, r3
 8009828:	d202      	bcs.n	8009830 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800982a:	4a08      	ldr	r2, [pc, #32]	; (800984c <prvAddCurrentTaskToDelayedList+0xa4>)
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	6013      	str	r3, [r2, #0]
}
 8009830:	bf00      	nop
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	20001248 	.word	0x20001248
 800983c:	20000d70 	.word	0x20000d70
 8009840:	20001230 	.word	0x20001230
 8009844:	20001200 	.word	0x20001200
 8009848:	200011fc 	.word	0x200011fc
 800984c:	20001264 	.word	0x20001264

08009850 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08a      	sub	sp, #40	; 0x28
 8009854:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009856:	2300      	movs	r3, #0
 8009858:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800985a:	f000 facb 	bl	8009df4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800985e:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <xTimerCreateTimerTask+0x80>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d021      	beq.n	80098aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800986e:	1d3a      	adds	r2, r7, #4
 8009870:	f107 0108 	add.w	r1, r7, #8
 8009874:	f107 030c 	add.w	r3, r7, #12
 8009878:	4618      	mov	r0, r3
 800987a:	f7fd fc71 	bl	8007160 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	9202      	str	r2, [sp, #8]
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	2302      	movs	r3, #2
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2300      	movs	r3, #0
 800988e:	460a      	mov	r2, r1
 8009890:	4910      	ldr	r1, [pc, #64]	; (80098d4 <xTimerCreateTimerTask+0x84>)
 8009892:	4811      	ldr	r0, [pc, #68]	; (80098d8 <xTimerCreateTimerTask+0x88>)
 8009894:	f7fe fe9a 	bl	80085cc <xTaskCreateStatic>
 8009898:	4603      	mov	r3, r0
 800989a:	4a10      	ldr	r2, [pc, #64]	; (80098dc <xTimerCreateTimerTask+0x8c>)
 800989c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800989e:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <xTimerCreateTimerTask+0x8c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098a6:	2301      	movs	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	613b      	str	r3, [r7, #16]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098c6:	697b      	ldr	r3, [r7, #20]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	200012a0 	.word	0x200012a0
 80098d4:	0800a844 	.word	0x0800a844
 80098d8:	080099fd 	.word	0x080099fd
 80098dc:	200012a4 	.word	0x200012a4

080098e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08a      	sub	sp, #40	; 0x28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <xTimerGenericCommand+0x2e>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	623b      	str	r3, [r7, #32]
}
 800990a:	bf00      	nop
 800990c:	e7fe      	b.n	800990c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800990e:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <xTimerGenericCommand+0x98>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d02a      	beq.n	800996c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2b05      	cmp	r3, #5
 8009926:	dc18      	bgt.n	800995a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009928:	f7ff fd92 	bl	8009450 <xTaskGetSchedulerState>
 800992c:	4603      	mov	r3, r0
 800992e:	2b02      	cmp	r3, #2
 8009930:	d109      	bne.n	8009946 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009932:	4b11      	ldr	r3, [pc, #68]	; (8009978 <xTimerGenericCommand+0x98>)
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	f107 0110 	add.w	r1, r7, #16
 800993a:	2300      	movs	r3, #0
 800993c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993e:	f7fe f8bf 	bl	8007ac0 <xQueueGenericSend>
 8009942:	6278      	str	r0, [r7, #36]	; 0x24
 8009944:	e012      	b.n	800996c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009946:	4b0c      	ldr	r3, [pc, #48]	; (8009978 <xTimerGenericCommand+0x98>)
 8009948:	6818      	ldr	r0, [r3, #0]
 800994a:	f107 0110 	add.w	r1, r7, #16
 800994e:	2300      	movs	r3, #0
 8009950:	2200      	movs	r2, #0
 8009952:	f7fe f8b5 	bl	8007ac0 <xQueueGenericSend>
 8009956:	6278      	str	r0, [r7, #36]	; 0x24
 8009958:	e008      	b.n	800996c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <xTimerGenericCommand+0x98>)
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f107 0110 	add.w	r1, r7, #16
 8009962:	2300      	movs	r3, #0
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	f7fe f9a9 	bl	8007cbc <xQueueGenericSendFromISR>
 800996a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800996e:	4618      	mov	r0, r3
 8009970:	3728      	adds	r7, #40	; 0x28
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200012a0 	.word	0x200012a0

0800997c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af02      	add	r7, sp, #8
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009986:	4b1c      	ldr	r3, [pc, #112]	; (80099f8 <prvProcessExpiredTimer+0x7c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	3304      	adds	r3, #4
 8009994:	4618      	mov	r0, r3
 8009996:	f7fd fe71 	bl	800767c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d122      	bne.n	80099e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	18d1      	adds	r1, r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	6978      	ldr	r0, [r7, #20]
 80099b0:	f000 f8c8 	bl	8009b44 <prvInsertTimerInActiveList>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d016      	beq.n	80099e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099ba:	2300      	movs	r3, #0
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	2300      	movs	r3, #0
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	2100      	movs	r1, #0
 80099c4:	6978      	ldr	r0, [r7, #20]
 80099c6:	f7ff ff8b 	bl	80098e0 <xTimerGenericCommand>
 80099ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	60fb      	str	r3, [r7, #12]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	6978      	ldr	r0, [r7, #20]
 80099ee:	4798      	blx	r3
}
 80099f0:	bf00      	nop
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20001298 	.word	0x20001298

080099fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a04:	f107 0308 	add.w	r3, r7, #8
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 f857 	bl	8009abc <prvGetNextExpireTime>
 8009a0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4619      	mov	r1, r3
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f803 	bl	8009a20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a1a:	f000 f8d5 	bl	8009bc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a1e:	e7f1      	b.n	8009a04 <prvTimerTask+0x8>

08009a20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a2a:	f7ff f87f 	bl	8008b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a2e:	f107 0308 	add.w	r3, r7, #8
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 f866 	bl	8009b04 <prvSampleTimeNow>
 8009a38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d130      	bne.n	8009aa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10a      	bne.n	8009a5c <prvProcessTimerOrBlockTask+0x3c>
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d806      	bhi.n	8009a5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a4e:	f7ff f87b 	bl	8008b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a52:	68f9      	ldr	r1, [r7, #12]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f7ff ff91 	bl	800997c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a5a:	e024      	b.n	8009aa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d008      	beq.n	8009a74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a62:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <prvProcessTimerOrBlockTask+0x90>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	bf0c      	ite	eq
 8009a6c:	2301      	moveq	r3, #1
 8009a6e:	2300      	movne	r3, #0
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a74:	4b0f      	ldr	r3, [pc, #60]	; (8009ab4 <prvProcessTimerOrBlockTask+0x94>)
 8009a76:	6818      	ldr	r0, [r3, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7fe fd6f 	bl	8008564 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a86:	f7ff f85f 	bl	8008b48 <xTaskResumeAll>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10a      	bne.n	8009aa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a90:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <prvProcessTimerOrBlockTask+0x98>)
 8009a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	f3bf 8f6f 	isb	sy
}
 8009aa0:	e001      	b.n	8009aa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aa2:	f7ff f851 	bl	8008b48 <xTaskResumeAll>
}
 8009aa6:	bf00      	nop
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	2000129c 	.word	0x2000129c
 8009ab4:	200012a0 	.word	0x200012a0
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ac4:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <prvGetNextExpireTime+0x44>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	bf0c      	ite	eq
 8009ace:	2301      	moveq	r3, #1
 8009ad0:	2300      	movne	r3, #0
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d105      	bne.n	8009aee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ae2:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <prvGetNextExpireTime+0x44>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e001      	b.n	8009af2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc80      	pop	{r7}
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	20001298 	.word	0x20001298

08009b04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b0c:	f7ff f8ba 	bl	8008c84 <xTaskGetTickCount>
 8009b10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <prvSampleTimeNow+0x3c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d205      	bcs.n	8009b28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b1c:	f000 f908 	bl	8009d30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	e002      	b.n	8009b2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b2e:	4a04      	ldr	r2, [pc, #16]	; (8009b40 <prvSampleTimeNow+0x3c>)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b34:	68fb      	ldr	r3, [r7, #12]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	200012a8 	.word	0x200012a8

08009b44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
 8009b50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d812      	bhi.n	8009b90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	1ad2      	subs	r2, r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d302      	bcc.n	8009b7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	e01b      	b.n	8009bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b7e:	4b10      	ldr	r3, [pc, #64]	; (8009bc0 <prvInsertTimerInActiveList+0x7c>)
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3304      	adds	r3, #4
 8009b86:	4619      	mov	r1, r3
 8009b88:	4610      	mov	r0, r2
 8009b8a:	f7fd fd3f 	bl	800760c <vListInsert>
 8009b8e:	e012      	b.n	8009bb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d206      	bcs.n	8009ba6 <prvInsertTimerInActiveList+0x62>
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d302      	bcc.n	8009ba6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	617b      	str	r3, [r7, #20]
 8009ba4:	e007      	b.n	8009bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ba6:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <prvInsertTimerInActiveList+0x80>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	f7fd fd2b 	bl	800760c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bb6:	697b      	ldr	r3, [r7, #20]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	2000129c 	.word	0x2000129c
 8009bc4:	20001298 	.word	0x20001298

08009bc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b08e      	sub	sp, #56	; 0x38
 8009bcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bce:	e09d      	b.n	8009d0c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	da18      	bge.n	8009c08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bd6:	1d3b      	adds	r3, r7, #4
 8009bd8:	3304      	adds	r3, #4
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	61fb      	str	r3, [r7, #28]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bfe:	6850      	ldr	r0, [r2, #4]
 8009c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c02:	6892      	ldr	r2, [r2, #8]
 8009c04:	4611      	mov	r1, r2
 8009c06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	db7e      	blt.n	8009d0c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d004      	beq.n	8009c24 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fd fd2c 	bl	800767c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c24:	463b      	mov	r3, r7
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff ff6c 	bl	8009b04 <prvSampleTimeNow>
 8009c2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	d86a      	bhi.n	8009d0a <prvProcessReceivedCommands+0x142>
 8009c34:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <prvProcessReceivedCommands+0x74>)
 8009c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3a:	bf00      	nop
 8009c3c:	08009c65 	.word	0x08009c65
 8009c40:	08009c65 	.word	0x08009c65
 8009c44:	08009c65 	.word	0x08009c65
 8009c48:	08009d0d 	.word	0x08009d0d
 8009c4c:	08009cc1 	.word	0x08009cc1
 8009c50:	08009cf9 	.word	0x08009cf9
 8009c54:	08009c65 	.word	0x08009c65
 8009c58:	08009c65 	.word	0x08009c65
 8009c5c:	08009d0d 	.word	0x08009d0d
 8009c60:	08009cc1 	.word	0x08009cc1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	18d1      	adds	r1, r2, r3
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c72:	f7ff ff67 	bl	8009b44 <prvInsertTimerInActiveList>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d047      	beq.n	8009d0c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c82:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d13f      	bne.n	8009d0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	441a      	add	r2, r3
 8009c94:	2300      	movs	r3, #0
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c9e:	f7ff fe1f 	bl	80098e0 <xTimerGenericCommand>
 8009ca2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d130      	bne.n	8009d0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	61bb      	str	r3, [r7, #24]
}
 8009cbc:	bf00      	nop
 8009cbe:	e7fe      	b.n	8009cbe <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10a      	bne.n	8009ce4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	617b      	str	r3, [r7, #20]
}
 8009ce0:	bf00      	nop
 8009ce2:	e7fe      	b.n	8009ce2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	699a      	ldr	r2, [r3, #24]
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	18d1      	adds	r1, r2, r3
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf2:	f7ff ff27 	bl	8009b44 <prvInsertTimerInActiveList>
					break;
 8009cf6:	e009      	b.n	8009d0c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d04:	f000 fb8e 	bl	800a424 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d08:	e000      	b.n	8009d0c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8009d0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d0c:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <prvProcessReceivedCommands+0x164>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	1d39      	adds	r1, r7, #4
 8009d12:	2200      	movs	r2, #0
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fe f869 	bl	8007dec <xQueueReceive>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f47f af57 	bne.w	8009bd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	3730      	adds	r7, #48	; 0x30
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	200012a0 	.word	0x200012a0

08009d30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d36:	e045      	b.n	8009dc4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d38:	4b2c      	ldr	r3, [pc, #176]	; (8009dec <prvSwitchTimerLists+0xbc>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d42:	4b2a      	ldr	r3, [pc, #168]	; (8009dec <prvSwitchTimerLists+0xbc>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fd fc93 	bl	800767c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d12e      	bne.n	8009dc4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	693a      	ldr	r2, [r7, #16]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d90e      	bls.n	8009d96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d84:	4b19      	ldr	r3, [pc, #100]	; (8009dec <prvSwitchTimerLists+0xbc>)
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f7fd fc3c 	bl	800760c <vListInsert>
 8009d94:	e016      	b.n	8009dc4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d96:	2300      	movs	r3, #0
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f7ff fd9d 	bl	80098e0 <xTimerGenericCommand>
 8009da6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	603b      	str	r3, [r7, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dc4:	4b09      	ldr	r3, [pc, #36]	; (8009dec <prvSwitchTimerLists+0xbc>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1b4      	bne.n	8009d38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009dce:	4b07      	ldr	r3, [pc, #28]	; (8009dec <prvSwitchTimerLists+0xbc>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009dd4:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <prvSwitchTimerLists+0xc0>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a04      	ldr	r2, [pc, #16]	; (8009dec <prvSwitchTimerLists+0xbc>)
 8009dda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ddc:	4a04      	ldr	r2, [pc, #16]	; (8009df0 <prvSwitchTimerLists+0xc0>)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	6013      	str	r3, [r2, #0]
}
 8009de2:	bf00      	nop
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20001298 	.word	0x20001298
 8009df0:	2000129c 	.word	0x2000129c

08009df4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009dfa:	f000 f94f 	bl	800a09c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dfe:	4b15      	ldr	r3, [pc, #84]	; (8009e54 <prvCheckForValidListAndQueue+0x60>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d120      	bne.n	8009e48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e06:	4814      	ldr	r0, [pc, #80]	; (8009e58 <prvCheckForValidListAndQueue+0x64>)
 8009e08:	f7fd fbb2 	bl	8007570 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e0c:	4813      	ldr	r0, [pc, #76]	; (8009e5c <prvCheckForValidListAndQueue+0x68>)
 8009e0e:	f7fd fbaf 	bl	8007570 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <prvCheckForValidListAndQueue+0x6c>)
 8009e14:	4a10      	ldr	r2, [pc, #64]	; (8009e58 <prvCheckForValidListAndQueue+0x64>)
 8009e16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e18:	4b12      	ldr	r3, [pc, #72]	; (8009e64 <prvCheckForValidListAndQueue+0x70>)
 8009e1a:	4a10      	ldr	r2, [pc, #64]	; (8009e5c <prvCheckForValidListAndQueue+0x68>)
 8009e1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	4b11      	ldr	r3, [pc, #68]	; (8009e68 <prvCheckForValidListAndQueue+0x74>)
 8009e24:	4a11      	ldr	r2, [pc, #68]	; (8009e6c <prvCheckForValidListAndQueue+0x78>)
 8009e26:	2110      	movs	r1, #16
 8009e28:	200a      	movs	r0, #10
 8009e2a:	f7fd fcb9 	bl	80077a0 <xQueueGenericCreateStatic>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	4a08      	ldr	r2, [pc, #32]	; (8009e54 <prvCheckForValidListAndQueue+0x60>)
 8009e32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e34:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <prvCheckForValidListAndQueue+0x60>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e3c:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <prvCheckForValidListAndQueue+0x60>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	490b      	ldr	r1, [pc, #44]	; (8009e70 <prvCheckForValidListAndQueue+0x7c>)
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fb66 	bl	8008514 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e48:	f000 f958 	bl	800a0fc <vPortExitCritical>
}
 8009e4c:	bf00      	nop
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	200012a0 	.word	0x200012a0
 8009e58:	20001270 	.word	0x20001270
 8009e5c:	20001284 	.word	0x20001284
 8009e60:	20001298 	.word	0x20001298
 8009e64:	2000129c 	.word	0x2000129c
 8009e68:	2000134c 	.word	0x2000134c
 8009e6c:	200012ac 	.word	0x200012ac
 8009e70:	0800a84c 	.word	0x0800a84c

08009e74 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009e82:	f06f 0301 	mvn.w	r3, #1
 8009e86:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e94:	4b06      	ldr	r3, [pc, #24]	; (8009eb0 <xTimerPendFunctionCallFromISR+0x3c>)
 8009e96:	6818      	ldr	r0, [r3, #0]
 8009e98:	f107 0114 	add.w	r1, r7, #20
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	f7fd ff0c 	bl	8007cbc <xQueueGenericSendFromISR>
 8009ea4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3728      	adds	r7, #40	; 0x28
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	200012a0 	.word	0x200012a0

08009eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3b04      	subs	r3, #4
 8009ec4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	3b04      	subs	r3, #4
 8009ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f023 0201 	bic.w	r2, r3, #1
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3b04      	subs	r3, #4
 8009ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ee4:	4a08      	ldr	r2, [pc, #32]	; (8009f08 <pxPortInitialiseStack+0x54>)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3b14      	subs	r3, #20
 8009eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3b20      	subs	r3, #32
 8009efa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009efc:	68fb      	ldr	r3, [r7, #12]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bc80      	pop	{r7}
 8009f06:	4770      	bx	lr
 8009f08:	08009f0d 	.word	0x08009f0d

08009f0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f16:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <prvTaskExitError+0x54>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1e:	d00a      	beq.n	8009f36 <prvTaskExitError+0x2a>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	60fb      	str	r3, [r7, #12]
}
 8009f32:	bf00      	nop
 8009f34:	e7fe      	b.n	8009f34 <prvTaskExitError+0x28>
	__asm volatile
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	60bb      	str	r3, [r7, #8]
}
 8009f48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f4a:	bf00      	nop
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0fc      	beq.n	8009f4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bc80      	pop	{r7}
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000014 	.word	0x20000014
	...

08009f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <pxCurrentTCBConst2>)
 8009f72:	6819      	ldr	r1, [r3, #0]
 8009f74:	6808      	ldr	r0, [r1, #0]
 8009f76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f7a:	f380 8809 	msr	PSP, r0
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f04f 0000 	mov.w	r0, #0
 8009f86:	f380 8811 	msr	BASEPRI, r0
 8009f8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009f8e:	4770      	bx	lr

08009f90 <pxCurrentTCBConst2>:
 8009f90:	20000d70 	.word	0x20000d70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f94:	bf00      	nop
 8009f96:	bf00      	nop

08009f98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009f98:	4806      	ldr	r0, [pc, #24]	; (8009fb4 <prvPortStartFirstTask+0x1c>)
 8009f9a:	6800      	ldr	r0, [r0, #0]
 8009f9c:	6800      	ldr	r0, [r0, #0]
 8009f9e:	f380 8808 	msr	MSP, r0
 8009fa2:	b662      	cpsie	i
 8009fa4:	b661      	cpsie	f
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	df00      	svc	0
 8009fb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fb2:	bf00      	nop
 8009fb4:	e000ed08 	.word	0xe000ed08

08009fb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fbe:	4b32      	ldr	r3, [pc, #200]	; (800a088 <xPortStartScheduler+0xd0>)
 8009fc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	22ff      	movs	r2, #255	; 0xff
 8009fce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fd8:	78fb      	ldrb	r3, [r7, #3]
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	4b2a      	ldr	r3, [pc, #168]	; (800a08c <xPortStartScheduler+0xd4>)
 8009fe4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fe6:	4b2a      	ldr	r3, [pc, #168]	; (800a090 <xPortStartScheduler+0xd8>)
 8009fe8:	2207      	movs	r2, #7
 8009fea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fec:	e009      	b.n	800a002 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009fee:	4b28      	ldr	r3, [pc, #160]	; (800a090 <xPortStartScheduler+0xd8>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	4a26      	ldr	r2, [pc, #152]	; (800a090 <xPortStartScheduler+0xd8>)
 8009ff6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ff8:	78fb      	ldrb	r3, [r7, #3]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a002:	78fb      	ldrb	r3, [r7, #3]
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a00a:	2b80      	cmp	r3, #128	; 0x80
 800a00c:	d0ef      	beq.n	8009fee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a00e:	4b20      	ldr	r3, [pc, #128]	; (800a090 <xPortStartScheduler+0xd8>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f1c3 0307 	rsb	r3, r3, #7
 800a016:	2b04      	cmp	r3, #4
 800a018:	d00a      	beq.n	800a030 <xPortStartScheduler+0x78>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	60bb      	str	r3, [r7, #8]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a030:	4b17      	ldr	r3, [pc, #92]	; (800a090 <xPortStartScheduler+0xd8>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	4a16      	ldr	r2, [pc, #88]	; (800a090 <xPortStartScheduler+0xd8>)
 800a038:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a03a:	4b15      	ldr	r3, [pc, #84]	; (800a090 <xPortStartScheduler+0xd8>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a042:	4a13      	ldr	r2, [pc, #76]	; (800a090 <xPortStartScheduler+0xd8>)
 800a044:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a04e:	4b11      	ldr	r3, [pc, #68]	; (800a094 <xPortStartScheduler+0xdc>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a10      	ldr	r2, [pc, #64]	; (800a094 <xPortStartScheduler+0xdc>)
 800a054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <xPortStartScheduler+0xdc>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a0d      	ldr	r2, [pc, #52]	; (800a094 <xPortStartScheduler+0xdc>)
 800a060:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a064:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a066:	f000 f8b9 	bl	800a1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a06a:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <xPortStartScheduler+0xe0>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a070:	f7ff ff92 	bl	8009f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a074:	f7fe fed2 	bl	8008e1c <vTaskSwitchContext>
	prvTaskExitError();
 800a078:	f7ff ff48 	bl	8009f0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	e000e400 	.word	0xe000e400
 800a08c:	2000139c 	.word	0x2000139c
 800a090:	200013a0 	.word	0x200013a0
 800a094:	e000ed20 	.word	0xe000ed20
 800a098:	20000014 	.word	0x20000014

0800a09c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	607b      	str	r3, [r7, #4]
}
 800a0b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <vPortEnterCritical+0x58>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	4a0d      	ldr	r2, [pc, #52]	; (800a0f4 <vPortEnterCritical+0x58>)
 800a0be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0c0:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <vPortEnterCritical+0x58>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d10f      	bne.n	800a0e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0c8:	4b0b      	ldr	r3, [pc, #44]	; (800a0f8 <vPortEnterCritical+0x5c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	603b      	str	r3, [r7, #0]
}
 800a0e4:	bf00      	nop
 800a0e6:	e7fe      	b.n	800a0e6 <vPortEnterCritical+0x4a>
	}
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bc80      	pop	{r7}
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20000014 	.word	0x20000014
 800a0f8:	e000ed04 	.word	0xe000ed04

0800a0fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a102:	4b11      	ldr	r3, [pc, #68]	; (800a148 <vPortExitCritical+0x4c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10a      	bne.n	800a120 <vPortExitCritical+0x24>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	607b      	str	r3, [r7, #4]
}
 800a11c:	bf00      	nop
 800a11e:	e7fe      	b.n	800a11e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a120:	4b09      	ldr	r3, [pc, #36]	; (800a148 <vPortExitCritical+0x4c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3b01      	subs	r3, #1
 800a126:	4a08      	ldr	r2, [pc, #32]	; (800a148 <vPortExitCritical+0x4c>)
 800a128:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a12a:	4b07      	ldr	r3, [pc, #28]	; (800a148 <vPortExitCritical+0x4c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d105      	bne.n	800a13e <vPortExitCritical+0x42>
 800a132:	2300      	movs	r3, #0
 800a134:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	f383 8811 	msr	BASEPRI, r3
}
 800a13c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a13e:	bf00      	nop
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr
 800a148:	20000014 	.word	0x20000014
 800a14c:	00000000 	.word	0x00000000

0800a150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a150:	f3ef 8009 	mrs	r0, PSP
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	4b0d      	ldr	r3, [pc, #52]	; (800a190 <pxCurrentTCBConst>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a160:	6010      	str	r0, [r2, #0]
 800a162:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a166:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a16a:	f380 8811 	msr	BASEPRI, r0
 800a16e:	f7fe fe55 	bl	8008e1c <vTaskSwitchContext>
 800a172:	f04f 0000 	mov.w	r0, #0
 800a176:	f380 8811 	msr	BASEPRI, r0
 800a17a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a17e:	6819      	ldr	r1, [r3, #0]
 800a180:	6808      	ldr	r0, [r1, #0]
 800a182:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a186:	f380 8809 	msr	PSP, r0
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	4770      	bx	lr

0800a190 <pxCurrentTCBConst>:
 800a190:	20000d70 	.word	0x20000d70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f7fe fd75 	bl	8008ca0 <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <SysTick_Handler+0x40>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f383 8811 	msr	BASEPRI, r3
}
 800a1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <vPortSetupTimerInterrupt+0x30>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1e6:	4b0a      	ldr	r3, [pc, #40]	; (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ec:	4b09      	ldr	r3, [pc, #36]	; (800a214 <vPortSetupTimerInterrupt+0x38>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a09      	ldr	r2, [pc, #36]	; (800a218 <vPortSetupTimerInterrupt+0x3c>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	099b      	lsrs	r3, r3, #6
 800a1f8:	4a08      	ldr	r2, [pc, #32]	; (800a21c <vPortSetupTimerInterrupt+0x40>)
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1fe:	4b03      	ldr	r3, [pc, #12]	; (800a20c <vPortSetupTimerInterrupt+0x30>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	bc80      	pop	{r7}
 800a20a:	4770      	bx	lr
 800a20c:	e000e010 	.word	0xe000e010
 800a210:	e000e018 	.word	0xe000e018
 800a214:	20000008 	.word	0x20000008
 800a218:	10624dd3 	.word	0x10624dd3
 800a21c:	e000e014 	.word	0xe000e014

0800a220 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a226:	f3ef 8305 	mrs	r3, IPSR
 800a22a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b0f      	cmp	r3, #15
 800a230:	d914      	bls.n	800a25c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a232:	4a16      	ldr	r2, [pc, #88]	; (800a28c <vPortValidateInterruptPriority+0x6c>)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a23c:	4b14      	ldr	r3, [pc, #80]	; (800a290 <vPortValidateInterruptPriority+0x70>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	7afa      	ldrb	r2, [r7, #11]
 800a242:	429a      	cmp	r2, r3
 800a244:	d20a      	bcs.n	800a25c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	607b      	str	r3, [r7, #4]
}
 800a258:	bf00      	nop
 800a25a:	e7fe      	b.n	800a25a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a25c:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <vPortValidateInterruptPriority+0x74>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a264:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <vPortValidateInterruptPriority+0x78>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d90a      	bls.n	800a282 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	603b      	str	r3, [r7, #0]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <vPortValidateInterruptPriority+0x60>
	}
 800a282:	bf00      	nop
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr
 800a28c:	e000e3f0 	.word	0xe000e3f0
 800a290:	2000139c 	.word	0x2000139c
 800a294:	e000ed0c 	.word	0xe000ed0c
 800a298:	200013a0 	.word	0x200013a0

0800a29c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08a      	sub	sp, #40	; 0x28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2a8:	f7fe fc40 	bl	8008b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2ac:	4b58      	ldr	r3, [pc, #352]	; (800a410 <pvPortMalloc+0x174>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2b4:	f000 f910 	bl	800a4d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2b8:	4b56      	ldr	r3, [pc, #344]	; (800a414 <pvPortMalloc+0x178>)
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4013      	ands	r3, r2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	f040 808e 	bne.w	800a3e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01d      	beq.n	800a308 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a2cc:	2208      	movs	r2, #8
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d014      	beq.n	800a308 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f023 0307 	bic.w	r3, r3, #7
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00a      	beq.n	800a308 <pvPortMalloc+0x6c>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	617b      	str	r3, [r7, #20]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d069      	beq.n	800a3e2 <pvPortMalloc+0x146>
 800a30e:	4b42      	ldr	r3, [pc, #264]	; (800a418 <pvPortMalloc+0x17c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	429a      	cmp	r2, r3
 800a316:	d864      	bhi.n	800a3e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a318:	4b40      	ldr	r3, [pc, #256]	; (800a41c <pvPortMalloc+0x180>)
 800a31a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a31c:	4b3f      	ldr	r3, [pc, #252]	; (800a41c <pvPortMalloc+0x180>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a322:	e004      	b.n	800a32e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	429a      	cmp	r2, r3
 800a336:	d903      	bls.n	800a340 <pvPortMalloc+0xa4>
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1f1      	bne.n	800a324 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a340:	4b33      	ldr	r3, [pc, #204]	; (800a410 <pvPortMalloc+0x174>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a346:	429a      	cmp	r2, r3
 800a348:	d04b      	beq.n	800a3e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2208      	movs	r2, #8
 800a350:	4413      	add	r3, r2
 800a352:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	1ad2      	subs	r2, r2, r3
 800a364:	2308      	movs	r3, #8
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	429a      	cmp	r2, r3
 800a36a:	d91f      	bls.n	800a3ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4413      	add	r3, r2
 800a372:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	f003 0307 	and.w	r3, r3, #7
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00a      	beq.n	800a394 <pvPortMalloc+0xf8>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	613b      	str	r3, [r7, #16]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	1ad2      	subs	r2, r2, r3
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3a6:	69b8      	ldr	r0, [r7, #24]
 800a3a8:	f000 f8f8 	bl	800a59c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3ac:	4b1a      	ldr	r3, [pc, #104]	; (800a418 <pvPortMalloc+0x17c>)
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	4a18      	ldr	r2, [pc, #96]	; (800a418 <pvPortMalloc+0x17c>)
 800a3b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3ba:	4b17      	ldr	r3, [pc, #92]	; (800a418 <pvPortMalloc+0x17c>)
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4b18      	ldr	r3, [pc, #96]	; (800a420 <pvPortMalloc+0x184>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d203      	bcs.n	800a3ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <pvPortMalloc+0x17c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a15      	ldr	r2, [pc, #84]	; (800a420 <pvPortMalloc+0x184>)
 800a3cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	4b10      	ldr	r3, [pc, #64]	; (800a414 <pvPortMalloc+0x178>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3e2:	f7fe fbb1 	bl	8008b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00a      	beq.n	800a406 <pvPortMalloc+0x16a>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	60fb      	str	r3, [r7, #12]
}
 800a402:	bf00      	nop
 800a404:	e7fe      	b.n	800a404 <pvPortMalloc+0x168>
	return pvReturn;
 800a406:	69fb      	ldr	r3, [r7, #28]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3728      	adds	r7, #40	; 0x28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	2000234c 	.word	0x2000234c
 800a414:	20002358 	.word	0x20002358
 800a418:	20002350 	.word	0x20002350
 800a41c:	20002344 	.word	0x20002344
 800a420:	20002354 	.word	0x20002354

0800a424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d048      	beq.n	800a4c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a436:	2308      	movs	r3, #8
 800a438:	425b      	negs	r3, r3
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	4413      	add	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	4b21      	ldr	r3, [pc, #132]	; (800a4d0 <vPortFree+0xac>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4013      	ands	r3, r2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <vPortFree+0x44>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	60fb      	str	r3, [r7, #12]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <vPortFree+0x62>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	60bb      	str	r3, [r7, #8]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <vPortFree+0xac>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4013      	ands	r3, r2
 800a490:	2b00      	cmp	r3, #0
 800a492:	d019      	beq.n	800a4c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d115      	bne.n	800a4c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <vPortFree+0xac>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	43db      	mvns	r3, r3
 800a4a6:	401a      	ands	r2, r3
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4ac:	f7fe fb3e 	bl	8008b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <vPortFree+0xb0>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	4a06      	ldr	r2, [pc, #24]	; (800a4d4 <vPortFree+0xb0>)
 800a4bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4be:	6938      	ldr	r0, [r7, #16]
 800a4c0:	f000 f86c 	bl	800a59c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a4c4:	f7fe fb40 	bl	8008b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4c8:	bf00      	nop
 800a4ca:	3718      	adds	r7, #24
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	20002358 	.word	0x20002358
 800a4d4:	20002350 	.word	0x20002350

0800a4d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4de:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a4e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4e4:	4b27      	ldr	r3, [pc, #156]	; (800a584 <prvHeapInit+0xac>)
 800a4e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f003 0307 	and.w	r3, r3, #7
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00c      	beq.n	800a50c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3307      	adds	r3, #7
 800a4f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f023 0307 	bic.w	r3, r3, #7
 800a4fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	4a1f      	ldr	r2, [pc, #124]	; (800a584 <prvHeapInit+0xac>)
 800a508:	4413      	add	r3, r2
 800a50a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a510:	4a1d      	ldr	r2, [pc, #116]	; (800a588 <prvHeapInit+0xb0>)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a516:	4b1c      	ldr	r3, [pc, #112]	; (800a588 <prvHeapInit+0xb0>)
 800a518:	2200      	movs	r2, #0
 800a51a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	4413      	add	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a524:	2208      	movs	r2, #8
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	1a9b      	subs	r3, r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f023 0307 	bic.w	r3, r3, #7
 800a532:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4a15      	ldr	r2, [pc, #84]	; (800a58c <prvHeapInit+0xb4>)
 800a538:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a53a:	4b14      	ldr	r3, [pc, #80]	; (800a58c <prvHeapInit+0xb4>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2200      	movs	r2, #0
 800a540:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a542:	4b12      	ldr	r3, [pc, #72]	; (800a58c <prvHeapInit+0xb4>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	1ad2      	subs	r2, r2, r3
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <prvHeapInit+0xb4>)
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4a0a      	ldr	r2, [pc, #40]	; (800a590 <prvHeapInit+0xb8>)
 800a566:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	4a09      	ldr	r2, [pc, #36]	; (800a594 <prvHeapInit+0xbc>)
 800a56e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a570:	4b09      	ldr	r3, [pc, #36]	; (800a598 <prvHeapInit+0xc0>)
 800a572:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a576:	601a      	str	r2, [r3, #0]
}
 800a578:	bf00      	nop
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bc80      	pop	{r7}
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	200013a4 	.word	0x200013a4
 800a588:	20002344 	.word	0x20002344
 800a58c:	2000234c 	.word	0x2000234c
 800a590:	20002354 	.word	0x20002354
 800a594:	20002350 	.word	0x20002350
 800a598:	20002358 	.word	0x20002358

0800a59c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5a4:	4b27      	ldr	r3, [pc, #156]	; (800a644 <prvInsertBlockIntoFreeList+0xa8>)
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	e002      	b.n	800a5b0 <prvInsertBlockIntoFreeList+0x14>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d8f7      	bhi.n	800a5aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d108      	bne.n	800a5de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	441a      	add	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	68ba      	ldr	r2, [r7, #8]
 800a5e8:	441a      	add	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d118      	bne.n	800a624 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	4b14      	ldr	r3, [pc, #80]	; (800a648 <prvInsertBlockIntoFreeList+0xac>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d00d      	beq.n	800a61a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	441a      	add	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	e008      	b.n	800a62c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a61a:	4b0b      	ldr	r3, [pc, #44]	; (800a648 <prvInsertBlockIntoFreeList+0xac>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	e003      	b.n	800a62c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	429a      	cmp	r2, r3
 800a632:	d002      	beq.n	800a63a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a63a:	bf00      	nop
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	bc80      	pop	{r7}
 800a642:	4770      	bx	lr
 800a644:	20002344 	.word	0x20002344
 800a648:	2000234c 	.word	0x2000234c

0800a64c <__itoa>:
 800a64c:	1e93      	subs	r3, r2, #2
 800a64e:	2b22      	cmp	r3, #34	; 0x22
 800a650:	b510      	push	{r4, lr}
 800a652:	460c      	mov	r4, r1
 800a654:	d904      	bls.n	800a660 <__itoa+0x14>
 800a656:	2300      	movs	r3, #0
 800a658:	461c      	mov	r4, r3
 800a65a:	700b      	strb	r3, [r1, #0]
 800a65c:	4620      	mov	r0, r4
 800a65e:	bd10      	pop	{r4, pc}
 800a660:	2a0a      	cmp	r2, #10
 800a662:	d109      	bne.n	800a678 <__itoa+0x2c>
 800a664:	2800      	cmp	r0, #0
 800a666:	da07      	bge.n	800a678 <__itoa+0x2c>
 800a668:	232d      	movs	r3, #45	; 0x2d
 800a66a:	700b      	strb	r3, [r1, #0]
 800a66c:	2101      	movs	r1, #1
 800a66e:	4240      	negs	r0, r0
 800a670:	4421      	add	r1, r4
 800a672:	f000 f805 	bl	800a680 <__utoa>
 800a676:	e7f1      	b.n	800a65c <__itoa+0x10>
 800a678:	2100      	movs	r1, #0
 800a67a:	e7f9      	b.n	800a670 <__itoa+0x24>

0800a67c <itoa>:
 800a67c:	f7ff bfe6 	b.w	800a64c <__itoa>

0800a680 <__utoa>:
 800a680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a682:	b08b      	sub	sp, #44	; 0x2c
 800a684:	4605      	mov	r5, r0
 800a686:	460b      	mov	r3, r1
 800a688:	466e      	mov	r6, sp
 800a68a:	4c1d      	ldr	r4, [pc, #116]	; (800a700 <__utoa+0x80>)
 800a68c:	f104 0c20 	add.w	ip, r4, #32
 800a690:	4637      	mov	r7, r6
 800a692:	6820      	ldr	r0, [r4, #0]
 800a694:	6861      	ldr	r1, [r4, #4]
 800a696:	3408      	adds	r4, #8
 800a698:	c703      	stmia	r7!, {r0, r1}
 800a69a:	4564      	cmp	r4, ip
 800a69c:	463e      	mov	r6, r7
 800a69e:	d1f7      	bne.n	800a690 <__utoa+0x10>
 800a6a0:	7921      	ldrb	r1, [r4, #4]
 800a6a2:	6820      	ldr	r0, [r4, #0]
 800a6a4:	7139      	strb	r1, [r7, #4]
 800a6a6:	1e91      	subs	r1, r2, #2
 800a6a8:	2922      	cmp	r1, #34	; 0x22
 800a6aa:	6038      	str	r0, [r7, #0]
 800a6ac:	f04f 0100 	mov.w	r1, #0
 800a6b0:	d904      	bls.n	800a6bc <__utoa+0x3c>
 800a6b2:	7019      	strb	r1, [r3, #0]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	b00b      	add	sp, #44	; 0x2c
 800a6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6bc:	1e58      	subs	r0, r3, #1
 800a6be:	4684      	mov	ip, r0
 800a6c0:	fbb5 f7f2 	udiv	r7, r5, r2
 800a6c4:	fb02 5617 	mls	r6, r2, r7, r5
 800a6c8:	3628      	adds	r6, #40	; 0x28
 800a6ca:	446e      	add	r6, sp
 800a6cc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800a6d6:	462e      	mov	r6, r5
 800a6d8:	42b2      	cmp	r2, r6
 800a6da:	463d      	mov	r5, r7
 800a6dc:	f101 0101 	add.w	r1, r1, #1
 800a6e0:	d9ee      	bls.n	800a6c0 <__utoa+0x40>
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	545a      	strb	r2, [r3, r1]
 800a6e6:	1919      	adds	r1, r3, r4
 800a6e8:	1aa5      	subs	r5, r4, r2
 800a6ea:	42aa      	cmp	r2, r5
 800a6ec:	dae3      	bge.n	800a6b6 <__utoa+0x36>
 800a6ee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800a6f2:	780e      	ldrb	r6, [r1, #0]
 800a6f4:	3201      	adds	r2, #1
 800a6f6:	7006      	strb	r6, [r0, #0]
 800a6f8:	f801 5901 	strb.w	r5, [r1], #-1
 800a6fc:	e7f4      	b.n	800a6e8 <__utoa+0x68>
 800a6fe:	bf00      	nop
 800a700:	0800b3f6 	.word	0x0800b3f6

0800a704 <memset>:
 800a704:	4603      	mov	r3, r0
 800a706:	4402      	add	r2, r0
 800a708:	4293      	cmp	r3, r2
 800a70a:	d100      	bne.n	800a70e <memset+0xa>
 800a70c:	4770      	bx	lr
 800a70e:	f803 1b01 	strb.w	r1, [r3], #1
 800a712:	e7f9      	b.n	800a708 <memset+0x4>

0800a714 <__libc_init_array>:
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	2600      	movs	r6, #0
 800a718:	4d0c      	ldr	r5, [pc, #48]	; (800a74c <__libc_init_array+0x38>)
 800a71a:	4c0d      	ldr	r4, [pc, #52]	; (800a750 <__libc_init_array+0x3c>)
 800a71c:	1b64      	subs	r4, r4, r5
 800a71e:	10a4      	asrs	r4, r4, #2
 800a720:	42a6      	cmp	r6, r4
 800a722:	d109      	bne.n	800a738 <__libc_init_array+0x24>
 800a724:	f000 f830 	bl	800a788 <_init>
 800a728:	2600      	movs	r6, #0
 800a72a:	4d0a      	ldr	r5, [pc, #40]	; (800a754 <__libc_init_array+0x40>)
 800a72c:	4c0a      	ldr	r4, [pc, #40]	; (800a758 <__libc_init_array+0x44>)
 800a72e:	1b64      	subs	r4, r4, r5
 800a730:	10a4      	asrs	r4, r4, #2
 800a732:	42a6      	cmp	r6, r4
 800a734:	d105      	bne.n	800a742 <__libc_init_array+0x2e>
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	f855 3b04 	ldr.w	r3, [r5], #4
 800a73c:	4798      	blx	r3
 800a73e:	3601      	adds	r6, #1
 800a740:	e7ee      	b.n	800a720 <__libc_init_array+0xc>
 800a742:	f855 3b04 	ldr.w	r3, [r5], #4
 800a746:	4798      	blx	r3
 800a748:	3601      	adds	r6, #1
 800a74a:	e7f2      	b.n	800a732 <__libc_init_array+0x1e>
 800a74c:	0800b41c 	.word	0x0800b41c
 800a750:	0800b41c 	.word	0x0800b41c
 800a754:	0800b41c 	.word	0x0800b41c
 800a758:	0800b420 	.word	0x0800b420

0800a75c <strcpy>:
 800a75c:	4603      	mov	r3, r0
 800a75e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a762:	f803 2b01 	strb.w	r2, [r3], #1
 800a766:	2a00      	cmp	r2, #0
 800a768:	d1f9      	bne.n	800a75e <strcpy+0x2>
 800a76a:	4770      	bx	lr

0800a76c <memcpy>:
 800a76c:	440a      	add	r2, r1
 800a76e:	4291      	cmp	r1, r2
 800a770:	f100 33ff 	add.w	r3, r0, #4294967295
 800a774:	d100      	bne.n	800a778 <memcpy+0xc>
 800a776:	4770      	bx	lr
 800a778:	b510      	push	{r4, lr}
 800a77a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a77e:	4291      	cmp	r1, r2
 800a780:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a784:	d1f9      	bne.n	800a77a <memcpy+0xe>
 800a786:	bd10      	pop	{r4, pc}

0800a788 <_init>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	bf00      	nop
 800a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a78e:	bc08      	pop	{r3}
 800a790:	469e      	mov	lr, r3
 800a792:	4770      	bx	lr

0800a794 <_fini>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr
