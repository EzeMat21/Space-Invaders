
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  080092d0  080092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0c4  0800a0c4  00020824  2**0
                  CONTENTS
  4 .ARM          00000000  0800a0c4  0800a0c4  00020824  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a0c4  0800a0c4  00020824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0c4  0800a0c4  0001a0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0c8  0800a0c8  0001a0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000824  20000000  0800a0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002588  20000824  0800a8f0  00020824  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dac  0800a8f0  00022dac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020824  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002084d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000278b8  00000000  00000000  00020890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d99  00000000  00000000  00048148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012b43  00000000  00000000  0004cee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a38  00000000  00000000  0005fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016f2  00000000  00000000  00061460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bf78  00000000  00000000  00062b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a33e  00000000  00000000  0007eaca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e39b  00000000  00000000  000a8e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000573c  00000000  00000000  001471a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000824 	.word	0x20000824
 800012c:	00000000 	.word	0x00000000
 8000130:	080092b8 	.word	0x080092b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000828 	.word	0x20000828
 800014c:	080092b8 	.word	0x080092b8

08000150 <getPlayer>:
uint8_t debug[7];

//----------------------------------------------------------------------------------------------------------------------------------------------


player_t getPlayer(){
 8000150:	4603      	mov	r3, r0

	return Player;
 8000152:	4a03      	ldr	r2, [pc, #12]	; (8000160 <getPlayer+0x10>)
 8000154:	ca03      	ldmia	r2!, {r0, r1}
 8000156:	6018      	str	r0, [r3, #0]
 8000158:	6059      	str	r1, [r3, #4]
}
 800015a:	4618      	mov	r0, r3
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200008b4 	.word	0x200008b4

08000164 <getDisparo>:

uint8_t getDisparo(){
	return Disparo.disparo;
}
 8000164:	4b01      	ldr	r3, [pc, #4]	; (800016c <getDisparo+0x8>)
 8000166:	7898      	ldrb	r0, [r3, #2]
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	200008ac 	.word	0x200008ac

08000170 <getCantidad_Aliens_Vivos>:

uint8_t getCantidad_Aliens_Vivos(){
	return movimiento_Aliens.cantidad_aliens_vivos;
}
 8000170:	4b01      	ldr	r3, [pc, #4]	; (8000178 <getCantidad_Aliens_Vivos+0x8>)
 8000172:	7998      	ldrb	r0, [r3, #6]
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	200008f4 	.word	0x200008f4

0800017c <actualizarPantalla>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void actualizarPantalla(){
 800017c:	b508      	push	{r3, lr}

    SSD1306_UpdateScreen(); // update screen
 800017e:	f002 fb4d 	bl	800281c <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000182:	2000      	movs	r0, #0
 8000184:	f002 f81e 	bl	80021c4 <SSD1306_Fill>
}
 8000188:	bd08      	pop	{r3, pc}
	...

0800018c <playerInit>:


void playerInit(){

	Player.posicion_X = 64;
 800018c:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <playerInit+0x18>)
 800018e:	2240      	movs	r2, #64	; 0x40
 8000190:	801a      	strh	r2, [r3, #0]
	Player.vivo = true;
 8000192:	2201      	movs	r2, #1
 8000194:	709a      	strb	r2, [r3, #2]
	Player.puntaje = 0;
 8000196:	2200      	movs	r2, #0
 8000198:	809a      	strh	r2, [r3, #4]
	Player.vidas = 3;
 800019a:	2103      	movs	r1, #3
 800019c:	70d9      	strb	r1, [r3, #3]
	Player.nivel = 0;
 800019e:	719a      	strb	r2, [r3, #6]

}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	200008b4 	.word	0x200008b4

080001a8 <plotPlayer>:

void plotPlayer(uint8_t direccion){
 80001a8:	b500      	push	{lr}
 80001aa:	b083      	sub	sp, #12

	if(Player.vivo == true){
 80001ac:	4b1c      	ldr	r3, [pc, #112]	; (8000220 <plotPlayer+0x78>)
 80001ae:	789b      	ldrb	r3, [r3, #2]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d128      	bne.n	8000206 <plotPlayer+0x5e>

		if(direccion == derecha){
 80001b4:	2802      	cmp	r0, #2
 80001b6:	d00f      	beq.n	80001d8 <plotPlayer+0x30>
			else{
				Player.posicion_X = Player.posicion_X + 4;
			}

		}
		else if(direccion == izquierda){
 80001b8:	2803      	cmp	r0, #3
 80001ba:	d019      	beq.n	80001f0 <plotPlayer+0x48>
			else{
				Player.posicion_X = Player.posicion_X - 4;
			}
		}

		SSD1306_DrawBitmap(Player.posicion_X, 56, nave, 8,8,1);
 80001bc:	2301      	movs	r3, #1
 80001be:	9301      	str	r3, [sp, #4]
 80001c0:	2308      	movs	r3, #8
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <plotPlayer+0x7c>)
 80001c6:	2138      	movs	r1, #56	; 0x38
 80001c8:	4815      	ldr	r0, [pc, #84]	; (8000220 <plotPlayer+0x78>)
 80001ca:	f9b0 0000 	ldrsh.w	r0, [r0]
 80001ce:	f002 f831 	bl	8002234 <SSD1306_DrawBitmap>

		SSD1306_DrawBitmap(Player.posicion_X, 56, nave_explotada, 8,8,1);
	}


}
 80001d2:	b003      	add	sp, #12
 80001d4:	f85d fb04 	ldr.w	pc, [sp], #4
			if(Player.posicion_X >= 120){
 80001d8:	4b11      	ldr	r3, [pc, #68]	; (8000220 <plotPlayer+0x78>)
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	2b77      	cmp	r3, #119	; 0x77
 80001de:	d903      	bls.n	80001e8 <plotPlayer+0x40>
				Player.posicion_X = 120;
 80001e0:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <plotPlayer+0x78>)
 80001e2:	2278      	movs	r2, #120	; 0x78
 80001e4:	801a      	strh	r2, [r3, #0]
 80001e6:	e7e9      	b.n	80001bc <plotPlayer+0x14>
				Player.posicion_X = Player.posicion_X + 4;
 80001e8:	3304      	adds	r3, #4
 80001ea:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <plotPlayer+0x78>)
 80001ec:	8013      	strh	r3, [r2, #0]
 80001ee:	e7e5      	b.n	80001bc <plotPlayer+0x14>
			if(Player.posicion_X <= 0){
 80001f0:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <plotPlayer+0x78>)
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	b91b      	cbnz	r3, 80001fe <plotPlayer+0x56>
				Player.posicion_X = 0;
 80001f6:	4b0a      	ldr	r3, [pc, #40]	; (8000220 <plotPlayer+0x78>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	801a      	strh	r2, [r3, #0]
 80001fc:	e7de      	b.n	80001bc <plotPlayer+0x14>
				Player.posicion_X = Player.posicion_X - 4;
 80001fe:	3b04      	subs	r3, #4
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <plotPlayer+0x78>)
 8000202:	8013      	strh	r3, [r2, #0]
 8000204:	e7da      	b.n	80001bc <plotPlayer+0x14>
		SSD1306_DrawBitmap(Player.posicion_X, 56, nave_explotada, 8,8,1);
 8000206:	2301      	movs	r3, #1
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	2308      	movs	r3, #8
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	4a06      	ldr	r2, [pc, #24]	; (8000228 <plotPlayer+0x80>)
 8000210:	2138      	movs	r1, #56	; 0x38
 8000212:	4803      	ldr	r0, [pc, #12]	; (8000220 <plotPlayer+0x78>)
 8000214:	f9b0 0000 	ldrsh.w	r0, [r0]
 8000218:	f002 f80c 	bl	8002234 <SSD1306_DrawBitmap>
}
 800021c:	e7d9      	b.n	80001d2 <plotPlayer+0x2a>
 800021e:	bf00      	nop
 8000220:	200008b4 	.word	0x200008b4
 8000224:	08009ab8 	.word	0x08009ab8
 8000228:	08009ac0 	.word	0x08009ac0

0800022c <InvaderInit>:



void InvaderInit(){

	movimiento_Aliens.orientacion = mov_derecha;
 800022c:	4b25      	ldr	r3, [pc, #148]	; (80002c4 <InvaderInit+0x98>)
 800022e:	f04f 0c00 	mov.w	ip, #0
 8000232:	f883 c000 	strb.w	ip, [r3]
	movimiento_Aliens.alien_columna_derecha = NUM_ALIEN_COLUMNA - 1;
 8000236:	2206      	movs	r2, #6
 8000238:	715a      	strb	r2, [r3, #5]
	movimiento_Aliens.alien_columna_izquierda = 0;
 800023a:	f883 c004 	strb.w	ip, [r3, #4]

	//Inicializacion cantidad aliens vivos.
	movimiento_Aliens.cantidad_aliens_vivos = 21;
 800023e:	2215      	movs	r2, #21
 8000240:	719a      	strb	r2, [r3, #6]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000242:	f1bc 0f02 	cmp.w	ip, #2
 8000246:	d836      	bhi.n	80002b6 <InvaderInit+0x8a>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000248:	2300      	movs	r3, #0
 800024a:	2b06      	cmp	r3, #6
 800024c:	d82e      	bhi.n	80002ac <InvaderInit+0x80>
void InvaderInit(){
 800024e:	b410      	push	{r4}
			Alien[y][x].posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 8000250:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000254:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000258:	320b      	adds	r2, #11
 800025a:	4c1b      	ldr	r4, [pc, #108]	; (80002c8 <InvaderInit+0x9c>)
 800025c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8000260:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8000264:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000268:	4408      	add	r0, r1
 800026a:	1821      	adds	r1, r4, r0
 800026c:	5422      	strb	r2, [r4, r0]
			Alien[y][x].posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 800026e:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8000272:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8000276:	704a      	strb	r2, [r1, #1]
			Alien[y][x].vivo = true;
 8000278:	2201      	movs	r2, #1
 800027a:	708a      	strb	r2, [r1, #2]
			Alien[y][x].explosion = false;
 800027c:	2200      	movs	r2, #0
 800027e:	70ca      	strb	r2, [r1, #3]
			Alien[y][x].conteo_explosion = 2;
 8000280:	2202      	movs	r2, #2
 8000282:	710a      	strb	r2, [r1, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000284:	3301      	adds	r3, #1
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b06      	cmp	r3, #6
 800028a:	d9e1      	bls.n	8000250 <InvaderInit+0x24>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800028c:	f10c 0c01 	add.w	ip, ip, #1
 8000290:	fa5f fc8c 	uxtb.w	ip, ip
 8000294:	f1bc 0f02 	cmp.w	ip, #2
 8000298:	d801      	bhi.n	800029e <InvaderInit+0x72>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800029a:	2300      	movs	r3, #0
 800029c:	e7f4      	b.n	8000288 <InvaderInit+0x5c>
		}
	}


	//Reinicio velocidad horizontal de los aliens
	dificultad.velocidad_horizontal = 8;
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <InvaderInit+0xa0>)
 80002a0:	2208      	movs	r2, #8
 80002a2:	701a      	strb	r2, [r3, #0]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 80002a4:	2202      	movs	r2, #2
 80002a6:	711a      	strb	r2, [r3, #4]


}
 80002a8:	bc10      	pop	{r4}
 80002aa:	4770      	bx	lr
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002ac:	f10c 0c01 	add.w	ip, ip, #1
 80002b0:	fa5f fc8c 	uxtb.w	ip, ip
 80002b4:	e7c5      	b.n	8000242 <InvaderInit+0x16>
	dificultad.velocidad_horizontal = 8;
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <InvaderInit+0xa0>)
 80002b8:	2208      	movs	r2, #8
 80002ba:	701a      	strb	r2, [r3, #0]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 80002bc:	2202      	movs	r2, #2
 80002be:	711a      	strb	r2, [r3, #4]
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	200008f4 	.word	0x200008f4
 80002c8:	20000840 	.word	0x20000840
 80002cc:	200008ec 	.word	0x200008ec

080002d0 <disparoInit>:


void disparoInit(){

	//Inicializacion del disparo del Player
	Disparo.posicion_x = 0;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <disparoInit+0x10>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80002d6:	2132      	movs	r1, #50	; 0x32
 80002d8:	7059      	strb	r1, [r3, #1]
	Disparo.disparo = false;
 80002da:	709a      	strb	r2, [r3, #2]

}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	200008ac 	.word	0x200008ac

080002e4 <disparar>:


void disparar(){
 80002e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002e8:	b083      	sub	sp, #12

			if(Disparo.disparo == true){
 80002ea:	4b65      	ldr	r3, [pc, #404]	; (8000480 <disparar+0x19c>)
 80002ec:	789b      	ldrb	r3, [r3, #2]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d001      	beq.n	80002f6 <disparar+0x12>
					tamano_alien = TAMANO_ALIEN_BOTTOM_ANCHURA;
					break;

				}

				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002f2:	2700      	movs	r7, #0
 80002f4:	e0b4      	b.n	8000460 <disparar+0x17c>
				SSD1306_DrawLine(Disparo.posicion_x + 4, Disparo.posicion_y, Disparo.posicion_x + 4, Disparo.posicion_y + 2, 1);
 80002f6:	4c62      	ldr	r4, [pc, #392]	; (8000480 <disparar+0x19c>)
 80002f8:	7820      	ldrb	r0, [r4, #0]
 80002fa:	3004      	adds	r0, #4
 80002fc:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8000300:	b289      	uxth	r1, r1
 8000302:	1c8b      	adds	r3, r1, #2
 8000304:	2201      	movs	r2, #1
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	b29b      	uxth	r3, r3
 800030a:	4602      	mov	r2, r0
 800030c:	f002 f841 	bl	8002392 <SSD1306_DrawLine>
				Disparo.posicion_y = Disparo.posicion_y - VELOCIDAD_DISPARO_PLAYER;
 8000310:	7863      	ldrb	r3, [r4, #1]
 8000312:	3b04      	subs	r3, #4
 8000314:	b25b      	sxtb	r3, r3
 8000316:	7063      	strb	r3, [r4, #1]
				if(Disparo.posicion_y <= 0){
 8000318:	2b00      	cmp	r3, #0
 800031a:	dcea      	bgt.n	80002f2 <disparar+0xe>
					Disparo.disparo = false;
 800031c:	2200      	movs	r2, #0
 800031e:	70a2      	strb	r2, [r4, #2]
					Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 8000320:	2232      	movs	r2, #50	; 0x32
 8000322:	7062      	strb	r2, [r4, #1]
 8000324:	e7e5      	b.n	80002f2 <disparar+0xe>
					tamano_alien = TAMANO_ALIEN_MIDDLE_ANCHURA;
 8000326:	f04f 080b 	mov.w	r8, #11
 800032a:	e0a4      	b.n	8000476 <disparar+0x192>
				switch(y){
 800032c:	f04f 0808 	mov.w	r8, #8
 8000330:	e0a1      	b.n	8000476 <disparar+0x192>
									switch(y){
									case 0:
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_TOP + Player.nivel);
										break;
									case 1:
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_MIDDLE + Player.nivel);
 8000332:	4a54      	ldr	r2, [pc, #336]	; (8000484 <disparar+0x1a0>)
 8000334:	8893      	ldrh	r3, [r2, #4]
 8000336:	f892 c006 	ldrb.w	ip, [r2, #6]
 800033a:	4463      	add	r3, ip
 800033c:	3314      	adds	r3, #20
 800033e:	8093      	strh	r3, [r2, #4]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(Alien[y][x].explosion == true){
 8000340:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000344:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000348:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800034c:	4413      	add	r3, r2
 800034e:	4a4e      	ldr	r2, [pc, #312]	; (8000488 <disparar+0x1a4>)
 8000350:	4413      	add	r3, r2
 8000352:	78db      	ldrb	r3, [r3, #3]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d067      	beq.n	8000428 <disparar+0x144>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000358:	3401      	adds	r4, #1
 800035a:	b2e4      	uxtb	r4, r4
 800035c:	2c06      	cmp	r4, #6
 800035e:	d87d      	bhi.n	800045c <disparar+0x178>
					if( (Disparo.posicion_x + 1 >= Alien[y][x].posicion_X) &  (Disparo.posicion_x + 1 <= (Alien[y][x].posicion_X + tamano_alien))
 8000360:	4947      	ldr	r1, [pc, #284]	; (8000480 <disparar+0x19c>)
 8000362:	f891 c000 	ldrb.w	ip, [r1]
 8000366:	f10c 0e01 	add.w	lr, ip, #1
 800036a:	4626      	mov	r6, r4
 800036c:	4846      	ldr	r0, [pc, #280]	; (8000488 <disparar+0x1a4>)
 800036e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000372:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000376:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800037a:	4413      	add	r3, r2
 800037c:	18c2      	adds	r2, r0, r3
 800037e:	56c0      	ldrsb	r0, [r0, r3]
 8000380:	eb08 0900 	add.w	r9, r8, r0
 8000384:	4586      	cmp	lr, r0
 8000386:	bfb4      	ite	lt
 8000388:	2300      	movlt	r3, #0
 800038a:	2301      	movge	r3, #1
 800038c:	45cc      	cmp	ip, r9
 800038e:	bfa8      	it	ge
 8000390:	2300      	movge	r3, #0
							& ((Disparo.posicion_y) >= Alien[y][x].posicion_Y) & (Disparo.posicion_y <= Alien[y][x].posicion_Y + TAMANO_ALIEN_ALTURA)){
 8000392:	f991 c001 	ldrsb.w	ip, [r1, #1]
 8000396:	7851      	ldrb	r1, [r2, #1]
 8000398:	f101 0208 	add.w	r2, r1, #8
 800039c:	4594      	cmp	ip, r2
 800039e:	bfcc      	ite	gt
 80003a0:	2200      	movgt	r2, #0
 80003a2:	2201      	movle	r2, #1
					if( (Disparo.posicion_x + 1 >= Alien[y][x].posicion_X) &  (Disparo.posicion_x + 1 <= (Alien[y][x].posicion_X + tamano_alien))
 80003a4:	458c      	cmp	ip, r1
 80003a6:	bfb4      	ite	lt
 80003a8:	2300      	movlt	r3, #0
 80003aa:	f003 0301 	andge.w	r3, r3, #1
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0c6      	beq.n	8000340 <disparar+0x5c>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	d0c4      	beq.n	8000340 <disparar+0x5c>
								if(Alien[y][x].vivo == true){
 80003b6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80003ba:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80003be:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80003c2:	4413      	add	r3, r2
 80003c4:	4a30      	ldr	r2, [pc, #192]	; (8000488 <disparar+0x1a4>)
 80003c6:	4413      	add	r3, r2
 80003c8:	789b      	ldrb	r3, [r3, #2]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d1b8      	bne.n	8000340 <disparar+0x5c>
									Alien[y][x].vivo = false;
 80003ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80003d2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80003d6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80003da:	4413      	add	r3, r2
 80003dc:	4a2a      	ldr	r2, [pc, #168]	; (8000488 <disparar+0x1a4>)
 80003de:	4413      	add	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	709a      	strb	r2, [r3, #2]
									Alien[y][x].explosion = true;
 80003e4:	f04f 0c01 	mov.w	ip, #1
 80003e8:	f883 c003 	strb.w	ip, [r3, #3]
									Disparo.disparo = false;
 80003ec:	4b24      	ldr	r3, [pc, #144]	; (8000480 <disparar+0x19c>)
 80003ee:	709a      	strb	r2, [r3, #2]
									Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80003f0:	2232      	movs	r2, #50	; 0x32
 80003f2:	705a      	strb	r2, [r3, #1]
									movimiento_Aliens.cantidad_aliens_vivos -=1;
 80003f4:	4a25      	ldr	r2, [pc, #148]	; (800048c <disparar+0x1a8>)
 80003f6:	7993      	ldrb	r3, [r2, #6]
 80003f8:	3b01      	subs	r3, #1
 80003fa:	7193      	strb	r3, [r2, #6]
									switch(y){
 80003fc:	4567      	cmp	r7, ip
 80003fe:	d098      	beq.n	8000332 <disparar+0x4e>
 8000400:	2f02      	cmp	r7, #2
 8000402:	d009      	beq.n	8000418 <disparar+0x134>
 8000404:	2f00      	cmp	r7, #0
 8000406:	d19b      	bne.n	8000340 <disparar+0x5c>
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_TOP + Player.nivel);
 8000408:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <disparar+0x1a0>)
 800040a:	8893      	ldrh	r3, [r2, #4]
 800040c:	f892 c006 	ldrb.w	ip, [r2, #6]
 8000410:	4463      	add	r3, ip
 8000412:	331e      	adds	r3, #30
 8000414:	8093      	strh	r3, [r2, #4]
										break;
 8000416:	e793      	b.n	8000340 <disparar+0x5c>
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_BOTTOM + Player.nivel);
 8000418:	4a1a      	ldr	r2, [pc, #104]	; (8000484 <disparar+0x1a0>)
 800041a:	8893      	ldrh	r3, [r2, #4]
 800041c:	f892 c006 	ldrb.w	ip, [r2, #6]
 8000420:	4463      	add	r3, ip
 8000422:	330a      	adds	r3, #10
 8000424:	8093      	strh	r3, [r2, #4]
										break;
 8000426:	e78b      	b.n	8000340 <disparar+0x5c>
						SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,explosion,16,8,1);
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	2308      	movs	r3, #8
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2310      	movs	r3, #16
 8000430:	4a17      	ldr	r2, [pc, #92]	; (8000490 <disparar+0x1ac>)
 8000432:	f001 feff 	bl	8002234 <SSD1306_DrawBitmap>
						Alien[y][x].conteo_explosion--;
 8000436:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800043a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800043e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000442:	4413      	add	r3, r2
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <disparar+0x1a4>)
 8000446:	441a      	add	r2, r3
 8000448:	7913      	ldrb	r3, [r2, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	b2db      	uxtb	r3, r3
 800044e:	7113      	strb	r3, [r2, #4]

						if(Alien[y][x].conteo_explosion == 0){
 8000450:	2b00      	cmp	r3, #0
 8000452:	d181      	bne.n	8000358 <disparar+0x74>
							Alien[y][x].explosion = false;
 8000454:	4613      	mov	r3, r2
 8000456:	2200      	movs	r2, #0
 8000458:	70da      	strb	r2, [r3, #3]
 800045a:	e77d      	b.n	8000358 <disparar+0x74>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800045c:	3701      	adds	r7, #1
 800045e:	b2ff      	uxtb	r7, r7
 8000460:	2f02      	cmp	r7, #2
 8000462:	d80a      	bhi.n	800047a <disparar+0x196>
				switch(y){
 8000464:	463d      	mov	r5, r7
 8000466:	2f01      	cmp	r7, #1
 8000468:	f43f af5d 	beq.w	8000326 <disparar+0x42>
 800046c:	2f02      	cmp	r7, #2
 800046e:	f47f af5d 	bne.w	800032c <disparar+0x48>
					tamano_alien = TAMANO_ALIEN_BOTTOM_ANCHURA;
 8000472:	f04f 080c 	mov.w	r8, #12
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000476:	2400      	movs	r4, #0
 8000478:	e770      	b.n	800035c <disparar+0x78>



				}
			}
}
 800047a:	b003      	add	sp, #12
 800047c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000480:	200008ac 	.word	0x200008ac
 8000484:	200008b4 	.word	0x200008b4
 8000488:	20000840 	.word	0x20000840
 800048c:	200008f4 	.word	0x200008f4
 8000490:	08009aa0 	.word	0x08009aa0

08000494 <disparoAliens>:


void disparoAliens(){


	if(movimiento_Aliens.cantidad_aliens_vivos != 0){	//Si no hay aliens vivos.
 8000494:	4b41      	ldr	r3, [pc, #260]	; (800059c <disparoAliens+0x108>)
 8000496:	799b      	ldrb	r3, [r3, #6]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d07e      	beq.n	800059a <disparoAliens+0x106>
void disparoAliens(){
 800049c:	b510      	push	{r4, lr}
 800049e:	b082      	sub	sp, #8

				if(Disparo_Aliens.disparo == true){
 80004a0:	4b3f      	ldr	r3, [pc, #252]	; (80005a0 <disparoAliens+0x10c>)
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d043      	beq.n	8000530 <disparoAliens+0x9c>
					uint8_t flag = false;

					while(flag != true){


						uint8_t fila = rand() % NUM_ALIEN_FILA;
 80004a8:	f007 fec0 	bl	800822c <rand>
 80004ac:	4c3d      	ldr	r4, [pc, #244]	; (80005a4 <disparoAliens+0x110>)
 80004ae:	fb84 3400 	smull	r3, r4, r4, r0
 80004b2:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 80004b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80004ba:	1b04      	subs	r4, r0, r4
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 80004bc:	f007 feb6 	bl	800822c <rand>
 80004c0:	4a39      	ldr	r2, [pc, #228]	; (80005a8 <disparoAliens+0x114>)
 80004c2:	fb82 3200 	smull	r3, r2, r2, r0
 80004c6:	4402      	add	r2, r0
 80004c8:	17c3      	asrs	r3, r0, #31
 80004ca:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80004ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80004d2:	1ac3      	subs	r3, r0, r3

						if(Alien[fila][columna].vivo == true){
 80004d4:	b2e4      	uxtb	r4, r4
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80004dc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80004e0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80004e4:	4411      	add	r1, r2
 80004e6:	4a31      	ldr	r2, [pc, #196]	; (80005ac <disparoAliens+0x118>)
 80004e8:	440a      	add	r2, r1
 80004ea:	7892      	ldrb	r2, [r2, #2]
 80004ec:	2a01      	cmp	r2, #1
 80004ee:	d1db      	bne.n	80004a8 <disparoAliens+0x14>
							flag = true;
							Disparo_Aliens.disparo = true;
 80004f0:	4a2b      	ldr	r2, [pc, #172]	; (80005a0 <disparoAliens+0x10c>)
 80004f2:	2101      	movs	r1, #1
 80004f4:	7091      	strb	r1, [r2, #2]

							Disparo_Aliens.posicion_x = Alien[fila][columna].posicion_X + (TAMANO_ALIEN/2);
 80004f6:	492d      	ldr	r1, [pc, #180]	; (80005ac <disparoAliens+0x118>)
 80004f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80004fc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000500:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8000504:	4423      	add	r3, r4
 8000506:	18c8      	adds	r0, r1, r3
 8000508:	5ccb      	ldrb	r3, [r1, r3]
 800050a:	3304      	adds	r3, #4
 800050c:	7013      	strb	r3, [r2, #0]
							Disparo_Aliens.posicion_y = Alien[fila][columna].posicion_Y + (TAMANO_ALIEN/2);
 800050e:	7843      	ldrb	r3, [r0, #1]
 8000510:	3304      	adds	r3, #4
 8000512:	7053      	strb	r3, [r2, #1]
						}

					}
				}

				SSD1306_DrawBitmap(Disparo_Aliens.posicion_x, Disparo_Aliens.posicion_y, AlienBombGfx, 2, 4, 1);
 8000514:	4822      	ldr	r0, [pc, #136]	; (80005a0 <disparoAliens+0x10c>)
 8000516:	2301      	movs	r3, #1
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2304      	movs	r3, #4
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2302      	movs	r3, #2
 8000520:	4a23      	ldr	r2, [pc, #140]	; (80005b0 <disparoAliens+0x11c>)
 8000522:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8000526:	7800      	ldrb	r0, [r0, #0]
 8000528:	f001 fe84 	bl	8002234 <SSD1306_DrawBitmap>

	}

}
 800052c:	b002      	add	sp, #8
 800052e:	bd10      	pop	{r4, pc}
					Disparo_Aliens.posicion_y = Disparo_Aliens.posicion_y + dificultad.velocidad_disparo_aliens;
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <disparoAliens+0x10c>)
 8000532:	7853      	ldrb	r3, [r2, #1]
 8000534:	491f      	ldr	r1, [pc, #124]	; (80005b4 <disparoAliens+0x120>)
 8000536:	7889      	ldrb	r1, [r1, #2]
 8000538:	440b      	add	r3, r1
 800053a:	b25b      	sxtb	r3, r3
 800053c:	7053      	strb	r3, [r2, #1]
					if( (Disparo_Aliens.posicion_x + 1 >= Player.posicion_X) &  (Disparo_Aliens.posicion_x + 1 <= Player.posicion_X + TAMANO_PLAYER_ANCHURA)
 800053e:	7811      	ldrb	r1, [r2, #0]
 8000540:	1c4a      	adds	r2, r1, #1
 8000542:	481d      	ldr	r0, [pc, #116]	; (80005b8 <disparoAliens+0x124>)
 8000544:	8800      	ldrh	r0, [r0, #0]
 8000546:	1d44      	adds	r4, r0, #5
 8000548:	4282      	cmp	r2, r0
 800054a:	bfb4      	ite	lt
 800054c:	2200      	movlt	r2, #0
 800054e:	2201      	movge	r2, #1
 8000550:	42a1      	cmp	r1, r4
 8000552:	bfc8      	it	gt
 8000554:	2200      	movgt	r2, #0
							& ((Disparo_Aliens.posicion_y) >= TOTAL_PIXELES_Y-TAMANO_NAVE_Y) & (Disparo.posicion_y <= TOTAL_PIXELES_Y)){
 8000556:	4919      	ldr	r1, [pc, #100]	; (80005bc <disparoAliens+0x128>)
 8000558:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800055c:	2940      	cmp	r1, #64	; 0x40
 800055e:	bfcc      	ite	gt
 8000560:	2100      	movgt	r1, #0
 8000562:	2101      	movle	r1, #1
					if( (Disparo_Aliens.posicion_x + 1 >= Player.posicion_X) &  (Disparo_Aliens.posicion_x + 1 <= Player.posicion_X + TAMANO_PLAYER_ANCHURA)
 8000564:	2b37      	cmp	r3, #55	; 0x37
 8000566:	bfd4      	ite	le
 8000568:	2200      	movle	r2, #0
 800056a:	f002 0201 	andgt.w	r2, r2, #1
 800056e:	b172      	cbz	r2, 800058e <disparoAliens+0xfa>
 8000570:	b169      	cbz	r1, 800058e <disparoAliens+0xfa>
						Disparo_Aliens.disparo = false;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <disparoAliens+0x10c>)
 8000574:	2200      	movs	r2, #0
 8000576:	709a      	strb	r2, [r3, #2]
						Player.vidas = Player.vidas - 1;
 8000578:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <disparoAliens+0x124>)
 800057a:	78d3      	ldrb	r3, [r2, #3]
 800057c:	3b01      	subs	r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	70d3      	strb	r3, [r2, #3]
						if(Player.vidas == 0){
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1c6      	bne.n	8000514 <disparoAliens+0x80>
							Player.vivo = false;
 8000586:	4613      	mov	r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	709a      	strb	r2, [r3, #2]
 800058c:	e7c2      	b.n	8000514 <disparoAliens+0x80>
					else if(Disparo_Aliens.posicion_y >= 60){
 800058e:	2b3b      	cmp	r3, #59	; 0x3b
 8000590:	ddc0      	ble.n	8000514 <disparoAliens+0x80>
						Disparo_Aliens.disparo = false;
 8000592:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <disparoAliens+0x10c>)
 8000594:	2200      	movs	r2, #0
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	e7bc      	b.n	8000514 <disparoAliens+0x80>
 800059a:	4770      	bx	lr
 800059c:	200008f4 	.word	0x200008f4
 80005a0:	200008b0 	.word	0x200008b0
 80005a4:	55555556 	.word	0x55555556
 80005a8:	92492493 	.word	0x92492493
 80005ac:	20000840 	.word	0x20000840
 80005b0:	08009a3c 	.word	0x08009a3c
 80005b4:	200008ec 	.word	0x200008ec
 80005b8:	200008b4 	.word	0x200008b4
 80005bc:	200008ac 	.word	0x200008ac

080005c0 <BasesProcesarDisparo>:


}


void BasesProcesarDisparo(disparo_t *disparo, uint8_t condicion){
 80005c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	4604      	mov	r4, r0
 80005c8:	460d      	mov	r5, r1

	uint16_t resultado_or[3] = {0x00, 0x00, 0x00};
 80005ca:	2100      	movs	r1, #0
 80005cc:	f8ad 1000 	strh.w	r1, [sp]
 80005d0:	f8ad 1002 	strh.w	r1, [sp, #2]
 80005d4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint16_t bases_16bits;
	uint8_t k = 0, conteo = 0;

	for(uint8_t i=0;i<3;i++){
 80005d8:	e024      	b.n	8000624 <BasesProcesarDisparo+0x64>
	    for(uint8_t j=0; j<16;j++){
	        resultado_or[i] |= (j % 2 == 0) ? (bases[i][j] << 8) : bases[i][j];
 80005da:	486d      	ldr	r0, [pc, #436]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 80005dc:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80005e0:	f810 e003 	ldrb.w	lr, [r0, r3]
 80005e4:	a802      	add	r0, sp, #8
 80005e6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80005ea:	ea4c 0c0e 	orr.w	ip, ip, lr
 80005ee:	f822 cc08 	strh.w	ip, [r2, #-8]
	    for(uint8_t j=0; j<16;j++){
 80005f2:	3301      	adds	r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b0f      	cmp	r3, #15
 80005f8:	d812      	bhi.n	8000620 <BasesProcesarDisparo+0x60>
	        resultado_or[i] |= (j % 2 == 0) ? (bases[i][j] << 8) : bases[i][j];
 80005fa:	460a      	mov	r2, r1
 80005fc:	a802      	add	r0, sp, #8
 80005fe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8000602:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8000606:	f013 0f01 	tst.w	r3, #1
 800060a:	d1e6      	bne.n	80005da <BasesProcesarDisparo+0x1a>
 800060c:	4860      	ldr	r0, [pc, #384]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 800060e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8000612:	f810 e003 	ldrb.w	lr, [r0, r3]
 8000616:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 800061a:	fa0f fe8e 	sxth.w	lr, lr
 800061e:	e7e1      	b.n	80005e4 <BasesProcesarDisparo+0x24>
	for(uint8_t i=0;i<3;i++){
 8000620:	3101      	adds	r1, #1
 8000622:	b2c9      	uxtb	r1, r1
 8000624:	2902      	cmp	r1, #2
 8000626:	d801      	bhi.n	800062c <BasesProcesarDisparo+0x6c>
	    for(uint8_t j=0; j<16;j++){
 8000628:	2300      	movs	r3, #0
 800062a:	e7e4      	b.n	80005f6 <BasesProcesarDisparo+0x36>

	    }
	}

	if (disparo->posicion_y >= LIMITE_ARRIBA_BASE && disparo->posicion_y < LIMITE_ABAJO_BASE) {
 800062c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000630:	3b26      	subs	r3, #38	; 0x26
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b06      	cmp	r3, #6
 8000636:	f200 80a7 	bhi.w	8000788 <BasesProcesarDisparo+0x1c8>

		uint8_t pos_x = disparo->posicion_x;
 800063a:	7823      	ldrb	r3, [r4, #0]
	    if (condicion == 1) pos_x += POS_OFF_DISPARO_PLAYER;
 800063c:	2d01      	cmp	r5, #1
 800063e:	d001      	beq.n	8000644 <BasesProcesarDisparo+0x84>

	    for (int i = 0; i < 3; ++i) {
 8000640:	2600      	movs	r6, #0
 8000642:	e076      	b.n	8000732 <BasesProcesarDisparo+0x172>
	    if (condicion == 1) pos_x += POS_OFF_DISPARO_PLAYER;
 8000644:	3304      	adds	r3, #4
 8000646:	b2db      	uxtb	r3, r3
 8000648:	e7fa      	b.n	8000640 <BasesProcesarDisparo+0x80>
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO - 1 - desplazamiento));
	            }

	            if ((resultado & resultado_or[i]) != 0) {

	            	disparo->disparo = false;
 800064a:	2300      	movs	r3, #0
 800064c:	70a3      	strb	r3, [r4, #2]


	            	uint8_t desplazamiento_horiz = (rand() % RANDOM_MAX_3) + DESPLAZAMIENTO_MINIMO;
 800064e:	f007 fded 	bl	800822c <rand>
 8000652:	4b50      	ldr	r3, [pc, #320]	; (8000794 <BasesProcesarDisparo+0x1d4>)
 8000654:	fb83 1300 	smull	r1, r3, r3, r0
 8000658:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800065c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000660:	1ac3      	subs	r3, r0, r3
 8000662:	b2d9      	uxtb	r1, r3
 8000664:	3102      	adds	r1, #2
 8000666:	b2c9      	uxtb	r1, r1
	            	uint8_t jmin = 2;

	            	if (condicion != 0) {
 8000668:	b11d      	cbz	r5, 8000672 <BasesProcesarDisparo+0xb2>
	                    disparo->posicion_y = POSICION_INICIAL_DISPARO;
 800066a:	2332      	movs	r3, #50	; 0x32
 800066c:	7063      	strb	r3, [r4, #1]
	                    //disparo->numero_disparos = 0;
	                    jmin = 1;
 800066e:	2201      	movs	r2, #1
 8000670:	e012      	b.n	8000698 <BasesProcesarDisparo+0xd8>
	            	uint8_t jmin = 2;
 8000672:	2202      	movs	r2, #2
	                }


	                for (uint8_t j=jmin; j<desplazamiento_horiz; j++) {
 8000674:	e010      	b.n	8000698 <BasesProcesarDisparo+0xd8>
	                    resultado += (1 << (OFFSET_DESPLAZAMIENTO + j - desplazamiento));
 8000676:	f102 030f 	add.w	r3, r2, #15
 800067a:	1bdb      	subs	r3, r3, r7
 800067c:	2001      	movs	r0, #1
 800067e:	fa00 f303 	lsl.w	r3, r0, r3
 8000682:	4443      	add	r3, r8
 8000684:	b29b      	uxth	r3, r3
	                    resultado += (1 << (OFFSET_DESPLAZAMIENTO - j - desplazamiento));
 8000686:	f1c2 040f 	rsb	r4, r2, #15
 800068a:	1be4      	subs	r4, r4, r7
 800068c:	40a0      	lsls	r0, r4
 800068e:	4403      	add	r3, r0
 8000690:	fa1f f883 	uxth.w	r8, r3
	                for (uint8_t j=jmin; j<desplazamiento_horiz; j++) {
 8000694:	3201      	adds	r2, #1
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	428a      	cmp	r2, r1
 800069a:	d3ec      	bcc.n	8000676 <BasesProcesarDisparo+0xb6>
	                }


	                for (uint8_t j=0; j<16; j++) {
 800069c:	2300      	movs	r3, #0
	uint8_t k = 0, conteo = 0;
 800069e:	461a      	mov	r2, r3
 80006a0:	e023      	b.n	80006ea <BasesProcesarDisparo+0x12a>
	                                bases[i][j-1] &= ~(resultado>>8);
	                                bases[i][j] &= ~resultado;
	                                conteo++;
	                            }
	                        } else {
	                            bases_16bits = (bases[i][15-j]<<8) + (bases[i][15-j+1] & 0xff);
 80006a2:	f1c3 0c0f 	rsb	ip, r3, #15
 80006a6:	493a      	ldr	r1, [pc, #232]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 80006a8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80006ac:	f811 000c 	ldrb.w	r0, [r1, ip]
 80006b0:	f1c3 0410 	rsb	r4, r3, #16
 80006b4:	5d09      	ldrb	r1, [r1, r4]
 80006b6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	                            k++;
	                            if ((bases_16bits & resultado) != 0) {
 80006ba:	ea11 0f08 	tst.w	r1, r8
 80006be:	d010      	beq.n	80006e2 <BasesProcesarDisparo+0x122>
	                                bases[i][15-j] &= ~(resultado>>8);
 80006c0:	ea6f 2718 	mvn.w	r7, r8, lsr #8
 80006c4:	b27f      	sxtb	r7, r7
 80006c6:	4932      	ldr	r1, [pc, #200]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 80006c8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80006cc:	4038      	ands	r0, r7
 80006ce:	f801 000c 	strb.w	r0, [r1, ip]
	                                bases[i][15-j+1] &= ~resultado;
 80006d2:	ea6f 0708 	mvn.w	r7, r8
 80006d6:	b27f      	sxtb	r7, r7
 80006d8:	5d08      	ldrb	r0, [r1, r4]
 80006da:	4038      	ands	r0, r7
 80006dc:	5508      	strb	r0, [r1, r4]
	                                conteo++;
 80006de:	3201      	adds	r2, #1
 80006e0:	b2d2      	uxtb	r2, r2
	                            }
	                        }
	                        if (conteo == DESTRUCCION_MAXIMA_VERTICAL) break;
 80006e2:	2a02      	cmp	r2, #2
 80006e4:	d050      	beq.n	8000788 <BasesProcesarDisparo+0x1c8>
	                for (uint8_t j=0; j<16; j++) {
 80006e6:	3301      	adds	r3, #1
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b0f      	cmp	r3, #15
 80006ec:	d84c      	bhi.n	8000788 <BasesProcesarDisparo+0x1c8>
	                    if (j % 2 != 0) {
 80006ee:	f013 0f01 	tst.w	r3, #1
 80006f2:	d0f8      	beq.n	80006e6 <BasesProcesarDisparo+0x126>
	                        if (condicion == 0) {
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d1d4      	bne.n	80006a2 <BasesProcesarDisparo+0xe2>
	                            bases_16bits = (bases[i][j-1]<<8) + (bases[i][j] & 0xff);
 80006f8:	1e5f      	subs	r7, r3, #1
 80006fa:	4925      	ldr	r1, [pc, #148]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 80006fc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8000700:	5dc8      	ldrb	r0, [r1, r7]
 8000702:	5cc9      	ldrb	r1, [r1, r3]
 8000704:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	                            if ((bases_16bits & resultado) != 0) {
 8000708:	ea11 0f08 	tst.w	r1, r8
 800070c:	d0e9      	beq.n	80006e2 <BasesProcesarDisparo+0x122>
	                                bases[i][j-1] &= ~(resultado>>8);
 800070e:	ea6f 2418 	mvn.w	r4, r8, lsr #8
 8000712:	b264      	sxtb	r4, r4
 8000714:	491e      	ldr	r1, [pc, #120]	; (8000790 <BasesProcesarDisparo+0x1d0>)
 8000716:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800071a:	4020      	ands	r0, r4
 800071c:	55c8      	strb	r0, [r1, r7]
	                                bases[i][j] &= ~resultado;
 800071e:	ea6f 0408 	mvn.w	r4, r8
 8000722:	b264      	sxtb	r4, r4
 8000724:	5cc8      	ldrb	r0, [r1, r3]
 8000726:	4020      	ands	r0, r4
 8000728:	54c8      	strb	r0, [r1, r3]
	                                conteo++;
 800072a:	3201      	adds	r2, #1
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	e7d8      	b.n	80006e2 <BasesProcesarDisparo+0x122>
	    for (int i = 0; i < 3; ++i) {
 8000730:	3601      	adds	r6, #1
 8000732:	2e02      	cmp	r6, #2
 8000734:	dc28      	bgt.n	8000788 <BasesProcesarDisparo+0x1c8>
	        if (pos_x >= limites_izquierda[i] && pos_x <= limites_derecha[i]) {
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <BasesProcesarDisparo+0x1d8>)
 8000738:	5d92      	ldrb	r2, [r2, r6]
 800073a:	429a      	cmp	r2, r3
 800073c:	d8f8      	bhi.n	8000730 <BasesProcesarDisparo+0x170>
 800073e:	4917      	ldr	r1, [pc, #92]	; (800079c <BasesProcesarDisparo+0x1dc>)
 8000740:	5d89      	ldrb	r1, [r1, r6]
 8000742:	4299      	cmp	r1, r3
 8000744:	d3f4      	bcc.n	8000730 <BasesProcesarDisparo+0x170>
	        	uint8_t desplazamiento = pos_x - limites_izquierda[i];
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	b2df      	uxtb	r7, r3
	            uint16_t resultado = (1 << (OFFSET_DESPLAZAMIENTO - desplazamiento));
 800074a:	f1c7 030f 	rsb	r3, r7, #15
 800074e:	f04f 0801 	mov.w	r8, #1
 8000752:	fa08 f803 	lsl.w	r8, r8, r3
 8000756:	fa1f f888 	uxth.w	r8, r8
	            if (condicion == 0){
 800075a:	b965      	cbnz	r5, 8000776 <BasesProcesarDisparo+0x1b6>
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO + 1 - desplazamiento));
 800075c:	f1c7 0310 	rsb	r3, r7, #16
 8000760:	2201      	movs	r2, #1
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	4443      	add	r3, r8
 8000768:	b29b      	uxth	r3, r3
	            	resultado += (1 << (OFFSET_DESPLAZAMIENTO - 1 - desplazamiento));
 800076a:	f1c7 010e 	rsb	r1, r7, #14
 800076e:	408a      	lsls	r2, r1
 8000770:	4413      	add	r3, r2
 8000772:	fa1f f883 	uxth.w	r8, r3
	            if ((resultado & resultado_or[i]) != 0) {
 8000776:	ab02      	add	r3, sp, #8
 8000778:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800077c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
 8000780:	ea13 0f08 	tst.w	r3, r8
 8000784:	f47f af61 	bne.w	800064a <BasesProcesarDisparo+0x8a>
	            break;
	        }
	    }
	}

}
 8000788:	b002      	add	sp, #8
 800078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800078e:	bf00      	nop
 8000790:	200008bc 	.word	0x200008bc
 8000794:	55555556 	.word	0x55555556
 8000798:	08009ab4 	.word	0x08009ab4
 800079c:	08009ab0 	.word	0x08009ab0

080007a0 <plotBases>:
void plotBases(){
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	b082      	sub	sp, #8
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE1, LIMITE_ABAJO_BASE, bases[0], 16, 8, 1);
 80007a4:	4d12      	ldr	r5, [pc, #72]	; (80007f0 <plotBases+0x50>)
 80007a6:	2401      	movs	r4, #1
 80007a8:	9401      	str	r4, [sp, #4]
 80007aa:	2608      	movs	r6, #8
 80007ac:	9600      	str	r6, [sp, #0]
 80007ae:	2310      	movs	r3, #16
 80007b0:	462a      	mov	r2, r5
 80007b2:	212d      	movs	r1, #45	; 0x2d
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fd3d 	bl	8002234 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE2, LIMITE_ABAJO_BASE, bases[1], 16, 8, 1);
 80007ba:	9401      	str	r4, [sp, #4]
 80007bc:	9600      	str	r6, [sp, #0]
 80007be:	2310      	movs	r3, #16
 80007c0:	18ea      	adds	r2, r5, r3
 80007c2:	212d      	movs	r1, #45	; 0x2d
 80007c4:	2038      	movs	r0, #56	; 0x38
 80007c6:	f001 fd35 	bl	8002234 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE3, LIMITE_ABAJO_BASE, bases[2], 16, 8, 1);
 80007ca:	9401      	str	r4, [sp, #4]
 80007cc:	9600      	str	r6, [sp, #0]
 80007ce:	2310      	movs	r3, #16
 80007d0:	f105 0220 	add.w	r2, r5, #32
 80007d4:	212d      	movs	r1, #45	; 0x2d
 80007d6:	2060      	movs	r0, #96	; 0x60
 80007d8:	f001 fd2c 	bl	8002234 <SSD1306_DrawBitmap>
	BasesProcesarDisparo(&Disparo_Aliens, 0);
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <plotBases+0x54>)
 80007e0:	f7ff feee 	bl	80005c0 <BasesProcesarDisparo>
	BasesProcesarDisparo(&Disparo, 1);
 80007e4:	4621      	mov	r1, r4
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <plotBases+0x58>)
 80007e8:	f7ff feea 	bl	80005c0 <BasesProcesarDisparo>
}
 80007ec:	b002      	add	sp, #8
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	200008bc 	.word	0x200008bc
 80007f4:	200008b0 	.word	0x200008b0
 80007f8:	200008ac 	.word	0x200008ac

080007fc <BasesInit>:



void BasesInit(){

	for(uint8_t i=0;i<3;i++){
 80007fc:	2000      	movs	r0, #0
 80007fe:	e00b      	b.n	8000818 <BasesInit+0x1c>
		for(uint8_t j=0; j<16; j++){

			bases[i][j] = BaseGfx[j];
 8000800:	4a08      	ldr	r2, [pc, #32]	; (8000824 <BasesInit+0x28>)
 8000802:	5cd1      	ldrb	r1, [r2, r3]
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <BasesInit+0x2c>)
 8000806:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800080a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j=0; j<16; j++){
 800080c:	3301      	adds	r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d9f5      	bls.n	8000800 <BasesInit+0x4>
	for(uint8_t i=0;i<3;i++){
 8000814:	3001      	adds	r0, #1
 8000816:	b2c0      	uxtb	r0, r0
 8000818:	2802      	cmp	r0, #2
 800081a:	d801      	bhi.n	8000820 <BasesInit+0x24>
		for(uint8_t j=0; j<16; j++){
 800081c:	2300      	movs	r3, #0
 800081e:	e7f7      	b.n	8000810 <BasesInit+0x14>
		}
	}

}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	08009a40 	.word	0x08009a40
 8000828:	200008bc 	.word	0x200008bc

0800082c <Dificultad_Init>:


void Dificultad_Init(){

	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 8;
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <Dificultad_Init+0x14>)
 800082e:	2208      	movs	r2, #8
 8000830:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 4;
 8000832:	2204      	movs	r2, #4
 8000834:	705a      	strb	r2, [r3, #1]
	dificultad.velocidad_disparo_aliens = 3;
 8000836:	2203      	movs	r2, #3
 8000838:	709a      	strb	r2, [r3, #2]
	dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_2;
 800083a:	2202      	movs	r2, #2
 800083c:	711a      	strb	r2, [r3, #4]
}
 800083e:	4770      	bx	lr
 8000840:	200008ec 	.word	0x200008ec

08000844 <AumentoNivel>:

void AumentoNivel(){

	//Incremento de la dificultad (Aumento de la velocidad de los aliens y la velocidad de disparo)
	//Se aumenta la dificultad.
	dificultad.velocidad_bajada += 1;
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <AumentoNivel+0x3c>)
 8000846:	7853      	ldrb	r3, [r2, #1]
 8000848:	3301      	adds	r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	7053      	strb	r3, [r2, #1]
	if(dificultad.velocidad_bajada > 10){
 800084e:	2b0a      	cmp	r3, #10
 8000850:	d902      	bls.n	8000858 <AumentoNivel+0x14>
		dificultad.velocidad_bajada = 10;
 8000852:	4613      	mov	r3, r2
 8000854:	220a      	movs	r2, #10
 8000856:	705a      	strb	r2, [r3, #1]
	}


	dificultad.velocidad_disparo_aliens = 3;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <AumentoNivel+0x3c>)
 800085a:	2203      	movs	r2, #3
 800085c:	709a      	strb	r2, [r3, #2]


	//Se Reinicializa el Player.
	Player.posicion_X = 64;
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <AumentoNivel+0x40>)
 8000860:	2340      	movs	r3, #64	; 0x40
 8000862:	8013      	strh	r3, [r2, #0]
	Player.vivo = true;
 8000864:	2301      	movs	r3, #1
 8000866:	7093      	strb	r3, [r2, #2]
	Player.nivel += 1;
 8000868:	7993      	ldrb	r3, [r2, #6]
 800086a:	3301      	adds	r3, #1
 800086c:	b2db      	uxtb	r3, r3
 800086e:	7193      	strb	r3, [r2, #6]
	if(Player.nivel > 254){
 8000870:	2bff      	cmp	r3, #255	; 0xff
 8000872:	d000      	beq.n	8000876 <AumentoNivel+0x32>
		Player.nivel = 254;
	}

}
 8000874:	4770      	bx	lr
		Player.nivel = 254;
 8000876:	4613      	mov	r3, r2
 8000878:	22fe      	movs	r2, #254	; 0xfe
 800087a:	719a      	strb	r2, [r3, #6]
}
 800087c:	e7fa      	b.n	8000874 <AumentoNivel+0x30>
 800087e:	bf00      	nop
 8000880:	200008ec 	.word	0x200008ec
 8000884:	200008b4 	.word	0x200008b4

08000888 <AumentoVelocidadAliens>:

void AumentoVelocidadAliens(){


	//Cuando queden menos de 3 aliens (por ejemplo) que los aliens comiencen a moverse mas rapido.
	switch(movimiento_Aliens.cantidad_aliens_vivos){
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <AumentoVelocidadAliens+0x30>)
 800088a:	799b      	ldrb	r3, [r3, #6]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d00a      	beq.n	80008a6 <AumentoVelocidadAliens+0x1e>
 8000890:	2b03      	cmp	r3, #3
 8000892:	d002      	beq.n	800089a <AumentoVelocidadAliens+0x12>
 8000894:	2b01      	cmp	r3, #1
 8000896:	d00a      	beq.n	80008ae <AumentoVelocidadAliens+0x26>
		break;
	default:
		break;
	}

}
 8000898:	4770      	bx	lr
		dificultad.velocidad_horizontal = 2;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <AumentoVelocidadAliens+0x34>)
 800089c:	2202      	movs	r2, #2
 800089e:	701a      	strb	r2, [r3, #0]
		dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_4;
 80008a0:	2204      	movs	r2, #4
 80008a2:	711a      	strb	r2, [r3, #4]
		break;
 80008a4:	4770      	bx	lr
		dificultad.velocidad_horizontal = 1;
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <AumentoVelocidadAliens+0x34>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
		break;
 80008ac:	4770      	bx	lr
		dificultad.aumento_posicion_pixeles = AUMENTO_POSICION_PIXELES_6;
 80008ae:	4b03      	ldr	r3, [pc, #12]	; (80008bc <AumentoVelocidadAliens+0x34>)
 80008b0:	2206      	movs	r2, #6
 80008b2:	711a      	strb	r2, [r3, #4]
}
 80008b4:	e7f0      	b.n	8000898 <AumentoVelocidadAliens+0x10>
 80008b6:	bf00      	nop
 80008b8:	200008f4 	.word	0x200008f4
 80008bc:	200008ec 	.word	0x200008ec

080008c0 <plotAliens>:
void plotAliens(){
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b083      	sub	sp, #12
	AumentoVelocidadAliens();
 80008c4:	f7ff ffe0 	bl	8000888 <AumentoVelocidadAliens>
	if(movimiento_Aliens.conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80008c8:	4b82      	ldr	r3, [pc, #520]	; (8000ad4 <plotAliens+0x214>)
 80008ca:	785c      	ldrb	r4, [r3, #1]
 80008cc:	4b82      	ldr	r3, [pc, #520]	; (8000ad8 <plotAliens+0x218>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	fbb4 f0f3 	udiv	r0, r4, r3
 80008d4:	fb03 4010 	mls	r0, r3, r0, r4
 80008d8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80008dc:	d124      	bne.n	8000928 <plotAliens+0x68>
		movimiento_Aliens.animacion = !movimiento_Aliens.animacion;
 80008de:	4a7d      	ldr	r2, [pc, #500]	; (8000ad4 <plotAliens+0x214>)
 80008e0:	78d3      	ldrb	r3, [r2, #3]
 80008e2:	fab3 f383 	clz	r3, r3
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	70d3      	strb	r3, [r2, #3]
			switch(movimiento_Aliens.orientacion){
 80008ea:	f892 c000 	ldrb.w	ip, [r2]
 80008ee:	f1bc 0f00 	cmp.w	ip, #0
 80008f2:	d037      	beq.n	8000964 <plotAliens+0xa4>
 80008f4:	f1bc 0f01 	cmp.w	ip, #1
 80008f8:	d04d      	beq.n	8000996 <plotAliens+0xd6>
			if( (Alien[0][movimiento_Aliens.alien_columna_derecha].posicion_X + TAMANO_ALIEN_BOTTOM_ANCHURA) >= LIMITE_PANTALLA_DER){
 80008fa:	4b76      	ldr	r3, [pc, #472]	; (8000ad4 <plotAliens+0x214>)
 80008fc:	795b      	ldrb	r3, [r3, #5]
 80008fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000902:	4a76      	ldr	r2, [pc, #472]	; (8000adc <plotAliens+0x21c>)
 8000904:	56d3      	ldrsb	r3, [r2, r3]
 8000906:	2b72      	cmp	r3, #114	; 0x72
 8000908:	dd02      	ble.n	8000910 <plotAliens+0x50>
				movimiento_Aliens.orientacion = mov_izquierda;
 800090a:	4b72      	ldr	r3, [pc, #456]	; (8000ad4 <plotAliens+0x214>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
			if( (Alien[0][movimiento_Aliens.alien_columna_izquierda].posicion_X) <= LIMITE_PANTALLA_IZQ){
 8000910:	4b70      	ldr	r3, [pc, #448]	; (8000ad4 <plotAliens+0x214>)
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000918:	4a70      	ldr	r2, [pc, #448]	; (8000adc <plotAliens+0x21c>)
 800091a:	56d3      	ldrsb	r3, [r2, r3]
 800091c:	2b01      	cmp	r3, #1
 800091e:	dd3c      	ble.n	800099a <plotAliens+0xda>
			if(movimiento_Aliens.conteo_bajada == 10){
 8000920:	4b6c      	ldr	r3, [pc, #432]	; (8000ad4 <plotAliens+0x214>)
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	2b0a      	cmp	r3, #10
 8000926:	d05a      	beq.n	80009de <plotAliens+0x11e>
	movimiento_Aliens.conteo_horizontal++;
 8000928:	3401      	adds	r4, #1
 800092a:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <plotAliens+0x214>)
 800092c:	705c      	strb	r4, [r3, #1]
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800092e:	2500      	movs	r5, #0
	uint8_t conteo_columna_izquierda = 0;
 8000930:	462e      	mov	r6, r5
	uint8_t conteo_columna_derecha = 0;
 8000932:	462f      	mov	r7, r5
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000934:	e09a      	b.n	8000a6c <plotAliens+0x1ac>
								Alien[y][x].posicion_X  = Alien[y][x].posicion_X + dificultad.aumento_posicion_pixeles;
 8000936:	4d69      	ldr	r5, [pc, #420]	; (8000adc <plotAliens+0x21c>)
 8000938:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800093c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000940:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000944:	440a      	add	r2, r1
 8000946:	5ca9      	ldrb	r1, [r5, r2]
 8000948:	4f63      	ldr	r7, [pc, #396]	; (8000ad8 <plotAliens+0x218>)
 800094a:	793f      	ldrb	r7, [r7, #4]
 800094c:	4439      	add	r1, r7
 800094e:	54a9      	strb	r1, [r5, r2]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000950:	3301      	adds	r3, #1
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b06      	cmp	r3, #6
 8000956:	d9ee      	bls.n	8000936 <plotAliens+0x76>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000958:	3601      	adds	r6, #1
 800095a:	b2f6      	uxtb	r6, r6
 800095c:	2e02      	cmp	r6, #2
 800095e:	d8cc      	bhi.n	80008fa <plotAliens+0x3a>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000960:	4663      	mov	r3, ip
 8000962:	e7f7      	b.n	8000954 <plotAliens+0x94>
			switch(movimiento_Aliens.orientacion){
 8000964:	4666      	mov	r6, ip
 8000966:	e7f9      	b.n	800095c <plotAliens+0x9c>
								Alien[y][x].posicion_X  -= dificultad.aumento_posicion_pixeles;
 8000968:	4a5b      	ldr	r2, [pc, #364]	; (8000ad8 <plotAliens+0x218>)
 800096a:	7917      	ldrb	r7, [r2, #4]
 800096c:	4d5b      	ldr	r5, [pc, #364]	; (8000adc <plotAliens+0x21c>)
 800096e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000972:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000976:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800097a:	440a      	add	r2, r1
 800097c:	5ca9      	ldrb	r1, [r5, r2]
 800097e:	1bc9      	subs	r1, r1, r7
 8000980:	54a9      	strb	r1, [r5, r2]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000982:	3301      	adds	r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b06      	cmp	r3, #6
 8000988:	d9ee      	bls.n	8000968 <plotAliens+0xa8>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800098a:	3601      	adds	r6, #1
 800098c:	b2f6      	uxtb	r6, r6
 800098e:	2e02      	cmp	r6, #2
 8000990:	d8b3      	bhi.n	80008fa <plotAliens+0x3a>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000992:	4603      	mov	r3, r0
 8000994:	e7f7      	b.n	8000986 <plotAliens+0xc6>
			switch(movimiento_Aliens.orientacion){
 8000996:	4606      	mov	r6, r0
 8000998:	e7f9      	b.n	800098e <plotAliens+0xce>
				movimiento_Aliens.orientacion = mov_derecha;
 800099a:	4b4e      	ldr	r3, [pc, #312]	; (8000ad4 <plotAliens+0x214>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
				movimiento_Aliens.conteo_bajada++;
 80009a0:	789a      	ldrb	r2, [r3, #2]
 80009a2:	3201      	adds	r2, #1
 80009a4:	709a      	strb	r2, [r3, #2]
 80009a6:	e7bb      	b.n	8000920 <plotAliens+0x60>
						Alien[y][x].posicion_Y  = Alien[y][x].posicion_Y + dificultad.velocidad_bajada;
 80009a8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80009ac:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80009b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80009b4:	4411      	add	r1, r2
 80009b6:	4a49      	ldr	r2, [pc, #292]	; (8000adc <plotAliens+0x21c>)
 80009b8:	440a      	add	r2, r1
 80009ba:	7851      	ldrb	r1, [r2, #1]
 80009bc:	4e46      	ldr	r6, [pc, #280]	; (8000ad8 <plotAliens+0x218>)
 80009be:	7876      	ldrb	r6, [r6, #1]
 80009c0:	4431      	add	r1, r6
 80009c2:	7051      	strb	r1, [r2, #1]
						movimiento_Aliens.conteo_bajada = 0;
 80009c4:	4a43      	ldr	r2, [pc, #268]	; (8000ad4 <plotAliens+0x214>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	7091      	strb	r1, [r2, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80009ca:	3301      	adds	r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d9ea      	bls.n	80009a8 <plotAliens+0xe8>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80009d2:	3501      	adds	r5, #1
 80009d4:	b2ed      	uxtb	r5, r5
 80009d6:	2d02      	cmp	r5, #2
 80009d8:	d8a6      	bhi.n	8000928 <plotAliens+0x68>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80009da:	4603      	mov	r3, r0
 80009dc:	e7f7      	b.n	80009ce <plotAliens+0x10e>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80009de:	4605      	mov	r5, r0
 80009e0:	e7f9      	b.n	80009d6 <plotAliens+0x116>
			            gfx = (y == 0) ? InvaderTopGfx : (y == 1) ? InvaderMiddleGfx : InvaderBottomGfx;
 80009e2:	b13d      	cbz	r5, 80009f4 <plotAliens+0x134>
 80009e4:	2d01      	cmp	r5, #1
 80009e6:	d001      	beq.n	80009ec <plotAliens+0x12c>
 80009e8:	4a3d      	ldr	r2, [pc, #244]	; (8000ae0 <plotAliens+0x220>)
 80009ea:	e006      	b.n	80009fa <plotAliens+0x13a>
 80009ec:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <plotAliens+0x224>)
 80009ee:	e004      	b.n	80009fa <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 80009f0:	4a3d      	ldr	r2, [pc, #244]	; (8000ae8 <plotAliens+0x228>)
 80009f2:	e002      	b.n	80009fa <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx : (y == 1) ? InvaderMiddleGfx : InvaderBottomGfx;
 80009f4:	4a3d      	ldr	r2, [pc, #244]	; (8000aec <plotAliens+0x22c>)
 80009f6:	e000      	b.n	80009fa <plotAliens+0x13a>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 80009f8:	4a3d      	ldr	r2, [pc, #244]	; (8000af0 <plotAliens+0x230>)
			        SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y, gfx, (y == 0) ? 8 : 16, 8, 1);
 80009fa:	4b38      	ldr	r3, [pc, #224]	; (8000adc <plotAliens+0x21c>)
 80009fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000a00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000a04:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000a08:	4401      	add	r1, r0
 8000a0a:	eb03 0c01 	add.w	ip, r3, r1
 8000a0e:	5658      	ldrsb	r0, [r3, r1]
 8000a10:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8000a14:	b335      	cbz	r5, 8000a64 <plotAliens+0x1a4>
 8000a16:	2310      	movs	r3, #16
 8000a18:	f04f 0c01 	mov.w	ip, #1
 8000a1c:	f8cd c004 	str.w	ip, [sp, #4]
 8000a20:	f04f 0c08 	mov.w	ip, #8
 8000a24:	f8cd c000 	str.w	ip, [sp]
 8000a28:	f001 fc04 	bl	8002234 <SSD1306_DrawBitmap>
			for(uint8_t x = 0; x < NUM_ALIEN_COLUMNA; x++) {
 8000a2c:	3401      	adds	r4, #1
 8000a2e:	b2e4      	uxtb	r4, r4
 8000a30:	2c06      	cmp	r4, #6
 8000a32:	d819      	bhi.n	8000a68 <plotAliens+0x1a8>
			    if(Alien[y][x].vivo == true) {
 8000a34:	4628      	mov	r0, r5
 8000a36:	4621      	mov	r1, r4
 8000a38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a3c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000a40:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000a44:	4413      	add	r3, r2
 8000a46:	4a25      	ldr	r2, [pc, #148]	; (8000adc <plotAliens+0x21c>)
 8000a48:	4413      	add	r3, r2
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d1ed      	bne.n	8000a2c <plotAliens+0x16c>
			        if(movimiento_Aliens.animacion == true) {
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <plotAliens+0x214>)
 8000a52:	78db      	ldrb	r3, [r3, #3]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d0c4      	beq.n	80009e2 <plotAliens+0x122>
			            gfx = (y == 0) ? InvaderTopGfx2 : (y == 1) ? InvaderMiddleGfx2 : InvaderBottomGfx2;
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d0cd      	beq.n	80009f8 <plotAliens+0x138>
 8000a5c:	2d01      	cmp	r5, #1
 8000a5e:	d0c7      	beq.n	80009f0 <plotAliens+0x130>
 8000a60:	4a24      	ldr	r2, [pc, #144]	; (8000af4 <plotAliens+0x234>)
 8000a62:	e7ca      	b.n	80009fa <plotAliens+0x13a>
			        SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y, gfx, (y == 0) ? 8 : 16, 8, 1);
 8000a64:	2308      	movs	r3, #8
 8000a66:	e7d7      	b.n	8000a18 <plotAliens+0x158>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000a68:	3501      	adds	r5, #1
 8000a6a:	b2ed      	uxtb	r5, r5
 8000a6c:	2d02      	cmp	r5, #2
 8000a6e:	d821      	bhi.n	8000ab4 <plotAliens+0x1f4>
			if(movimiento_Aliens.alien_columna_derecha != movimiento_Aliens.alien_columna_izquierda){
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <plotAliens+0x214>)
 8000a72:	795a      	ldrb	r2, [r3, #5]
 8000a74:	791b      	ldrb	r3, [r3, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d01a      	beq.n	8000ab0 <plotAliens+0x1f0>
				if(Alien[y][movimiento_Aliens.alien_columna_derecha].vivo == false){
 8000a7a:	4629      	mov	r1, r5
 8000a7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000a80:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8000a84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000a88:	4402      	add	r2, r0
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <plotAliens+0x21c>)
 8000a8c:	4402      	add	r2, r0
 8000a8e:	7892      	ldrb	r2, [r2, #2]
 8000a90:	b90a      	cbnz	r2, 8000a96 <plotAliens+0x1d6>
					conteo_columna_derecha++;
 8000a92:	3701      	adds	r7, #1
 8000a94:	b2ff      	uxtb	r7, r7
				if(Alien[y][movimiento_Aliens.alien_columna_izquierda].vivo == false){
 8000a96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a9a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000a9e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <plotAliens+0x21c>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	789b      	ldrb	r3, [r3, #2]
 8000aaa:	b90b      	cbnz	r3, 8000ab0 <plotAliens+0x1f0>
					conteo_columna_izquierda++;
 8000aac:	3601      	adds	r6, #1
 8000aae:	b2f6      	uxtb	r6, r6
			for(uint8_t x = 0; x < NUM_ALIEN_COLUMNA; x++) {
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	e7bd      	b.n	8000a30 <plotAliens+0x170>
		if(conteo_columna_derecha == NUM_ALIEN_FILA){
 8000ab4:	2f03      	cmp	r7, #3
 8000ab6:	d003      	beq.n	8000ac0 <plotAliens+0x200>
		if(conteo_columna_izquierda == NUM_ALIEN_FILA){
 8000ab8:	2e03      	cmp	r6, #3
 8000aba:	d006      	beq.n	8000aca <plotAliens+0x20a>
}
 8000abc:	b003      	add	sp, #12
 8000abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			movimiento_Aliens.alien_columna_derecha--;
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <plotAliens+0x214>)
 8000ac2:	7953      	ldrb	r3, [r2, #5]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	7153      	strb	r3, [r2, #5]
 8000ac8:	e7f6      	b.n	8000ab8 <plotAliens+0x1f8>
			movimiento_Aliens.alien_columna_izquierda++;
 8000aca:	4a02      	ldr	r2, [pc, #8]	; (8000ad4 <plotAliens+0x214>)
 8000acc:	7913      	ldrb	r3, [r2, #4]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	7113      	strb	r3, [r2, #4]
}
 8000ad2:	e7f3      	b.n	8000abc <plotAliens+0x1fc>
 8000ad4:	200008f4 	.word	0x200008f4
 8000ad8:	200008ec 	.word	0x200008ec
 8000adc:	20000840 	.word	0x20000840
 8000ae0:	08009a50 	.word	0x08009a50
 8000ae4:	08009a70 	.word	0x08009a70
 8000ae8:	08009a80 	.word	0x08009a80
 8000aec:	08009a90 	.word	0x08009a90
 8000af0:	08009a98 	.word	0x08009a98
 8000af4:	08009a60 	.word	0x08009a60

08000af8 <disparoTrue>:


void disparoTrue(){

	Disparo.disparo = true;
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <disparoTrue+0x10>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	709a      	strb	r2, [r3, #2]
	Disparo.posicion_x = Player.posicion_X;
 8000afe:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <disparoTrue+0x14>)
 8000b00:	8812      	ldrh	r2, [r2, #0]
 8000b02:	701a      	strb	r2, [r3, #0]

}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200008ac 	.word	0x200008ac
 8000b0c:	200008b4 	.word	0x200008b4

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b14:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	2400      	movs	r4, #0
 8000b18:	9404      	str	r4, [sp, #16]
 8000b1a:	9405      	str	r4, [sp, #20]
 8000b1c:	9406      	str	r4, [sp, #24]
 8000b1e:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <MX_GPIO_Init+0xe0>)
 8000b22:	699a      	ldr	r2, [r3, #24]
 8000b24:	f042 0210 	orr.w	r2, r2, #16
 8000b28:	619a      	str	r2, [r3, #24]
 8000b2a:	699a      	ldr	r2, [r3, #24]
 8000b2c:	f002 0210 	and.w	r2, r2, #16
 8000b30:	9200      	str	r2, [sp, #0]
 8000b32:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	699a      	ldr	r2, [r3, #24]
 8000b36:	f042 0220 	orr.w	r2, r2, #32
 8000b3a:	619a      	str	r2, [r3, #24]
 8000b3c:	699a      	ldr	r2, [r3, #24]
 8000b3e:	f002 0220 	and.w	r2, r2, #32
 8000b42:	9201      	str	r2, [sp, #4]
 8000b44:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	f042 0204 	orr.w	r2, r2, #4
 8000b4c:	619a      	str	r2, [r3, #24]
 8000b4e:	699a      	ldr	r2, [r3, #24]
 8000b50:	f002 0204 	and.w	r2, r2, #4
 8000b54:	9202      	str	r2, [sp, #8]
 8000b56:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	f042 0208 	orr.w	r2, r2, #8
 8000b5e:	619a      	str	r2, [r3, #24]
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b6a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000bf4 <MX_GPIO_Init+0xe4>
 8000b6e:	4622      	mov	r2, r4
 8000b70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b74:	4648      	mov	r0, r9
 8000b76:	f002 fdf2 	bl	800375e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b7a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000bf8 <MX_GPIO_Init+0xe8>
 8000b7e:	4622      	mov	r2, r4
 8000b80:	f24c 0120 	movw	r1, #49184	; 0xc020
 8000b84:	4640      	mov	r0, r8
 8000b86:	f002 fdea 	bl	800375e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b8a:	4e1c      	ldr	r6, [pc, #112]	; (8000bfc <MX_GPIO_Init+0xec>)
 8000b8c:	4622      	mov	r2, r4
 8000b8e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b92:	4630      	mov	r0, r6
 8000b94:	f002 fde3 	bl	800375e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2501      	movs	r5, #1
 8000ba0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2702      	movs	r7, #2
 8000ba6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	a904      	add	r1, sp, #16
 8000baa:	4648      	mov	r0, r9
 8000bac:	f002 fcbe 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	a904      	add	r1, sp, #16
 8000bba:	4630      	mov	r0, r6
 8000bbc:	f002 fcb6 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8000bc0:	f24c 0320 	movw	r3, #49184	; 0xc020
 8000bc4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	a904      	add	r1, sp, #16
 8000bce:	4640      	mov	r0, r8
 8000bd0:	f002 fcac 	bl	800352c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000bd4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bd8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	a904      	add	r1, sp, #16
 8000be2:	4630      	mov	r0, r6
 8000be4:	f002 fca2 	bl	800352c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be8:	b009      	add	sp, #36	; 0x24
 8000bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40010c00 	.word	0x40010c00
 8000bfc:	40010800 	.word	0x40010800

08000c00 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	b082      	sub	sp, #8

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000c04:	f006 fa4e 	bl	80070a4 <xTaskGetTickCount>
 8000c08:	9000      	str	r0, [sp, #0]
 8000c0a:	e02b      	b.n	8000c64 <entryJoystick+0x64>
	  HAL_ADC_Stop(&hadc2);

	  if(val_x > 2200){
		  joystick.x_value = derecha;
	  }
	  else if(val_x < 1600){
 8000c0c:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8000c10:	d203      	bcs.n	8000c1a <entryJoystick+0x1a>
		  joystick.x_value = izquierda;
 8000c12:	2303      	movs	r3, #3
 8000c14:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c18:	e049      	b.n	8000cae <entryJoystick+0xae>
	  }
	  else{
		  joystick.x_value = nulo;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c20:	e045      	b.n	8000cae <entryJoystick+0xae>


	  if(val_y > 2200){
		  joystick.y_value = abajo;
	  }
	  else if(val_y < 1600){
 8000c22:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8000c26:	d24a      	bcs.n	8000cbe <entryJoystick+0xbe>
		  joystick.y_value = arriba;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f88d 3005 	strb.w	r3, [sp, #5]
		  joystick.y_value = nulo;
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <entryJoystick+0xd0>)
 8000c32:	f002 fd8d 	bl	8003750 <HAL_GPIO_ReadPin>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d145      	bne.n	8000cc6 <entryJoystick+0xc6>
		  joystick.boton = true;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f88d 3006 	strb.w	r3, [sp, #6]
	  else{
		  joystick.boton = false;
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000c40:	2300      	movs	r3, #0
 8000c42:	461a      	mov	r2, r3
 8000c44:	a901      	add	r1, sp, #4
 8000c46:	4823      	ldr	r0, [pc, #140]	; (8000cd4 <entryJoystick+0xd4>)
 8000c48:	6800      	ldr	r0, [r0, #0]
 8000c4a:	f005 f8bf 	bl	8005dcc <osMessageQueuePut>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c4e:	b128      	cbz	r0, 8000c5c <entryJoystick+0x5c>
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4820      	ldr	r0, [pc, #128]	; (8000cd8 <entryJoystick+0xd8>)
 8000c58:	f002 fd81 	bl	800375e <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000c5c:	2132      	movs	r1, #50	; 0x32
 8000c5e:	4668      	mov	r0, sp
 8000c60:	f006 fb2e 	bl	80072c0 <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc1);
 8000c64:	4c1d      	ldr	r4, [pc, #116]	; (8000cdc <entryJoystick+0xdc>)
 8000c66:	4620      	mov	r0, r4
 8000c68:	f002 faca 	bl	8003200 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c6c:	210a      	movs	r1, #10
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f002 f91c 	bl	8002eac <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000c74:	4620      	mov	r0, r4
 8000c76:	f002 f9db 	bl	8003030 <HAL_ADC_GetValue>
 8000c7a:	b286      	uxth	r6, r0
	  HAL_ADC_Stop(&hadc1);
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	f002 fbe3 	bl	8003448 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 8000c82:	4c17      	ldr	r4, [pc, #92]	; (8000ce0 <entryJoystick+0xe0>)
 8000c84:	4620      	mov	r0, r4
 8000c86:	f002 fabb 	bl	8003200 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000c8a:	210a      	movs	r1, #10
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f002 f90d 	bl	8002eac <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000c92:	4620      	mov	r0, r4
 8000c94:	f002 f9cc 	bl	8003030 <HAL_ADC_GetValue>
 8000c98:	b285      	uxth	r5, r0
	  HAL_ADC_Stop(&hadc2);
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f002 fbd4 	bl	8003448 <HAL_ADC_Stop>
	  if(val_x > 2200){
 8000ca0:	f640 0398 	movw	r3, #2200	; 0x898
 8000ca4:	429e      	cmp	r6, r3
 8000ca6:	d9b1      	bls.n	8000c0c <entryJoystick+0xc>
		  joystick.x_value = derecha;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	f88d 3004 	strb.w	r3, [sp, #4]
	  if(val_y > 2200){
 8000cae:	f640 0398 	movw	r3, #2200	; 0x898
 8000cb2:	429d      	cmp	r5, r3
 8000cb4:	d9b5      	bls.n	8000c22 <entryJoystick+0x22>
		  joystick.y_value = abajo;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cbc:	e7b7      	b.n	8000c2e <entryJoystick+0x2e>
		  joystick.y_value = nulo;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	f88d 3005 	strb.w	r3, [sp, #5]
 8000cc4:	e7b3      	b.n	8000c2e <entryJoystick+0x2e>
		  joystick.boton = false;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f88d 3006 	strb.w	r3, [sp, #6]
 8000ccc:	e7b8      	b.n	8000c40 <entryJoystick+0x40>
 8000cce:	bf00      	nop
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	20000ac0 	.word	0x20000ac0
 8000cd8:	40011000 	.word	0x40011000
 8000cdc:	20000910 	.word	0x20000910
 8000ce0:	20000940 	.word	0x20000940

08000ce4 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000ce4:	b500      	push	{lr}
 8000ce6:	b083      	sub	sp, #12

	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000ce8:	f000 fe76 	bl	80019d8 <menuInit>
 8000cec:	e005      	b.n	8000cfa <entryPantalla+0x16>

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf4:	480e      	ldr	r0, [pc, #56]	; (8000d30 <entryPantalla+0x4c>)
 8000cf6:	f002 fd32 	bl	800375e <HAL_GPIO_WritePin>
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	2200      	movs	r2, #0
 8000d00:	a901      	add	r1, sp, #4
 8000d02:	480c      	ldr	r0, [pc, #48]	; (8000d34 <entryPantalla+0x50>)
 8000d04:	6800      	ldr	r0, [r0, #0]
 8000d06:	f005 f8b1 	bl	8005e6c <osMessageQueueGet>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d1ef      	bne.n	8000cee <entryPantalla+0xa>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <entryPantalla+0x4c>)
 8000d16:	f002 fd22 	bl	800375e <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000d1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000d1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000d22:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000d26:	f000 fe9d 	bl	8001a64 <menuActualizar>
		actualizarPantalla();
 8000d2a:	f7ff fa27 	bl	800017c <actualizarPantalla>
 8000d2e:	e7e4      	b.n	8000cfa <entryPantalla+0x16>
 8000d30:	40011000 	.word	0x40011000
 8000d34:	20000ac0 	.word	0x20000ac0

08000d38 <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000d38:	b508      	push	{r3, lr}
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );

	//Write_PuntajesEjemplos();

	//Se leen los datos desde la memoria.
	memoriaInit();
 8000d3a:	f000 fbbb 	bl	80014b4 <memoriaInit>

  /* Infinite loop */
  for(;;)
  {
	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	2200      	movs	r2, #0
 8000d44:	2101      	movs	r1, #1
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <entryMemoria+0x30>)
 8000d48:	6800      	ldr	r0, [r0, #0]
 8000d4a:	f004 feb9 	bl	8005ac0 <osEventFlagsWait>

	      // Realiza acciones basadas en la notificación recibida
	      if (flags == NOTIFICATION_VALUE)
 8000d4e:	2801      	cmp	r0, #1
 8000d50:	d1f5      	bne.n	8000d3e <entryMemoria+0x6>
	      {

	    	  uint8_t permutaciones = Ordenamiento_Puntajes();
 8000d52:	f000 fdcf 	bl	80018f4 <Ordenamiento_Puntajes>

	    	  writeNuevosPuntajes(permutaciones);
 8000d56:	f000 fc83 	bl	8001660 <writeNuevosPuntajes>


	    	  //Envio la notificacion 2 para que la tarea PantallaTask pueda pasar del menu guardado_nombre al menu de puntajes una vez que los puntajes ya se encuentran ordenadas y guardadas, ya que sin esta segunda sincronizacion, puede pasarse al menu puntajes sin que estos se encuentren ordenados. El ordenado se realiza en esta tarea MemoriaTask ya que las escrituras de puntajes se realizan solo en esta tarea.
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 8000d5a:	2102      	movs	r1, #2
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <entryMemoria+0x34>)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	f004 fe70 	bl	8005a44 <osEventFlagsSet>
 8000d64:	e7eb      	b.n	8000d3e <entryMemoria+0x6>
 8000d66:	bf00      	nop
 8000d68:	20000ab4 	.word	0x20000ab4
 8000d6c:	20000ab8 	.word	0x20000ab8

08000d70 <entrySonido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySonido */
void entrySonido(void *argument)
{
 8000d70:	b508      	push	{r3, lr}
 8000d72:	e005      	b.n	8000d80 <entrySonido+0x10>
  /* Infinite loop */
  for(;;)
  {
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick

	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7a:	481d      	ldr	r0, [pc, #116]	; (8000df0 <entrySonido+0x80>)
 8000d7c:	f002 fcef 	bl	800375e <HAL_GPIO_WritePin>
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	2200      	movs	r2, #0
 8000d86:	491b      	ldr	r1, [pc, #108]	; (8000df4 <entrySonido+0x84>)
 8000d88:	481b      	ldr	r0, [pc, #108]	; (8000df8 <entrySonido+0x88>)
 8000d8a:	6800      	ldr	r0, [r0, #0]
 8000d8c:	f005 f86e 	bl	8005e6c <osMessageQueueGet>
	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d1ef      	bne.n	8000d74 <entrySonido+0x4>

	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <entrySonido+0x80>)
 8000d9c:	f002 fcdf 	bl	800375e <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000da0:	2100      	movs	r1, #0
 8000da2:	4816      	ldr	r0, [pc, #88]	; (8000dfc <entrySonido+0x8c>)
 8000da4:	f004 fce2 	bl	800576c <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000da8:	4815      	ldr	r0, [pc, #84]	; (8000e00 <entrySonido+0x90>)
 8000daa:	f004 f9c9 	bl	8005140 <HAL_TIM_Base_Stop_IT>

			//musica = musica_;

		  switch(musica){
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <entrySonido+0x84>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d018      	beq.n	8000de8 <entrySonido+0x78>
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d008      	beq.n	8000dcc <entrySonido+0x5c>
 8000dba:	b18b      	cbz	r3, 8000de0 <entrySonido+0x70>
		  default:
			  break;

		  }

		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <entrySonido+0x8c>)
 8000dc0:	f004 fc66 	bl	8005690 <HAL_TIM_PWM_Start>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <entrySonido+0x90>)
 8000dc6:	f004 f987 	bl	80050d8 <HAL_TIM_Base_Start_IT>
 8000dca:	e7d9      	b.n	8000d80 <entrySonido+0x10>
				tonos = f622;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <entrySonido+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
				conteo_musica = VECES_622HZ;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <entrySonido+0x98>)
 8000dd4:	22aa      	movs	r2, #170	; 0xaa
 8000dd6:	701a      	strb	r2, [r3, #0]
				puntero_musica = tono_622hz;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <entrySonido+0x9c>)
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <entrySonido+0xa0>)
 8000ddc:	601a      	str	r2, [r3, #0]
			  break;
 8000dde:	e7ed      	b.n	8000dbc <entrySonido+0x4c>
			  puntero_musica = audio_disparo;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <entrySonido+0x9c>)
 8000de2:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <entrySonido+0xa4>)
 8000de4:	601a      	str	r2, [r3, #0]
			  break;
 8000de6:	e7e9      	b.n	8000dbc <entrySonido+0x4c>
			  puntero_musica = audio_explosion;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <entrySonido+0x9c>)
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <entrySonido+0xa8>)
 8000dec:	601a      	str	r2, [r3, #0]
			  break;
 8000dee:	e7e5      	b.n	8000dbc <entrySonido+0x4c>
 8000df0:	40011000 	.word	0x40011000
 8000df4:	20000aac 	.word	0x20000aac
 8000df8:	20000ac4 	.word	0x20000ac4
 8000dfc:	20000a1c 	.word	0x20000a1c
 8000e00:	20000a64 	.word	0x20000a64
 8000e04:	20000ac8 	.word	0x20000ac8
 8000e08:	2000090c 	.word	0x2000090c
 8000e0c:	20000abc 	.word	0x20000abc
 8000e10:	20000450 	.word	0x20000450
 8000e14:	20000024 	.word	0x20000024
 8000e18:	200002a0 	.word	0x200002a0

08000e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b510      	push	{r4, lr}
 8000e1e:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e20:	6802      	ldr	r2, [r0, #0]
 8000e22:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d004      	beq.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */


  if (htim->Instance == TIM3) {
 8000e28:	6822      	ldr	r2, [r4, #0]
 8000e2a:	4b5a      	ldr	r3, [pc, #360]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d003      	beq.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x1c>
						 break;
				 }
  }

  /* USER CODE END Callback 1 */
}
 8000e30:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000e32:	f002 f815 	bl	8002e60 <HAL_IncTick>
 8000e36:	e7f7      	b.n	8000e28 <HAL_TIM_PeriodElapsedCallback+0xc>
		TIM2->CCR1 = *puntero_musica >> 1;
 8000e38:	4957      	ldr	r1, [pc, #348]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e3a:	680b      	ldr	r3, [r1, #0]
 8000e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e40:	0852      	lsrs	r2, r2, #1
 8000e42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e46:	6342      	str	r2, [r0, #52]	; 0x34
		puntero_musica++;
 8000e48:	600b      	str	r3, [r1, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4e:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8000e52:	f002 fc8a 	bl	800376a <HAL_GPIO_TogglePin>
		switch(musica){
 8000e56:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	f000 8089 	beq.w	8000f72 <HAL_TIM_PeriodElapsedCallback+0x156>
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d00f      	beq.n	8000e84 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e3      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
						 if(puntero_musica == puntero_final_disparo){
 8000e68:	4b4b      	ldr	r3, [pc, #300]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d1dd      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	484b      	ldr	r0, [pc, #300]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e78:	f004 fc78 	bl	800576c <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8000e7c:	484a      	ldr	r0, [pc, #296]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000e7e:	f004 f95f 	bl	8005140 <HAL_TIM_Base_Stop_IT>
 8000e82:	e7d5      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
								switch(tonos){
 8000e84:	4b49      	ldr	r3, [pc, #292]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d02d      	beq.n	8000eea <HAL_TIM_PeriodElapsedCallback+0xce>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d03a      	beq.n	8000f08 <HAL_TIM_PeriodElapsedCallback+0xec>
 8000e92:	b173      	cbz	r3, 8000eb2 <HAL_TIM_PeriodElapsedCallback+0x96>
									if(puntero_musica == puntero_musica_final_tonos){
 8000e94:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d10e      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tonos_variables;
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ea2:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ea4:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000ea6:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ea8:	7813      	ldrb	r3, [r2, #0]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	7013      	strb	r3, [r2, #0]
 8000eb0:	e005      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f622){
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d00c      	beq.n	8000ed8 <HAL_TIM_PeriodElapsedCallback+0xbc>
									if(conteo_musica == 0){
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1b4      	bne.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
										switch(tonos){
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d8af      	bhi.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000ed0:	e8df f003 	tbb	[pc, r3]
 8000ed4:	473d3329 	.word	0x473d3329
											puntero_musica = tono_622hz;
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eda:	4a39      	ldr	r2, [pc, #228]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000edc:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000ede:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ee0:	7813      	ldrb	r3, [r2, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	7013      	strb	r3, [r2, #0]
 8000ee8:	e7e9      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f587){
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d1e3      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_587hz;
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ef8:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000efa:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000efc:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000efe:	7813      	ldrb	r3, [r2, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	7013      	strb	r3, [r2, #0]
 8000f06:	e7da      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f554){
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d1d4      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_554hz;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f16:	4a2e      	ldr	r2, [pc, #184]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f18:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f1c:	7813      	ldrb	r3, [r2, #0]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7013      	strb	r3, [r2, #0]
 8000f24:	e7cb      	b.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_587hz;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f28:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f2a:	601a      	str	r2, [r3, #0]
											tonos = f587;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_587HZ;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f34:	22a0      	movs	r2, #160	; 0xa0
 8000f36:	701a      	strb	r2, [r3, #0]
											break;
 8000f38:	e77a      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tono_554hz;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f3c:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f3e:	601a      	str	r2, [r3, #0]
											tonos = f554;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_554HZ;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f48:	2296      	movs	r2, #150	; 0x96
 8000f4a:	701a      	strb	r2, [r3, #0]
											break;
 8000f4c:	e770      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tonos_variables;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f52:	601a      	str	r2, [r3, #0]
											tonos = variables;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_TONOS_VARIABLES;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f5c:	220a      	movs	r2, #10
 8000f5e:	701a      	strb	r2, [r3, #0]
											break;
 8000f60:	e766      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
											HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f62:	2100      	movs	r1, #0
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f66:	f004 fc01 	bl	800576c <HAL_TIM_PWM_Stop>
											HAL_TIM_Base_Stop_IT(&htim3);
 8000f6a:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f6c:	f004 f8e8 	bl	8005140 <HAL_TIM_Base_Stop_IT>
											break;
 8000f70:	e75e      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
						 if(puntero_musica == puntero_final_explosion){
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	f47f af58 	bne.w	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f80:	2100      	movs	r1, #0
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f84:	f004 fbf2 	bl	800576c <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000f8a:	f004 f8d9 	bl	8005140 <HAL_TIM_Base_Stop_IT>
}
 8000f8e:	e74f      	b.n	8000e30 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000f90:	40000800 	.word	0x40000800
 8000f94:	40000400 	.word	0x40000400
 8000f98:	20000abc 	.word	0x20000abc
 8000f9c:	20000aac 	.word	0x20000aac
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000a1c 	.word	0x20000a1c
 8000fa8:	20000a64 	.word	0x20000a64
 8000fac:	20000ac8 	.word	0x20000ac8
 8000fb0:	2000001c 	.word	0x2000001c
 8000fb4:	20000460 	.word	0x20000460
 8000fb8:	2000090c 	.word	0x2000090c
 8000fbc:	20000018 	.word	0x20000018
 8000fc0:	20000450 	.word	0x20000450
 8000fc4:	20000014 	.word	0x20000014
 8000fc8:	20000440 	.word	0x20000440
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	20000430 	.word	0x20000430
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fda:	e7fe      	b.n	8000fda <Error_Handler+0x2>

08000fdc <MX_ADC1_Init>:
{
 8000fdc:	b500      	push	{lr}
 8000fde:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <MX_ADC1_Init+0x50>)
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <MX_ADC1_Init+0x54>)
 8000fec:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fee:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff0:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ff8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffa:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001000:	f002 f99e 	bl	8003340 <HAL_ADC_Init>
 8001004:	b968      	cbnz	r0, 8001022 <MX_ADC1_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_3;
 8001006:	2303      	movs	r3, #3
 8001008:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100a:	2301      	movs	r3, #1
 800100c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800100e:	2300      	movs	r3, #0
 8001010:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001012:	a901      	add	r1, sp, #4
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_ADC1_Init+0x50>)
 8001016:	f002 f80f 	bl	8003038 <HAL_ADC_ConfigChannel>
 800101a:	b920      	cbnz	r0, 8001026 <MX_ADC1_Init+0x4a>
}
 800101c:	b005      	add	sp, #20
 800101e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001022:	f7ff ffd9 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001026:	f7ff ffd7 	bl	8000fd8 <Error_Handler>
 800102a:	bf00      	nop
 800102c:	20000910 	.word	0x20000910
 8001030:	40012400 	.word	0x40012400

08001034 <MX_I2C1_Init>:
{
 8001034:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001036:	480a      	ldr	r0, [pc, #40]	; (8001060 <MX_I2C1_Init+0x2c>)
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_I2C1_Init+0x30>)
 800103a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_I2C1_Init+0x34>)
 800103e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001040:	2300      	movs	r3, #0
 8001042:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001044:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800104c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001050:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001052:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001054:	f002 fd24 	bl	8003aa0 <HAL_I2C_Init>
 8001058:	b900      	cbnz	r0, 800105c <MX_I2C1_Init+0x28>
}
 800105a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800105c:	f7ff ffbc 	bl	8000fd8 <Error_Handler>
 8001060:	20000970 	.word	0x20000970
 8001064:	40005400 	.word	0x40005400
 8001068:	00061a80 	.word	0x00061a80

0800106c <MX_SPI1_Init>:
{
 800106c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_SPI1_Init+0x38>)
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_SPI1_Init+0x3c>)
 8001072:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001074:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001078:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107a:	2300      	movs	r3, #0
 800107c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800107e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001080:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001082:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800108a:	2228      	movs	r2, #40	; 0x28
 800108c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001090:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001092:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001094:	230a      	movs	r3, #10
 8001096:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001098:	f003 fc54 	bl	8004944 <HAL_SPI_Init>
 800109c:	b900      	cbnz	r0, 80010a0 <MX_SPI1_Init+0x34>
}
 800109e:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010a0:	f7ff ff9a 	bl	8000fd8 <Error_Handler>
 80010a4:	200009c4 	.word	0x200009c4
 80010a8:	40013000 	.word	0x40013000

080010ac <MX_ADC2_Init>:
{
 80010ac:	b500      	push	{lr}
 80010ae:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b0:	2300      	movs	r3, #0
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	9303      	str	r3, [sp, #12]
  hadc2.Instance = ADC2;
 80010b8:	480f      	ldr	r0, [pc, #60]	; (80010f8 <MX_ADC2_Init+0x4c>)
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <MX_ADC2_Init+0x50>)
 80010bc:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010be:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c0:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010c2:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010c8:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010d0:	f002 f936 	bl	8003340 <HAL_ADC_Init>
 80010d4:	b960      	cbnz	r0, 80010f0 <MX_ADC2_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010da:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010dc:	2300      	movs	r3, #0
 80010de:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010e0:	a901      	add	r1, sp, #4
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_ADC2_Init+0x4c>)
 80010e4:	f001 ffa8 	bl	8003038 <HAL_ADC_ConfigChannel>
 80010e8:	b920      	cbnz	r0, 80010f4 <MX_ADC2_Init+0x48>
}
 80010ea:	b005      	add	sp, #20
 80010ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80010f0:	f7ff ff72 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 80010f4:	f7ff ff70 	bl	8000fd8 <Error_Handler>
 80010f8:	20000940 	.word	0x20000940
 80010fc:	40012800 	.word	0x40012800

08001100 <MX_TIM2_Init>:
{
 8001100:	b500      	push	{lr}
 8001102:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001104:	2300      	movs	r3, #0
 8001106:	930a      	str	r3, [sp, #40]	; 0x28
 8001108:	930b      	str	r3, [sp, #44]	; 0x2c
 800110a:	930c      	str	r3, [sp, #48]	; 0x30
 800110c:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110e:	9308      	str	r3, [sp, #32]
 8001110:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	9303      	str	r3, [sp, #12]
 8001118:	9304      	str	r3, [sp, #16]
 800111a:	9305      	str	r3, [sp, #20]
 800111c:	9306      	str	r3, [sp, #24]
 800111e:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8001120:	481d      	ldr	r0, [pc, #116]	; (8001198 <MX_TIM2_Init+0x98>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1-1;
 8001128:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 255-1;
 800112c:	22fe      	movs	r2, #254	; 0xfe
 800112e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001134:	f004 f91a 	bl	800536c <HAL_TIM_Base_Init>
 8001138:	bb20      	cbnz	r0, 8001184 <MX_TIM2_Init+0x84>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001140:	a90a      	add	r1, sp, #40	; 0x28
 8001142:	4815      	ldr	r0, [pc, #84]	; (8001198 <MX_TIM2_Init+0x98>)
 8001144:	f004 fa16 	bl	8005574 <HAL_TIM_ConfigClockSource>
 8001148:	b9f0      	cbnz	r0, 8001188 <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800114a:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM2_Init+0x98>)
 800114c:	f004 f93a 	bl	80053c4 <HAL_TIM_PWM_Init>
 8001150:	b9e0      	cbnz	r0, 800118c <MX_TIM2_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001158:	a908      	add	r1, sp, #32
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <MX_TIM2_Init+0x98>)
 800115c:	f004 fb48 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	b9b0      	cbnz	r0, 8001190 <MX_TIM2_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001162:	2360      	movs	r3, #96	; 0x60
 8001164:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8001166:	2200      	movs	r2, #0
 8001168:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	a901      	add	r1, sp, #4
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <MX_TIM2_Init+0x98>)
 8001172:	f004 f985 	bl	8005480 <HAL_TIM_PWM_ConfigChannel>
 8001176:	b968      	cbnz	r0, 8001194 <MX_TIM2_Init+0x94>
  HAL_TIM_MspPostInit(&htim2);
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM2_Init+0x98>)
 800117a:	f001 fd47 	bl	8002c0c <HAL_TIM_MspPostInit>
}
 800117e:	b00f      	add	sp, #60	; 0x3c
 8001180:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001184:	f7ff ff28 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001188:	f7ff ff26 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 800118c:	f7ff ff24 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001190:	f7ff ff22 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001194:	f7ff ff20 	bl	8000fd8 <Error_Handler>
 8001198:	20000a1c 	.word	0x20000a1c

0800119c <MX_TIM3_Init>:
{
 800119c:	b500      	push	{lr}
 800119e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a0:	2300      	movs	r3, #0
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	9303      	str	r3, [sp, #12]
 80011a6:	9304      	str	r3, [sp, #16]
 80011a8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 80011ae:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_TIM3_Init+0x60>)
 80011b0:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_TIM3_Init+0x64>)
 80011b2:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 80011b4:	2247      	movs	r2, #71	; 0x47
 80011b6:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 125-1;
 80011ba:	227c      	movs	r2, #124	; 0x7c
 80011bc:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c2:	f004 f8d3 	bl	800536c <HAL_TIM_Base_Init>
 80011c6:	b990      	cbnz	r0, 80011ee <MX_TIM3_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ce:	a902      	add	r1, sp, #8
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <MX_TIM3_Init+0x60>)
 80011d2:	f004 f9cf 	bl	8005574 <HAL_TIM_ConfigClockSource>
 80011d6:	b960      	cbnz	r0, 80011f2 <MX_TIM3_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011de:	4669      	mov	r1, sp
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_TIM3_Init+0x60>)
 80011e2:	f004 fb05 	bl	80057f0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	b930      	cbnz	r0, 80011f6 <MX_TIM3_Init+0x5a>
}
 80011e8:	b007      	add	sp, #28
 80011ea:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011ee:	f7ff fef3 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 80011f2:	f7ff fef1 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 80011f6:	f7ff feef 	bl	8000fd8 <Error_Handler>
 80011fa:	bf00      	nop
 80011fc:	20000a64 	.word	0x20000a64
 8001200:	40000400 	.word	0x40000400

08001204 <SystemClock_Config>:
{
 8001204:	b500      	push	{lr}
 8001206:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001208:	2228      	movs	r2, #40	; 0x28
 800120a:	2100      	movs	r1, #0
 800120c:	eb0d 0002 	add.w	r0, sp, r2
 8001210:	f007 f991 	bl	8008536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001214:	2300      	movs	r3, #0
 8001216:	9305      	str	r3, [sp, #20]
 8001218:	9306      	str	r3, [sp, #24]
 800121a:	9307      	str	r3, [sp, #28]
 800121c:	9308      	str	r3, [sp, #32]
 800121e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	9303      	str	r3, [sp, #12]
 8001226:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001228:	2201      	movs	r2, #1
 800122a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001230:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001232:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2202      	movs	r2, #2
 8001236:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001238:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800123a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800123e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001240:	a80a      	add	r0, sp, #40	; 0x28
 8001242:	f002 fea7 	bl	8003f94 <HAL_RCC_OscConfig>
 8001246:	b9c8      	cbnz	r0, 800127c <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2102      	movs	r1, #2
 800124e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001258:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125c:	a805      	add	r0, sp, #20
 800125e:	f003 f8cb 	bl	80043f8 <HAL_RCC_ClockConfig>
 8001262:	b968      	cbnz	r0, 8001280 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001264:	2302      	movs	r3, #2
 8001266:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	a801      	add	r0, sp, #4
 8001270:	f003 f9bc 	bl	80045ec <HAL_RCCEx_PeriphCLKConfig>
 8001274:	b930      	cbnz	r0, 8001284 <SystemClock_Config+0x80>
}
 8001276:	b015      	add	sp, #84	; 0x54
 8001278:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800127c:	f7ff feac 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001280:	f7ff feaa 	bl	8000fd8 <Error_Handler>
    Error_Handler();
 8001284:	f7ff fea8 	bl	8000fd8 <Error_Handler>

08001288 <main>:
{
 8001288:	b508      	push	{r3, lr}
  HAL_Init();
 800128a:	f001 fdd7 	bl	8002e3c <HAL_Init>
  SystemClock_Config();
 800128e:	f7ff ffb9 	bl	8001204 <SystemClock_Config>
  MX_GPIO_Init();
 8001292:	f7ff fc3d 	bl	8000b10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001296:	f7ff fea1 	bl	8000fdc <MX_ADC1_Init>
  MX_I2C1_Init();
 800129a:	f7ff fecb 	bl	8001034 <MX_I2C1_Init>
  MX_SPI1_Init();
 800129e:	f7ff fee5 	bl	800106c <MX_SPI1_Init>
  MX_ADC2_Init();
 80012a2:	f7ff ff03 	bl	80010ac <MX_ADC2_Init>
  MX_TIM2_Init();
 80012a6:	f7ff ff2b 	bl	8001100 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012aa:	f7ff ff77 	bl	800119c <MX_TIM3_Init>
  osKernelInitialize();
 80012ae:	f004 fad7 	bl	8005860 <osKernelInitialize>
  myMutexPuntajeHandle = osMutexNew(&myMutexPuntaje_attributes);
 80012b2:	481e      	ldr	r0, [pc, #120]	; (800132c <main+0xa4>)
 80012b4:	f004 fc52 	bl	8005b5c <osMutexNew>
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <main+0xa8>)
 80012ba:	6018      	str	r0, [r3, #0]
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 80012bc:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <main+0xac>)
 80012be:	2103      	movs	r1, #3
 80012c0:	200a      	movs	r0, #10
 80012c2:	f004 fd25 	bl	8005d10 <osMessageQueueNew>
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <main+0xb0>)
 80012c8:	6018      	str	r0, [r3, #0]
  queueSonidoMenuHandle = osMessageQueueNew (10, sizeof(musica_t), &queueSonidoMenu_attributes);
 80012ca:	4a1c      	ldr	r2, [pc, #112]	; (800133c <main+0xb4>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	200a      	movs	r0, #10
 80012d0:	f004 fd1e 	bl	8005d10 <osMessageQueueNew>
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <main+0xb8>)
 80012d6:	6018      	str	r0, [r3, #0]
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 80012d8:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <main+0xbc>)
 80012da:	2100      	movs	r1, #0
 80012dc:	481a      	ldr	r0, [pc, #104]	; (8001348 <main+0xc0>)
 80012de:	f004 fb07 	bl	80058f0 <osThreadNew>
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <main+0xc4>)
 80012e4:	6018      	str	r0, [r3, #0]
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 80012e6:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <main+0xc8>)
 80012e8:	2100      	movs	r1, #0
 80012ea:	481a      	ldr	r0, [pc, #104]	; (8001354 <main+0xcc>)
 80012ec:	f004 fb00 	bl	80058f0 <osThreadNew>
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <main+0xd0>)
 80012f2:	6018      	str	r0, [r3, #0]
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 80012f4:	4a19      	ldr	r2, [pc, #100]	; (800135c <main+0xd4>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <main+0xd8>)
 80012fa:	f004 faf9 	bl	80058f0 <osThreadNew>
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <main+0xdc>)
 8001300:	6018      	str	r0, [r3, #0]
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <main+0xe0>)
 8001304:	2100      	movs	r1, #0
 8001306:	4819      	ldr	r0, [pc, #100]	; (800136c <main+0xe4>)
 8001308:	f004 faf2 	bl	80058f0 <osThreadNew>
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <main+0xe8>)
 800130e:	6018      	str	r0, [r3, #0]
  notificationFlag = osEventFlagsNew(NULL);
 8001310:	2000      	movs	r0, #0
 8001312:	f004 fb63 	bl	80059dc <osEventFlagsNew>
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <main+0xec>)
 8001318:	6018      	str	r0, [r3, #0]
  notificationFlag2 = osEventFlagsNew(NULL);
 800131a:	2000      	movs	r0, #0
 800131c:	f004 fb5e 	bl	80059dc <osEventFlagsNew>
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <main+0xf0>)
 8001322:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001324:	f004 fabe 	bl	80058a4 <osKernelStart>
  while (1)
 8001328:	e7fe      	b.n	8001328 <main+0xa0>
 800132a:	bf00      	nop
 800132c:	08009bc0 	.word	0x08009bc0
 8001330:	20000ab0 	.word	0x20000ab0
 8001334:	08009bd0 	.word	0x08009bd0
 8001338:	20000ac0 	.word	0x20000ac0
 800133c:	08009be8 	.word	0x08009be8
 8001340:	20000ac4 	.word	0x20000ac4
 8001344:	08009b30 	.word	0x08009b30
 8001348:	08000c01 	.word	0x08000c01
 800134c:	200008fc 	.word	0x200008fc
 8001350:	08009b78 	.word	0x08009b78
 8001354:	08000ce5 	.word	0x08000ce5
 8001358:	20000904 	.word	0x20000904
 800135c:	08009b54 	.word	0x08009b54
 8001360:	08000d39 	.word	0x08000d39
 8001364:	20000900 	.word	0x20000900
 8001368:	08009b9c 	.word	0x08009b9c
 800136c:	08000d71 	.word	0x08000d71
 8001370:	20000908 	.word	0x20000908
 8001374:	20000ab4 	.word	0x20000ab4
 8001378:	20000ab8 	.word	0x20000ab8

0800137c <getPuntajes>:

puntajes_t *getPuntajes(uint8_t indice){

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
}
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <getPuntajes+0x8>)
 800137e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001382:	4770      	bx	lr
 8001384:	20000acc 	.word	0x20000acc

08001388 <Write_Enable>:


void Write_Enable(){
 8001388:	b530      	push	{r4, r5, lr}
 800138a:	b083      	sub	sp, #12


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 800138c:	4c10      	ldr	r4, [pc, #64]	; (80013d0 <Write_Enable+0x48>)
 800138e:	2201      	movs	r2, #1
 8001390:	2120      	movs	r1, #32
 8001392:	4620      	mov	r0, r4
 8001394:	f002 f9e3 	bl	800375e <HAL_GPIO_WritePin>

	uint8_t comando[2] = { 0x27 , 0xFF};
 8001398:	f64f 7327 	movw	r3, #65319	; 0xff27
 800139c:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&hspi1, &comando[0], 1, HAL_MAX_DELAY);
 80013a0:	4d0c      	ldr	r5, [pc, #48]	; (80013d4 <Write_Enable+0x4c>)
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	2201      	movs	r2, #1
 80013a8:	a901      	add	r1, sp, #4
 80013aa:	4628      	mov	r0, r5
 80013ac:	f003 fb25 	bl	80049fa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &comando[1], 1, HAL_MAX_DELAY);
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	2201      	movs	r2, #1
 80013b6:	f10d 0105 	add.w	r1, sp, #5
 80013ba:	4628      	mov	r0, r5
 80013bc:	f003 fb1d 	bl	80049fa <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2120      	movs	r1, #32
 80013c4:	4620      	mov	r0, r4
 80013c6:	f002 f9ca 	bl	800375e <HAL_GPIO_WritePin>


}
 80013ca:	b003      	add	sp, #12
 80013cc:	bd30      	pop	{r4, r5, pc}
 80013ce:	bf00      	nop
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	200009c4 	.word	0x200009c4

080013d8 <Write_Memoria>:

void Write_Memoria(uint16_t address, uint8_t dato){
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	4604      	mov	r4, r0
 80013de:	460d      	mov	r5, r1

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 80013e0:	4e0d      	ldr	r6, [pc, #52]	; (8001418 <Write_Memoria+0x40>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	2120      	movs	r1, #32
 80013e6:	4630      	mov	r0, r6
 80013e8:	f002 f9b9 	bl	800375e <HAL_GPIO_WritePin>

	uint8_t comando[3] = { ((uint8_t)WRITE<<3) + (address>>8  & 0xFF), address & 0xFF, dato};
 80013ec:	0a23      	lsrs	r3, r4, #8
 80013ee:	3328      	adds	r3, #40	; 0x28
 80013f0:	f88d 3004 	strb.w	r3, [sp, #4]
 80013f4:	f88d 4005 	strb.w	r4, [sp, #5]
 80013f8:	f88d 5006 	strb.w	r5, [sp, #6]
	HAL_SPI_Transmit(&hspi1, comando, 3, HAL_MAX_DELAY);
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	2203      	movs	r2, #3
 8001402:	a901      	add	r1, sp, #4
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <Write_Memoria+0x44>)
 8001406:	f003 faf8 	bl	80049fa <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2120      	movs	r1, #32
 800140e:	4630      	mov	r0, r6
 8001410:	f002 f9a5 	bl	800375e <HAL_GPIO_WritePin>
}
 8001414:	b002      	add	sp, #8
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	40010c00 	.word	0x40010c00
 800141c:	200009c4 	.word	0x200009c4

08001420 <Read_all>:


	return ((dato_leido[0]<<1) + (dato_leido[1]>>7));
}

void Read_all(uint16_t address, uint16_t tamano, uint8_t *buffer){
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	4604      	mov	r4, r0
 8001426:	460e      	mov	r6, r1
 8001428:	4615      	mov	r5, r2


	uint8_t dato_actual, dato_anterior;


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2120      	movs	r1, #32
 800142e:	481f      	ldr	r0, [pc, #124]	; (80014ac <Read_all+0x8c>)
 8001430:	f002 f995 	bl	800375e <HAL_GPIO_WritePin>

	uint8_t comando[2] = { ((uint16_t)READ<<3) + (address>>8 & 0xFF), address & 0xFF};
 8001434:	0a23      	lsrs	r3, r4, #8
 8001436:	3330      	adds	r3, #48	; 0x30
 8001438:	f88d 3004 	strb.w	r3, [sp, #4]
 800143c:	f88d 4005 	strb.w	r4, [sp, #5]
	HAL_SPI_Transmit(&hspi1, comando, 2, 100);
 8001440:	4c1b      	ldr	r4, [pc, #108]	; (80014b0 <Read_all+0x90>)
 8001442:	2364      	movs	r3, #100	; 0x64
 8001444:	2202      	movs	r2, #2
 8001446:	a901      	add	r1, sp, #4
 8001448:	4620      	mov	r0, r4
 800144a:	f003 fad6 	bl	80049fa <HAL_SPI_Transmit>

	HAL_Delay(10);
 800144e:	200a      	movs	r0, #10
 8001450:	f001 fd18 	bl	8002e84 <HAL_Delay>

	HAL_SPI_Receive(&hspi1, &dato_anterior, 1, HAL_MAX_DELAY);
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2201      	movs	r2, #1
 800145a:	f10d 0106 	add.w	r1, sp, #6
 800145e:	4620      	mov	r0, r4
 8001460:	f003 fcc9 	bl	8004df6 <HAL_SPI_Receive>


	for(uint16_t i=0; i< tamano; i++){
 8001464:	2400      	movs	r4, #0
 8001466:	e015      	b.n	8001494 <Read_all+0x74>

		HAL_SPI_Receive(&hspi1, &dato_actual, 1, HAL_MAX_DELAY);
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	2201      	movs	r2, #1
 800146e:	f10d 0107 	add.w	r1, sp, #7
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <Read_all+0x90>)
 8001474:	f003 fcbf 	bl	8004df6 <HAL_SPI_Receive>
		*buffer = (dato_anterior<<1) + (dato_actual>>7);
 8001478:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001484:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8001488:	f805 3b01 	strb.w	r3, [r5], #1
		buffer++;
		dato_anterior = dato_actual;
 800148c:	f88d 2006 	strb.w	r2, [sp, #6]
	for(uint16_t i=0; i< tamano; i++){
 8001490:	3401      	adds	r4, #1
 8001492:	b2a4      	uxth	r4, r4
 8001494:	42b4      	cmp	r4, r6
 8001496:	d3e7      	bcc.n	8001468 <Read_all+0x48>
		//HAL_Delay(1);
	}

	HAL_Delay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f001 fcf3 	bl	8002e84 <HAL_Delay>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2120      	movs	r1, #32
 80014a2:	4802      	ldr	r0, [pc, #8]	; (80014ac <Read_all+0x8c>)
 80014a4:	f002 f95b 	bl	800375e <HAL_GPIO_WritePin>

}
 80014a8:	b002      	add	sp, #8
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
 80014ac:	40010c00 	.word	0x40010c00
 80014b0:	200009c4 	.word	0x200009c4

080014b4 <memoriaInit>:



void memoriaInit(){
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30


		char buff_nombre[7];
		strcpy(buff_nombre, "      ");
 80014b8:	4b63      	ldr	r3, [pc, #396]	; (8001648 <memoriaInit+0x194>)
 80014ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014be:	900a      	str	r0, [sp, #40]	; 0x28
 80014c0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80014c4:	0c09      	lsrs	r1, r1, #16
 80014c6:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
		uint8_t puntaje_msb = 0;

		uint8_t buffer[TAMANO_TOTAL_PUNTAJES];


		Read_all(address, TAMANO_TOTAL_PUNTAJES, buffer);
 80014ca:	466a      	mov	r2, sp
 80014cc:	2128      	movs	r1, #40	; 0x28
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff ffa6 	bl	8001420 <Read_all>
		uint8_t puntaje_msb = 0;
 80014d4:	2500      	movs	r5, #0
		uint8_t i=0;
 80014d6:	462c      	mov	r4, r5
		uint8_t permiso = true;
 80014d8:	2001      	movs	r0, #1
		uint8_t j = 0;
 80014da:	4629      	mov	r1, r5
 80014dc:	e009      	b.n	80014f2 <memoriaInit+0x3e>

		do{

			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){

				puntaje_msb = buffer[i];
 80014de:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80014e2:	446b      	add	r3, sp
 80014e4:	f813 5c30 	ldrb.w	r5, [r3, #-48]
					else{
						j++;
					}
				}
			}
			i++;
 80014e8:	3401      	adds	r4, #1
 80014ea:	b2e4      	uxtb	r4, r4

		}while(i != 40);
 80014ec:	2c28      	cmp	r4, #40	; 0x28
 80014ee:	f000 80a9 	beq.w	8001644 <memoriaInit+0x190>
			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 80014f2:	2c06      	cmp	r4, #6
 80014f4:	d0f3      	beq.n	80014de <memoriaInit+0x2a>
 80014f6:	2c07      	cmp	r4, #7
 80014f8:	d03c      	beq.n	8001574 <memoriaInit+0xc0>
 80014fa:	d30e      	bcc.n	800151a <memoriaInit+0x66>
 80014fc:	2c27      	cmp	r4, #39	; 0x27
 80014fe:	d80c      	bhi.n	800151a <memoriaInit+0x66>
 8001500:	2c0e      	cmp	r4, #14
 8001502:	d30a      	bcc.n	800151a <memoriaInit+0x66>
 8001504:	f1a4 020e 	sub.w	r2, r4, #14
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	2301      	movs	r3, #1
 800150c:	4093      	lsls	r3, r2
 800150e:	f013 3f02 	tst.w	r3, #33686018	; 0x2020202
 8001512:	d12f      	bne.n	8001574 <memoriaInit+0xc0>
 8001514:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 8001518:	d1e1      	bne.n	80014de <memoriaInit+0x2a>
				if( (buff_nombre[j] != '\0') && permiso==true){
 800151a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800151e:	446b      	add	r3, sp
 8001520:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0df      	beq.n	80014e8 <memoriaInit+0x34>
 8001528:	2801      	cmp	r0, #1
 800152a:	d1dd      	bne.n	80014e8 <memoriaInit+0x34>
					buff_nombre[j]  = buffer[i];;
 800152c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001530:	446b      	add	r3, sp
 8001532:	f813 6c30 	ldrb.w	r6, [r3, #-48]
 8001536:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800153a:	eb0d 0203 	add.w	r2, sp, r3
 800153e:	f802 6c08 	strb.w	r6, [r2, #-8]
					if(buff_nombre[j] == '\0'){
 8001542:	2e00      	cmp	r6, #0
 8001544:	d178      	bne.n	8001638 <memoriaInit+0x184>
						if((i>=0 && i<6)){
 8001546:	2c25      	cmp	r4, #37	; 0x25
 8001548:	d856      	bhi.n	80015f8 <memoriaInit+0x144>
 800154a:	e8df f004 	tbb	[pc, r4]
 800154e:	5151      	.short	0x5151
 8001550:	51515151 	.word	0x51515151
 8001554:	61615555 	.word	0x61615555
 8001558:	61616161 	.word	0x61616161
 800155c:	66665555 	.word	0x66665555
 8001560:	66666666 	.word	0x66666666
 8001564:	6b6b5555 	.word	0x6b6b5555
 8001568:	6b6b6b6b 	.word	0x6b6b6b6b
 800156c:	70705555 	.word	0x70705555
 8001570:	70707070 	.word	0x70707070
				puntaje_lsb = buffer[i];
 8001574:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001578:	446b      	add	r3, sp
 800157a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
				switch(i){
 800157e:	1fe2      	subs	r2, r4, #7
 8001580:	2a20      	cmp	r2, #32
 8001582:	d85c      	bhi.n	800163e <memoriaInit+0x18a>
 8001584:	e8df f002 	tbb	[pc, r2]
 8001588:	5b5b5b11 	.word	0x5b5b5b11
 800158c:	5b5b5b5b 	.word	0x5b5b5b5b
 8001590:	5b5b5b18 	.word	0x5b5b5b18
 8001594:	5b5b5b5b 	.word	0x5b5b5b5b
 8001598:	5b5b5b1f 	.word	0x5b5b5b1f
 800159c:	5b5b5b5b 	.word	0x5b5b5b5b
 80015a0:	5b5b5b26 	.word	0x5b5b5b26
 80015a4:	5b5b5b5b 	.word	0x5b5b5b5b
 80015a8:	2d          	.byte	0x2d
 80015a9:	00          	.byte	0x00
					Puntajes[0].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015aa:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015ae:	4a27      	ldr	r2, [pc, #156]	; (800164c <memoriaInit+0x198>)
 80015b0:	80d3      	strh	r3, [r2, #6]
				puntaje_msb = 0;
 80015b2:	2500      	movs	r5, #0
				permiso = true;
 80015b4:	2001      	movs	r0, #1
					break;
 80015b6:	e797      	b.n	80014e8 <memoriaInit+0x34>
					Puntajes[1].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015b8:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015bc:	4a23      	ldr	r2, [pc, #140]	; (800164c <memoriaInit+0x198>)
 80015be:	81d3      	strh	r3, [r2, #14]
				puntaje_msb = 0;
 80015c0:	2500      	movs	r5, #0
				permiso = true;
 80015c2:	2001      	movs	r0, #1
					break;
 80015c4:	e790      	b.n	80014e8 <memoriaInit+0x34>
					Puntajes[2].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015c6:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015ca:	4a20      	ldr	r2, [pc, #128]	; (800164c <memoriaInit+0x198>)
 80015cc:	82d3      	strh	r3, [r2, #22]
				puntaje_msb = 0;
 80015ce:	2500      	movs	r5, #0
				permiso = true;
 80015d0:	2001      	movs	r0, #1
					break;
 80015d2:	e789      	b.n	80014e8 <memoriaInit+0x34>
					Puntajes[3].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015d4:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015d8:	4a1c      	ldr	r2, [pc, #112]	; (800164c <memoriaInit+0x198>)
 80015da:	83d3      	strh	r3, [r2, #30]
				puntaje_msb = 0;
 80015dc:	2500      	movs	r5, #0
				permiso = true;
 80015de:	2001      	movs	r0, #1
					break;
 80015e0:	e782      	b.n	80014e8 <memoriaInit+0x34>
					Puntajes[4].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015e2:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015e6:	4a19      	ldr	r2, [pc, #100]	; (800164c <memoriaInit+0x198>)
 80015e8:	84d3      	strh	r3, [r2, #38]	; 0x26
				puntaje_msb = 0;
 80015ea:	2500      	movs	r5, #0
				permiso = true;
 80015ec:	2001      	movs	r0, #1
					break;
 80015ee:	e77b      	b.n	80014e8 <memoriaInit+0x34>
							strcpy(Puntajes[0].nombre, buff_nombre);
 80015f0:	a90a      	add	r1, sp, #40	; 0x28
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <memoriaInit+0x198>)
 80015f4:	f007 f81b 	bl	800862e <strcpy>
						strcpy(buff_nombre, "      ");
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <memoriaInit+0x194>)
 80015fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015fe:	900a      	str	r0, [sp, #40]	; 0x28
 8001600:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8001604:	0c09      	lsrs	r1, r1, #16
 8001606:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
						permiso = false;
 800160a:	4630      	mov	r0, r6
						j = 0;
 800160c:	4631      	mov	r1, r6
 800160e:	e76b      	b.n	80014e8 <memoriaInit+0x34>
							strcpy(Puntajes[1].nombre, buff_nombre);
 8001610:	a90a      	add	r1, sp, #40	; 0x28
 8001612:	480f      	ldr	r0, [pc, #60]	; (8001650 <memoriaInit+0x19c>)
 8001614:	f007 f80b 	bl	800862e <strcpy>
 8001618:	e7ee      	b.n	80015f8 <memoriaInit+0x144>
							strcpy(Puntajes[2].nombre, buff_nombre);
 800161a:	a90a      	add	r1, sp, #40	; 0x28
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <memoriaInit+0x1a0>)
 800161e:	f007 f806 	bl	800862e <strcpy>
 8001622:	e7e9      	b.n	80015f8 <memoriaInit+0x144>
							strcpy(Puntajes[3].nombre, buff_nombre);
 8001624:	a90a      	add	r1, sp, #40	; 0x28
 8001626:	480c      	ldr	r0, [pc, #48]	; (8001658 <memoriaInit+0x1a4>)
 8001628:	f007 f801 	bl	800862e <strcpy>
 800162c:	e7e4      	b.n	80015f8 <memoriaInit+0x144>
							strcpy(Puntajes[4].nombre, buff_nombre);
 800162e:	a90a      	add	r1, sp, #40	; 0x28
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <memoriaInit+0x1a8>)
 8001632:	f006 fffc 	bl	800862e <strcpy>
 8001636:	e7df      	b.n	80015f8 <memoriaInit+0x144>
						j++;
 8001638:	3101      	adds	r1, #1
 800163a:	b2c9      	uxtb	r1, r1
 800163c:	e754      	b.n	80014e8 <memoriaInit+0x34>
				switch(i){
 800163e:	2500      	movs	r5, #0
 8001640:	2001      	movs	r0, #1
 8001642:	e751      	b.n	80014e8 <memoriaInit+0x34>


}
 8001644:	b00c      	add	sp, #48	; 0x30
 8001646:	bd70      	pop	{r4, r5, r6, pc}
 8001648:	08009c00 	.word	0x08009c00
 800164c:	20000acc 	.word	0x20000acc
 8001650:	20000ad4 	.word	0x20000ad4
 8001654:	20000adc 	.word	0x20000adc
 8001658:	20000ae4 	.word	0x20000ae4
 800165c:	20000aec 	.word	0x20000aec

08001660 <writeNuevosPuntajes>:



void writeNuevosPuntajes(uint8_t permutaciones){
 8001660:	b530      	push	{r4, r5, lr}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	4605      	mov	r5, r0

	uint8_t k=0;
	uint16_t address;


	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 8001666:	2300      	movs	r3, #0
	uint8_t k=0;
 8001668:	4619      	mov	r1, r3
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 800166a:	e067      	b.n	800173c <writeNuevosPuntajes+0xdc>

		if(i>=0 && i<6){

			buff_nuevosPuntajes[i] = Puntajes[0].nombre[k];
 800166c:	4aa0      	ldr	r2, [pc, #640]	; (80018f0 <writeNuevosPuntajes+0x290>)
 800166e:	5c50      	ldrb	r0, [r2, r1]
 8001670:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001674:	446a      	add	r2, sp
 8001676:	f802 0c28 	strb.w	r0, [r2, #-40]
			k++;
 800167a:	3101      	adds	r1, #1
 800167c:	b2c9      	uxtb	r1, r1
		}




		switch(i){
 800167e:	1f9a      	subs	r2, r3, #6
 8001680:	2a21      	cmp	r2, #33	; 0x21
 8001682:	d859      	bhi.n	8001738 <writeNuevosPuntajes+0xd8>
 8001684:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001688:	00ae004f 	.word	0x00ae004f
 800168c:	00580058 	.word	0x00580058
 8001690:	00580058 	.word	0x00580058
 8001694:	00580058 	.word	0x00580058
 8001698:	00c000b6 	.word	0x00c000b6
 800169c:	00580058 	.word	0x00580058
 80016a0:	00580058 	.word	0x00580058
 80016a4:	00580058 	.word	0x00580058
 80016a8:	00d200c8 	.word	0x00d200c8
 80016ac:	00580058 	.word	0x00580058
 80016b0:	00580058 	.word	0x00580058
 80016b4:	00580058 	.word	0x00580058
 80016b8:	00e400da 	.word	0x00e400da
 80016bc:	00580058 	.word	0x00580058
 80016c0:	00580058 	.word	0x00580058
 80016c4:	00580058 	.word	0x00580058
 80016c8:	00f600ec 	.word	0x00f600ec
			buff_nuevosPuntajes[i] = Puntajes[1].nombre[k];
 80016cc:	4a88      	ldr	r2, [pc, #544]	; (80018f0 <writeNuevosPuntajes+0x290>)
 80016ce:	440a      	add	r2, r1
 80016d0:	7a10      	ldrb	r0, [r2, #8]
 80016d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80016d6:	446a      	add	r2, sp
 80016d8:	f802 0c28 	strb.w	r0, [r2, #-40]
			k++;
 80016dc:	3101      	adds	r1, #1
 80016de:	b2c9      	uxtb	r1, r1
 80016e0:	e7cd      	b.n	800167e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[2].nombre[k];
 80016e2:	4a83      	ldr	r2, [pc, #524]	; (80018f0 <writeNuevosPuntajes+0x290>)
 80016e4:	440a      	add	r2, r1
 80016e6:	7c10      	ldrb	r0, [r2, #16]
 80016e8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80016ec:	446a      	add	r2, sp
 80016ee:	f802 0c28 	strb.w	r0, [r2, #-40]
			k++;
 80016f2:	3101      	adds	r1, #1
 80016f4:	b2c9      	uxtb	r1, r1
 80016f6:	e7c2      	b.n	800167e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[3].nombre[k];
 80016f8:	4a7d      	ldr	r2, [pc, #500]	; (80018f0 <writeNuevosPuntajes+0x290>)
 80016fa:	440a      	add	r2, r1
 80016fc:	7e10      	ldrb	r0, [r2, #24]
 80016fe:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001702:	446a      	add	r2, sp
 8001704:	f802 0c28 	strb.w	r0, [r2, #-40]
			k++;
 8001708:	3101      	adds	r1, #1
 800170a:	b2c9      	uxtb	r1, r1
 800170c:	e7b7      	b.n	800167e <writeNuevosPuntajes+0x1e>
			buff_nuevosPuntajes[i] = Puntajes[4].nombre[k];
 800170e:	4a78      	ldr	r2, [pc, #480]	; (80018f0 <writeNuevosPuntajes+0x290>)
 8001710:	440a      	add	r2, r1
 8001712:	f892 0020 	ldrb.w	r0, [r2, #32]
 8001716:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800171a:	446a      	add	r2, sp
 800171c:	f802 0c28 	strb.w	r0, [r2, #-40]
			k++;
 8001720:	3101      	adds	r1, #1
 8001722:	b2c9      	uxtb	r1, r1
 8001724:	e7ab      	b.n	800167e <writeNuevosPuntajes+0x1e>


		case 6:
			buff_nuevosPuntajes[i] = Puntajes[0].puntaje >>8;
 8001726:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <writeNuevosPuntajes+0x290>)
 8001728:	88d1      	ldrh	r1, [r2, #6]
 800172a:	0a09      	lsrs	r1, r1, #8
 800172c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001730:	446a      	add	r2, sp
 8001732:	f802 1c28 	strb.w	r1, [r2, #-40]
			k = 0;
 8001736:	2100      	movs	r1, #0
	for(uint8_t i=0;i<TAMANO_TOTAL_PUNTAJES;i++){
 8001738:	3301      	adds	r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b27      	cmp	r3, #39	; 0x27
 800173e:	f200 80a1 	bhi.w	8001884 <writeNuevosPuntajes+0x224>
		if(i>=0 && i<6){
 8001742:	2b25      	cmp	r3, #37	; 0x25
 8001744:	d89b      	bhi.n	800167e <writeNuevosPuntajes+0x1e>
 8001746:	a201      	add	r2, pc, #4	; (adr r2, 800174c <writeNuevosPuntajes+0xec>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800166d 	.word	0x0800166d
 8001750:	0800166d 	.word	0x0800166d
 8001754:	0800166d 	.word	0x0800166d
 8001758:	0800166d 	.word	0x0800166d
 800175c:	0800166d 	.word	0x0800166d
 8001760:	0800166d 	.word	0x0800166d
 8001764:	0800167f 	.word	0x0800167f
 8001768:	0800167f 	.word	0x0800167f
 800176c:	080016cd 	.word	0x080016cd
 8001770:	080016cd 	.word	0x080016cd
 8001774:	080016cd 	.word	0x080016cd
 8001778:	080016cd 	.word	0x080016cd
 800177c:	080016cd 	.word	0x080016cd
 8001780:	080016cd 	.word	0x080016cd
 8001784:	0800167f 	.word	0x0800167f
 8001788:	0800167f 	.word	0x0800167f
 800178c:	080016e3 	.word	0x080016e3
 8001790:	080016e3 	.word	0x080016e3
 8001794:	080016e3 	.word	0x080016e3
 8001798:	080016e3 	.word	0x080016e3
 800179c:	080016e3 	.word	0x080016e3
 80017a0:	080016e3 	.word	0x080016e3
 80017a4:	0800167f 	.word	0x0800167f
 80017a8:	0800167f 	.word	0x0800167f
 80017ac:	080016f9 	.word	0x080016f9
 80017b0:	080016f9 	.word	0x080016f9
 80017b4:	080016f9 	.word	0x080016f9
 80017b8:	080016f9 	.word	0x080016f9
 80017bc:	080016f9 	.word	0x080016f9
 80017c0:	080016f9 	.word	0x080016f9
 80017c4:	0800167f 	.word	0x0800167f
 80017c8:	0800167f 	.word	0x0800167f
 80017cc:	0800170f 	.word	0x0800170f
 80017d0:	0800170f 	.word	0x0800170f
 80017d4:	0800170f 	.word	0x0800170f
 80017d8:	0800170f 	.word	0x0800170f
 80017dc:	0800170f 	.word	0x0800170f
 80017e0:	0800170f 	.word	0x0800170f
			break;
		case 7:
			buff_nuevosPuntajes[i] = Puntajes[0].puntaje & 0xFF;
 80017e4:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <writeNuevosPuntajes+0x290>)
 80017e6:	88d0      	ldrh	r0, [r2, #6]
 80017e8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80017ec:	446a      	add	r2, sp
 80017ee:	f802 0c28 	strb.w	r0, [r2, #-40]
			break;
 80017f2:	e7a1      	b.n	8001738 <writeNuevosPuntajes+0xd8>
		case 14:
			buff_nuevosPuntajes[i] = Puntajes[1].puntaje >>8;
 80017f4:	4a3e      	ldr	r2, [pc, #248]	; (80018f0 <writeNuevosPuntajes+0x290>)
 80017f6:	89d1      	ldrh	r1, [r2, #14]
 80017f8:	0a09      	lsrs	r1, r1, #8
 80017fa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80017fe:	446a      	add	r2, sp
 8001800:	f802 1c28 	strb.w	r1, [r2, #-40]
			k = 0;
 8001804:	2100      	movs	r1, #0
			break;
 8001806:	e797      	b.n	8001738 <writeNuevosPuntajes+0xd8>
		case 15:
			buff_nuevosPuntajes[i] = Puntajes[1].puntaje & 0xFF;
 8001808:	4a39      	ldr	r2, [pc, #228]	; (80018f0 <writeNuevosPuntajes+0x290>)
 800180a:	89d0      	ldrh	r0, [r2, #14]
 800180c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001810:	446a      	add	r2, sp
 8001812:	f802 0c28 	strb.w	r0, [r2, #-40]
			break;
 8001816:	e78f      	b.n	8001738 <writeNuevosPuntajes+0xd8>
		case 22:
			buff_nuevosPuntajes[i] = Puntajes[2].puntaje >>8;
 8001818:	4a35      	ldr	r2, [pc, #212]	; (80018f0 <writeNuevosPuntajes+0x290>)
 800181a:	8ad1      	ldrh	r1, [r2, #22]
 800181c:	0a09      	lsrs	r1, r1, #8
 800181e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001822:	446a      	add	r2, sp
 8001824:	f802 1c28 	strb.w	r1, [r2, #-40]
			k = 0;
 8001828:	2100      	movs	r1, #0
			break;
 800182a:	e785      	b.n	8001738 <writeNuevosPuntajes+0xd8>
		case 23:
			buff_nuevosPuntajes[i] = Puntajes[2].puntaje & 0xFF;
 800182c:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <writeNuevosPuntajes+0x290>)
 800182e:	8ad0      	ldrh	r0, [r2, #22]
 8001830:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001834:	446a      	add	r2, sp
 8001836:	f802 0c28 	strb.w	r0, [r2, #-40]
			break;
 800183a:	e77d      	b.n	8001738 <writeNuevosPuntajes+0xd8>
		case 30:
			buff_nuevosPuntajes[i] = Puntajes[3].puntaje >>8;
 800183c:	4a2c      	ldr	r2, [pc, #176]	; (80018f0 <writeNuevosPuntajes+0x290>)
 800183e:	8bd1      	ldrh	r1, [r2, #30]
 8001840:	0a09      	lsrs	r1, r1, #8
 8001842:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001846:	446a      	add	r2, sp
 8001848:	f802 1c28 	strb.w	r1, [r2, #-40]
			k = 0;
 800184c:	2100      	movs	r1, #0
			break;
 800184e:	e773      	b.n	8001738 <writeNuevosPuntajes+0xd8>
		case 31:
			buff_nuevosPuntajes[i] = Puntajes[3].puntaje & 0xFF;
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <writeNuevosPuntajes+0x290>)
 8001852:	8bd0      	ldrh	r0, [r2, #30]
 8001854:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001858:	446a      	add	r2, sp
 800185a:	f802 0c28 	strb.w	r0, [r2, #-40]
			break;
 800185e:	e76b      	b.n	8001738 <writeNuevosPuntajes+0xd8>
		case 38:
			buff_nuevosPuntajes[i] = Puntajes[4].puntaje >>8;
 8001860:	4a23      	ldr	r2, [pc, #140]	; (80018f0 <writeNuevosPuntajes+0x290>)
 8001862:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8001864:	0a09      	lsrs	r1, r1, #8
 8001866:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800186a:	446a      	add	r2, sp
 800186c:	f802 1c28 	strb.w	r1, [r2, #-40]
			k = 0;
 8001870:	2100      	movs	r1, #0
			break;
 8001872:	e761      	b.n	8001738 <writeNuevosPuntajes+0xd8>
		case 39:
			buff_nuevosPuntajes[i] = Puntajes[4].puntaje & 0xFF;
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <writeNuevosPuntajes+0x290>)
 8001876:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8001878:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800187c:	446a      	add	r2, sp
 800187e:	f802 0c28 	strb.w	r0, [r2, #-40]
			break;
 8001882:	e759      	b.n	8001738 <writeNuevosPuntajes+0xd8>
	//Ahora sí se realiza la escritura.
	//La escritura se realizará siempre que se realice mas de un cambio en las posiciones de los puntajes.
	//La reescritura de la posicion 5 (getPuntajes(4)) siempre se realizará.


	Write_Enable();
 8001884:	f7ff fd80 	bl	8001388 <Write_Enable>
	HAL_Delay(10);
 8001888:	200a      	movs	r0, #10
 800188a:	f001 fafb 	bl	8002e84 <HAL_Delay>


		if(permutaciones > 0){
 800188e:	b1ad      	cbz	r5, 80018bc <writeNuevosPuntajes+0x25c>

			address = MEMORIA_ADDRESS;

			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 8001890:	2400      	movs	r4, #0
			address = MEMORIA_ADDRESS;
 8001892:	4625      	mov	r5, r4
 8001894:	e00e      	b.n	80018b4 <writeNuevosPuntajes+0x254>
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 8001896:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800189a:	446b      	add	r3, sp
 800189c:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80018a0:	4628      	mov	r0, r5
 80018a2:	f7ff fd99 	bl	80013d8 <Write_Memoria>
				HAL_Delay(10);
 80018a6:	200a      	movs	r0, #10
 80018a8:	f001 faec 	bl	8002e84 <HAL_Delay>
				address++;
 80018ac:	3501      	adds	r5, #1
 80018ae:	b2ad      	uxth	r5, r5
			for(uint8_t i=0; i<TAMANO_TOTAL_PUNTAJES;i++){
 80018b0:	3401      	adds	r4, #1
 80018b2:	b2e4      	uxtb	r4, r4
 80018b4:	2c27      	cmp	r4, #39	; 0x27
 80018b6:	d9ee      	bls.n	8001896 <writeNuevosPuntajes+0x236>

			}

		}

}
 80018b8:	b00b      	add	sp, #44	; 0x2c
 80018ba:	bd30      	pop	{r4, r5, pc}
			Write_Memoria(address, buff_nuevosPuntajes[32]);
 80018bc:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80018c0:	2020      	movs	r0, #32
 80018c2:	f7ff fd89 	bl	80013d8 <Write_Memoria>
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 80018c6:	2420      	movs	r4, #32
			address = MEMORIA_ADDRESS + 32;
 80018c8:	4625      	mov	r5, r4
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 80018ca:	e00e      	b.n	80018ea <writeNuevosPuntajes+0x28a>
				Write_Memoria(address, buff_nuevosPuntajes[i]);
 80018cc:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80018d0:	446b      	add	r3, sp
 80018d2:	f813 1c28 	ldrb.w	r1, [r3, #-40]
 80018d6:	4628      	mov	r0, r5
 80018d8:	f7ff fd7e 	bl	80013d8 <Write_Memoria>
				HAL_Delay(10);
 80018dc:	200a      	movs	r0, #10
 80018de:	f001 fad1 	bl	8002e84 <HAL_Delay>
				address++;
 80018e2:	3501      	adds	r5, #1
 80018e4:	b2ad      	uxth	r5, r5
			for(uint8_t i=32; i<TAMANO_TOTAL_PUNTAJES;i++){
 80018e6:	3401      	adds	r4, #1
 80018e8:	b2e4      	uxtb	r4, r4
 80018ea:	2c27      	cmp	r4, #39	; 0x27
 80018ec:	d9ee      	bls.n	80018cc <writeNuevosPuntajes+0x26c>
 80018ee:	e7e3      	b.n	80018b8 <writeNuevosPuntajes+0x258>
 80018f0:	20000acc 	.word	0x20000acc

080018f4 <Ordenamiento_Puntajes>:


//Hay que corregir el ordenamiento de puntajes.

uint8_t Ordenamiento_Puntajes(){
 80018f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018f8:	b08e      	sub	sp, #56	; 0x38
	uint8_t indice_subvector = 1;
	uint16_t auxiliar;


	//Copio los nombres y los puntajes porque voy a reescribir getPuntajes()
	for(uint8_t i=0;i<5;i++){
 80018fa:	2400      	movs	r4, #0
 80018fc:	e011      	b.n	8001922 <Ordenamiento_Puntajes+0x2e>

		vector[i] = Puntajes[i].puntaje;
 80018fe:	4935      	ldr	r1, [pc, #212]	; (80019d4 <Ordenamiento_Puntajes+0xe0>)
 8001900:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001904:	88ca      	ldrh	r2, [r1, #6]
 8001906:	ab0e      	add	r3, sp, #56	; 0x38
 8001908:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800190c:	f823 2c0c 	strh.w	r2, [r3, #-12]
		strcpy(buff_nombre[i], Puntajes[i].nombre);
 8001910:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001914:	0058      	lsls	r0, r3, #1
 8001916:	ab03      	add	r3, sp, #12
 8001918:	4418      	add	r0, r3
 800191a:	f006 fe88 	bl	800862e <strcpy>
	for(uint8_t i=0;i<5;i++){
 800191e:	3401      	adds	r4, #1
 8001920:	b2e4      	uxtb	r4, r4
 8001922:	2c04      	cmp	r4, #4
 8001924:	d9eb      	bls.n	80018fe <Ordenamiento_Puntajes+0xa>
	uint8_t indice_subvector = 1;
 8001926:	2001      	movs	r0, #1
	uint8_t permutaciones = 0;
 8001928:	2700      	movs	r7, #0
 800192a:	e01f      	b.n	800196c <Ordenamiento_Puntajes+0x78>
	}

	//Ordenamiento de mayor a menor xd.
	do{

			for(uint8_t j=indice_subvector; j > 0; j--){
 800192c:	3e01      	subs	r6, #1
 800192e:	b2f6      	uxtb	r6, r6
 8001930:	b1c6      	cbz	r6, 8001964 <Ordenamiento_Puntajes+0x70>

					if(vector[j] > vector[j-1]){
 8001932:	ab0e      	add	r3, sp, #56	; 0x38
 8001934:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8001938:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 800193c:	1e73      	subs	r3, r6, #1
 800193e:	aa0e      	add	r2, sp, #56	; 0x38
 8001940:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001944:	f832 2c0c 	ldrh.w	r2, [r2, #-12]
 8001948:	4291      	cmp	r1, r2
 800194a:	d9ef      	bls.n	800192c <Ordenamiento_Puntajes+0x38>

						auxiliar = vector[j-1];
						vector[j-1] = vector[j];
 800194c:	ac0e      	add	r4, sp, #56	; 0x38
 800194e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001952:	f823 1c0c 	strh.w	r1, [r3, #-12]
						vector[j] = auxiliar;
 8001956:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 800195a:	f823 2c0c 	strh.w	r2, [r3, #-12]

						permutaciones++;
 800195e:	3701      	adds	r7, #1
 8001960:	b2ff      	uxtb	r7, r7
 8001962:	e7e3      	b.n	800192c <Ordenamiento_Puntajes+0x38>

					}

			}

		indice_subvector++;
 8001964:	3001      	adds	r0, #1
 8001966:	b2c0      	uxtb	r0, r0

	}while(indice_subvector != 5);
 8001968:	2805      	cmp	r0, #5
 800196a:	d001      	beq.n	8001970 <Ordenamiento_Puntajes+0x7c>
			for(uint8_t j=indice_subvector; j > 0; j--){
 800196c:	4606      	mov	r6, r0
 800196e:	e7df      	b.n	8001930 <Ordenamiento_Puntajes+0x3c>

	uint8_t finalizado;
	char buff_aux[6];


	for(uint8_t k=0;k<5;k++){
 8001970:	4634      	mov	r4, r6
 8001972:	e027      	b.n	80019c4 <Ordenamiento_Puntajes+0xd0>

					Puntajes[j].puntaje = Puntajes[k].puntaje;
					Puntajes[k].puntaje = vector[k];
					finalizado = false;
				}
				j++;
 8001974:	3301      	adds	r3, #1
 8001976:	b2db      	uxtb	r3, r3
				if(Puntajes[j].puntaje == vector[k]){
 8001978:	4698      	mov	r8, r3
 800197a:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <Ordenamiento_Puntajes+0xe0>)
 800197c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001980:	88d2      	ldrh	r2, [r2, #6]
 8001982:	a90e      	add	r1, sp, #56	; 0x38
 8001984:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8001988:	f831 5c0c 	ldrh.w	r5, [r1, #-12]
 800198c:	42aa      	cmp	r2, r5
 800198e:	d1f1      	bne.n	8001974 <Ordenamiento_Puntajes+0x80>
					strcpy(buff_aux, Puntajes[k].nombre);
 8001990:	f8df a040 	ldr.w	sl, [pc, #64]	; 80019d4 <Ordenamiento_Puntajes+0xe0>
 8001994:	eb0a 09c4 	add.w	r9, sl, r4, lsl #3
 8001998:	4649      	mov	r1, r9
 800199a:	a801      	add	r0, sp, #4
 800199c:	f006 fe47 	bl	800862e <strcpy>
					strcpy(Puntajes[k].nombre, Puntajes[j].nombre);
 80019a0:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
 80019a4:	4641      	mov	r1, r8
 80019a6:	4648      	mov	r0, r9
 80019a8:	f006 fe41 	bl	800862e <strcpy>
					strcpy(Puntajes[j].nombre, buff_aux);
 80019ac:	a901      	add	r1, sp, #4
 80019ae:	4640      	mov	r0, r8
 80019b0:	f006 fe3d 	bl	800862e <strcpy>
					Puntajes[j].puntaje = Puntajes[k].puntaje;
 80019b4:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80019b8:	f8a8 3006 	strh.w	r3, [r8, #6]
					Puntajes[k].puntaje = vector[k];
 80019bc:	f8a9 5006 	strh.w	r5, [r9, #6]
	for(uint8_t k=0;k<5;k++){
 80019c0:	3401      	adds	r4, #1
 80019c2:	b2e4      	uxtb	r4, r4
 80019c4:	2c04      	cmp	r4, #4
 80019c6:	d801      	bhi.n	80019cc <Ordenamiento_Puntajes+0xd8>
			uint8_t j=0;
 80019c8:	4633      	mov	r3, r6
 80019ca:	e7d5      	b.n	8001978 <Ordenamiento_Puntajes+0x84>
	}


	return permutaciones;

}
 80019cc:	4638      	mov	r0, r7
 80019ce:	b00e      	add	sp, #56	; 0x38
 80019d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019d4:	20000acc 	.word	0x20000acc

080019d8 <menuInit>:

menu_t menu;

extern musica_t musica;

void menuInit(){
 80019d8:	b508      	push	{r3, lr}

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 80019da:	f000 ff4b 	bl	8002874 <SSD1306_Init>
	SSD1306_Clear();
 80019de:	f000 ff41 	bl	8002864 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 80019e2:	f000 ff1b 	bl	800281c <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 80019e6:	f7fe fbd1 	bl	800018c <playerInit>
	InvaderInit();
 80019ea:	f7fe fc1f 	bl	800022c <InvaderInit>
	disparoInit();
 80019ee:	f7fe fc6f 	bl	80002d0 <disparoInit>
	BasesInit();
 80019f2:	f7fe ff03 	bl	80007fc <BasesInit>

	//Se inicializan las dificultades
	Dificultad_Init();
 80019f6:	f7fe ff19 	bl	800082c <Dificultad_Init>


	//Se inicializa el cursor de la pantalla principal.
	//menu.menuActual =  progresion_niveles;
	menu.menuActual = menu_principal;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <menuInit+0x3c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
	//menu.menuActual = juego;
	menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001a00:	2126      	movs	r1, #38	; 0x26
 8001a02:	7059      	strb	r1, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001a04:	2109      	movs	r1, #9
 8001a06:	7119      	strb	r1, [r3, #4]
	menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001a08:	211b      	movs	r1, #27
 8001a0a:	7159      	strb	r1, [r3, #5]
	menu.GuardarNombre.indice = 0;
 8001a0c:	731a      	strb	r2, [r3, #12]



	//Para las variables de juego
	menu.juego.flag = 0;
 8001a0e:	f883 2020 	strb.w	r2, [r3, #32]


}
 8001a12:	bd08      	pop	{r3, pc}
 8001a14:	20000af4 	.word	0x20000af4

08001a18 <menuReset>:
	}

}


void menuReset(){
 8001a18:	b508      	push	{r3, lr}

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8001a1a:	f7fe fbb7 	bl	800018c <playerInit>
	InvaderInit();
 8001a1e:	f7fe fc05 	bl	800022c <InvaderInit>
	disparoInit();
 8001a22:	f7fe fc55 	bl	80002d0 <disparoInit>
	BasesInit();
 8001a26:	f7fe fee9 	bl	80007fc <BasesInit>

	//Se reinician las dificultades al nivel 1
	Dificultad_Init();
 8001a2a:	f7fe feff 	bl	800082c <Dificultad_Init>


	//Para las variables de juego
	menu.juego.flag = 0;
 8001a2e:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <menuReset+0x24>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2020 	strb.w	r2, [r3, #32]

	//Se inicializa el cursor de la pantalla principal.
	menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001a36:	2226      	movs	r2, #38	; 0x26
 8001a38:	705a      	strb	r2, [r3, #1]

}
 8001a3a:	bd08      	pop	{r3, pc}
 8001a3c:	20000af4 	.word	0x20000af4

08001a40 <GuardarNombreReset>:


void GuardarNombreReset(){

	//Se inicializa el cursor de la pantalla Guardado de nombre
	menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <GuardarNombreReset+0x1c>)
 8001a42:	2209      	movs	r2, #9
 8001a44:	711a      	strb	r2, [r3, #4]
	menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001a46:	221b      	movs	r2, #27
 8001a48:	715a      	strb	r2, [r3, #5]
	menu.GuardarNombre.indice = 0;
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	731a      	strb	r2, [r3, #12]
	strcpy(menu.GuardarNombre.nombre,"     ");
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <GuardarNombreReset+0x20>)
 8001a50:	6810      	ldr	r0, [r2, #0]
 8001a52:	f8c3 0006 	str.w	r0, [r3, #6]
 8001a56:	8892      	ldrh	r2, [r2, #4]
 8001a58:	815a      	strh	r2, [r3, #10]

}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000af4 	.word	0x20000af4
 8001a60:	08009c08 	.word	0x08009c08

08001a64 <menuActualizar>:
void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8001a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a68:	b096      	sub	sp, #88	; 0x58
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	460e      	mov	r6, r1
 8001a6e:	4617      	mov	r7, r2
	switch(menu.menuActual){
 8001a70:	4bb6      	ldr	r3, [pc, #728]	; (8001d4c <menuActualizar+0x2e8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	f200 822e 	bhi.w	8001ed6 <menuActualizar+0x472>
 8001a7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a7e:	0006      	.short	0x0006
 8001a80:	00ce0046 	.word	0x00ce0046
 8001a84:	017b0125 	.word	0x017b0125
 8001a88:	0382      	.short	0x0382
		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 8001a8a:	2401      	movs	r4, #1
 8001a8c:	9401      	str	r4, [sp, #4]
 8001a8e:	2320      	movs	r3, #32
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2340      	movs	r3, #64	; 0x40
 8001a94:	4aae      	ldr	r2, [pc, #696]	; (8001d50 <menuActualizar+0x2ec>)
 8001a96:	2100      	movs	r1, #0
 8001a98:	2023      	movs	r0, #35	; 0x23
 8001a9a:	f000 fbcb 	bl	8002234 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(45, 35);
 8001a9e:	2123      	movs	r1, #35	; 0x23
 8001aa0:	202d      	movs	r0, #45	; 0x2d
 8001aa2:	f000 fc11 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8001aa6:	4dab      	ldr	r5, [pc, #684]	; (8001d54 <menuActualizar+0x2f0>)
 8001aa8:	4622      	mov	r2, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	48aa      	ldr	r0, [pc, #680]	; (8001d58 <menuActualizar+0x2f4>)
 8001aae:	f000 fc5f 	bl	8002370 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 8001ab2:	212d      	movs	r1, #45	; 0x2d
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	f000 fc07 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8001aba:	4622      	mov	r2, r4
 8001abc:	4629      	mov	r1, r5
 8001abe:	48a7      	ldr	r0, [pc, #668]	; (8001d5c <menuActualizar+0x2f8>)
 8001ac0:	f000 fc56 	bl	8002370 <SSD1306_Puts>
		if(y == arriba){
 8001ac4:	b9be      	cbnz	r6, 8001af6 <menuActualizar+0x92>
			menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001ac6:	4ba1      	ldr	r3, [pc, #644]	; (8001d4c <menuActualizar+0x2e8>)
 8001ac8:	2226      	movs	r2, #38	; 0x26
 8001aca:	705a      	strb	r2, [r3, #1]
		SSD1306_DrawCircle(POSICION_CURSOR_X, menu.posicion_MenuPrincipal, 3, 1);
 8001acc:	2301      	movs	r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	499e      	ldr	r1, [pc, #632]	; (8001d4c <menuActualizar+0x2e8>)
 8001ad2:	7849      	ldrb	r1, [r1, #1]
 8001ad4:	2027      	movs	r0, #39	; 0x27
 8001ad6:	f000 fd3b 	bl	8002550 <SSD1306_DrawCircle>
		switch(boton){
 8001ada:	2f01      	cmp	r7, #1
 8001adc:	f040 81fb 	bne.w	8001ed6 <menuActualizar+0x472>
			if(menu.posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 8001ae0:	4b9a      	ldr	r3, [pc, #616]	; (8001d4c <menuActualizar+0x2e8>)
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	2b26      	cmp	r3, #38	; 0x26
 8001ae6:	d00c      	beq.n	8001b02 <menuActualizar+0x9e>
			else if(menu.posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8001ae8:	2b30      	cmp	r3, #48	; 0x30
 8001aea:	f040 81f4 	bne.w	8001ed6 <menuActualizar+0x472>
			    menu.menuActual = puntajes;
 8001aee:	4b97      	ldr	r3, [pc, #604]	; (8001d4c <menuActualizar+0x2e8>)
 8001af0:	2203      	movs	r2, #3
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e1ef      	b.n	8001ed6 <menuActualizar+0x472>
		else if(y == abajo){
 8001af6:	2e01      	cmp	r6, #1
 8001af8:	d1e8      	bne.n	8001acc <menuActualizar+0x68>
			menu.posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 8001afa:	4b94      	ldr	r3, [pc, #592]	; (8001d4c <menuActualizar+0x2e8>)
 8001afc:	2230      	movs	r2, #48	; 0x30
 8001afe:	705a      	strb	r2, [r3, #1]
 8001b00:	e7e4      	b.n	8001acc <menuActualizar+0x68>
				menu.menuActual = juego;
 8001b02:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <menuActualizar+0x2e8>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	e1e5      	b.n	8001ed6 <menuActualizar+0x472>
		uint8_t numero_aliens = getCantidad_Aliens_Vivos();
 8001b0a:	f7fe fb31 	bl	8000170 <getCantidad_Aliens_Vivos>
 8001b0e:	4605      	mov	r5, r0
		plotBases();
 8001b10:	f7fe fe46 	bl	80007a0 <plotBases>
		plotAliens();
 8001b14:	f7fe fed4 	bl	80008c0 <plotAliens>
		disparoAliens();
 8001b18:	f7fe fcbc 	bl	8000494 <disparoAliens>
		TickType_t Tiempo_Actual = xTaskGetTickCount();
 8001b1c:	f005 fac2 	bl	80070a4 <xTaskGetTickCount>
 8001b20:	4604      	mov	r4, r0
		if(menu.juego.flag == 0){
 8001b22:	4b8a      	ldr	r3, [pc, #552]	; (8001d4c <menuActualizar+0x2e8>)
 8001b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b28:	b1e3      	cbz	r3, 8001b64 <menuActualizar+0x100>
		if(Tiempo_Actual - menu.juego.retrasoJuego_GameOver > pdMS_TO_TICKS(500)){
 8001b2a:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <menuActualizar+0x2e8>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	1ae4      	subs	r4, r4, r3
 8001b30:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8001b34:	d902      	bls.n	8001b3c <menuActualizar+0xd8>
			menu.menuActual = game_over;
 8001b36:	4b85      	ldr	r3, [pc, #532]	; (8001d4c <menuActualizar+0x2e8>)
 8001b38:	2205      	movs	r2, #5
 8001b3a:	701a      	strb	r2, [r3, #0]
		if( (boton == true) && (getPlayer().vivo == true) && (getDisparo() == false)){
 8001b3c:	2f01      	cmp	r7, #1
 8001b3e:	d034      	beq.n	8001baa <menuActualizar+0x146>
		plotPlayer(x);
 8001b40:	4640      	mov	r0, r8
 8001b42:	f7fe fb31 	bl	80001a8 <plotPlayer>
		disparar();
 8001b46:	f7fe fbcd 	bl	80002e4 <disparar>
		if(getCantidad_Aliens_Vivos() != numero_aliens && getPlayer().vivo == true){
 8001b4a:	f7fe fb11 	bl	8000170 <getCantidad_Aliens_Vivos>
 8001b4e:	42a8      	cmp	r0, r5
 8001b50:	d14a      	bne.n	8001be8 <menuActualizar+0x184>
		if(getCantidad_Aliens_Vivos() == 0){
 8001b52:	f7fe fb0d 	bl	8000170 <getCantidad_Aliens_Vivos>
 8001b56:	2800      	cmp	r0, #0
 8001b58:	f040 81bd 	bne.w	8001ed6 <menuActualizar+0x472>
			menu.menuActual = progresion_niveles;
 8001b5c:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <menuActualizar+0x2e8>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e1b8      	b.n	8001ed6 <menuActualizar+0x472>
			if(getPlayer().vivo == false){
 8001b64:	a80a      	add	r0, sp, #40	; 0x28
 8001b66:	f7fe faf3 	bl	8000150 <getPlayer>
 8001b6a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8001b6e:	b113      	cbz	r3, 8001b76 <menuActualizar+0x112>
				menu.juego.retrasoJuego_GameOver = Tiempo_Actual;
 8001b70:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <menuActualizar+0x2e8>)
 8001b72:	61dc      	str	r4, [r3, #28]
 8001b74:	e7d9      	b.n	8001b2a <menuActualizar+0xc6>
				menu.juego.retrasoJuego_GameOver = xTaskGetTickCount();
 8001b76:	f005 fa95 	bl	80070a4 <xTaskGetTickCount>
 8001b7a:	4b74      	ldr	r3, [pc, #464]	; (8001d4c <menuActualizar+0x2e8>)
 8001b7c:	61d8      	str	r0, [r3, #28]
				menu.juego.flag = 1;
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]
				musica_t musica_ = gameover_;
 8001b84:	2302      	movs	r3, #2
 8001b86:	f88d 301c 	strb.w	r3, [sp, #28]
				osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	a907      	add	r1, sp, #28
 8001b90:	4873      	ldr	r0, [pc, #460]	; (8001d60 <menuActualizar+0x2fc>)
 8001b92:	6800      	ldr	r0, [r0, #0]
 8001b94:	f004 f91a 	bl	8005dcc <osMessageQueuePut>
				if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d0c6      	beq.n	8001b2a <menuActualizar+0xc6>
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba2:	4870      	ldr	r0, [pc, #448]	; (8001d64 <menuActualizar+0x300>)
 8001ba4:	f001 fddb 	bl	800375e <HAL_GPIO_WritePin>
 8001ba8:	e7bf      	b.n	8001b2a <menuActualizar+0xc6>
		if( (boton == true) && (getPlayer().vivo == true) && (getDisparo() == false)){
 8001baa:	a80c      	add	r0, sp, #48	; 0x30
 8001bac:	f7fe fad0 	bl	8000150 <getPlayer>
 8001bb0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d1c3      	bne.n	8001b40 <menuActualizar+0xdc>
 8001bb8:	f7fe fad4 	bl	8000164 <getDisparo>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1bf      	bne.n	8001b40 <menuActualizar+0xdc>
			disparoTrue();
 8001bc0:	f7fe ff9a 	bl	8000af8 <disparoTrue>
			musica_t musica_ = disparo_;
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f88d 201c 	strb.w	r2, [sp, #28]
			osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001bca:	4613      	mov	r3, r2
 8001bcc:	a907      	add	r1, sp, #28
 8001bce:	4864      	ldr	r0, [pc, #400]	; (8001d60 <menuActualizar+0x2fc>)
 8001bd0:	6800      	ldr	r0, [r0, #0]
 8001bd2:	f004 f8fb 	bl	8005dcc <osMessageQueuePut>
			if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d0b2      	beq.n	8001b40 <menuActualizar+0xdc>
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be0:	4860      	ldr	r0, [pc, #384]	; (8001d64 <menuActualizar+0x300>)
 8001be2:	f001 fdbc 	bl	800375e <HAL_GPIO_WritePin>
 8001be6:	e7ab      	b.n	8001b40 <menuActualizar+0xdc>
		if(getCantidad_Aliens_Vivos() != numero_aliens && getPlayer().vivo == true){
 8001be8:	a80e      	add	r0, sp, #56	; 0x38
 8001bea:	f7fe fab1 	bl	8000150 <getPlayer>
 8001bee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d1ad      	bne.n	8001b52 <menuActualizar+0xee>
			musica_t musica_ = explosion_;
 8001bf6:	f88d 301c 	strb.w	r3, [sp, #28]
			osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	a907      	add	r1, sp, #28
 8001c00:	4857      	ldr	r0, [pc, #348]	; (8001d60 <menuActualizar+0x2fc>)
 8001c02:	6800      	ldr	r0, [r0, #0]
 8001c04:	f004 f8e2 	bl	8005dcc <osMessageQueuePut>
			if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d0a2      	beq.n	8001b52 <menuActualizar+0xee>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c12:	4854      	ldr	r0, [pc, #336]	; (8001d64 <menuActualizar+0x300>)
 8001c14:	f001 fda3 	bl	800375e <HAL_GPIO_WritePin>
 8001c18:	e79b      	b.n	8001b52 <menuActualizar+0xee>
		SSD1306_GotoXY(25, 15);
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	2019      	movs	r0, #25
 8001c1e:	f000 fb53 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJE: ", &Font_7x10, 1);
 8001c22:	4c4c      	ldr	r4, [pc, #304]	; (8001d54 <menuActualizar+0x2f0>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	4621      	mov	r1, r4
 8001c28:	484f      	ldr	r0, [pc, #316]	; (8001d68 <menuActualizar+0x304>)
 8001c2a:	f000 fba1 	bl	8002370 <SSD1306_Puts>
		SSD1306_GotoXY(25, 35);
 8001c2e:	2123      	movs	r1, #35	; 0x23
 8001c30:	2019      	movs	r0, #25
 8001c32:	f000 fb49 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("VIDAS", &Font_7x10, 1);
 8001c36:	2201      	movs	r2, #1
 8001c38:	4621      	mov	r1, r4
 8001c3a:	484c      	ldr	r0, [pc, #304]	; (8001d6c <menuActualizar+0x308>)
 8001c3c:	f000 fb98 	bl	8002370 <SSD1306_Puts>
		SSD1306_DrawBitmap(65, 34, vida, 8, 8, 1);
 8001c40:	2501      	movs	r5, #1
 8001c42:	9501      	str	r5, [sp, #4]
 8001c44:	2308      	movs	r3, #8
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <menuActualizar+0x30c>)
 8001c4a:	2122      	movs	r1, #34	; 0x22
 8001c4c:	2041      	movs	r0, #65	; 0x41
 8001c4e:	f000 faf1 	bl	8002234 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(74, 34);
 8001c52:	2122      	movs	r1, #34	; 0x22
 8001c54:	204a      	movs	r0, #74	; 0x4a
 8001c56:	f000 fb37 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Putc(':', &Font_7x10, 1);
 8001c5a:	462a      	mov	r2, r5
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	203a      	movs	r0, #58	; 0x3a
 8001c60:	f000 fb38 	bl	80022d4 <SSD1306_Putc>
		SSD1306_GotoXY(90, 15);
 8001c64:	210f      	movs	r1, #15
 8001c66:	205a      	movs	r0, #90	; 0x5a
 8001c68:	f000 fb2e 	bl	80022c8 <SSD1306_GotoXY>
		itoa(getPlayer().puntaje,(char*)buffer_puntaje,10);
 8001c6c:	a810      	add	r0, sp, #64	; 0x40
 8001c6e:	f7fe fa6f 	bl	8000150 <getPlayer>
 8001c72:	220a      	movs	r2, #10
 8001c74:	a907      	add	r1, sp, #28
 8001c76:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 8001c7a:	f006 fad5 	bl	8008228 <itoa>
		SSD1306_Puts((char *)buffer_puntaje, &Font_7x10, 1);
 8001c7e:	462a      	mov	r2, r5
 8001c80:	4621      	mov	r1, r4
 8001c82:	a807      	add	r0, sp, #28
 8001c84:	f000 fb74 	bl	8002370 <SSD1306_Puts>
		SSD1306_GotoXY(90, 34);
 8001c88:	2122      	movs	r1, #34	; 0x22
 8001c8a:	205a      	movs	r0, #90	; 0x5a
 8001c8c:	f000 fb1c 	bl	80022c8 <SSD1306_GotoXY>
		itoa(getPlayer().vidas, &cantidad_vidas,10);
 8001c90:	a812      	add	r0, sp, #72	; 0x48
 8001c92:	f7fe fa5d 	bl	8000150 <getPlayer>
 8001c96:	220a      	movs	r2, #10
 8001c98:	a904      	add	r1, sp, #16
 8001c9a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
 8001c9e:	f006 fac3 	bl	8008228 <itoa>
		SSD1306_Puts(&cantidad_vidas, &Font_7x10, 1);
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	a804      	add	r0, sp, #16
 8001ca8:	f000 fb62 	bl	8002370 <SSD1306_Puts>
		if(y == arriba){
 8001cac:	2e00      	cmp	r6, #0
 8001cae:	f040 8112 	bne.w	8001ed6 <menuActualizar+0x472>
			AumentoNivel();		//Aqui se reinicializa el player y se aumenta la dificultad del nivel.
 8001cb2:	f7fe fdc7 	bl	8000844 <AumentoNivel>
			InvaderInit();
 8001cb6:	f7fe fab9 	bl	800022c <InvaderInit>
			disparoInit();
 8001cba:	f7fe fb09 	bl	80002d0 <disparoInit>
			BasesInit();
 8001cbe:	f7fe fd9d 	bl	80007fc <BasesInit>
			menu.menuActual = juego;
 8001cc2:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <menuActualizar+0x2e8>)
 8001cc4:	701d      	strb	r5, [r3, #0]
 8001cc6:	e106      	b.n	8001ed6 <menuActualizar+0x472>
		SSD1306_GotoXY(35, 0);
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2023      	movs	r0, #35	; 0x23
 8001ccc:	f000 fafc 	bl	80022c8 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4920      	ldr	r1, [pc, #128]	; (8001d54 <menuActualizar+0x2f0>)
 8001cd4:	4821      	ldr	r0, [pc, #132]	; (8001d5c <menuActualizar+0x2f8>)
 8001cd6:	f000 fb4b 	bl	8002370 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001cda:	2400      	movs	r4, #0
 8001cdc:	2c04      	cmp	r4, #4
 8001cde:	d812      	bhi.n	8001d06 <menuActualizar+0x2a2>
			posicion = j*10 + 13;
 8001ce0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001ce4:	0049      	lsls	r1, r1, #1
 8001ce6:	b2c9      	uxtb	r1, r1
 8001ce8:	310d      	adds	r1, #13
			SSD1306_GotoXY(15, posicion);
 8001cea:	b2c9      	uxtb	r1, r1
 8001cec:	200f      	movs	r0, #15
 8001cee:	f000 faeb 	bl	80022c8 <SSD1306_GotoXY>
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff fb42 	bl	800137c <getPuntajes>
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4916      	ldr	r1, [pc, #88]	; (8001d54 <menuActualizar+0x2f0>)
 8001cfc:	f000 fb38 	bl	8002370 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001d00:	3401      	adds	r4, #1
 8001d02:	b2e4      	uxtb	r4, r4
 8001d04:	e7ea      	b.n	8001cdc <menuActualizar+0x278>
		for(uint8_t j=0; j<5;j++){
 8001d06:	2400      	movs	r4, #0
 8001d08:	2c04      	cmp	r4, #4
 8001d0a:	d818      	bhi.n	8001d3e <menuActualizar+0x2da>
			posicion = j*10 + 13;
 8001d0c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001d10:	0049      	lsls	r1, r1, #1
 8001d12:	b2c9      	uxtb	r1, r1
 8001d14:	310d      	adds	r1, #13
			SSD1306_GotoXY(90, posicion);
 8001d16:	b2c9      	uxtb	r1, r1
 8001d18:	205a      	movs	r0, #90	; 0x5a
 8001d1a:	f000 fad5 	bl	80022c8 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff fb2c 	bl	800137c <getPuntajes>
 8001d24:	220a      	movs	r2, #10
 8001d26:	a907      	add	r1, sp, #28
 8001d28:	88c0      	ldrh	r0, [r0, #6]
 8001d2a:	f006 fa7d 	bl	8008228 <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4908      	ldr	r1, [pc, #32]	; (8001d54 <menuActualizar+0x2f0>)
 8001d32:	a807      	add	r0, sp, #28
 8001d34:	f000 fb1c 	bl	8002370 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001d38:	3401      	adds	r4, #1
 8001d3a:	b2e4      	uxtb	r4, r4
 8001d3c:	e7e4      	b.n	8001d08 <menuActualizar+0x2a4>
		switch(y){
 8001d3e:	2e00      	cmp	r6, #0
 8001d40:	f040 80c9 	bne.w	8001ed6 <menuActualizar+0x472>
				menu.menuActual = menu_principal;
 8001d44:	4b01      	ldr	r3, [pc, #4]	; (8001d4c <menuActualizar+0x2e8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
			break;
 8001d4a:	e0c4      	b.n	8001ed6 <menuActualizar+0x472>
 8001d4c:	20000af4 	.word	0x20000af4
 8001d50:	08009c58 	.word	0x08009c58
 8001d54:	20000000 	.word	0x20000000
 8001d58:	08009c10 	.word	0x08009c10
 8001d5c:	08009c18 	.word	0x08009c18
 8001d60:	20000ac4 	.word	0x20000ac4
 8001d64:	40011000 	.word	0x40011000
 8001d68:	08009c24 	.word	0x08009c24
 8001d6c:	08009c30 	.word	0x08009c30
 8001d70:	08009f60 	.word	0x08009f60
		char buff_qwerty[] = "qwertyuiop";
 8001d74:	4aaf      	ldr	r2, [pc, #700]	; (8002034 <menuActualizar+0x5d0>)
 8001d76:	ab04      	add	r3, sp, #16
 8001d78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d7a:	c303      	stmia	r3!, {r0, r1}
 8001d7c:	f823 2b02 	strh.w	r2, [r3], #2
 8001d80:	0c12      	lsrs	r2, r2, #16
 8001d82:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 8001d84:	4aac      	ldr	r2, [pc, #688]	; (8002038 <menuActualizar+0x5d4>)
 8001d86:	ab07      	add	r3, sp, #28
 8001d88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d8a:	c303      	stmia	r3!, {r0, r1}
 8001d8c:	f823 2b02 	strh.w	r2, [r3], #2
 8001d90:	0c12      	lsrs	r2, r2, #16
 8001d92:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 8001d94:	4aa9      	ldr	r2, [pc, #676]	; (800203c <menuActualizar+0x5d8>)
 8001d96:	ab02      	add	r3, sp, #8
 8001d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d9c:	e883 0003 	stmia.w	r3, {r0, r1}
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8001da0:	2301      	movs	r3, #1
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	230f      	movs	r3, #15
 8001da6:	223c      	movs	r2, #60	; 0x3c
 8001da8:	2100      	movs	r1, #0
 8001daa:	201e      	movs	r0, #30
 8001dac:	f000 fb91 	bl	80024d2 <SSD1306_DrawRectangle>
			for(uint8_t i=0;i<10;i++){
 8001db0:	2500      	movs	r5, #0
 8001db2:	e022      	b.n	8001dfa <menuActualizar+0x396>
				posicion_x = i*(12) + 6;
 8001db4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8001db8:	00a4      	lsls	r4, r4, #2
 8001dba:	b2e4      	uxtb	r4, r4
 8001dbc:	3406      	adds	r4, #6
				SSD1306_GotoXY(posicion_x, 23);
 8001dbe:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
 8001dc2:	2117      	movs	r1, #23
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f000 fa7f 	bl	80022c8 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 8001dca:	f8df a274 	ldr.w	sl, [pc, #628]	; 8002040 <menuActualizar+0x5dc>
 8001dce:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001dd2:	eb0d 0903 	add.w	r9, sp, r3
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4651      	mov	r1, sl
 8001dda:	f819 0c48 	ldrb.w	r0, [r9, #-72]
 8001dde:	f000 fa79 	bl	80022d4 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 8001de2:	2126      	movs	r1, #38	; 0x26
 8001de4:	4620      	mov	r0, r4
 8001de6:	f000 fa6f 	bl	80022c8 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 8001dea:	2201      	movs	r2, #1
 8001dec:	4651      	mov	r1, sl
 8001dee:	f819 0c3c 	ldrb.w	r0, [r9, #-60]
 8001df2:	f000 fa6f 	bl	80022d4 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 8001df6:	3501      	adds	r5, #1
 8001df8:	b2ed      	uxtb	r5, r5
 8001dfa:	2d09      	cmp	r5, #9
 8001dfc:	d9da      	bls.n	8001db4 <menuActualizar+0x350>
			for(uint8_t i=0;i<7;i++){
 8001dfe:	2400      	movs	r4, #0
 8001e00:	e014      	b.n	8001e2c <menuActualizar+0x3c8>
				posicion_x = i*(12) + 26;
 8001e02:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8001e06:	0080      	lsls	r0, r0, #2
 8001e08:	b2c0      	uxtb	r0, r0
 8001e0a:	301a      	adds	r0, #26
				SSD1306_GotoXY(posicion_x, 53);
 8001e0c:	2135      	movs	r1, #53	; 0x35
 8001e0e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8001e12:	f000 fa59 	bl	80022c8 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 8001e16:	f104 0358 	add.w	r3, r4, #88	; 0x58
 8001e1a:	446b      	add	r3, sp
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4988      	ldr	r1, [pc, #544]	; (8002040 <menuActualizar+0x5dc>)
 8001e20:	f813 0c50 	ldrb.w	r0, [r3, #-80]
 8001e24:	f000 fa56 	bl	80022d4 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 8001e28:	3401      	adds	r4, #1
 8001e2a:	b2e4      	uxtb	r4, r4
 8001e2c:	2c06      	cmp	r4, #6
 8001e2e:	d9e8      	bls.n	8001e02 <menuActualizar+0x39e>
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 8001e30:	2401      	movs	r4, #1
 8001e32:	9400      	str	r4, [sp, #0]
 8001e34:	2310      	movs	r3, #16
 8001e36:	461a      	mov	r2, r3
 8001e38:	2132      	movs	r1, #50	; 0x32
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f000 fb49 	bl	80024d2 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 8001e40:	2135      	movs	r1, #53	; 0x35
 8001e42:	2008      	movs	r0, #8
 8001e44:	f000 fa40 	bl	80022c8 <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 8001e48:	4d7d      	ldr	r5, [pc, #500]	; (8002040 <menuActualizar+0x5dc>)
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	2078      	movs	r0, #120	; 0x78
 8001e50:	f000 fa40 	bl	80022d4 <SSD1306_Putc>
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 8001e54:	9400      	str	r4, [sp, #0]
 8001e56:	2310      	movs	r3, #16
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2132      	movs	r1, #50	; 0x32
 8001e5c:	206c      	movs	r0, #108	; 0x6c
 8001e5e:	f000 fb38 	bl	80024d2 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 8001e62:	2135      	movs	r1, #53	; 0x35
 8001e64:	2071      	movs	r0, #113	; 0x71
 8001e66:	f000 fa2f 	bl	80022c8 <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	203c      	movs	r0, #60	; 0x3c
 8001e70:	f000 fa30 	bl	80022d4 <SSD1306_Putc>
			switch(y){
 8001e74:	b396      	cbz	r6, 8001edc <menuActualizar+0x478>
 8001e76:	42a6      	cmp	r6, r4
 8001e78:	d132      	bne.n	8001ee0 <menuActualizar+0x47c>
					mov = abajo;
 8001e7a:	4634      	mov	r4, r6
			Timenow = xTaskGetTickCount();
 8001e7c:	f005 f912 	bl	80070a4 <xTaskGetTickCount>
			if((Timenow - menu.GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001e80:	4b70      	ldr	r3, [pc, #448]	; (8002044 <menuActualizar+0x5e0>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	1ac0      	subs	r0, r0, r3
 8001e86:	2896      	cmp	r0, #150	; 0x96
 8001e88:	d901      	bls.n	8001e8e <menuActualizar+0x42a>
 8001e8a:	2e04      	cmp	r6, #4
 8001e8c:	d12a      	bne.n	8001ee4 <menuActualizar+0x480>
			Timenow = xTaskGetTickCount();
 8001e8e:	f005 f909 	bl	80070a4 <xTaskGetTickCount>
		if((Timenow - menu.GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 8001e92:	4b6c      	ldr	r3, [pc, #432]	; (8002044 <menuActualizar+0x5e0>)
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	1ac0      	subs	r0, r0, r3
 8001e98:	2864      	cmp	r0, #100	; 0x64
 8001e9a:	d902      	bls.n	8001ea2 <menuActualizar+0x43e>
 8001e9c:	f1b8 0f04 	cmp.w	r8, #4
 8001ea0:	d17f      	bne.n	8001fa2 <menuActualizar+0x53e>
			Timenow = xTaskGetTickCount();
 8001ea2:	f005 f8ff 	bl	80070a4 <xTaskGetTickCount>
		if((Timenow - menu.GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <menuActualizar+0x5e0>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	1ac0      	subs	r0, r0, r3
 8001eac:	2864      	cmp	r0, #100	; 0x64
 8001eae:	d902      	bls.n	8001eb6 <menuActualizar+0x452>
 8001eb0:	2f00      	cmp	r7, #0
 8001eb2:	f040 80cf 	bne.w	8002054 <menuActualizar+0x5f0>
				SSD1306_DrawFilledCircle(menu.GuardarNombre.posicion_x,  menu.GuardarNombre.posicion_y, 5, 1);
 8001eb6:	4c63      	ldr	r4, [pc, #396]	; (8002044 <menuActualizar+0x5e0>)
 8001eb8:	2301      	movs	r3, #1
 8001eba:	2205      	movs	r2, #5
 8001ebc:	7961      	ldrb	r1, [r4, #5]
 8001ebe:	7920      	ldrb	r0, [r4, #4]
 8001ec0:	f000 fbe4 	bl	800268c <SSD1306_DrawFilledCircle>
				SSD1306_GotoXY(43, 5);
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	202b      	movs	r0, #43	; 0x2b
 8001ec8:	f000 f9fe 	bl	80022c8 <SSD1306_GotoXY>
				SSD1306_Puts(menu.GuardarNombre.nombre, &Font_7x10, 1);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	495c      	ldr	r1, [pc, #368]	; (8002040 <menuActualizar+0x5dc>)
 8001ed0:	1da0      	adds	r0, r4, #6
 8001ed2:	f000 fa4d 	bl	8002370 <SSD1306_Puts>
}
 8001ed6:	b016      	add	sp, #88	; 0x58
 8001ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001edc:	4634      	mov	r4, r6
 8001ede:	e7cd      	b.n	8001e7c <menuActualizar+0x418>
					mov = x;
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	e7cb      	b.n	8001e7c <menuActualizar+0x418>
				menu.GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 8001ee4:	f005 f8de 	bl	80070a4 <xTaskGetTickCount>
 8001ee8:	4b56      	ldr	r3, [pc, #344]	; (8002044 <menuActualizar+0x5e0>)
 8001eea:	6158      	str	r0, [r3, #20]
			switch(mov){
 8001eec:	b1cc      	cbz	r4, 8001f22 <menuActualizar+0x4be>
 8001eee:	2c01      	cmp	r4, #1
 8001ef0:	d1cd      	bne.n	8001e8e <menuActualizar+0x42a>
					switch(menu.GuardarNombre.posicion_y){
 8001ef2:	4b54      	ldr	r3, [pc, #336]	; (8002044 <menuActualizar+0x5e0>)
 8001ef4:	795b      	ldrb	r3, [r3, #5]
 8001ef6:	2b1b      	cmp	r3, #27
 8001ef8:	d03e      	beq.n	8001f78 <menuActualizar+0x514>
 8001efa:	2b2a      	cmp	r3, #42	; 0x2a
 8001efc:	d1c7      	bne.n	8001e8e <menuActualizar+0x42a>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <menuActualizar+0x5e0>)
 8001f00:	2239      	movs	r2, #57	; 0x39
 8001f02:	715a      	strb	r2, [r3, #5]
							div = menu.GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 8001f04:	791b      	ldrb	r3, [r3, #4]
 8001f06:	3b09      	subs	r3, #9
 8001f08:	b25b      	sxtb	r3, r3
							div = div/GUARDADO_OFFSET_X_CURSOR;
 8001f0a:	4a4f      	ldr	r2, [pc, #316]	; (8002048 <menuActualizar+0x5e4>)
 8001f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8001f16:	b25b      	sxtb	r3, r3
							if(div == 0){
 8001f18:	bb93      	cbnz	r3, 8001f80 <menuActualizar+0x51c>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <menuActualizar+0x5e0>)
 8001f1c:	220b      	movs	r2, #11
 8001f1e:	711a      	strb	r2, [r3, #4]
 8001f20:	e7b5      	b.n	8001e8e <menuActualizar+0x42a>
					switch(menu.GuardarNombre.posicion_y){
 8001f22:	4b48      	ldr	r3, [pc, #288]	; (8002044 <menuActualizar+0x5e0>)
 8001f24:	795b      	ldrb	r3, [r3, #5]
 8001f26:	2b2a      	cmp	r3, #42	; 0x2a
 8001f28:	d01a      	beq.n	8001f60 <menuActualizar+0x4fc>
 8001f2a:	2b39      	cmp	r3, #57	; 0x39
 8001f2c:	d1af      	bne.n	8001e8e <menuActualizar+0x42a>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001f2e:	4b45      	ldr	r3, [pc, #276]	; (8002044 <menuActualizar+0x5e0>)
 8001f30:	222a      	movs	r2, #42	; 0x2a
 8001f32:	715a      	strb	r2, [r3, #5]
							if(menu.GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 8001f34:	791b      	ldrb	r3, [r3, #4]
 8001f36:	2b1b      	cmp	r3, #27
 8001f38:	d91a      	bls.n	8001f70 <menuActualizar+0x50c>
								div = menu.GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 8001f3a:	3b1c      	subs	r3, #28
 8001f3c:	b25b      	sxtb	r3, r3
								if(div < 0) menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db12      	blt.n	8001f68 <menuActualizar+0x504>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 8001f42:	4a41      	ldr	r2, [pc, #260]	; (8002048 <menuActualizar+0x5e4>)
 8001f44:	fb82 1203 	smull	r1, r2, r2, r3
 8001f48:	17db      	asrs	r3, r3, #31
 8001f4a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8001f4e:	b25b      	sxtb	r3, r3
									 menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 8001f50:	3301      	adds	r3, #1
 8001f52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3309      	adds	r3, #9
 8001f5a:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <menuActualizar+0x5e0>)
 8001f5c:	7113      	strb	r3, [r2, #4]
 8001f5e:	e796      	b.n	8001e8e <menuActualizar+0x42a>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <menuActualizar+0x5e0>)
 8001f62:	221b      	movs	r2, #27
 8001f64:	715a      	strb	r2, [r3, #5]
							break;
 8001f66:	e792      	b.n	8001e8e <menuActualizar+0x42a>
								if(div < 0) menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <menuActualizar+0x5e0>)
 8001f6a:	2209      	movs	r2, #9
 8001f6c:	711a      	strb	r2, [r3, #4]
 8001f6e:	e78e      	b.n	8001e8e <menuActualizar+0x42a>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <menuActualizar+0x5e0>)
 8001f72:	2209      	movs	r2, #9
 8001f74:	711a      	strb	r2, [r3, #4]
 8001f76:	e78a      	b.n	8001e8e <menuActualizar+0x42a>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <menuActualizar+0x5e0>)
 8001f7a:	222a      	movs	r2, #42	; 0x2a
 8001f7c:	715a      	strb	r2, [r3, #5]
							break;
 8001f7e:	e786      	b.n	8001e8e <menuActualizar+0x42a>
							else if(div == 8 || div == 9){
 8001f80:	f1a3 0208 	sub.w	r2, r3, #8
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	2a01      	cmp	r2, #1
 8001f88:	d907      	bls.n	8001f9a <menuActualizar+0x536>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	331c      	adds	r3, #28
 8001f94:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <menuActualizar+0x5e0>)
 8001f96:	7113      	strb	r3, [r2, #4]
 8001f98:	e779      	b.n	8001e8e <menuActualizar+0x42a>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <menuActualizar+0x5e0>)
 8001f9c:	2274      	movs	r2, #116	; 0x74
 8001f9e:	711a      	strb	r2, [r3, #4]
 8001fa0:	e775      	b.n	8001e8e <menuActualizar+0x42a>
			menu.GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 8001fa2:	f005 f87f 	bl	80070a4 <xTaskGetTickCount>
 8001fa6:	4b27      	ldr	r3, [pc, #156]	; (8002044 <menuActualizar+0x5e0>)
 8001fa8:	6118      	str	r0, [r3, #16]
			switch(mov){
 8001faa:	2c02      	cmp	r4, #2
 8001fac:	d024      	beq.n	8001ff8 <menuActualizar+0x594>
 8001fae:	2c03      	cmp	r4, #3
 8001fb0:	f47f af77 	bne.w	8001ea2 <menuActualizar+0x43e>
					menu.GuardarNombre.posicion_x = menu.GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	791b      	ldrb	r3, [r3, #4]
 8001fb8:	3b0c      	subs	r3, #12
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	7113      	strb	r3, [r2, #4]
					if(menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8001fbe:	7952      	ldrb	r2, [r2, #5]
 8001fc0:	2a39      	cmp	r2, #57	; 0x39
 8001fc2:	d006      	beq.n	8001fd2 <menuActualizar+0x56e>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 8001fc4:	2bfd      	cmp	r3, #253	; 0xfd
 8001fc6:	f47f af6c 	bne.w	8001ea2 <menuActualizar+0x43e>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <menuActualizar+0x5e0>)
 8001fcc:	2275      	movs	r2, #117	; 0x75
 8001fce:	711a      	strb	r2, [r3, #4]
 8001fd0:	e767      	b.n	8001ea2 <menuActualizar+0x43e>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR) ){
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d008      	beq.n	8001fe8 <menuActualizar+0x584>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 8001fd6:	2b68      	cmp	r3, #104	; 0x68
 8001fd8:	d00a      	beq.n	8001ff0 <menuActualizar+0x58c>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 8001fda:	2bff      	cmp	r3, #255	; 0xff
 8001fdc:	f47f af61 	bne.w	8001ea2 <menuActualizar+0x43e>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <menuActualizar+0x5e0>)
 8001fe2:	220b      	movs	r2, #11
 8001fe4:	711a      	strb	r2, [r3, #4]
 8001fe6:	e75c      	b.n	8001ea2 <menuActualizar+0x43e>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <menuActualizar+0x5e0>)
 8001fea:	220b      	movs	r2, #11
 8001fec:	711a      	strb	r2, [r3, #4]
 8001fee:	e758      	b.n	8001ea2 <menuActualizar+0x43e>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <menuActualizar+0x5e0>)
 8001ff2:	2264      	movs	r2, #100	; 0x64
 8001ff4:	711a      	strb	r2, [r3, #4]
 8001ff6:	e754      	b.n	8001ea2 <menuActualizar+0x43e>
					menu.GuardarNombre.posicion_x = menu.GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 8001ff8:	4a12      	ldr	r2, [pc, #72]	; (8002044 <menuActualizar+0x5e0>)
 8001ffa:	7913      	ldrb	r3, [r2, #4]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	7113      	strb	r3, [r2, #4]
					if(menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8002002:	7952      	ldrb	r2, [r2, #5]
 8002004:	2a39      	cmp	r2, #57	; 0x39
 8002006:	d006      	beq.n	8002016 <menuActualizar+0x5b2>
						if(menu.GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 8002008:	2b75      	cmp	r3, #117	; 0x75
 800200a:	f67f af4a 	bls.w	8001ea2 <menuActualizar+0x43e>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <menuActualizar+0x5e0>)
 8002010:	2209      	movs	r2, #9
 8002012:	711a      	strb	r2, [r3, #4]
 8002014:	e745      	b.n	8001ea2 <menuActualizar+0x43e>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 8002016:	2b70      	cmp	r3, #112	; 0x70
 8002018:	d008      	beq.n	800202c <menuActualizar+0x5c8>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 800201a:	2b80      	cmp	r3, #128	; 0x80
 800201c:	d016      	beq.n	800204c <menuActualizar+0x5e8>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 800201e:	2b17      	cmp	r3, #23
 8002020:	f47f af3f 	bne.w	8001ea2 <menuActualizar+0x43e>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <menuActualizar+0x5e0>)
 8002026:	221c      	movs	r2, #28
 8002028:	711a      	strb	r2, [r3, #4]
 800202a:	e73a      	b.n	8001ea2 <menuActualizar+0x43e>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <menuActualizar+0x5e0>)
 800202e:	2274      	movs	r2, #116	; 0x74
 8002030:	711a      	strb	r2, [r3, #4]
 8002032:	e736      	b.n	8001ea2 <menuActualizar+0x43e>
 8002034:	08009c38 	.word	0x08009c38
 8002038:	08009c44 	.word	0x08009c44
 800203c:	08009c50 	.word	0x08009c50
 8002040:	20000000 	.word	0x20000000
 8002044:	20000af4 	.word	0x20000af4
 8002048:	2aaaaaab 	.word	0x2aaaaaab
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 800204c:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <menuActualizar+0x744>)
 800204e:	220b      	movs	r2, #11
 8002050:	711a      	strb	r2, [r3, #4]
 8002052:	e726      	b.n	8001ea2 <menuActualizar+0x43e>
			menu.GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 8002054:	f005 f826 	bl	80070a4 <xTaskGetTickCount>
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <menuActualizar+0x744>)
 800205a:	6198      	str	r0, [r3, #24]
			if((boton == true) && (menu.GuardarNombre.indice <= 5)){
 800205c:	2f01      	cmp	r7, #1
 800205e:	f47f af2a 	bne.w	8001eb6 <menuActualizar+0x452>
 8002062:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002066:	2b05      	cmp	r3, #5
 8002068:	f73f af25 	bgt.w	8001eb6 <menuActualizar+0x452>
						if((menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 800206c:	4a4e      	ldr	r2, [pc, #312]	; (80021a8 <menuActualizar+0x744>)
 800206e:	7951      	ldrb	r1, [r2, #5]
 8002070:	2939      	cmp	r1, #57	; 0x39
 8002072:	d02f      	beq.n	80020d4 <menuActualizar+0x670>
							div = menu.GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 8002074:	7912      	ldrb	r2, [r2, #4]
 8002076:	3a09      	subs	r2, #9
 8002078:	b252      	sxtb	r2, r2
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 800207a:	484c      	ldr	r0, [pc, #304]	; (80021ac <menuActualizar+0x748>)
 800207c:	fb80 4002 	smull	r4, r0, r0, r2
 8002080:	17d2      	asrs	r2, r2, #31
 8002082:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 8002086:	b252      	sxtb	r2, r2
							if((menu.GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 8002088:	291b      	cmp	r1, #27
 800208a:	d00d      	beq.n	80020a8 <menuActualizar+0x644>
							else if((menu.GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 800208c:	292a      	cmp	r1, #42	; 0x2a
 800208e:	d016      	beq.n	80020be <menuActualizar+0x65a>
						if(menu.GuardarNombre.indice > 5){
 8002090:	4b45      	ldr	r3, [pc, #276]	; (80021a8 <menuActualizar+0x744>)
 8002092:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002096:	2b05      	cmp	r3, #5
 8002098:	f77f af0d 	ble.w	8001eb6 <menuActualizar+0x452>
							menu.GuardarNombre.indice = 5;
 800209c:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <menuActualizar+0x744>)
 800209e:	2205      	movs	r2, #5
 80020a0:	731a      	strb	r2, [r3, #12]
							menu.GuardarNombre.nombre[5] = '\0';
 80020a2:	2200      	movs	r2, #0
 80020a4:	72da      	strb	r2, [r3, #11]
 80020a6:	e706      	b.n	8001eb6 <menuActualizar+0x452>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_qwerty[div];
 80020a8:	3258      	adds	r2, #88	; 0x58
 80020aa:	446a      	add	r2, sp
 80020ac:	f812 0c48 	ldrb.w	r0, [r2, #-72]
 80020b0:	4a3d      	ldr	r2, [pc, #244]	; (80021a8 <menuActualizar+0x744>)
 80020b2:	18d1      	adds	r1, r2, r3
 80020b4:	7188      	strb	r0, [r1, #6]
								menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	3301      	adds	r3, #1
 80020ba:	7313      	strb	r3, [r2, #12]
 80020bc:	e7e8      	b.n	8002090 <menuActualizar+0x62c>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_asdf[div];
 80020be:	3258      	adds	r2, #88	; 0x58
 80020c0:	446a      	add	r2, sp
 80020c2:	f812 0c3c 	ldrb.w	r0, [r2, #-60]
 80020c6:	4a38      	ldr	r2, [pc, #224]	; (80021a8 <menuActualizar+0x744>)
 80020c8:	18d1      	adds	r1, r2, r3
 80020ca:	7188      	strb	r0, [r1, #6]
								menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	7313      	strb	r3, [r2, #12]
 80020d2:	e7dd      	b.n	8002090 <menuActualizar+0x62c>
							div = menu.GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 80020d4:	4a34      	ldr	r2, [pc, #208]	; (80021a8 <menuActualizar+0x744>)
 80020d6:	7912      	ldrb	r2, [r2, #4]
 80020d8:	3a1c      	subs	r2, #28
 80020da:	b252      	sxtb	r2, r2
							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 80020dc:	2a00      	cmp	r2, #0
 80020de:	db0f      	blt.n	8002100 <menuActualizar+0x69c>
								div = div / GUARDADO_OFFSET_X_CURSOR;
 80020e0:	210c      	movs	r1, #12
 80020e2:	fb92 f2f1 	sdiv	r2, r2, r1
									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 80020e6:	2a07      	cmp	r2, #7
 80020e8:	d01c      	beq.n	8002124 <menuActualizar+0x6c0>
										menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_zxc[div];
 80020ea:	3258      	adds	r2, #88	; 0x58
 80020ec:	446a      	add	r2, sp
 80020ee:	f812 0c50 	ldrb.w	r0, [r2, #-80]
 80020f2:	4a2d      	ldr	r2, [pc, #180]	; (80021a8 <menuActualizar+0x744>)
 80020f4:	18d1      	adds	r1, r2, r3
 80020f6:	7188      	strb	r0, [r1, #6]
										menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	7313      	strb	r3, [r2, #12]
 80020fe:	e7c7      	b.n	8002090 <menuActualizar+0x62c>
								menu.GuardarNombre.indice = menu.GuardarNombre.indice - 1;
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <menuActualizar+0x744>)
 8002108:	7313      	strb	r3, [r2, #12]
								if(menu.GuardarNombre.indice < 0){
 800210a:	2b00      	cmp	r3, #0
 800210c:	db06      	blt.n	800211c <menuActualizar+0x6b8>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = '\0';
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <menuActualizar+0x744>)
 8002110:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8002114:	4413      	add	r3, r2
 8002116:	2200      	movs	r2, #0
 8002118:	719a      	strb	r2, [r3, #6]
 800211a:	e7b9      	b.n	8002090 <menuActualizar+0x62c>
										menu.GuardarNombre.indice = 0;
 800211c:	4613      	mov	r3, r2
 800211e:	2200      	movs	r2, #0
 8002120:	731a      	strb	r2, [r3, #12]
 8002122:	e7f4      	b.n	800210e <menuActualizar+0x6aa>
										if((menu.GuardarNombre.indice != 0 )){
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0b3      	beq.n	8002090 <menuActualizar+0x62c>
											osMutexAcquire(myMutexPuntajeHandle, osWaitForever);
 8002128:	4c21      	ldr	r4, [pc, #132]	; (80021b0 <menuActualizar+0x74c>)
 800212a:	f04f 31ff 	mov.w	r1, #4294967295
 800212e:	6820      	ldr	r0, [r4, #0]
 8002130:	f003 fd72 	bl	8005c18 <osMutexAcquire>
											getPuntajes(4)->puntaje  = getPlayer().puntaje;
 8002134:	a814      	add	r0, sp, #80	; 0x50
 8002136:	f7fe f80b 	bl	8000150 <getPlayer>
 800213a:	2004      	movs	r0, #4
 800213c:	f7ff f91e 	bl	800137c <getPuntajes>
 8002140:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8002144:	80c3      	strh	r3, [r0, #6]
											strcpy(getPuntajes(4)->nombre,menu.GuardarNombre.nombre);
 8002146:	2004      	movs	r0, #4
 8002148:	f7ff f918 	bl	800137c <getPuntajes>
 800214c:	4919      	ldr	r1, [pc, #100]	; (80021b4 <menuActualizar+0x750>)
 800214e:	f006 fa6e 	bl	800862e <strcpy>
											osMutexRelease(myMutexPuntajeHandle);
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	f003 fda2 	bl	8005c9c <osMutexRelease>
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 8002158:	2101      	movs	r1, #1
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <menuActualizar+0x754>)
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	f003 fc71 	bl	8005a44 <osEventFlagsSet>
										    uint32_t flags = osEventFlagsWait(notificationFlag2, NOTIFICATION_VALUE2, osFlagsWaitAny, osWaitForever);
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	2200      	movs	r2, #0
 8002168:	2102      	movs	r1, #2
 800216a:	4814      	ldr	r0, [pc, #80]	; (80021bc <menuActualizar+0x758>)
 800216c:	6800      	ldr	r0, [r0, #0]
 800216e:	f003 fca7 	bl	8005ac0 <osEventFlagsWait>
										    if (flags == NOTIFICATION_VALUE2){
 8002172:	2802      	cmp	r0, #2
 8002174:	d18c      	bne.n	8002090 <menuActualizar+0x62c>
										    	menuReset();
 8002176:	f7ff fc4f 	bl	8001a18 <menuReset>
										    	menu.menuActual = puntajes;
 800217a:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <menuActualizar+0x744>)
 800217c:	2203      	movs	r2, #3
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	e786      	b.n	8002090 <menuActualizar+0x62c>
		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 8002182:	2301      	movs	r3, #1
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	2328      	movs	r3, #40	; 0x28
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2364      	movs	r3, #100	; 0x64
 800218c:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <menuActualizar+0x75c>)
 800218e:	210a      	movs	r1, #10
 8002190:	200f      	movs	r0, #15
 8002192:	f000 f84f 	bl	8002234 <SSD1306_DrawBitmap>
		if(y == arriba){
 8002196:	2e00      	cmp	r6, #0
 8002198:	f47f ae9d 	bne.w	8001ed6 <menuActualizar+0x472>
			GuardarNombreReset();
 800219c:	f7ff fc50 	bl	8001a40 <GuardarNombreReset>
			menu.menuActual = guardar_nombre;
 80021a0:	4b01      	ldr	r3, [pc, #4]	; (80021a8 <menuActualizar+0x744>)
 80021a2:	2204      	movs	r2, #4
 80021a4:	701a      	strb	r2, [r3, #0]
}
 80021a6:	e696      	b.n	8001ed6 <menuActualizar+0x472>
 80021a8:	20000af4 	.word	0x20000af4
 80021ac:	2aaaaaab 	.word	0x2aaaaaab
 80021b0:	20000ab0 	.word	0x20000ab0
 80021b4:	20000afa 	.word	0x20000afa
 80021b8:	20000ab4 	.word	0x20000ab4
 80021bc:	20000ab8 	.word	0x20000ab8
 80021c0:	08009d58 	.word	0x08009d58

080021c4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80021c4:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021c6:	b930      	cbnz	r0, 80021d6 <SSD1306_Fill+0x12>
 80021c8:	2100      	movs	r1, #0
 80021ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <SSD1306_Fill+0x18>)
 80021d0:	f006 f9b1 	bl	8008536 <memset>
}
 80021d4:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80021d6:	21ff      	movs	r1, #255	; 0xff
 80021d8:	e7f7      	b.n	80021ca <SSD1306_Fill+0x6>
 80021da:	bf00      	nop
 80021dc:	20000b20 	.word	0x20000b20

080021e0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 80021e0:	287f      	cmp	r0, #127	; 0x7f
 80021e2:	d816      	bhi.n	8002212 <SSD1306_DrawPixel+0x32>
		x >= SSD1306_WIDTH ||
 80021e4:	293f      	cmp	r1, #63	; 0x3f
 80021e6:	d814      	bhi.n	8002212 <SSD1306_DrawPixel+0x32>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80021e8:	4b10      	ldr	r3, [pc, #64]	; (800222c <SSD1306_DrawPixel+0x4c>)
 80021ea:	791b      	ldrb	r3, [r3, #4]
 80021ec:	b113      	cbz	r3, 80021f4 <SSD1306_DrawPixel+0x14>
		color = (SSD1306_COLOR_t)!color;
 80021ee:	fab2 f282 	clz	r2, r2
 80021f2:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80021f4:	2a01      	cmp	r2, #1
 80021f6:	d00d      	beq.n	8002214 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021f8:	08cb      	lsrs	r3, r1, #3
 80021fa:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80021fe:	f001 0107 	and.w	r1, r1, #7
 8002202:	2301      	movs	r3, #1
 8002204:	408b      	lsls	r3, r1
 8002206:	43db      	mvns	r3, r3
 8002208:	b25b      	sxtb	r3, r3
 800220a:	4909      	ldr	r1, [pc, #36]	; (8002230 <SSD1306_DrawPixel+0x50>)
 800220c:	5c0a      	ldrb	r2, [r1, r0]
 800220e:	4013      	ands	r3, r2
 8002210:	540b      	strb	r3, [r1, r0]
	}
}
 8002212:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002214:	08cb      	lsrs	r3, r1, #3
 8002216:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800221a:	f001 0107 	and.w	r1, r1, #7
 800221e:	408a      	lsls	r2, r1
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <SSD1306_DrawPixel+0x50>)
 8002222:	5c0b      	ldrb	r3, [r1, r0]
 8002224:	4313      	orrs	r3, r2
 8002226:	540b      	strb	r3, [r1, r0]
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000b18 	.word	0x20000b18
 8002230:	20000b20 	.word	0x20000b20

08002234 <SSD1306_DrawBitmap>:
{
 8002234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002238:	b083      	sub	sp, #12
 800223a:	4683      	mov	fp, r0
 800223c:	4688      	mov	r8, r1
 800223e:	4692      	mov	sl, r2
 8002240:	461e      	mov	r6, r3
 8002242:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800224c:	9300      	str	r3, [sp, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800224e:	f116 0907 	adds.w	r9, r6, #7
 8002252:	d404      	bmi.n	800225e <SSD1306_DrawBitmap+0x2a>
 8002254:	ea4f 09e9 	mov.w	r9, r9, asr #3
    for(int16_t j=0; j<h; j++, y++)
 8002258:	2700      	movs	r7, #0
    uint8_t byte = 0;
 800225a:	463d      	mov	r5, r7
    for(int16_t j=0; j<h; j++, y++)
 800225c:	e02c      	b.n	80022b8 <SSD1306_DrawBitmap+0x84>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800225e:	f109 0907 	add.w	r9, r9, #7
 8002262:	e7f7      	b.n	8002254 <SSD1306_DrawBitmap+0x20>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002264:	fb09 f107 	mul.w	r1, r9, r7
 8002268:	461a      	mov	r2, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	db12      	blt.n	8002294 <SSD1306_DrawBitmap+0x60>
 800226e:	f342 02cf 	sbfx	r2, r2, #3, #16
 8002272:	188b      	adds	r3, r1, r2
 8002274:	f81a 5003 	ldrb.w	r5, [sl, r3]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002278:	f015 0f80 	tst.w	r5, #128	; 0x80
 800227c:	d10c      	bne.n	8002298 <SSD1306_DrawBitmap+0x64>
        for(int16_t i=0; i<w; i++)
 800227e:	3401      	adds	r4, #1
 8002280:	b223      	sxth	r3, r4
 8002282:	42b3      	cmp	r3, r6
 8002284:	da12      	bge.n	80022ac <SSD1306_DrawBitmap+0x78>
            if(i & 7)
 8002286:	b29c      	uxth	r4, r3
 8002288:	f013 0f07 	tst.w	r3, #7
 800228c:	d0ea      	beq.n	8002264 <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 800228e:	006d      	lsls	r5, r5, #1
 8002290:	b2ed      	uxtb	r5, r5
 8002292:	e7f1      	b.n	8002278 <SSD1306_DrawBitmap+0x44>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002294:	1dda      	adds	r2, r3, #7
 8002296:	e7ea      	b.n	800226e <SSD1306_DrawBitmap+0x3a>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002298:	eb04 000b 	add.w	r0, r4, fp
 800229c:	f89d 2000 	ldrb.w	r2, [sp]
 80022a0:	fa1f f188 	uxth.w	r1, r8
 80022a4:	b280      	uxth	r0, r0
 80022a6:	f7ff ff9b 	bl	80021e0 <SSD1306_DrawPixel>
 80022aa:	e7e8      	b.n	800227e <SSD1306_DrawBitmap+0x4a>
    for(int16_t j=0; j<h; j++, y++)
 80022ac:	3701      	adds	r7, #1
 80022ae:	b23f      	sxth	r7, r7
 80022b0:	f108 0801 	add.w	r8, r8, #1
 80022b4:	fa0f f888 	sxth.w	r8, r8
 80022b8:	9b01      	ldr	r3, [sp, #4]
 80022ba:	429f      	cmp	r7, r3
 80022bc:	da01      	bge.n	80022c2 <SSD1306_DrawBitmap+0x8e>
        for(int16_t i=0; i<w; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	e7df      	b.n	8002282 <SSD1306_DrawBitmap+0x4e>
}
 80022c2:	b003      	add	sp, #12
 80022c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080022c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022c8:	4b01      	ldr	r3, [pc, #4]	; (80022d0 <SSD1306_GotoXY+0x8>)
 80022ca:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80022cc:	8059      	strh	r1, [r3, #2]
}
 80022ce:	4770      	bx	lr
 80022d0:	20000b18 	.word	0x20000b18

080022d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80022d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022d8:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <SSD1306_Putc+0x98>)
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	780a      	ldrb	r2, [r1, #0]
 80022e0:	4413      	add	r3, r2
	if (
 80022e2:	2b7f      	cmp	r3, #127	; 0x7f
 80022e4:	dc3e      	bgt.n	8002364 <SSD1306_Putc+0x90>
 80022e6:	4681      	mov	r9, r0
 80022e8:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <SSD1306_Putc+0x98>)
 80022ec:	885b      	ldrh	r3, [r3, #2]
 80022ee:	784a      	ldrb	r2, [r1, #1]
 80022f0:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80022f2:	2b3f      	cmp	r3, #63	; 0x3f
 80022f4:	dc38      	bgt.n	8002368 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80022f6:	2600      	movs	r6, #0
 80022f8:	e020      	b.n	800233c <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <SSD1306_Putc+0x98>)
 80022fc:	8818      	ldrh	r0, [r3, #0]
 80022fe:	8859      	ldrh	r1, [r3, #2]
 8002300:	4431      	add	r1, r6
 8002302:	4420      	add	r0, r4
 8002304:	fab8 f288 	clz	r2, r8
 8002308:	0952      	lsrs	r2, r2, #5
 800230a:	b289      	uxth	r1, r1
 800230c:	b280      	uxth	r0, r0
 800230e:	f7ff ff67 	bl	80021e0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002312:	3401      	adds	r4, #1
 8002314:	782b      	ldrb	r3, [r5, #0]
 8002316:	42a3      	cmp	r3, r4
 8002318:	d90f      	bls.n	800233a <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 800231a:	fa07 f304 	lsl.w	r3, r7, r4
 800231e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002322:	d0ea      	beq.n	80022fa <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <SSD1306_Putc+0x98>)
 8002326:	8818      	ldrh	r0, [r3, #0]
 8002328:	8859      	ldrh	r1, [r3, #2]
 800232a:	4431      	add	r1, r6
 800232c:	4420      	add	r0, r4
 800232e:	4642      	mov	r2, r8
 8002330:	b289      	uxth	r1, r1
 8002332:	b280      	uxth	r0, r0
 8002334:	f7ff ff54 	bl	80021e0 <SSD1306_DrawPixel>
 8002338:	e7eb      	b.n	8002312 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 800233a:	3601      	adds	r6, #1
 800233c:	786a      	ldrb	r2, [r5, #1]
 800233e:	42b2      	cmp	r2, r6
 8002340:	d908      	bls.n	8002354 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002342:	6869      	ldr	r1, [r5, #4]
 8002344:	f1a9 0320 	sub.w	r3, r9, #32
 8002348:	fb02 6303 	mla	r3, r2, r3, r6
 800234c:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8002350:	2400      	movs	r4, #0
 8002352:	e7df      	b.n	8002314 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002354:	782b      	ldrb	r3, [r5, #0]
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <SSD1306_Putc+0x98>)
 8002358:	8811      	ldrh	r1, [r2, #0]
 800235a:	440b      	add	r3, r1
 800235c:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 800235e:	4648      	mov	r0, r9
}
 8002360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8002364:	2000      	movs	r0, #0
 8002366:	e7fb      	b.n	8002360 <SSD1306_Putc+0x8c>
 8002368:	2000      	movs	r0, #0
 800236a:	e7f9      	b.n	8002360 <SSD1306_Putc+0x8c>
 800236c:	20000b18 	.word	0x20000b18

08002370 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	4604      	mov	r4, r0
 8002374:	460e      	mov	r6, r1
 8002376:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8002378:	e000      	b.n	800237c <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 800237a:	3401      	adds	r4, #1
	while (*str) {
 800237c:	7820      	ldrb	r0, [r4, #0]
 800237e:	b138      	cbz	r0, 8002390 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002380:	462a      	mov	r2, r5
 8002382:	4631      	mov	r1, r6
 8002384:	f7ff ffa6 	bl	80022d4 <SSD1306_Putc>
 8002388:	4603      	mov	r3, r0
 800238a:	7820      	ldrb	r0, [r4, #0]
 800238c:	4283      	cmp	r3, r0
 800238e:	d0f4      	beq.n	800237a <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8002390:	bd70      	pop	{r4, r5, r6, pc}

08002392 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002396:	b083      	sub	sp, #12
 8002398:	4604      	mov	r4, r0
 800239a:	460e      	mov	r6, r1
 800239c:	4617      	mov	r7, r2
 800239e:	4698      	mov	r8, r3
 80023a0:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80023a4:	287f      	cmp	r0, #127	; 0x7f
 80023a6:	d900      	bls.n	80023aa <SSD1306_DrawLine+0x18>
		x0 = SSD1306_WIDTH - 1;
 80023a8:	247f      	movs	r4, #127	; 0x7f
	}
	if (x1 >= SSD1306_WIDTH) {
 80023aa:	2f7f      	cmp	r7, #127	; 0x7f
 80023ac:	d900      	bls.n	80023b0 <SSD1306_DrawLine+0x1e>
		x1 = SSD1306_WIDTH - 1;
 80023ae:	277f      	movs	r7, #127	; 0x7f
	}
	if (y0 >= SSD1306_HEIGHT) {
 80023b0:	2e3f      	cmp	r6, #63	; 0x3f
 80023b2:	d900      	bls.n	80023b6 <SSD1306_DrawLine+0x24>
		y0 = SSD1306_HEIGHT - 1;
 80023b4:	263f      	movs	r6, #63	; 0x3f
	}
	if (y1 >= SSD1306_HEIGHT) {
 80023b6:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 80023ba:	d901      	bls.n	80023c0 <SSD1306_DrawLine+0x2e>
		y1 = SSD1306_HEIGHT - 1;
 80023bc:	f04f 083f 	mov.w	r8, #63	; 0x3f
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80023c0:	42bc      	cmp	r4, r7
 80023c2:	d220      	bcs.n	8002406 <SSD1306_DrawLine+0x74>
 80023c4:	eba7 0904 	sub.w	r9, r7, r4
 80023c8:	fa0f f989 	sxth.w	r9, r9
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80023cc:	4546      	cmp	r6, r8
 80023ce:	d21f      	bcs.n	8002410 <SSD1306_DrawLine+0x7e>
 80023d0:	eba8 0a06 	sub.w	sl, r8, r6
 80023d4:	fa0f fa8a 	sxth.w	sl, sl
	sx = (x0 < x1) ? 1 : -1; 
 80023d8:	42bc      	cmp	r4, r7
 80023da:	d21e      	bcs.n	800241a <SSD1306_DrawLine+0x88>
 80023dc:	2301      	movs	r3, #1
 80023de:	461a      	mov	r2, r3
	sy = (y0 < y1) ? 1 : -1; 
 80023e0:	4546      	cmp	r6, r8
 80023e2:	d21e      	bcs.n	8002422 <SSD1306_DrawLine+0x90>
 80023e4:	2301      	movs	r3, #1
 80023e6:	9300      	str	r3, [sp, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80023e8:	45d1      	cmp	r9, sl
 80023ea:	dd1e      	ble.n	800242a <SSD1306_DrawLine+0x98>
 80023ec:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 80023f0:	106d      	asrs	r5, r5, #1

	if (dx == 0) {
 80023f2:	f1b9 0f00 	cmp.w	r9, #0
 80023f6:	d01e      	beq.n	8002436 <SSD1306_DrawLine+0xa4>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 80023f8:	f1ba 0f00 	cmp.w	sl, #0
 80023fc:	d034      	beq.n	8002468 <SSD1306_DrawLine+0xd6>
 80023fe:	f8cd 8004 	str.w	r8, [sp, #4]
 8002402:	4690      	mov	r8, r2
 8002404:	e054      	b.n	80024b0 <SSD1306_DrawLine+0x11e>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002406:	eba4 0907 	sub.w	r9, r4, r7
 800240a:	fa0f f989 	sxth.w	r9, r9
 800240e:	e7dd      	b.n	80023cc <SSD1306_DrawLine+0x3a>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002410:	eba6 0a08 	sub.w	sl, r6, r8
 8002414:	fa0f fa8a 	sxth.w	sl, sl
 8002418:	e7de      	b.n	80023d8 <SSD1306_DrawLine+0x46>
	sx = (x0 < x1) ? 1 : -1; 
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	461a      	mov	r2, r3
 8002420:	e7de      	b.n	80023e0 <SSD1306_DrawLine+0x4e>
	sy = (y0 < y1) ? 1 : -1; 
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	e7de      	b.n	80023e8 <SSD1306_DrawLine+0x56>
	err = ((dx > dy) ? dx : -dy) / 2; 
 800242a:	eb0a 75da 	add.w	r5, sl, sl, lsr #31
 800242e:	106d      	asrs	r5, r5, #1
 8002430:	426d      	negs	r5, r5
 8002432:	b22d      	sxth	r5, r5
 8002434:	e7dd      	b.n	80023f2 <SSD1306_DrawLine+0x60>
		if (y1 < y0) {
 8002436:	4546      	cmp	r6, r8
 8002438:	d802      	bhi.n	8002440 <SSD1306_DrawLine+0xae>
 800243a:	4643      	mov	r3, r8
 800243c:	46b0      	mov	r8, r6
 800243e:	461e      	mov	r6, r3
		if (x1 < x0) {
 8002440:	42bc      	cmp	r4, r7
 8002442:	d800      	bhi.n	8002446 <SSD1306_DrawLine+0xb4>
 8002444:	4627      	mov	r7, r4
		for (i = y0; i <= y1; i++) {
 8002446:	fa0f f888 	sxth.w	r8, r8
 800244a:	e00a      	b.n	8002462 <SSD1306_DrawLine+0xd0>
			SSD1306_DrawPixel(x0, i, c);
 800244c:	fa1f f888 	uxth.w	r8, r8
 8002450:	465a      	mov	r2, fp
 8002452:	4641      	mov	r1, r8
 8002454:	4638      	mov	r0, r7
 8002456:	f7ff fec3 	bl	80021e0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800245a:	f108 0801 	add.w	r8, r8, #1
 800245e:	fa0f f888 	sxth.w	r8, r8
 8002462:	45b0      	cmp	r8, r6
 8002464:	ddf2      	ble.n	800244c <SSD1306_DrawLine+0xba>
 8002466:	e017      	b.n	8002498 <SSD1306_DrawLine+0x106>
		if (y1 < y0) {
 8002468:	4546      	cmp	r6, r8
 800246a:	d800      	bhi.n	800246e <SSD1306_DrawLine+0xdc>
 800246c:	46b0      	mov	r8, r6
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}
		
		if (x1 < x0) {
 800246e:	42bc      	cmp	r4, r7
 8002470:	d802      	bhi.n	8002478 <SSD1306_DrawLine+0xe6>
 8002472:	463b      	mov	r3, r7
 8002474:	4627      	mov	r7, r4
 8002476:	461c      	mov	r4, r3
			x1 = x0;
			x0 = tmp;
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002478:	b23f      	sxth	r7, r7
 800247a:	e007      	b.n	800248c <SSD1306_DrawLine+0xfa>
			SSD1306_DrawPixel(i, y0, c);
 800247c:	b2bf      	uxth	r7, r7
 800247e:	465a      	mov	r2, fp
 8002480:	4641      	mov	r1, r8
 8002482:	4638      	mov	r0, r7
 8002484:	f7ff feac 	bl	80021e0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002488:	3701      	adds	r7, #1
 800248a:	b23f      	sxth	r7, r7
 800248c:	42a7      	cmp	r7, r4
 800248e:	ddf5      	ble.n	800247c <SSD1306_DrawLine+0xea>
 8002490:	e002      	b.n	8002498 <SSD1306_DrawLine+0x106>
		return;
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
 8002492:	9b01      	ldr	r3, [sp, #4]
 8002494:	429e      	cmp	r6, r3
 8002496:	d112      	bne.n	80024be <SSD1306_DrawLine+0x12c>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8002498:	b003      	add	sp, #12
 800249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800249e:	462b      	mov	r3, r5
		if (e2 < dy) {
 80024a0:	4555      	cmp	r5, sl
 80024a2:	da04      	bge.n	80024ae <SSD1306_DrawLine+0x11c>
			err += dx;
 80024a4:	444b      	add	r3, r9
 80024a6:	b21b      	sxth	r3, r3
			y0 += sy;
 80024a8:	9a00      	ldr	r2, [sp, #0]
 80024aa:	4416      	add	r6, r2
 80024ac:	b2b6      	uxth	r6, r6
		if (x1 < x0) {
 80024ae:	461d      	mov	r5, r3
		SSD1306_DrawPixel(x0, y0, c);
 80024b0:	465a      	mov	r2, fp
 80024b2:	4631      	mov	r1, r6
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7ff fe93 	bl	80021e0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80024ba:	42bc      	cmp	r4, r7
 80024bc:	d0e9      	beq.n	8002492 <SSD1306_DrawLine+0x100>
		if (e2 > -dx) {
 80024be:	f1c9 0300 	rsb	r3, r9, #0
 80024c2:	429d      	cmp	r5, r3
 80024c4:	ddeb      	ble.n	800249e <SSD1306_DrawLine+0x10c>
			err -= dy;
 80024c6:	eba5 030a 	sub.w	r3, r5, sl
 80024ca:	b21b      	sxth	r3, r3
			x0 += sx;
 80024cc:	4444      	add	r4, r8
 80024ce:	b2a4      	uxth	r4, r4
 80024d0:	e7e6      	b.n	80024a0 <SSD1306_DrawLine+0x10e>

080024d2 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80024d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* Check input parameters */
	if (
 80024dc:	287f      	cmp	r0, #127	; 0x7f
 80024de:	d834      	bhi.n	800254a <SSD1306_DrawRectangle+0x78>
 80024e0:	4606      	mov	r6, r0
 80024e2:	460f      	mov	r7, r1
 80024e4:	461d      	mov	r5, r3
		x >= SSD1306_WIDTH ||
 80024e6:	293f      	cmp	r1, #63	; 0x3f
 80024e8:	d82f      	bhi.n	800254a <SSD1306_DrawRectangle+0x78>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80024ea:	1883      	adds	r3, r0, r2
 80024ec:	2b7f      	cmp	r3, #127	; 0x7f
 80024ee:	dd02      	ble.n	80024f6 <SSD1306_DrawRectangle+0x24>
		w = SSD1306_WIDTH - x;
 80024f0:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 80024f4:	b292      	uxth	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80024f6:	197b      	adds	r3, r7, r5
 80024f8:	2b3f      	cmp	r3, #63	; 0x3f
 80024fa:	dd02      	ble.n	8002502 <SSD1306_DrawRectangle+0x30>
		h = SSD1306_HEIGHT - y;
 80024fc:	f1c7 0540 	rsb	r5, r7, #64	; 0x40
 8002500:	b2ad      	uxth	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8002502:	1994      	adds	r4, r2, r6
 8002504:	b2a4      	uxth	r4, r4
 8002506:	f8cd 8000 	str.w	r8, [sp]
 800250a:	463b      	mov	r3, r7
 800250c:	4622      	mov	r2, r4
 800250e:	4639      	mov	r1, r7
 8002510:	4630      	mov	r0, r6
 8002512:	f7ff ff3e 	bl	8002392 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8002516:	443d      	add	r5, r7
 8002518:	b2ad      	uxth	r5, r5
 800251a:	f8cd 8000 	str.w	r8, [sp]
 800251e:	462b      	mov	r3, r5
 8002520:	4622      	mov	r2, r4
 8002522:	4629      	mov	r1, r5
 8002524:	4630      	mov	r0, r6
 8002526:	f7ff ff34 	bl	8002392 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 800252a:	f8cd 8000 	str.w	r8, [sp]
 800252e:	462b      	mov	r3, r5
 8002530:	4632      	mov	r2, r6
 8002532:	4639      	mov	r1, r7
 8002534:	4630      	mov	r0, r6
 8002536:	f7ff ff2c 	bl	8002392 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800253a:	f8cd 8000 	str.w	r8, [sp]
 800253e:	462b      	mov	r3, r5
 8002540:	4622      	mov	r2, r4
 8002542:	4639      	mov	r1, r7
 8002544:	4620      	mov	r0, r4
 8002546:	f7ff ff24 	bl	8002392 <SSD1306_DrawLine>
}
 800254a:	b002      	add	sp, #8
 800254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002550 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8002550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002554:	b087      	sub	sp, #28
 8002556:	9201      	str	r2, [sp, #4]
 8002558:	461e      	mov	r6, r3
	int16_t f = 1 - r;
 800255a:	b294      	uxth	r4, r2
 800255c:	f1c4 0301 	rsb	r3, r4, #1
 8002560:	fa0f f983 	sxth.w	r9, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8002564:	ebc4 33c4 	rsb	r3, r4, r4, lsl #15
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	b21b      	sxth	r3, r3
 800256c:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 800256e:	fa1f fb80 	uxth.w	fp, r0
 8002572:	fa1f fa81 	uxth.w	sl, r1
 8002576:	eb04 010a 	add.w	r1, r4, sl
 800257a:	4632      	mov	r2, r6
 800257c:	b289      	uxth	r1, r1
 800257e:	4658      	mov	r0, fp
 8002580:	f7ff fe2e 	bl	80021e0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002584:	ebaa 0104 	sub.w	r1, sl, r4
 8002588:	4632      	mov	r2, r6
 800258a:	b289      	uxth	r1, r1
 800258c:	4658      	mov	r0, fp
 800258e:	f7ff fe27 	bl	80021e0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002592:	eb04 000b 	add.w	r0, r4, fp
 8002596:	4632      	mov	r2, r6
 8002598:	4651      	mov	r1, sl
 800259a:	b280      	uxth	r0, r0
 800259c:	f7ff fe20 	bl	80021e0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80025a0:	ebab 0004 	sub.w	r0, fp, r4
 80025a4:	4632      	mov	r2, r6
 80025a6:	4651      	mov	r1, sl
 80025a8:	b280      	uxth	r0, r0
 80025aa:	f7ff fe19 	bl	80021e0 <SSD1306_DrawPixel>
	int16_t x = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	9302      	str	r3, [sp, #8]
	int16_t ddF_x = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	9303      	str	r3, [sp, #12]

    while (x < y) {
 80025b6:	e05e      	b.n	8002676 <SSD1306_DrawCircle+0x126>
        if (f >= 0) {
            y--;
 80025b8:	9b01      	ldr	r3, [sp, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b21b      	sxth	r3, r3
 80025be:	9301      	str	r3, [sp, #4]
            ddF_y += 2;
 80025c0:	9a05      	ldr	r2, [sp, #20]
 80025c2:	3202      	adds	r2, #2
 80025c4:	b293      	uxth	r3, r2
 80025c6:	b212      	sxth	r2, r2
 80025c8:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 80025ca:	444b      	add	r3, r9
 80025cc:	fa0f f983 	sxth.w	r9, r3
        }
        x++;
 80025d0:	9b02      	ldr	r3, [sp, #8]
 80025d2:	3301      	adds	r3, #1
 80025d4:	b29d      	uxth	r5, r3
 80025d6:	b21b      	sxth	r3, r3
 80025d8:	9302      	str	r3, [sp, #8]
        ddF_x += 2;
 80025da:	9a03      	ldr	r2, [sp, #12]
 80025dc:	3202      	adds	r2, #2
 80025de:	b293      	uxth	r3, r2
 80025e0:	b212      	sxth	r2, r2
 80025e2:	9203      	str	r2, [sp, #12]
        f += ddF_x;
 80025e4:	444b      	add	r3, r9
 80025e6:	fa0f f983 	sxth.w	r9, r3

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80025ea:	eb0b 0305 	add.w	r3, fp, r5
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80025f4:	eb0a 0804 	add.w	r8, sl, r4
 80025f8:	fa1f f888 	uxth.w	r8, r8
 80025fc:	4632      	mov	r2, r6
 80025fe:	4641      	mov	r1, r8
 8002600:	9304      	str	r3, [sp, #16]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fdec 	bl	80021e0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002608:	ebab 0705 	sub.w	r7, fp, r5
 800260c:	b2bf      	uxth	r7, r7
 800260e:	4632      	mov	r2, r6
 8002610:	4641      	mov	r1, r8
 8002612:	4638      	mov	r0, r7
 8002614:	f7ff fde4 	bl	80021e0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002618:	ebaa 0804 	sub.w	r8, sl, r4
 800261c:	fa1f f888 	uxth.w	r8, r8
 8002620:	4632      	mov	r2, r6
 8002622:	4641      	mov	r1, r8
 8002624:	9804      	ldr	r0, [sp, #16]
 8002626:	f7ff fddb 	bl	80021e0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800262a:	4632      	mov	r2, r6
 800262c:	4641      	mov	r1, r8
 800262e:	4638      	mov	r0, r7
 8002630:	f7ff fdd6 	bl	80021e0 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002634:	eb0b 0704 	add.w	r7, fp, r4
 8002638:	b2bf      	uxth	r7, r7
 800263a:	eb0a 0805 	add.w	r8, sl, r5
 800263e:	fa1f f888 	uxth.w	r8, r8
 8002642:	4632      	mov	r2, r6
 8002644:	4641      	mov	r1, r8
 8002646:	4638      	mov	r0, r7
 8002648:	f7ff fdca 	bl	80021e0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800264c:	ebab 0404 	sub.w	r4, fp, r4
 8002650:	b2a4      	uxth	r4, r4
 8002652:	4632      	mov	r2, r6
 8002654:	4641      	mov	r1, r8
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff fdc2 	bl	80021e0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 800265c:	ebaa 0505 	sub.w	r5, sl, r5
 8002660:	b2ad      	uxth	r5, r5
 8002662:	4632      	mov	r2, r6
 8002664:	4629      	mov	r1, r5
 8002666:	4638      	mov	r0, r7
 8002668:	f7ff fdba 	bl	80021e0 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800266c:	4632      	mov	r2, r6
 800266e:	4629      	mov	r1, r5
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff fdb5 	bl	80021e0 <SSD1306_DrawPixel>
    while (x < y) {
 8002676:	9b02      	ldr	r3, [sp, #8]
 8002678:	9a01      	ldr	r2, [sp, #4]
 800267a:	4293      	cmp	r3, r2
 800267c:	da03      	bge.n	8002686 <SSD1306_DrawCircle+0x136>
        if (f >= 0) {
 800267e:	f1b9 0f00 	cmp.w	r9, #0
 8002682:	da99      	bge.n	80025b8 <SSD1306_DrawCircle+0x68>
 8002684:	e7a4      	b.n	80025d0 <SSD1306_DrawCircle+0x80>
    }
}
 8002686:	b007      	add	sp, #28
 8002688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800268c <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800268c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002690:	b087      	sub	sp, #28
 8002692:	9202      	str	r2, [sp, #8]
 8002694:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 8002696:	b295      	uxth	r5, r2
 8002698:	f1c5 0401 	rsb	r4, r5, #1
 800269c:	b224      	sxth	r4, r4
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 800269e:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	b21b      	sxth	r3, r3
 80026a6:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 80026a8:	fa1f fb80 	uxth.w	fp, r0
 80026ac:	b28f      	uxth	r7, r1
 80026ae:	19e9      	adds	r1, r5, r7
 80026b0:	4652      	mov	r2, sl
 80026b2:	b289      	uxth	r1, r1
 80026b4:	4658      	mov	r0, fp
 80026b6:	f7ff fd93 	bl	80021e0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80026ba:	1b79      	subs	r1, r7, r5
 80026bc:	4652      	mov	r2, sl
 80026be:	b289      	uxth	r1, r1
 80026c0:	4658      	mov	r0, fp
 80026c2:	f7ff fd8d 	bl	80021e0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80026c6:	eb05 060b 	add.w	r6, r5, fp
 80026ca:	b2b6      	uxth	r6, r6
 80026cc:	4652      	mov	r2, sl
 80026ce:	4639      	mov	r1, r7
 80026d0:	4630      	mov	r0, r6
 80026d2:	f7ff fd85 	bl	80021e0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80026d6:	ebab 0505 	sub.w	r5, fp, r5
 80026da:	b2ad      	uxth	r5, r5
 80026dc:	4652      	mov	r2, sl
 80026de:	4639      	mov	r1, r7
 80026e0:	4628      	mov	r0, r5
 80026e2:	f7ff fd7d 	bl	80021e0 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 80026e6:	f8cd a000 	str.w	sl, [sp]
 80026ea:	463b      	mov	r3, r7
 80026ec:	4632      	mov	r2, r6
 80026ee:	4639      	mov	r1, r7
 80026f0:	4628      	mov	r0, r5
 80026f2:	f7ff fe4e 	bl	8002392 <SSD1306_DrawLine>
	int16_t x = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	9303      	str	r3, [sp, #12]
	int16_t ddF_x = 1;
 80026fa:	2301      	movs	r3, #1
 80026fc:	9304      	str	r3, [sp, #16]

    while (x < y) {
 80026fe:	e04b      	b.n	8002798 <SSD1306_DrawFilledCircle+0x10c>
        if (f >= 0) {
            y--;
 8002700:	9b02      	ldr	r3, [sp, #8]
 8002702:	3b01      	subs	r3, #1
 8002704:	b21b      	sxth	r3, r3
 8002706:	9302      	str	r3, [sp, #8]
            ddF_y += 2;
 8002708:	9a05      	ldr	r2, [sp, #20]
 800270a:	3202      	adds	r2, #2
 800270c:	b293      	uxth	r3, r2
 800270e:	b212      	sxth	r2, r2
 8002710:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8002712:	4423      	add	r3, r4
 8002714:	b21c      	sxth	r4, r3
        }
        x++;
 8002716:	9b03      	ldr	r3, [sp, #12]
 8002718:	3301      	adds	r3, #1
 800271a:	b29d      	uxth	r5, r3
 800271c:	b21b      	sxth	r3, r3
 800271e:	9303      	str	r3, [sp, #12]
        ddF_x += 2;
 8002720:	9a04      	ldr	r2, [sp, #16]
 8002722:	3202      	adds	r2, #2
 8002724:	b293      	uxth	r3, r2
 8002726:	b212      	sxth	r2, r2
 8002728:	9204      	str	r2, [sp, #16]
        f += ddF_x;
 800272a:	4423      	add	r3, r4
 800272c:	b21c      	sxth	r4, r3

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 800272e:	ebab 0905 	sub.w	r9, fp, r5
 8002732:	fa1f f989 	uxth.w	r9, r9
 8002736:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800273a:	19b9      	adds	r1, r7, r6
 800273c:	b289      	uxth	r1, r1
 800273e:	eb0b 0805 	add.w	r8, fp, r5
 8002742:	fa1f f888 	uxth.w	r8, r8
 8002746:	f8cd a000 	str.w	sl, [sp]
 800274a:	460b      	mov	r3, r1
 800274c:	4642      	mov	r2, r8
 800274e:	4648      	mov	r0, r9
 8002750:	f7ff fe1f 	bl	8002392 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002754:	1bb9      	subs	r1, r7, r6
 8002756:	b289      	uxth	r1, r1
 8002758:	f8cd a000 	str.w	sl, [sp]
 800275c:	460b      	mov	r3, r1
 800275e:	464a      	mov	r2, r9
 8002760:	4640      	mov	r0, r8
 8002762:	f7ff fe16 	bl	8002392 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002766:	eb0b 0806 	add.w	r8, fp, r6
 800276a:	fa1f f888 	uxth.w	r8, r8
 800276e:	1979      	adds	r1, r7, r5
 8002770:	b289      	uxth	r1, r1
 8002772:	ebab 0606 	sub.w	r6, fp, r6
 8002776:	b2b6      	uxth	r6, r6
 8002778:	f8cd a000 	str.w	sl, [sp]
 800277c:	460b      	mov	r3, r1
 800277e:	4632      	mov	r2, r6
 8002780:	4640      	mov	r0, r8
 8002782:	f7ff fe06 	bl	8002392 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002786:	1b79      	subs	r1, r7, r5
 8002788:	b289      	uxth	r1, r1
 800278a:	f8cd a000 	str.w	sl, [sp]
 800278e:	460b      	mov	r3, r1
 8002790:	4632      	mov	r2, r6
 8002792:	4640      	mov	r0, r8
 8002794:	f7ff fdfd 	bl	8002392 <SSD1306_DrawLine>
    while (x < y) {
 8002798:	9b03      	ldr	r3, [sp, #12]
 800279a:	9a02      	ldr	r2, [sp, #8]
 800279c:	4293      	cmp	r3, r2
 800279e:	da02      	bge.n	80027a6 <SSD1306_DrawFilledCircle+0x11a>
        if (f >= 0) {
 80027a0:	2c00      	cmp	r4, #0
 80027a2:	daad      	bge.n	8002700 <SSD1306_DrawFilledCircle+0x74>
 80027a4:	e7b7      	b.n	8002716 <SSD1306_DrawFilledCircle+0x8a>
    }
}
 80027a6:	b007      	add	sp, #28
 80027a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027ac <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80027ac:	b500      	push	{lr}
 80027ae:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 80027b0:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80027b4:	f04f 0c00 	mov.w	ip, #0
 80027b8:	e009      	b.n	80027ce <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 80027ba:	f10c 0e01 	add.w	lr, ip, #1
 80027be:	f812 100c 	ldrb.w	r1, [r2, ip]
 80027c2:	f10d 0c08 	add.w	ip, sp, #8
 80027c6:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 80027ca:	fa5f fc8e 	uxtb.w	ip, lr
 80027ce:	fa1f fe8c 	uxth.w	lr, ip
 80027d2:	459e      	cmp	lr, r3
 80027d4:	d3f1      	bcc.n	80027ba <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80027d6:	3301      	adds	r3, #1
 80027d8:	220a      	movs	r2, #10
 80027da:	9200      	str	r2, [sp, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	aa02      	add	r2, sp, #8
 80027e0:	4601      	mov	r1, r0
 80027e2:	4803      	ldr	r0, [pc, #12]	; (80027f0 <ssd1306_I2C_WriteMulti+0x44>)
 80027e4:	f001 fa3a 	bl	8003c5c <HAL_I2C_Master_Transmit>
}
 80027e8:	b043      	add	sp, #268	; 0x10c
 80027ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ee:	bf00      	nop
 80027f0:	20000970 	.word	0x20000970

080027f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80027f4:	b500      	push	{lr}
 80027f6:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80027f8:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80027fc:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002800:	230a      	movs	r3, #10
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2302      	movs	r3, #2
 8002806:	aa03      	add	r2, sp, #12
 8002808:	4601      	mov	r1, r0
 800280a:	4803      	ldr	r0, [pc, #12]	; (8002818 <ssd1306_I2C_Write+0x24>)
 800280c:	f001 fa26 	bl	8003c5c <HAL_I2C_Master_Transmit>
}
 8002810:	b005      	add	sp, #20
 8002812:	f85d fb04 	ldr.w	pc, [sp], #4
 8002816:	bf00      	nop
 8002818:	20000970 	.word	0x20000970

0800281c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 800281c:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 800281e:	2400      	movs	r4, #0
 8002820:	e01a      	b.n	8002858 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002822:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	2100      	movs	r1, #0
 800282a:	2078      	movs	r0, #120	; 0x78
 800282c:	f7ff ffe2 	bl	80027f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002830:	2200      	movs	r2, #0
 8002832:	4611      	mov	r1, r2
 8002834:	2078      	movs	r0, #120	; 0x78
 8002836:	f7ff ffdd 	bl	80027f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800283a:	2210      	movs	r2, #16
 800283c:	2100      	movs	r1, #0
 800283e:	2078      	movs	r0, #120	; 0x78
 8002840:	f7ff ffd8 	bl	80027f4 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	4a06      	ldr	r2, [pc, #24]	; (8002860 <SSD1306_UpdateScreen+0x44>)
 8002848:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 800284c:	2140      	movs	r1, #64	; 0x40
 800284e:	2078      	movs	r0, #120	; 0x78
 8002850:	f7ff ffac 	bl	80027ac <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002854:	3401      	adds	r4, #1
 8002856:	b2e4      	uxtb	r4, r4
 8002858:	2c07      	cmp	r4, #7
 800285a:	d9e2      	bls.n	8002822 <SSD1306_UpdateScreen+0x6>
}
 800285c:	bd10      	pop	{r4, pc}
 800285e:	bf00      	nop
 8002860:	20000b20 	.word	0x20000b20

08002864 <SSD1306_Clear>:
{
 8002864:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8002866:	2000      	movs	r0, #0
 8002868:	f7ff fcac 	bl	80021c4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800286c:	f7ff ffd6 	bl	800281c <SSD1306_UpdateScreen>
}
 8002870:	bd08      	pop	{r3, pc}
	...

08002874 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002874:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002876:	f644 6320 	movw	r3, #20000	; 0x4e20
 800287a:	2201      	movs	r2, #1
 800287c:	2178      	movs	r1, #120	; 0x78
 800287e:	4855      	ldr	r0, [pc, #340]	; (80029d4 <SSD1306_Init+0x160>)
 8002880:	f001 faa8 	bl	8003dd4 <HAL_I2C_IsDeviceReady>
 8002884:	2800      	cmp	r0, #0
 8002886:	f040 80a3 	bne.w	80029d0 <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 800288a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800288e:	e000      	b.n	8002892 <SSD1306_Init+0x1e>
		p--;
 8002890:	3b01      	subs	r3, #1
	while(p>0)
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1fc      	bne.n	8002890 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002896:	22ae      	movs	r2, #174	; 0xae
 8002898:	2100      	movs	r1, #0
 800289a:	2078      	movs	r0, #120	; 0x78
 800289c:	f7ff ffaa 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80028a0:	2220      	movs	r2, #32
 80028a2:	2100      	movs	r1, #0
 80028a4:	2078      	movs	r0, #120	; 0x78
 80028a6:	f7ff ffa5 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80028aa:	2210      	movs	r2, #16
 80028ac:	2100      	movs	r1, #0
 80028ae:	2078      	movs	r0, #120	; 0x78
 80028b0:	f7ff ffa0 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80028b4:	22b0      	movs	r2, #176	; 0xb0
 80028b6:	2100      	movs	r1, #0
 80028b8:	2078      	movs	r0, #120	; 0x78
 80028ba:	f7ff ff9b 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80028be:	22c8      	movs	r2, #200	; 0xc8
 80028c0:	2100      	movs	r1, #0
 80028c2:	2078      	movs	r0, #120	; 0x78
 80028c4:	f7ff ff96 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80028c8:	2200      	movs	r2, #0
 80028ca:	4611      	mov	r1, r2
 80028cc:	2078      	movs	r0, #120	; 0x78
 80028ce:	f7ff ff91 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80028d2:	2210      	movs	r2, #16
 80028d4:	2100      	movs	r1, #0
 80028d6:	2078      	movs	r0, #120	; 0x78
 80028d8:	f7ff ff8c 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80028dc:	2240      	movs	r2, #64	; 0x40
 80028de:	2100      	movs	r1, #0
 80028e0:	2078      	movs	r0, #120	; 0x78
 80028e2:	f7ff ff87 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80028e6:	2281      	movs	r2, #129	; 0x81
 80028e8:	2100      	movs	r1, #0
 80028ea:	2078      	movs	r0, #120	; 0x78
 80028ec:	f7ff ff82 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80028f0:	22ff      	movs	r2, #255	; 0xff
 80028f2:	2100      	movs	r1, #0
 80028f4:	2078      	movs	r0, #120	; 0x78
 80028f6:	f7ff ff7d 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80028fa:	22a1      	movs	r2, #161	; 0xa1
 80028fc:	2100      	movs	r1, #0
 80028fe:	2078      	movs	r0, #120	; 0x78
 8002900:	f7ff ff78 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002904:	22a6      	movs	r2, #166	; 0xa6
 8002906:	2100      	movs	r1, #0
 8002908:	2078      	movs	r0, #120	; 0x78
 800290a:	f7ff ff73 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800290e:	22a8      	movs	r2, #168	; 0xa8
 8002910:	2100      	movs	r1, #0
 8002912:	2078      	movs	r0, #120	; 0x78
 8002914:	f7ff ff6e 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002918:	223f      	movs	r2, #63	; 0x3f
 800291a:	2100      	movs	r1, #0
 800291c:	2078      	movs	r0, #120	; 0x78
 800291e:	f7ff ff69 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002922:	22a4      	movs	r2, #164	; 0xa4
 8002924:	2100      	movs	r1, #0
 8002926:	2078      	movs	r0, #120	; 0x78
 8002928:	f7ff ff64 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800292c:	22d3      	movs	r2, #211	; 0xd3
 800292e:	2100      	movs	r1, #0
 8002930:	2078      	movs	r0, #120	; 0x78
 8002932:	f7ff ff5f 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002936:	2200      	movs	r2, #0
 8002938:	4611      	mov	r1, r2
 800293a:	2078      	movs	r0, #120	; 0x78
 800293c:	f7ff ff5a 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002940:	22d5      	movs	r2, #213	; 0xd5
 8002942:	2100      	movs	r1, #0
 8002944:	2078      	movs	r0, #120	; 0x78
 8002946:	f7ff ff55 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800294a:	22f0      	movs	r2, #240	; 0xf0
 800294c:	2100      	movs	r1, #0
 800294e:	2078      	movs	r0, #120	; 0x78
 8002950:	f7ff ff50 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002954:	22d9      	movs	r2, #217	; 0xd9
 8002956:	2100      	movs	r1, #0
 8002958:	2078      	movs	r0, #120	; 0x78
 800295a:	f7ff ff4b 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800295e:	2222      	movs	r2, #34	; 0x22
 8002960:	2100      	movs	r1, #0
 8002962:	2078      	movs	r0, #120	; 0x78
 8002964:	f7ff ff46 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002968:	22da      	movs	r2, #218	; 0xda
 800296a:	2100      	movs	r1, #0
 800296c:	2078      	movs	r0, #120	; 0x78
 800296e:	f7ff ff41 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002972:	2212      	movs	r2, #18
 8002974:	2100      	movs	r1, #0
 8002976:	2078      	movs	r0, #120	; 0x78
 8002978:	f7ff ff3c 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800297c:	22db      	movs	r2, #219	; 0xdb
 800297e:	2100      	movs	r1, #0
 8002980:	2078      	movs	r0, #120	; 0x78
 8002982:	f7ff ff37 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002986:	2220      	movs	r2, #32
 8002988:	2100      	movs	r1, #0
 800298a:	2078      	movs	r0, #120	; 0x78
 800298c:	f7ff ff32 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002990:	228d      	movs	r2, #141	; 0x8d
 8002992:	2100      	movs	r1, #0
 8002994:	2078      	movs	r0, #120	; 0x78
 8002996:	f7ff ff2d 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800299a:	2214      	movs	r2, #20
 800299c:	2100      	movs	r1, #0
 800299e:	2078      	movs	r0, #120	; 0x78
 80029a0:	f7ff ff28 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80029a4:	22af      	movs	r2, #175	; 0xaf
 80029a6:	2100      	movs	r1, #0
 80029a8:	2078      	movs	r0, #120	; 0x78
 80029aa:	f7ff ff23 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80029ae:	222e      	movs	r2, #46	; 0x2e
 80029b0:	2100      	movs	r1, #0
 80029b2:	2078      	movs	r0, #120	; 0x78
 80029b4:	f7ff ff1e 	bl	80027f4 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff fc03 	bl	80021c4 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80029be:	f7ff ff2d 	bl	800281c <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <SSD1306_Init+0x164>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80029c8:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80029ca:	2001      	movs	r0, #1
 80029cc:	7158      	strb	r0, [r3, #5]
}
 80029ce:	bd08      	pop	{r3, pc}
		return 0;
 80029d0:	2000      	movs	r0, #0
 80029d2:	e7fc      	b.n	80029ce <SSD1306_Init+0x15a>
 80029d4:	20000970 	.word	0x20000970
 80029d8:	20000b18 	.word	0x20000b18

080029dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029dc:	b500      	push	{lr}
 80029de:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_MspInit+0x4c>)
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	619a      	str	r2, [r3, #24]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	f002 0201 	and.w	r2, r2, #1
 80029f0:	9200      	str	r2, [sp, #0]
 80029f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029fa:	61da      	str	r2, [r3, #28]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	210f      	movs	r1, #15
 8002a0a:	f06f 0001 	mvn.w	r0, #1
 8002a0e:	f000 fd47 	bl	80034a0 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a12:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <HAL_MspInit+0x50>)
 8002a14:	6853      	ldr	r3, [r2, #4]
 8002a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a20:	b003      	add	sp, #12
 8002a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010000 	.word	0x40010000

08002a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a30:	b500      	push	{lr}
 8002a32:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	2300      	movs	r3, #0
 8002a36:	9304      	str	r3, [sp, #16]
 8002a38:	9305      	str	r3, [sp, #20]
 8002a3a:	9306      	str	r3, [sp, #24]
 8002a3c:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002a3e:	6803      	ldr	r3, [r0, #0]
 8002a40:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <HAL_ADC_MspInit+0x94>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d005      	beq.n	8002a52 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002a46:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <HAL_ADC_MspInit+0x98>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d01e      	beq.n	8002a8a <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002a4c:	b009      	add	sp, #36	; 0x24
 8002a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <HAL_ADC_MspInit+0x9c>)
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5a:	619a      	str	r2, [r3, #24]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002a62:	9200      	str	r2, [sp, #0]
 8002a64:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	f042 0204 	orr.w	r2, r2, #4
 8002a6c:	619a      	str	r2, [r3, #24]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a78:	2308      	movs	r3, #8
 8002a7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	a904      	add	r1, sp, #16
 8002a82:	4813      	ldr	r0, [pc, #76]	; (8002ad0 <HAL_ADC_MspInit+0xa0>)
 8002a84:	f000 fd52 	bl	800352c <HAL_GPIO_Init>
 8002a88:	e7e0      	b.n	8002a4c <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_ADC_MspInit+0x9c>)
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a92:	619a      	str	r2, [r3, #24]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002a9a:	9202      	str	r2, [sp, #8]
 8002a9c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	f042 0204 	orr.w	r2, r2, #4
 8002aa4:	619a      	str	r2, [r3, #24]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	9303      	str	r3, [sp, #12]
 8002aae:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	a904      	add	r1, sp, #16
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <HAL_ADC_MspInit+0xa0>)
 8002abc:	f000 fd36 	bl	800352c <HAL_GPIO_Init>
}
 8002ac0:	e7c4      	b.n	8002a4c <HAL_ADC_MspInit+0x1c>
 8002ac2:	bf00      	nop
 8002ac4:	40012400 	.word	0x40012400
 8002ac8:	40012800 	.word	0x40012800
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40010800 	.word	0x40010800

08002ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	9303      	str	r3, [sp, #12]
 8002ade:	9304      	str	r3, [sp, #16]
 8002ae0:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8002ae2:	6802      	ldr	r2, [r0, #0]
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_I2C_MspInit+0x58>)
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002aea:	b006      	add	sp, #24
 8002aec:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	4c10      	ldr	r4, [pc, #64]	; (8002b30 <HAL_I2C_MspInit+0x5c>)
 8002af0:	69a3      	ldr	r3, [r4, #24]
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	61a3      	str	r3, [r4, #24]
 8002af8:	69a3      	ldr	r3, [r4, #24]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b02:	23c0      	movs	r3, #192	; 0xc0
 8002b04:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b06:	2312      	movs	r3, #18
 8002b08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0e:	a902      	add	r1, sp, #8
 8002b10:	4808      	ldr	r0, [pc, #32]	; (8002b34 <HAL_I2C_MspInit+0x60>)
 8002b12:	f000 fd0b 	bl	800352c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b16:	69e3      	ldr	r3, [r4, #28]
 8002b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b1c:	61e3      	str	r3, [r4, #28]
 8002b1e:	69e3      	ldr	r3, [r4, #28]
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	9b01      	ldr	r3, [sp, #4]
}
 8002b28:	e7df      	b.n	8002aea <HAL_I2C_MspInit+0x16>
 8002b2a:	bf00      	nop
 8002b2c:	40005400 	.word	0x40005400
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010c00 	.word	0x40010c00

08002b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9302      	str	r3, [sp, #8]
 8002b40:	9303      	str	r3, [sp, #12]
 8002b42:	9304      	str	r3, [sp, #16]
 8002b44:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8002b46:	6802      	ldr	r2, [r0, #0]
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_SPI_MspInit+0x6c>)
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d001      	beq.n	8002b52 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b4e:	b006      	add	sp, #24
 8002b50:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b52:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b64:	9200      	str	r2, [sp, #0]
 8002b66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	f042 0204 	orr.w	r2, r2, #4
 8002b6e:	619a      	str	r2, [r3, #24]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b7a:	23a0      	movs	r3, #160	; 0xa0
 8002b7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b82:	2303      	movs	r3, #3
 8002b84:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	4c08      	ldr	r4, [pc, #32]	; (8002ba8 <HAL_SPI_MspInit+0x70>)
 8002b88:	a902      	add	r1, sp, #8
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f000 fcce 	bl	800352c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b90:	2340      	movs	r3, #64	; 0x40
 8002b92:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b94:	2300      	movs	r3, #0
 8002b96:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	a902      	add	r1, sp, #8
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f000 fcc5 	bl	800352c <HAL_GPIO_Init>
}
 8002ba2:	e7d4      	b.n	8002b4e <HAL_SPI_MspInit+0x16>
 8002ba4:	40013000 	.word	0x40013000
 8002ba8:	40010800 	.word	0x40010800

08002bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bac:	b500      	push	{lr}
 8002bae:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8002bb0:	6803      	ldr	r3, [r0, #0]
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb6:	d005      	beq.n	8002bc4 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002bb8:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <HAL_TIM_Base_MspInit+0x58>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bbe:	b003      	add	sp, #12
 8002bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	61da      	str	r2, [r3, #28]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	9b00      	ldr	r3, [sp, #0]
 8002bda:	e7f0      	b.n	8002bbe <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_TIM_Base_MspInit+0x5c>)
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	f042 0202 	orr.w	r2, r2, #2
 8002be4:	61da      	str	r2, [r3, #28]
 8002be6:	69db      	ldr	r3, [r3, #28]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	9301      	str	r3, [sp, #4]
 8002bee:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	201d      	movs	r0, #29
 8002bf6:	f000 fc53 	bl	80034a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bfa:	201d      	movs	r0, #29
 8002bfc:	f000 fc88 	bl	8003510 <HAL_NVIC_EnableIRQ>
}
 8002c00:	e7dd      	b.n	8002bbe <HAL_TIM_Base_MspInit+0x12>
 8002c02:	bf00      	nop
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40021000 	.word	0x40021000

08002c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c0c:	b500      	push	{lr}
 8002c0e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	2300      	movs	r3, #0
 8002c12:	9302      	str	r3, [sp, #8]
 8002c14:	9303      	str	r3, [sp, #12]
 8002c16:	9304      	str	r3, [sp, #16]
 8002c18:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8002c1a:	6803      	ldr	r3, [r0, #0]
 8002c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c20:	d002      	beq.n	8002c28 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c22:	b007      	add	sp, #28
 8002c24:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c28:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	f042 0204 	orr.w	r2, r2, #4
 8002c32:	619a      	str	r2, [r3, #24]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	a902      	add	r1, sp, #8
 8002c4a:	4802      	ldr	r0, [pc, #8]	; (8002c54 <HAL_TIM_MspPostInit+0x48>)
 8002c4c:	f000 fc6e 	bl	800352c <HAL_GPIO_Init>
}
 8002c50:	e7e7      	b.n	8002c22 <HAL_TIM_MspPostInit+0x16>
 8002c52:	bf00      	nop
 8002c54:	40010800 	.word	0x40010800

08002c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b530      	push	{r4, r5, lr}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c5e:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_InitTick+0x8c>)
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	f042 0204 	orr.w	r2, r2, #4
 8002c66:	61da      	str	r2, [r3, #28]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c72:	a902      	add	r1, sp, #8
 8002c74:	a803      	add	r0, sp, #12
 8002c76:	f001 fc9b 	bl	80045b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c7a:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c7c:	b9cb      	cbnz	r3, 8002cb2 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c7e:	f001 fc77 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8002c82:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c84:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_InitTick+0x90>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0c9b      	lsrs	r3, r3, #18
 8002c8c:	3b01      	subs	r3, #1

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002c8e:	4817      	ldr	r0, [pc, #92]	; (8002cec <HAL_InitTick+0x94>)
 8002c90:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <HAL_InitTick+0x98>)
 8002c92:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c98:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002c9a:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca2:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002ca4:	f002 fb62 	bl	800536c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002ca8:	4605      	mov	r5, r0
 8002caa:	b130      	cbz	r0, 8002cba <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8002cac:	4628      	mov	r0, r5
 8002cae:	b009      	add	sp, #36	; 0x24
 8002cb0:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cb2:	f001 fc5d 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8002cb6:	0043      	lsls	r3, r0, #1
 8002cb8:	e7e4      	b.n	8002c84 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002cba:	480c      	ldr	r0, [pc, #48]	; (8002cec <HAL_InitTick+0x94>)
 8002cbc:	f002 fa0c 	bl	80050d8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d1f2      	bne.n	8002cac <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cc6:	201e      	movs	r0, #30
 8002cc8:	f000 fc22 	bl	8003510 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ccc:	2c0f      	cmp	r4, #15
 8002cce:	d901      	bls.n	8002cd4 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 8002cd0:	2501      	movs	r5, #1
 8002cd2:	e7eb      	b.n	8002cac <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	201e      	movs	r0, #30
 8002cda:	f000 fbe1 	bl	80034a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_InitTick+0x9c>)
 8002ce0:	601c      	str	r4, [r3, #0]
 8002ce2:	e7e3      	b.n	8002cac <HAL_InitTick+0x54>
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	20000f20 	.word	0x20000f20
 8002cf0:	40000800 	.word	0x40000800
 8002cf4:	200007c0 	.word	0x200007c0

08002cf8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <NMI_Handler>
	...

08002cfc <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    // Leer el registro CFSR para obtener información sobre el fallo
    uint32_t cfsr = SCB->CFSR;
 8002cfc:	4b01      	ldr	r3, [pc, #4]	; (8002d04 <HardFault_Handler+0x8>)
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d00:	e7fe      	b.n	8002d00 <HardFault_Handler+0x4>
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d08:	e7fe      	b.n	8002d08 <MemManage_Handler>

08002d0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0a:	e7fe      	b.n	8002d0a <BusFault_Handler>

08002d0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d0c:	e7fe      	b.n	8002d0c <UsageFault_Handler>

08002d0e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d0e:	4770      	bx	lr

08002d10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d12:	4802      	ldr	r0, [pc, #8]	; (8002d1c <TIM3_IRQHandler+0xc>)
 8002d14:	f002 fa32 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d18:	bd08      	pop	{r3, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000a64 	.word	0x20000a64

08002d20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d22:	4802      	ldr	r0, [pc, #8]	; (8002d2c <TIM4_IRQHandler+0xc>)
 8002d24:	f002 fa2a 	bl	800517c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d28:	bd08      	pop	{r3, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000f20 	.word	0x20000f20

08002d30 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002d30:	2001      	movs	r0, #1
 8002d32:	4770      	bx	lr

08002d34 <_kill>:

int _kill(int pid, int sig)
{
 8002d34:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d36:	f005 fc4d 	bl	80085d4 <__errno>
 8002d3a:	2316      	movs	r3, #22
 8002d3c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <_exit>:

void _exit (int status)
{
 8002d44:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002d46:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4a:	f7ff fff3 	bl	8002d34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d4e:	e7fe      	b.n	8002d4e <_exit+0xa>

08002d50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	460c      	mov	r4, r1
 8002d54:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d56:	2500      	movs	r5, #0
 8002d58:	e006      	b.n	8002d68 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002d5a:	f3af 8000 	nop.w
 8002d5e:	4621      	mov	r1, r4
 8002d60:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002d66:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d68:	42b5      	cmp	r5, r6
 8002d6a:	dbf6      	blt.n	8002d5a <_read+0xa>
  }

  return len;
}
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}

08002d70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	460c      	mov	r4, r1
 8002d74:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d76:	2500      	movs	r5, #0
 8002d78:	e004      	b.n	8002d84 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002d7a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002d7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	3501      	adds	r5, #1
 8002d84:	42b5      	cmp	r5, r6
 8002d86:	dbf8      	blt.n	8002d7a <_write+0xa>
  }
  return len;
}
 8002d88:	4630      	mov	r0, r6
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}

08002d8c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	4770      	bx	lr

08002d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002d92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d96:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002d98:	2000      	movs	r0, #0
 8002d9a:	4770      	bx	lr

08002d9c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	4770      	bx	lr

08002da0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002da0:	2000      	movs	r0, #0
 8002da2:	4770      	bx	lr

08002da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da4:	b510      	push	{r4, lr}
 8002da6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <_sbrk+0x38>)
 8002daa:	490d      	ldr	r1, [pc, #52]	; (8002de0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dac:	480d      	ldr	r0, [pc, #52]	; (8002de4 <_sbrk+0x40>)
 8002dae:	6800      	ldr	r0, [r0, #0]
 8002db0:	b140      	cbz	r0, 8002dc4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db2:	480c      	ldr	r0, [pc, #48]	; (8002de4 <_sbrk+0x40>)
 8002db4:	6800      	ldr	r0, [r0, #0]
 8002db6:	4403      	add	r3, r0
 8002db8:	1a52      	subs	r2, r2, r1
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d806      	bhi.n	8002dcc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <_sbrk+0x40>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002dc2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002dc4:	4807      	ldr	r0, [pc, #28]	; (8002de4 <_sbrk+0x40>)
 8002dc6:	4c08      	ldr	r4, [pc, #32]	; (8002de8 <_sbrk+0x44>)
 8002dc8:	6004      	str	r4, [r0, #0]
 8002dca:	e7f2      	b.n	8002db2 <_sbrk+0xe>
    errno = ENOMEM;
 8002dcc:	f005 fc02 	bl	80085d4 <__errno>
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	e7f3      	b.n	8002dc2 <_sbrk+0x1e>
 8002dda:	bf00      	nop
 8002ddc:	20005000 	.word	0x20005000
 8002de0:	00000400 	.word	0x00000400
 8002de4:	20000f68 	.word	0x20000f68
 8002de8:	20002db0 	.word	0x20002db0

08002dec <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dec:	4770      	bx	lr
	...

08002df0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8002df0:	f7ff fffc 	bl	8002dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df4:	480b      	ldr	r0, [pc, #44]	; (8002e24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002df6:	490c      	ldr	r1, [pc, #48]	; (8002e28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002df8:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dfc:	e002      	b.n	8002e04 <LoopCopyDataInit>

08002dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e02:	3304      	adds	r3, #4

08002e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e08:	d3f9      	bcc.n	8002dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e0c:	4c09      	ldr	r4, [pc, #36]	; (8002e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e10:	e001      	b.n	8002e16 <LoopFillZerobss>

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e14:	3204      	adds	r2, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e1a:	f005 fbe1 	bl	80085e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e1e:	f7fe fa33 	bl	8001288 <main>
  bx lr
 8002e22:	4770      	bx	lr
  ldr r0, =_sdata
 8002e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e28:	20000824 	.word	0x20000824
  ldr r2, =_sidata
 8002e2c:	0800a0cc 	.word	0x0800a0cc
  ldr r2, =_sbss
 8002e30:	20000824 	.word	0x20000824
  ldr r4, =_ebss
 8002e34:	20002dac 	.word	0x20002dac

08002e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e38:	e7fe      	b.n	8002e38 <ADC1_2_IRQHandler>
	...

08002e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e3e:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <HAL_Init+0x20>)
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	f043 0310 	orr.w	r3, r3, #16
 8002e46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e48:	2003      	movs	r0, #3
 8002e4a:	f000 fb17 	bl	800347c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e4e:	200f      	movs	r0, #15
 8002e50:	f7ff ff02 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e54:	f7ff fdc2 	bl	80029dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002e58:	2000      	movs	r0, #0
 8002e5a:	bd08      	pop	{r3, pc}
 8002e5c:	40022000 	.word	0x40022000

08002e60 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002e60:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <HAL_IncTick+0x10>)
 8002e62:	6811      	ldr	r1, [r2, #0]
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_IncTick+0x14>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	440b      	add	r3, r1
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000f6c 	.word	0x20000f6c
 8002e74:	200007bd 	.word	0x200007bd

08002e78 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e78:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <HAL_GetTick+0x8>)
 8002e7a:	6818      	ldr	r0, [r3, #0]
}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000f6c 	.word	0x20000f6c

08002e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff fff6 	bl	8002e78 <HAL_GetTick>
 8002e8c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002e92:	d002      	beq.n	8002e9a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HAL_Delay+0x24>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9a:	f7ff ffed 	bl	8002e78 <HAL_GetTick>
 8002e9e:	1b40      	subs	r0, r0, r5
 8002ea0:	42a0      	cmp	r0, r4
 8002ea2:	d3fa      	bcc.n	8002e9a <HAL_Delay+0x16>
  {
  }
}
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200007bd 	.word	0x200007bd

08002eac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002eb8:	f7ff ffde 	bl	8002e78 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002ec4:	d123      	bne.n	8002f0e <HAL_ADC_PollForConversion+0x62>
 8002ec6:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002ece:	d103      	bne.n	8002ed8 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ed2:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8002ed6:	d029      	beq.n	8002f2c <HAL_ADC_PollForConversion+0x80>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ed8:	4b50      	ldr	r3, [pc, #320]	; (800301c <HAL_ADC_PollForConversion+0x170>)
 8002eda:	681e      	ldr	r6, [r3, #0]
 8002edc:	2002      	movs	r0, #2
 8002ede:	f001 fc11 	bl	8004704 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ee2:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002ee6:	682b      	ldr	r3, [r5, #0]
 8002ee8:	6919      	ldr	r1, [r3, #16]
 8002eea:	4a4d      	ldr	r2, [pc, #308]	; (8003020 <HAL_ADC_PollForConversion+0x174>)
 8002eec:	4211      	tst	r1, r2
 8002eee:	d136      	bne.n	8002f5e <HAL_ADC_PollForConversion+0xb2>
 8002ef0:	68d9      	ldr	r1, [r3, #12]
 8002ef2:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8002ef6:	4211      	tst	r1, r2
 8002ef8:	d131      	bne.n	8002f5e <HAL_ADC_PollForConversion+0xb2>
 8002efa:	6919      	ldr	r1, [r3, #16]
 8002efc:	4a49      	ldr	r2, [pc, #292]	; (8003024 <HAL_ADC_PollForConversion+0x178>)
 8002efe:	4211      	tst	r1, r2
 8002f00:	d140      	bne.n	8002f84 <HAL_ADC_PollForConversion+0xd8>
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_ADC_PollForConversion+0x17c>)
 8002f06:	421a      	tst	r2, r3
 8002f08:	d03e      	beq.n	8002f88 <HAL_ADC_PollForConversion+0xdc>
 8002f0a:	2329      	movs	r3, #41	; 0x29
 8002f0c:	e041      	b.n	8002f92 <HAL_ADC_PollForConversion+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002f16:	2300      	movs	r3, #0
 8002f18:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 8002f1c:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8002f1e:	b003      	add	sp, #12
 8002f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f22:	682b      	ldr	r3, [r5, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f013 0f02 	tst.w	r3, #2
 8002f2a:	d00f      	beq.n	8002f4c <HAL_ADC_PollForConversion+0xa0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f013 0f02 	tst.w	r3, #2
 8002f34:	d14f      	bne.n	8002fd6 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 8002f36:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002f3a:	d0f7      	beq.n	8002f2c <HAL_ADC_PollForConversion+0x80>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f3c:	2c00      	cmp	r4, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_ADC_PollForConversion+0x76>
 8002f40:	f7ff ff9a 	bl	8002e78 <HAL_GetTick>
 8002f44:	1bc3      	subs	r3, r0, r7
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	d9f0      	bls.n	8002f2c <HAL_ADC_PollForConversion+0x80>
 8002f4a:	e7ea      	b.n	8002f22 <HAL_ADC_PollForConversion+0x76>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002f54:	2300      	movs	r3, #0
 8002f56:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 8002f5a:	2003      	movs	r0, #3
 8002f5c:	e7df      	b.n	8002f1e <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002f5e:	6919      	ldr	r1, [r3, #16]
 8002f60:	4a30      	ldr	r2, [pc, #192]	; (8003024 <HAL_ADC_PollForConversion+0x178>)
 8002f62:	4211      	tst	r1, r2
 8002f64:	d104      	bne.n	8002f70 <HAL_ADC_PollForConversion+0xc4>
 8002f66:	68d9      	ldr	r1, [r3, #12]
 8002f68:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002f6c:	4211      	tst	r1, r2
 8002f6e:	d00d      	beq.n	8002f8c <HAL_ADC_PollForConversion+0xe0>
 8002f70:	6919      	ldr	r1, [r3, #16]
 8002f72:	4a2e      	ldr	r2, [pc, #184]	; (800302c <HAL_ADC_PollForConversion+0x180>)
 8002f74:	400a      	ands	r2, r1
 8002f76:	b95a      	cbnz	r2, 8002f90 <HAL_ADC_PollForConversion+0xe4>
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_ADC_PollForConversion+0x180>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b15b      	cbz	r3, 8002f98 <HAL_ADC_PollForConversion+0xec>
 8002f80:	23fc      	movs	r3, #252	; 0xfc
 8002f82:	e006      	b.n	8002f92 <HAL_ADC_PollForConversion+0xe6>
 8002f84:	2329      	movs	r3, #41	; 0x29
 8002f86:	e004      	b.n	8002f92 <HAL_ADC_PollForConversion+0xe6>
 8002f88:	2314      	movs	r3, #20
 8002f8a:	e002      	b.n	8002f92 <HAL_ADC_PollForConversion+0xe6>
 8002f8c:	2354      	movs	r3, #84	; 0x54
 8002f8e:	e000      	b.n	8002f92 <HAL_ADC_PollForConversion+0xe6>
 8002f90:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002f92:	fb03 f606 	mul.w	r6, r3, r6
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f96:	e007      	b.n	8002fa8 <HAL_ADC_PollForConversion+0xfc>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002f98:	2354      	movs	r3, #84	; 0x54
 8002f9a:	e7fa      	b.n	8002f92 <HAL_ADC_PollForConversion+0xe6>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f9c:	9b01      	ldr	r3, [sp, #4]
 8002f9e:	42b3      	cmp	r3, r6
 8002fa0:	d310      	bcc.n	8002fc4 <HAL_ADC_PollForConversion+0x118>
      Conversion_Timeout_CPU_cycles ++;
 8002fa2:	9b01      	ldr	r3, [sp, #4]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fa8:	9b01      	ldr	r3, [sp, #4]
 8002faa:	42b3      	cmp	r3, r6
 8002fac:	d213      	bcs.n	8002fd6 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 8002fae:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002fb2:	d0f6      	beq.n	8002fa2 <HAL_ADC_PollForConversion+0xf6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fb4:	2c00      	cmp	r4, #0
 8002fb6:	d0f1      	beq.n	8002f9c <HAL_ADC_PollForConversion+0xf0>
 8002fb8:	f7ff ff5e 	bl	8002e78 <HAL_GetTick>
 8002fbc:	1bc0      	subs	r0, r0, r7
 8002fbe:	42a0      	cmp	r0, r4
 8002fc0:	d9ef      	bls.n	8002fa2 <HAL_ADC_PollForConversion+0xf6>
 8002fc2:	e7eb      	b.n	8002f9c <HAL_ADC_PollForConversion+0xf0>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 8002fd2:	2003      	movs	r0, #3
 8002fd4:	e7a3      	b.n	8002f1e <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	f06f 0212 	mvn.w	r2, #18
 8002fdc:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fde:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe4:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002fe6:	682b      	ldr	r3, [r5, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ff2:	d001      	beq.n	8002ff8 <HAL_ADC_PollForConversion+0x14c>
  return HAL_OK;
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e792      	b.n	8002f1e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ff8:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ffa:	b960      	cbnz	r0, 8003016 <HAL_ADC_PollForConversion+0x16a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ffc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003002:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003004:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003006:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800300a:	d188      	bne.n	8002f1e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800300c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	62ab      	str	r3, [r5, #40]	; 0x28
 8003014:	e783      	b.n	8002f1e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8003016:	2000      	movs	r0, #0
 8003018:	e781      	b.n	8002f1e <HAL_ADC_PollForConversion+0x72>
 800301a:	bf00      	nop
 800301c:	20000020 	.word	0x20000020
 8003020:	24924924 	.word	0x24924924
 8003024:	12492492 	.word	0x12492492
 8003028:	00492492 	.word	0x00492492
 800302c:	00249249 	.word	0x00249249

08003030 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003030:	6803      	ldr	r3, [r0, #0]
 8003032:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8003034:	4770      	bx	lr
	...

08003038 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003038:	b430      	push	{r4, r5}
 800303a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800303c:	2200      	movs	r2, #0
 800303e:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003040:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8003044:	2a01      	cmp	r2, #1
 8003046:	f000 808f 	beq.w	8003168 <HAL_ADC_ConfigChannel+0x130>
 800304a:	4603      	mov	r3, r0
 800304c:	2201      	movs	r2, #1
 800304e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003052:	684a      	ldr	r2, [r1, #4]
 8003054:	2a06      	cmp	r2, #6
 8003056:	d82d      	bhi.n	80030b4 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003058:	6804      	ldr	r4, [r0, #0]
 800305a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800305c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003060:	3a05      	subs	r2, #5
 8003062:	f04f 0c1f 	mov.w	ip, #31
 8003066:	fa0c fc02 	lsl.w	ip, ip, r2
 800306a:	ea20 000c 	bic.w	r0, r0, ip
 800306e:	680d      	ldr	r5, [r1, #0]
 8003070:	fa05 f202 	lsl.w	r2, r5, r2
 8003074:	4302      	orrs	r2, r0
 8003076:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003078:	680a      	ldr	r2, [r1, #0]
 800307a:	2a09      	cmp	r2, #9
 800307c:	d938      	bls.n	80030f0 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800307e:	681c      	ldr	r4, [r3, #0]
 8003080:	68e0      	ldr	r0, [r4, #12]
 8003082:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003086:	3a1e      	subs	r2, #30
 8003088:	f04f 0c07 	mov.w	ip, #7
 800308c:	fa0c fc02 	lsl.w	ip, ip, r2
 8003090:	ea20 000c 	bic.w	r0, r0, ip
 8003094:	688d      	ldr	r5, [r1, #8]
 8003096:	fa05 f202 	lsl.w	r2, r5, r2
 800309a:	4302      	orrs	r2, r0
 800309c:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800309e:	680a      	ldr	r2, [r1, #0]
 80030a0:	3a10      	subs	r2, #16
 80030a2:	2a01      	cmp	r2, #1
 80030a4:	d934      	bls.n	8003110 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a6:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80030ae:	b002      	add	sp, #8
 80030b0:	bc30      	pop	{r4, r5}
 80030b2:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80030b4:	2a0c      	cmp	r2, #12
 80030b6:	d80d      	bhi.n	80030d4 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80030b8:	6805      	ldr	r5, [r0, #0]
 80030ba:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80030bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030c0:	3a23      	subs	r2, #35	; 0x23
 80030c2:	241f      	movs	r4, #31
 80030c4:	4094      	lsls	r4, r2
 80030c6:	ea20 0004 	bic.w	r0, r0, r4
 80030ca:	680c      	ldr	r4, [r1, #0]
 80030cc:	4094      	lsls	r4, r2
 80030ce:	4320      	orrs	r0, r4
 80030d0:	6328      	str	r0, [r5, #48]	; 0x30
 80030d2:	e7d1      	b.n	8003078 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030d4:	6805      	ldr	r5, [r0, #0]
 80030d6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80030d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030dc:	3a41      	subs	r2, #65	; 0x41
 80030de:	241f      	movs	r4, #31
 80030e0:	4094      	lsls	r4, r2
 80030e2:	ea20 0004 	bic.w	r0, r0, r4
 80030e6:	680c      	ldr	r4, [r1, #0]
 80030e8:	4094      	lsls	r4, r2
 80030ea:	4320      	orrs	r0, r4
 80030ec:	62e8      	str	r0, [r5, #44]	; 0x2c
 80030ee:	e7c3      	b.n	8003078 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030f0:	681c      	ldr	r4, [r3, #0]
 80030f2:	6920      	ldr	r0, [r4, #16]
 80030f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80030f8:	f04f 0c07 	mov.w	ip, #7
 80030fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8003100:	ea20 000c 	bic.w	r0, r0, ip
 8003104:	688d      	ldr	r5, [r1, #8]
 8003106:	fa05 f202 	lsl.w	r2, r5, r2
 800310a:	4302      	orrs	r2, r0
 800310c:	6122      	str	r2, [r4, #16]
 800310e:	e7c6      	b.n	800309e <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4816      	ldr	r0, [pc, #88]	; (800316c <HAL_ADC_ConfigChannel+0x134>)
 8003114:	4282      	cmp	r2, r0
 8003116:	d005      	beq.n	8003124 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8003120:	2001      	movs	r0, #1
 8003122:	e7c1      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003124:	6890      	ldr	r0, [r2, #8]
 8003126:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800312a:	d11b      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800312c:	6890      	ldr	r0, [r2, #8]
 800312e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003132:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003134:	680a      	ldr	r2, [r1, #0]
 8003136:	2a10      	cmp	r2, #16
 8003138:	d001      	beq.n	800313e <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313a:	2000      	movs	r0, #0
 800313c:	e7b4      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <HAL_ADC_ConfigChannel+0x138>)
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	490c      	ldr	r1, [pc, #48]	; (8003174 <HAL_ADC_ConfigChannel+0x13c>)
 8003144:	fba1 1202 	umull	r1, r2, r1, r2
 8003148:	0c92      	lsrs	r2, r2, #18
 800314a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800314e:	0052      	lsls	r2, r2, #1
 8003150:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003152:	e002      	b.n	800315a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8003154:	9a01      	ldr	r2, [sp, #4]
 8003156:	3a01      	subs	r2, #1
 8003158:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800315a:	9a01      	ldr	r2, [sp, #4]
 800315c:	2a00      	cmp	r2, #0
 800315e:	d1f9      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003160:	2000      	movs	r0, #0
 8003162:	e7a1      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x70>
 8003164:	2000      	movs	r0, #0
 8003166:	e79f      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003168:	2002      	movs	r0, #2
 800316a:	e7a0      	b.n	80030ae <HAL_ADC_ConfigChannel+0x76>
 800316c:	40012400 	.word	0x40012400
 8003170:	20000020 	.word	0x20000020
 8003174:	431bde83 	.word	0x431bde83

08003178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003178:	b530      	push	{r4, r5, lr}
 800317a:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003180:	6803      	ldr	r3, [r0, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	f012 0f01 	tst.w	r2, #1
 8003188:	d133      	bne.n	80031f2 <ADC_Enable+0x7a>
 800318a:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003194:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <ADC_Enable+0x80>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <ADC_Enable+0x84>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0c9b      	lsrs	r3, r3, #18
 80031a0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80031a2:	e002      	b.n	80031aa <ADC_Enable+0x32>
    {
      wait_loop_index--;
 80031a4:	9b01      	ldr	r3, [sp, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80031aa:	9b01      	ldr	r3, [sp, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f9      	bne.n	80031a4 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031b0:	f7ff fe62 	bl	8002e78 <HAL_GetTick>
 80031b4:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f013 0f01 	tst.w	r3, #1
 80031be:	d116      	bne.n	80031ee <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031c0:	f7ff fe5a 	bl	8002e78 <HAL_GetTick>
 80031c4:	1b43      	subs	r3, r0, r5
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d9f5      	bls.n	80031b6 <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f013 0f01 	tst.w	r3, #1
 80031d2:	d1f0      	bne.n	80031b6 <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031d6:	f043 0310 	orr.w	r3, r3, #16
 80031da:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	62e3      	str	r3, [r4, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031e4:	2300      	movs	r3, #0
 80031e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

          return HAL_ERROR;
 80031ea:	2001      	movs	r0, #1
 80031ec:	e002      	b.n	80031f4 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031ee:	2000      	movs	r0, #0
 80031f0:	e000      	b.n	80031f4 <ADC_Enable+0x7c>
 80031f2:	2000      	movs	r0, #0
}
 80031f4:	b003      	add	sp, #12
 80031f6:	bd30      	pop	{r4, r5, pc}
 80031f8:	20000020 	.word	0x20000020
 80031fc:	431bde83 	.word	0x431bde83

08003200 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8003200:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8003204:	2b01      	cmp	r3, #1
 8003206:	d068      	beq.n	80032da <HAL_ADC_Start+0xda>
{
 8003208:	b510      	push	{r4, lr}
 800320a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800320c:	2301      	movs	r3, #1
 800320e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8003212:	f7ff ffb1 	bl	8003178 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8003216:	2800      	cmp	r0, #0
 8003218:	d15b      	bne.n	80032d2 <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 800321a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800321c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <HAL_ADC_Start+0xe0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d027      	beq.n	8003282 <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003232:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003234:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003238:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003240:	d005      	beq.n	800324e <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003242:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003244:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003248:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800324c:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800324e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003250:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003254:	d02b      	beq.n	80032ae <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003256:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003258:	f022 0206 	bic.w	r2, r2, #6
 800325c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800325e:	2200      	movs	r2, #0
 8003260:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003264:	f06f 0202 	mvn.w	r2, #2
 8003268:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003272:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003276:	d01d      	beq.n	80032b4 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e02a      	b.n	80032d8 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003282:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003286:	6852      	ldr	r2, [r2, #4]
 8003288:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800328c:	d0d1      	beq.n	8003232 <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800328e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003290:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003294:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <HAL_ADC_Start+0xe4>)
 8003298:	6852      	ldr	r2, [r2, #4]
 800329a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800329e:	d0d6      	beq.n	800324e <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032a2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80032a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032aa:	62a2      	str	r2, [r4, #40]	; 0x28
 80032ac:	e7cf      	b.n	800324e <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 80032ae:	2200      	movs	r2, #0
 80032b0:	62e2      	str	r2, [r4, #44]	; 0x2c
 80032b2:	e7d4      	b.n	800325e <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_ADC_Start+0xe0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	e009      	b.n	80032d8 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80032c4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80032c8:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80032ca:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80032ce:	d1d3      	bne.n	8003278 <HAL_ADC_Start+0x78>
 80032d0:	e7f3      	b.n	80032ba <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 80032d2:	2300      	movs	r3, #0
 80032d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80032d8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80032da:	2002      	movs	r0, #2
}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40012800 	.word	0x40012800
 80032e4:	40012400 	.word	0x40012400

080032e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032e8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032ea:	6803      	ldr	r3, [r0, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	f012 0f01 	tst.w	r2, #1
 80032f2:	d101      	bne.n	80032f8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032f4:	2000      	movs	r0, #0
}
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003302:	f7ff fdb9 	bl	8002e78 <HAL_GetTick>
 8003306:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f013 0f01 	tst.w	r3, #1
 8003310:	d013      	beq.n	800333a <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003312:	f7ff fdb1 	bl	8002e78 <HAL_GetTick>
 8003316:	1b43      	subs	r3, r0, r5
 8003318:	2b02      	cmp	r3, #2
 800331a:	d9f5      	bls.n	8003308 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f013 0f01 	tst.w	r3, #1
 8003324:	d0f0      	beq.n	8003308 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003326:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003328:	f043 0310 	orr.w	r3, r3, #16
 800332c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8003336:	2001      	movs	r0, #1
 8003338:	e7dd      	b.n	80032f6 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800333a:	2000      	movs	r0, #0
 800333c:	e7db      	b.n	80032f6 <ADC_ConversionStop_Disable+0xe>
	...

08003340 <HAL_ADC_Init>:
  if(hadc == NULL)
 8003340:	2800      	cmp	r0, #0
 8003342:	d07b      	beq.n	800343c <HAL_ADC_Init+0xfc>
{
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003348:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04d      	beq.n	80033ea <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800334e:	4620      	mov	r0, r4
 8003350:	f7ff ffca 	bl	80032e8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003354:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003356:	f013 0310 	ands.w	r3, r3, #16
 800335a:	d169      	bne.n	8003430 <HAL_ADC_Init+0xf0>
 800335c:	2800      	cmp	r0, #0
 800335e:	d167      	bne.n	8003430 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8003360:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003362:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003366:	f022 0202 	bic.w	r2, r2, #2
 800336a:	f042 0202 	orr.w	r2, r2, #2
 800336e:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003370:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003372:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003374:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003376:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003378:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800337c:	68a5      	ldr	r5, [r4, #8]
 800337e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003382:	d002      	beq.n	800338a <HAL_ADC_Init+0x4a>
 8003384:	2d01      	cmp	r5, #1
 8003386:	d036      	beq.n	80033f6 <HAL_ADC_Init+0xb6>
 8003388:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800338a:	7d26      	ldrb	r6, [r4, #20]
 800338c:	2e01      	cmp	r6, #1
 800338e:	d035      	beq.n	80033fc <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8003390:	6826      	ldr	r6, [r4, #0]
 8003392:	6871      	ldr	r1, [r6, #4]
 8003394:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8003398:	4329      	orrs	r1, r5
 800339a:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800339c:	6825      	ldr	r5, [r4, #0]
 800339e:	68ae      	ldr	r6, [r5, #8]
 80033a0:	4927      	ldr	r1, [pc, #156]	; (8003440 <HAL_ADC_Init+0x100>)
 80033a2:	4031      	ands	r1, r6
 80033a4:	4311      	orrs	r1, r2
 80033a6:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80033a8:	68a1      	ldr	r1, [r4, #8]
 80033aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80033ae:	d001      	beq.n	80033b4 <HAL_ADC_Init+0x74>
 80033b0:	2901      	cmp	r1, #1
 80033b2:	d102      	bne.n	80033ba <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80033ba:	6825      	ldr	r5, [r4, #0]
 80033bc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80033be:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80033c2:	430b      	orrs	r3, r1
 80033c4:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_ADC_Init+0x104>)
 80033cc:	400b      	ands	r3, r1
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d025      	beq.n	800341e <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80033d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80033d4:	f023 0312 	bic.w	r3, r3, #18
 80033d8:	f043 0310 	orr.w	r3, r3, #16
 80033dc:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80033e6:	2001      	movs	r0, #1
 80033e8:	e027      	b.n	800343a <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 80033ea:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80033ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80033f0:	f7ff fb1e 	bl	8002a30 <HAL_ADC_MspInit>
 80033f4:	e7ab      	b.n	800334e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80033f6:	f44f 7580 	mov.w	r5, #256	; 0x100
 80033fa:	e7c6      	b.n	800338a <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033fc:	b931      	cbnz	r1, 800340c <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80033fe:	69a1      	ldr	r1, [r4, #24]
 8003400:	3901      	subs	r1, #1
 8003402:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8003406:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 800340a:	e7c1      	b.n	8003390 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800340e:	f041 0120 	orr.w	r1, r1, #32
 8003412:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003414:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003416:	f041 0101 	orr.w	r1, r1, #1
 800341a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800341c:	e7b8      	b.n	8003390 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800341e:	2300      	movs	r3, #0
 8003420:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003422:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003424:	f023 0303 	bic.w	r3, r3, #3
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	62a3      	str	r3, [r4, #40]	; 0x28
 800342e:	e004      	b.n	800343a <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003430:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003432:	f043 0310 	orr.w	r3, r3, #16
 8003436:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003438:	2001      	movs	r0, #1
}
 800343a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800343c:	2001      	movs	r0, #1
}
 800343e:	4770      	bx	lr
 8003440:	ffe1f7fd 	.word	0xffe1f7fd
 8003444:	ff1f0efe 	.word	0xff1f0efe

08003448 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003448:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800344c:	2b01      	cmp	r3, #1
 800344e:	d013      	beq.n	8003478 <HAL_ADC_Stop+0x30>
{
 8003450:	b510      	push	{r4, lr}
 8003452:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003454:	2301      	movs	r3, #1
 8003456:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800345a:	f7ff ff45 	bl	80032e8 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800345e:	b938      	cbnz	r0, 8003470 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8003460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003462:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8003470:	2300      	movs	r3, #0
 8003472:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003476:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8003478:	2002      	movs	r0, #2
}
 800347a:	4770      	bx	lr

0800347c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800347e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003480:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003488:	0200      	lsls	r0, r0, #8
 800348a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800348e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003498:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a2:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_NVIC_SetPriority+0x68>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034aa:	f1c3 0c07 	rsb	ip, r3, #7
 80034ae:	f1bc 0f04 	cmp.w	ip, #4
 80034b2:	bf28      	it	cs
 80034b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b8:	f103 0e04 	add.w	lr, r3, #4
 80034bc:	f1be 0f06 	cmp.w	lr, #6
 80034c0:	d918      	bls.n	80034f4 <HAL_NVIC_SetPriority+0x54>
 80034c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	f04f 3eff 	mov.w	lr, #4294967295
 80034c8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80034cc:	ea21 010c 	bic.w	r1, r1, ip
 80034d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d2:	fa0e fe03 	lsl.w	lr, lr, r3
 80034d6:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034da:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80034dc:	2800      	cmp	r0, #0
 80034de:	db0b      	blt.n	80034f8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e0:	0112      	lsls	r2, r2, #4
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80034e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80034ec:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80034f0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f4:	2300      	movs	r3, #0
 80034f6:	e7e5      	b.n	80034c4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f8:	f000 000f 	and.w	r0, r0, #15
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	4b02      	ldr	r3, [pc, #8]	; (800350c <HAL_NVIC_SetPriority+0x6c>)
 8003502:	541a      	strb	r2, [r3, r0]
 8003504:	e7f4      	b.n	80034f0 <HAL_NVIC_SetPriority+0x50>
 8003506:	bf00      	nop
 8003508:	e000ed00 	.word	0xe000ed00
 800350c:	e000ed14 	.word	0xe000ed14

08003510 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003510:	2800      	cmp	r0, #0
 8003512:	db07      	blt.n	8003524 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003514:	f000 021f 	and.w	r2, r0, #31
 8003518:	0940      	lsrs	r0, r0, #5
 800351a:	2301      	movs	r3, #1
 800351c:	4093      	lsls	r3, r2
 800351e:	4a02      	ldr	r2, [pc, #8]	; (8003528 <HAL_NVIC_EnableIRQ+0x18>)
 8003520:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003530:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8003532:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003534:	e0a6      	b.n	8003684 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003536:	4d80      	ldr	r5, [pc, #512]	; (8003738 <HAL_GPIO_Init+0x20c>)
 8003538:	42ab      	cmp	r3, r5
 800353a:	d010      	beq.n	800355e <HAL_GPIO_Init+0x32>
 800353c:	d907      	bls.n	800354e <HAL_GPIO_Init+0x22>
 800353e:	4d7f      	ldr	r5, [pc, #508]	; (800373c <HAL_GPIO_Init+0x210>)
 8003540:	42ab      	cmp	r3, r5
 8003542:	d00c      	beq.n	800355e <HAL_GPIO_Init+0x32>
 8003544:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8003548:	42ab      	cmp	r3, r5
 800354a:	d008      	beq.n	800355e <HAL_GPIO_Init+0x32>
 800354c:	e013      	b.n	8003576 <HAL_GPIO_Init+0x4a>
 800354e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003552:	42ab      	cmp	r3, r5
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x32>
 8003556:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 800355a:	42ab      	cmp	r3, r5
 800355c:	d107      	bne.n	800356e <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800355e:	688b      	ldr	r3, [r1, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d058      	beq.n	8003616 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003564:	2b01      	cmp	r3, #1
 8003566:	d051      	beq.n	800360c <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8003568:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800356a:	2408      	movs	r4, #8
 800356c:	e003      	b.n	8003576 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800356e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003572:	42ab      	cmp	r3, r5
 8003574:	d0f3      	beq.n	800355e <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003576:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800357a:	d84e      	bhi.n	800361a <HAL_GPIO_Init+0xee>
 800357c:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800357e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8003582:	d84c      	bhi.n	800361e <HAL_GPIO_Init+0xf2>
 8003584:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003588:	6833      	ldr	r3, [r6, #0]
 800358a:	250f      	movs	r5, #15
 800358c:	4095      	lsls	r5, r2
 800358e:	ea23 0305 	bic.w	r3, r3, r5
 8003592:	fa04 f202 	lsl.w	r2, r4, r2
 8003596:	4313      	orrs	r3, r2
 8003598:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800359a:	684b      	ldr	r3, [r1, #4]
 800359c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80035a0:	d06e      	beq.n	8003680 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035a2:	4b67      	ldr	r3, [pc, #412]	; (8003740 <HAL_GPIO_Init+0x214>)
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	619a      	str	r2, [r3, #24]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80035b6:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80035ba:	1c95      	adds	r5, r2, #2
 80035bc:	4b61      	ldr	r3, [pc, #388]	; (8003744 <HAL_GPIO_Init+0x218>)
 80035be:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035c2:	f00c 0503 	and.w	r5, ip, #3
 80035c6:	00ad      	lsls	r5, r5, #2
 80035c8:	230f      	movs	r3, #15
 80035ca:	40ab      	lsls	r3, r5
 80035cc:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035d0:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_GPIO_Init+0x21c>)
 80035d2:	4298      	cmp	r0, r3
 80035d4:	d029      	beq.n	800362a <HAL_GPIO_Init+0xfe>
 80035d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035da:	4298      	cmp	r0, r3
 80035dc:	f000 808e 	beq.w	80036fc <HAL_GPIO_Init+0x1d0>
 80035e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035e4:	4298      	cmp	r0, r3
 80035e6:	f000 808b 	beq.w	8003700 <HAL_GPIO_Init+0x1d4>
 80035ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035ee:	4298      	cmp	r0, r3
 80035f0:	d019      	beq.n	8003626 <HAL_GPIO_Init+0xfa>
 80035f2:	2304      	movs	r3, #4
 80035f4:	e01a      	b.n	800362c <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035f6:	68cc      	ldr	r4, [r1, #12]
          break;
 80035f8:	e7bd      	b.n	8003576 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035fa:	68cc      	ldr	r4, [r1, #12]
 80035fc:	3404      	adds	r4, #4
          break;
 80035fe:	e7ba      	b.n	8003576 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003600:	68cc      	ldr	r4, [r1, #12]
 8003602:	3408      	adds	r4, #8
          break;
 8003604:	e7b7      	b.n	8003576 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003606:	68cc      	ldr	r4, [r1, #12]
 8003608:	340c      	adds	r4, #12
          break;
 800360a:	e7b4      	b.n	8003576 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 800360c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800360e:	2408      	movs	r4, #8
 8003610:	e7b1      	b.n	8003576 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003612:	2400      	movs	r4, #0
 8003614:	e7af      	b.n	8003576 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003616:	2404      	movs	r4, #4
 8003618:	e7ad      	b.n	8003576 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800361a:	1d06      	adds	r6, r0, #4
 800361c:	e7af      	b.n	800357e <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800361e:	f1ac 0208 	sub.w	r2, ip, #8
 8003622:	0092      	lsls	r2, r2, #2
 8003624:	e7b0      	b.n	8003588 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003626:	2303      	movs	r3, #3
 8003628:	e000      	b.n	800362c <HAL_GPIO_Init+0x100>
 800362a:	2300      	movs	r3, #0
 800362c:	40ab      	lsls	r3, r5
 800362e:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8003630:	3202      	adds	r2, #2
 8003632:	4d44      	ldr	r5, [pc, #272]	; (8003744 <HAL_GPIO_Init+0x218>)
 8003634:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003638:	684b      	ldr	r3, [r1, #4]
 800363a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800363e:	d061      	beq.n	8003704 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003640:	4a42      	ldr	r2, [pc, #264]	; (800374c <HAL_GPIO_Init+0x220>)
 8003642:	6893      	ldr	r3, [r2, #8]
 8003644:	ea43 030e 	orr.w	r3, r3, lr
 8003648:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800364a:	684b      	ldr	r3, [r1, #4]
 800364c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003650:	d05e      	beq.n	8003710 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003652:	4a3e      	ldr	r2, [pc, #248]	; (800374c <HAL_GPIO_Init+0x220>)
 8003654:	68d3      	ldr	r3, [r2, #12]
 8003656:	ea43 030e 	orr.w	r3, r3, lr
 800365a:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800365c:	684b      	ldr	r3, [r1, #4]
 800365e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003662:	d05b      	beq.n	800371c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003664:	4a39      	ldr	r2, [pc, #228]	; (800374c <HAL_GPIO_Init+0x220>)
 8003666:	6853      	ldr	r3, [r2, #4]
 8003668:	ea43 030e 	orr.w	r3, r3, lr
 800366c:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800366e:	684b      	ldr	r3, [r1, #4]
 8003670:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003674:	d058      	beq.n	8003728 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003676:	4a35      	ldr	r2, [pc, #212]	; (800374c <HAL_GPIO_Init+0x220>)
 8003678:	6813      	ldr	r3, [r2, #0]
 800367a:	ea43 030e 	orr.w	r3, r3, lr
 800367e:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8003680:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003684:	680b      	ldr	r3, [r1, #0]
 8003686:	fa33 f20c 	lsrs.w	r2, r3, ip
 800368a:	d053      	beq.n	8003734 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 800368c:	2201      	movs	r2, #1
 800368e:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003692:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8003696:	ea32 0303 	bics.w	r3, r2, r3
 800369a:	d1f1      	bne.n	8003680 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 800369c:	684b      	ldr	r3, [r1, #4]
 800369e:	2b12      	cmp	r3, #18
 80036a0:	f63f af49 	bhi.w	8003536 <HAL_GPIO_Init+0xa>
 80036a4:	2b12      	cmp	r3, #18
 80036a6:	f63f af66 	bhi.w	8003576 <HAL_GPIO_Init+0x4a>
 80036aa:	a501      	add	r5, pc, #4	; (adr r5, 80036b0 <HAL_GPIO_Init+0x184>)
 80036ac:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80036b0:	0800355f 	.word	0x0800355f
 80036b4:	080035f7 	.word	0x080035f7
 80036b8:	08003601 	.word	0x08003601
 80036bc:	08003613 	.word	0x08003613
 80036c0:	08003577 	.word	0x08003577
 80036c4:	08003577 	.word	0x08003577
 80036c8:	08003577 	.word	0x08003577
 80036cc:	08003577 	.word	0x08003577
 80036d0:	08003577 	.word	0x08003577
 80036d4:	08003577 	.word	0x08003577
 80036d8:	08003577 	.word	0x08003577
 80036dc:	08003577 	.word	0x08003577
 80036e0:	08003577 	.word	0x08003577
 80036e4:	08003577 	.word	0x08003577
 80036e8:	08003577 	.word	0x08003577
 80036ec:	08003577 	.word	0x08003577
 80036f0:	08003577 	.word	0x08003577
 80036f4:	080035fb 	.word	0x080035fb
 80036f8:	08003607 	.word	0x08003607
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036fc:	2301      	movs	r3, #1
 80036fe:	e795      	b.n	800362c <HAL_GPIO_Init+0x100>
 8003700:	2302      	movs	r3, #2
 8003702:	e793      	b.n	800362c <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003704:	4a11      	ldr	r2, [pc, #68]	; (800374c <HAL_GPIO_Init+0x220>)
 8003706:	6893      	ldr	r3, [r2, #8]
 8003708:	ea23 030e 	bic.w	r3, r3, lr
 800370c:	6093      	str	r3, [r2, #8]
 800370e:	e79c      	b.n	800364a <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003710:	4a0e      	ldr	r2, [pc, #56]	; (800374c <HAL_GPIO_Init+0x220>)
 8003712:	68d3      	ldr	r3, [r2, #12]
 8003714:	ea23 030e 	bic.w	r3, r3, lr
 8003718:	60d3      	str	r3, [r2, #12]
 800371a:	e79f      	b.n	800365c <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800371c:	4a0b      	ldr	r2, [pc, #44]	; (800374c <HAL_GPIO_Init+0x220>)
 800371e:	6853      	ldr	r3, [r2, #4]
 8003720:	ea23 030e 	bic.w	r3, r3, lr
 8003724:	6053      	str	r3, [r2, #4]
 8003726:	e7a2      	b.n	800366e <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003728:	4a08      	ldr	r2, [pc, #32]	; (800374c <HAL_GPIO_Init+0x220>)
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	ea23 030e 	bic.w	r3, r3, lr
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e7a5      	b.n	8003680 <HAL_GPIO_Init+0x154>
  }
}
 8003734:	b002      	add	sp, #8
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	10220000 	.word	0x10220000
 800373c:	10310000 	.word	0x10310000
 8003740:	40021000 	.word	0x40021000
 8003744:	40010000 	.word	0x40010000
 8003748:	40010800 	.word	0x40010800
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003750:	6883      	ldr	r3, [r0, #8]
 8003752:	4219      	tst	r1, r3
 8003754:	d001      	beq.n	800375a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003756:	2001      	movs	r0, #1
 8003758:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800375a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800375c:	4770      	bx	lr

0800375e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800375e:	b10a      	cbz	r2, 8003764 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003760:	6101      	str	r1, [r0, #16]
 8003762:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003764:	0409      	lsls	r1, r1, #16
 8003766:	6101      	str	r1, [r0, #16]
  }
}
 8003768:	4770      	bx	lr

0800376a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800376a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800376c:	ea01 0203 	and.w	r2, r1, r3
 8003770:	ea21 0103 	bic.w	r1, r1, r3
 8003774:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003778:	6101      	str	r1, [r0, #16]
}
 800377a:	4770      	bx	lr

0800377c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377c:	6803      	ldr	r3, [r0, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003784:	d101      	bne.n	800378a <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003786:	2000      	movs	r0, #0
}
 8003788:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800378e:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	2300      	movs	r3, #0
 8003792:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003794:	2220      	movs	r2, #32
 8003796:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800379e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80037a0:	f042 0204 	orr.w	r2, r2, #4
 80037a4:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80037a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80037aa:	2001      	movs	r0, #1
 80037ac:	4770      	bx	lr

080037ae <I2C_WaitOnFlagUntilTimeout>:
{
 80037ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b2:	4606      	mov	r6, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	4617      	mov	r7, r2
 80037b8:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ba:	e03b      	b.n	8003834 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037bc:	f7ff fb5c 	bl	8002e78 <HAL_GetTick>
 80037c0:	9b06      	ldr	r3, [sp, #24]
 80037c2:	1ac0      	subs	r0, r0, r3
 80037c4:	4540      	cmp	r0, r8
 80037c6:	d802      	bhi.n	80037ce <I2C_WaitOnFlagUntilTimeout+0x20>
 80037c8:	f1b8 0f00 	cmp.w	r8, #0
 80037cc:	d132      	bne.n	8003834 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037ce:	2d01      	cmp	r5, #1
 80037d0:	d018      	beq.n	8003804 <I2C_WaitOnFlagUntilTimeout+0x56>
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	ea24 0303 	bic.w	r3, r4, r3
 80037da:	b29b      	uxth	r3, r3
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	429f      	cmp	r7, r3
 80037e4:	d126      	bne.n	8003834 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037ea:	2220      	movs	r2, #32
 80037ec:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f0:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f4:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80037f6:	f042 0220 	orr.w	r2, r2, #32
 80037fa:	6432      	str	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80037fc:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_ERROR;
 8003800:	2001      	movs	r0, #1
 8003802:	e027      	b.n	8003854 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003804:	6833      	ldr	r3, [r6, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	ea24 0303 	bic.w	r3, r4, r3
 800380c:	b29b      	uxth	r3, r3
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	e7e5      	b.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003816:	6833      	ldr	r3, [r6, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	ea24 0c03 	bic.w	ip, r4, r3
 800381e:	fa1f fc8c 	uxth.w	ip, ip
 8003822:	fabc fc8c 	clz	ip, ip
 8003826:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800382a:	4567      	cmp	r7, ip
 800382c:	d111      	bne.n	8003852 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 800382e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003832:	d1c3      	bne.n	80037bc <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003834:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8003838:	2d01      	cmp	r5, #1
 800383a:	d0ec      	beq.n	8003816 <I2C_WaitOnFlagUntilTimeout+0x68>
 800383c:	6833      	ldr	r3, [r6, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	ea24 0c03 	bic.w	ip, r4, r3
 8003844:	fa1f fc8c 	uxth.w	ip, ip
 8003848:	fabc fc8c 	clz	ip, ip
 800384c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003850:	e7eb      	b.n	800382a <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8003852:	2000      	movs	r0, #0
}
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003858 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800385c:	4605      	mov	r5, r0
 800385e:	460e      	mov	r6, r1
 8003860:	4690      	mov	r8, r2
 8003862:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003864:	e053      	b.n	800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386e:	682b      	ldr	r3, [r5, #0]
 8003870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003874:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	2300      	movs	r3, #0
 8003878:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	2220      	movs	r2, #32
 800387c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003884:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003886:	f042 0204 	orr.w	r2, r2, #4
 800388a:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800388c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003890:	2001      	movs	r0, #1
 8003892:	e04a      	b.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003894:	f7ff faf0 	bl	8002e78 <HAL_GetTick>
 8003898:	eba0 0009 	sub.w	r0, r0, r9
 800389c:	4540      	cmp	r0, r8
 800389e:	d802      	bhi.n	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80038a0:	f1b8 0f00 	cmp.w	r8, #0
 80038a4:	d133      	bne.n	800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038a6:	2f01      	cmp	r7, #1
 80038a8:	d017      	beq.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	ea26 0303 	bic.w	r3, r6, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b00      	subs	r3, #0
 80038b6:	bf18      	it	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	b343      	cbz	r3, 800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038bc:	2300      	movs	r3, #0
 80038be:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	2220      	movs	r2, #32
 80038c2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80038cc:	f042 0220 	orr.w	r2, r2, #32
 80038d0:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80038d2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 80038d6:	2001      	movs	r0, #1
 80038d8:	e027      	b.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038da:	682b      	ldr	r3, [r5, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	ea26 0303 	bic.w	r3, r6, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b00      	subs	r3, #0
 80038e6:	bf18      	it	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	e7e6      	b.n	80038ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	699c      	ldr	r4, [r3, #24]
 80038f0:	ea26 0404 	bic.w	r4, r6, r4
 80038f4:	b2a4      	uxth	r4, r4
 80038f6:	3c00      	subs	r4, #0
 80038f8:	bf18      	it	ne
 80038fa:	2401      	movne	r4, #1
 80038fc:	b1a4      	cbz	r4, 8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003906:	d1ae      	bne.n	8003866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003908:	f1b8 3fff 	cmp.w	r8, #4294967295
 800390c:	d1c2      	bne.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800390e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8003912:	2f01      	cmp	r7, #1
 8003914:	d1ea      	bne.n	80038ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8003916:	682b      	ldr	r3, [r5, #0]
 8003918:	695c      	ldr	r4, [r3, #20]
 800391a:	ea26 0404 	bic.w	r4, r6, r4
 800391e:	b2a4      	uxth	r4, r4
 8003920:	3c00      	subs	r4, #0
 8003922:	bf18      	it	ne
 8003924:	2401      	movne	r4, #1
 8003926:	e7e9      	b.n	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8003928:	2000      	movs	r0, #0
}
 800392a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08003930 <I2C_MasterRequestWrite>:
{
 8003930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003932:	b083      	sub	sp, #12
 8003934:	4604      	mov	r4, r0
 8003936:	460d      	mov	r5, r1
 8003938:	4616      	mov	r6, r2
 800393a:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800393c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800393e:	2b08      	cmp	r3, #8
 8003940:	d00d      	beq.n	800395e <I2C_MasterRequestWrite+0x2e>
 8003942:	2b01      	cmp	r3, #1
 8003944:	d00b      	beq.n	800395e <I2C_MasterRequestWrite+0x2e>
 8003946:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800394a:	d008      	beq.n	800395e <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800394c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800394e:	2b12      	cmp	r3, #18
 8003950:	d10a      	bne.n	8003968 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003952:	6802      	ldr	r2, [r0, #0]
 8003954:	6813      	ldr	r3, [r2, #0]
 8003956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	e004      	b.n	8003968 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	6813      	ldr	r3, [r2, #0]
 8003962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003966:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003968:	9700      	str	r7, [sp, #0]
 800396a:	4633      	mov	r3, r6
 800396c:	2200      	movs	r2, #0
 800396e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003972:	4620      	mov	r0, r4
 8003974:	f7ff ff1b 	bl	80037ae <I2C_WaitOnFlagUntilTimeout>
 8003978:	b980      	cbnz	r0, 800399c <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800397a:	6923      	ldr	r3, [r4, #16]
 800397c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003980:	d116      	bne.n	80039b0 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003988:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800398a:	463b      	mov	r3, r7
 800398c:	4632      	mov	r2, r6
 800398e:	4913      	ldr	r1, [pc, #76]	; (80039dc <I2C_MasterRequestWrite+0xac>)
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff ff61 	bl	8003858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003996:	b9f8      	cbnz	r0, 80039d8 <I2C_MasterRequestWrite+0xa8>
}
 8003998:	b003      	add	sp, #12
 800399a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80039a4:	d002      	beq.n	80039ac <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039aa:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80039ac:	2003      	movs	r0, #3
 80039ae:	e7f3      	b.n	8003998 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039b0:	11eb      	asrs	r3, r5, #7
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	f003 0306 	and.w	r3, r3, #6
 80039b8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80039bc:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039be:	463b      	mov	r3, r7
 80039c0:	4632      	mov	r2, r6
 80039c2:	4907      	ldr	r1, [pc, #28]	; (80039e0 <I2C_MasterRequestWrite+0xb0>)
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7ff ff47 	bl	8003858 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ca:	b918      	cbnz	r0, 80039d4 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	b2ed      	uxtb	r5, r5
 80039d0:	611d      	str	r5, [r3, #16]
 80039d2:	e7da      	b.n	800398a <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80039d4:	2001      	movs	r0, #1
 80039d6:	e7df      	b.n	8003998 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80039d8:	2001      	movs	r0, #1
 80039da:	e7dd      	b.n	8003998 <I2C_MasterRequestWrite+0x68>
 80039dc:	00010002 	.word	0x00010002
 80039e0:	00010008 	.word	0x00010008

080039e4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	4604      	mov	r4, r0
 80039e8:	460d      	mov	r5, r1
 80039ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80039f4:	d121      	bne.n	8003a3a <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff fec0 	bl	800377c <I2C_IsAcknowledgeFailed>
 80039fc:	b9f8      	cbnz	r0, 8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80039fe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a02:	d0f3      	beq.n	80039ec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a04:	f7ff fa38 	bl	8002e78 <HAL_GetTick>
 8003a08:	1b80      	subs	r0, r0, r6
 8003a0a:	42a8      	cmp	r0, r5
 8003a0c:	d801      	bhi.n	8003a12 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003a0e:	2d00      	cmp	r5, #0
 8003a10:	d1ec      	bne.n	80039ec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a1a:	d1e7      	bne.n	80039ec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	2220      	movs	r2, #32
 8003a22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a2c:	f042 0220 	orr.w	r2, r2, #32
 8003a30:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003a32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
 8003a38:	e000      	b.n	8003a3c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8003a3a:	2000      	movs	r0, #0
}
 8003a3c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003a3e:	2001      	movs	r0, #1
 8003a40:	e7fc      	b.n	8003a3c <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08003a42 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003a42:	b570      	push	{r4, r5, r6, lr}
 8003a44:	4604      	mov	r4, r0
 8003a46:	460d      	mov	r5, r1
 8003a48:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f013 0f04 	tst.w	r3, #4
 8003a52:	d121      	bne.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7ff fe91 	bl	800377c <I2C_IsAcknowledgeFailed>
 8003a5a:	b9f8      	cbnz	r0, 8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003a5c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003a60:	d0f3      	beq.n	8003a4a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7ff fa09 	bl	8002e78 <HAL_GetTick>
 8003a66:	1b80      	subs	r0, r0, r6
 8003a68:	42a8      	cmp	r0, r5
 8003a6a:	d801      	bhi.n	8003a70 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	d1ec      	bne.n	8003a4a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f013 0f04 	tst.w	r3, #4
 8003a78:	d1e7      	bne.n	8003a4a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a8a:	f042 0220 	orr.w	r2, r2, #32
 8003a8e:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003a90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003a94:	2001      	movs	r0, #1
 8003a96:	e000      	b.n	8003a9a <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8003a98:	2000      	movs	r0, #0
}
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	e7fc      	b.n	8003a9a <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003aa0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	f000 80cc 	beq.w	8003c3e <HAL_I2C_Init+0x19e>
{
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aaa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d077      	beq.n	8003ba2 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab2:	2324      	movs	r3, #36	; 0x24
 8003ab4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	6813      	ldr	r3, [r2, #0]
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aca:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	6813      	ldr	r3, [r2, #0]
 8003ad0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ad4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ad6:	f000 fd4b 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ada:	6862      	ldr	r2, [r4, #4]
 8003adc:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <HAL_I2C_Init+0x1a8>)
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d864      	bhi.n	8003bac <HAL_I2C_Init+0x10c>
 8003ae2:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_I2C_Init+0x1ac>)
 8003ae4:	4298      	cmp	r0, r3
 8003ae6:	bf8c      	ite	hi
 8003ae8:	2300      	movhi	r3, #0
 8003aea:	2301      	movls	r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f040 80a8 	bne.w	8003c42 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8003af2:	4957      	ldr	r1, [pc, #348]	; (8003c50 <HAL_I2C_Init+0x1b0>)
 8003af4:	fba1 3100 	umull	r3, r1, r1, r0
 8003af8:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003afa:	6825      	ldr	r5, [r4, #0]
 8003afc:	686a      	ldr	r2, [r5, #4]
 8003afe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003b02:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8003b06:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b08:	6821      	ldr	r1, [r4, #0]
 8003b0a:	6a0a      	ldr	r2, [r1, #32]
 8003b0c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003b10:	6866      	ldr	r6, [r4, #4]
 8003b12:	4d4d      	ldr	r5, [pc, #308]	; (8003c48 <HAL_I2C_Init+0x1a8>)
 8003b14:	42ae      	cmp	r6, r5
 8003b16:	d84f      	bhi.n	8003bb8 <HAL_I2C_Init+0x118>
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b1e:	6821      	ldr	r1, [r4, #0]
 8003b20:	69ca      	ldr	r2, [r1, #28]
 8003b22:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b2a:	6865      	ldr	r5, [r4, #4]
 8003b2c:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <HAL_I2C_Init+0x1a8>)
 8003b2e:	429d      	cmp	r5, r3
 8003b30:	d84c      	bhi.n	8003bcc <HAL_I2C_Init+0x12c>
 8003b32:	1e43      	subs	r3, r0, #1
 8003b34:	006d      	lsls	r5, r5, #1
 8003b36:	fbb3 f3f5 	udiv	r3, r3, r5
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003b40:	4203      	tst	r3, r0
 8003b42:	d078      	beq.n	8003c36 <HAL_I2C_Init+0x196>
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b4c:	6821      	ldr	r1, [r4, #0]
 8003b4e:	680b      	ldr	r3, [r1, #0]
 8003b50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003b54:	69e2      	ldr	r2, [r4, #28]
 8003b56:	6a20      	ldr	r0, [r4, #32]
 8003b58:	4302      	orrs	r2, r0
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b5e:	6821      	ldr	r1, [r4, #0]
 8003b60:	688b      	ldr	r3, [r1, #8]
 8003b62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b6a:	6922      	ldr	r2, [r4, #16]
 8003b6c:	68e0      	ldr	r0, [r4, #12]
 8003b6e:	4302      	orrs	r2, r0
 8003b70:	4313      	orrs	r3, r2
 8003b72:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b74:	6821      	ldr	r1, [r4, #0]
 8003b76:	68cb      	ldr	r3, [r1, #12]
 8003b78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b7c:	6962      	ldr	r2, [r4, #20]
 8003b7e:	69a0      	ldr	r0, [r4, #24]
 8003b80:	4302      	orrs	r2, r0
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	6813      	ldr	r3, [r2, #0]
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	2000      	movs	r0, #0
 8003b92:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	2320      	movs	r3, #32
 8003b96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003ba0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003ba2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003ba6:	f7fe ff95 	bl	8002ad4 <HAL_I2C_MspInit>
 8003baa:	e782      	b.n	8003ab2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <HAL_I2C_Init+0x1b4>)
 8003bae:	4298      	cmp	r0, r3
 8003bb0:	bf8c      	ite	hi
 8003bb2:	2300      	movhi	r3, #0
 8003bb4:	2301      	movls	r3, #1
 8003bb6:	e799      	b.n	8003aec <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bb8:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8003bbc:	fb05 f303 	mul.w	r3, r5, r3
 8003bc0:	4d25      	ldr	r5, [pc, #148]	; (8003c58 <HAL_I2C_Init+0x1b8>)
 8003bc2:	fba5 5303 	umull	r5, r3, r5, r3
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	3301      	adds	r3, #1
 8003bca:	e7a6      	b.n	8003b1a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bcc:	68a6      	ldr	r6, [r4, #8]
 8003bce:	b9be      	cbnz	r6, 8003c00 <HAL_I2C_Init+0x160>
 8003bd0:	1e43      	subs	r3, r0, #1
 8003bd2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8003bd6:	fbb3 f3fc 	udiv	r3, r3, ip
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	bb43      	cbnz	r3, 8003c3a <HAL_I2C_Init+0x19a>
 8003be8:	b9c6      	cbnz	r6, 8003c1c <HAL_I2C_Init+0x17c>
 8003bea:	1e43      	subs	r3, r0, #1
 8003bec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bf0:	fbb3 f3f5 	udiv	r3, r3, r5
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfe:	e7a3      	b.n	8003b48 <HAL_I2C_Init+0xa8>
 8003c00:	1e43      	subs	r3, r0, #1
 8003c02:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8003c06:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003c0a:	fbb3 f3fc 	udiv	r3, r3, ip
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	fab3 f383 	clz	r3, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	e7e4      	b.n	8003be6 <HAL_I2C_Init+0x146>
 8003c1c:	1e43      	subs	r3, r0, #1
 8003c1e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003c22:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003c26:	fbb3 f3f5 	udiv	r3, r3, r5
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c34:	e788      	b.n	8003b48 <HAL_I2C_Init+0xa8>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e786      	b.n	8003b48 <HAL_I2C_Init+0xa8>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e784      	b.n	8003b48 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8003c3e:	2001      	movs	r0, #1
}
 8003c40:	4770      	bx	lr
    return HAL_ERROR;
 8003c42:	2001      	movs	r0, #1
 8003c44:	e7ac      	b.n	8003ba0 <HAL_I2C_Init+0x100>
 8003c46:	bf00      	nop
 8003c48:	000186a0 	.word	0x000186a0
 8003c4c:	001e847f 	.word	0x001e847f
 8003c50:	431bde83 	.word	0x431bde83
 8003c54:	003d08ff 	.word	0x003d08ff
 8003c58:	10624dd3 	.word	0x10624dd3

08003c5c <HAL_I2C_Master_Transmit>:
{
 8003c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c60:	b085      	sub	sp, #20
 8003c62:	4604      	mov	r4, r0
 8003c64:	460f      	mov	r7, r1
 8003c66:	4691      	mov	r9, r2
 8003c68:	4698      	mov	r8, r3
 8003c6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003c6c:	f7ff f904 	bl	8002e78 <HAL_GetTick>
 8003c70:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c72:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003c76:	b2c0      	uxtb	r0, r0
 8003c78:	2820      	cmp	r0, #32
 8003c7a:	d004      	beq.n	8003c86 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8003c7c:	2702      	movs	r7, #2
}
 8003c7e:	4638      	mov	r0, r7
 8003c80:	b005      	add	sp, #20
 8003c82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c86:	9500      	str	r5, [sp, #0]
 8003c88:	2319      	movs	r3, #25
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	494f      	ldr	r1, [pc, #316]	; (8003dcc <HAL_I2C_Master_Transmit+0x170>)
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f7ff fd8d 	bl	80037ae <I2C_WaitOnFlagUntilTimeout>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	f040 8092 	bne.w	8003dbe <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8003c9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	f000 808f 	beq.w	8003dc2 <HAL_I2C_Master_Transmit+0x166>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	f012 0f01 	tst.w	r2, #1
 8003cb2:	d103      	bne.n	8003cbc <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cbc:	6822      	ldr	r2, [r4, #0]
 8003cbe:	6813      	ldr	r3, [r2, #0]
 8003cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cc4:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cc6:	2321      	movs	r3, #33	; 0x21
 8003cc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ccc:	2310      	movs	r3, #16
 8003cce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003cd6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cda:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ce0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_I2C_Master_Transmit+0x174>)
 8003ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	4632      	mov	r2, r6
 8003cea:	4639      	mov	r1, r7
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff fe1f 	bl	8003930 <I2C_MasterRequestWrite>
 8003cf2:	4607      	mov	r7, r0
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d166      	bne.n	8003dc6 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9303      	str	r3, [sp, #12]
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	9203      	str	r2, [sp, #12]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	9303      	str	r3, [sp, #12]
 8003d06:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003d08:	e011      	b.n	8003d2e <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8003d10:	2701      	movs	r7, #1
 8003d12:	e7b4      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	6822      	ldr	r2, [r4, #0]
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e7f7      	b.n	8003d10 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d20:	462a      	mov	r2, r5
 8003d22:	4631      	mov	r1, r6
 8003d24:	4620      	mov	r0, r4
 8003d26:	f7ff fe8c 	bl	8003a42 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d12e      	bne.n	8003d8c <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8003d2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d036      	beq.n	8003da2 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d34:	462a      	mov	r2, r5
 8003d36:	4631      	mov	r1, r6
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f7ff fe53 	bl	80039e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	d1e3      	bne.n	8003d0a <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	7812      	ldrb	r2, [r2, #0]
 8003d48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d50:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003d52:	b289      	uxth	r1, r1
 8003d54:	3901      	subs	r1, #1
 8003d56:	b289      	uxth	r1, r1
 8003d58:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	6951      	ldr	r1, [r2, #20]
 8003d66:	f011 0f04 	tst.w	r1, #4
 8003d6a:	d0d9      	beq.n	8003d20 <HAL_I2C_Master_Transmit+0xc4>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0d7      	beq.n	8003d20 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d70:	7843      	ldrb	r3, [r0, #1]
 8003d72:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d76:	3301      	adds	r3, #1
 8003d78:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003d7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003d84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	8523      	strh	r3, [r4, #40]	; 0x28
 8003d8a:	e7c9      	b.n	8003d20 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8003d92:	2701      	movs	r7, #1
 8003d94:	e773      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d96:	6822      	ldr	r2, [r4, #0]
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e7f7      	b.n	8003d92 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	6822      	ldr	r2, [r4, #0]
 8003da4:	6813      	ldr	r3, [r2, #0]
 8003da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003daa:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	2320      	movs	r3, #32
 8003dae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003db8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003dbc:	e75f      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8003dbe:	2702      	movs	r7, #2
 8003dc0:	e75d      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8003dc2:	2702      	movs	r7, #2
 8003dc4:	e75b      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8003dc6:	2701      	movs	r7, #1
 8003dc8:	e759      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x22>
 8003dca:	bf00      	nop
 8003dcc:	00100002 	.word	0x00100002
 8003dd0:	ffff0000 	.word	0xffff0000

08003dd4 <HAL_I2C_IsDeviceReady>:
{
 8003dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4688      	mov	r8, r1
 8003dde:	4691      	mov	r9, r2
 8003de0:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003de2:	f7ff f849 	bl	8002e78 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d003      	beq.n	8003df8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8003df0:	2002      	movs	r0, #2
}
 8003df2:	b005      	add	sp, #20
 8003df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003df8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dfa:	9000      	str	r0, [sp, #0]
 8003dfc:	2319      	movs	r3, #25
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4957      	ldr	r1, [pc, #348]	; (8003f60 <HAL_I2C_IsDeviceReady+0x18c>)
 8003e02:	4620      	mov	r0, r4
 8003e04:	f7ff fcd3 	bl	80037ae <I2C_WaitOnFlagUntilTimeout>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	f040 80a0 	bne.w	8003f4e <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8003e0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	f000 809d 	beq.w	8003f52 <HAL_I2C_IsDeviceReady+0x17e>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	f012 0f01 	tst.w	r2, #1
 8003e26:	d103      	bne.n	8003e30 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e38:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e3a:	2324      	movs	r3, #36	; 0x24
 8003e3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e40:	2700      	movs	r7, #0
 8003e42:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e44:	4b47      	ldr	r3, [pc, #284]	; (8003f64 <HAL_I2C_IsDeviceReady+0x190>)
 8003e46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e48:	e040      	b.n	8003ecc <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003e52:	d002      	beq.n	8003e5a <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e58:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003e5a:	2003      	movs	r0, #3
 8003e5c:	e7c9      	b.n	8003df2 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e5e:	23a0      	movs	r3, #160	; 0xa0
 8003e60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	6953      	ldr	r3, [r2, #20]
 8003e68:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e6c:	6952      	ldr	r2, [r2, #20]
 8003e6e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e72:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 8003e76:	fa5f fc8c 	uxtb.w	ip, ip
 8003e7a:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8003e7e:	d009      	beq.n	8003e94 <HAL_I2C_IsDeviceReady+0xc0>
 8003e80:	b943      	cbnz	r3, 8003e94 <HAL_I2C_IsDeviceReady+0xc0>
 8003e82:	b93a      	cbnz	r2, 8003e94 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e84:	f7fe fff8 	bl	8002e78 <HAL_GetTick>
 8003e88:	1b80      	subs	r0, r0, r6
 8003e8a:	42a8      	cmp	r0, r5
 8003e8c:	d8e7      	bhi.n	8003e5e <HAL_I2C_IsDeviceReady+0x8a>
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	d1e8      	bne.n	8003e64 <HAL_I2C_IsDeviceReady+0x90>
 8003e92:	e7e4      	b.n	8003e5e <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	2320      	movs	r3, #32
 8003e96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	f012 0f02 	tst.w	r2, #2
 8003ea2:	d131      	bne.n	8003f08 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eaa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eb2:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb4:	9600      	str	r6, [sp, #0]
 8003eb6:	2319      	movs	r3, #25
 8003eb8:	2201      	movs	r2, #1
 8003eba:	4929      	ldr	r1, [pc, #164]	; (8003f60 <HAL_I2C_IsDeviceReady+0x18c>)
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f7ff fc76 	bl	80037ae <I2C_WaitOnFlagUntilTimeout>
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d149      	bne.n	8003f5a <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8003ec6:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8003ec8:	454f      	cmp	r7, r9
 8003eca:	d238      	bcs.n	8003f3e <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ecc:	6822      	ldr	r2, [r4, #0]
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed4:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ed6:	9600      	str	r6, [sp, #0]
 8003ed8:	462b      	mov	r3, r5
 8003eda:	2200      	movs	r2, #0
 8003edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f7ff fc64 	bl	80037ae <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d1af      	bne.n	8003e4a <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003ef0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003ef2:	f7fe ffc1 	bl	8002e78 <HAL_GetTick>
 8003ef6:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ef8:	6822      	ldr	r2, [r4, #0]
 8003efa:	6953      	ldr	r3, [r2, #20]
 8003efc:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f00:	6952      	ldr	r2, [r2, #20]
 8003f02:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f06:	e7b4      	b.n	8003e72 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f10:	2300      	movs	r3, #0
 8003f12:	9303      	str	r3, [sp, #12]
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	9203      	str	r2, [sp, #12]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	9303      	str	r3, [sp, #12]
 8003f1e:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f20:	9600      	str	r6, [sp, #0]
 8003f22:	2319      	movs	r3, #25
 8003f24:	2201      	movs	r2, #1
 8003f26:	490e      	ldr	r1, [pc, #56]	; (8003f60 <HAL_I2C_IsDeviceReady+0x18c>)
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff fc40 	bl	80037ae <I2C_WaitOnFlagUntilTimeout>
 8003f2e:	b990      	cbnz	r0, 8003f56 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	2320      	movs	r3, #32
 8003f32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003f36:	2300      	movs	r3, #0
 8003f38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8003f3c:	e759      	b.n	8003df2 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	2320      	movs	r3, #32
 8003f40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003f44:	2300      	movs	r3, #0
 8003f46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003f4a:	2001      	movs	r0, #1
 8003f4c:	e751      	b.n	8003df2 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003f4e:	2002      	movs	r0, #2
 8003f50:	e74f      	b.n	8003df2 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003f52:	2002      	movs	r0, #2
 8003f54:	e74d      	b.n	8003df2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
 8003f58:	e74b      	b.n	8003df2 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	e749      	b.n	8003df2 <HAL_I2C_IsDeviceReady+0x1e>
 8003f5e:	bf00      	nop
 8003f60:	00100002 	.word	0x00100002
 8003f64:	ffff0000 	.word	0xffff0000

08003f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f68:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <RCC_Delay+0x24>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <RCC_Delay+0x28>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	0a5b      	lsrs	r3, r3, #9
 8003f76:	fb00 f303 	mul.w	r3, r0, r3
 8003f7a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003f7c:	bf00      	nop
  }
  while (Delay --);
 8003f7e:	9b01      	ldr	r3, [sp, #4]
 8003f80:	1e5a      	subs	r2, r3, #1
 8003f82:	9201      	str	r2, [sp, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f9      	bne.n	8003f7c <RCC_Delay+0x14>
}
 8003f88:	b002      	add	sp, #8
 8003f8a:	4770      	bx	lr
 8003f8c:	20000020 	.word	0x20000020
 8003f90:	10624dd3 	.word	0x10624dd3

08003f94 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003f94:	2800      	cmp	r0, #0
 8003f96:	f000 81f1 	beq.w	800437c <HAL_RCC_OscConfig+0x3e8>
{
 8003f9a:	b570      	push	{r4, r5, r6, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa0:	6803      	ldr	r3, [r0, #0]
 8003fa2:	f013 0f01 	tst.w	r3, #1
 8003fa6:	d02c      	beq.n	8004002 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fa8:	4b99      	ldr	r3, [pc, #612]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fb4:	4b96      	ldr	r3, [pc, #600]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d012      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc0:	6863      	ldr	r3, [r4, #4]
 8003fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc6:	d041      	beq.n	800404c <HAL_RCC_OscConfig+0xb8>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d155      	bne.n	8004078 <HAL_RCC_OscConfig+0xe4>
 8003fcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fd0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e037      	b.n	8004056 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fe6:	4b8a      	ldr	r3, [pc, #552]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003fee:	d0e7      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	4b87      	ldr	r3, [pc, #540]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_OscConfig+0x6e>
 8003ffa:	6863      	ldr	r3, [r4, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 81bf 	beq.w	8004380 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	f013 0f02 	tst.w	r3, #2
 8004008:	d075      	beq.n	80040f6 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800400a:	4b81      	ldr	r3, [pc, #516]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f013 0f0c 	tst.w	r3, #12
 8004012:	d05f      	beq.n	80040d4 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004014:	4b7e      	ldr	r3, [pc, #504]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b08      	cmp	r3, #8
 800401e:	d054      	beq.n	80040ca <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004020:	6923      	ldr	r3, [r4, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 808a 	beq.w	800413c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8004028:	4b7a      	ldr	r3, [pc, #488]	; (8004214 <HAL_RCC_OscConfig+0x280>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800402e:	f7fe ff23 	bl	8002e78 <HAL_GetTick>
 8004032:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	4b76      	ldr	r3, [pc, #472]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f013 0f02 	tst.w	r3, #2
 800403c:	d175      	bne.n	800412a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403e:	f7fe ff1b 	bl	8002e78 <HAL_GetTick>
 8004042:	1b40      	subs	r0, r0, r5
 8004044:	2802      	cmp	r0, #2
 8004046:	d9f5      	bls.n	8004034 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8004048:	2003      	movs	r0, #3
 800404a:	e19e      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404c:	4a70      	ldr	r2, [pc, #448]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800404e:	6813      	ldr	r3, [r2, #0]
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004056:	6863      	ldr	r3, [r4, #4]
 8004058:	b343      	cbz	r3, 80040ac <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800405a:	f7fe ff0d 	bl	8002e78 <HAL_GetTick>
 800405e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004060:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004068:	d1cb      	bne.n	8004002 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406a:	f7fe ff05 	bl	8002e78 <HAL_GetTick>
 800406e:	1b40      	subs	r0, r0, r5
 8004070:	2864      	cmp	r0, #100	; 0x64
 8004072:	d9f5      	bls.n	8004060 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8004074:	2003      	movs	r0, #3
 8004076:	e188      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d009      	beq.n	8004092 <HAL_RCC_OscConfig+0xfe>
 800407e:	4b64      	ldr	r3, [pc, #400]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e7e1      	b.n	8004056 <HAL_RCC_OscConfig+0xc2>
 8004092:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004096:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e7d4      	b.n	8004056 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80040ac:	f7fe fee4 	bl	8002e78 <HAL_GetTick>
 80040b0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	4b57      	ldr	r3, [pc, #348]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80040ba:	d0a2      	beq.n	8004002 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fe fedc 	bl	8002e78 <HAL_GetTick>
 80040c0:	1b40      	subs	r0, r0, r5
 80040c2:	2864      	cmp	r0, #100	; 0x64
 80040c4:	d9f5      	bls.n	80040b2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80040c6:	2003      	movs	r0, #3
 80040c8:	e15f      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040ca:	4b51      	ldr	r3, [pc, #324]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80040d2:	d1a5      	bne.n	8004020 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d4:	4b4e      	ldr	r3, [pc, #312]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f013 0f02 	tst.w	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_OscConfig+0x152>
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	f040 814f 	bne.w	8004384 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e6:	4a4a      	ldr	r2, [pc, #296]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80040e8:	6813      	ldr	r3, [r2, #0]
 80040ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040ee:	6961      	ldr	r1, [r4, #20]
 80040f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040f4:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	f013 0f08 	tst.w	r3, #8
 80040fc:	d033      	beq.n	8004166 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040fe:	69a3      	ldr	r3, [r4, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d05c      	beq.n	80041be <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8004104:	4b43      	ldr	r3, [pc, #268]	; (8004214 <HAL_RCC_OscConfig+0x280>)
 8004106:	2201      	movs	r2, #1
 8004108:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800410c:	f7fe feb4 	bl	8002e78 <HAL_GetTick>
 8004110:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f013 0f02 	tst.w	r3, #2
 800411a:	d121      	bne.n	8004160 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411c:	f7fe feac 	bl	8002e78 <HAL_GetTick>
 8004120:	1b40      	subs	r0, r0, r5
 8004122:	2802      	cmp	r0, #2
 8004124:	d9f5      	bls.n	8004112 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8004126:	2003      	movs	r0, #3
 8004128:	e12f      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412a:	4a39      	ldr	r2, [pc, #228]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800412c:	6813      	ldr	r3, [r2, #0]
 800412e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004132:	6961      	ldr	r1, [r4, #20]
 8004134:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e7dc      	b.n	80040f6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <HAL_RCC_OscConfig+0x280>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004142:	f7fe fe99 	bl	8002e78 <HAL_GetTick>
 8004146:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004148:	4b31      	ldr	r3, [pc, #196]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f013 0f02 	tst.w	r3, #2
 8004150:	d0d1      	beq.n	80040f6 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004152:	f7fe fe91 	bl	8002e78 <HAL_GetTick>
 8004156:	1b40      	subs	r0, r0, r5
 8004158:	2802      	cmp	r0, #2
 800415a:	d9f5      	bls.n	8004148 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 800415c:	2003      	movs	r0, #3
 800415e:	e114      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8004160:	2001      	movs	r0, #1
 8004162:	f7ff ff01 	bl	8003f68 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	f013 0f04 	tst.w	r3, #4
 800416c:	f000 8096 	beq.w	800429c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004170:	4b27      	ldr	r3, [pc, #156]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004178:	d134      	bne.n	80041e4 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b25      	ldr	r3, [pc, #148]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004182:	61da      	str	r2, [r3, #28]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800418e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	4b21      	ldr	r3, [pc, #132]	; (8004218 <HAL_RCC_OscConfig+0x284>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004198:	d026      	beq.n	80041e8 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d03d      	beq.n	800421c <HAL_RCC_OscConfig+0x288>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d153      	bne.n	800424c <HAL_RCC_OscConfig+0x2b8>
 80041a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80041ac:	6a1a      	ldr	r2, [r3, #32]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	621a      	str	r2, [r3, #32]
 80041b4:	6a1a      	ldr	r2, [r3, #32]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	621a      	str	r2, [r3, #32]
 80041bc:	e033      	b.n	8004226 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <HAL_RCC_OscConfig+0x280>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80041c6:	f7fe fe57 	bl	8002e78 <HAL_GetTick>
 80041ca:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_RCC_OscConfig+0x27c>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f013 0f02 	tst.w	r3, #2
 80041d4:	d0c7      	beq.n	8004166 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d6:	f7fe fe4f 	bl	8002e78 <HAL_GetTick>
 80041da:	1b40      	subs	r0, r0, r5
 80041dc:	2802      	cmp	r0, #2
 80041de:	d9f5      	bls.n	80041cc <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80041e0:	2003      	movs	r0, #3
 80041e2:	e0d2      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80041e4:	2500      	movs	r5, #0
 80041e6:	e7d3      	b.n	8004190 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e8:	4a0b      	ldr	r2, [pc, #44]	; (8004218 <HAL_RCC_OscConfig+0x284>)
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80041f2:	f7fe fe41 	bl	8002e78 <HAL_GetTick>
 80041f6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <HAL_RCC_OscConfig+0x284>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004200:	d1cb      	bne.n	800419a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fe fe39 	bl	8002e78 <HAL_GetTick>
 8004206:	1b80      	subs	r0, r0, r6
 8004208:	2864      	cmp	r0, #100	; 0x64
 800420a:	d9f5      	bls.n	80041f8 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 800420c:	2003      	movs	r0, #3
 800420e:	e0bc      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
 8004210:	40021000 	.word	0x40021000
 8004214:	42420000 	.word	0x42420000
 8004218:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	4a5f      	ldr	r2, [pc, #380]	; (800439c <HAL_RCC_OscConfig+0x408>)
 800421e:	6a13      	ldr	r3, [r2, #32]
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004226:	68e3      	ldr	r3, [r4, #12]
 8004228:	b333      	cbz	r3, 8004278 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800422a:	f7fe fe25 	bl	8002e78 <HAL_GetTick>
 800422e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004230:	4b5a      	ldr	r3, [pc, #360]	; (800439c <HAL_RCC_OscConfig+0x408>)
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f013 0f02 	tst.w	r3, #2
 8004238:	d12f      	bne.n	800429a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423a:	f7fe fe1d 	bl	8002e78 <HAL_GetTick>
 800423e:	1b80      	subs	r0, r0, r6
 8004240:	f241 3388 	movw	r3, #5000	; 0x1388
 8004244:	4298      	cmp	r0, r3
 8004246:	d9f3      	bls.n	8004230 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8004248:	2003      	movs	r0, #3
 800424a:	e09e      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	2b05      	cmp	r3, #5
 800424e:	d009      	beq.n	8004264 <HAL_RCC_OscConfig+0x2d0>
 8004250:	4b52      	ldr	r3, [pc, #328]	; (800439c <HAL_RCC_OscConfig+0x408>)
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	621a      	str	r2, [r3, #32]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	f022 0204 	bic.w	r2, r2, #4
 8004260:	621a      	str	r2, [r3, #32]
 8004262:	e7e0      	b.n	8004226 <HAL_RCC_OscConfig+0x292>
 8004264:	4b4d      	ldr	r3, [pc, #308]	; (800439c <HAL_RCC_OscConfig+0x408>)
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	f042 0204 	orr.w	r2, r2, #4
 800426c:	621a      	str	r2, [r3, #32]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	621a      	str	r2, [r3, #32]
 8004276:	e7d6      	b.n	8004226 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8004278:	f7fe fdfe 	bl	8002e78 <HAL_GetTick>
 800427c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCC_OscConfig+0x408>)
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f013 0f02 	tst.w	r3, #2
 8004286:	d008      	beq.n	800429a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fe fdf6 	bl	8002e78 <HAL_GetTick>
 800428c:	1b80      	subs	r0, r0, r6
 800428e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004292:	4298      	cmp	r0, r3
 8004294:	d9f3      	bls.n	800427e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8004296:	2003      	movs	r0, #3
 8004298:	e077      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800429a:	b9e5      	cbnz	r5, 80042d6 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429c:	69e3      	ldr	r3, [r4, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d072      	beq.n	8004388 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a2:	4a3e      	ldr	r2, [pc, #248]	; (800439c <HAL_RCC_OscConfig+0x408>)
 80042a4:	6852      	ldr	r2, [r2, #4]
 80042a6:	f002 020c 	and.w	r2, r2, #12
 80042aa:	2a08      	cmp	r2, #8
 80042ac:	d056      	beq.n	800435c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d017      	beq.n	80042e2 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80042b2:	4b3b      	ldr	r3, [pc, #236]	; (80043a0 <HAL_RCC_OscConfig+0x40c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80042b8:	f7fe fdde 	bl	8002e78 <HAL_GetTick>
 80042bc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042be:	4b37      	ldr	r3, [pc, #220]	; (800439c <HAL_RCC_OscConfig+0x408>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042c6:	d047      	beq.n	8004358 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fe fdd6 	bl	8002e78 <HAL_GetTick>
 80042cc:	1b00      	subs	r0, r0, r4
 80042ce:	2802      	cmp	r0, #2
 80042d0:	d9f5      	bls.n	80042be <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80042d2:	2003      	movs	r0, #3
 80042d4:	e059      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d6:	4a31      	ldr	r2, [pc, #196]	; (800439c <HAL_RCC_OscConfig+0x408>)
 80042d8:	69d3      	ldr	r3, [r2, #28]
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042de:	61d3      	str	r3, [r2, #28]
 80042e0:	e7dc      	b.n	800429c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b2f      	ldr	r3, [pc, #188]	; (80043a0 <HAL_RCC_OscConfig+0x40c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80042e8:	f7fe fdc6 	bl	8002e78 <HAL_GetTick>
 80042ec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ee:	4b2b      	ldr	r3, [pc, #172]	; (800439c <HAL_RCC_OscConfig+0x408>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042f6:	d006      	beq.n	8004306 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fe fdbe 	bl	8002e78 <HAL_GetTick>
 80042fc:	1b40      	subs	r0, r0, r5
 80042fe:	2802      	cmp	r0, #2
 8004300:	d9f5      	bls.n	80042ee <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004302:	2003      	movs	r0, #3
 8004304:	e041      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004306:	6a23      	ldr	r3, [r4, #32]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d01a      	beq.n	8004344 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430e:	4923      	ldr	r1, [pc, #140]	; (800439c <HAL_RCC_OscConfig+0x408>)
 8004310:	684b      	ldr	r3, [r1, #4]
 8004312:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8004316:	6a22      	ldr	r2, [r4, #32]
 8004318:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800431a:	4302      	orrs	r2, r0
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004320:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <HAL_RCC_OscConfig+0x40c>)
 8004322:	2201      	movs	r2, #1
 8004324:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004326:	f7fe fda7 	bl	8002e78 <HAL_GetTick>
 800432a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x408>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004334:	d10e      	bne.n	8004354 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004336:	f7fe fd9f 	bl	8002e78 <HAL_GetTick>
 800433a:	1b00      	subs	r0, r0, r4
 800433c:	2802      	cmp	r0, #2
 800433e:	d9f5      	bls.n	800432c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8004340:	2003      	movs	r0, #3
 8004342:	e022      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004344:	4a15      	ldr	r2, [pc, #84]	; (800439c <HAL_RCC_OscConfig+0x408>)
 8004346:	6853      	ldr	r3, [r2, #4]
 8004348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800434c:	68a1      	ldr	r1, [r4, #8]
 800434e:	430b      	orrs	r3, r1
 8004350:	6053      	str	r3, [r2, #4]
 8004352:	e7dc      	b.n	800430e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8004354:	2000      	movs	r0, #0
 8004356:	e018      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
 8004358:	2000      	movs	r0, #0
 800435a:	e016      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800435c:	2b01      	cmp	r3, #1
 800435e:	d016      	beq.n	800438e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_RCC_OscConfig+0x408>)
 8004362:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004364:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004368:	6a22      	ldr	r2, [r4, #32]
 800436a:	4291      	cmp	r1, r2
 800436c:	d111      	bne.n	8004392 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800436e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004372:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004374:	4293      	cmp	r3, r2
 8004376:	d10e      	bne.n	8004396 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8004378:	2000      	movs	r0, #0
 800437a:	e006      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 800437c:	2001      	movs	r0, #1
}
 800437e:	4770      	bx	lr
        return HAL_ERROR;
 8004380:	2001      	movs	r0, #1
 8004382:	e002      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8004384:	2001      	movs	r0, #1
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8004388:	2000      	movs	r0, #0
}
 800438a:	b002      	add	sp, #8
 800438c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800438e:	2001      	movs	r0, #1
 8004390:	e7fb      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8004392:	2001      	movs	r0, #1
 8004394:	e7f9      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
 8004396:	2001      	movs	r0, #1
 8004398:	e7f7      	b.n	800438a <HAL_RCC_OscConfig+0x3f6>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	42420000 	.word	0x42420000

080043a4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x40>)
 80043a6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80043a8:	f003 020c 	and.w	r2, r3, #12
 80043ac:	2a08      	cmp	r2, #8
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80043b0:	480d      	ldr	r0, [pc, #52]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80043b2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043b4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <HAL_RCC_GetSysClockFreq+0x48>)
 80043ba:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80043c0:	d00b      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x40>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x4c>)
 80043cc:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043ce:	4a06      	ldr	r2, [pc, #24]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x44>)
 80043d0:	fb02 f000 	mul.w	r0, r2, r0
 80043d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80043d8:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80043dc:	fb03 f000 	mul.w	r0, r3, r0
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	007a1200 	.word	0x007a1200
 80043ec:	08009f80 	.word	0x08009f80
 80043f0:	08009f90 	.word	0x08009f90
 80043f4:	003d0900 	.word	0x003d0900

080043f8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80043f8:	2800      	cmp	r0, #0
 80043fa:	f000 80a0 	beq.w	800453e <HAL_RCC_ClockConfig+0x146>
{
 80043fe:	b570      	push	{r4, r5, r6, lr}
 8004400:	460d      	mov	r5, r1
 8004402:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004404:	4b52      	ldr	r3, [pc, #328]	; (8004550 <HAL_RCC_ClockConfig+0x158>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	428b      	cmp	r3, r1
 800440e:	d20b      	bcs.n	8004428 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004410:	4a4f      	ldr	r2, [pc, #316]	; (8004550 <HAL_RCC_ClockConfig+0x158>)
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	f023 0307 	bic.w	r3, r3, #7
 8004418:	430b      	orrs	r3, r1
 800441a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441c:	6813      	ldr	r3, [r2, #0]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	428b      	cmp	r3, r1
 8004424:	f040 808d 	bne.w	8004542 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	f013 0f02 	tst.w	r3, #2
 800442e:	d017      	beq.n	8004460 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004430:	f013 0f04 	tst.w	r3, #4
 8004434:	d004      	beq.n	8004440 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004436:	4a47      	ldr	r2, [pc, #284]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 8004438:	6853      	ldr	r3, [r2, #4]
 800443a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800443e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	f013 0f08 	tst.w	r3, #8
 8004446:	d004      	beq.n	8004452 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004448:	4a42      	ldr	r2, [pc, #264]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 800444a:	6853      	ldr	r3, [r2, #4]
 800444c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004450:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004452:	4a40      	ldr	r2, [pc, #256]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 8004454:	6853      	ldr	r3, [r2, #4]
 8004456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445a:	68a1      	ldr	r1, [r4, #8]
 800445c:	430b      	orrs	r3, r1
 800445e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	f013 0f01 	tst.w	r3, #1
 8004466:	d031      	beq.n	80044cc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d020      	beq.n	80044b0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800446e:	2b02      	cmp	r3, #2
 8004470:	d025      	beq.n	80044be <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004472:	4a38      	ldr	r2, [pc, #224]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	f012 0f02 	tst.w	r2, #2
 800447a:	d064      	beq.n	8004546 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800447c:	4935      	ldr	r1, [pc, #212]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 800447e:	684a      	ldr	r2, [r1, #4]
 8004480:	f022 0203 	bic.w	r2, r2, #3
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004488:	f7fe fcf6 	bl	8002e78 <HAL_GetTick>
 800448c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448e:	4b31      	ldr	r3, [pc, #196]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	6862      	ldr	r2, [r4, #4]
 8004498:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800449c:	d016      	beq.n	80044cc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449e:	f7fe fceb 	bl	8002e78 <HAL_GetTick>
 80044a2:	1b80      	subs	r0, r0, r6
 80044a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80044a8:	4298      	cmp	r0, r3
 80044aa:	d9f0      	bls.n	800448e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80044ac:	2003      	movs	r0, #3
 80044ae:	e045      	b.n	800453c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b0:	4a28      	ldr	r2, [pc, #160]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80044b8:	d1e0      	bne.n	800447c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80044ba:	2001      	movs	r0, #1
 80044bc:	e03e      	b.n	800453c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044be:	4a25      	ldr	r2, [pc, #148]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80044c6:	d1d9      	bne.n	800447c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80044c8:	2001      	movs	r0, #1
 80044ca:	e037      	b.n	800453c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044cc:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCC_ClockConfig+0x158>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	42ab      	cmp	r3, r5
 80044d6:	d90a      	bls.n	80044ee <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <HAL_RCC_ClockConfig+0x158>)
 80044da:	6813      	ldr	r3, [r2, #0]
 80044dc:	f023 0307 	bic.w	r3, r3, #7
 80044e0:	432b      	orrs	r3, r5
 80044e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e4:	6813      	ldr	r3, [r2, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	42ab      	cmp	r3, r5
 80044ec:	d12d      	bne.n	800454a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	f013 0f04 	tst.w	r3, #4
 80044f4:	d006      	beq.n	8004504 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f6:	4a17      	ldr	r2, [pc, #92]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 80044f8:	6853      	ldr	r3, [r2, #4]
 80044fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044fe:	68e1      	ldr	r1, [r4, #12]
 8004500:	430b      	orrs	r3, r1
 8004502:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	f013 0f08 	tst.w	r3, #8
 800450a:	d007      	beq.n	800451c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800450c:	4a11      	ldr	r2, [pc, #68]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 800450e:	6853      	ldr	r3, [r2, #4]
 8004510:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004514:	6921      	ldr	r1, [r4, #16]
 8004516:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800451a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800451c:	f7ff ff42 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <HAL_RCC_ClockConfig+0x15c>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004528:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <HAL_RCC_ClockConfig+0x160>)
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	40d8      	lsrs	r0, r3
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_ClockConfig+0x164>)
 8004530:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_ClockConfig+0x168>)
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	f7fe fb8f 	bl	8002c58 <HAL_InitTick>
  return HAL_OK;
 800453a:	2000      	movs	r0, #0
}
 800453c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800453e:	2001      	movs	r0, #1
}
 8004540:	4770      	bx	lr
    return HAL_ERROR;
 8004542:	2001      	movs	r0, #1
 8004544:	e7fa      	b.n	800453c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004546:	2001      	movs	r0, #1
 8004548:	e7f8      	b.n	800453c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800454a:	2001      	movs	r0, #1
 800454c:	e7f6      	b.n	800453c <HAL_RCC_ClockConfig+0x144>
 800454e:	bf00      	nop
 8004550:	40022000 	.word	0x40022000
 8004554:	40021000 	.word	0x40021000
 8004558:	08009f68 	.word	0x08009f68
 800455c:	20000020 	.word	0x20000020
 8004560:	200007c0 	.word	0x200007c0

08004564 <HAL_RCC_GetHCLKFreq>:
}
 8004564:	4b01      	ldr	r3, [pc, #4]	; (800456c <HAL_RCC_GetHCLKFreq+0x8>)
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000020 	.word	0x20000020

08004570 <HAL_RCC_GetPCLK1Freq>:
{
 8004570:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004572:	f7ff fff7 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800457e:	4a03      	ldr	r2, [pc, #12]	; (800458c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004580:	5cd3      	ldrb	r3, [r2, r3]
}
 8004582:	40d8      	lsrs	r0, r3
 8004584:	bd08      	pop	{r3, pc}
 8004586:	bf00      	nop
 8004588:	40021000 	.word	0x40021000
 800458c:	08009f78 	.word	0x08009f78

08004590 <HAL_RCC_GetPCLK2Freq>:
{
 8004590:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004592:	f7ff ffe7 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 8004596:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800459e:	4a03      	ldr	r2, [pc, #12]	; (80045ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 80045a0:	5cd3      	ldrb	r3, [r2, r3]
}
 80045a2:	40d8      	lsrs	r0, r3
 80045a4:	bd08      	pop	{r3, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	08009f78 	.word	0x08009f78

080045b0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045b0:	230f      	movs	r3, #15
 80045b2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_GetClockConfig+0x34>)
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	f002 0203 	and.w	r2, r2, #3
 80045bc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80045c4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80045cc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045d6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCC_GetClockConfig+0x38>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	600b      	str	r3, [r1, #0]
}
 80045e2:	4770      	bx	lr
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40022000 	.word	0x40022000

080045ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045f2:	6803      	ldr	r3, [r0, #0]
 80045f4:	f013 0f01 	tst.w	r3, #1
 80045f8:	d036      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b3f      	ldr	r3, [pc, #252]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004602:	d149      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	4b3c      	ldr	r3, [pc, #240]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800460c:	61da      	str	r2, [r3, #28]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004618:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461a:	4b38      	ldr	r3, [pc, #224]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004622:	d03b      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004624:	4b34      	ldr	r3, [pc, #208]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004628:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800462c:	d013      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800462e:	6862      	ldr	r2, [r4, #4]
 8004630:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004634:	429a      	cmp	r2, r3
 8004636:	d00e      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004638:	4a2f      	ldr	r2, [pc, #188]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800463a:	6a13      	ldr	r3, [r2, #32]
 800463c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004640:	492f      	ldr	r1, [pc, #188]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004642:	2601      	movs	r6, #1
 8004644:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004648:	2600      	movs	r6, #0
 800464a:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800464e:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004650:	f013 0f01 	tst.w	r3, #1
 8004654:	d136      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004656:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004658:	6a13      	ldr	r3, [r2, #32]
 800465a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465e:	6861      	ldr	r1, [r4, #4]
 8004660:	430b      	orrs	r3, r1
 8004662:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004664:	2d00      	cmp	r5, #0
 8004666:	d13e      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	f013 0f02 	tst.w	r3, #2
 800466e:	d006      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004670:	4a21      	ldr	r2, [pc, #132]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004672:	6853      	ldr	r3, [r2, #4]
 8004674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004678:	68a1      	ldr	r1, [r4, #8]
 800467a:	430b      	orrs	r3, r1
 800467c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	f013 0f10 	tst.w	r3, #16
 8004684:	d034      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004688:	6853      	ldr	r3, [r2, #4]
 800468a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800468e:	68e1      	ldr	r1, [r4, #12]
 8004690:	430b      	orrs	r3, r1
 8004692:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004694:	2000      	movs	r0, #0
 8004696:	e02c      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004698:	2500      	movs	r5, #0
 800469a:	e7be      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469c:	4a17      	ldr	r2, [pc, #92]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80046a6:	f7fe fbe7 	bl	8002e78 <HAL_GetTick>
 80046aa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046b4:	d1b6      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b6:	f7fe fbdf 	bl	8002e78 <HAL_GetTick>
 80046ba:	1b80      	subs	r0, r0, r6
 80046bc:	2864      	cmp	r0, #100	; 0x64
 80046be:	d9f5      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 80046c0:	2003      	movs	r0, #3
 80046c2:	e016      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 80046c4:	f7fe fbd8 	bl	8002e78 <HAL_GetTick>
 80046c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ca:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f013 0f02 	tst.w	r3, #2
 80046d2:	d1c0      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fe fbd0 	bl	8002e78 <HAL_GetTick>
 80046d8:	1b80      	subs	r0, r0, r6
 80046da:	f241 3388 	movw	r3, #5000	; 0x1388
 80046de:	4298      	cmp	r0, r3
 80046e0:	d9f3      	bls.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 80046e2:	2003      	movs	r0, #3
 80046e4:	e005      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e6:	69d3      	ldr	r3, [r2, #28]
 80046e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ec:	61d3      	str	r3, [r2, #28]
 80046ee:	e7bb      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 80046f0:	2000      	movs	r0, #0
}
 80046f2:	b002      	add	sp, #8
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40007000 	.word	0x40007000
 8004700:	42420000 	.word	0x42420000

08004704 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004704:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004706:	2802      	cmp	r0, #2
 8004708:	d04e      	beq.n	80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800470a:	2810      	cmp	r0, #16
 800470c:	d003      	beq.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800470e:	2801      	cmp	r0, #1
 8004710:	d028      	beq.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8004712:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004714:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004718:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004720:	d0f8      	beq.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004722:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004726:	4928      	ldr	r1, [pc, #160]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004728:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800472a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800472e:	d015      	beq.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004730:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004738:	4a24      	ldr	r2, [pc, #144]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800473a:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800473c:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 800473e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004742:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004746:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800474e:	d1e1      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8004750:	0040      	lsls	r0, r0, #1
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8004754:	fba3 3000 	umull	r3, r0, r3, r0
 8004758:	0840      	lsrs	r0, r0, #1
 800475a:	e7db      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800475c:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 800475e:	fb03 f000 	mul.w	r0, r3, r0
 8004762:	e7f0      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004766:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004768:	f240 3202 	movw	r2, #770	; 0x302
 800476c:	401a      	ands	r2, r3
 800476e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004772:	d024      	beq.n	80047be <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477c:	d004      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800477e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004782:	d009      	beq.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004784:	2000      	movs	r0, #0
 8004786:	e7c5      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004788:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800478a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800478c:	f012 0f02 	tst.w	r2, #2
 8004790:	d0f5      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8004792:	f649 4040 	movw	r0, #40000	; 0x9c40
 8004796:	e7bd      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80047a0:	d0b8      	beq.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 80047a2:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 80047a6:	e7b5      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80047a8:	f7ff fef2 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80047b4:	3301      	adds	r3, #1
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80047bc:	e7aa      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 80047be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80047c2:	e7a7      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80047c4:	40021000 	.word	0x40021000
 80047c8:	08009f94 	.word	0x08009f94
 80047cc:	08009fa4 	.word	0x08009fa4
 80047d0:	007a1200 	.word	0x007a1200
 80047d4:	aaaaaaab 	.word	0xaaaaaaab
 80047d8:	003d0900 	.word	0x003d0900

080047dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	4605      	mov	r5, r0
 80047e4:	4688      	mov	r8, r1
 80047e6:	4617      	mov	r7, r2
 80047e8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047ea:	f7fe fb45 	bl	8002e78 <HAL_GetTick>
 80047ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f0:	1a1b      	subs	r3, r3, r0
 80047f2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80047f6:	f7fe fb3f 	bl	8002e78 <HAL_GetTick>
 80047fa:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047fc:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004804:	fb09 f303 	mul.w	r3, r9, r3
 8004808:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	689c      	ldr	r4, [r3, #8]
 800480e:	ea38 0404 	bics.w	r4, r8, r4
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	42bb      	cmp	r3, r7
 800481a:	d040      	beq.n	800489e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800481c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004820:	d0f3      	beq.n	800480a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004822:	f7fe fb29 	bl	8002e78 <HAL_GetTick>
 8004826:	eba0 000a 	sub.w	r0, r0, sl
 800482a:	4548      	cmp	r0, r9
 800482c:	d20a      	bcs.n	8004844 <SPI_WaitFlagStateUntilTimeout+0x68>
 800482e:	f1b9 0f00 	cmp.w	r9, #0
 8004832:	d007      	beq.n	8004844 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004834:	9a01      	ldr	r2, [sp, #4]
 8004836:	b102      	cbz	r2, 800483a <SPI_WaitFlagStateUntilTimeout+0x5e>
 8004838:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800483a:	9b01      	ldr	r3, [sp, #4]
 800483c:	3b01      	subs	r3, #1
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	4691      	mov	r9, r2
 8004842:	e7e2      	b.n	800480a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004844:	682a      	ldr	r2, [r5, #0]
 8004846:	6853      	ldr	r3, [r2, #4]
 8004848:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800484c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800484e:	686b      	ldr	r3, [r5, #4]
 8004850:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004854:	d00b      	beq.n	800486e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004856:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485c:	d014      	beq.n	8004888 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800485e:	2301      	movs	r3, #1
 8004860:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004864:	2300      	movs	r3, #0
 8004866:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 800486a:	2003      	movs	r0, #3
 800486c:	e018      	b.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800486e:	68ab      	ldr	r3, [r5, #8]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	d002      	beq.n	800487c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487a:	d1ec      	bne.n	8004856 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800487c:	682a      	ldr	r2, [r5, #0]
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e7e6      	b.n	8004856 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004888:	682a      	ldr	r2, [r5, #0]
 800488a:	6813      	ldr	r3, [r2, #0]
 800488c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	682a      	ldr	r2, [r5, #0]
 8004894:	6813      	ldr	r3, [r2, #0]
 8004896:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e7df      	b.n	800485e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800489e:	2000      	movs	r0, #0
}
 80048a0:	b002      	add	sp, #8
 80048a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a6:	bf00      	nop
 80048a8:	20000020 	.word	0x20000020

080048ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b510      	push	{r4, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	4604      	mov	r4, r0
 80048b2:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	9200      	str	r2, [sp, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	f7ff ff8f 	bl	80047dc <SPI_WaitFlagStateUntilTimeout>
 80048be:	b908      	cbnz	r0, 80048c4 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80048c0:	b002      	add	sp, #8
 80048c2:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80048c6:	f043 0320 	orr.w	r3, r3, #32
 80048ca:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80048cc:	2003      	movs	r0, #3
 80048ce:	e7f7      	b.n	80048c0 <SPI_EndRxTxTransaction+0x14>

080048d0 <SPI_EndRxTransaction>:
{
 80048d0:	b510      	push	{r4, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	4604      	mov	r4, r0
 80048d6:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d8:	6841      	ldr	r1, [r0, #4]
 80048da:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80048de:	d010      	beq.n	8004902 <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80048e0:	6861      	ldr	r1, [r4, #4]
 80048e2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80048e6:	d103      	bne.n	80048f0 <SPI_EndRxTransaction+0x20>
 80048e8:	68a1      	ldr	r1, [r4, #8]
 80048ea:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80048ee:	d015      	beq.n	800491c <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048f0:	9200      	str	r2, [sp, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2180      	movs	r1, #128	; 0x80
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff ff70 	bl	80047dc <SPI_WaitFlagStateUntilTimeout>
 80048fc:	b9e0      	cbnz	r0, 8004938 <SPI_EndRxTransaction+0x68>
}
 80048fe:	b002      	add	sp, #8
 8004900:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004902:	6881      	ldr	r1, [r0, #8]
 8004904:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004908:	d002      	beq.n	8004910 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800490a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800490e:	d1e7      	bne.n	80048e0 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004910:	6820      	ldr	r0, [r4, #0]
 8004912:	6801      	ldr	r1, [r0, #0]
 8004914:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004918:	6001      	str	r1, [r0, #0]
 800491a:	e7e1      	b.n	80048e0 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800491c:	9200      	str	r2, [sp, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	2101      	movs	r1, #1
 8004922:	4620      	mov	r0, r4
 8004924:	f7ff ff5a 	bl	80047dc <SPI_WaitFlagStateUntilTimeout>
 8004928:	2800      	cmp	r0, #0
 800492a:	d0e8      	beq.n	80048fe <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800492e:	f043 0320 	orr.w	r3, r3, #32
 8004932:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004934:	2003      	movs	r0, #3
 8004936:	e7e2      	b.n	80048fe <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004938:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800493a:	f043 0320 	orr.w	r3, r3, #32
 800493e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004940:	2003      	movs	r0, #3
 8004942:	e7dc      	b.n	80048fe <SPI_EndRxTransaction+0x2e>

08004944 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004944:	2800      	cmp	r0, #0
 8004946:	d056      	beq.n	80049f6 <HAL_SPI_Init+0xb2>
{
 8004948:	b510      	push	{r4, lr}
 800494a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800494c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800494e:	b933      	cbnz	r3, 800495e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004950:	6843      	ldr	r3, [r0, #4]
 8004952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004956:	d005      	beq.n	8004964 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004958:	2300      	movs	r3, #0
 800495a:	61c3      	str	r3, [r0, #28]
 800495c:	e002      	b.n	8004964 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800495e:	2300      	movs	r3, #0
 8004960:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004962:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004964:	2300      	movs	r3, #0
 8004966:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004968:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800496c:	2b00      	cmp	r3, #0
 800496e:	d03c      	beq.n	80049ea <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004970:	2302      	movs	r3, #2
 8004972:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	6813      	ldr	r3, [r2, #0]
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004986:	68a2      	ldr	r2, [r4, #8]
 8004988:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800498c:	4313      	orrs	r3, r2
 800498e:	68e2      	ldr	r2, [r4, #12]
 8004990:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004994:	4313      	orrs	r3, r2
 8004996:	6922      	ldr	r2, [r4, #16]
 8004998:	f002 0202 	and.w	r2, r2, #2
 800499c:	4313      	orrs	r3, r2
 800499e:	6962      	ldr	r2, [r4, #20]
 80049a0:	f002 0201 	and.w	r2, r2, #1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	69a2      	ldr	r2, [r4, #24]
 80049a8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80049ac:	4313      	orrs	r3, r2
 80049ae:	69e2      	ldr	r2, [r4, #28]
 80049b0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80049b4:	4313      	orrs	r3, r2
 80049b6:	6a22      	ldr	r2, [r4, #32]
 80049b8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80049bc:	4313      	orrs	r3, r2
 80049be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80049c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80049c4:	6821      	ldr	r1, [r4, #0]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049ca:	8b63      	ldrh	r3, [r4, #26]
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	69d3      	ldr	r3, [r2, #28]
 80049d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049dc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049de:	2000      	movs	r0, #0
 80049e0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80049e8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80049ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80049ee:	4620      	mov	r0, r4
 80049f0:	f7fe f8a2 	bl	8002b38 <HAL_SPI_MspInit>
 80049f4:	e7bc      	b.n	8004970 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80049f6:	2001      	movs	r0, #1
}
 80049f8:	4770      	bx	lr

080049fa <HAL_SPI_Transmit>:
{
 80049fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049fe:	b083      	sub	sp, #12
 8004a00:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004a02:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	f000 80d1 	beq.w	8004bae <HAL_SPI_Transmit+0x1b4>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	4688      	mov	r8, r1
 8004a10:	4691      	mov	r9, r2
 8004a12:	2301      	movs	r3, #1
 8004a14:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004a18:	f7fe fa2e 	bl	8002e78 <HAL_GetTick>
 8004a1c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a1e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8004a22:	b2f6      	uxtb	r6, r6
 8004a24:	2e01      	cmp	r6, #1
 8004a26:	f040 80ba 	bne.w	8004b9e <HAL_SPI_Transmit+0x1a4>
  if ((pData == NULL) || (Size == 0U))
 8004a2a:	f1b8 0f00 	cmp.w	r8, #0
 8004a2e:	f000 80b7 	beq.w	8004ba0 <HAL_SPI_Transmit+0x1a6>
 8004a32:	f1b9 0f00 	cmp.w	r9, #0
 8004a36:	f000 80b3 	beq.w	8004ba0 <HAL_SPI_Transmit+0x1a6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a44:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a48:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a4c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a50:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a52:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a54:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a56:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a58:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a60:	d01e      	beq.n	8004aa0 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004a6a:	d103      	bne.n	8004a74 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a72:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a74:	68e3      	ldr	r3, [r4, #12]
 8004a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7a:	d01c      	beq.n	8004ab6 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	b113      	cbz	r3, 8004a86 <HAL_SPI_Transmit+0x8c>
 8004a80:	f1b9 0f01 	cmp.w	r9, #1
 8004a84:	d155      	bne.n	8004b32 <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	7812      	ldrb	r2, [r2, #0]
 8004a8c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a90:	3301      	adds	r3, #1
 8004a92:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004a94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004a9e:	e048      	b.n	8004b32 <HAL_SPI_Transmit+0x138>
    __HAL_SPI_DISABLE(hspi);
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004aaa:	6822      	ldr	r2, [r4, #0]
 8004aac:	6813      	ldr	r3, [r2, #0]
 8004aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e7d5      	b.n	8004a62 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab6:	6863      	ldr	r3, [r4, #4]
 8004ab8:	b113      	cbz	r3, 8004ac0 <HAL_SPI_Transmit+0xc6>
 8004aba:	f1b9 0f01 	cmp.w	r9, #1
 8004abe:	d115      	bne.n	8004aec <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	8812      	ldrh	r2, [r2, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004aca:	3302      	adds	r3, #2
 8004acc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ace:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004ad8:	e008      	b.n	8004aec <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ada:	f7fe f9cd 	bl	8002e78 <HAL_GetTick>
 8004ade:	1bc0      	subs	r0, r0, r7
 8004ae0:	42a8      	cmp	r0, r5
 8004ae2:	d302      	bcc.n	8004aea <HAL_SPI_Transmit+0xf0>
 8004ae4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ae8:	d115      	bne.n	8004b16 <HAL_SPI_Transmit+0x11c>
 8004aea:	b1a5      	cbz	r5, 8004b16 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 8004aec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d03c      	beq.n	8004b6e <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	f012 0f02 	tst.w	r2, #2
 8004afc:	d0ed      	beq.n	8004ada <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b00:	8812      	ldrh	r2, [r2, #0]
 8004b02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b06:	3302      	adds	r3, #2
 8004b08:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004b14:	e7ea      	b.n	8004aec <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004b1c:	2603      	movs	r6, #3
          goto error;
 8004b1e:	e03f      	b.n	8004ba0 <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b20:	f7fe f9aa 	bl	8002e78 <HAL_GetTick>
 8004b24:	1bc0      	subs	r0, r0, r7
 8004b26:	42a8      	cmp	r0, r5
 8004b28:	d302      	bcc.n	8004b30 <HAL_SPI_Transmit+0x136>
 8004b2a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004b2e:	d119      	bne.n	8004b64 <HAL_SPI_Transmit+0x16a>
 8004b30:	b1c5      	cbz	r5, 8004b64 <HAL_SPI_Transmit+0x16a>
    while (hspi->TxXferCount > 0U)
 8004b32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	b1d3      	cbz	r3, 8004b6e <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	f012 0f02 	tst.w	r2, #2
 8004b40:	d0ee      	beq.n	8004b20 <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b42:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004b44:	7812      	ldrb	r2, [r2, #0]
 8004b46:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b4e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8004b52:	fa1f fc8c 	uxth.w	ip, ip
 8004b56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b5a:	fa1f fc8c 	uxth.w	ip, ip
 8004b5e:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8004b62:	e7e6      	b.n	8004b32 <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004b6a:	2603      	movs	r6, #3
          goto error;
 8004b6c:	e018      	b.n	8004ba0 <HAL_SPI_Transmit+0x1a6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b6e:	463a      	mov	r2, r7
 8004b70:	4629      	mov	r1, r5
 8004b72:	4620      	mov	r0, r4
 8004b74:	f7ff fe9a 	bl	80048ac <SPI_EndRxTxTransaction>
 8004b78:	b108      	cbz	r0, 8004b7e <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b7e:	68a3      	ldr	r3, [r4, #8]
 8004b80:	b933      	cbnz	r3, 8004b90 <HAL_SPI_Transmit+0x196>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	9201      	str	r2, [sp, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	9301      	str	r3, [sp, #4]
 8004b8e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b92:	b92b      	cbnz	r3, 8004ba0 <HAL_SPI_Transmit+0x1a6>
    hspi->State = HAL_SPI_STATE_READY;
 8004b94:	2301      	movs	r3, #1
 8004b96:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b9a:	2600      	movs	r6, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_SPI_Transmit+0x1a6>
    errorcode = HAL_BUSY;
 8004b9e:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	b003      	add	sp, #12
 8004baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8004bae:	2602      	movs	r6, #2
 8004bb0:	e7f9      	b.n	8004ba6 <HAL_SPI_Transmit+0x1ac>

08004bb2 <HAL_SPI_TransmitReceive>:
{
 8004bb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	461f      	mov	r7, r3
 8004bba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004bbc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f000 8116 	beq.w	8004df2 <HAL_SPI_TransmitReceive+0x240>
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4688      	mov	r8, r1
 8004bca:	4691      	mov	r9, r2
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004bd2:	f7fe f951 	bl	8002e78 <HAL_GetTick>
 8004bd6:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004bd8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004bdc:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8004bde:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d00a      	beq.n	8004bfa <HAL_SPI_TransmitReceive+0x48>
 8004be4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004be8:	f040 80f0 	bne.w	8004dcc <HAL_SPI_TransmitReceive+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bec:	68a2      	ldr	r2, [r4, #8]
 8004bee:	2a00      	cmp	r2, #0
 8004bf0:	f040 80f3 	bne.w	8004dda <HAL_SPI_TransmitReceive+0x228>
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	f040 80f2 	bne.w	8004dde <HAL_SPI_TransmitReceive+0x22c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bfa:	f1b8 0f00 	cmp.w	r8, #0
 8004bfe:	f000 80f0 	beq.w	8004de2 <HAL_SPI_TransmitReceive+0x230>
 8004c02:	f1b9 0f00 	cmp.w	r9, #0
 8004c06:	f000 80ee 	beq.w	8004de6 <HAL_SPI_TransmitReceive+0x234>
 8004c0a:	2f00      	cmp	r7, #0
 8004c0c:	f000 80ed 	beq.w	8004dea <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c10:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c1a:	2305      	movs	r3, #5
 8004c1c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c24:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c28:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c2a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c2c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c30:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c32:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8004c34:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c36:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004c40:	d103      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c4a:	68e3      	ldr	r3, [r4, #12]
 8004c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c50:	d011      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c52:	6863      	ldr	r3, [r4, #4]
 8004c54:	b10b      	cbz	r3, 8004c5a <HAL_SPI_TransmitReceive+0xa8>
 8004c56:	2f01      	cmp	r7, #1
 8004c58:	d10b      	bne.n	8004c72 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c64:	3301      	adds	r3, #1
 8004c66:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004c68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004c72:	2701      	movs	r7, #1
 8004c74:	e06e      	b.n	8004d54 <HAL_SPI_TransmitReceive+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c76:	6863      	ldr	r3, [r4, #4]
 8004c78:	b10b      	cbz	r3, 8004c7e <HAL_SPI_TransmitReceive+0xcc>
 8004c7a:	2f01      	cmp	r7, #1
 8004c7c:	d10b      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	8812      	ldrh	r2, [r2, #0]
 8004c84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c88:	3302      	adds	r3, #2
 8004c8a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004c8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004c96:	2701      	movs	r7, #1
 8004c98:	e01b      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	f012 0f01 	tst.w	r2, #1
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x110>
 8004ca4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	b15a      	cbz	r2, 8004cc2 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004cb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004cc0:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cc2:	f7fe f8d9 	bl	8002e78 <HAL_GetTick>
 8004cc6:	1b80      	subs	r0, r0, r6
 8004cc8:	42a8      	cmp	r0, r5
 8004cca:	d302      	bcc.n	8004cd2 <HAL_SPI_TransmitReceive+0x120>
 8004ccc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004cd0:	d11e      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	b91b      	cbnz	r3, 8004ce0 <HAL_SPI_TransmitReceive+0x12e>
 8004cd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05c      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	f012 0f02 	tst.w	r2, #2
 8004ce8:	d0d7      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0xe8>
 8004cea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004cec:	b292      	uxth	r2, r2
 8004cee:	2a00      	cmp	r2, #0
 8004cf0:	d0d3      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0xe8>
 8004cf2:	2f00      	cmp	r7, #0
 8004cf4:	d0d1      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004cf8:	8812      	ldrh	r2, [r2, #0]
 8004cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cfe:	3302      	adds	r3, #2
 8004d00:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004d0c:	2700      	movs	r7, #0
 8004d0e:	e7c4      	b.n	8004c9a <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8004d16:	2003      	movs	r0, #3
        goto error;
 8004d18:	e059      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	f012 0f01 	tst.w	r2, #1
 8004d22:	d00e      	beq.n	8004d42 <HAL_SPI_TransmitReceive+0x190>
 8004d24:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004d26:	b292      	uxth	r2, r2
 8004d28:	b15a      	cbz	r2, 8004d42 <HAL_SPI_TransmitReceive+0x190>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d32:	3301      	adds	r3, #1
 8004d34:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004d36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004d40:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d42:	f7fe f899 	bl	8002e78 <HAL_GetTick>
 8004d46:	1b83      	subs	r3, r0, r6
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	d302      	bcc.n	8004d52 <HAL_SPI_TransmitReceive+0x1a0>
 8004d4c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004d50:	d11e      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x1de>
 8004d52:	b1ed      	cbz	r5, 8004d90 <HAL_SPI_TransmitReceive+0x1de>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	b913      	cbnz	r3, 8004d60 <HAL_SPI_TransmitReceive+0x1ae>
 8004d5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	b1e3      	cbz	r3, 8004d9a <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	f012 0f02 	tst.w	r2, #2
 8004d68:	d0d7      	beq.n	8004d1a <HAL_SPI_TransmitReceive+0x168>
 8004d6a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004d6c:	b292      	uxth	r2, r2
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	d0d3      	beq.n	8004d1a <HAL_SPI_TransmitReceive+0x168>
 8004d72:	2f00      	cmp	r7, #0
 8004d74:	d0d1      	beq.n	8004d1a <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d78:	7812      	ldrb	r2, [r2, #0]
 8004d7a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004d7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d7e:	3301      	adds	r3, #1
 8004d80:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004d8c:	2700      	movs	r7, #0
 8004d8e:	e7c4      	b.n	8004d1a <HAL_SPI_TransmitReceive+0x168>
        hspi->State = HAL_SPI_STATE_READY;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8004d96:	2003      	movs	r0, #3
        goto error;
 8004d98:	e019      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d9a:	4632      	mov	r2, r6
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff fd84 	bl	80048ac <SPI_EndRxTxTransaction>
 8004da4:	b970      	cbnz	r0, 8004dc4 <HAL_SPI_TransmitReceive+0x212>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004da6:	68a3      	ldr	r3, [r4, #8]
 8004da8:	b933      	cbnz	r3, 8004db8 <HAL_SPI_TransmitReceive+0x206>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	9201      	str	r2, [sp, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004dba:	b9c3      	cbnz	r3, 8004dee <HAL_SPI_TransmitReceive+0x23c>
    hspi->State = HAL_SPI_STATE_READY;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8004dc2:	e004      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004dc8:	2001      	movs	r0, #1
    goto error;
 8004dca:	e000      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_BUSY;
 8004dcc:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004dd4:	b003      	add	sp, #12
 8004dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8004dda:	2002      	movs	r0, #2
 8004ddc:	e7f7      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
 8004dde:	2002      	movs	r0, #2
 8004de0:	e7f5      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8004de2:	2001      	movs	r0, #1
 8004de4:	e7f3      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
 8004de6:	2001      	movs	r0, #1
 8004de8:	e7f1      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
 8004dea:	2001      	movs	r0, #1
 8004dec:	e7ef      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8004dee:	2001      	movs	r0, #1
 8004df0:	e7ed      	b.n	8004dce <HAL_SPI_TransmitReceive+0x21c>
  __HAL_LOCK(hspi);
 8004df2:	2002      	movs	r0, #2
 8004df4:	e7ee      	b.n	8004dd4 <HAL_SPI_TransmitReceive+0x222>

08004df6 <HAL_SPI_Receive>:
{
 8004df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004dfe:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
 8004e02:	b2f6      	uxtb	r6, r6
 8004e04:	2e01      	cmp	r6, #1
 8004e06:	f040 80ab 	bne.w	8004f60 <HAL_SPI_Receive+0x16a>
 8004e0a:	4688      	mov	r8, r1
 8004e0c:	4691      	mov	r9, r2
 8004e0e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e10:	6843      	ldr	r3, [r0, #4]
 8004e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e16:	d032      	beq.n	8004e7e <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8004e18:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	f000 80a7 	beq.w	8004f70 <HAL_SPI_Receive+0x17a>
 8004e22:	2301      	movs	r3, #1
 8004e24:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004e28:	f7fe f826 	bl	8002e78 <HAL_GetTick>
 8004e2c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8004e2e:	f1b8 0f00 	cmp.w	r8, #0
 8004e32:	f000 8096 	beq.w	8004f62 <HAL_SPI_Receive+0x16c>
 8004e36:	f1b9 0f00 	cmp.w	r9, #0
 8004e3a:	f000 8092 	beq.w	8004f62 <HAL_SPI_Receive+0x16c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e3e:	2304      	movs	r3, #4
 8004e40:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e44:	2300      	movs	r3, #0
 8004e46:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e48:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e4c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e50:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e54:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e56:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e58:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e5a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e5c:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e64:	d018      	beq.n	8004e98 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e6e:	d103      	bne.n	8004e78 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e76:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e78:	68e3      	ldr	r3, [r4, #12]
 8004e7a:	b30b      	cbz	r3, 8004ec0 <HAL_SPI_Receive+0xca>
 8004e7c:	e043      	b.n	8004f06 <HAL_SPI_Receive+0x110>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e7e:	6883      	ldr	r3, [r0, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1c9      	bne.n	8004e18 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e84:	2304      	movs	r3, #4
 8004e86:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e8a:	9500      	str	r5, [sp, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	460a      	mov	r2, r1
 8004e90:	f7ff fe8f 	bl	8004bb2 <HAL_SPI_TransmitReceive>
 8004e94:	4606      	mov	r6, r0
 8004e96:	e067      	b.n	8004f68 <HAL_SPI_Receive+0x172>
    __HAL_SPI_DISABLE(hspi);
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea0:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	6813      	ldr	r3, [r2, #0]
 8004ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	e7db      	b.n	8004e66 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eae:	f7fd ffe3 	bl	8002e78 <HAL_GetTick>
 8004eb2:	1bc0      	subs	r0, r0, r7
 8004eb4:	42a8      	cmp	r0, r5
 8004eb6:	d302      	bcc.n	8004ebe <HAL_SPI_Receive+0xc8>
 8004eb8:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ebc:	d115      	bne.n	8004eea <HAL_SPI_Receive+0xf4>
 8004ebe:	b1a5      	cbz	r5, 8004eea <HAL_SPI_Receive+0xf4>
    while (hspi->RxXferCount > 0U)
 8004ec0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d03c      	beq.n	8004f42 <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	f012 0f01 	tst.w	r2, #1
 8004ed0:	d0ed      	beq.n	8004eae <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ed2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ed4:	7b1b      	ldrb	r3, [r3, #12]
 8004ed6:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ed8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eda:	3301      	adds	r3, #1
 8004edc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004ede:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004ee8:	e7ea      	b.n	8004ec0 <HAL_SPI_Receive+0xca>
          hspi->State = HAL_SPI_STATE_READY;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004ef0:	2603      	movs	r6, #3
          goto error;
 8004ef2:	e036      	b.n	8004f62 <HAL_SPI_Receive+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef4:	f7fd ffc0 	bl	8002e78 <HAL_GetTick>
 8004ef8:	1bc0      	subs	r0, r0, r7
 8004efa:	42a8      	cmp	r0, r5
 8004efc:	d302      	bcc.n	8004f04 <HAL_SPI_Receive+0x10e>
 8004efe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004f02:	d119      	bne.n	8004f38 <HAL_SPI_Receive+0x142>
 8004f04:	b1c5      	cbz	r5, 8004f38 <HAL_SPI_Receive+0x142>
    while (hspi->RxXferCount > 0U)
 8004f06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	b1d3      	cbz	r3, 8004f42 <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	f012 0f01 	tst.w	r2, #1
 8004f14:	d0ee      	beq.n	8004ef4 <HAL_SPI_Receive+0xfe>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f1e:	3302      	adds	r3, #2
 8004f20:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004f22:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8004f26:	fa1f fc8c 	uxth.w	ip, ip
 8004f2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004f2e:	fa1f fc8c 	uxth.w	ip, ip
 8004f32:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8004f36:	e7e6      	b.n	8004f06 <HAL_SPI_Receive+0x110>
          hspi->State = HAL_SPI_STATE_READY;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004f3e:	2603      	movs	r6, #3
          goto error;
 8004f40:	e00f      	b.n	8004f62 <HAL_SPI_Receive+0x16c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f42:	463a      	mov	r2, r7
 8004f44:	4629      	mov	r1, r5
 8004f46:	4620      	mov	r0, r4
 8004f48:	f7ff fcc2 	bl	80048d0 <SPI_EndRxTransaction>
 8004f4c:	b108      	cbz	r0, 8004f52 <HAL_SPI_Receive+0x15c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f4e:	2320      	movs	r3, #32
 8004f50:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f54:	b92b      	cbnz	r3, 8004f62 <HAL_SPI_Receive+0x16c>
    hspi->State = HAL_SPI_STATE_READY;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	e000      	b.n	8004f62 <HAL_SPI_Receive+0x16c>
    errorcode = HAL_BUSY;
 8004f60:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8004f62:	2300      	movs	r3, #0
 8004f64:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004f68:	4630      	mov	r0, r6
 8004f6a:	b003      	add	sp, #12
 8004f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8004f70:	2602      	movs	r6, #2
 8004f72:	e7f9      	b.n	8004f68 <HAL_SPI_Receive+0x172>

08004f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f76:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f78:	6a03      	ldr	r3, [r0, #32]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f82:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f84:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	680c      	ldr	r4, [r1, #0]
 8004f8a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f8c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f90:	688b      	ldr	r3, [r1, #8]
 8004f92:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f94:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <TIM_OC1_SetConfig+0x58>)
 8004f96:	4290      	cmp	r0, r2
 8004f98:	d009      	beq.n	8004fae <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <TIM_OC1_SetConfig+0x58>)
 8004f9c:	4290      	cmp	r0, r2
 8004f9e:	d00d      	beq.n	8004fbc <TIM_OC1_SetConfig+0x48>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa2:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fa4:	684a      	ldr	r2, [r1, #4]
 8004fa6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa8:	6203      	str	r3, [r0, #32]
}
 8004faa:	bc30      	pop	{r4, r5}
 8004fac:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fae:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004fb2:	68ca      	ldr	r2, [r1, #12]
 8004fb4:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fb6:	f022 0304 	bic.w	r3, r2, #4
 8004fba:	e7ee      	b.n	8004f9a <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fbc:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc0:	694a      	ldr	r2, [r1, #20]
 8004fc2:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fc4:	698d      	ldr	r5, [r1, #24]
 8004fc6:	4315      	orrs	r5, r2
 8004fc8:	e7ea      	b.n	8004fa0 <TIM_OC1_SetConfig+0x2c>
 8004fca:	bf00      	nop
 8004fcc:	40012c00 	.word	0x40012c00

08004fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fd4:	6a02      	ldr	r2, [r0, #32]
 8004fd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fda:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fde:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fe0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	680d      	ldr	r5, [r1, #0]
 8004fe6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fec:	688a      	ldr	r2, [r1, #8]
 8004fee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff2:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <TIM_OC3_SetConfig+0x60>)
 8004ff4:	4290      	cmp	r0, r2
 8004ff6:	d009      	beq.n	800500c <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <TIM_OC3_SetConfig+0x60>)
 8004ffa:	4290      	cmp	r0, r2
 8004ffc:	d00e      	beq.n	800501c <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005000:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005002:	684a      	ldr	r2, [r1, #4]
 8005004:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005006:	6203      	str	r3, [r0, #32]
}
 8005008:	bc30      	pop	{r4, r5}
 800500a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800500c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005010:	68ca      	ldr	r2, [r1, #12]
 8005012:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501a:	e7ed      	b.n	8004ff8 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005020:	694a      	ldr	r2, [r1, #20]
 8005022:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005026:	698a      	ldr	r2, [r1, #24]
 8005028:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800502c:	e7e7      	b.n	8004ffe <TIM_OC3_SetConfig+0x2e>
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00

08005034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005038:	6a02      	ldr	r2, [r0, #32]
 800503a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800503e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005042:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005044:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005048:	680d      	ldr	r5, [r1, #0]
 800504a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800504e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005052:	688d      	ldr	r5, [r1, #8]
 8005054:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005058:	4d07      	ldr	r5, [pc, #28]	; (8005078 <TIM_OC4_SetConfig+0x44>)
 800505a:	42a8      	cmp	r0, r5
 800505c:	d006      	beq.n	800506c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005060:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005062:	684a      	ldr	r2, [r1, #4]
 8005064:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	6203      	str	r3, [r0, #32]
}
 8005068:	bc30      	pop	{r4, r5}
 800506a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800506c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005070:	694d      	ldr	r5, [r1, #20]
 8005072:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005076:	e7f2      	b.n	800505e <TIM_OC4_SetConfig+0x2a>
 8005078:	40012c00 	.word	0x40012c00

0800507c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800507e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005080:	6a04      	ldr	r4, [r0, #32]
 8005082:	f024 0401 	bic.w	r4, r4, #1
 8005086:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005088:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800508a:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800508e:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005092:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8005096:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005098:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800509a:	6203      	str	r3, [r0, #32]
}
 800509c:	bc10      	pop	{r4}
 800509e:	4770      	bx	lr

080050a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050a0:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050a2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a4:	6a04      	ldr	r4, [r0, #32]
 80050a6:	f024 0410 	bic.w	r4, r4, #16
 80050aa:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ac:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ae:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050b2:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80050c0:	6203      	str	r3, [r0, #32]
}
 80050c2:	bc10      	pop	{r4}
 80050c4:	4770      	bx	lr

080050c6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050c6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050cc:	430b      	orrs	r3, r1
 80050ce:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050d2:	6083      	str	r3, [r0, #8]
}
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80050d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d127      	bne.n	8005132 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80050e2:	2302      	movs	r3, #2
 80050e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050e8:	6802      	ldr	r2, [r0, #0]
 80050ea:	68d3      	ldr	r3, [r2, #12]
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	6803      	ldr	r3, [r0, #0]
 80050f4:	4a11      	ldr	r2, [pc, #68]	; (800513c <HAL_TIM_Base_Start_IT+0x64>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d010      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x44>
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fe:	d00d      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x44>
 8005100:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x44>
 8005108:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800510c:	4293      	cmp	r3, r2
 800510e:	d005      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005118:	2000      	movs	r0, #0
 800511a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005122:	2a06      	cmp	r2, #6
 8005124:	d007      	beq.n	8005136 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	f042 0201 	orr.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800512e:	2000      	movs	r0, #0
 8005130:	4770      	bx	lr
    return HAL_ERROR;
 8005132:	2001      	movs	r0, #1
 8005134:	4770      	bx	lr
  return HAL_OK;
 8005136:	2000      	movs	r0, #0
}
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40012c00 	.word	0x40012c00

08005140 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005140:	6802      	ldr	r2, [r0, #0]
 8005142:	68d3      	ldr	r3, [r2, #12]
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 800514a:	6803      	ldr	r3, [r0, #0]
 800514c:	6a19      	ldr	r1, [r3, #32]
 800514e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005152:	4211      	tst	r1, r2
 8005154:	d108      	bne.n	8005168 <HAL_TIM_Base_Stop_IT+0x28>
 8005156:	6a19      	ldr	r1, [r3, #32]
 8005158:	f240 4244 	movw	r2, #1092	; 0x444
 800515c:	4211      	tst	r1, r2
 800515e:	d103      	bne.n	8005168 <HAL_TIM_Base_Stop_IT+0x28>
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005168:	2301      	movs	r3, #1
 800516a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800516e:	2000      	movs	r0, #0
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_PWM_MspInit>:
}
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_IC_CaptureCallback>:
}
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005178:	4770      	bx	lr

0800517a <HAL_TIM_TriggerCallback>:
}
 800517a:	4770      	bx	lr

0800517c <HAL_TIM_IRQHandler>:
{
 800517c:	b510      	push	{r4, lr}
 800517e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005180:	6803      	ldr	r3, [r0, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	f012 0f02 	tst.w	r2, #2
 8005188:	d011      	beq.n	80051ae <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	f012 0f02 	tst.w	r2, #2
 8005190:	d00d      	beq.n	80051ae <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005192:	f06f 0202 	mvn.w	r2, #2
 8005196:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005198:	2301      	movs	r3, #1
 800519a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800519c:	6803      	ldr	r3, [r0, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f013 0f03 	tst.w	r3, #3
 80051a4:	d070      	beq.n	8005288 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	f7ff ffe6 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	2300      	movs	r3, #0
 80051ac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	f012 0f04 	tst.w	r2, #4
 80051b6:	d012      	beq.n	80051de <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	f012 0f04 	tst.w	r2, #4
 80051be:	d00e      	beq.n	80051de <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051c0:	f06f 0204 	mvn.w	r2, #4
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c6:	2302      	movs	r3, #2
 80051c8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f413 7f40 	tst.w	r3, #768	; 0x300
 80051d2:	d05f      	beq.n	8005294 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff ffce 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	2300      	movs	r3, #0
 80051dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	f012 0f08 	tst.w	r2, #8
 80051e6:	d012      	beq.n	800520e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	f012 0f08 	tst.w	r2, #8
 80051ee:	d00e      	beq.n	800520e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051f0:	f06f 0208 	mvn.w	r2, #8
 80051f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051f6:	2304      	movs	r3, #4
 80051f8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f013 0f03 	tst.w	r3, #3
 8005202:	d04e      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff ffb6 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	2300      	movs	r3, #0
 800520c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	f012 0f10 	tst.w	r2, #16
 8005216:	d012      	beq.n	800523e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	f012 0f10 	tst.w	r2, #16
 800521e:	d00e      	beq.n	800523e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005220:	f06f 0210 	mvn.w	r2, #16
 8005224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005226:	2308      	movs	r3, #8
 8005228:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005232:	d03d      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005234:	4620      	mov	r0, r4
 8005236:	f7ff ff9e 	bl	8005176 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	2300      	movs	r3, #0
 800523c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	f012 0f01 	tst.w	r2, #1
 8005246:	d003      	beq.n	8005250 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	f012 0f01 	tst.w	r2, #1
 800524e:	d136      	bne.n	80052be <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005260:	d134      	bne.n	80052cc <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	f012 0f40 	tst.w	r2, #64	; 0x40
 800526a:	d003      	beq.n	8005274 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005272:	d132      	bne.n	80052da <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	f012 0f20 	tst.w	r2, #32
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	f012 0f20 	tst.w	r2, #32
 8005284:	d130      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x16c>
}
 8005286:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005288:	f7ff ff74 	bl	8005174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	4620      	mov	r0, r4
 800528e:	f7ff ff73 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
 8005292:	e78a      	b.n	80051aa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005294:	4620      	mov	r0, r4
 8005296:	f7ff ff6d 	bl	8005174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529a:	4620      	mov	r0, r4
 800529c:	f7ff ff6c 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
 80052a0:	e79b      	b.n	80051da <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a2:	4620      	mov	r0, r4
 80052a4:	f7ff ff66 	bl	8005174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7ff ff65 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
 80052ae:	e7ac      	b.n	800520a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7ff ff5f 	bl	8005174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b6:	4620      	mov	r0, r4
 80052b8:	f7ff ff5e 	bl	8005178 <HAL_TIM_PWM_PulseFinishedCallback>
 80052bc:	e7bd      	b.n	800523a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052be:	f06f 0201 	mvn.w	r2, #1
 80052c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80052c4:	4620      	mov	r0, r4
 80052c6:	f7fb fda9 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
 80052ca:	e7c1      	b.n	8005250 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 fac3 	bl	800585e <HAL_TIMEx_BreakCallback>
 80052d8:	e7c3      	b.n	8005262 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052de:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80052e0:	4620      	mov	r0, r4
 80052e2:	f7ff ff4a 	bl	800517a <HAL_TIM_TriggerCallback>
 80052e6:	e7c5      	b.n	8005274 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052e8:	f06f 0220 	mvn.w	r2, #32
 80052ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80052ee:	4620      	mov	r0, r4
 80052f0:	f000 fab4 	bl	800585c <HAL_TIMEx_CommutCallback>
}
 80052f4:	e7c7      	b.n	8005286 <HAL_TIM_IRQHandler+0x10a>
	...

080052f8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80052f8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052fa:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <TIM_Base_SetConfig+0x70>)
 80052fc:	4290      	cmp	r0, r2
 80052fe:	d00a      	beq.n	8005316 <TIM_Base_SetConfig+0x1e>
 8005300:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005304:	d007      	beq.n	8005316 <TIM_Base_SetConfig+0x1e>
 8005306:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800530a:	4290      	cmp	r0, r2
 800530c:	d003      	beq.n	8005316 <TIM_Base_SetConfig+0x1e>
 800530e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005312:	4290      	cmp	r0, r2
 8005314:	d103      	bne.n	800531e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800531a:	684a      	ldr	r2, [r1, #4]
 800531c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <TIM_Base_SetConfig+0x70>)
 8005320:	4290      	cmp	r0, r2
 8005322:	d00a      	beq.n	800533a <TIM_Base_SetConfig+0x42>
 8005324:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005328:	d007      	beq.n	800533a <TIM_Base_SetConfig+0x42>
 800532a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800532e:	4290      	cmp	r0, r2
 8005330:	d003      	beq.n	800533a <TIM_Base_SetConfig+0x42>
 8005332:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005336:	4290      	cmp	r0, r2
 8005338:	d103      	bne.n	8005342 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800533a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533e:	68ca      	ldr	r2, [r1, #12]
 8005340:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005346:	694a      	ldr	r2, [r1, #20]
 8005348:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800534a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800534c:	688b      	ldr	r3, [r1, #8]
 800534e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005350:	680b      	ldr	r3, [r1, #0]
 8005352:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <TIM_Base_SetConfig+0x70>)
 8005356:	4298      	cmp	r0, r3
 8005358:	d002      	beq.n	8005360 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800535a:	2301      	movs	r3, #1
 800535c:	6143      	str	r3, [r0, #20]
}
 800535e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005360:	690b      	ldr	r3, [r1, #16]
 8005362:	6303      	str	r3, [r0, #48]	; 0x30
 8005364:	e7f9      	b.n	800535a <TIM_Base_SetConfig+0x62>
 8005366:	bf00      	nop
 8005368:	40012c00 	.word	0x40012c00

0800536c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800536c:	b340      	cbz	r0, 80053c0 <HAL_TIM_Base_Init+0x54>
{
 800536e:	b510      	push	{r4, lr}
 8005370:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005376:	b1f3      	cbz	r3, 80053b6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	2302      	movs	r3, #2
 800537a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537e:	4621      	mov	r1, r4
 8005380:	f851 0b04 	ldr.w	r0, [r1], #4
 8005384:	f7ff ffb8 	bl	80052f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005388:	2301      	movs	r3, #1
 800538a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005392:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005396:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800539a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80053aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80053ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80053b2:	2000      	movs	r0, #0
}
 80053b4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80053b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80053ba:	f7fd fbf7 	bl	8002bac <HAL_TIM_Base_MspInit>
 80053be:	e7db      	b.n	8005378 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80053c0:	2001      	movs	r0, #1
}
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80053c4:	b340      	cbz	r0, 8005418 <HAL_TIM_PWM_Init+0x54>
{
 80053c6:	b510      	push	{r4, lr}
 80053c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80053ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80053ce:	b1f3      	cbz	r3, 800540e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d6:	4621      	mov	r1, r4
 80053d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80053dc:	f7ff ff8c 	bl	80052f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80053ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80053ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80053f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005406:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800540a:	2000      	movs	r0, #0
}
 800540c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800540e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005412:	f7ff feae 	bl	8005172 <HAL_TIM_PWM_MspInit>
 8005416:	e7db      	b.n	80053d0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005418:	2001      	movs	r0, #1
}
 800541a:	4770      	bx	lr

0800541c <TIM_OC2_SetConfig>:
{
 800541c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800541e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005420:	6a02      	ldr	r2, [r0, #32]
 8005422:	f022 0210 	bic.w	r2, r2, #16
 8005426:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005428:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800542a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800542c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005430:	680d      	ldr	r5, [r1, #0]
 8005432:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005436:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800543a:	688d      	ldr	r5, [r1, #8]
 800543c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005440:	4d0e      	ldr	r5, [pc, #56]	; (800547c <TIM_OC2_SetConfig+0x60>)
 8005442:	42a8      	cmp	r0, r5
 8005444:	d009      	beq.n	800545a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005446:	4d0d      	ldr	r5, [pc, #52]	; (800547c <TIM_OC2_SetConfig+0x60>)
 8005448:	42a8      	cmp	r0, r5
 800544a:	d00e      	beq.n	800546a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 800544c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800544e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005450:	684a      	ldr	r2, [r1, #4]
 8005452:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005454:	6203      	str	r3, [r0, #32]
}
 8005456:	bc30      	pop	{r4, r5}
 8005458:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800545a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800545e:	68cd      	ldr	r5, [r1, #12]
 8005460:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005468:	e7ed      	b.n	8005446 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800546a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800546e:	694d      	ldr	r5, [r1, #20]
 8005470:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005474:	698d      	ldr	r5, [r1, #24]
 8005476:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800547a:	e7e7      	b.n	800544c <TIM_OC2_SetConfig+0x30>
 800547c:	40012c00 	.word	0x40012c00

08005480 <HAL_TIM_PWM_ConfigChannel>:
{
 8005480:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005482:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d066      	beq.n	8005558 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800548a:	4604      	mov	r4, r0
 800548c:	460d      	mov	r5, r1
 800548e:	2301      	movs	r3, #1
 8005490:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005494:	2a0c      	cmp	r2, #12
 8005496:	d85a      	bhi.n	800554e <HAL_TIM_PWM_ConfigChannel+0xce>
 8005498:	e8df f002 	tbb	[pc, r2]
 800549c:	59595907 	.word	0x59595907
 80054a0:	5959591b 	.word	0x5959591b
 80054a4:	59595930 	.word	0x59595930
 80054a8:	44          	.byte	0x44
 80054a9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	f7ff fd62 	bl	8004f74 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	6993      	ldr	r3, [r2, #24]
 80054b4:	f043 0308 	orr.w	r3, r3, #8
 80054b8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	6993      	ldr	r3, [r2, #24]
 80054be:	f023 0304 	bic.w	r3, r3, #4
 80054c2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c4:	6822      	ldr	r2, [r4, #0]
 80054c6:	6993      	ldr	r3, [r2, #24]
 80054c8:	6929      	ldr	r1, [r5, #16]
 80054ca:	430b      	orrs	r3, r1
 80054cc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2000      	movs	r0, #0
      break;
 80054d0:	e03e      	b.n	8005550 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d2:	6800      	ldr	r0, [r0, #0]
 80054d4:	f7ff ffa2 	bl	800541c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	6993      	ldr	r3, [r2, #24]
 80054dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054e0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054e2:	6822      	ldr	r2, [r4, #0]
 80054e4:	6993      	ldr	r3, [r2, #24]
 80054e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054ea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054ec:	6822      	ldr	r2, [r4, #0]
 80054ee:	6993      	ldr	r3, [r2, #24]
 80054f0:	6929      	ldr	r1, [r5, #16]
 80054f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80054f6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2000      	movs	r0, #0
      break;
 80054fa:	e029      	b.n	8005550 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054fc:	6800      	ldr	r0, [r0, #0]
 80054fe:	f7ff fd67 	bl	8004fd0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	69d3      	ldr	r3, [r2, #28]
 8005506:	f043 0308 	orr.w	r3, r3, #8
 800550a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	69d3      	ldr	r3, [r2, #28]
 8005510:	f023 0304 	bic.w	r3, r3, #4
 8005514:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	69d3      	ldr	r3, [r2, #28]
 800551a:	6929      	ldr	r1, [r5, #16]
 800551c:	430b      	orrs	r3, r1
 800551e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005520:	2000      	movs	r0, #0
      break;
 8005522:	e015      	b.n	8005550 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005524:	6800      	ldr	r0, [r0, #0]
 8005526:	f7ff fd85 	bl	8005034 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	69d3      	ldr	r3, [r2, #28]
 800552e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005532:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	69d3      	ldr	r3, [r2, #28]
 8005538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800553c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	69d3      	ldr	r3, [r2, #28]
 8005542:	6929      	ldr	r1, [r5, #16]
 8005544:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005548:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800554a:	2000      	movs	r0, #0
      break;
 800554c:	e000      	b.n	8005550 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800554e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005550:	2300      	movs	r3, #0
 8005552:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005556:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005558:	2002      	movs	r0, #2
 800555a:	e7fc      	b.n	8005556 <HAL_TIM_PWM_ConfigChannel+0xd6>

0800555c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800555c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005564:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005568:	430a      	orrs	r2, r1
 800556a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556e:	6082      	str	r2, [r0, #8]
}
 8005570:	bc10      	pop	{r4}
 8005572:	4770      	bx	lr

08005574 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005574:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d078      	beq.n	800566e <HAL_TIM_ConfigClockSource+0xfa>
{
 800557c:	b510      	push	{r4, lr}
 800557e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005580:	2301      	movs	r3, #1
 8005582:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005586:	2302      	movs	r3, #2
 8005588:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800558c:	6802      	ldr	r2, [r0, #0]
 800558e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005594:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005598:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800559a:	680b      	ldr	r3, [r1, #0]
 800559c:	2b60      	cmp	r3, #96	; 0x60
 800559e:	d04c      	beq.n	800563a <HAL_TIM_ConfigClockSource+0xc6>
 80055a0:	d829      	bhi.n	80055f6 <HAL_TIM_ConfigClockSource+0x82>
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d054      	beq.n	8005650 <HAL_TIM_ConfigClockSource+0xdc>
 80055a6:	d90c      	bls.n	80055c2 <HAL_TIM_ConfigClockSource+0x4e>
 80055a8:	2b50      	cmp	r3, #80	; 0x50
 80055aa:	d122      	bne.n	80055f2 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ac:	68ca      	ldr	r2, [r1, #12]
 80055ae:	6849      	ldr	r1, [r1, #4]
 80055b0:	6800      	ldr	r0, [r0, #0]
 80055b2:	f7ff fd63 	bl	800507c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b6:	2150      	movs	r1, #80	; 0x50
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	f7ff fd84 	bl	80050c6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80055be:	2000      	movs	r0, #0
      break;
 80055c0:	e005      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d00d      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x6e>
 80055c6:	d909      	bls.n	80055dc <HAL_TIM_ConfigClockSource+0x68>
 80055c8:	2b30      	cmp	r3, #48	; 0x30
 80055ca:	d00a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80055d4:	2300      	movs	r3, #0
 80055d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80055da:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80055dc:	b10b      	cbz	r3, 80055e2 <HAL_TIM_ConfigClockSource+0x6e>
 80055de:	2b10      	cmp	r3, #16
 80055e0:	d105      	bne.n	80055ee <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e2:	4619      	mov	r1, r3
 80055e4:	6820      	ldr	r0, [r4, #0]
 80055e6:	f7ff fd6e 	bl	80050c6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2000      	movs	r0, #0
      break;
 80055ec:	e7ef      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80055ee:	2001      	movs	r0, #1
 80055f0:	e7ed      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
 80055f2:	2001      	movs	r0, #1
 80055f4:	e7eb      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80055f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fa:	d034      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0xf2>
 80055fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005600:	d10c      	bne.n	800561c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005602:	68cb      	ldr	r3, [r1, #12]
 8005604:	684a      	ldr	r2, [r1, #4]
 8005606:	6889      	ldr	r1, [r1, #8]
 8005608:	6800      	ldr	r0, [r0, #0]
 800560a:	f7ff ffa7 	bl	800555c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	6893      	ldr	r3, [r2, #8]
 8005612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005616:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005618:	2000      	movs	r0, #0
      break;
 800561a:	e7d8      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800561c:	2b70      	cmp	r3, #112	; 0x70
 800561e:	d124      	bne.n	800566a <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005620:	68cb      	ldr	r3, [r1, #12]
 8005622:	684a      	ldr	r2, [r1, #4]
 8005624:	6889      	ldr	r1, [r1, #8]
 8005626:	6800      	ldr	r0, [r0, #0]
 8005628:	f7ff ff98 	bl	800555c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005634:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005636:	2000      	movs	r0, #0
      break;
 8005638:	e7c9      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800563a:	68ca      	ldr	r2, [r1, #12]
 800563c:	6849      	ldr	r1, [r1, #4]
 800563e:	6800      	ldr	r0, [r0, #0]
 8005640:	f7ff fd2e 	bl	80050a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005644:	2160      	movs	r1, #96	; 0x60
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	f7ff fd3d 	bl	80050c6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800564c:	2000      	movs	r0, #0
      break;
 800564e:	e7be      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005650:	68ca      	ldr	r2, [r1, #12]
 8005652:	6849      	ldr	r1, [r1, #4]
 8005654:	6800      	ldr	r0, [r0, #0]
 8005656:	f7ff fd11 	bl	800507c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800565a:	2140      	movs	r1, #64	; 0x40
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	f7ff fd32 	bl	80050c6 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2000      	movs	r0, #0
      break;
 8005664:	e7b3      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005666:	2000      	movs	r0, #0
 8005668:	e7b1      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800566a:	2001      	movs	r0, #1
 800566c:	e7af      	b.n	80055ce <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800566e:	2002      	movs	r0, #2
}
 8005670:	4770      	bx	lr

08005672 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005672:	f001 011f 	and.w	r1, r1, #31
 8005676:	f04f 0c01 	mov.w	ip, #1
 800567a:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800567e:	6a03      	ldr	r3, [r0, #32]
 8005680:	ea23 030c 	bic.w	r3, r3, ip
 8005684:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005686:	6a03      	ldr	r3, [r0, #32]
 8005688:	408a      	lsls	r2, r1
 800568a:	4313      	orrs	r3, r2
 800568c:	6203      	str	r3, [r0, #32]
}
 800568e:	4770      	bx	lr

08005690 <HAL_TIM_PWM_Start>:
{
 8005690:	b510      	push	{r4, lr}
 8005692:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005694:	4608      	mov	r0, r1
 8005696:	bb51      	cbnz	r1, 80056ee <HAL_TIM_PWM_Start+0x5e>
 8005698:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800569c:	b2db      	uxtb	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	bf18      	it	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d15b      	bne.n	8005760 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d139      	bne.n	8005720 <HAL_TIM_PWM_Start+0x90>
 80056ac:	2302      	movs	r3, #2
 80056ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056b2:	2201      	movs	r2, #1
 80056b4:	4601      	mov	r1, r0
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	f7ff ffdb 	bl	8005672 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <HAL_TIM_PWM_Start+0xd8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d03d      	beq.n	8005740 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	4a28      	ldr	r2, [pc, #160]	; (8005768 <HAL_TIM_PWM_Start+0xd8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d03e      	beq.n	800574a <HAL_TIM_PWM_Start+0xba>
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d0:	d03b      	beq.n	800574a <HAL_TIM_PWM_Start+0xba>
 80056d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d037      	beq.n	800574a <HAL_TIM_PWM_Start+0xba>
 80056da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056de:	4293      	cmp	r3, r2
 80056e0:	d033      	beq.n	800574a <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80056ea:	2000      	movs	r0, #0
 80056ec:	e039      	b.n	8005762 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ee:	2904      	cmp	r1, #4
 80056f0:	d008      	beq.n	8005704 <HAL_TIM_PWM_Start+0x74>
 80056f2:	2908      	cmp	r1, #8
 80056f4:	d00d      	beq.n	8005712 <HAL_TIM_PWM_Start+0x82>
 80056f6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	bf18      	it	ne
 8005700:	2301      	movne	r3, #1
 8005702:	e7cf      	b.n	80056a4 <HAL_TIM_PWM_Start+0x14>
 8005704:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005708:	b2db      	uxtb	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	bf18      	it	ne
 800570e:	2301      	movne	r3, #1
 8005710:	e7c8      	b.n	80056a4 <HAL_TIM_PWM_Start+0x14>
 8005712:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005716:	b2db      	uxtb	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	bf18      	it	ne
 800571c:	2301      	movne	r3, #1
 800571e:	e7c1      	b.n	80056a4 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005720:	2804      	cmp	r0, #4
 8005722:	d005      	beq.n	8005730 <HAL_TIM_PWM_Start+0xa0>
 8005724:	2808      	cmp	r0, #8
 8005726:	d007      	beq.n	8005738 <HAL_TIM_PWM_Start+0xa8>
 8005728:	2302      	movs	r3, #2
 800572a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800572e:	e7c0      	b.n	80056b2 <HAL_TIM_PWM_Start+0x22>
 8005730:	2302      	movs	r3, #2
 8005732:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005736:	e7bc      	b.n	80056b2 <HAL_TIM_PWM_Start+0x22>
 8005738:	2302      	movs	r3, #2
 800573a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800573e:	e7b8      	b.n	80056b2 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8005740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005746:	645a      	str	r2, [r3, #68]	; 0x44
 8005748:	e7bc      	b.n	80056c4 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005750:	2a06      	cmp	r2, #6
 8005752:	d007      	beq.n	8005764 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800575c:	2000      	movs	r0, #0
 800575e:	e000      	b.n	8005762 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8005760:	2001      	movs	r0, #1
}
 8005762:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005764:	2000      	movs	r0, #0
 8005766:	e7fc      	b.n	8005762 <HAL_TIM_PWM_Start+0xd2>
 8005768:	40012c00 	.word	0x40012c00

0800576c <HAL_TIM_PWM_Stop>:
{
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4604      	mov	r4, r0
 8005770:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005772:	2200      	movs	r2, #0
 8005774:	6800      	ldr	r0, [r0, #0]
 8005776:	f7ff ff7c 	bl	8005672 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_TIM_PWM_Stop+0x80>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d014      	beq.n	80057ac <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	6a19      	ldr	r1, [r3, #32]
 8005786:	f241 1211 	movw	r2, #4369	; 0x1111
 800578a:	4211      	tst	r1, r2
 800578c:	d108      	bne.n	80057a0 <HAL_TIM_PWM_Stop+0x34>
 800578e:	6a19      	ldr	r1, [r3, #32]
 8005790:	f240 4244 	movw	r2, #1092	; 0x444
 8005794:	4211      	tst	r1, r2
 8005796:	d103      	bne.n	80057a0 <HAL_TIM_PWM_Stop+0x34>
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	f022 0201 	bic.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	b99d      	cbnz	r5, 80057ca <HAL_TIM_PWM_Stop+0x5e>
 80057a2:	2301      	movs	r3, #1
 80057a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80057a8:	2000      	movs	r0, #0
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80057ac:	6a19      	ldr	r1, [r3, #32]
 80057ae:	f241 1211 	movw	r2, #4369	; 0x1111
 80057b2:	4211      	tst	r1, r2
 80057b4:	d1e5      	bne.n	8005782 <HAL_TIM_PWM_Stop+0x16>
 80057b6:	6a19      	ldr	r1, [r3, #32]
 80057b8:	f240 4244 	movw	r2, #1092	; 0x444
 80057bc:	4211      	tst	r1, r2
 80057be:	d1e0      	bne.n	8005782 <HAL_TIM_PWM_Stop+0x16>
 80057c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057c6:	645a      	str	r2, [r3, #68]	; 0x44
 80057c8:	e7db      	b.n	8005782 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057ca:	2d04      	cmp	r5, #4
 80057cc:	d005      	beq.n	80057da <HAL_TIM_PWM_Stop+0x6e>
 80057ce:	2d08      	cmp	r5, #8
 80057d0:	d007      	beq.n	80057e2 <HAL_TIM_PWM_Stop+0x76>
 80057d2:	2301      	movs	r3, #1
 80057d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80057d8:	e7e6      	b.n	80057a8 <HAL_TIM_PWM_Stop+0x3c>
 80057da:	2301      	movs	r3, #1
 80057dc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80057e0:	e7e2      	b.n	80057a8 <HAL_TIM_PWM_Stop+0x3c>
 80057e2:	2301      	movs	r3, #1
 80057e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057e8:	e7de      	b.n	80057a8 <HAL_TIM_PWM_Stop+0x3c>
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00

080057f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80057f4:	2a01      	cmp	r2, #1
 80057f6:	d02c      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80057f8:	b410      	push	{r4}
 80057fa:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80057fc:	2201      	movs	r2, #1
 80057fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005802:	2202      	movs	r2, #2
 8005804:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005808:	6802      	ldr	r2, [r0, #0]
 800580a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800580e:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005812:	6808      	ldr	r0, [r1, #0]
 8005814:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005818:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	480e      	ldr	r0, [pc, #56]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800581e:	4282      	cmp	r2, r0
 8005820:	d00a      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005822:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005826:	d007      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005828:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800582c:	4282      	cmp	r2, r0
 800582e:	d003      	beq.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005830:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005834:	4282      	cmp	r2, r0
 8005836:	d104      	bne.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005838:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800583c:	6849      	ldr	r1, [r1, #4]
 800583e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005840:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005848:	2000      	movs	r0, #0
 800584a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800584e:	bc10      	pop	{r4}
 8005850:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005852:	2002      	movs	r0, #2
}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40012c00 	.word	0x40012c00

0800585c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800585c:	4770      	bx	lr

0800585e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800585e:	4770      	bx	lr

08005860 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005860:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005864:	b993      	cbnz	r3, 800588c <osKernelInitialize+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005866:	f3ef 8310 	mrs	r3, PRIMASK
 800586a:	b993      	cbnz	r3, 8005892 <osKernelInitialize+0x32>
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <osKernelInitialize+0x40>)
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	2802      	cmp	r0, #2
 8005872:	d004      	beq.n	800587e <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005874:	b980      	cbnz	r0, 8005898 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005876:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <osKernelInitialize+0x40>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800587c:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800587e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f6      	beq.n	8005874 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8005886:	f06f 0005 	mvn.w	r0, #5
 800588a:	4770      	bx	lr
 800588c:	f06f 0005 	mvn.w	r0, #5
 8005890:	4770      	bx	lr
 8005892:	f06f 0005 	mvn.w	r0, #5
 8005896:	4770      	bx	lr
    } else {
      stat = osError;
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	200011d0 	.word	0x200011d0

080058a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058a4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80058aa:	b9b3      	cbnz	r3, 80058da <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ac:	f3ef 8310 	mrs	r3, PRIMASK
 80058b0:	b9b3      	cbnz	r3, 80058e0 <osKernelStart+0x3c>
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <osKernelStart+0x48>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d008      	beq.n	80058cc <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d113      	bne.n	80058e6 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <osKernelStart+0x48>)
 80058c0:	2202      	movs	r2, #2
 80058c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80058c4:	f001 fb98 	bl	8006ff8 <vTaskStartScheduler>
      stat = osOK;
 80058c8:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 80058ca:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058cc:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	d0f2      	beq.n	80058ba <osKernelStart+0x16>
    stat = osErrorISR;
 80058d4:	f06f 0005 	mvn.w	r0, #5
 80058d8:	e7f7      	b.n	80058ca <osKernelStart+0x26>
 80058da:	f06f 0005 	mvn.w	r0, #5
 80058de:	e7f4      	b.n	80058ca <osKernelStart+0x26>
 80058e0:	f06f 0005 	mvn.w	r0, #5
 80058e4:	e7f1      	b.n	80058ca <osKernelStart+0x26>
      stat = osError;
 80058e6:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80058ea:	e7ee      	b.n	80058ca <osKernelStart+0x26>
 80058ec:	200011d0 	.word	0x200011d0

080058f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058f4:	2400      	movs	r4, #0
 80058f6:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058f8:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80058fc:	2c00      	cmp	r4, #0
 80058fe:	d143      	bne.n	8005988 <osThreadNew+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005900:	f3ef 8310 	mrs	r3, PRIMASK
 8005904:	2b00      	cmp	r3, #0
 8005906:	d13f      	bne.n	8005988 <osThreadNew+0x98>
 8005908:	4b33      	ldr	r3, [pc, #204]	; (80059d8 <osThreadNew+0xe8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d016      	beq.n	800593e <osThreadNew+0x4e>
 8005910:	2800      	cmp	r0, #0
 8005912:	d039      	beq.n	8005988 <osThreadNew+0x98>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005914:	2300      	movs	r3, #0
 8005916:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800591a:	b362      	cbz	r2, 8005976 <osThreadNew+0x86>
      if (attr->name != NULL) {
 800591c:	6815      	ldr	r5, [r2, #0]
 800591e:	b195      	cbz	r5, 8005946 <osThreadNew+0x56>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005920:	6993      	ldr	r3, [r2, #24]
 8005922:	b903      	cbnz	r3, 8005926 <osThreadNew+0x36>
    prio  = (UBaseType_t)osPriorityNormal;
 8005924:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005926:	1e5c      	subs	r4, r3, #1
 8005928:	2c37      	cmp	r4, #55	; 0x37
 800592a:	d851      	bhi.n	80059d0 <osThreadNew+0xe0>
 800592c:	6854      	ldr	r4, [r2, #4]
 800592e:	f014 0f01 	tst.w	r4, #1
 8005932:	d14f      	bne.n	80059d4 <osThreadNew+0xe4>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005934:	6956      	ldr	r6, [r2, #20]
 8005936:	b14e      	cbz	r6, 800594c <osThreadNew+0x5c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005938:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 800593c:	e008      	b.n	8005950 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800593e:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005942:	bb0b      	cbnz	r3, 8005988 <osThreadNew+0x98>
 8005944:	e7e4      	b.n	8005910 <osThreadNew+0x20>
    name  = &empty;
 8005946:	f10d 0517 	add.w	r5, sp, #23
 800594a:	e7e9      	b.n	8005920 <osThreadNew+0x30>
    stack = configMINIMAL_STACK_SIZE;
 800594c:	f04f 0c80 	mov.w	ip, #128	; 0x80
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005950:	6894      	ldr	r4, [r2, #8]
 8005952:	b12c      	cbz	r4, 8005960 <osThreadNew+0x70>
 8005954:	68d7      	ldr	r7, [r2, #12]
 8005956:	2f5f      	cmp	r7, #95	; 0x5f
 8005958:	d902      	bls.n	8005960 <osThreadNew+0x70>
 800595a:	6917      	ldr	r7, [r2, #16]
 800595c:	b107      	cbz	r7, 8005960 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800595e:	b9b6      	cbnz	r6, 800598e <osThreadNew+0x9e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005960:	b114      	cbz	r4, 8005968 <osThreadNew+0x78>
    mem   = -1;
 8005962:	f04f 34ff 	mov.w	r4, #4294967295
 8005966:	e00c      	b.n	8005982 <osThreadNew+0x92>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005968:	68d4      	ldr	r4, [r2, #12]
 800596a:	b994      	cbnz	r4, 8005992 <osThreadNew+0xa2>
 800596c:	6914      	ldr	r4, [r2, #16]
 800596e:	b19c      	cbz	r4, 8005998 <osThreadNew+0xa8>
    mem   = -1;
 8005970:	f04f 34ff 	mov.w	r4, #4294967295
 8005974:	e005      	b.n	8005982 <osThreadNew+0x92>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8005976:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8005978:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 800597a:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 800597e:	f10d 0517 	add.w	r5, sp, #23
    }

    if (mem == 1) {
 8005982:	2c01      	cmp	r4, #1
 8005984:	d00a      	beq.n	800599c <osThreadNew+0xac>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005986:	b1ac      	cbz	r4, 80059b4 <osThreadNew+0xc4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005988:	9804      	ldr	r0, [sp, #16]
}
 800598a:	b007      	add	sp, #28
 800598c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 800598e:	2401      	movs	r4, #1
 8005990:	e7f7      	b.n	8005982 <osThreadNew+0x92>
    mem   = -1;
 8005992:	f04f 34ff 	mov.w	r4, #4294967295
 8005996:	e7f4      	b.n	8005982 <osThreadNew+0x92>
          mem = 0;
 8005998:	2400      	movs	r4, #0
 800599a:	e7f2      	b.n	8005982 <osThreadNew+0x92>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800599c:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800599e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059a0:	9202      	str	r2, [sp, #8]
 80059a2:	9401      	str	r4, [sp, #4]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	460b      	mov	r3, r1
 80059a8:	4662      	mov	r2, ip
 80059aa:	4629      	mov	r1, r5
 80059ac:	f001 fab6 	bl	8006f1c <xTaskCreateStatic>
 80059b0:	9004      	str	r0, [sp, #16]
 80059b2:	e7e9      	b.n	8005988 <osThreadNew+0x98>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059b4:	aa04      	add	r2, sp, #16
 80059b6:	9201      	str	r2, [sp, #4]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	460b      	mov	r3, r1
 80059bc:	fa1f f28c 	uxth.w	r2, ip
 80059c0:	4629      	mov	r1, r5
 80059c2:	f001 fae5 	bl	8006f90 <xTaskCreate>
 80059c6:	2801      	cmp	r0, #1
 80059c8:	d0de      	beq.n	8005988 <osThreadNew+0x98>
          hTask = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	9304      	str	r3, [sp, #16]
 80059ce:	e7db      	b.n	8005988 <osThreadNew+0x98>
        return (NULL);
 80059d0:	2000      	movs	r0, #0
 80059d2:	e7da      	b.n	800598a <osThreadNew+0x9a>
 80059d4:	2000      	movs	r0, #0
 80059d6:	e7d8      	b.n	800598a <osThreadNew+0x9a>
 80059d8:	200011d0 	.word	0x200011d0

080059dc <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80059dc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059de:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 80059e2:	bb33      	cbnz	r3, 8005a32 <osEventFlagsNew+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e4:	f3ef 8310 	mrs	r3, PRIMASK
 80059e8:	bb2b      	cbnz	r3, 8005a36 <osEventFlagsNew+0x5a>
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <osEventFlagsNew+0x64>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d00c      	beq.n	8005a0c <osEventFlagsNew+0x30>
    mem = -1;

    if (attr != NULL) {
 80059f2:	b1d0      	cbz	r0, 8005a2a <osEventFlagsNew+0x4e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80059f4:	6883      	ldr	r3, [r0, #8]
 80059f6:	b113      	cbz	r3, 80059fe <osEventFlagsNew+0x22>
 80059f8:	68c2      	ldr	r2, [r0, #12]
 80059fa:	2a1f      	cmp	r2, #31
 80059fc:	d811      	bhi.n	8005a22 <osEventFlagsNew+0x46>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059fe:	b15b      	cbz	r3, 8005a18 <osEventFlagsNew+0x3c>
    mem = -1;
 8005a00:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005a04:	b9cb      	cbnz	r3, 8005a3a <osEventFlagsNew+0x5e>
        hEventGroup = xEventGroupCreate();
 8005a06:	f000 fac9 	bl	8005f9c <xEventGroupCreate>
 8005a0a:	e013      	b.n	8005a34 <osEventFlagsNew+0x58>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a0c:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0ee      	beq.n	80059f2 <osEventFlagsNew+0x16>
  hEventGroup = NULL;
 8005a14:	2000      	movs	r0, #0
 8005a16:	e00d      	b.n	8005a34 <osEventFlagsNew+0x58>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a18:	68c3      	ldr	r3, [r0, #12]
 8005a1a:	b143      	cbz	r3, 8005a2e <osEventFlagsNew+0x52>
    mem = -1;
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	e7f0      	b.n	8005a04 <osEventFlagsNew+0x28>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fa95 	bl	8005f52 <xEventGroupCreateStatic>
 8005a28:	e004      	b.n	8005a34 <osEventFlagsNew+0x58>
      mem = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e7ea      	b.n	8005a04 <osEventFlagsNew+0x28>
          mem = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e7e8      	b.n	8005a04 <osEventFlagsNew+0x28>
  hEventGroup = NULL;
 8005a32:	2000      	movs	r0, #0
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 8005a34:	bd08      	pop	{r3, pc}
  hEventGroup = NULL;
 8005a36:	2000      	movs	r0, #0
 8005a38:	e7fc      	b.n	8005a34 <osEventFlagsNew+0x58>
 8005a3a:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 8005a3c:	e7fa      	b.n	8005a34 <osEventFlagsNew+0x58>
 8005a3e:	bf00      	nop
 8005a40:	200011d0 	.word	0x200011d0

08005a44 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005a44:	b370      	cbz	r0, 8005aa4 <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005a46:	b510      	push	{r4, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005a4e:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005a52:	d12a      	bne.n	8005aaa <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a54:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005a58:	b94a      	cbnz	r2, 8005a6e <osEventFlagsSet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5a:	f3ef 8210 	mrs	r2, PRIMASK
 8005a5e:	b932      	cbnz	r2, 8005a6e <osEventFlagsSet+0x2a>
 8005a60:	4a16      	ldr	r2, [pc, #88]	; (8005abc <osEventFlagsSet+0x78>)
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	2a02      	cmp	r2, #2
 8005a66:	d118      	bne.n	8005a9a <osEventFlagsSet+0x56>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a68:	f3ef 8211 	mrs	r2, BASEPRI
 8005a6c:	b1aa      	cbz	r2, 8005a9a <osEventFlagsSet+0x56>
    yield = pdFALSE;
 8005a6e:	2200      	movs	r2, #0
 8005a70:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005a72:	aa01      	add	r2, sp, #4
 8005a74:	4621      	mov	r1, r4
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fb6c 	bl	8006154 <xEventGroupSetBitsFromISR>
 8005a7c:	b9c8      	cbnz	r0, 8005ab2 <osEventFlagsSet+0x6e>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	b1d3      	cbz	r3, 8005ab8 <osEventFlagsSet+0x74>
 8005a82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
      rflags = flags;
 8005a96:	4620      	mov	r0, r4
 8005a98:	e009      	b.n	8005aae <osEventFlagsSet+0x6a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fb0f 	bl	80060c0 <xEventGroupSetBits>
 8005aa2:	e004      	b.n	8005aae <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8005aa4:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 8005aa8:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 8005aaa:	f06f 0003 	mvn.w	r0, #3
}
 8005aae:	b002      	add	sp, #8
 8005ab0:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8005ab2:	f06f 0002 	mvn.w	r0, #2
 8005ab6:	e7fa      	b.n	8005aae <osEventFlagsSet+0x6a>
      rflags = flags;
 8005ab8:	4620      	mov	r0, r4
  return (rflags);
 8005aba:	e7f8      	b.n	8005aae <osEventFlagsSet+0x6a>
 8005abc:	200011d0 	.word	0x200011d0

08005ac0 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005ac0:	b3b0      	cbz	r0, 8005b30 <osEventFlagsWait+0x70>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005ac2:	b570      	push	{r4, r5, r6, lr}
 8005ac4:	b082      	sub	sp, #8
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	461d      	mov	r5, r3
 8005aca:	4684      	mov	ip, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005acc:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005ad0:	d131      	bne.n	8005b36 <osEventFlagsWait+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad2:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005ad6:	bb93      	cbnz	r3, 8005b3e <osEventFlagsWait+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8005adc:	bb93      	cbnz	r3, 8005b44 <osEventFlagsWait+0x84>
 8005ade:	4b1e      	ldr	r3, [pc, #120]	; (8005b58 <osEventFlagsWait+0x98>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d013      	beq.n	8005b0e <osEventFlagsWait+0x4e>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 8005ae6:	f012 0601 	ands.w	r6, r2, #1
 8005aea:	d017      	beq.n	8005b1c <osEventFlagsWait+0x5c>
      wait_all = pdTRUE;
 8005aec:	2301      	movs	r3, #1
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 8005aee:	f012 0f02 	tst.w	r2, #2
 8005af2:	d015      	beq.n	8005b20 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8005af4:	2200      	movs	r2, #0
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005af6:	9500      	str	r5, [sp, #0]
 8005af8:	4621      	mov	r1, r4
 8005afa:	4660      	mov	r0, ip
 8005afc:	f000 fa5c 	bl	8005fb8 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 8005b00:	b186      	cbz	r6, 8005b24 <osEventFlagsWait+0x64>
      if (flags != rflags) {
 8005b02:	4284      	cmp	r4, r0
 8005b04:	d019      	beq.n	8005b3a <osEventFlagsWait+0x7a>
        if (timeout > 0U) {
 8005b06:	b305      	cbz	r5, 8005b4a <osEventFlagsWait+0x8a>
          rflags = (uint32_t)osErrorTimeout;
 8005b08:	f06f 0001 	mvn.w	r0, #1
 8005b0c:	e015      	b.n	8005b3a <osEventFlagsWait+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b0e:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0e7      	beq.n	8005ae6 <osEventFlagsWait+0x26>
    rflags = (uint32_t)osErrorISR;
 8005b16:	f06f 0005 	mvn.w	r0, #5
 8005b1a:	e00e      	b.n	8005b3a <osEventFlagsWait+0x7a>
      wait_all = pdFAIL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e7e6      	b.n	8005aee <osEventFlagsWait+0x2e>
      exit_clr = pdTRUE;
 8005b20:	2201      	movs	r2, #1
 8005b22:	e7e8      	b.n	8005af6 <osEventFlagsWait+0x36>
          rflags = (uint32_t)osErrorResource;
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005b24:	4204      	tst	r4, r0
 8005b26:	d108      	bne.n	8005b3a <osEventFlagsWait+0x7a>
        if (timeout > 0U) {
 8005b28:	b195      	cbz	r5, 8005b50 <osEventFlagsWait+0x90>
          rflags = (uint32_t)osErrorTimeout;
 8005b2a:	f06f 0001 	mvn.w	r0, #1
 8005b2e:	e004      	b.n	8005b3a <osEventFlagsWait+0x7a>
    rflags = (uint32_t)osErrorParameter;
 8005b30:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 8005b34:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 8005b36:	f06f 0003 	mvn.w	r0, #3
}
 8005b3a:	b002      	add	sp, #8
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8005b3e:	f06f 0005 	mvn.w	r0, #5
 8005b42:	e7fa      	b.n	8005b3a <osEventFlagsWait+0x7a>
 8005b44:	f06f 0005 	mvn.w	r0, #5
 8005b48:	e7f7      	b.n	8005b3a <osEventFlagsWait+0x7a>
          rflags = (uint32_t)osErrorResource;
 8005b4a:	f06f 0002 	mvn.w	r0, #2
 8005b4e:	e7f4      	b.n	8005b3a <osEventFlagsWait+0x7a>
          rflags = (uint32_t)osErrorResource;
 8005b50:	f06f 0002 	mvn.w	r0, #2
  return (rflags);
 8005b54:	e7f1      	b.n	8005b3a <osEventFlagsWait+0x7a>
 8005b56:	bf00      	nop
 8005b58:	200011d0 	.word	0x200011d0

08005b5c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005b5c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b5e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d14e      	bne.n	8005c04 <osMutexNew+0xa8>
 8005b66:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b68:	f3ef 8210 	mrs	r2, PRIMASK
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	2a00      	cmp	r2, #0
 8005b70:	d14b      	bne.n	8005c0a <osMutexNew+0xae>
 8005b72:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <osMutexNew+0xb8>)
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	2a02      	cmp	r2, #2
 8005b78:	d023      	beq.n	8005bc2 <osMutexNew+0x66>
    if (attr != NULL) {
 8005b7a:	b104      	cbz	r4, 8005b7e <osMutexNew+0x22>
      type = attr->attr_bits;
 8005b7c:	6863      	ldr	r3, [r4, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005b7e:	f013 0601 	ands.w	r6, r3, #1
 8005b82:	d000      	beq.n	8005b86 <osMutexNew+0x2a>
      rmtx = 1U;
 8005b84:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005b86:	f013 0f08 	tst.w	r3, #8
 8005b8a:	d140      	bne.n	8005c0e <osMutexNew+0xb2>
      mem = -1;

      if (attr != NULL) {
 8005b8c:	b37c      	cbz	r4, 8005bee <osMutexNew+0x92>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b8e:	68a1      	ldr	r1, [r4, #8]
 8005b90:	b111      	cbz	r1, 8005b98 <osMutexNew+0x3c>
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	2b4f      	cmp	r3, #79	; 0x4f
 8005b96:	d81f      	bhi.n	8005bd8 <osMutexNew+0x7c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b98:	b1c9      	cbz	r1, 8005bce <osMutexNew+0x72>
      mem = -1;
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 8005b9e:	bb7b      	cbnz	r3, 8005c00 <osMutexNew+0xa4>
          if (rmtx != 0U) {
 8005ba0:	b34e      	cbz	r6, 8005bf6 <osMutexNew+0x9a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005ba2:	2004      	movs	r0, #4
 8005ba4:	f000 fd60 	bl	8006668 <xQueueCreateMutex>
 8005ba8:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005baa:	b12d      	cbz	r5, 8005bb8 <osMutexNew+0x5c>
        if (attr != NULL) {
 8005bac:	b104      	cbz	r4, 8005bb0 <osMutexNew+0x54>
          name = attr->name;
 8005bae:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 fff2 	bl	8006b9c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005bb8:	b32d      	cbz	r5, 8005c06 <osMutexNew+0xaa>
 8005bba:	b326      	cbz	r6, 8005c06 <osMutexNew+0xaa>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005bbc:	f045 0501 	orr.w	r5, r5, #1
 8005bc0:	e021      	b.n	8005c06 <osMutexNew+0xaa>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bc2:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8005bc6:	2a00      	cmp	r2, #0
 8005bc8:	d0d7      	beq.n	8005b7a <osMutexNew+0x1e>
  hMutex = NULL;
 8005bca:	2500      	movs	r5, #0
 8005bcc:	e01b      	b.n	8005c06 <osMutexNew+0xaa>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005bce:	68e3      	ldr	r3, [r4, #12]
 8005bd0:	b17b      	cbz	r3, 8005bf2 <osMutexNew+0x96>
      mem = -1;
 8005bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd6:	e7e2      	b.n	8005b9e <osMutexNew+0x42>
        if (rmtx != 0U) {
 8005bd8:	b126      	cbz	r6, 8005be4 <osMutexNew+0x88>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005bda:	2004      	movs	r0, #4
 8005bdc:	f000 fd4f 	bl	800667e <xQueueCreateMutexStatic>
 8005be0:	4605      	mov	r5, r0
 8005be2:	e7e2      	b.n	8005baa <osMutexNew+0x4e>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005be4:	2001      	movs	r0, #1
 8005be6:	f000 fd4a 	bl	800667e <xQueueCreateMutexStatic>
 8005bea:	4605      	mov	r5, r0
 8005bec:	e7dd      	b.n	8005baa <osMutexNew+0x4e>
        mem = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e7d5      	b.n	8005b9e <osMutexNew+0x42>
            mem = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e7d3      	b.n	8005b9e <osMutexNew+0x42>
            hMutex = xSemaphoreCreateMutex ();
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f000 fd36 	bl	8006668 <xQueueCreateMutex>
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	e7d4      	b.n	8005baa <osMutexNew+0x4e>
  hMutex = NULL;
 8005c00:	2500      	movs	r5, #0
 8005c02:	e7d9      	b.n	8005bb8 <osMutexNew+0x5c>
 8005c04:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8005c06:	4628      	mov	r0, r5
 8005c08:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8005c0a:	2500      	movs	r5, #0
 8005c0c:	e7fb      	b.n	8005c06 <osMutexNew+0xaa>
 8005c0e:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8005c10:	e7f9      	b.n	8005c06 <osMutexNew+0xaa>
 8005c12:	bf00      	nop
 8005c14:	200011d0 	.word	0x200011d0

08005c18 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c18:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8005c1c:	bb42      	cbnz	r2, 8005c70 <osMutexAcquire+0x58>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	4603      	mov	r3, r0
 8005c22:	460c      	mov	r4, r1
 8005c24:	f020 0001 	bic.w	r0, r0, #1
 8005c28:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c2c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8005c30:	bb0a      	cbnz	r2, 8005c76 <osMutexAcquire+0x5e>
 8005c32:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <osMutexAcquire+0x80>)
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	2a02      	cmp	r2, #2
 8005c38:	d00a      	beq.n	8005c50 <osMutexAcquire+0x38>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8005c3a:	b1f8      	cbz	r0, 8005c7c <osMutexAcquire+0x64>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8005c3c:	b17b      	cbz	r3, 8005c5e <osMutexAcquire+0x46>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005c3e:	4621      	mov	r1, r4
 8005c40:	f000 ff34 	bl	8006aac <xQueueTakeMutexRecursive>
 8005c44:	2801      	cmp	r0, #1
 8005c46:	d01c      	beq.n	8005c82 <osMutexAcquire+0x6a>
        if (timeout != 0U) {
 8005c48:	b1ec      	cbz	r4, 8005c86 <osMutexAcquire+0x6e>
          stat = osErrorTimeout;
 8005c4a:	f06f 0001 	mvn.w	r0, #1
 8005c4e:	e019      	b.n	8005c84 <osMutexAcquire+0x6c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c50:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	d0f0      	beq.n	8005c3a <osMutexAcquire+0x22>
    stat = osErrorISR;
 8005c58:	f06f 0005 	mvn.w	r0, #5
 8005c5c:	e012      	b.n	8005c84 <osMutexAcquire+0x6c>
          stat = osErrorResource;
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005c5e:	4621      	mov	r1, r4
 8005c60:	f000 fe51 	bl	8006906 <xQueueSemaphoreTake>
 8005c64:	2801      	cmp	r0, #1
 8005c66:	d011      	beq.n	8005c8c <osMutexAcquire+0x74>
        if (timeout != 0U) {
 8005c68:	b194      	cbz	r4, 8005c90 <osMutexAcquire+0x78>
          stat = osErrorTimeout;
 8005c6a:	f06f 0001 	mvn.w	r0, #1
 8005c6e:	e009      	b.n	8005c84 <osMutexAcquire+0x6c>
    stat = osErrorISR;
 8005c70:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8005c74:	4770      	bx	lr
    stat = osErrorISR;
 8005c76:	f06f 0005 	mvn.w	r0, #5
 8005c7a:	e003      	b.n	8005c84 <osMutexAcquire+0x6c>
    stat = osErrorParameter;
 8005c7c:	f06f 0003 	mvn.w	r0, #3
 8005c80:	e000      	b.n	8005c84 <osMutexAcquire+0x6c>
  stat = osOK;
 8005c82:	2000      	movs	r0, #0
}
 8005c84:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8005c86:	f06f 0002 	mvn.w	r0, #2
 8005c8a:	e7fb      	b.n	8005c84 <osMutexAcquire+0x6c>
  stat = osOK;
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e7f9      	b.n	8005c84 <osMutexAcquire+0x6c>
          stat = osErrorResource;
 8005c90:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005c94:	e7f6      	b.n	8005c84 <osMutexAcquire+0x6c>
 8005c96:	bf00      	nop
 8005c98:	200011d0 	.word	0x200011d0

08005c9c <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c9c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8005ca0:	bb22      	cbnz	r2, 8005cec <osMutexRelease+0x50>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005ca2:	b508      	push	{r3, lr}
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f020 0001 	bic.w	r0, r0, #1
 8005caa:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cae:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8005cb2:	b9f2      	cbnz	r2, 8005cf2 <osMutexRelease+0x56>
 8005cb4:	4a15      	ldr	r2, [pc, #84]	; (8005d0c <osMutexRelease+0x70>)
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	2a02      	cmp	r2, #2
 8005cba:	d007      	beq.n	8005ccc <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8005cbc:	b1e0      	cbz	r0, 8005cf8 <osMutexRelease+0x5c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8005cbe:	b163      	cbz	r3, 8005cda <osMutexRelease+0x3e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005cc0:	f000 fcec 	bl	800669c <xQueueGiveMutexRecursive>
 8005cc4:	2801      	cmp	r0, #1
 8005cc6:	d11a      	bne.n	8005cfe <osMutexRelease+0x62>
  stat = osOK;
 8005cc8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005cca:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ccc:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005cd0:	2a00      	cmp	r2, #0
 8005cd2:	d0f3      	beq.n	8005cbc <osMutexRelease+0x20>
    stat = osErrorISR;
 8005cd4:	f06f 0005 	mvn.w	r0, #5
 8005cd8:	e7f7      	b.n	8005cca <osMutexRelease+0x2e>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005cda:	2300      	movs	r3, #0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f000 fbf2 	bl	80064c8 <xQueueGenericSend>
 8005ce4:	2801      	cmp	r0, #1
 8005ce6:	d10d      	bne.n	8005d04 <osMutexRelease+0x68>
  stat = osOK;
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e7ee      	b.n	8005cca <osMutexRelease+0x2e>
    stat = osErrorISR;
 8005cec:	f06f 0005 	mvn.w	r0, #5
}
 8005cf0:	4770      	bx	lr
    stat = osErrorISR;
 8005cf2:	f06f 0005 	mvn.w	r0, #5
 8005cf6:	e7e8      	b.n	8005cca <osMutexRelease+0x2e>
    stat = osErrorParameter;
 8005cf8:	f06f 0003 	mvn.w	r0, #3
 8005cfc:	e7e5      	b.n	8005cca <osMutexRelease+0x2e>
        stat = osErrorResource;
 8005cfe:	f06f 0002 	mvn.w	r0, #2
 8005d02:	e7e2      	b.n	8005cca <osMutexRelease+0x2e>
        stat = osErrorResource;
 8005d04:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005d08:	e7df      	b.n	8005cca <osMutexRelease+0x2e>
 8005d0a:	bf00      	nop
 8005d0c:	200011d0 	.word	0x200011d0

08005d10 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005d10:	b530      	push	{r4, r5, lr}
 8005d12:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d14:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d149      	bne.n	8005db0 <osMessageQueueNew+0xa0>
 8005d1c:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d148      	bne.n	8005db8 <osMessageQueueNew+0xa8>
 8005d26:	4b28      	ldr	r3, [pc, #160]	; (8005dc8 <osMessageQueueNew+0xb8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d021      	beq.n	8005d72 <osMessageQueueNew+0x62>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d044      	beq.n	8005dbc <osMessageQueueNew+0xac>
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d044      	beq.n	8005dc0 <osMessageQueueNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 8005d36:	b3a5      	cbz	r5, 8005da2 <osMessageQueueNew+0x92>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d38:	68ab      	ldr	r3, [r5, #8]
 8005d3a:	b153      	cbz	r3, 8005d52 <osMessageQueueNew+0x42>
 8005d3c:	68ea      	ldr	r2, [r5, #12]
 8005d3e:	2a4f      	cmp	r2, #79	; 0x4f
 8005d40:	d907      	bls.n	8005d52 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d42:	692a      	ldr	r2, [r5, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d44:	b12a      	cbz	r2, 8005d52 <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d46:	fb01 f400 	mul.w	r4, r1, r0
 8005d4a:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8005d4e:	45a4      	cmp	ip, r4
 8005d50:	d221      	bcs.n	8005d96 <osMessageQueueNew+0x86>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d52:	b1a3      	cbz	r3, 8005d7e <osMessageQueueNew+0x6e>
    mem = -1;
 8005d54:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005d58:	bba3      	cbnz	r3, 8005dc4 <osMessageQueueNew+0xb4>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f000 fb8d 	bl	800647a <xQueueGenericCreate>
 8005d60:	4604      	mov	r4, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d62:	b334      	cbz	r4, 8005db2 <osMessageQueueNew+0xa2>
      if (attr != NULL) {
 8005d64:	b105      	cbz	r5, 8005d68 <osMessageQueueNew+0x58>
        name = attr->name;
 8005d66:	682d      	ldr	r5, [r5, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 ff16 	bl	8006b9c <vQueueAddToRegistry>
 8005d70:	e01f      	b.n	8005db2 <osMessageQueueNew+0xa2>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d72:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0d9      	beq.n	8005d2e <osMessageQueueNew+0x1e>
  hQueue = NULL;
 8005d7a:	2400      	movs	r4, #0
 8005d7c:	e019      	b.n	8005db2 <osMessageQueueNew+0xa2>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d7e:	68eb      	ldr	r3, [r5, #12]
 8005d80:	b98b      	cbnz	r3, 8005da6 <osMessageQueueNew+0x96>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d82:	692b      	ldr	r3, [r5, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d84:	b113      	cbz	r3, 8005d8c <osMessageQueueNew+0x7c>
    mem = -1;
 8005d86:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8a:	e7e5      	b.n	8005d58 <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d8c:	696b      	ldr	r3, [r5, #20]
 8005d8e:	b16b      	cbz	r3, 8005dac <osMessageQueueNew+0x9c>
    mem = -1;
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295
 8005d94:	e7e0      	b.n	8005d58 <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d96:	2400      	movs	r4, #0
 8005d98:	9400      	str	r4, [sp, #0]
 8005d9a:	f000 fb25 	bl	80063e8 <xQueueGenericCreateStatic>
 8005d9e:	4604      	mov	r4, r0
 8005da0:	e7df      	b.n	8005d62 <osMessageQueueNew+0x52>
      mem = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e7d8      	b.n	8005d58 <osMessageQueueNew+0x48>
    mem = -1;
 8005da6:	f04f 33ff 	mov.w	r3, #4294967295
 8005daa:	e7d5      	b.n	8005d58 <osMessageQueueNew+0x48>
          mem = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e7d3      	b.n	8005d58 <osMessageQueueNew+0x48>
  hQueue = NULL;
 8005db0:	2400      	movs	r4, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8005db2:	4620      	mov	r0, r4
 8005db4:	b003      	add	sp, #12
 8005db6:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 8005db8:	2400      	movs	r4, #0
 8005dba:	e7fa      	b.n	8005db2 <osMessageQueueNew+0xa2>
 8005dbc:	2400      	movs	r4, #0
 8005dbe:	e7f8      	b.n	8005db2 <osMessageQueueNew+0xa2>
 8005dc0:	2400      	movs	r4, #0
 8005dc2:	e7f6      	b.n	8005db2 <osMessageQueueNew+0xa2>
 8005dc4:	2400      	movs	r4, #0
  return ((osMessageQueueId_t)hQueue);
 8005dc6:	e7f4      	b.n	8005db2 <osMessageQueueNew+0xa2>
 8005dc8:	200011d0 	.word	0x200011d0

08005dcc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dd2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005dd6:	b9b3      	cbnz	r3, 8005e06 <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ddc:	b99b      	cbnz	r3, 8005e06 <osMessageQueuePut+0x3a>
 8005dde:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <osMessageQueuePut+0x9c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d00b      	beq.n	8005dfe <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005de6:	b398      	cbz	r0, 8005e50 <osMessageQueuePut+0x84>
 8005de8:	b3a9      	cbz	r1, 8005e56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005dea:	2300      	movs	r3, #0
 8005dec:	4622      	mov	r2, r4
 8005dee:	f000 fb6b 	bl	80064c8 <xQueueGenericSend>
 8005df2:	2801      	cmp	r0, #1
 8005df4:	d032      	beq.n	8005e5c <osMessageQueuePut+0x90>
        if (timeout != 0U) {
 8005df6:	b39c      	cbz	r4, 8005e60 <osMessageQueuePut+0x94>
          stat = osErrorTimeout;
 8005df8:	f06f 0001 	mvn.w	r0, #1
 8005dfc:	e01a      	b.n	8005e34 <osMessageQueuePut+0x68>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dfe:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0ef      	beq.n	8005de6 <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e06:	b1b8      	cbz	r0, 8005e38 <osMessageQueuePut+0x6c>
 8005e08:	b1c9      	cbz	r1, 8005e3e <osMessageQueuePut+0x72>
 8005e0a:	b9dc      	cbnz	r4, 8005e44 <osMessageQueuePut+0x78>
      yield = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005e10:	aa01      	add	r2, sp, #4
 8005e12:	f000 fc63 	bl	80066dc <xQueueGenericSendFromISR>
 8005e16:	2801      	cmp	r0, #1
 8005e18:	d117      	bne.n	8005e4a <osMessageQueuePut+0x7e>
        portYIELD_FROM_ISR (yield);
 8005e1a:	9801      	ldr	r0, [sp, #4]
 8005e1c:	b150      	cbz	r0, 8005e34 <osMessageQueuePut+0x68>
 8005e1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e26:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005e32:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005e34:	b002      	add	sp, #8
 8005e36:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005e38:	f06f 0003 	mvn.w	r0, #3
 8005e3c:	e7fa      	b.n	8005e34 <osMessageQueuePut+0x68>
 8005e3e:	f06f 0003 	mvn.w	r0, #3
 8005e42:	e7f7      	b.n	8005e34 <osMessageQueuePut+0x68>
 8005e44:	f06f 0003 	mvn.w	r0, #3
 8005e48:	e7f4      	b.n	8005e34 <osMessageQueuePut+0x68>
        stat = osErrorResource;
 8005e4a:	f06f 0002 	mvn.w	r0, #2
 8005e4e:	e7f1      	b.n	8005e34 <osMessageQueuePut+0x68>
      stat = osErrorParameter;
 8005e50:	f06f 0003 	mvn.w	r0, #3
 8005e54:	e7ee      	b.n	8005e34 <osMessageQueuePut+0x68>
 8005e56:	f06f 0003 	mvn.w	r0, #3
 8005e5a:	e7eb      	b.n	8005e34 <osMessageQueuePut+0x68>
  stat = osOK;
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e7e9      	b.n	8005e34 <osMessageQueuePut+0x68>
          stat = osErrorResource;
 8005e60:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005e64:	e7e6      	b.n	8005e34 <osMessageQueuePut+0x68>
 8005e66:	bf00      	nop
 8005e68:	200011d0 	.word	0x200011d0

08005e6c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e72:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005e76:	b9ab      	cbnz	r3, 8005ea4 <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e78:	f3ef 8310 	mrs	r3, PRIMASK
 8005e7c:	b993      	cbnz	r3, 8005ea4 <osMessageQueueGet+0x38>
 8005e7e:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <osMessageQueueGet+0x98>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d00a      	beq.n	8005e9c <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e86:	b390      	cbz	r0, 8005eee <osMessageQueueGet+0x82>
 8005e88:	b3a1      	cbz	r1, 8005ef4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	f000 fc8c 	bl	80067a8 <xQueueReceive>
 8005e90:	2801      	cmp	r0, #1
 8005e92:	d032      	beq.n	8005efa <osMessageQueueGet+0x8e>
        if (timeout != 0U) {
 8005e94:	b39c      	cbz	r4, 8005efe <osMessageQueueGet+0x92>
          stat = osErrorTimeout;
 8005e96:	f06f 0001 	mvn.w	r0, #1
 8005e9a:	e01a      	b.n	8005ed2 <osMessageQueueGet+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e9c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ea4:	b1b8      	cbz	r0, 8005ed6 <osMessageQueueGet+0x6a>
 8005ea6:	b1c9      	cbz	r1, 8005edc <osMessageQueueGet+0x70>
 8005ea8:	b9dc      	cbnz	r4, 8005ee2 <osMessageQueueGet+0x76>
      yield = pdFALSE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005eae:	aa01      	add	r2, sp, #4
 8005eb0:	f000 fe1c 	bl	8006aec <xQueueReceiveFromISR>
 8005eb4:	2801      	cmp	r0, #1
 8005eb6:	d117      	bne.n	8005ee8 <osMessageQueueGet+0x7c>
        portYIELD_FROM_ISR (yield);
 8005eb8:	9801      	ldr	r0, [sp, #4]
 8005eba:	b150      	cbz	r0, 8005ed2 <osMessageQueueGet+0x66>
 8005ebc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005ed0:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005ed2:	b002      	add	sp, #8
 8005ed4:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005ed6:	f06f 0003 	mvn.w	r0, #3
 8005eda:	e7fa      	b.n	8005ed2 <osMessageQueueGet+0x66>
 8005edc:	f06f 0003 	mvn.w	r0, #3
 8005ee0:	e7f7      	b.n	8005ed2 <osMessageQueueGet+0x66>
 8005ee2:	f06f 0003 	mvn.w	r0, #3
 8005ee6:	e7f4      	b.n	8005ed2 <osMessageQueueGet+0x66>
        stat = osErrorResource;
 8005ee8:	f06f 0002 	mvn.w	r0, #2
 8005eec:	e7f1      	b.n	8005ed2 <osMessageQueueGet+0x66>
      stat = osErrorParameter;
 8005eee:	f06f 0003 	mvn.w	r0, #3
 8005ef2:	e7ee      	b.n	8005ed2 <osMessageQueueGet+0x66>
 8005ef4:	f06f 0003 	mvn.w	r0, #3
 8005ef8:	e7eb      	b.n	8005ed2 <osMessageQueueGet+0x66>
  stat = osOK;
 8005efa:	2000      	movs	r0, #0
 8005efc:	e7e9      	b.n	8005ed2 <osMessageQueueGet+0x66>
          stat = osErrorResource;
 8005efe:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005f02:	e7e6      	b.n	8005ed2 <osMessageQueueGet+0x66>
 8005f04:	200011d0 	.word	0x200011d0

08005f08 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f08:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <vApplicationGetIdleTaskMemory+0x10>)
 8005f0a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f0c:	4b03      	ldr	r3, [pc, #12]	; (8005f1c <vApplicationGetIdleTaskMemory+0x14>)
 8005f0e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	6013      	str	r3, [r2, #0]
}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20001170 	.word	0x20001170
 8005f1c:	20000f70 	.word	0x20000f70

08005f20 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f20:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <vApplicationGetTimerTaskMemory+0x10>)
 8005f22:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <vApplicationGetTimerTaskMemory+0x14>)
 8005f26:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f2c:	6013      	str	r3, [r2, #0]
}
 8005f2e:	4770      	bx	lr
 8005f30:	200015d4 	.word	0x200015d4
 8005f34:	200011d4 	.word	0x200011d4

08005f38 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8005f38:	b91a      	cbnz	r2, 8005f42 <prvTestWaitCondition+0xa>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005f3a:	4208      	tst	r0, r1
 8005f3c:	d105      	bne.n	8005f4a <prvTestWaitCondition+0x12>
BaseType_t xWaitConditionMet = pdFALSE;
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4770      	bx	lr
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005f42:	4381      	bics	r1, r0
 8005f44:	d003      	beq.n	8005f4e <prvTestWaitCondition+0x16>
BaseType_t xWaitConditionMet = pdFALSE;
 8005f46:	2000      	movs	r0, #0
 8005f48:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	4770      	bx	lr
		{
			xWaitConditionMet = pdTRUE;
 8005f4e:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
 8005f50:	4770      	bx	lr

08005f52 <xEventGroupCreateStatic>:
		configASSERT( pxEventGroupBuffer );
 8005f52:	b180      	cbz	r0, 8005f76 <xEventGroupCreateStatic+0x24>
	{
 8005f54:	b510      	push	{r4, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	4604      	mov	r4, r0
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005f5a:	2320      	movs	r3, #32
 8005f5c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005f5e:	9b01      	ldr	r3, [sp, #4]
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d011      	beq.n	8005f88 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	e7fe      	b.n	8005f74 <xEventGroupCreateStatic+0x22>
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8005f86:	e7fe      	b.n	8005f86 <xEventGroupCreateStatic+0x34>
			pxEventBits->uxEventBits = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005f8e:	f000 f8eb 	bl	8006168 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	7723      	strb	r3, [r4, #28]
	}
 8005f96:	4620      	mov	r0, r4
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd10      	pop	{r4, pc}

08005f9c <xEventGroupCreate>:
	{
 8005f9c:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005f9e:	2020      	movs	r0, #32
 8005fa0:	f002 f87a 	bl	8008098 <pvPortMalloc>
		if( pxEventBits != NULL )
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	b128      	cbz	r0, 8005fb4 <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 8005fa8:	2500      	movs	r5, #0
 8005faa:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005fae:	f000 f8db 	bl	8006168 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005fb2:	7725      	strb	r5, [r4, #28]
	}
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}

08005fb8 <xEventGroupWaitBits>:
{
 8005fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 8005fbc:	b178      	cbz	r0, 8005fde <xEventGroupWaitBits+0x26>
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	4616      	mov	r6, r2
 8005fc2:	461d      	mov	r5, r3
 8005fc4:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005fc6:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005fca:	d011      	beq.n	8005ff0 <xEventGroupWaitBits+0x38>
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	e7fe      	b.n	8005fdc <xEventGroupWaitBits+0x24>
 8005fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005fee:	e7fe      	b.n	8005fee <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 8005ff0:	b941      	cbnz	r1, 8006004 <xEventGroupWaitBits+0x4c>
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	e7fe      	b.n	8006002 <xEventGroupWaitBits+0x4a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006004:	f001 fb3c 	bl	8007680 <xTaskGetSchedulerState>
 8006008:	b950      	cbnz	r0, 8006020 <xEventGroupWaitBits+0x68>
 800600a:	9b08      	ldr	r3, [sp, #32]
 800600c:	b143      	cbz	r3, 8006020 <xEventGroupWaitBits+0x68>
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	e7fe      	b.n	800601e <xEventGroupWaitBits+0x66>
	vTaskSuspendAll();
 8006020:	f001 f838 	bl	8007094 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006024:	f8d7 9000 	ldr.w	r9, [r7]
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006028:	462a      	mov	r2, r5
 800602a:	4621      	mov	r1, r4
 800602c:	4648      	mov	r0, r9
 800602e:	f7ff ff83 	bl	8005f38 <prvTestWaitCondition>
		if( xWaitConditionMet != pdFALSE )
 8006032:	b1f0      	cbz	r0, 8006072 <xEventGroupWaitBits+0xba>
			if( xClearOnExit != pdFALSE )
 8006034:	b116      	cbz	r6, 800603c <xEventGroupWaitBits+0x84>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006036:	ea29 0304 	bic.w	r3, r9, r4
 800603a:	603b      	str	r3, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 800603c:	f001 f8c4 	bl	80071c8 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8006040:	f1b8 0f00 	cmp.w	r8, #0
 8006044:	d012      	beq.n	800606c <xEventGroupWaitBits+0xb4>
		if( xAlreadyYielded == pdFALSE )
 8006046:	b948      	cbnz	r0, 800605c <xEventGroupWaitBits+0xa4>
			portYIELD_WITHIN_API();
 8006048:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800604c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006050:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 800605c:	f001 fc04 	bl	8007868 <uxTaskResetEventItemValue>
 8006060:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006062:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8006066:	d01a      	beq.n	800609e <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006068:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 800606c:	4648      	mov	r0, r9
 800606e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006072:	9b08      	ldr	r3, [sp, #32]
 8006074:	b183      	cbz	r3, 8006098 <xEventGroupWaitBits+0xe0>
			if( xClearOnExit != pdFALSE )
 8006076:	b966      	cbnz	r6, 8006092 <xEventGroupWaitBits+0xda>
EventBits_t uxReturn, uxControlBits = 0;
 8006078:	4641      	mov	r1, r8
			if( xWaitForAllBits != pdFALSE )
 800607a:	b10d      	cbz	r5, 8006080 <xEventGroupWaitBits+0xc8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800607c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006080:	9a08      	ldr	r2, [sp, #32]
 8006082:	4321      	orrs	r1, r4
 8006084:	1d38      	adds	r0, r7, #4
 8006086:	f001 f9cf 	bl	8007428 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;
 800608a:	46c1      	mov	r9, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800608c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006090:	e7d4      	b.n	800603c <xEventGroupWaitBits+0x84>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006092:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006096:	e7f0      	b.n	800607a <xEventGroupWaitBits+0xc2>
 8006098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800609c:	e7ce      	b.n	800603c <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
 800609e:	f001 fe81 	bl	8007da4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80060a2:	f8d7 9000 	ldr.w	r9, [r7]
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80060a6:	462a      	mov	r2, r5
 80060a8:	4621      	mov	r1, r4
 80060aa:	4648      	mov	r0, r9
 80060ac:	f7ff ff44 	bl	8005f38 <prvTestWaitCondition>
 80060b0:	b118      	cbz	r0, 80060ba <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80060b2:	b116      	cbz	r6, 80060ba <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80060b4:	ea29 0404 	bic.w	r4, r9, r4
 80060b8:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 80060ba:	f001 fe95 	bl	8007de8 <vPortExitCritical>
 80060be:	e7d3      	b.n	8006068 <xEventGroupWaitBits+0xb0>

080060c0 <xEventGroupSetBits>:
{
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 80060c2:	b168      	cbz	r0, 80060e0 <xEventGroupSetBits+0x20>
 80060c4:	460d      	mov	r5, r1
 80060c6:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80060c8:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 80060cc:	d011      	beq.n	80060f2 <xEventGroupSetBits+0x32>
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	e7fe      	b.n	80060de <xEventGroupSetBits+0x1e>
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80060f0:	e7fe      	b.n	80060f0 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060f2:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 80060f6:	f000 ffcd 	bl	8007094 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80060fa:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	432b      	orrs	r3, r5
 8006100:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 8006102:	e00a      	b.n	800611a <xEventGroupSetBits+0x5a>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006104:	6821      	ldr	r1, [r4, #0]
 8006106:	ea32 0101 	bics.w	r1, r2, r1
 800610a:	d105      	bne.n	8006118 <xEventGroupSetBits+0x58>
 800610c:	e011      	b.n	8006132 <xEventGroupSetBits+0x72>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800610e:	6821      	ldr	r1, [r4, #0]
 8006110:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8006114:	f001 fa16 	bl	8007544 <vTaskRemoveFromUnorderedEventList>
{
 8006118:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 800611a:	42b0      	cmp	r0, r6
 800611c:	d00e      	beq.n	800613c <xEventGroupSetBits+0x7c>
			pxNext = listGET_NEXT( pxListItem );
 800611e:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006120:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006122:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006126:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800612a:	d1eb      	bne.n	8006104 <xEventGroupSetBits+0x44>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800612c:	6821      	ldr	r1, [r4, #0]
 800612e:	4211      	tst	r1, r2
 8006130:	d0f2      	beq.n	8006118 <xEventGroupSetBits+0x58>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006132:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006136:	d0ea      	beq.n	800610e <xEventGroupSetBits+0x4e>
					uxBitsToClear |= uxBitsWaitedFor;
 8006138:	4317      	orrs	r7, r2
 800613a:	e7e8      	b.n	800610e <xEventGroupSetBits+0x4e>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	ea23 0307 	bic.w	r3, r3, r7
 8006142:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8006144:	f001 f840 	bl	80071c8 <xTaskResumeAll>
}
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800614c <vEventGroupSetBitsCallback>:
{
 800614c:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800614e:	f7ff ffb7 	bl	80060c0 <xEventGroupSetBits>
}
 8006152:	bd08      	pop	{r3, pc}

08006154 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006154:	b508      	push	{r3, lr}
 8006156:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8006158:	460a      	mov	r2, r1
 800615a:	4601      	mov	r1, r0
 800615c:	4801      	ldr	r0, [pc, #4]	; (8006164 <xEventGroupSetBitsFromISR+0x10>)
 800615e:	f001 fdb5 	bl	8007ccc <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8006162:	bd08      	pop	{r3, pc}
 8006164:	0800614d 	.word	0x0800614d

08006168 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006168:	f100 0308 	add.w	r3, r0, #8
 800616c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800616e:	f04f 32ff 	mov.w	r2, #4294967295
 8006172:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006174:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006176:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800617c:	4770      	bx	lr

0800617e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006182:	4770      	bx	lr

08006184 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006184:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006186:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800618c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800618e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006190:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006192:	6803      	ldr	r3, [r0, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	6003      	str	r3, [r0, #0]
}
 8006198:	4770      	bx	lr

0800619a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800619a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800619c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800619e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80061a2:	d011      	beq.n	80061c8 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061a4:	f100 0308 	add.w	r3, r0, #8
 80061a8:	461c      	mov	r4, r3
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	42aa      	cmp	r2, r5
 80061b0:	d9fa      	bls.n	80061a8 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061b6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061b8:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80061ba:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80061bc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80061be:	6803      	ldr	r3, [r0, #0]
 80061c0:	3301      	adds	r3, #1
 80061c2:	6003      	str	r3, [r0, #0]
}
 80061c4:	bc30      	pop	{r4, r5}
 80061c6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80061c8:	6904      	ldr	r4, [r0, #16]
 80061ca:	e7f2      	b.n	80061b2 <vListInsert+0x18>

080061cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80061cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061ce:	6841      	ldr	r1, [r0, #4]
 80061d0:	6882      	ldr	r2, [r0, #8]
 80061d2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061d4:	6841      	ldr	r1, [r0, #4]
 80061d6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	4282      	cmp	r2, r0
 80061dc:	d006      	beq.n	80061ec <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80061de:	2200      	movs	r2, #0
 80061e0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	3a01      	subs	r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061e8:	6818      	ldr	r0, [r3, #0]
}
 80061ea:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061ec:	6882      	ldr	r2, [r0, #8]
 80061ee:	605a      	str	r2, [r3, #4]
 80061f0:	e7f5      	b.n	80061de <uxListRemove+0x12>

080061f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80061f2:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80061f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80061f6:	b118      	cbz	r0, 8006200 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8006200:	4770      	bx	lr

08006202 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006202:	b510      	push	{r4, lr}
 8006204:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006206:	f001 fdcd 	bl	8007da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800620a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800620c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800620e:	429a      	cmp	r2, r3
 8006210:	d004      	beq.n	800621c <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8006212:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8006214:	f001 fde8 	bl	8007de8 <vPortExitCritical>

	return xReturn;
}
 8006218:	4620      	mov	r0, r4
 800621a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800621c:	2401      	movs	r4, #1
 800621e:	e7f9      	b.n	8006214 <prvIsQueueFull+0x12>

08006220 <prvIsQueueEmpty>:
{
 8006220:	b510      	push	{r4, lr}
 8006222:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006224:	f001 fdbe 	bl	8007da4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800622a:	b923      	cbnz	r3, 8006236 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800622c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800622e:	f001 fddb 	bl	8007de8 <vPortExitCritical>
}
 8006232:	4620      	mov	r0, r4
 8006234:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8006236:	2400      	movs	r4, #0
 8006238:	e7f9      	b.n	800622e <prvIsQueueEmpty+0xe>

0800623a <prvCopyDataToQueue>:
{
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	4604      	mov	r4, r0
 800623e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006240:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006242:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006244:	b95a      	cbnz	r2, 800625e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006246:	6803      	ldr	r3, [r0, #0]
 8006248:	b11b      	cbz	r3, 8006252 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800624a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800624c:	3601      	adds	r6, #1
 800624e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8006250:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006252:	6840      	ldr	r0, [r0, #4]
 8006254:	f001 fa70 	bl	8007738 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	6063      	str	r3, [r4, #4]
 800625c:	e7f6      	b.n	800624c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800625e:	b96d      	cbnz	r5, 800627c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006260:	6880      	ldr	r0, [r0, #8]
 8006262:	f002 f9ec 	bl	800863e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006266:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006268:	68a3      	ldr	r3, [r4, #8]
 800626a:	4413      	add	r3, r2
 800626c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800626e:	6862      	ldr	r2, [r4, #4]
 8006270:	4293      	cmp	r3, r2
 8006272:	d319      	bcc.n	80062a8 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8006278:	4628      	mov	r0, r5
 800627a:	e7e7      	b.n	800624c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800627c:	68c0      	ldr	r0, [r0, #12]
 800627e:	f002 f9de 	bl	800863e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006282:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006284:	4251      	negs	r1, r2
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	4293      	cmp	r3, r2
 8006290:	d202      	bcs.n	8006298 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006292:	6863      	ldr	r3, [r4, #4]
 8006294:	440b      	add	r3, r1
 8006296:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006298:	2d02      	cmp	r5, #2
 800629a:	d001      	beq.n	80062a0 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800629c:	2000      	movs	r0, #0
 800629e:	e7d5      	b.n	800624c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062a0:	b126      	cbz	r6, 80062ac <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80062a2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80062a4:	2000      	movs	r0, #0
 80062a6:	e7d1      	b.n	800624c <prvCopyDataToQueue+0x12>
 80062a8:	4628      	mov	r0, r5
 80062aa:	e7cf      	b.n	800624c <prvCopyDataToQueue+0x12>
 80062ac:	2000      	movs	r0, #0
 80062ae:	e7cd      	b.n	800624c <prvCopyDataToQueue+0x12>

080062b0 <prvCopyDataFromQueue>:
{
 80062b0:	b508      	push	{r3, lr}
 80062b2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80062b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80062b6:	b162      	cbz	r2, 80062d2 <prvCopyDataFromQueue+0x22>
 80062b8:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80062ba:	68d9      	ldr	r1, [r3, #12]
 80062bc:	4411      	add	r1, r2
 80062be:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062c0:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80062c4:	4561      	cmp	r1, ip
 80062c6:	d301      	bcc.n	80062cc <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80062cc:	68d9      	ldr	r1, [r3, #12]
 80062ce:	f002 f9b6 	bl	800863e <memcpy>
}
 80062d2:	bd08      	pop	{r3, pc}

080062d4 <prvUnlockQueue>:
{
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80062d8:	f001 fd64 	bl	8007da4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80062dc:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80062e0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e2:	e001      	b.n	80062e8 <prvUnlockQueue+0x14>
			--cTxLock;
 80062e4:	3c01      	subs	r4, #1
 80062e6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e8:	2c00      	cmp	r4, #0
 80062ea:	dd0a      	ble.n	8006302 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062ee:	b143      	cbz	r3, 8006302 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80062f4:	f001 f8e0 	bl	80074b8 <xTaskRemoveFromEventList>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d0f3      	beq.n	80062e4 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 80062fc:	f001 f9b4 	bl	8007668 <vTaskMissedYield>
 8006300:	e7f0      	b.n	80062e4 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8006302:	23ff      	movs	r3, #255	; 0xff
 8006304:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006308:	f001 fd6e 	bl	8007de8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800630c:	f001 fd4a 	bl	8007da4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006310:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8006314:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006316:	e001      	b.n	800631c <prvUnlockQueue+0x48>
				--cRxLock;
 8006318:	3c01      	subs	r4, #1
 800631a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800631c:	2c00      	cmp	r4, #0
 800631e:	dd0a      	ble.n	8006336 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006320:	692b      	ldr	r3, [r5, #16]
 8006322:	b143      	cbz	r3, 8006336 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006324:	f105 0010 	add.w	r0, r5, #16
 8006328:	f001 f8c6 	bl	80074b8 <xTaskRemoveFromEventList>
 800632c:	2800      	cmp	r0, #0
 800632e:	d0f3      	beq.n	8006318 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8006330:	f001 f99a 	bl	8007668 <vTaskMissedYield>
 8006334:	e7f0      	b.n	8006318 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8006336:	23ff      	movs	r3, #255	; 0xff
 8006338:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800633c:	f001 fd54 	bl	8007de8 <vPortExitCritical>
}
 8006340:	bd38      	pop	{r3, r4, r5, pc}

08006342 <xQueueGenericReset>:
{
 8006342:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8006344:	b1e0      	cbz	r0, 8006380 <xQueueGenericReset+0x3e>
 8006346:	460d      	mov	r5, r1
 8006348:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800634a:	f001 fd2b 	bl	8007da4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006352:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006354:	fb01 3002 	mla	r0, r1, r2, r3
 8006358:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800635a:	2000      	movs	r0, #0
 800635c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800635e:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006360:	3a01      	subs	r2, #1
 8006362:	fb02 3301 	mla	r3, r2, r1, r3
 8006366:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006368:	23ff      	movs	r3, #255	; 0xff
 800636a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800636e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006372:	b9fd      	cbnz	r5, 80063b4 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	b963      	cbnz	r3, 8006392 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8006378:	f001 fd36 	bl	8007de8 <vPortExitCritical>
}
 800637c:	2001      	movs	r0, #1
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006390:	e7fe      	b.n	8006390 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006392:	f104 0010 	add.w	r0, r4, #16
 8006396:	f001 f88f 	bl	80074b8 <xTaskRemoveFromEventList>
 800639a:	2800      	cmp	r0, #0
 800639c:	d0ec      	beq.n	8006378 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800639e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	e7e1      	b.n	8006378 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063b4:	f104 0010 	add.w	r0, r4, #16
 80063b8:	f7ff fed6 	bl	8006168 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80063c0:	f7ff fed2 	bl	8006168 <vListInitialise>
 80063c4:	e7d8      	b.n	8006378 <xQueueGenericReset+0x36>

080063c6 <prvInitialiseNewQueue>:
{
 80063c6:	b538      	push	{r3, r4, r5, lr}
 80063c8:	461d      	mov	r5, r3
 80063ca:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80063cc:	460b      	mov	r3, r1
 80063ce:	b949      	cbnz	r1, 80063e4 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063d0:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80063d2:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063d4:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063d6:	2101      	movs	r1, #1
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff ffb2 	bl	8006342 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80063de:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063e4:	6022      	str	r2, [r4, #0]
 80063e6:	e7f4      	b.n	80063d2 <prvInitialiseNewQueue+0xc>

080063e8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063e8:	b940      	cbnz	r0, 80063fc <xQueueGenericCreateStatic+0x14>
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	e7fe      	b.n	80063fa <xQueueGenericCreateStatic+0x12>
	{
 80063fc:	b510      	push	{r4, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	461c      	mov	r4, r3
 8006402:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8006404:	b153      	cbz	r3, 800641c <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006406:	b192      	cbz	r2, 800642e <xQueueGenericCreateStatic+0x46>
 8006408:	b989      	cbnz	r1, 800642e <xQueueGenericCreateStatic+0x46>
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	e7fe      	b.n	800641a <xQueueGenericCreateStatic+0x32>
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800642c:	e7fe      	b.n	800642c <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800642e:	b16a      	cbz	r2, 800644c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006430:	2350      	movs	r3, #80	; 0x50
 8006432:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006434:	9b03      	ldr	r3, [sp, #12]
 8006436:	2b50      	cmp	r3, #80	; 0x50
 8006438:	d013      	beq.n	8006462 <xQueueGenericCreateStatic+0x7a>
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	e7fe      	b.n	800644a <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800644c:	2900      	cmp	r1, #0
 800644e:	d0ef      	beq.n	8006430 <xQueueGenericCreateStatic+0x48>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	e7fe      	b.n	8006460 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006468:	9400      	str	r4, [sp, #0]
 800646a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800646e:	4660      	mov	r0, ip
 8006470:	f7ff ffa9 	bl	80063c6 <prvInitialiseNewQueue>
	}
 8006474:	4620      	mov	r0, r4
 8006476:	b004      	add	sp, #16
 8006478:	bd10      	pop	{r4, pc}

0800647a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800647a:	b940      	cbnz	r0, 800648e <xQueueGenericCreate+0x14>
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	e7fe      	b.n	800648c <xQueueGenericCreate+0x12>
	{
 800648e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006490:	b083      	sub	sp, #12
 8006492:	460c      	mov	r4, r1
 8006494:	4615      	mov	r5, r2
 8006496:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8006498:	b1a1      	cbz	r1, 80064c4 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800649e:	3050      	adds	r0, #80	; 0x50
 80064a0:	f001 fdfa 	bl	8008098 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80064a4:	4606      	mov	r6, r0
 80064a6:	b150      	cbz	r0, 80064be <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064ae:	9000      	str	r0, [sp, #0]
 80064b0:	462b      	mov	r3, r5
 80064b2:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80064b6:	4621      	mov	r1, r4
 80064b8:	4638      	mov	r0, r7
 80064ba:	f7ff ff84 	bl	80063c6 <prvInitialiseNewQueue>
	}
 80064be:	4630      	mov	r0, r6
 80064c0:	b003      	add	sp, #12
 80064c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 80064c4:	4608      	mov	r0, r1
 80064c6:	e7ea      	b.n	800649e <xQueueGenericCreate+0x24>

080064c8 <xQueueGenericSend>:
{
 80064c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ca:	b085      	sub	sp, #20
 80064cc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80064ce:	b188      	cbz	r0, 80064f4 <xQueueGenericSend+0x2c>
 80064d0:	460f      	mov	r7, r1
 80064d2:	461d      	mov	r5, r3
 80064d4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064d6:	b1b1      	cbz	r1, 8006506 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064d8:	2d02      	cmp	r5, #2
 80064da:	d120      	bne.n	800651e <xQueueGenericSend+0x56>
 80064dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d01d      	beq.n	800651e <xQueueGenericSend+0x56>
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	e7fe      	b.n	80064f2 <xQueueGenericSend+0x2a>
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006504:	e7fe      	b.n	8006504 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006506:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0e5      	beq.n	80064d8 <xQueueGenericSend+0x10>
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	e7fe      	b.n	800651c <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800651e:	f001 f8af 	bl	8007680 <xTaskGetSchedulerState>
 8006522:	4606      	mov	r6, r0
 8006524:	b958      	cbnz	r0, 800653e <xQueueGenericSend+0x76>
 8006526:	9b01      	ldr	r3, [sp, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d048      	beq.n	80065be <xQueueGenericSend+0xf6>
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	e7fe      	b.n	800653c <xQueueGenericSend+0x74>
 800653e:	2600      	movs	r6, #0
 8006540:	e03d      	b.n	80065be <xQueueGenericSend+0xf6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006542:	462a      	mov	r2, r5
 8006544:	4639      	mov	r1, r7
 8006546:	4620      	mov	r0, r4
 8006548:	f7ff fe77 	bl	800623a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800654c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654e:	b97b      	cbnz	r3, 8006570 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8006550:	b148      	cbz	r0, 8006566 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8006552:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006566:	f001 fc3f 	bl	8007de8 <vPortExitCritical>
				return pdPASS;
 800656a:	2001      	movs	r0, #1
}
 800656c:	b005      	add	sp, #20
 800656e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006570:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006574:	f000 ffa0 	bl	80074b8 <xTaskRemoveFromEventList>
 8006578:	2800      	cmp	r0, #0
 800657a:	d0f4      	beq.n	8006566 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800657c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006584:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	e7e9      	b.n	8006566 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8006592:	f001 fc29 	bl	8007de8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006596:	2000      	movs	r0, #0
 8006598:	e7e8      	b.n	800656c <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800659a:	a802      	add	r0, sp, #8
 800659c:	f001 f816 	bl	80075cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065a0:	2601      	movs	r6, #1
 80065a2:	e019      	b.n	80065d8 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 80065a4:	2300      	movs	r3, #0
 80065a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80065aa:	e021      	b.n	80065f0 <xQueueGenericSend+0x128>
 80065ac:	2300      	movs	r3, #0
 80065ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065b2:	e023      	b.n	80065fc <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7ff fe8d 	bl	80062d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065ba:	f000 fe05 	bl	80071c8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80065be:	f001 fbf1 	bl	8007da4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80065c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3bb      	bcc.n	8006542 <xQueueGenericSend+0x7a>
 80065ca:	2d02      	cmp	r5, #2
 80065cc:	d0b9      	beq.n	8006542 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0de      	beq.n	8006592 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80065d4:	2e00      	cmp	r6, #0
 80065d6:	d0e0      	beq.n	800659a <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80065d8:	f001 fc06 	bl	8007de8 <vPortExitCritical>
		vTaskSuspendAll();
 80065dc:	f000 fd5a 	bl	8007094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065e0:	f001 fbe0 	bl	8007da4 <vPortEnterCritical>
 80065e4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80065e8:	b252      	sxtb	r2, r2
 80065ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 80065ee:	d0d9      	beq.n	80065a4 <xQueueGenericSend+0xdc>
 80065f0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80065f4:	b252      	sxtb	r2, r2
 80065f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80065fa:	d0d7      	beq.n	80065ac <xQueueGenericSend+0xe4>
 80065fc:	f001 fbf4 	bl	8007de8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006600:	a901      	add	r1, sp, #4
 8006602:	a802      	add	r0, sp, #8
 8006604:	f000 ffee 	bl	80075e4 <xTaskCheckForTimeOut>
 8006608:	b9d8      	cbnz	r0, 8006642 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800660a:	4620      	mov	r0, r4
 800660c:	f7ff fdf9 	bl	8006202 <prvIsQueueFull>
 8006610:	2800      	cmp	r0, #0
 8006612:	d0cf      	beq.n	80065b4 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006614:	9901      	ldr	r1, [sp, #4]
 8006616:	f104 0010 	add.w	r0, r4, #16
 800661a:	f000 feed 	bl	80073f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800661e:	4620      	mov	r0, r4
 8006620:	f7ff fe58 	bl	80062d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006624:	f000 fdd0 	bl	80071c8 <xTaskResumeAll>
 8006628:	2800      	cmp	r0, #0
 800662a:	d1c8      	bne.n	80065be <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800662c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006634:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	e7bd      	b.n	80065be <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff fe46 	bl	80062d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006648:	f000 fdbe 	bl	80071c8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800664c:	2000      	movs	r0, #0
 800664e:	e78d      	b.n	800656c <xQueueGenericSend+0xa4>

08006650 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8006650:	b148      	cbz	r0, 8006666 <prvInitialiseMutex+0x16>
	{
 8006652:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8006654:	2100      	movs	r1, #0
 8006656:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006658:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800665a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800665c:	460b      	mov	r3, r1
 800665e:	460a      	mov	r2, r1
 8006660:	f7ff ff32 	bl	80064c8 <xQueueGenericSend>
	}
 8006664:	bd08      	pop	{r3, pc}
 8006666:	4770      	bx	lr

08006668 <xQueueCreateMutex>:
	{
 8006668:	b510      	push	{r4, lr}
 800666a:	4602      	mov	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800666c:	2100      	movs	r1, #0
 800666e:	2001      	movs	r0, #1
 8006670:	f7ff ff03 	bl	800647a <xQueueGenericCreate>
 8006674:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8006676:	f7ff ffeb 	bl	8006650 <prvInitialiseMutex>
	}
 800667a:	4620      	mov	r0, r4
 800667c:	bd10      	pop	{r4, pc}

0800667e <xQueueCreateMutexStatic>:
	{
 800667e:	b510      	push	{r4, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006684:	9000      	str	r0, [sp, #0]
 8006686:	2200      	movs	r2, #0
 8006688:	4611      	mov	r1, r2
 800668a:	2001      	movs	r0, #1
 800668c:	f7ff feac 	bl	80063e8 <xQueueGenericCreateStatic>
 8006690:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8006692:	f7ff ffdd 	bl	8006650 <prvInitialiseMutex>
	}
 8006696:	4620      	mov	r0, r4
 8006698:	b002      	add	sp, #8
 800669a:	bd10      	pop	{r4, pc}

0800669c <xQueueGiveMutexRecursive>:
	{
 800669c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800669e:	b138      	cbz	r0, 80066b0 <xQueueGiveMutexRecursive+0x14>
 80066a0:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80066a2:	6845      	ldr	r5, [r0, #4]
 80066a4:	f000 ffe6 	bl	8007674 <xTaskGetCurrentTaskHandle>
 80066a8:	4285      	cmp	r5, r0
 80066aa:	d00a      	beq.n	80066c2 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 80066ac:	2000      	movs	r0, #0
	}
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80066c0:	e7fe      	b.n	80066c0 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80066c8:	b10b      	cbz	r3, 80066ce <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 80066ca:	2001      	movs	r0, #1
		return xReturn;
 80066cc:	e7ef      	b.n	80066ae <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80066ce:	461a      	mov	r2, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff fef8 	bl	80064c8 <xQueueGenericSend>
			xReturn = pdPASS;
 80066d8:	2001      	movs	r0, #1
 80066da:	e7e8      	b.n	80066ae <xQueueGiveMutexRecursive+0x12>

080066dc <xQueueGenericSendFromISR>:
{
 80066dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80066e0:	b190      	cbz	r0, 8006708 <xQueueGenericSendFromISR+0x2c>
 80066e2:	460f      	mov	r7, r1
 80066e4:	4616      	mov	r6, r2
 80066e6:	461c      	mov	r4, r3
 80066e8:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066ea:	b1b1      	cbz	r1, 800671a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066ec:	2c02      	cmp	r4, #2
 80066ee:	d120      	bne.n	8006732 <xQueueGenericSendFromISR+0x56>
 80066f0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d01d      	beq.n	8006732 <xQueueGenericSendFromISR+0x56>
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	e7fe      	b.n	8006706 <xQueueGenericSendFromISR+0x2a>
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006718:	e7fe      	b.n	8006718 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0e5      	beq.n	80066ec <xQueueGenericSendFromISR+0x10>
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	e7fe      	b.n	8006730 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006732:	f001 fc21 	bl	8007f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006736:	f3ef 8811 	mrs	r8, BASEPRI
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800674a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800674c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800674e:	429a      	cmp	r2, r3
 8006750:	d306      	bcc.n	8006760 <xQueueGenericSendFromISR+0x84>
 8006752:	2c02      	cmp	r4, #2
 8006754:	d004      	beq.n	8006760 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8006756:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006758:	f388 8811 	msr	BASEPRI, r8
}
 800675c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8006760:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8006764:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006768:	4622      	mov	r2, r4
 800676a:	4639      	mov	r1, r7
 800676c:	4628      	mov	r0, r5
 800676e:	f7ff fd64 	bl	800623a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006772:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006776:	d006      	beq.n	8006786 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006778:	f109 0301 	add.w	r3, r9, #1
 800677c:	b25b      	sxtb	r3, r3
 800677e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8006782:	2001      	movs	r0, #1
 8006784:	e7e8      	b.n	8006758 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006788:	b90b      	cbnz	r3, 800678e <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 800678a:	2001      	movs	r0, #1
 800678c:	e7e4      	b.n	8006758 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800678e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006792:	f000 fe91 	bl	80074b8 <xTaskRemoveFromEventList>
 8006796:	b118      	cbz	r0, 80067a0 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006798:	b126      	cbz	r6, 80067a4 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800679a:	2001      	movs	r0, #1
 800679c:	6030      	str	r0, [r6, #0]
 800679e:	e7db      	b.n	8006758 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80067a0:	2001      	movs	r0, #1
 80067a2:	e7d9      	b.n	8006758 <xQueueGenericSendFromISR+0x7c>
 80067a4:	2001      	movs	r0, #1
 80067a6:	e7d7      	b.n	8006758 <xQueueGenericSendFromISR+0x7c>

080067a8 <xQueueReceive>:
{
 80067a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067aa:	b085      	sub	sp, #20
 80067ac:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80067ae:	b190      	cbz	r0, 80067d6 <xQueueReceive+0x2e>
 80067b0:	460f      	mov	r7, r1
 80067b2:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067b4:	b1c1      	cbz	r1, 80067e8 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b6:	f000 ff63 	bl	8007680 <xTaskGetSchedulerState>
 80067ba:	4606      	mov	r6, r0
 80067bc:	bb00      	cbnz	r0, 8006800 <xQueueReceive+0x58>
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d05e      	beq.n	8006882 <xQueueReceive+0xda>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	e7fe      	b.n	80067d4 <xQueueReceive+0x2c>
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80067e6:	e7fe      	b.n	80067e6 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067e8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0e3      	beq.n	80067b6 <xQueueReceive+0xe>
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	e7fe      	b.n	80067fe <xQueueReceive+0x56>
 8006800:	2600      	movs	r6, #0
 8006802:	e03e      	b.n	8006882 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006804:	4639      	mov	r1, r7
 8006806:	4620      	mov	r0, r4
 8006808:	f7ff fd52 	bl	80062b0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800680c:	3d01      	subs	r5, #1
 800680e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006810:	6923      	ldr	r3, [r4, #16]
 8006812:	b923      	cbnz	r3, 800681e <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8006814:	f001 fae8 	bl	8007de8 <vPortExitCritical>
				return pdPASS;
 8006818:	2001      	movs	r0, #1
}
 800681a:	b005      	add	sp, #20
 800681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800681e:	f104 0010 	add.w	r0, r4, #16
 8006822:	f000 fe49 	bl	80074b8 <xTaskRemoveFromEventList>
 8006826:	2800      	cmp	r0, #0
 8006828:	d0f4      	beq.n	8006814 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800682a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800682e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006832:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	e7e9      	b.n	8006814 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8006840:	f001 fad2 	bl	8007de8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006844:	2000      	movs	r0, #0
 8006846:	e7e8      	b.n	800681a <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006848:	a802      	add	r0, sp, #8
 800684a:	f000 febf 	bl	80075cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800684e:	2601      	movs	r6, #1
 8006850:	e021      	b.n	8006896 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8006852:	2300      	movs	r3, #0
 8006854:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006858:	e029      	b.n	80068ae <xQueueReceive+0x106>
 800685a:	2300      	movs	r3, #0
 800685c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006860:	e02b      	b.n	80068ba <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff fd36 	bl	80062d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006868:	f000 fcae 	bl	80071c8 <xTaskResumeAll>
 800686c:	e009      	b.n	8006882 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff fd30 	bl	80062d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006874:	f000 fca8 	bl	80071c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006878:	4620      	mov	r0, r4
 800687a:	f7ff fcd1 	bl	8006220 <prvIsQueueEmpty>
 800687e:	2800      	cmp	r0, #0
 8006880:	d13f      	bne.n	8006902 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8006882:	f001 fa8f 	bl	8007da4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006886:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006888:	2d00      	cmp	r5, #0
 800688a:	d1bb      	bne.n	8006804 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800688c:	9b01      	ldr	r3, [sp, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0d6      	beq.n	8006840 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8006892:	2e00      	cmp	r6, #0
 8006894:	d0d8      	beq.n	8006848 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8006896:	f001 faa7 	bl	8007de8 <vPortExitCritical>
		vTaskSuspendAll();
 800689a:	f000 fbfb 	bl	8007094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689e:	f001 fa81 	bl	8007da4 <vPortEnterCritical>
 80068a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80068a6:	b25b      	sxtb	r3, r3
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d0d1      	beq.n	8006852 <xQueueReceive+0xaa>
 80068ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d0cf      	beq.n	800685a <xQueueReceive+0xb2>
 80068ba:	f001 fa95 	bl	8007de8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068be:	a901      	add	r1, sp, #4
 80068c0:	a802      	add	r0, sp, #8
 80068c2:	f000 fe8f 	bl	80075e4 <xTaskCheckForTimeOut>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d1d1      	bne.n	800686e <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7ff fca8 	bl	8006220 <prvIsQueueEmpty>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d0c6      	beq.n	8006862 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068d4:	9901      	ldr	r1, [sp, #4]
 80068d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80068da:	f000 fd8d 	bl	80073f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068de:	4620      	mov	r0, r4
 80068e0:	f7ff fcf8 	bl	80062d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068e4:	f000 fc70 	bl	80071c8 <xTaskResumeAll>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d1ca      	bne.n	8006882 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80068ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80068f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	e7bf      	b.n	8006882 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8006902:	2000      	movs	r0, #0
 8006904:	e789      	b.n	800681a <xQueueReceive+0x72>

08006906 <xQueueSemaphoreTake>:
{
 8006906:	b570      	push	{r4, r5, r6, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800690c:	b158      	cbz	r0, 8006926 <xQueueSemaphoreTake+0x20>
 800690e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8006910:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006912:	b18b      	cbz	r3, 8006938 <xQueueSemaphoreTake+0x32>
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	e7fe      	b.n	8006924 <xQueueSemaphoreTake+0x1e>
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006936:	e7fe      	b.n	8006936 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006938:	f000 fea2 	bl	8007680 <xTaskGetSchedulerState>
 800693c:	4605      	mov	r5, r0
 800693e:	b950      	cbnz	r0, 8006956 <xQueueSemaphoreTake+0x50>
 8006940:	9b01      	ldr	r3, [sp, #4]
 8006942:	b15b      	cbz	r3, 800695c <xQueueSemaphoreTake+0x56>
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	e7fe      	b.n	8006954 <xQueueSemaphoreTake+0x4e>
 8006956:	2600      	movs	r6, #0
 8006958:	4635      	mov	r5, r6
 800695a:	e055      	b.n	8006a08 <xQueueSemaphoreTake+0x102>
 800695c:	4606      	mov	r6, r0
 800695e:	e053      	b.n	8006a08 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006960:	3b01      	subs	r3, #1
 8006962:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	b13b      	cbz	r3, 8006978 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006968:	6923      	ldr	r3, [r4, #16]
 800696a:	b94b      	cbnz	r3, 8006980 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800696c:	f001 fa3c 	bl	8007de8 <vPortExitCritical>
				return pdPASS;
 8006970:	2601      	movs	r6, #1
}
 8006972:	4630      	mov	r0, r6
 8006974:	b004      	add	sp, #16
 8006976:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006978:	f000 ff82 	bl	8007880 <pvTaskIncrementMutexHeldCount>
 800697c:	6060      	str	r0, [r4, #4]
 800697e:	e7f3      	b.n	8006968 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006980:	f104 0010 	add.w	r0, r4, #16
 8006984:	f000 fd98 	bl	80074b8 <xTaskRemoveFromEventList>
 8006988:	2800      	cmp	r0, #0
 800698a:	d0ef      	beq.n	800696c <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800698c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	e7e4      	b.n	800696c <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80069a2:	b146      	cbz	r6, 80069b6 <xQueueSemaphoreTake+0xb0>
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	e7fe      	b.n	80069b4 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 80069b6:	f001 fa17 	bl	8007de8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80069ba:	e7da      	b.n	8006972 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069bc:	a802      	add	r0, sp, #8
 80069be:	f000 fe05 	bl	80075cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069c2:	2501      	movs	r5, #1
 80069c4:	e02a      	b.n	8006a1c <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 80069c6:	2300      	movs	r3, #0
 80069c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80069cc:	e032      	b.n	8006a34 <xQueueSemaphoreTake+0x12e>
 80069ce:	2300      	movs	r3, #0
 80069d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069d4:	e034      	b.n	8006a40 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80069d6:	f001 f9e5 	bl	8007da4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80069da:	6860      	ldr	r0, [r4, #4]
 80069dc:	f000 fe60 	bl	80076a0 <xTaskPriorityInherit>
 80069e0:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80069e2:	f001 fa01 	bl	8007de8 <vPortExitCritical>
 80069e6:	e03b      	b.n	8006a60 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7ff fc73 	bl	80062d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069ee:	f000 fbeb 	bl	80071c8 <xTaskResumeAll>
 80069f2:	e009      	b.n	8006a08 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80069f4:	4620      	mov	r0, r4
 80069f6:	f7ff fc6d 	bl	80062d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069fa:	f000 fbe5 	bl	80071c8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069fe:	4620      	mov	r0, r4
 8006a00:	f7ff fc0e 	bl	8006220 <prvIsQueueEmpty>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d142      	bne.n	8006a8e <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 8006a08:	f001 f9cc 	bl	8007da4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1a6      	bne.n	8006960 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a12:	9b01      	ldr	r3, [sp, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0c4      	beq.n	80069a2 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	d0cf      	beq.n	80069bc <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8006a1c:	f001 f9e4 	bl	8007de8 <vPortExitCritical>
		vTaskSuspendAll();
 8006a20:	f000 fb38 	bl	8007094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a24:	f001 f9be 	bl	8007da4 <vPortEnterCritical>
 8006a28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006a2c:	b25b      	sxtb	r3, r3
 8006a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a32:	d0c8      	beq.n	80069c6 <xQueueSemaphoreTake+0xc0>
 8006a34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006a38:	b25b      	sxtb	r3, r3
 8006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3e:	d0c6      	beq.n	80069ce <xQueueSemaphoreTake+0xc8>
 8006a40:	f001 f9d2 	bl	8007de8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a44:	a901      	add	r1, sp, #4
 8006a46:	a802      	add	r0, sp, #8
 8006a48:	f000 fdcc 	bl	80075e4 <xTaskCheckForTimeOut>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1d1      	bne.n	80069f4 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a50:	4620      	mov	r0, r4
 8006a52:	f7ff fbe5 	bl	8006220 <prvIsQueueEmpty>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d0c6      	beq.n	80069e8 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0ba      	beq.n	80069d6 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a60:	9901      	ldr	r1, [sp, #4]
 8006a62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006a66:	f000 fcc7 	bl	80073f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7ff fc32 	bl	80062d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a70:	f000 fbaa 	bl	80071c8 <xTaskResumeAll>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d1c7      	bne.n	8006a08 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8006a78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a80:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	e7bc      	b.n	8006a08 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8006a8e:	b90e      	cbnz	r6, 8006a94 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 8006a90:	2600      	movs	r6, #0
 8006a92:	e76e      	b.n	8006972 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 8006a94:	f001 f986 	bl	8007da4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7ff fbaa 	bl	80061f2 <prvGetDisinheritPriorityAfterTimeout>
 8006a9e:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006aa0:	6860      	ldr	r0, [r4, #4]
 8006aa2:	f000 fe91 	bl	80077c8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006aa6:	f001 f99f 	bl	8007de8 <vPortExitCritical>
 8006aaa:	e7f1      	b.n	8006a90 <xQueueSemaphoreTake+0x18a>

08006aac <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8006aac:	b180      	cbz	r0, 8006ad0 <xQueueTakeMutexRecursive+0x24>
	{
 8006aae:	b570      	push	{r4, r5, r6, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	4605      	mov	r5, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006ab4:	6846      	ldr	r6, [r0, #4]
 8006ab6:	f000 fddd 	bl	8007674 <xTaskGetCurrentTaskHandle>
 8006aba:	4286      	cmp	r6, r0
 8006abc:	d011      	beq.n	8006ae2 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f7ff ff20 	bl	8006906 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006ac6:	b180      	cbz	r0, 8006aea <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.uxRecursiveCallCount )++;
 8006ac8:	68eb      	ldr	r3, [r5, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8006ace:	e00c      	b.n	8006aea <xQueueTakeMutexRecursive+0x3e>
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8006ae0:	e7fe      	b.n	8006ae0 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.uxRecursiveCallCount )++;
 8006ae2:	68eb      	ldr	r3, [r5, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8006ae8:	2001      	movs	r0, #1
	}
 8006aea:	bd70      	pop	{r4, r5, r6, pc}

08006aec <xQueueReceiveFromISR>:
{
 8006aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006af0:	b1b0      	cbz	r0, 8006b20 <xQueueReceiveFromISR+0x34>
 8006af2:	460d      	mov	r5, r1
 8006af4:	4690      	mov	r8, r2
 8006af6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af8:	b1d9      	cbz	r1, 8006b32 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006afa:	f001 fa3d 	bl	8007f78 <vPortValidateInterruptPriority>
	__asm volatile
 8006afe:	f3ef 8711 	mrs	r7, BASEPRI
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b14:	b9ce      	cbnz	r6, 8006b4a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8006b16:	2000      	movs	r0, #0
	__asm volatile
 8006b18:	f387 8811 	msr	BASEPRI, r7
}
 8006b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006b30:	e7fe      	b.n	8006b30 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0e0      	beq.n	8006afa <xQueueReceiveFromISR+0xe>
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	e7fe      	b.n	8006b48 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006b4a:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8006b4e:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b52:	4629      	mov	r1, r5
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7ff fbab 	bl	80062b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b5a:	1e73      	subs	r3, r6, #1
 8006b5c:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8006b5e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006b62:	d006      	beq.n	8006b72 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b64:	f109 0301 	add.w	r3, r9, #1
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e7d2      	b.n	8006b18 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	b90b      	cbnz	r3, 8006b7a <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8006b76:	2001      	movs	r0, #1
 8006b78:	e7ce      	b.n	8006b18 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b7a:	f104 0010 	add.w	r0, r4, #16
 8006b7e:	f000 fc9b 	bl	80074b8 <xTaskRemoveFromEventList>
 8006b82:	b130      	cbz	r0, 8006b92 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8006b84:	f1b8 0f00 	cmp.w	r8, #0
 8006b88:	d005      	beq.n	8006b96 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	f8c8 0000 	str.w	r0, [r8]
 8006b90:	e7c2      	b.n	8006b18 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8006b92:	2001      	movs	r0, #1
 8006b94:	e7c0      	b.n	8006b18 <xQueueReceiveFromISR+0x2c>
 8006b96:	2001      	movs	r0, #1
 8006b98:	e7be      	b.n	8006b18 <xQueueReceiveFromISR+0x2c>
	...

08006b9c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	2b07      	cmp	r3, #7
 8006ba0:	d80c      	bhi.n	8006bbc <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ba2:	4a07      	ldr	r2, [pc, #28]	; (8006bc0 <vQueueAddToRegistry+0x24>)
 8006ba4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006ba8:	b10a      	cbz	r2, 8006bae <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006baa:	3301      	adds	r3, #1
 8006bac:	e7f7      	b.n	8006b9e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006bae:	4a04      	ldr	r2, [pc, #16]	; (8006bc0 <vQueueAddToRegistry+0x24>)
 8006bb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006bb4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006bb8:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006bba:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	20001634 	.word	0x20001634

08006bc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	460d      	mov	r5, r1
 8006bca:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bcc:	f001 f8ea 	bl	8007da4 <vPortEnterCritical>
 8006bd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d00d      	beq.n	8006bf8 <vQueueWaitForMessageRestricted+0x34>
 8006bdc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006be0:	b25b      	sxtb	r3, r3
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d00b      	beq.n	8006c00 <vQueueWaitForMessageRestricted+0x3c>
 8006be8:	f001 f8fe 	bl	8007de8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bee:	b15b      	cbz	r3, 8006c08 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f7ff fb6f 	bl	80062d4 <prvUnlockQueue>
	}
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006bfe:	e7ed      	b.n	8006bdc <vQueueWaitForMessageRestricted+0x18>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c06:	e7ef      	b.n	8006be8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c10:	f000 fc36 	bl	8007480 <vTaskPlaceOnEventListRestricted>
 8006c14:	e7ec      	b.n	8006bf0 <vQueueWaitForMessageRestricted+0x2c>
	...

08006c18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c18:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <prvResetNextTaskUnblockTime+0x24>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	b923      	cbnz	r3, 8006c2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <prvResetNextTaskUnblockTime+0x28>)
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c2a:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <prvResetNextTaskUnblockTime+0x24>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <prvResetNextTaskUnblockTime+0x28>)
 8006c36:	601a      	str	r2, [r3, #0]
	}
}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20001678 	.word	0x20001678
 8006c40:	20001b24 	.word	0x20001b24

08006c44 <prvInitialiseNewTask>:
{
 8006c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c48:	4680      	mov	r8, r0
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	4617      	mov	r7, r2
 8006c4e:	4699      	mov	r9, r3
 8006c50:	9e08      	ldr	r6, [sp, #32]
 8006c52:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006c56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c58:	0092      	lsls	r2, r2, #2
 8006c5a:	21a5      	movs	r1, #165	; 0xa5
 8006c5c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006c5e:	f001 fc6a 	bl	8008536 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006c62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c64:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8006c68:	3a01      	subs	r2, #1
 8006c6a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006c6e:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c72:	f04f 0c00 	mov.w	ip, #0
 8006c76:	f1bc 0f0f 	cmp.w	ip, #15
 8006c7a:	d809      	bhi.n	8006c90 <prvInitialiseNewTask+0x4c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c7c:	f815 300c 	ldrb.w	r3, [r5, ip]
 8006c80:	eb04 020c 	add.w	r2, r4, ip
 8006c84:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8006c88:	b113      	cbz	r3, 8006c90 <prvInitialiseNewTask+0x4c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c8a:	f10c 0c01 	add.w	ip, ip, #1
 8006c8e:	e7f2      	b.n	8006c76 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c90:	2300      	movs	r3, #0
 8006c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c96:	2e37      	cmp	r6, #55	; 0x37
 8006c98:	d900      	bls.n	8006c9c <prvInitialiseNewTask+0x58>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c9a:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8006c9c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006c9e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ca0:	2500      	movs	r5, #0
 8006ca2:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ca4:	1d20      	adds	r0, r4, #4
 8006ca6:	f7ff fa6a 	bl	800617e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006caa:	f104 0018 	add.w	r0, r4, #24
 8006cae:	f7ff fa66 	bl	800617e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cb2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb4:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8006cb8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cba:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8006cbc:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8006cbe:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cc0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cc4:	464a      	mov	r2, r9
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f001 f843 	bl	8007d54 <pxPortInitialiseStack>
 8006cce:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006cd0:	f1ba 0f00 	cmp.w	sl, #0
 8006cd4:	d001      	beq.n	8006cda <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cd6:	f8ca 4000 	str.w	r4, [sl]
}
 8006cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006ce0 <prvInitialiseTaskLists>:
{
 8006ce0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ce2:	2400      	movs	r4, #0
 8006ce4:	e007      	b.n	8006cf6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ce6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006cea:	0093      	lsls	r3, r2, #2
 8006cec:	480e      	ldr	r0, [pc, #56]	; (8006d28 <prvInitialiseTaskLists+0x48>)
 8006cee:	4418      	add	r0, r3
 8006cf0:	f7ff fa3a 	bl	8006168 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	2c37      	cmp	r4, #55	; 0x37
 8006cf8:	d9f5      	bls.n	8006ce6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006cfa:	4d0c      	ldr	r5, [pc, #48]	; (8006d2c <prvInitialiseTaskLists+0x4c>)
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f7ff fa33 	bl	8006168 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d02:	4c0b      	ldr	r4, [pc, #44]	; (8006d30 <prvInitialiseTaskLists+0x50>)
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7ff fa2f 	bl	8006168 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d0a:	480a      	ldr	r0, [pc, #40]	; (8006d34 <prvInitialiseTaskLists+0x54>)
 8006d0c:	f7ff fa2c 	bl	8006168 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006d10:	4809      	ldr	r0, [pc, #36]	; (8006d38 <prvInitialiseTaskLists+0x58>)
 8006d12:	f7ff fa29 	bl	8006168 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006d16:	4809      	ldr	r0, [pc, #36]	; (8006d3c <prvInitialiseTaskLists+0x5c>)
 8006d18:	f7ff fa26 	bl	8006168 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d1c:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <prvInitialiseTaskLists+0x60>)
 8006d1e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d20:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <prvInitialiseTaskLists+0x64>)
 8006d22:	601c      	str	r4, [r3, #0]
}
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
 8006d26:	bf00      	nop
 8006d28:	20001680 	.word	0x20001680
 8006d2c:	20001af8 	.word	0x20001af8
 8006d30:	20001b0c 	.word	0x20001b0c
 8006d34:	20001b2c 	.word	0x20001b2c
 8006d38:	20001b58 	.word	0x20001b58
 8006d3c:	20001b44 	.word	0x20001b44
 8006d40:	20001678 	.word	0x20001678
 8006d44:	2000167c 	.word	0x2000167c

08006d48 <prvAddNewTaskToReadyList>:
{
 8006d48:	b510      	push	{r4, lr}
 8006d4a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006d4c:	f001 f82a 	bl	8007da4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006d50:	4a22      	ldr	r2, [pc, #136]	; (8006ddc <prvAddNewTaskToReadyList+0x94>)
 8006d52:	6813      	ldr	r3, [r2, #0]
 8006d54:	3301      	adds	r3, #1
 8006d56:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d58:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <prvAddNewTaskToReadyList+0x98>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	b15b      	cbz	r3, 8006d76 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8006d5e:	4b21      	ldr	r3, [pc, #132]	; (8006de4 <prvAddNewTaskToReadyList+0x9c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	b96b      	cbnz	r3, 8006d80 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d64:	4b1e      	ldr	r3, [pc, #120]	; (8006de0 <prvAddNewTaskToReadyList+0x98>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d807      	bhi.n	8006d80 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006d70:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <prvAddNewTaskToReadyList+0x98>)
 8006d72:	601c      	str	r4, [r3, #0]
 8006d74:	e004      	b.n	8006d80 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006d76:	4b1a      	ldr	r3, [pc, #104]	; (8006de0 <prvAddNewTaskToReadyList+0x98>)
 8006d78:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d029      	beq.n	8006dd4 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8006d80:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <prvAddNewTaskToReadyList+0xa0>)
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d88:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006d8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006d8c:	4b17      	ldr	r3, [pc, #92]	; (8006dec <prvAddNewTaskToReadyList+0xa4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4298      	cmp	r0, r3
 8006d92:	d901      	bls.n	8006d98 <prvAddNewTaskToReadyList+0x50>
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <prvAddNewTaskToReadyList+0xa4>)
 8006d96:	6018      	str	r0, [r3, #0]
 8006d98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d9c:	1d21      	adds	r1, r4, #4
 8006d9e:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <prvAddNewTaskToReadyList+0xa8>)
 8006da0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006da4:	f7ff f9ee 	bl	8006184 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006da8:	f001 f81e 	bl	8007de8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006dac:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <prvAddNewTaskToReadyList+0x9c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	b17b      	cbz	r3, 8006dd2 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006db2:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <prvAddNewTaskToReadyList+0x98>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d209      	bcs.n	8006dd2 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8006dbe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	f3bf 8f6f 	isb	sy
}
 8006dd2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006dd4:	f7ff ff84 	bl	8006ce0 <prvInitialiseTaskLists>
 8006dd8:	e7d2      	b.n	8006d80 <prvAddNewTaskToReadyList+0x38>
 8006dda:	bf00      	nop
 8006ddc:	20001ae0 	.word	0x20001ae0
 8006de0:	20001674 	.word	0x20001674
 8006de4:	20001b40 	.word	0x20001b40
 8006de8:	20001af0 	.word	0x20001af0
 8006dec:	20001af4 	.word	0x20001af4
 8006df0:	20001680 	.word	0x20001680

08006df4 <prvDeleteTCB>:
	{
 8006df4:	b510      	push	{r4, lr}
 8006df6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006df8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8006dfc:	b163      	cbz	r3, 8006e18 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d011      	beq.n	8006e26 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d00e      	beq.n	8006e24 <prvDeleteTCB+0x30>
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	e7fe      	b.n	8006e16 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006e18:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006e1a:	f001 f9b5 	bl	8008188 <vPortFree>
				vPortFree( pxTCB );
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f001 f9b2 	bl	8008188 <vPortFree>
	}
 8006e24:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006e26:	f001 f9af 	bl	8008188 <vPortFree>
 8006e2a:	e7fb      	b.n	8006e24 <prvDeleteTCB+0x30>

08006e2c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <prvCheckTasksWaitingTermination+0x40>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	b1d3      	cbz	r3, 8006e68 <prvCheckTasksWaitingTermination+0x3c>
{
 8006e32:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006e34:	f000 ffb6 	bl	8007da4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e38:	4b0d      	ldr	r3, [pc, #52]	; (8006e70 <prvCheckTasksWaitingTermination+0x44>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e3e:	1d20      	adds	r0, r4, #4
 8006e40:	f7ff f9c4 	bl	80061cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e44:	4a0b      	ldr	r2, [pc, #44]	; (8006e74 <prvCheckTasksWaitingTermination+0x48>)
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e4c:	4a07      	ldr	r2, [pc, #28]	; (8006e6c <prvCheckTasksWaitingTermination+0x40>)
 8006e4e:	6813      	ldr	r3, [r2, #0]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006e54:	f000 ffc8 	bl	8007de8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f7ff ffcb 	bl	8006df4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e5e:	4b03      	ldr	r3, [pc, #12]	; (8006e6c <prvCheckTasksWaitingTermination+0x40>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <prvCheckTasksWaitingTermination+0x8>
}
 8006e66:	bd10      	pop	{r4, pc}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	20001ae4 	.word	0x20001ae4
 8006e70:	20001b58 	.word	0x20001b58
 8006e74:	20001ae0 	.word	0x20001ae0

08006e78 <prvIdleTask>:
{
 8006e78:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8006e7a:	f7ff ffd7 	bl	8006e2c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <prvIdleTask+0x24>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d9f9      	bls.n	8006e7a <prvIdleTask+0x2>
				taskYIELD();
 8006e86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	e7ee      	b.n	8006e7a <prvIdleTask+0x2>
 8006e9c:	20001680 	.word	0x20001680

08006ea0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ea6:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <prvAddCurrentTaskToDelayedList+0x64>)
 8006ea8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eaa:	4b17      	ldr	r3, [pc, #92]	; (8006f08 <prvAddCurrentTaskToDelayedList+0x68>)
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	3004      	adds	r0, #4
 8006eb0:	f7ff f98c 	bl	80061cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eb4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006eb8:	d00d      	beq.n	8006ed6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006eba:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ebc:	4b12      	ldr	r3, [pc, #72]	; (8006f08 <prvAddCurrentTaskToDelayedList+0x68>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006ec2:	42a6      	cmp	r6, r4
 8006ec4:	d910      	bls.n	8006ee8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <prvAddCurrentTaskToDelayedList+0x6c>)
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <prvAddCurrentTaskToDelayedList+0x68>)
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	3104      	adds	r1, #4
 8006ed0:	f7ff f963 	bl	800619a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ed4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	d0ef      	beq.n	8006eba <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eda:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <prvAddCurrentTaskToDelayedList+0x68>)
 8006edc:	6819      	ldr	r1, [r3, #0]
 8006ede:	3104      	adds	r1, #4
 8006ee0:	480b      	ldr	r0, [pc, #44]	; (8006f10 <prvAddCurrentTaskToDelayedList+0x70>)
 8006ee2:	f7ff f94f 	bl	8006184 <vListInsertEnd>
 8006ee6:	e7f5      	b.n	8006ed4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x74>)
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <prvAddCurrentTaskToDelayedList+0x68>)
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	3104      	adds	r1, #4
 8006ef2:	f7ff f952 	bl	800619a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ef6:	4b08      	ldr	r3, [pc, #32]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x78>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	d9ea      	bls.n	8006ed4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x78>)
 8006f00:	601c      	str	r4, [r3, #0]
}
 8006f02:	e7e7      	b.n	8006ed4 <prvAddCurrentTaskToDelayedList+0x34>
 8006f04:	20001b6c 	.word	0x20001b6c
 8006f08:	20001674 	.word	0x20001674
 8006f0c:	2000167c 	.word	0x2000167c
 8006f10:	20001b44 	.word	0x20001b44
 8006f14:	20001678 	.word	0x20001678
 8006f18:	20001b24 	.word	0x20001b24

08006f1c <xTaskCreateStatic>:
	{
 8006f1c:	b530      	push	{r4, r5, lr}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006f22:	b17c      	cbz	r4, 8006f44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f26:	b1b5      	cbz	r5, 8006f56 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f28:	2560      	movs	r5, #96	; 0x60
 8006f2a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f2c:	9d04      	ldr	r5, [sp, #16]
 8006f2e:	2d60      	cmp	r5, #96	; 0x60
 8006f30:	d01a      	beq.n	8006f68 <xTaskCreateStatic+0x4c>
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	e7fe      	b.n	8006f42 <xTaskCreateStatic+0x26>
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006f54:	e7fe      	b.n	8006f54 <xTaskCreateStatic+0x38>
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006f66:	e7fe      	b.n	8006f66 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f6a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f6c:	2402      	movs	r4, #2
 8006f6e:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f72:	2400      	movs	r4, #0
 8006f74:	9403      	str	r4, [sp, #12]
 8006f76:	9502      	str	r5, [sp, #8]
 8006f78:	ac05      	add	r4, sp, #20
 8006f7a:	9401      	str	r4, [sp, #4]
 8006f7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f7e:	9400      	str	r4, [sp, #0]
 8006f80:	f7ff fe60 	bl	8006c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f86:	f7ff fedf 	bl	8006d48 <prvAddNewTaskToReadyList>
	}
 8006f8a:	9805      	ldr	r0, [sp, #20]
 8006f8c:	b007      	add	sp, #28
 8006f8e:	bd30      	pop	{r4, r5, pc}

08006f90 <xTaskCreate>:
	{
 8006f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f94:	b085      	sub	sp, #20
 8006f96:	4607      	mov	r7, r0
 8006f98:	4688      	mov	r8, r1
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9e:	0090      	lsls	r0, r2, #2
 8006fa0:	f001 f87a 	bl	8008098 <pvPortMalloc>
			if( pxStack != NULL )
 8006fa4:	b300      	cbz	r0, 8006fe8 <xTaskCreate+0x58>
 8006fa6:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006fa8:	2060      	movs	r0, #96	; 0x60
 8006faa:	f001 f875 	bl	8008098 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006fae:	4605      	mov	r5, r0
 8006fb0:	b1b0      	cbz	r0, 8006fe0 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8006fb2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006fb6:	b1e5      	cbz	r5, 8006ff2 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fbe:	9303      	str	r3, [sp, #12]
 8006fc0:	9502      	str	r5, [sp, #8]
 8006fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	4633      	mov	r3, r6
 8006fcc:	4622      	mov	r2, r4
 8006fce:	4641      	mov	r1, r8
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f7ff fe37 	bl	8006c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f7ff feb6 	bl	8006d48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fdc:	2001      	movs	r0, #1
 8006fde:	e005      	b.n	8006fec <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8006fe0:	4648      	mov	r0, r9
 8006fe2:	f001 f8d1 	bl	8008188 <vPortFree>
 8006fe6:	e7e6      	b.n	8006fb6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006fec:	b005      	add	sp, #20
 8006fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ff2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006ff6:	e7f9      	b.n	8006fec <xTaskCreate+0x5c>

08006ff8 <vTaskStartScheduler>:
{
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ffc:	2400      	movs	r4, #0
 8006ffe:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007000:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007002:	aa07      	add	r2, sp, #28
 8007004:	a906      	add	r1, sp, #24
 8007006:	a805      	add	r0, sp, #20
 8007008:	f7fe ff7e 	bl	8005f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800700c:	9b05      	ldr	r3, [sp, #20]
 800700e:	9302      	str	r3, [sp, #8]
 8007010:	9b06      	ldr	r3, [sp, #24]
 8007012:	9301      	str	r3, [sp, #4]
 8007014:	9400      	str	r4, [sp, #0]
 8007016:	4623      	mov	r3, r4
 8007018:	9a07      	ldr	r2, [sp, #28]
 800701a:	4918      	ldr	r1, [pc, #96]	; (800707c <vTaskStartScheduler+0x84>)
 800701c:	4818      	ldr	r0, [pc, #96]	; (8007080 <vTaskStartScheduler+0x88>)
 800701e:	f7ff ff7d 	bl	8006f1c <xTaskCreateStatic>
 8007022:	4b18      	ldr	r3, [pc, #96]	; (8007084 <vTaskStartScheduler+0x8c>)
 8007024:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8007026:	b140      	cbz	r0, 800703a <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8007028:	f000 fca4 	bl	8007974 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800702c:	2801      	cmp	r0, #1
 800702e:	d006      	beq.n	800703e <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007030:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007034:	d018      	beq.n	8007068 <vTaskStartScheduler+0x70>
}
 8007036:	b008      	add	sp, #32
 8007038:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800703a:	2000      	movs	r0, #0
 800703c:	e7f6      	b.n	800702c <vTaskStartScheduler+0x34>
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800704e:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <vTaskStartScheduler+0x90>)
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007056:	4b0d      	ldr	r3, [pc, #52]	; (800708c <vTaskStartScheduler+0x94>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800705c:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <vTaskStartScheduler+0x98>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007062:	f000 ff29 	bl	8007eb8 <xPortStartScheduler>
 8007066:	e7e6      	b.n	8007036 <vTaskStartScheduler+0x3e>
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007078:	e7fe      	b.n	8007078 <vTaskStartScheduler+0x80>
 800707a:	bf00      	nop
 800707c:	08009fa8 	.word	0x08009fa8
 8007080:	08006e79 	.word	0x08006e79
 8007084:	20001b20 	.word	0x20001b20
 8007088:	20001b24 	.word	0x20001b24
 800708c:	20001b40 	.word	0x20001b40
 8007090:	20001b6c 	.word	0x20001b6c

08007094 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007094:	4a02      	ldr	r2, [pc, #8]	; (80070a0 <vTaskSuspendAll+0xc>)
 8007096:	6813      	ldr	r3, [r2, #0]
 8007098:	3301      	adds	r3, #1
 800709a:	6013      	str	r3, [r2, #0]
}
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20001aec 	.word	0x20001aec

080070a4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80070a4:	4b01      	ldr	r3, [pc, #4]	; (80070ac <xTaskGetTickCount+0x8>)
 80070a6:	6818      	ldr	r0, [r3, #0]
}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20001b6c 	.word	0x20001b6c

080070b0 <xTaskIncrementTick>:
{
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b2:	4b3a      	ldr	r3, [pc, #232]	; (800719c <xTaskIncrementTick+0xec>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d164      	bne.n	8007184 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070ba:	4b39      	ldr	r3, [pc, #228]	; (80071a0 <xTaskIncrementTick+0xf0>)
 80070bc:	681d      	ldr	r5, [r3, #0]
 80070be:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80070c0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070c2:	b9c5      	cbnz	r5, 80070f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80070c4:	4b37      	ldr	r3, [pc, #220]	; (80071a4 <xTaskIncrementTick+0xf4>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	b143      	cbz	r3, 80070de <xTaskIncrementTick+0x2e>
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	e7fe      	b.n	80070dc <xTaskIncrementTick+0x2c>
 80070de:	4a31      	ldr	r2, [pc, #196]	; (80071a4 <xTaskIncrementTick+0xf4>)
 80070e0:	6811      	ldr	r1, [r2, #0]
 80070e2:	4b31      	ldr	r3, [pc, #196]	; (80071a8 <xTaskIncrementTick+0xf8>)
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	6010      	str	r0, [r2, #0]
 80070e8:	6019      	str	r1, [r3, #0]
 80070ea:	4a30      	ldr	r2, [pc, #192]	; (80071ac <xTaskIncrementTick+0xfc>)
 80070ec:	6813      	ldr	r3, [r2, #0]
 80070ee:	3301      	adds	r3, #1
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	f7ff fd91 	bl	8006c18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070f6:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <xTaskIncrementTick+0x100>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	42ab      	cmp	r3, r5
 80070fc:	d938      	bls.n	8007170 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80070fe:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007100:	4b2c      	ldr	r3, [pc, #176]	; (80071b4 <xTaskIncrementTick+0x104>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800710a:	009a      	lsls	r2, r3, #2
 800710c:	4b2a      	ldr	r3, [pc, #168]	; (80071b8 <xTaskIncrementTick+0x108>)
 800710e:	589b      	ldr	r3, [r3, r2]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d93c      	bls.n	800718e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8007114:	2701      	movs	r7, #1
 8007116:	e03a      	b.n	800718e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8007118:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800711a:	4b22      	ldr	r3, [pc, #136]	; (80071a4 <xTaskIncrementTick+0xf4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	b343      	cbz	r3, 8007174 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007122:	4b20      	ldr	r3, [pc, #128]	; (80071a4 <xTaskIncrementTick+0xf4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800712a:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800712c:	429d      	cmp	r5, r3
 800712e:	d326      	bcc.n	800717e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007130:	1d26      	adds	r6, r4, #4
 8007132:	4630      	mov	r0, r6
 8007134:	f7ff f84a 	bl	80061cc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007138:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800713a:	b11b      	cbz	r3, 8007144 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800713c:	f104 0018 	add.w	r0, r4, #24
 8007140:	f7ff f844 	bl	80061cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007146:	4a1d      	ldr	r2, [pc, #116]	; (80071bc <xTaskIncrementTick+0x10c>)
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	4293      	cmp	r3, r2
 800714c:	d901      	bls.n	8007152 <xTaskIncrementTick+0xa2>
 800714e:	4a1b      	ldr	r2, [pc, #108]	; (80071bc <xTaskIncrementTick+0x10c>)
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007156:	009a      	lsls	r2, r3, #2
 8007158:	4631      	mov	r1, r6
 800715a:	4817      	ldr	r0, [pc, #92]	; (80071b8 <xTaskIncrementTick+0x108>)
 800715c:	4410      	add	r0, r2
 800715e:	f7ff f811 	bl	8006184 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007162:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007164:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <xTaskIncrementTick+0x104>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	429a      	cmp	r2, r3
 800716c:	d2d4      	bcs.n	8007118 <xTaskIncrementTick+0x68>
 800716e:	e7d4      	b.n	800711a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8007170:	2700      	movs	r7, #0
 8007172:	e7d2      	b.n	800711a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <xTaskIncrementTick+0x100>)
 8007176:	f04f 32ff 	mov.w	r2, #4294967295
 800717a:	601a      	str	r2, [r3, #0]
					break;
 800717c:	e7c0      	b.n	8007100 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800717e:	4a0c      	ldr	r2, [pc, #48]	; (80071b0 <xTaskIncrementTick+0x100>)
 8007180:	6013      	str	r3, [r2, #0]
						break;
 8007182:	e7bd      	b.n	8007100 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8007184:	4a0e      	ldr	r2, [pc, #56]	; (80071c0 <xTaskIncrementTick+0x110>)
 8007186:	6813      	ldr	r3, [r2, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800718c:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <xTaskIncrementTick+0x114>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	b103      	cbz	r3, 8007196 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8007194:	2701      	movs	r7, #1
}
 8007196:	4638      	mov	r0, r7
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719a:	bf00      	nop
 800719c:	20001aec 	.word	0x20001aec
 80071a0:	20001b6c 	.word	0x20001b6c
 80071a4:	20001678 	.word	0x20001678
 80071a8:	2000167c 	.word	0x2000167c
 80071ac:	20001b28 	.word	0x20001b28
 80071b0:	20001b24 	.word	0x20001b24
 80071b4:	20001674 	.word	0x20001674
 80071b8:	20001680 	.word	0x20001680
 80071bc:	20001af4 	.word	0x20001af4
 80071c0:	20001ae8 	.word	0x20001ae8
 80071c4:	20001b70 	.word	0x20001b70

080071c8 <xTaskResumeAll>:
{
 80071c8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80071ca:	4b35      	ldr	r3, [pc, #212]	; (80072a0 <xTaskResumeAll+0xd8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	b943      	cbnz	r3, 80071e2 <xTaskResumeAll+0x1a>
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	e7fe      	b.n	80071e0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 80071e2:	f000 fddf 	bl	8007da4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80071e6:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <xTaskResumeAll+0xd8>)
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	3a01      	subs	r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d14f      	bne.n	8007294 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071f4:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <xTaskResumeAll+0xdc>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	b90b      	cbnz	r3, 80071fe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80071fa:	2400      	movs	r4, #0
 80071fc:	e04b      	b.n	8007296 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 80071fe:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007200:	4b29      	ldr	r3, [pc, #164]	; (80072a8 <xTaskResumeAll+0xe0>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	b31b      	cbz	r3, 800724e <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007206:	4b28      	ldr	r3, [pc, #160]	; (80072a8 <xTaskResumeAll+0xe0>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800720c:	f104 0018 	add.w	r0, r4, #24
 8007210:	f7fe ffdc 	bl	80061cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007214:	1d25      	adds	r5, r4, #4
 8007216:	4628      	mov	r0, r5
 8007218:	f7fe ffd8 	bl	80061cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800721c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800721e:	4b23      	ldr	r3, [pc, #140]	; (80072ac <xTaskResumeAll+0xe4>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4298      	cmp	r0, r3
 8007224:	d901      	bls.n	800722a <xTaskResumeAll+0x62>
 8007226:	4b21      	ldr	r3, [pc, #132]	; (80072ac <xTaskResumeAll+0xe4>)
 8007228:	6018      	str	r0, [r3, #0]
 800722a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800722e:	4629      	mov	r1, r5
 8007230:	4b1f      	ldr	r3, [pc, #124]	; (80072b0 <xTaskResumeAll+0xe8>)
 8007232:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007236:	f7fe ffa5 	bl	8006184 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800723a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800723c:	4b1d      	ldr	r3, [pc, #116]	; (80072b4 <xTaskResumeAll+0xec>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	429a      	cmp	r2, r3
 8007244:	d3dc      	bcc.n	8007200 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <xTaskResumeAll+0xf0>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e7d8      	b.n	8007200 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800724e:	b10c      	cbz	r4, 8007254 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8007250:	f7ff fce2 	bl	8006c18 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007254:	4b19      	ldr	r3, [pc, #100]	; (80072bc <xTaskResumeAll+0xf4>)
 8007256:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007258:	b984      	cbnz	r4, 800727c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <xTaskResumeAll+0xf0>)
 800725c:	681c      	ldr	r4, [r3, #0]
 800725e:	b1d4      	cbz	r4, 8007296 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8007260:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007268:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007274:	2401      	movs	r4, #1
 8007276:	e00e      	b.n	8007296 <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007278:	3c01      	subs	r4, #1
 800727a:	d007      	beq.n	800728c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800727c:	f7ff ff18 	bl	80070b0 <xTaskIncrementTick>
 8007280:	2800      	cmp	r0, #0
 8007282:	d0f9      	beq.n	8007278 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8007284:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <xTaskResumeAll+0xf0>)
 8007286:	2201      	movs	r2, #1
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	e7f5      	b.n	8007278 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800728c:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <xTaskResumeAll+0xf4>)
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	e7e2      	b.n	800725a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8007294:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007296:	f000 fda7 	bl	8007de8 <vPortExitCritical>
}
 800729a:	4620      	mov	r0, r4
 800729c:	bd38      	pop	{r3, r4, r5, pc}
 800729e:	bf00      	nop
 80072a0:	20001aec 	.word	0x20001aec
 80072a4:	20001ae0 	.word	0x20001ae0
 80072a8:	20001b2c 	.word	0x20001b2c
 80072ac:	20001af4 	.word	0x20001af4
 80072b0:	20001680 	.word	0x20001680
 80072b4:	20001674 	.word	0x20001674
 80072b8:	20001b70 	.word	0x20001b70
 80072bc:	20001ae8 	.word	0x20001ae8

080072c0 <vTaskDelayUntil>:
	{
 80072c0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 80072c2:	b158      	cbz	r0, 80072dc <vTaskDelayUntil+0x1c>
 80072c4:	460c      	mov	r4, r1
 80072c6:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 80072c8:	b989      	cbnz	r1, 80072ee <vTaskDelayUntil+0x2e>
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	e7fe      	b.n	80072da <vTaskDelayUntil+0x1a>
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 80072ec:	e7fe      	b.n	80072ec <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 80072ee:	4b1b      	ldr	r3, [pc, #108]	; (800735c <vTaskDelayUntil+0x9c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	b143      	cbz	r3, 8007306 <vTaskDelayUntil+0x46>
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	e7fe      	b.n	8007304 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 8007306:	f7ff fec5 	bl	8007094 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 800730a:	4b15      	ldr	r3, [pc, #84]	; (8007360 <vTaskDelayUntil+0xa0>)
 800730c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800730e:	682b      	ldr	r3, [r5, #0]
 8007310:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 8007312:	4283      	cmp	r3, r0
 8007314:	d909      	bls.n	800732a <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007316:	42a3      	cmp	r3, r4
 8007318:	d801      	bhi.n	800731e <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 800731a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800731c:	e00e      	b.n	800733c <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800731e:	42a0      	cmp	r0, r4
 8007320:	d301      	bcc.n	8007326 <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
 8007322:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8007324:	e00a      	b.n	800733c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8007326:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8007328:	e004      	b.n	8007334 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800732a:	42a3      	cmp	r3, r4
 800732c:	d801      	bhi.n	8007332 <vTaskDelayUntil+0x72>
 800732e:	42a0      	cmp	r0, r4
 8007330:	d212      	bcs.n	8007358 <vTaskDelayUntil+0x98>
			*pxPreviousWakeTime = xTimeToWake;
 8007332:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007334:	2100      	movs	r1, #0
 8007336:	1a20      	subs	r0, r4, r0
 8007338:	f7ff fdb2 	bl	8006ea0 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 800733c:	f7ff ff44 	bl	80071c8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007340:	b948      	cbnz	r0, 8007356 <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 8007342:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
	}
 8007356:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 8007358:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800735a:	e7ef      	b.n	800733c <vTaskDelayUntil+0x7c>
 800735c:	20001aec 	.word	0x20001aec
 8007360:	20001b6c 	.word	0x20001b6c

08007364 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007364:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <vTaskSwitchContext+0x80>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	b11b      	cbz	r3, 8007372 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800736a:	4b1f      	ldr	r3, [pc, #124]	; (80073e8 <vTaskSwitchContext+0x84>)
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007372:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <vTaskSwitchContext+0x84>)
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007378:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <vTaskSwitchContext+0x88>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8007380:	008a      	lsls	r2, r1, #2
 8007382:	491b      	ldr	r1, [pc, #108]	; (80073f0 <vTaskSwitchContext+0x8c>)
 8007384:	588a      	ldr	r2, [r1, r2]
 8007386:	b95a      	cbnz	r2, 80073a0 <vTaskSwitchContext+0x3c>
 8007388:	b10b      	cbz	r3, 800738e <vTaskSwitchContext+0x2a>
 800738a:	3b01      	subs	r3, #1
 800738c:	e7f6      	b.n	800737c <vTaskSwitchContext+0x18>
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	e7fe      	b.n	800739e <vTaskSwitchContext+0x3a>
 80073a0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80073a4:	0082      	lsls	r2, r0, #2
 80073a6:	440a      	add	r2, r1
 80073a8:	6850      	ldr	r0, [r2, #4]
 80073aa:	6840      	ldr	r0, [r0, #4]
 80073ac:	6050      	str	r0, [r2, #4]
 80073ae:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80073b2:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80073b6:	3208      	adds	r2, #8
 80073b8:	4411      	add	r1, r2
 80073ba:	4288      	cmp	r0, r1
 80073bc:	d00b      	beq.n	80073d6 <vTaskSwitchContext+0x72>
 80073be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80073c2:	0091      	lsls	r1, r2, #2
 80073c4:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <vTaskSwitchContext+0x8c>)
 80073c6:	440a      	add	r2, r1
 80073c8:	6852      	ldr	r2, [r2, #4]
 80073ca:	68d1      	ldr	r1, [r2, #12]
 80073cc:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <vTaskSwitchContext+0x90>)
 80073ce:	6011      	str	r1, [r2, #0]
 80073d0:	4a06      	ldr	r2, [pc, #24]	; (80073ec <vTaskSwitchContext+0x88>)
 80073d2:	6013      	str	r3, [r2, #0]
}
 80073d4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80073d6:	6840      	ldr	r0, [r0, #4]
 80073d8:	4662      	mov	r2, ip
 80073da:	0091      	lsls	r1, r2, #2
 80073dc:	4a04      	ldr	r2, [pc, #16]	; (80073f0 <vTaskSwitchContext+0x8c>)
 80073de:	440a      	add	r2, r1
 80073e0:	6050      	str	r0, [r2, #4]
 80073e2:	e7ec      	b.n	80073be <vTaskSwitchContext+0x5a>
 80073e4:	20001aec 	.word	0x20001aec
 80073e8:	20001b70 	.word	0x20001b70
 80073ec:	20001af4 	.word	0x20001af4
 80073f0:	20001680 	.word	0x20001680
 80073f4:	20001674 	.word	0x20001674

080073f8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80073f8:	b158      	cbz	r0, 8007412 <vTaskPlaceOnEventList+0x1a>
{
 80073fa:	b510      	push	{r4, lr}
 80073fc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073fe:	4a09      	ldr	r2, [pc, #36]	; (8007424 <vTaskPlaceOnEventList+0x2c>)
 8007400:	6811      	ldr	r1, [r2, #0]
 8007402:	3118      	adds	r1, #24
 8007404:	f7fe fec9 	bl	800619a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007408:	2101      	movs	r1, #1
 800740a:	4620      	mov	r0, r4
 800740c:	f7ff fd48 	bl	8006ea0 <prvAddCurrentTaskToDelayedList>
}
 8007410:	bd10      	pop	{r4, pc}
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007422:	e7fe      	b.n	8007422 <vTaskPlaceOnEventList+0x2a>
 8007424:	20001674 	.word	0x20001674

08007428 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8007428:	b170      	cbz	r0, 8007448 <vTaskPlaceOnUnorderedEventList+0x20>
{
 800742a:	b510      	push	{r4, lr}
 800742c:	4614      	mov	r4, r2
 800742e:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8007430:	4b11      	ldr	r3, [pc, #68]	; (8007478 <vTaskPlaceOnUnorderedEventList+0x50>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	b98b      	cbnz	r3, 800745a <vTaskPlaceOnUnorderedEventList+0x32>
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	e7fe      	b.n	8007446 <vTaskPlaceOnUnorderedEventList+0x1e>
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007458:	e7fe      	b.n	8007458 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800745a:	4b08      	ldr	r3, [pc, #32]	; (800747c <vTaskPlaceOnUnorderedEventList+0x54>)
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007462:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007464:	6819      	ldr	r1, [r3, #0]
 8007466:	3118      	adds	r1, #24
 8007468:	4610      	mov	r0, r2
 800746a:	f7fe fe8b 	bl	8006184 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800746e:	2101      	movs	r1, #1
 8007470:	4620      	mov	r0, r4
 8007472:	f7ff fd15 	bl	8006ea0 <prvAddCurrentTaskToDelayedList>
}
 8007476:	bd10      	pop	{r4, pc}
 8007478:	20001aec 	.word	0x20001aec
 800747c:	20001674 	.word	0x20001674

08007480 <vTaskPlaceOnEventListRestricted>:
	{
 8007480:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8007482:	b170      	cbz	r0, 80074a2 <vTaskPlaceOnEventListRestricted+0x22>
 8007484:	460d      	mov	r5, r1
 8007486:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007488:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <vTaskPlaceOnEventListRestricted+0x34>)
 800748a:	6811      	ldr	r1, [r2, #0]
 800748c:	3118      	adds	r1, #24
 800748e:	f7fe fe79 	bl	8006184 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8007492:	b10c      	cbz	r4, 8007498 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8007494:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007498:	4621      	mov	r1, r4
 800749a:	4628      	mov	r0, r5
 800749c:	f7ff fd00 	bl	8006ea0 <prvAddCurrentTaskToDelayedList>
	}
 80074a0:	bd38      	pop	{r3, r4, r5, pc}
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80074b2:	e7fe      	b.n	80074b2 <vTaskPlaceOnEventListRestricted+0x32>
 80074b4:	20001674 	.word	0x20001674

080074b8 <xTaskRemoveFromEventList>:
{
 80074b8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80074ba:	68c3      	ldr	r3, [r0, #12]
 80074bc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80074be:	b324      	cbz	r4, 800750a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074c0:	f104 0518 	add.w	r5, r4, #24
 80074c4:	4628      	mov	r0, r5
 80074c6:	f7fe fe81 	bl	80061cc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ca:	4b18      	ldr	r3, [pc, #96]	; (800752c <xTaskRemoveFromEventList+0x74>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	bb2b      	cbnz	r3, 800751c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074d0:	1d25      	adds	r5, r4, #4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f7fe fe7a 	bl	80061cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80074da:	4b15      	ldr	r3, [pc, #84]	; (8007530 <xTaskRemoveFromEventList+0x78>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4298      	cmp	r0, r3
 80074e0:	d901      	bls.n	80074e6 <xTaskRemoveFromEventList+0x2e>
 80074e2:	4b13      	ldr	r3, [pc, #76]	; (8007530 <xTaskRemoveFromEventList+0x78>)
 80074e4:	6018      	str	r0, [r3, #0]
 80074e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80074ea:	4629      	mov	r1, r5
 80074ec:	4b11      	ldr	r3, [pc, #68]	; (8007534 <xTaskRemoveFromEventList+0x7c>)
 80074ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074f2:	f7fe fe47 	bl	8006184 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80074f8:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <xTaskRemoveFromEventList+0x80>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d911      	bls.n	8007526 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8007502:	2001      	movs	r0, #1
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <xTaskRemoveFromEventList+0x84>)
 8007506:	6018      	str	r0, [r3, #0]
}
 8007508:	bd38      	pop	{r3, r4, r5, pc}
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800751a:	e7fe      	b.n	800751a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800751c:	4629      	mov	r1, r5
 800751e:	4808      	ldr	r0, [pc, #32]	; (8007540 <xTaskRemoveFromEventList+0x88>)
 8007520:	f7fe fe30 	bl	8006184 <vListInsertEnd>
 8007524:	e7e7      	b.n	80074f6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8007526:	2000      	movs	r0, #0
	return xReturn;
 8007528:	e7ee      	b.n	8007508 <xTaskRemoveFromEventList+0x50>
 800752a:	bf00      	nop
 800752c:	20001aec 	.word	0x20001aec
 8007530:	20001af4 	.word	0x20001af4
 8007534:	20001680 	.word	0x20001680
 8007538:	20001674 	.word	0x20001674
 800753c:	20001b70 	.word	0x20001b70
 8007540:	20001b2c 	.word	0x20001b2c

08007544 <vTaskRemoveFromUnorderedEventList>:
{
 8007544:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007546:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <vTaskRemoveFromUnorderedEventList+0x74>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	b943      	cbnz	r3, 800755e <vTaskRemoveFromUnorderedEventList+0x1a>
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	e7fe      	b.n	800755c <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800755e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007562:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007564:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8007566:	b1f4      	cbz	r4, 80075a6 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8007568:	f7fe fe30 	bl	80061cc <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800756c:	1d25      	adds	r5, r4, #4
 800756e:	4628      	mov	r0, r5
 8007570:	f7fe fe2c 	bl	80061cc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007574:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007576:	4b11      	ldr	r3, [pc, #68]	; (80075bc <vTaskRemoveFromUnorderedEventList+0x78>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4298      	cmp	r0, r3
 800757c:	d901      	bls.n	8007582 <vTaskRemoveFromUnorderedEventList+0x3e>
 800757e:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <vTaskRemoveFromUnorderedEventList+0x78>)
 8007580:	6018      	str	r0, [r3, #0]
 8007582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007586:	4629      	mov	r1, r5
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <vTaskRemoveFromUnorderedEventList+0x7c>)
 800758a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800758e:	f7fe fdf9 	bl	8006184 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007594:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <vTaskRemoveFromUnorderedEventList+0x80>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	429a      	cmp	r2, r3
 800759c:	d902      	bls.n	80075a4 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <vTaskRemoveFromUnorderedEventList+0x84>)
 80075a0:	2201      	movs	r2, #1
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bd38      	pop	{r3, r4, r5, pc}
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80075b6:	e7fe      	b.n	80075b6 <vTaskRemoveFromUnorderedEventList+0x72>
 80075b8:	20001aec 	.word	0x20001aec
 80075bc:	20001af4 	.word	0x20001af4
 80075c0:	20001680 	.word	0x20001680
 80075c4:	20001674 	.word	0x20001674
 80075c8:	20001b70 	.word	0x20001b70

080075cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075cc:	4b03      	ldr	r3, [pc, #12]	; (80075dc <vTaskInternalSetTimeOutState+0x10>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075d2:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <vTaskInternalSetTimeOutState+0x14>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6043      	str	r3, [r0, #4]
}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20001b28 	.word	0x20001b28
 80075e0:	20001b6c 	.word	0x20001b6c

080075e4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80075e4:	b1d8      	cbz	r0, 800761e <xTaskCheckForTimeOut+0x3a>
{
 80075e6:	b570      	push	{r4, r5, r6, lr}
 80075e8:	460c      	mov	r4, r1
 80075ea:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80075ec:	b301      	cbz	r1, 8007630 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 80075ee:	f000 fbd9 	bl	8007da4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80075f2:	4b1b      	ldr	r3, [pc, #108]	; (8007660 <xTaskCheckForTimeOut+0x7c>)
 80075f4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075f6:	686b      	ldr	r3, [r5, #4]
 80075f8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80075fa:	6822      	ldr	r2, [r4, #0]
 80075fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007600:	d027      	beq.n	8007652 <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007602:	4e18      	ldr	r6, [pc, #96]	; (8007664 <xTaskCheckForTimeOut+0x80>)
 8007604:	6836      	ldr	r6, [r6, #0]
 8007606:	f8d5 c000 	ldr.w	ip, [r5]
 800760a:	45b4      	cmp	ip, r6
 800760c:	d001      	beq.n	8007612 <xTaskCheckForTimeOut+0x2e>
 800760e:	428b      	cmp	r3, r1
 8007610:	d924      	bls.n	800765c <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007612:	4282      	cmp	r2, r0
 8007614:	d815      	bhi.n	8007642 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800761a:	2401      	movs	r4, #1
 800761c:	e01a      	b.n	8007654 <xTaskCheckForTimeOut+0x70>
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800762e:	e7fe      	b.n	800762e <xTaskCheckForTimeOut+0x4a>
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007640:	e7fe      	b.n	8007640 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8007642:	1a5b      	subs	r3, r3, r1
 8007644:	4413      	add	r3, r2
 8007646:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007648:	4628      	mov	r0, r5
 800764a:	f7ff ffbf 	bl	80075cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800764e:	2400      	movs	r4, #0
 8007650:	e000      	b.n	8007654 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8007652:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007654:	f000 fbc8 	bl	8007de8 <vPortExitCritical>
}
 8007658:	4620      	mov	r0, r4
 800765a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800765c:	2401      	movs	r4, #1
 800765e:	e7f9      	b.n	8007654 <xTaskCheckForTimeOut+0x70>
 8007660:	20001b6c 	.word	0x20001b6c
 8007664:	20001b28 	.word	0x20001b28

08007668 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007668:	4b01      	ldr	r3, [pc, #4]	; (8007670 <vTaskMissedYield+0x8>)
 800766a:	2201      	movs	r2, #1
 800766c:	601a      	str	r2, [r3, #0]
}
 800766e:	4770      	bx	lr
 8007670:	20001b70 	.word	0x20001b70

08007674 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007674:	4b01      	ldr	r3, [pc, #4]	; (800767c <xTaskGetCurrentTaskHandle+0x8>)
 8007676:	6818      	ldr	r0, [r3, #0]
	}
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20001674 	.word	0x20001674

08007680 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <xTaskGetSchedulerState+0x18>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	b133      	cbz	r3, 8007694 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <xTaskGetSchedulerState+0x1c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	b10b      	cbz	r3, 8007690 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800768c:	2000      	movs	r0, #0
	}
 800768e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8007690:	2002      	movs	r0, #2
 8007692:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007694:	2001      	movs	r0, #1
 8007696:	4770      	bx	lr
 8007698:	20001b40 	.word	0x20001b40
 800769c:	20001aec 	.word	0x20001aec

080076a0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d03f      	beq.n	8007724 <xTaskPriorityInherit+0x84>
	{
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80076aa:	4a20      	ldr	r2, [pc, #128]	; (800772c <xTaskPriorityInherit+0x8c>)
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d22f      	bcs.n	8007714 <xTaskPriorityInherit+0x74>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076b4:	6982      	ldr	r2, [r0, #24]
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	db05      	blt.n	80076c6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ba:	4a1c      	ldr	r2, [pc, #112]	; (800772c <xTaskPriorityInherit+0x8c>)
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076c0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80076c4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076c6:	6961      	ldr	r1, [r4, #20]
 80076c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80076cc:	4a18      	ldr	r2, [pc, #96]	; (8007730 <xTaskPriorityInherit+0x90>)
 80076ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076d2:	4299      	cmp	r1, r3
 80076d4:	d005      	beq.n	80076e2 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <xTaskPriorityInherit+0x8c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80076de:	2001      	movs	r0, #1
	}
 80076e0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e2:	1d25      	adds	r5, r4, #4
 80076e4:	4628      	mov	r0, r5
 80076e6:	f7fe fd71 	bl	80061cc <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076ea:	4b10      	ldr	r3, [pc, #64]	; (800772c <xTaskPriorityInherit+0x8c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80076f0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076f2:	4b10      	ldr	r3, [pc, #64]	; (8007734 <xTaskPriorityInherit+0x94>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4298      	cmp	r0, r3
 80076f8:	d809      	bhi.n	800770e <xTaskPriorityInherit+0x6e>
 80076fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80076fe:	4629      	mov	r1, r5
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <xTaskPriorityInherit+0x90>)
 8007702:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007706:	f7fe fd3d 	bl	8006184 <vListInsertEnd>
				xReturn = pdTRUE;
 800770a:	2001      	movs	r0, #1
 800770c:	e7e8      	b.n	80076e0 <xTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800770e:	4b09      	ldr	r3, [pc, #36]	; (8007734 <xTaskPriorityInherit+0x94>)
 8007710:	6018      	str	r0, [r3, #0]
 8007712:	e7f2      	b.n	80076fa <xTaskPriorityInherit+0x5a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007714:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <xTaskPriorityInherit+0x8c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	429a      	cmp	r2, r3
 800771e:	d303      	bcc.n	8007728 <xTaskPriorityInherit+0x88>
	BaseType_t xReturn = pdFALSE;
 8007720:	2000      	movs	r0, #0
 8007722:	e7dd      	b.n	80076e0 <xTaskPriorityInherit+0x40>
 8007724:	2000      	movs	r0, #0
	}
 8007726:	4770      	bx	lr
					xReturn = pdTRUE;
 8007728:	2001      	movs	r0, #1
		return xReturn;
 800772a:	e7d9      	b.n	80076e0 <xTaskPriorityInherit+0x40>
 800772c:	20001674 	.word	0x20001674
 8007730:	20001680 	.word	0x20001680
 8007734:	20001af4 	.word	0x20001af4

08007738 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007738:	2800      	cmp	r0, #0
 800773a:	d03b      	beq.n	80077b4 <xTaskPriorityDisinherit+0x7c>
	{
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007740:	4b1e      	ldr	r3, [pc, #120]	; (80077bc <xTaskPriorityDisinherit+0x84>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4283      	cmp	r3, r0
 8007746:	d008      	beq.n	800775a <xTaskPriorityDisinherit+0x22>
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	e7fe      	b.n	8007758 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800775a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800775c:	b943      	cbnz	r3, 8007770 <xTaskPriorityDisinherit+0x38>
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	e7fe      	b.n	800776e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007770:	3b01      	subs	r3, #1
 8007772:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007774:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007776:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007778:	4291      	cmp	r1, r2
 800777a:	d01d      	beq.n	80077b8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800777c:	b10b      	cbz	r3, 8007782 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800777e:	2000      	movs	r0, #0
	}
 8007780:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007782:	1d05      	adds	r5, r0, #4
 8007784:	4628      	mov	r0, r5
 8007786:	f7fe fd21 	bl	80061cc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800778a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800778c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778e:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8007792:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007794:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <xTaskPriorityDisinherit+0x88>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4298      	cmp	r0, r3
 800779a:	d901      	bls.n	80077a0 <xTaskPriorityDisinherit+0x68>
 800779c:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <xTaskPriorityDisinherit+0x88>)
 800779e:	6018      	str	r0, [r3, #0]
 80077a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80077a4:	4629      	mov	r1, r5
 80077a6:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <xTaskPriorityDisinherit+0x8c>)
 80077a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80077ac:	f7fe fcea 	bl	8006184 <vListInsertEnd>
					xReturn = pdTRUE;
 80077b0:	2001      	movs	r0, #1
 80077b2:	e7e5      	b.n	8007780 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80077b4:	2000      	movs	r0, #0
	}
 80077b6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80077b8:	2000      	movs	r0, #0
 80077ba:	e7e1      	b.n	8007780 <xTaskPriorityDisinherit+0x48>
 80077bc:	20001674 	.word	0x20001674
 80077c0:	20001af4 	.word	0x20001af4
 80077c4:	20001680 	.word	0x20001680

080077c8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d046      	beq.n	800785a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80077d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80077d2:	b943      	cbnz	r3, 80077e6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	e7fe      	b.n	80077e4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077e6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80077e8:	428a      	cmp	r2, r1
 80077ea:	d200      	bcs.n	80077ee <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077ec:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80077f0:	4291      	cmp	r1, r2
 80077f2:	d001      	beq.n	80077f8 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d000      	beq.n	80077fa <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80077f8:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	42a3      	cmp	r3, r4
 8007800:	d022      	beq.n	8007848 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8007802:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007804:	69a3      	ldr	r3, [r4, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	db02      	blt.n	8007810 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800780e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007810:	6962      	ldr	r2, [r4, #20]
 8007812:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007818:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800781c:	429a      	cmp	r2, r3
 800781e:	d1eb      	bne.n	80077f8 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007820:	1d25      	adds	r5, r4, #4
 8007822:	4628      	mov	r0, r5
 8007824:	f7fe fcd2 	bl	80061cc <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007828:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4298      	cmp	r0, r3
 8007830:	d901      	bls.n	8007836 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8007832:	4b0c      	ldr	r3, [pc, #48]	; (8007864 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007834:	6018      	str	r0, [r3, #0]
 8007836:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800783a:	4629      	mov	r1, r5
 800783c:	4b08      	ldr	r3, [pc, #32]	; (8007860 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800783e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007842:	f7fe fc9f 	bl	8006184 <vListInsertEnd>
	}
 8007846:	e7d7      	b.n	80077f8 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8007858:	e7fe      	b.n	8007858 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800785a:	4770      	bx	lr
 800785c:	20001674 	.word	0x20001674
 8007860:	20001680 	.word	0x20001680
 8007864:	20001af4 	.word	0x20001af4

08007868 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007868:	4a04      	ldr	r2, [pc, #16]	; (800787c <uxTaskResetEventItemValue+0x14>)
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	6998      	ldr	r0, [r3, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800786e:	6813      	ldr	r3, [r2, #0]
 8007870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007878:	6193      	str	r3, [r2, #24]
}
 800787a:	4770      	bx	lr
 800787c:	20001674 	.word	0x20001674

08007880 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <pvTaskIncrementMutexHeldCount+0x18>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b123      	cbz	r3, 8007890 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007886:	4b04      	ldr	r3, [pc, #16]	; (8007898 <pvTaskIncrementMutexHeldCount+0x18>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800788c:	3301      	adds	r3, #1
 800788e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8007890:	4b01      	ldr	r3, [pc, #4]	; (8007898 <pvTaskIncrementMutexHeldCount+0x18>)
 8007892:	6818      	ldr	r0, [r3, #0]
	}
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20001674 	.word	0x20001674

0800789c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <prvGetNextExpireTime+0x1c>)
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	6813      	ldr	r3, [r2, #0]
 80078a2:	fab3 f383 	clz	r3, r3
 80078a6:	095b      	lsrs	r3, r3, #5
 80078a8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078aa:	b913      	cbnz	r3, 80078b2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078ac:	68d3      	ldr	r3, [r2, #12]
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078b2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20001b74 	.word	0x20001b74

080078bc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078bc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078be:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078c0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078c2:	4291      	cmp	r1, r2
 80078c4:	d80c      	bhi.n	80078e0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	6983      	ldr	r3, [r0, #24]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d301      	bcc.n	80078d2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80078ce:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80078d0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80078d2:	1d01      	adds	r1, r0, #4
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <prvInsertTimerInActiveList+0x40>)
 80078d6:	6818      	ldr	r0, [r3, #0]
 80078d8:	f7fe fc5f 	bl	800619a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80078dc:	2000      	movs	r0, #0
 80078de:	e7f7      	b.n	80078d0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d201      	bcs.n	80078e8 <prvInsertTimerInActiveList+0x2c>
 80078e4:	4299      	cmp	r1, r3
 80078e6:	d206      	bcs.n	80078f6 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078e8:	1d01      	adds	r1, r0, #4
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <prvInsertTimerInActiveList+0x44>)
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	f7fe fc54 	bl	800619a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80078f2:	2000      	movs	r0, #0
 80078f4:	e7ec      	b.n	80078d0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80078f6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80078f8:	e7ea      	b.n	80078d0 <prvInsertTimerInActiveList+0x14>
 80078fa:	bf00      	nop
 80078fc:	20001b78 	.word	0x20001b78
 8007900:	20001b74 	.word	0x20001b74

08007904 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007904:	b530      	push	{r4, r5, lr}
 8007906:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007908:	f000 fa4c 	bl	8007da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800790c:	4b11      	ldr	r3, [pc, #68]	; (8007954 <prvCheckForValidListAndQueue+0x50>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	b11b      	cbz	r3, 800791a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007912:	f000 fa69 	bl	8007de8 <vPortExitCritical>
}
 8007916:	b003      	add	sp, #12
 8007918:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800791a:	4d0f      	ldr	r5, [pc, #60]	; (8007958 <prvCheckForValidListAndQueue+0x54>)
 800791c:	4628      	mov	r0, r5
 800791e:	f7fe fc23 	bl	8006168 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007922:	4c0e      	ldr	r4, [pc, #56]	; (800795c <prvCheckForValidListAndQueue+0x58>)
 8007924:	4620      	mov	r0, r4
 8007926:	f7fe fc1f 	bl	8006168 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800792a:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <prvCheckForValidListAndQueue+0x5c>)
 800792c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800792e:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <prvCheckForValidListAndQueue+0x60>)
 8007930:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007932:	2300      	movs	r3, #0
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <prvCheckForValidListAndQueue+0x64>)
 8007938:	4a0c      	ldr	r2, [pc, #48]	; (800796c <prvCheckForValidListAndQueue+0x68>)
 800793a:	2110      	movs	r1, #16
 800793c:	200a      	movs	r0, #10
 800793e:	f7fe fd53 	bl	80063e8 <xQueueGenericCreateStatic>
 8007942:	4b04      	ldr	r3, [pc, #16]	; (8007954 <prvCheckForValidListAndQueue+0x50>)
 8007944:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8007946:	2800      	cmp	r0, #0
 8007948:	d0e3      	beq.n	8007912 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800794a:	4909      	ldr	r1, [pc, #36]	; (8007970 <prvCheckForValidListAndQueue+0x6c>)
 800794c:	f7ff f926 	bl	8006b9c <vQueueAddToRegistry>
 8007950:	e7df      	b.n	8007912 <prvCheckForValidListAndQueue+0xe>
 8007952:	bf00      	nop
 8007954:	20001c98 	.word	0x20001c98
 8007958:	20001c1c 	.word	0x20001c1c
 800795c:	20001c30 	.word	0x20001c30
 8007960:	20001b74 	.word	0x20001b74
 8007964:	20001b78 	.word	0x20001b78
 8007968:	20001c48 	.word	0x20001c48
 800796c:	20001b7c 	.word	0x20001b7c
 8007970:	08009fb0 	.word	0x08009fb0

08007974 <xTimerCreateTimerTask>:
{
 8007974:	b510      	push	{r4, lr}
 8007976:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007978:	f7ff ffc4 	bl	8007904 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800797c:	4b12      	ldr	r3, [pc, #72]	; (80079c8 <xTimerCreateTimerTask+0x54>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	b1cb      	cbz	r3, 80079b6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007982:	2400      	movs	r4, #0
 8007984:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007986:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007988:	aa07      	add	r2, sp, #28
 800798a:	a906      	add	r1, sp, #24
 800798c:	a805      	add	r0, sp, #20
 800798e:	f7fe fac7 	bl	8005f20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007992:	9b05      	ldr	r3, [sp, #20]
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	9b06      	ldr	r3, [sp, #24]
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	2302      	movs	r3, #2
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4623      	mov	r3, r4
 80079a0:	9a07      	ldr	r2, [sp, #28]
 80079a2:	490a      	ldr	r1, [pc, #40]	; (80079cc <xTimerCreateTimerTask+0x58>)
 80079a4:	480a      	ldr	r0, [pc, #40]	; (80079d0 <xTimerCreateTimerTask+0x5c>)
 80079a6:	f7ff fab9 	bl	8006f1c <xTaskCreateStatic>
 80079aa:	4b0a      	ldr	r3, [pc, #40]	; (80079d4 <xTimerCreateTimerTask+0x60>)
 80079ac:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80079ae:	b110      	cbz	r0, 80079b6 <xTimerCreateTimerTask+0x42>
}
 80079b0:	2001      	movs	r0, #1
 80079b2:	b008      	add	sp, #32
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80079c6:	e7fe      	b.n	80079c6 <xTimerCreateTimerTask+0x52>
 80079c8:	20001c98 	.word	0x20001c98
 80079cc:	08009fb8 	.word	0x08009fb8
 80079d0:	08007cb5 	.word	0x08007cb5
 80079d4:	20001c9c 	.word	0x20001c9c

080079d8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80079d8:	b1b8      	cbz	r0, 8007a0a <xTimerGenericCommand+0x32>
 80079da:	469c      	mov	ip, r3
 80079dc:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80079de:	4818      	ldr	r0, [pc, #96]	; (8007a40 <xTimerGenericCommand+0x68>)
 80079e0:	6800      	ldr	r0, [r0, #0]
 80079e2:	b358      	cbz	r0, 8007a3c <xTimerGenericCommand+0x64>
{
 80079e4:	b500      	push	{lr}
 80079e6:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80079e8:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079ea:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80079ec:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079ee:	2905      	cmp	r1, #5
 80079f0:	dc1c      	bgt.n	8007a2c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079f2:	f7ff fe45 	bl	8007680 <xTaskGetSchedulerState>
 80079f6:	2802      	cmp	r0, #2
 80079f8:	d010      	beq.n	8007a1c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079fa:	2300      	movs	r3, #0
 80079fc:	461a      	mov	r2, r3
 80079fe:	4669      	mov	r1, sp
 8007a00:	480f      	ldr	r0, [pc, #60]	; (8007a40 <xTimerGenericCommand+0x68>)
 8007a02:	6800      	ldr	r0, [r0, #0]
 8007a04:	f7fe fd60 	bl	80064c8 <xQueueGenericSend>
 8007a08:	e015      	b.n	8007a36 <xTimerGenericCommand+0x5e>
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8007a1a:	e7fe      	b.n	8007a1a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9a06      	ldr	r2, [sp, #24]
 8007a20:	4669      	mov	r1, sp
 8007a22:	4807      	ldr	r0, [pc, #28]	; (8007a40 <xTimerGenericCommand+0x68>)
 8007a24:	6800      	ldr	r0, [r0, #0]
 8007a26:	f7fe fd4f 	bl	80064c8 <xQueueGenericSend>
 8007a2a:	e004      	b.n	8007a36 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4662      	mov	r2, ip
 8007a30:	4669      	mov	r1, sp
 8007a32:	f7fe fe53 	bl	80066dc <xQueueGenericSendFromISR>
}
 8007a36:	b005      	add	sp, #20
 8007a38:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8007a3c:	2000      	movs	r0, #0
}
 8007a3e:	4770      	bx	lr
 8007a40:	20001c98 	.word	0x20001c98

08007a44 <prvSwitchTimerLists>:
{
 8007a44:	b570      	push	{r4, r5, r6, lr}
 8007a46:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a48:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <prvSwitchTimerLists+0x70>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	b352      	cbz	r2, 8007aa6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a54:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a56:	1d25      	adds	r5, r4, #4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f7fe fbb7 	bl	80061cc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a60:	4620      	mov	r0, r4
 8007a62:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a64:	69e3      	ldr	r3, [r4, #28]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d1ee      	bne.n	8007a48 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a6a:	69a3      	ldr	r3, [r4, #24]
 8007a6c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8007a6e:	429e      	cmp	r6, r3
 8007a70:	d207      	bcs.n	8007a82 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a72:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a74:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a76:	4629      	mov	r1, r5
 8007a78:	4b0e      	ldr	r3, [pc, #56]	; (8007ab4 <prvSwitchTimerLists+0x70>)
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	f7fe fb8d 	bl	800619a <vListInsert>
 8007a80:	e7e2      	b.n	8007a48 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a82:	2100      	movs	r1, #0
 8007a84:	9100      	str	r1, [sp, #0]
 8007a86:	460b      	mov	r3, r1
 8007a88:	4632      	mov	r2, r6
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7ff ffa4 	bl	80079d8 <xTimerGenericCommand>
				configASSERT( xResult );
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d1d9      	bne.n	8007a48 <prvSwitchTimerLists+0x4>
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	e7fe      	b.n	8007aa4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 8007aa6:	4a04      	ldr	r2, [pc, #16]	; (8007ab8 <prvSwitchTimerLists+0x74>)
 8007aa8:	6810      	ldr	r0, [r2, #0]
 8007aaa:	4902      	ldr	r1, [pc, #8]	; (8007ab4 <prvSwitchTimerLists+0x70>)
 8007aac:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8007aae:	6013      	str	r3, [r2, #0]
}
 8007ab0:	b002      	add	sp, #8
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	20001b74 	.word	0x20001b74
 8007ab8:	20001b78 	.word	0x20001b78

08007abc <prvSampleTimeNow>:
{
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8007ac0:	f7ff faf0 	bl	80070a4 <xTaskGetTickCount>
 8007ac4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <prvSampleTimeNow+0x28>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4283      	cmp	r3, r0
 8007acc:	d805      	bhi.n	8007ada <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8007ad2:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <prvSampleTimeNow+0x28>)
 8007ad4:	601c      	str	r4, [r3, #0]
}
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8007ada:	f7ff ffb3 	bl	8007a44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	602b      	str	r3, [r5, #0]
 8007ae2:	e7f6      	b.n	8007ad2 <prvSampleTimeNow+0x16>
 8007ae4:	20001c44 	.word	0x20001c44

08007ae8 <prvProcessExpiredTimer>:
{
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	4606      	mov	r6, r0
 8007aee:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007af0:	4914      	ldr	r1, [pc, #80]	; (8007b44 <prvProcessExpiredTimer+0x5c>)
 8007af2:	6809      	ldr	r1, [r1, #0]
 8007af4:	68c9      	ldr	r1, [r1, #12]
 8007af6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007af8:	1d20      	adds	r0, r4, #4
 8007afa:	f7fe fb67 	bl	80061cc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007afe:	69e1      	ldr	r1, [r4, #28]
 8007b00:	2901      	cmp	r1, #1
 8007b02:	d004      	beq.n	8007b0e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b06:	4620      	mov	r0, r4
 8007b08:	4798      	blx	r3
}
 8007b0a:	b002      	add	sp, #8
 8007b0c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b0e:	69a1      	ldr	r1, [r4, #24]
 8007b10:	4633      	mov	r3, r6
 8007b12:	462a      	mov	r2, r5
 8007b14:	4431      	add	r1, r6
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7ff fed0 	bl	80078bc <prvInsertTimerInActiveList>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d0f1      	beq.n	8007b04 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b20:	2100      	movs	r1, #0
 8007b22:	9100      	str	r1, [sp, #0]
 8007b24:	460b      	mov	r3, r1
 8007b26:	4632      	mov	r2, r6
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7ff ff55 	bl	80079d8 <xTimerGenericCommand>
			configASSERT( xResult );
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d1e8      	bne.n	8007b04 <prvProcessExpiredTimer+0x1c>
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	e7fe      	b.n	8007b42 <prvProcessExpiredTimer+0x5a>
 8007b44:	20001b74 	.word	0x20001b74

08007b48 <prvProcessTimerOrBlockTask>:
{
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8007b50:	f7ff faa0 	bl	8007094 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b54:	a801      	add	r0, sp, #4
 8007b56:	f7ff ffb1 	bl	8007abc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8007b5a:	9b01      	ldr	r3, [sp, #4]
 8007b5c:	bb2b      	cbnz	r3, 8007baa <prvProcessTimerOrBlockTask+0x62>
 8007b5e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b60:	b90c      	cbnz	r4, 8007b66 <prvProcessTimerOrBlockTask+0x1e>
 8007b62:	42b0      	cmp	r0, r6
 8007b64:	d21a      	bcs.n	8007b9c <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 8007b66:	b12c      	cbz	r4, 8007b74 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b68:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <prvProcessTimerOrBlockTask+0x6c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681c      	ldr	r4, [r3, #0]
 8007b6e:	fab4 f484 	clz	r4, r4
 8007b72:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b74:	4622      	mov	r2, r4
 8007b76:	1b71      	subs	r1, r6, r5
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <prvProcessTimerOrBlockTask+0x70>)
 8007b7a:	6818      	ldr	r0, [r3, #0]
 8007b7c:	f7ff f822 	bl	8006bc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b80:	f7ff fb22 	bl	80071c8 <xTaskResumeAll>
 8007b84:	b998      	cbnz	r0, 8007bae <prvProcessTimerOrBlockTask+0x66>
					portYIELD_WITHIN_API();
 8007b86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	e008      	b.n	8007bae <prvProcessTimerOrBlockTask+0x66>
				( void ) xTaskResumeAll();
 8007b9c:	f7ff fb14 	bl	80071c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f7ff ffa0 	bl	8007ae8 <prvProcessExpiredTimer>
 8007ba8:	e001      	b.n	8007bae <prvProcessTimerOrBlockTask+0x66>
			( void ) xTaskResumeAll();
 8007baa:	f7ff fb0d 	bl	80071c8 <xTaskResumeAll>
}
 8007bae:	b002      	add	sp, #8
 8007bb0:	bd70      	pop	{r4, r5, r6, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20001b78 	.word	0x20001b78
 8007bb8:	20001c98 	.word	0x20001c98

08007bbc <prvProcessReceivedCommands>:
{
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bc0:	e002      	b.n	8007bc8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bc2:	9b04      	ldr	r3, [sp, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da0f      	bge.n	8007be8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bc8:	2200      	movs	r2, #0
 8007bca:	a904      	add	r1, sp, #16
 8007bcc:	4b38      	ldr	r3, [pc, #224]	; (8007cb0 <prvProcessReceivedCommands+0xf4>)
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	f7fe fdea 	bl	80067a8 <xQueueReceive>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d069      	beq.n	8007cac <prvProcessReceivedCommands+0xf0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bd8:	9b04      	ldr	r3, [sp, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	daf1      	bge.n	8007bc2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bde:	9907      	ldr	r1, [sp, #28]
 8007be0:	9806      	ldr	r0, [sp, #24]
 8007be2:	9b05      	ldr	r3, [sp, #20]
 8007be4:	4798      	blx	r3
 8007be6:	e7ec      	b.n	8007bc2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007be8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bea:	6963      	ldr	r3, [r4, #20]
 8007bec:	b113      	cbz	r3, 8007bf4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bee:	1d20      	adds	r0, r4, #4
 8007bf0:	f7fe faec 	bl	80061cc <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bf4:	a803      	add	r0, sp, #12
 8007bf6:	f7ff ff61 	bl	8007abc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007bfa:	9b04      	ldr	r3, [sp, #16]
 8007bfc:	2b09      	cmp	r3, #9
 8007bfe:	d8e3      	bhi.n	8007bc8 <prvProcessReceivedCommands+0xc>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <prvProcessReceivedCommands+0x4c>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c31 	.word	0x08007c31
 8007c0c:	08007c31 	.word	0x08007c31
 8007c10:	08007c31 	.word	0x08007c31
 8007c14:	08007bc9 	.word	0x08007bc9
 8007c18:	08007c77 	.word	0x08007c77
 8007c1c:	08007c9d 	.word	0x08007c9d
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c31 	.word	0x08007c31
 8007c28:	08007bc9 	.word	0x08007bc9
 8007c2c:	08007c77 	.word	0x08007c77
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	69a1      	ldr	r1, [r4, #24]
 8007c34:	4602      	mov	r2, r0
 8007c36:	4419      	add	r1, r3
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f7ff fe3f 	bl	80078bc <prvInsertTimerInActiveList>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d0c2      	beq.n	8007bc8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c44:	4620      	mov	r0, r4
 8007c46:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c48:	69e3      	ldr	r3, [r4, #28]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d1bc      	bne.n	8007bc8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c4e:	69a2      	ldr	r2, [r4, #24]
 8007c50:	2100      	movs	r1, #0
 8007c52:	9100      	str	r1, [sp, #0]
 8007c54:	460b      	mov	r3, r1
 8007c56:	9805      	ldr	r0, [sp, #20]
 8007c58:	4402      	add	r2, r0
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f7ff febc 	bl	80079d8 <xTimerGenericCommand>
							configASSERT( xResult );
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1b1      	bne.n	8007bc8 <prvProcessReceivedCommands+0xc>
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	e7fe      	b.n	8007c74 <prvProcessReceivedCommands+0xb8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c76:	9905      	ldr	r1, [sp, #20]
 8007c78:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c7a:	b131      	cbz	r1, 8007c8a <prvProcessReceivedCommands+0xce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	4602      	mov	r2, r0
 8007c80:	4401      	add	r1, r0
 8007c82:	4620      	mov	r0, r4
 8007c84:	f7ff fe1a 	bl	80078bc <prvInsertTimerInActiveList>
					break;
 8007c88:	e79e      	b.n	8007bc8 <prvProcessReceivedCommands+0xc>
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c9a:	e7fe      	b.n	8007c9a <prvProcessReceivedCommands+0xde>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c9c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d191      	bne.n	8007bc8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 fa6f 	bl	8008188 <vPortFree>
 8007caa:	e78d      	b.n	8007bc8 <prvProcessReceivedCommands+0xc>
}
 8007cac:	b008      	add	sp, #32
 8007cae:	bd10      	pop	{r4, pc}
 8007cb0:	20001c98 	.word	0x20001c98

08007cb4 <prvTimerTask>:
{
 8007cb4:	b500      	push	{lr}
 8007cb6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cb8:	a801      	add	r0, sp, #4
 8007cba:	f7ff fdef 	bl	800789c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cbe:	9901      	ldr	r1, [sp, #4]
 8007cc0:	f7ff ff42 	bl	8007b48 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8007cc4:	f7ff ff7a 	bl	8007bbc <prvProcessReceivedCommands>
	for( ;; )
 8007cc8:	e7f6      	b.n	8007cb8 <prvTimerTask+0x4>
	...

08007ccc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007cd4:	f06f 0301 	mvn.w	r3, #1
 8007cd8:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007cda:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007cdc:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007cde:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4669      	mov	r1, sp
 8007ce4:	4802      	ldr	r0, [pc, #8]	; (8007cf0 <xTimerPendFunctionCallFromISR+0x24>)
 8007ce6:	6800      	ldr	r0, [r0, #0]
 8007ce8:	f7fe fcf8 	bl	80066dc <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8007cec:	b004      	add	sp, #16
 8007cee:	bd10      	pop	{r4, pc}
 8007cf0:	20001c98 	.word	0x20001c98

08007cf4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cf4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <prvTaskExitError+0x3c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d02:	d008      	beq.n	8007d16 <prvTaskExitError+0x22>
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	e7fe      	b.n	8007d14 <prvTaskExitError+0x20>
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0fc      	beq.n	8007d26 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d2c:	b002      	add	sp, #8
 8007d2e:	4770      	bx	lr
 8007d30:	200007c4 	.word	0x200007c4

08007d34 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007d34:	4806      	ldr	r0, [pc, #24]	; (8007d50 <prvPortStartFirstTask+0x1c>)
 8007d36:	6800      	ldr	r0, [r0, #0]
 8007d38:	6800      	ldr	r0, [r0, #0]
 8007d3a:	f380 8808 	msr	MSP, r0
 8007d3e:	b662      	cpsie	i
 8007d40:	b661      	cpsie	f
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	df00      	svc	0
 8007d4c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d4e:	0000      	.short	0x0000
 8007d50:	e000ed08 	.word	0xe000ed08

08007d54 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d58:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d5c:	f021 0101 	bic.w	r1, r1, #1
 8007d60:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d64:	4b03      	ldr	r3, [pc, #12]	; (8007d74 <pxPortInitialiseStack+0x20>)
 8007d66:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d6a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007d6e:	3840      	subs	r0, #64	; 0x40
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	08007cf5 	.word	0x08007cf5
	...

08007d80 <SVC_Handler>:
	__asm volatile (
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <pxCurrentTCBConst2>)
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	6808      	ldr	r0, [r1, #0]
 8007d86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d8a:	f380 8809 	msr	PSP, r0
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f04f 0000 	mov.w	r0, #0
 8007d96:	f380 8811 	msr	BASEPRI, r0
 8007d9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007d9e:	4770      	bx	lr

08007da0 <pxCurrentTCBConst2>:
 8007da0:	20001674 	.word	0x20001674

08007da4 <vPortEnterCritical>:
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007db4:	4a0b      	ldr	r2, [pc, #44]	; (8007de4 <vPortEnterCritical+0x40>)
 8007db6:	6813      	ldr	r3, [r2, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d000      	beq.n	8007dc2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007dc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007dc6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007dca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007dce:	d0f7      	beq.n	8007dc0 <vPortEnterCritical+0x1c>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	e7fe      	b.n	8007de0 <vPortEnterCritical+0x3c>
 8007de2:	bf00      	nop
 8007de4:	200007c4 	.word	0x200007c4

08007de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007de8:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <vPortExitCritical+0x28>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	b943      	cbnz	r3, 8007e00 <vPortExitCritical+0x18>
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	e7fe      	b.n	8007dfe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007e00:	3b01      	subs	r3, #1
 8007e02:	4a03      	ldr	r2, [pc, #12]	; (8007e10 <vPortExitCritical+0x28>)
 8007e04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e06:	b90b      	cbnz	r3, 8007e0c <vPortExitCritical+0x24>
	__asm volatile
 8007e08:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	200007c4 	.word	0x200007c4
	...

08007e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e20:	f3ef 8009 	mrs	r0, PSP
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <pxCurrentTCBConst>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e30:	6010      	str	r0, [r2, #0]
 8007e32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007e36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e3a:	f380 8811 	msr	BASEPRI, r0
 8007e3e:	f7ff fa91 	bl	8007364 <vTaskSwitchContext>
 8007e42:	f04f 0000 	mov.w	r0, #0
 8007e46:	f380 8811 	msr	BASEPRI, r0
 8007e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e4e:	6819      	ldr	r1, [r3, #0]
 8007e50:	6808      	ldr	r0, [r1, #0]
 8007e52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e56:	f380 8809 	msr	PSP, r0
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	4770      	bx	lr

08007e60 <pxCurrentTCBConst>:
 8007e60:	20001674 	.word	0x20001674

08007e64 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e64:	b508      	push	{r3, lr}
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e76:	f7ff f91b 	bl	80070b0 <xTaskIncrementTick>
 8007e7a:	b128      	cbz	r0, 8007e88 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e8e:	bd08      	pop	{r3, pc}

08007e90 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e90:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007e94:	2300      	movs	r3, #0
 8007e96:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e98:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <vPortSetupTimerInterrupt+0x20>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4905      	ldr	r1, [pc, #20]	; (8007eb4 <vPortSetupTimerInterrupt+0x24>)
 8007ea0:	fba1 1303 	umull	r1, r3, r1, r3
 8007ea4:	099b      	lsrs	r3, r3, #6
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eaa:	2307      	movs	r3, #7
 8007eac:	6113      	str	r3, [r2, #16]
}
 8007eae:	4770      	bx	lr
 8007eb0:	20000020 	.word	0x20000020
 8007eb4:	10624dd3 	.word	0x10624dd3

08007eb8 <xPortStartScheduler>:
{
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ebc:	4b2a      	ldr	r3, [pc, #168]	; (8007f68 <xPortStartScheduler+0xb0>)
 8007ebe:	781a      	ldrb	r2, [r3, #0]
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ec4:	22ff      	movs	r2, #255	; 0xff
 8007ec6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ed0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ed8:	4a24      	ldr	r2, [pc, #144]	; (8007f6c <xPortStartScheduler+0xb4>)
 8007eda:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007edc:	4b24      	ldr	r3, [pc, #144]	; (8007f70 <xPortStartScheduler+0xb8>)
 8007ede:	2207      	movs	r2, #7
 8007ee0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ee2:	e009      	b.n	8007ef8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8007ee4:	4a22      	ldr	r2, [pc, #136]	; (8007f70 <xPortStartScheduler+0xb8>)
 8007ee6:	6813      	ldr	r3, [r2, #0]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007eec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ef8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007efc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007f00:	d1f0      	bne.n	8007ee4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f02:	4b1b      	ldr	r3, [pc, #108]	; (8007f70 <xPortStartScheduler+0xb8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d008      	beq.n	8007f1c <xPortStartScheduler+0x64>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	e7fe      	b.n	8007f1a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	4a14      	ldr	r2, [pc, #80]	; (8007f70 <xPortStartScheduler+0xb8>)
 8007f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f26:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	4a0e      	ldr	r2, [pc, #56]	; (8007f68 <xPortStartScheduler+0xb0>)
 8007f2e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f34:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007f38:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007f3c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f40:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007f44:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007f48:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007f4c:	f7ff ffa0 	bl	8007e90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007f50:	2400      	movs	r4, #0
 8007f52:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <xPortStartScheduler+0xbc>)
 8007f54:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007f56:	f7ff feed 	bl	8007d34 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007f5a:	f7ff fa03 	bl	8007364 <vTaskSwitchContext>
	prvTaskExitError();
 8007f5e:	f7ff fec9 	bl	8007cf4 <prvTaskExitError>
}
 8007f62:	4620      	mov	r0, r4
 8007f64:	b002      	add	sp, #8
 8007f66:	bd10      	pop	{r4, pc}
 8007f68:	e000e400 	.word	0xe000e400
 8007f6c:	20001ca0 	.word	0x20001ca0
 8007f70:	20001ca4 	.word	0x20001ca4
 8007f74:	200007c4 	.word	0x200007c4

08007f78 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f78:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f7c:	2b0f      	cmp	r3, #15
 8007f7e:	d90f      	bls.n	8007fa0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f80:	4a11      	ldr	r2, [pc, #68]	; (8007fc8 <vPortValidateInterruptPriority+0x50>)
 8007f82:	5c9b      	ldrb	r3, [r3, r2]
 8007f84:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f86:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <vPortValidateInterruptPriority+0x54>)
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d908      	bls.n	8007fa0 <vPortValidateInterruptPriority+0x28>
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	e7fe      	b.n	8007f9e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fa0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007fa4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fac:	4a08      	ldr	r2, [pc, #32]	; (8007fd0 <vPortValidateInterruptPriority+0x58>)
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d908      	bls.n	8007fc6 <vPortValidateInterruptPriority+0x4e>
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	e7fe      	b.n	8007fc4 <vPortValidateInterruptPriority+0x4c>
	}
 8007fc6:	4770      	bx	lr
 8007fc8:	e000e3f0 	.word	0xe000e3f0
 8007fcc:	20001ca0 	.word	0x20001ca0
 8007fd0:	20001ca4 	.word	0x20001ca4

08007fd4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fd4:	4a12      	ldr	r2, [pc, #72]	; (8008020 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fd6:	f012 0f07 	tst.w	r2, #7
 8007fda:	d01e      	beq.n	800801a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fdc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fde:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fe2:	f5c1 637a 	rsb	r3, r1, #4000	; 0xfa0
 8007fe6:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fe8:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fea:	480e      	ldr	r0, [pc, #56]	; (8008024 <prvHeapInit+0x50>)
 8007fec:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fee:	2100      	movs	r1, #0
 8007ff0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ff2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007ff4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ff6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007ffa:	480b      	ldr	r0, [pc, #44]	; (8008028 <prvHeapInit+0x54>)
 8007ffc:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007ffe:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008000:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008002:	1a99      	subs	r1, r3, r2
 8008004:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008006:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008008:	4b08      	ldr	r3, [pc, #32]	; (800802c <prvHeapInit+0x58>)
 800800a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800800c:	4b08      	ldr	r3, [pc, #32]	; (8008030 <prvHeapInit+0x5c>)
 800800e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008010:	4b08      	ldr	r3, [pc, #32]	; (8008034 <prvHeapInit+0x60>)
 8008012:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008016:	601a      	str	r2, [r3, #0]
}
 8008018:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800801a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800801e:	e7e4      	b.n	8007fea <prvHeapInit+0x16>
 8008020:	20001cac 	.word	0x20001cac
 8008024:	20002c58 	.word	0x20002c58
 8008028:	20001ca8 	.word	0x20001ca8
 800802c:	20002c54 	.word	0x20002c54
 8008030:	20002c50 	.word	0x20002c50
 8008034:	20002c4c 	.word	0x20002c4c

08008038 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008038:	4b15      	ldr	r3, [pc, #84]	; (8008090 <prvInsertBlockIntoFreeList+0x58>)
 800803a:	461a      	mov	r2, r3
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4283      	cmp	r3, r0
 8008040:	d3fb      	bcc.n	800803a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008042:	6851      	ldr	r1, [r2, #4]
 8008044:	eb02 0c01 	add.w	ip, r2, r1
 8008048:	4584      	cmp	ip, r0
 800804a:	d009      	beq.n	8008060 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800804c:	6841      	ldr	r1, [r0, #4]
 800804e:	eb00 0c01 	add.w	ip, r0, r1
 8008052:	4563      	cmp	r3, ip
 8008054:	d009      	beq.n	800806a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008056:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008058:	4290      	cmp	r0, r2
 800805a:	d018      	beq.n	800808e <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800805c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800805e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008060:	6840      	ldr	r0, [r0, #4]
 8008062:	4401      	add	r1, r0
 8008064:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8008066:	4610      	mov	r0, r2
 8008068:	e7f0      	b.n	800804c <prvInsertBlockIntoFreeList+0x14>
{
 800806a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800806c:	4c09      	ldr	r4, [pc, #36]	; (8008094 <prvInsertBlockIntoFreeList+0x5c>)
 800806e:	6824      	ldr	r4, [r4, #0]
 8008070:	42a3      	cmp	r3, r4
 8008072:	d00a      	beq.n	800808a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4419      	add	r1, r3
 8008078:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800807a:	6813      	ldr	r3, [r2, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8008080:	4290      	cmp	r0, r2
 8008082:	d000      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008084:	6010      	str	r0, [r2, #0]
	}
}
 8008086:	bc10      	pop	{r4}
 8008088:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800808a:	6004      	str	r4, [r0, #0]
 800808c:	e7f8      	b.n	8008080 <prvInsertBlockIntoFreeList+0x48>
 800808e:	4770      	bx	lr
 8008090:	20002c58 	.word	0x20002c58
 8008094:	20001ca8 	.word	0x20001ca8

08008098 <pvPortMalloc>:
{
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800809c:	f7fe fffa 	bl	8007094 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80080a0:	4b34      	ldr	r3, [pc, #208]	; (8008174 <pvPortMalloc+0xdc>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	b1a3      	cbz	r3, 80080d0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080a6:	4b34      	ldr	r3, [pc, #208]	; (8008178 <pvPortMalloc+0xe0>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	421d      	tst	r5, r3
 80080ac:	d14a      	bne.n	8008144 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 80080ae:	b135      	cbz	r5, 80080be <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80080b0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080b2:	f015 0f07 	tst.w	r5, #7
 80080b6:	d002      	beq.n	80080be <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080b8:	f025 0507 	bic.w	r5, r5, #7
 80080bc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080be:	2d00      	cmp	r5, #0
 80080c0:	d042      	beq.n	8008148 <pvPortMalloc+0xb0>
 80080c2:	4b2e      	ldr	r3, [pc, #184]	; (800817c <pvPortMalloc+0xe4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	42ab      	cmp	r3, r5
 80080c8:	d34d      	bcc.n	8008166 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 80080ca:	4a2d      	ldr	r2, [pc, #180]	; (8008180 <pvPortMalloc+0xe8>)
 80080cc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080ce:	e004      	b.n	80080da <pvPortMalloc+0x42>
			prvHeapInit();
 80080d0:	f7ff ff80 	bl	8007fd4 <prvHeapInit>
 80080d4:	e7e7      	b.n	80080a6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80080d6:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80080d8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080da:	6863      	ldr	r3, [r4, #4]
 80080dc:	42ab      	cmp	r3, r5
 80080de:	d202      	bcs.n	80080e6 <pvPortMalloc+0x4e>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1f7      	bne.n	80080d6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80080e6:	4b23      	ldr	r3, [pc, #140]	; (8008174 <pvPortMalloc+0xdc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	d03d      	beq.n	800816a <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080ee:	6816      	ldr	r6, [r2, #0]
 80080f0:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	1b5b      	subs	r3, r3, r5
 80080fa:	2b10      	cmp	r3, #16
 80080fc:	d910      	bls.n	8008120 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080fe:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008100:	f010 0f07 	tst.w	r0, #7
 8008104:	d008      	beq.n	8008118 <pvPortMalloc+0x80>
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	e7fe      	b.n	8008116 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008118:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800811a:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800811c:	f7ff ff8c 	bl	8008038 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008120:	6862      	ldr	r2, [r4, #4]
 8008122:	4916      	ldr	r1, [pc, #88]	; (800817c <pvPortMalloc+0xe4>)
 8008124:	680b      	ldr	r3, [r1, #0]
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800812a:	4916      	ldr	r1, [pc, #88]	; (8008184 <pvPortMalloc+0xec>)
 800812c:	6809      	ldr	r1, [r1, #0]
 800812e:	428b      	cmp	r3, r1
 8008130:	d201      	bcs.n	8008136 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008132:	4914      	ldr	r1, [pc, #80]	; (8008184 <pvPortMalloc+0xec>)
 8008134:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <pvPortMalloc+0xe0>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4313      	orrs	r3, r2
 800813c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	e002      	b.n	800814a <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8008144:	2600      	movs	r6, #0
 8008146:	e000      	b.n	800814a <pvPortMalloc+0xb2>
 8008148:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800814a:	f7ff f83d 	bl	80071c8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800814e:	f016 0f07 	tst.w	r6, #7
 8008152:	d00c      	beq.n	800816e <pvPortMalloc+0xd6>
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	e7fe      	b.n	8008164 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 8008166:	2600      	movs	r6, #0
 8008168:	e7ef      	b.n	800814a <pvPortMalloc+0xb2>
 800816a:	2600      	movs	r6, #0
 800816c:	e7ed      	b.n	800814a <pvPortMalloc+0xb2>
}
 800816e:	4630      	mov	r0, r6
 8008170:	bd70      	pop	{r4, r5, r6, pc}
 8008172:	bf00      	nop
 8008174:	20001ca8 	.word	0x20001ca8
 8008178:	20002c4c 	.word	0x20002c4c
 800817c:	20002c50 	.word	0x20002c50
 8008180:	20002c58 	.word	0x20002c58
 8008184:	20002c54 	.word	0x20002c54

08008188 <vPortFree>:
	if( pv != NULL )
 8008188:	b380      	cbz	r0, 80081ec <vPortFree+0x64>
{
 800818a:	b538      	push	{r3, r4, r5, lr}
 800818c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800818e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008192:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008196:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <vPortFree+0x68>)
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	4213      	tst	r3, r2
 800819c:	d108      	bne.n	80081b0 <vPortFree+0x28>
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	e7fe      	b.n	80081ae <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081b0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80081b4:	b141      	cbz	r1, 80081c8 <vPortFree+0x40>
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	e7fe      	b.n	80081c6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081c8:	ea23 0302 	bic.w	r3, r3, r2
 80081cc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80081d0:	f7fe ff60 	bl	8007094 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081d4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80081d8:	4a06      	ldr	r2, [pc, #24]	; (80081f4 <vPortFree+0x6c>)
 80081da:	6813      	ldr	r3, [r2, #0]
 80081dc:	440b      	add	r3, r1
 80081de:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081e0:	4628      	mov	r0, r5
 80081e2:	f7ff ff29 	bl	8008038 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80081e6:	f7fe ffef 	bl	80071c8 <xTaskResumeAll>
}
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20002c4c 	.word	0x20002c4c
 80081f4:	20002c50 	.word	0x20002c50

080081f8 <__itoa>:
 80081f8:	1e93      	subs	r3, r2, #2
 80081fa:	2b22      	cmp	r3, #34	; 0x22
 80081fc:	b510      	push	{r4, lr}
 80081fe:	460c      	mov	r4, r1
 8008200:	d904      	bls.n	800820c <__itoa+0x14>
 8008202:	2300      	movs	r3, #0
 8008204:	461c      	mov	r4, r3
 8008206:	700b      	strb	r3, [r1, #0]
 8008208:	4620      	mov	r0, r4
 800820a:	bd10      	pop	{r4, pc}
 800820c:	2a0a      	cmp	r2, #10
 800820e:	d109      	bne.n	8008224 <__itoa+0x2c>
 8008210:	2800      	cmp	r0, #0
 8008212:	da07      	bge.n	8008224 <__itoa+0x2c>
 8008214:	232d      	movs	r3, #45	; 0x2d
 8008216:	700b      	strb	r3, [r1, #0]
 8008218:	2101      	movs	r1, #1
 800821a:	4240      	negs	r0, r0
 800821c:	4421      	add	r1, r4
 800821e:	f000 f843 	bl	80082a8 <__utoa>
 8008222:	e7f1      	b.n	8008208 <__itoa+0x10>
 8008224:	2100      	movs	r1, #0
 8008226:	e7f9      	b.n	800821c <__itoa+0x24>

08008228 <itoa>:
 8008228:	f7ff bfe6 	b.w	80081f8 <__itoa>

0800822c <rand>:
 800822c:	4b16      	ldr	r3, [pc, #88]	; (8008288 <rand+0x5c>)
 800822e:	b510      	push	{r4, lr}
 8008230:	681c      	ldr	r4, [r3, #0]
 8008232:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008234:	b9b3      	cbnz	r3, 8008264 <rand+0x38>
 8008236:	2018      	movs	r0, #24
 8008238:	f000 fa76 	bl	8008728 <malloc>
 800823c:	4602      	mov	r2, r0
 800823e:	6320      	str	r0, [r4, #48]	; 0x30
 8008240:	b920      	cbnz	r0, 800824c <rand+0x20>
 8008242:	2152      	movs	r1, #82	; 0x52
 8008244:	4b11      	ldr	r3, [pc, #68]	; (800828c <rand+0x60>)
 8008246:	4812      	ldr	r0, [pc, #72]	; (8008290 <rand+0x64>)
 8008248:	f000 fa08 	bl	800865c <__assert_func>
 800824c:	4911      	ldr	r1, [pc, #68]	; (8008294 <rand+0x68>)
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <rand+0x6c>)
 8008250:	e9c0 1300 	strd	r1, r3, [r0]
 8008254:	4b11      	ldr	r3, [pc, #68]	; (800829c <rand+0x70>)
 8008256:	2100      	movs	r1, #0
 8008258:	6083      	str	r3, [r0, #8]
 800825a:	230b      	movs	r3, #11
 800825c:	8183      	strh	r3, [r0, #12]
 800825e:	2001      	movs	r0, #1
 8008260:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008264:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008266:	480e      	ldr	r0, [pc, #56]	; (80082a0 <rand+0x74>)
 8008268:	690b      	ldr	r3, [r1, #16]
 800826a:	694c      	ldr	r4, [r1, #20]
 800826c:	4358      	muls	r0, r3
 800826e:	4a0d      	ldr	r2, [pc, #52]	; (80082a4 <rand+0x78>)
 8008270:	fb02 0004 	mla	r0, r2, r4, r0
 8008274:	fba3 3202 	umull	r3, r2, r3, r2
 8008278:	3301      	adds	r3, #1
 800827a:	eb40 0002 	adc.w	r0, r0, r2
 800827e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008282:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008286:	bd10      	pop	{r4, pc}
 8008288:	20000820 	.word	0x20000820
 800828c:	08009fc0 	.word	0x08009fc0
 8008290:	08009fd7 	.word	0x08009fd7
 8008294:	abcd330e 	.word	0xabcd330e
 8008298:	e66d1234 	.word	0xe66d1234
 800829c:	0005deec 	.word	0x0005deec
 80082a0:	5851f42d 	.word	0x5851f42d
 80082a4:	4c957f2d 	.word	0x4c957f2d

080082a8 <__utoa>:
 80082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082aa:	b08b      	sub	sp, #44	; 0x2c
 80082ac:	4605      	mov	r5, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	466e      	mov	r6, sp
 80082b2:	4c1d      	ldr	r4, [pc, #116]	; (8008328 <__utoa+0x80>)
 80082b4:	f104 0c20 	add.w	ip, r4, #32
 80082b8:	4637      	mov	r7, r6
 80082ba:	6820      	ldr	r0, [r4, #0]
 80082bc:	6861      	ldr	r1, [r4, #4]
 80082be:	3408      	adds	r4, #8
 80082c0:	c703      	stmia	r7!, {r0, r1}
 80082c2:	4564      	cmp	r4, ip
 80082c4:	463e      	mov	r6, r7
 80082c6:	d1f7      	bne.n	80082b8 <__utoa+0x10>
 80082c8:	7921      	ldrb	r1, [r4, #4]
 80082ca:	6820      	ldr	r0, [r4, #0]
 80082cc:	7139      	strb	r1, [r7, #4]
 80082ce:	1e91      	subs	r1, r2, #2
 80082d0:	2922      	cmp	r1, #34	; 0x22
 80082d2:	6038      	str	r0, [r7, #0]
 80082d4:	f04f 0100 	mov.w	r1, #0
 80082d8:	d904      	bls.n	80082e4 <__utoa+0x3c>
 80082da:	7019      	strb	r1, [r3, #0]
 80082dc:	460b      	mov	r3, r1
 80082de:	4618      	mov	r0, r3
 80082e0:	b00b      	add	sp, #44	; 0x2c
 80082e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082e4:	1e58      	subs	r0, r3, #1
 80082e6:	4684      	mov	ip, r0
 80082e8:	fbb5 f7f2 	udiv	r7, r5, r2
 80082ec:	fb02 5617 	mls	r6, r2, r7, r5
 80082f0:	3628      	adds	r6, #40	; 0x28
 80082f2:	446e      	add	r6, sp
 80082f4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80082f8:	460c      	mov	r4, r1
 80082fa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80082fe:	462e      	mov	r6, r5
 8008300:	42b2      	cmp	r2, r6
 8008302:	463d      	mov	r5, r7
 8008304:	f101 0101 	add.w	r1, r1, #1
 8008308:	d9ee      	bls.n	80082e8 <__utoa+0x40>
 800830a:	2200      	movs	r2, #0
 800830c:	545a      	strb	r2, [r3, r1]
 800830e:	1919      	adds	r1, r3, r4
 8008310:	1aa5      	subs	r5, r4, r2
 8008312:	42aa      	cmp	r2, r5
 8008314:	dae3      	bge.n	80082de <__utoa+0x36>
 8008316:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800831a:	780e      	ldrb	r6, [r1, #0]
 800831c:	3201      	adds	r2, #1
 800831e:	7006      	strb	r6, [r0, #0]
 8008320:	f801 5901 	strb.w	r5, [r1], #-1
 8008324:	e7f4      	b.n	8008310 <__utoa+0x68>
 8008326:	bf00      	nop
 8008328:	0800a02f 	.word	0x0800a02f

0800832c <std>:
 800832c:	2300      	movs	r3, #0
 800832e:	b510      	push	{r4, lr}
 8008330:	4604      	mov	r4, r0
 8008332:	e9c0 3300 	strd	r3, r3, [r0]
 8008336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800833a:	6083      	str	r3, [r0, #8]
 800833c:	8181      	strh	r1, [r0, #12]
 800833e:	6643      	str	r3, [r0, #100]	; 0x64
 8008340:	81c2      	strh	r2, [r0, #14]
 8008342:	6183      	str	r3, [r0, #24]
 8008344:	4619      	mov	r1, r3
 8008346:	2208      	movs	r2, #8
 8008348:	305c      	adds	r0, #92	; 0x5c
 800834a:	f000 f8f4 	bl	8008536 <memset>
 800834e:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <std+0x58>)
 8008350:	6224      	str	r4, [r4, #32]
 8008352:	6263      	str	r3, [r4, #36]	; 0x24
 8008354:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <std+0x5c>)
 8008356:	62a3      	str	r3, [r4, #40]	; 0x28
 8008358:	4b0c      	ldr	r3, [pc, #48]	; (800838c <std+0x60>)
 800835a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800835c:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <std+0x64>)
 800835e:	6323      	str	r3, [r4, #48]	; 0x30
 8008360:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <std+0x68>)
 8008362:	429c      	cmp	r4, r3
 8008364:	d006      	beq.n	8008374 <std+0x48>
 8008366:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800836a:	4294      	cmp	r4, r2
 800836c:	d002      	beq.n	8008374 <std+0x48>
 800836e:	33d0      	adds	r3, #208	; 0xd0
 8008370:	429c      	cmp	r4, r3
 8008372:	d105      	bne.n	8008380 <std+0x54>
 8008374:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800837c:	f000 b954 	b.w	8008628 <__retarget_lock_init_recursive>
 8008380:	bd10      	pop	{r4, pc}
 8008382:	bf00      	nop
 8008384:	080084b1 	.word	0x080084b1
 8008388:	080084d3 	.word	0x080084d3
 800838c:	0800850b 	.word	0x0800850b
 8008390:	0800852f 	.word	0x0800852f
 8008394:	20002c60 	.word	0x20002c60

08008398 <stdio_exit_handler>:
 8008398:	4a02      	ldr	r2, [pc, #8]	; (80083a4 <stdio_exit_handler+0xc>)
 800839a:	4903      	ldr	r1, [pc, #12]	; (80083a8 <stdio_exit_handler+0x10>)
 800839c:	4803      	ldr	r0, [pc, #12]	; (80083ac <stdio_exit_handler+0x14>)
 800839e:	f000 b869 	b.w	8008474 <_fwalk_sglue>
 80083a2:	bf00      	nop
 80083a4:	200007c8 	.word	0x200007c8
 80083a8:	08008995 	.word	0x08008995
 80083ac:	200007d4 	.word	0x200007d4

080083b0 <cleanup_stdio>:
 80083b0:	6841      	ldr	r1, [r0, #4]
 80083b2:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <cleanup_stdio+0x34>)
 80083b4:	b510      	push	{r4, lr}
 80083b6:	4299      	cmp	r1, r3
 80083b8:	4604      	mov	r4, r0
 80083ba:	d001      	beq.n	80083c0 <cleanup_stdio+0x10>
 80083bc:	f000 faea 	bl	8008994 <_fflush_r>
 80083c0:	68a1      	ldr	r1, [r4, #8]
 80083c2:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <cleanup_stdio+0x38>)
 80083c4:	4299      	cmp	r1, r3
 80083c6:	d002      	beq.n	80083ce <cleanup_stdio+0x1e>
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 fae3 	bl	8008994 <_fflush_r>
 80083ce:	68e1      	ldr	r1, [r4, #12]
 80083d0:	4b06      	ldr	r3, [pc, #24]	; (80083ec <cleanup_stdio+0x3c>)
 80083d2:	4299      	cmp	r1, r3
 80083d4:	d004      	beq.n	80083e0 <cleanup_stdio+0x30>
 80083d6:	4620      	mov	r0, r4
 80083d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083dc:	f000 bada 	b.w	8008994 <_fflush_r>
 80083e0:	bd10      	pop	{r4, pc}
 80083e2:	bf00      	nop
 80083e4:	20002c60 	.word	0x20002c60
 80083e8:	20002cc8 	.word	0x20002cc8
 80083ec:	20002d30 	.word	0x20002d30

080083f0 <global_stdio_init.part.0>:
 80083f0:	b510      	push	{r4, lr}
 80083f2:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <global_stdio_init.part.0+0x30>)
 80083f4:	4c0b      	ldr	r4, [pc, #44]	; (8008424 <global_stdio_init.part.0+0x34>)
 80083f6:	4a0c      	ldr	r2, [pc, #48]	; (8008428 <global_stdio_init.part.0+0x38>)
 80083f8:	4620      	mov	r0, r4
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	2104      	movs	r1, #4
 80083fe:	2200      	movs	r2, #0
 8008400:	f7ff ff94 	bl	800832c <std>
 8008404:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008408:	2201      	movs	r2, #1
 800840a:	2109      	movs	r1, #9
 800840c:	f7ff ff8e 	bl	800832c <std>
 8008410:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008414:	2202      	movs	r2, #2
 8008416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800841a:	2112      	movs	r1, #18
 800841c:	f7ff bf86 	b.w	800832c <std>
 8008420:	20002d98 	.word	0x20002d98
 8008424:	20002c60 	.word	0x20002c60
 8008428:	08008399 	.word	0x08008399

0800842c <__sfp_lock_acquire>:
 800842c:	4801      	ldr	r0, [pc, #4]	; (8008434 <__sfp_lock_acquire+0x8>)
 800842e:	f000 b8fc 	b.w	800862a <__retarget_lock_acquire_recursive>
 8008432:	bf00      	nop
 8008434:	20002da1 	.word	0x20002da1

08008438 <__sfp_lock_release>:
 8008438:	4801      	ldr	r0, [pc, #4]	; (8008440 <__sfp_lock_release+0x8>)
 800843a:	f000 b8f7 	b.w	800862c <__retarget_lock_release_recursive>
 800843e:	bf00      	nop
 8008440:	20002da1 	.word	0x20002da1

08008444 <__sinit>:
 8008444:	b510      	push	{r4, lr}
 8008446:	4604      	mov	r4, r0
 8008448:	f7ff fff0 	bl	800842c <__sfp_lock_acquire>
 800844c:	6a23      	ldr	r3, [r4, #32]
 800844e:	b11b      	cbz	r3, 8008458 <__sinit+0x14>
 8008450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008454:	f7ff bff0 	b.w	8008438 <__sfp_lock_release>
 8008458:	4b04      	ldr	r3, [pc, #16]	; (800846c <__sinit+0x28>)
 800845a:	6223      	str	r3, [r4, #32]
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <__sinit+0x2c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1f5      	bne.n	8008450 <__sinit+0xc>
 8008464:	f7ff ffc4 	bl	80083f0 <global_stdio_init.part.0>
 8008468:	e7f2      	b.n	8008450 <__sinit+0xc>
 800846a:	bf00      	nop
 800846c:	080083b1 	.word	0x080083b1
 8008470:	20002d98 	.word	0x20002d98

08008474 <_fwalk_sglue>:
 8008474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008478:	4607      	mov	r7, r0
 800847a:	4688      	mov	r8, r1
 800847c:	4614      	mov	r4, r2
 800847e:	2600      	movs	r6, #0
 8008480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008484:	f1b9 0901 	subs.w	r9, r9, #1
 8008488:	d505      	bpl.n	8008496 <_fwalk_sglue+0x22>
 800848a:	6824      	ldr	r4, [r4, #0]
 800848c:	2c00      	cmp	r4, #0
 800848e:	d1f7      	bne.n	8008480 <_fwalk_sglue+0xc>
 8008490:	4630      	mov	r0, r6
 8008492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008496:	89ab      	ldrh	r3, [r5, #12]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d907      	bls.n	80084ac <_fwalk_sglue+0x38>
 800849c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084a0:	3301      	adds	r3, #1
 80084a2:	d003      	beq.n	80084ac <_fwalk_sglue+0x38>
 80084a4:	4629      	mov	r1, r5
 80084a6:	4638      	mov	r0, r7
 80084a8:	47c0      	blx	r8
 80084aa:	4306      	orrs	r6, r0
 80084ac:	3568      	adds	r5, #104	; 0x68
 80084ae:	e7e9      	b.n	8008484 <_fwalk_sglue+0x10>

080084b0 <__sread>:
 80084b0:	b510      	push	{r4, lr}
 80084b2:	460c      	mov	r4, r1
 80084b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b8:	f000 f868 	bl	800858c <_read_r>
 80084bc:	2800      	cmp	r0, #0
 80084be:	bfab      	itete	ge
 80084c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084c2:	89a3      	ldrhlt	r3, [r4, #12]
 80084c4:	181b      	addge	r3, r3, r0
 80084c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084ca:	bfac      	ite	ge
 80084cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80084ce:	81a3      	strhlt	r3, [r4, #12]
 80084d0:	bd10      	pop	{r4, pc}

080084d2 <__swrite>:
 80084d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d6:	461f      	mov	r7, r3
 80084d8:	898b      	ldrh	r3, [r1, #12]
 80084da:	4605      	mov	r5, r0
 80084dc:	05db      	lsls	r3, r3, #23
 80084de:	460c      	mov	r4, r1
 80084e0:	4616      	mov	r6, r2
 80084e2:	d505      	bpl.n	80084f0 <__swrite+0x1e>
 80084e4:	2302      	movs	r3, #2
 80084e6:	2200      	movs	r2, #0
 80084e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ec:	f000 f83c 	bl	8008568 <_lseek_r>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	4632      	mov	r2, r6
 80084f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	4628      	mov	r0, r5
 80084fc:	463b      	mov	r3, r7
 80084fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008506:	f000 b853 	b.w	80085b0 <_write_r>

0800850a <__sseek>:
 800850a:	b510      	push	{r4, lr}
 800850c:	460c      	mov	r4, r1
 800850e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008512:	f000 f829 	bl	8008568 <_lseek_r>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	bf15      	itete	ne
 800851c:	6560      	strne	r0, [r4, #84]	; 0x54
 800851e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008526:	81a3      	strheq	r3, [r4, #12]
 8008528:	bf18      	it	ne
 800852a:	81a3      	strhne	r3, [r4, #12]
 800852c:	bd10      	pop	{r4, pc}

0800852e <__sclose>:
 800852e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008532:	f000 b809 	b.w	8008548 <_close_r>

08008536 <memset>:
 8008536:	4603      	mov	r3, r0
 8008538:	4402      	add	r2, r0
 800853a:	4293      	cmp	r3, r2
 800853c:	d100      	bne.n	8008540 <memset+0xa>
 800853e:	4770      	bx	lr
 8008540:	f803 1b01 	strb.w	r1, [r3], #1
 8008544:	e7f9      	b.n	800853a <memset+0x4>
	...

08008548 <_close_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	2300      	movs	r3, #0
 800854c:	4d05      	ldr	r5, [pc, #20]	; (8008564 <_close_r+0x1c>)
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	f7fa fc1a 	bl	8002d8c <_close>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_close_r+0x1a>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_close_r+0x1a>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	20002d9c 	.word	0x20002d9c

08008568 <_lseek_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	4611      	mov	r1, r2
 8008570:	2200      	movs	r2, #0
 8008572:	4d05      	ldr	r5, [pc, #20]	; (8008588 <_lseek_r+0x20>)
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7fa fc12 	bl	8002da0 <_lseek>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_lseek_r+0x1e>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_lseek_r+0x1e>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20002d9c 	.word	0x20002d9c

0800858c <_read_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4604      	mov	r4, r0
 8008590:	4608      	mov	r0, r1
 8008592:	4611      	mov	r1, r2
 8008594:	2200      	movs	r2, #0
 8008596:	4d05      	ldr	r5, [pc, #20]	; (80085ac <_read_r+0x20>)
 8008598:	602a      	str	r2, [r5, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f7fa fbd8 	bl	8002d50 <_read>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_read_r+0x1e>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_read_r+0x1e>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20002d9c 	.word	0x20002d9c

080085b0 <_write_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	4611      	mov	r1, r2
 80085b8:	2200      	movs	r2, #0
 80085ba:	4d05      	ldr	r5, [pc, #20]	; (80085d0 <_write_r+0x20>)
 80085bc:	602a      	str	r2, [r5, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	f7fa fbd6 	bl	8002d70 <_write>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_write_r+0x1e>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_write_r+0x1e>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	20002d9c 	.word	0x20002d9c

080085d4 <__errno>:
 80085d4:	4b01      	ldr	r3, [pc, #4]	; (80085dc <__errno+0x8>)
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000820 	.word	0x20000820

080085e0 <__libc_init_array>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	2600      	movs	r6, #0
 80085e4:	4d0c      	ldr	r5, [pc, #48]	; (8008618 <__libc_init_array+0x38>)
 80085e6:	4c0d      	ldr	r4, [pc, #52]	; (800861c <__libc_init_array+0x3c>)
 80085e8:	1b64      	subs	r4, r4, r5
 80085ea:	10a4      	asrs	r4, r4, #2
 80085ec:	42a6      	cmp	r6, r4
 80085ee:	d109      	bne.n	8008604 <__libc_init_array+0x24>
 80085f0:	f000 fe62 	bl	80092b8 <_init>
 80085f4:	2600      	movs	r6, #0
 80085f6:	4d0a      	ldr	r5, [pc, #40]	; (8008620 <__libc_init_array+0x40>)
 80085f8:	4c0a      	ldr	r4, [pc, #40]	; (8008624 <__libc_init_array+0x44>)
 80085fa:	1b64      	subs	r4, r4, r5
 80085fc:	10a4      	asrs	r4, r4, #2
 80085fe:	42a6      	cmp	r6, r4
 8008600:	d105      	bne.n	800860e <__libc_init_array+0x2e>
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f855 3b04 	ldr.w	r3, [r5], #4
 8008608:	4798      	blx	r3
 800860a:	3601      	adds	r6, #1
 800860c:	e7ee      	b.n	80085ec <__libc_init_array+0xc>
 800860e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008612:	4798      	blx	r3
 8008614:	3601      	adds	r6, #1
 8008616:	e7f2      	b.n	80085fe <__libc_init_array+0x1e>
 8008618:	0800a0c4 	.word	0x0800a0c4
 800861c:	0800a0c4 	.word	0x0800a0c4
 8008620:	0800a0c4 	.word	0x0800a0c4
 8008624:	0800a0c8 	.word	0x0800a0c8

08008628 <__retarget_lock_init_recursive>:
 8008628:	4770      	bx	lr

0800862a <__retarget_lock_acquire_recursive>:
 800862a:	4770      	bx	lr

0800862c <__retarget_lock_release_recursive>:
 800862c:	4770      	bx	lr

0800862e <strcpy>:
 800862e:	4603      	mov	r3, r0
 8008630:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008634:	f803 2b01 	strb.w	r2, [r3], #1
 8008638:	2a00      	cmp	r2, #0
 800863a:	d1f9      	bne.n	8008630 <strcpy+0x2>
 800863c:	4770      	bx	lr

0800863e <memcpy>:
 800863e:	440a      	add	r2, r1
 8008640:	4291      	cmp	r1, r2
 8008642:	f100 33ff 	add.w	r3, r0, #4294967295
 8008646:	d100      	bne.n	800864a <memcpy+0xc>
 8008648:	4770      	bx	lr
 800864a:	b510      	push	{r4, lr}
 800864c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008650:	4291      	cmp	r1, r2
 8008652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008656:	d1f9      	bne.n	800864c <memcpy+0xe>
 8008658:	bd10      	pop	{r4, pc}
	...

0800865c <__assert_func>:
 800865c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800865e:	4614      	mov	r4, r2
 8008660:	461a      	mov	r2, r3
 8008662:	4b09      	ldr	r3, [pc, #36]	; (8008688 <__assert_func+0x2c>)
 8008664:	4605      	mov	r5, r0
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68d8      	ldr	r0, [r3, #12]
 800866a:	b14c      	cbz	r4, 8008680 <__assert_func+0x24>
 800866c:	4b07      	ldr	r3, [pc, #28]	; (800868c <__assert_func+0x30>)
 800866e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008672:	9100      	str	r1, [sp, #0]
 8008674:	462b      	mov	r3, r5
 8008676:	4906      	ldr	r1, [pc, #24]	; (8008690 <__assert_func+0x34>)
 8008678:	f000 f9b4 	bl	80089e4 <fiprintf>
 800867c:	f000 f9d4 	bl	8008a28 <abort>
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <__assert_func+0x38>)
 8008682:	461c      	mov	r4, r3
 8008684:	e7f3      	b.n	800866e <__assert_func+0x12>
 8008686:	bf00      	nop
 8008688:	20000820 	.word	0x20000820
 800868c:	0800a054 	.word	0x0800a054
 8008690:	0800a061 	.word	0x0800a061
 8008694:	0800a08f 	.word	0x0800a08f

08008698 <_free_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4605      	mov	r5, r0
 800869c:	2900      	cmp	r1, #0
 800869e:	d040      	beq.n	8008722 <_free_r+0x8a>
 80086a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a4:	1f0c      	subs	r4, r1, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	bfb8      	it	lt
 80086aa:	18e4      	addlt	r4, r4, r3
 80086ac:	f000 f8e4 	bl	8008878 <__malloc_lock>
 80086b0:	4a1c      	ldr	r2, [pc, #112]	; (8008724 <_free_r+0x8c>)
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	b933      	cbnz	r3, 80086c4 <_free_r+0x2c>
 80086b6:	6063      	str	r3, [r4, #4]
 80086b8:	6014      	str	r4, [r2, #0]
 80086ba:	4628      	mov	r0, r5
 80086bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086c0:	f000 b8e0 	b.w	8008884 <__malloc_unlock>
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d908      	bls.n	80086da <_free_r+0x42>
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	1821      	adds	r1, r4, r0
 80086cc:	428b      	cmp	r3, r1
 80086ce:	bf01      	itttt	eq
 80086d0:	6819      	ldreq	r1, [r3, #0]
 80086d2:	685b      	ldreq	r3, [r3, #4]
 80086d4:	1809      	addeq	r1, r1, r0
 80086d6:	6021      	streq	r1, [r4, #0]
 80086d8:	e7ed      	b.n	80086b6 <_free_r+0x1e>
 80086da:	461a      	mov	r2, r3
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	b10b      	cbz	r3, 80086e4 <_free_r+0x4c>
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	d9fa      	bls.n	80086da <_free_r+0x42>
 80086e4:	6811      	ldr	r1, [r2, #0]
 80086e6:	1850      	adds	r0, r2, r1
 80086e8:	42a0      	cmp	r0, r4
 80086ea:	d10b      	bne.n	8008704 <_free_r+0x6c>
 80086ec:	6820      	ldr	r0, [r4, #0]
 80086ee:	4401      	add	r1, r0
 80086f0:	1850      	adds	r0, r2, r1
 80086f2:	4283      	cmp	r3, r0
 80086f4:	6011      	str	r1, [r2, #0]
 80086f6:	d1e0      	bne.n	80086ba <_free_r+0x22>
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	4408      	add	r0, r1
 80086fe:	6010      	str	r0, [r2, #0]
 8008700:	6053      	str	r3, [r2, #4]
 8008702:	e7da      	b.n	80086ba <_free_r+0x22>
 8008704:	d902      	bls.n	800870c <_free_r+0x74>
 8008706:	230c      	movs	r3, #12
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	e7d6      	b.n	80086ba <_free_r+0x22>
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	1821      	adds	r1, r4, r0
 8008710:	428b      	cmp	r3, r1
 8008712:	bf01      	itttt	eq
 8008714:	6819      	ldreq	r1, [r3, #0]
 8008716:	685b      	ldreq	r3, [r3, #4]
 8008718:	1809      	addeq	r1, r1, r0
 800871a:	6021      	streq	r1, [r4, #0]
 800871c:	6063      	str	r3, [r4, #4]
 800871e:	6054      	str	r4, [r2, #4]
 8008720:	e7cb      	b.n	80086ba <_free_r+0x22>
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20002da4 	.word	0x20002da4

08008728 <malloc>:
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <malloc+0xc>)
 800872a:	4601      	mov	r1, r0
 800872c:	6818      	ldr	r0, [r3, #0]
 800872e:	f000 b823 	b.w	8008778 <_malloc_r>
 8008732:	bf00      	nop
 8008734:	20000820 	.word	0x20000820

08008738 <sbrk_aligned>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	4e0e      	ldr	r6, [pc, #56]	; (8008774 <sbrk_aligned+0x3c>)
 800873c:	460c      	mov	r4, r1
 800873e:	6831      	ldr	r1, [r6, #0]
 8008740:	4605      	mov	r5, r0
 8008742:	b911      	cbnz	r1, 800874a <sbrk_aligned+0x12>
 8008744:	f000 f960 	bl	8008a08 <_sbrk_r>
 8008748:	6030      	str	r0, [r6, #0]
 800874a:	4621      	mov	r1, r4
 800874c:	4628      	mov	r0, r5
 800874e:	f000 f95b 	bl	8008a08 <_sbrk_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d00a      	beq.n	800876c <sbrk_aligned+0x34>
 8008756:	1cc4      	adds	r4, r0, #3
 8008758:	f024 0403 	bic.w	r4, r4, #3
 800875c:	42a0      	cmp	r0, r4
 800875e:	d007      	beq.n	8008770 <sbrk_aligned+0x38>
 8008760:	1a21      	subs	r1, r4, r0
 8008762:	4628      	mov	r0, r5
 8008764:	f000 f950 	bl	8008a08 <_sbrk_r>
 8008768:	3001      	adds	r0, #1
 800876a:	d101      	bne.n	8008770 <sbrk_aligned+0x38>
 800876c:	f04f 34ff 	mov.w	r4, #4294967295
 8008770:	4620      	mov	r0, r4
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	20002da8 	.word	0x20002da8

08008778 <_malloc_r>:
 8008778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800877c:	1ccd      	adds	r5, r1, #3
 800877e:	f025 0503 	bic.w	r5, r5, #3
 8008782:	3508      	adds	r5, #8
 8008784:	2d0c      	cmp	r5, #12
 8008786:	bf38      	it	cc
 8008788:	250c      	movcc	r5, #12
 800878a:	2d00      	cmp	r5, #0
 800878c:	4607      	mov	r7, r0
 800878e:	db01      	blt.n	8008794 <_malloc_r+0x1c>
 8008790:	42a9      	cmp	r1, r5
 8008792:	d905      	bls.n	80087a0 <_malloc_r+0x28>
 8008794:	230c      	movs	r3, #12
 8008796:	2600      	movs	r6, #0
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	4630      	mov	r0, r6
 800879c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008874 <_malloc_r+0xfc>
 80087a4:	f000 f868 	bl	8008878 <__malloc_lock>
 80087a8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ac:	461c      	mov	r4, r3
 80087ae:	bb5c      	cbnz	r4, 8008808 <_malloc_r+0x90>
 80087b0:	4629      	mov	r1, r5
 80087b2:	4638      	mov	r0, r7
 80087b4:	f7ff ffc0 	bl	8008738 <sbrk_aligned>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	4604      	mov	r4, r0
 80087bc:	d155      	bne.n	800886a <_malloc_r+0xf2>
 80087be:	f8d8 4000 	ldr.w	r4, [r8]
 80087c2:	4626      	mov	r6, r4
 80087c4:	2e00      	cmp	r6, #0
 80087c6:	d145      	bne.n	8008854 <_malloc_r+0xdc>
 80087c8:	2c00      	cmp	r4, #0
 80087ca:	d048      	beq.n	800885e <_malloc_r+0xe6>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	4631      	mov	r1, r6
 80087d0:	4638      	mov	r0, r7
 80087d2:	eb04 0903 	add.w	r9, r4, r3
 80087d6:	f000 f917 	bl	8008a08 <_sbrk_r>
 80087da:	4581      	cmp	r9, r0
 80087dc:	d13f      	bne.n	800885e <_malloc_r+0xe6>
 80087de:	6821      	ldr	r1, [r4, #0]
 80087e0:	4638      	mov	r0, r7
 80087e2:	1a6d      	subs	r5, r5, r1
 80087e4:	4629      	mov	r1, r5
 80087e6:	f7ff ffa7 	bl	8008738 <sbrk_aligned>
 80087ea:	3001      	adds	r0, #1
 80087ec:	d037      	beq.n	800885e <_malloc_r+0xe6>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	442b      	add	r3, r5
 80087f2:	6023      	str	r3, [r4, #0]
 80087f4:	f8d8 3000 	ldr.w	r3, [r8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d038      	beq.n	800886e <_malloc_r+0xf6>
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	42a2      	cmp	r2, r4
 8008800:	d12b      	bne.n	800885a <_malloc_r+0xe2>
 8008802:	2200      	movs	r2, #0
 8008804:	605a      	str	r2, [r3, #4]
 8008806:	e00f      	b.n	8008828 <_malloc_r+0xb0>
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	1b52      	subs	r2, r2, r5
 800880c:	d41f      	bmi.n	800884e <_malloc_r+0xd6>
 800880e:	2a0b      	cmp	r2, #11
 8008810:	d917      	bls.n	8008842 <_malloc_r+0xca>
 8008812:	1961      	adds	r1, r4, r5
 8008814:	42a3      	cmp	r3, r4
 8008816:	6025      	str	r5, [r4, #0]
 8008818:	bf18      	it	ne
 800881a:	6059      	strne	r1, [r3, #4]
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	bf08      	it	eq
 8008820:	f8c8 1000 	streq.w	r1, [r8]
 8008824:	5162      	str	r2, [r4, r5]
 8008826:	604b      	str	r3, [r1, #4]
 8008828:	4638      	mov	r0, r7
 800882a:	f104 060b 	add.w	r6, r4, #11
 800882e:	f000 f829 	bl	8008884 <__malloc_unlock>
 8008832:	f026 0607 	bic.w	r6, r6, #7
 8008836:	1d23      	adds	r3, r4, #4
 8008838:	1af2      	subs	r2, r6, r3
 800883a:	d0ae      	beq.n	800879a <_malloc_r+0x22>
 800883c:	1b9b      	subs	r3, r3, r6
 800883e:	50a3      	str	r3, [r4, r2]
 8008840:	e7ab      	b.n	800879a <_malloc_r+0x22>
 8008842:	42a3      	cmp	r3, r4
 8008844:	6862      	ldr	r2, [r4, #4]
 8008846:	d1dd      	bne.n	8008804 <_malloc_r+0x8c>
 8008848:	f8c8 2000 	str.w	r2, [r8]
 800884c:	e7ec      	b.n	8008828 <_malloc_r+0xb0>
 800884e:	4623      	mov	r3, r4
 8008850:	6864      	ldr	r4, [r4, #4]
 8008852:	e7ac      	b.n	80087ae <_malloc_r+0x36>
 8008854:	4634      	mov	r4, r6
 8008856:	6876      	ldr	r6, [r6, #4]
 8008858:	e7b4      	b.n	80087c4 <_malloc_r+0x4c>
 800885a:	4613      	mov	r3, r2
 800885c:	e7cc      	b.n	80087f8 <_malloc_r+0x80>
 800885e:	230c      	movs	r3, #12
 8008860:	4638      	mov	r0, r7
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	f000 f80e 	bl	8008884 <__malloc_unlock>
 8008868:	e797      	b.n	800879a <_malloc_r+0x22>
 800886a:	6025      	str	r5, [r4, #0]
 800886c:	e7dc      	b.n	8008828 <_malloc_r+0xb0>
 800886e:	605b      	str	r3, [r3, #4]
 8008870:	deff      	udf	#255	; 0xff
 8008872:	bf00      	nop
 8008874:	20002da4 	.word	0x20002da4

08008878 <__malloc_lock>:
 8008878:	4801      	ldr	r0, [pc, #4]	; (8008880 <__malloc_lock+0x8>)
 800887a:	f7ff bed6 	b.w	800862a <__retarget_lock_acquire_recursive>
 800887e:	bf00      	nop
 8008880:	20002da0 	.word	0x20002da0

08008884 <__malloc_unlock>:
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <__malloc_unlock+0x8>)
 8008886:	f7ff bed1 	b.w	800862c <__retarget_lock_release_recursive>
 800888a:	bf00      	nop
 800888c:	20002da0 	.word	0x20002da0

08008890 <__sflush_r>:
 8008890:	898a      	ldrh	r2, [r1, #12]
 8008892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008894:	4605      	mov	r5, r0
 8008896:	0710      	lsls	r0, r2, #28
 8008898:	460c      	mov	r4, r1
 800889a:	d457      	bmi.n	800894c <__sflush_r+0xbc>
 800889c:	684b      	ldr	r3, [r1, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dc04      	bgt.n	80088ac <__sflush_r+0x1c>
 80088a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dc01      	bgt.n	80088ac <__sflush_r+0x1c>
 80088a8:	2000      	movs	r0, #0
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	d0fa      	beq.n	80088a8 <__sflush_r+0x18>
 80088b2:	2300      	movs	r3, #0
 80088b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088b8:	682f      	ldr	r7, [r5, #0]
 80088ba:	6a21      	ldr	r1, [r4, #32]
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	d032      	beq.n	8008926 <__sflush_r+0x96>
 80088c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	075a      	lsls	r2, r3, #29
 80088c6:	d505      	bpl.n	80088d4 <__sflush_r+0x44>
 80088c8:	6863      	ldr	r3, [r4, #4]
 80088ca:	1ac0      	subs	r0, r0, r3
 80088cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088ce:	b10b      	cbz	r3, 80088d4 <__sflush_r+0x44>
 80088d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088d2:	1ac0      	subs	r0, r0, r3
 80088d4:	2300      	movs	r3, #0
 80088d6:	4602      	mov	r2, r0
 80088d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088da:	4628      	mov	r0, r5
 80088dc:	6a21      	ldr	r1, [r4, #32]
 80088de:	47b0      	blx	r6
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	89a3      	ldrh	r3, [r4, #12]
 80088e4:	d106      	bne.n	80088f4 <__sflush_r+0x64>
 80088e6:	6829      	ldr	r1, [r5, #0]
 80088e8:	291d      	cmp	r1, #29
 80088ea:	d82b      	bhi.n	8008944 <__sflush_r+0xb4>
 80088ec:	4a28      	ldr	r2, [pc, #160]	; (8008990 <__sflush_r+0x100>)
 80088ee:	410a      	asrs	r2, r1
 80088f0:	07d6      	lsls	r6, r2, #31
 80088f2:	d427      	bmi.n	8008944 <__sflush_r+0xb4>
 80088f4:	2200      	movs	r2, #0
 80088f6:	6062      	str	r2, [r4, #4]
 80088f8:	6922      	ldr	r2, [r4, #16]
 80088fa:	04d9      	lsls	r1, r3, #19
 80088fc:	6022      	str	r2, [r4, #0]
 80088fe:	d504      	bpl.n	800890a <__sflush_r+0x7a>
 8008900:	1c42      	adds	r2, r0, #1
 8008902:	d101      	bne.n	8008908 <__sflush_r+0x78>
 8008904:	682b      	ldr	r3, [r5, #0]
 8008906:	b903      	cbnz	r3, 800890a <__sflush_r+0x7a>
 8008908:	6560      	str	r0, [r4, #84]	; 0x54
 800890a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800890c:	602f      	str	r7, [r5, #0]
 800890e:	2900      	cmp	r1, #0
 8008910:	d0ca      	beq.n	80088a8 <__sflush_r+0x18>
 8008912:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008916:	4299      	cmp	r1, r3
 8008918:	d002      	beq.n	8008920 <__sflush_r+0x90>
 800891a:	4628      	mov	r0, r5
 800891c:	f7ff febc 	bl	8008698 <_free_r>
 8008920:	2000      	movs	r0, #0
 8008922:	6360      	str	r0, [r4, #52]	; 0x34
 8008924:	e7c1      	b.n	80088aa <__sflush_r+0x1a>
 8008926:	2301      	movs	r3, #1
 8008928:	4628      	mov	r0, r5
 800892a:	47b0      	blx	r6
 800892c:	1c41      	adds	r1, r0, #1
 800892e:	d1c8      	bne.n	80088c2 <__sflush_r+0x32>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0c5      	beq.n	80088c2 <__sflush_r+0x32>
 8008936:	2b1d      	cmp	r3, #29
 8008938:	d001      	beq.n	800893e <__sflush_r+0xae>
 800893a:	2b16      	cmp	r3, #22
 800893c:	d101      	bne.n	8008942 <__sflush_r+0xb2>
 800893e:	602f      	str	r7, [r5, #0]
 8008940:	e7b2      	b.n	80088a8 <__sflush_r+0x18>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	e7ae      	b.n	80088aa <__sflush_r+0x1a>
 800894c:	690f      	ldr	r7, [r1, #16]
 800894e:	2f00      	cmp	r7, #0
 8008950:	d0aa      	beq.n	80088a8 <__sflush_r+0x18>
 8008952:	0793      	lsls	r3, r2, #30
 8008954:	bf18      	it	ne
 8008956:	2300      	movne	r3, #0
 8008958:	680e      	ldr	r6, [r1, #0]
 800895a:	bf08      	it	eq
 800895c:	694b      	ldreq	r3, [r1, #20]
 800895e:	1bf6      	subs	r6, r6, r7
 8008960:	600f      	str	r7, [r1, #0]
 8008962:	608b      	str	r3, [r1, #8]
 8008964:	2e00      	cmp	r6, #0
 8008966:	dd9f      	ble.n	80088a8 <__sflush_r+0x18>
 8008968:	4633      	mov	r3, r6
 800896a:	463a      	mov	r2, r7
 800896c:	4628      	mov	r0, r5
 800896e:	6a21      	ldr	r1, [r4, #32]
 8008970:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008974:	47e0      	blx	ip
 8008976:	2800      	cmp	r0, #0
 8008978:	dc06      	bgt.n	8008988 <__sflush_r+0xf8>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	e790      	b.n	80088aa <__sflush_r+0x1a>
 8008988:	4407      	add	r7, r0
 800898a:	1a36      	subs	r6, r6, r0
 800898c:	e7ea      	b.n	8008964 <__sflush_r+0xd4>
 800898e:	bf00      	nop
 8008990:	dfbffffe 	.word	0xdfbffffe

08008994 <_fflush_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	690b      	ldr	r3, [r1, #16]
 8008998:	4605      	mov	r5, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b913      	cbnz	r3, 80089a4 <_fflush_r+0x10>
 800899e:	2500      	movs	r5, #0
 80089a0:	4628      	mov	r0, r5
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	b118      	cbz	r0, 80089ae <_fflush_r+0x1a>
 80089a6:	6a03      	ldr	r3, [r0, #32]
 80089a8:	b90b      	cbnz	r3, 80089ae <_fflush_r+0x1a>
 80089aa:	f7ff fd4b 	bl	8008444 <__sinit>
 80089ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f3      	beq.n	800899e <_fflush_r+0xa>
 80089b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089b8:	07d0      	lsls	r0, r2, #31
 80089ba:	d404      	bmi.n	80089c6 <_fflush_r+0x32>
 80089bc:	0599      	lsls	r1, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_fflush_r+0x32>
 80089c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c2:	f7ff fe32 	bl	800862a <__retarget_lock_acquire_recursive>
 80089c6:	4628      	mov	r0, r5
 80089c8:	4621      	mov	r1, r4
 80089ca:	f7ff ff61 	bl	8008890 <__sflush_r>
 80089ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d0:	4605      	mov	r5, r0
 80089d2:	07da      	lsls	r2, r3, #31
 80089d4:	d4e4      	bmi.n	80089a0 <_fflush_r+0xc>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	059b      	lsls	r3, r3, #22
 80089da:	d4e1      	bmi.n	80089a0 <_fflush_r+0xc>
 80089dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089de:	f7ff fe25 	bl	800862c <__retarget_lock_release_recursive>
 80089e2:	e7dd      	b.n	80089a0 <_fflush_r+0xc>

080089e4 <fiprintf>:
 80089e4:	b40e      	push	{r1, r2, r3}
 80089e6:	b503      	push	{r0, r1, lr}
 80089e8:	4601      	mov	r1, r0
 80089ea:	ab03      	add	r3, sp, #12
 80089ec:	4805      	ldr	r0, [pc, #20]	; (8008a04 <fiprintf+0x20>)
 80089ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f2:	6800      	ldr	r0, [r0, #0]
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	f000 f845 	bl	8008a84 <_vfiprintf_r>
 80089fa:	b002      	add	sp, #8
 80089fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a00:	b003      	add	sp, #12
 8008a02:	4770      	bx	lr
 8008a04:	20000820 	.word	0x20000820

08008a08 <_sbrk_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4d05      	ldr	r5, [pc, #20]	; (8008a24 <_sbrk_r+0x1c>)
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7fa f9c6 	bl	8002da4 <_sbrk>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_sbrk_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_sbrk_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20002d9c 	.word	0x20002d9c

08008a28 <abort>:
 8008a28:	2006      	movs	r0, #6
 8008a2a:	b508      	push	{r3, lr}
 8008a2c:	f000 fb96 	bl	800915c <raise>
 8008a30:	2001      	movs	r0, #1
 8008a32:	f7fa f987 	bl	8002d44 <_exit>

08008a36 <__sfputc_r>:
 8008a36:	6893      	ldr	r3, [r2, #8]
 8008a38:	b410      	push	{r4}
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	6093      	str	r3, [r2, #8]
 8008a40:	da07      	bge.n	8008a52 <__sfputc_r+0x1c>
 8008a42:	6994      	ldr	r4, [r2, #24]
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	db01      	blt.n	8008a4c <__sfputc_r+0x16>
 8008a48:	290a      	cmp	r1, #10
 8008a4a:	d102      	bne.n	8008a52 <__sfputc_r+0x1c>
 8008a4c:	bc10      	pop	{r4}
 8008a4e:	f000 bac7 	b.w	8008fe0 <__swbuf_r>
 8008a52:	6813      	ldr	r3, [r2, #0]
 8008a54:	1c58      	adds	r0, r3, #1
 8008a56:	6010      	str	r0, [r2, #0]
 8008a58:	7019      	strb	r1, [r3, #0]
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	bc10      	pop	{r4}
 8008a5e:	4770      	bx	lr

08008a60 <__sfputs_r>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	4606      	mov	r6, r0
 8008a64:	460f      	mov	r7, r1
 8008a66:	4614      	mov	r4, r2
 8008a68:	18d5      	adds	r5, r2, r3
 8008a6a:	42ac      	cmp	r4, r5
 8008a6c:	d101      	bne.n	8008a72 <__sfputs_r+0x12>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	e007      	b.n	8008a82 <__sfputs_r+0x22>
 8008a72:	463a      	mov	r2, r7
 8008a74:	4630      	mov	r0, r6
 8008a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7a:	f7ff ffdc 	bl	8008a36 <__sfputc_r>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	d1f3      	bne.n	8008a6a <__sfputs_r+0xa>
 8008a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a84 <_vfiprintf_r>:
 8008a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	460d      	mov	r5, r1
 8008a8a:	4614      	mov	r4, r2
 8008a8c:	4698      	mov	r8, r3
 8008a8e:	4606      	mov	r6, r0
 8008a90:	b09d      	sub	sp, #116	; 0x74
 8008a92:	b118      	cbz	r0, 8008a9c <_vfiprintf_r+0x18>
 8008a94:	6a03      	ldr	r3, [r0, #32]
 8008a96:	b90b      	cbnz	r3, 8008a9c <_vfiprintf_r+0x18>
 8008a98:	f7ff fcd4 	bl	8008444 <__sinit>
 8008a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a9e:	07d9      	lsls	r1, r3, #31
 8008aa0:	d405      	bmi.n	8008aae <_vfiprintf_r+0x2a>
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	059a      	lsls	r2, r3, #22
 8008aa6:	d402      	bmi.n	8008aae <_vfiprintf_r+0x2a>
 8008aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aaa:	f7ff fdbe 	bl	800862a <__retarget_lock_acquire_recursive>
 8008aae:	89ab      	ldrh	r3, [r5, #12]
 8008ab0:	071b      	lsls	r3, r3, #28
 8008ab2:	d501      	bpl.n	8008ab8 <_vfiprintf_r+0x34>
 8008ab4:	692b      	ldr	r3, [r5, #16]
 8008ab6:	b99b      	cbnz	r3, 8008ae0 <_vfiprintf_r+0x5c>
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4630      	mov	r0, r6
 8008abc:	f000 face 	bl	800905c <__swsetup_r>
 8008ac0:	b170      	cbz	r0, 8008ae0 <_vfiprintf_r+0x5c>
 8008ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac4:	07dc      	lsls	r4, r3, #31
 8008ac6:	d504      	bpl.n	8008ad2 <_vfiprintf_r+0x4e>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	b01d      	add	sp, #116	; 0x74
 8008ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	0598      	lsls	r0, r3, #22
 8008ad6:	d4f7      	bmi.n	8008ac8 <_vfiprintf_r+0x44>
 8008ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ada:	f7ff fda7 	bl	800862c <__retarget_lock_release_recursive>
 8008ade:	e7f3      	b.n	8008ac8 <_vfiprintf_r+0x44>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae4:	2320      	movs	r3, #32
 8008ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aea:	2330      	movs	r3, #48	; 0x30
 8008aec:	f04f 0901 	mov.w	r9, #1
 8008af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008af4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008ca4 <_vfiprintf_r+0x220>
 8008af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008afc:	4623      	mov	r3, r4
 8008afe:	469a      	mov	sl, r3
 8008b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b04:	b10a      	cbz	r2, 8008b0a <_vfiprintf_r+0x86>
 8008b06:	2a25      	cmp	r2, #37	; 0x25
 8008b08:	d1f9      	bne.n	8008afe <_vfiprintf_r+0x7a>
 8008b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b0e:	d00b      	beq.n	8008b28 <_vfiprintf_r+0xa4>
 8008b10:	465b      	mov	r3, fp
 8008b12:	4622      	mov	r2, r4
 8008b14:	4629      	mov	r1, r5
 8008b16:	4630      	mov	r0, r6
 8008b18:	f7ff ffa2 	bl	8008a60 <__sfputs_r>
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	f000 80a9 	beq.w	8008c74 <_vfiprintf_r+0x1f0>
 8008b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b24:	445a      	add	r2, fp
 8008b26:	9209      	str	r2, [sp, #36]	; 0x24
 8008b28:	f89a 3000 	ldrb.w	r3, [sl]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 80a1 	beq.w	8008c74 <_vfiprintf_r+0x1f0>
 8008b32:	2300      	movs	r3, #0
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295
 8008b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b3c:	f10a 0a01 	add.w	sl, sl, #1
 8008b40:	9304      	str	r3, [sp, #16]
 8008b42:	9307      	str	r3, [sp, #28]
 8008b44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b48:	931a      	str	r3, [sp, #104]	; 0x68
 8008b4a:	4654      	mov	r4, sl
 8008b4c:	2205      	movs	r2, #5
 8008b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b52:	4854      	ldr	r0, [pc, #336]	; (8008ca4 <_vfiprintf_r+0x220>)
 8008b54:	f000 fb1e 	bl	8009194 <memchr>
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	b9d8      	cbnz	r0, 8008b94 <_vfiprintf_r+0x110>
 8008b5c:	06d1      	lsls	r1, r2, #27
 8008b5e:	bf44      	itt	mi
 8008b60:	2320      	movmi	r3, #32
 8008b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b66:	0713      	lsls	r3, r2, #28
 8008b68:	bf44      	itt	mi
 8008b6a:	232b      	movmi	r3, #43	; 0x2b
 8008b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b2a      	cmp	r3, #42	; 0x2a
 8008b76:	d015      	beq.n	8008ba4 <_vfiprintf_r+0x120>
 8008b78:	4654      	mov	r4, sl
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f04f 0c0a 	mov.w	ip, #10
 8008b80:	9a07      	ldr	r2, [sp, #28]
 8008b82:	4621      	mov	r1, r4
 8008b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b88:	3b30      	subs	r3, #48	; 0x30
 8008b8a:	2b09      	cmp	r3, #9
 8008b8c:	d94d      	bls.n	8008c2a <_vfiprintf_r+0x1a6>
 8008b8e:	b1b0      	cbz	r0, 8008bbe <_vfiprintf_r+0x13a>
 8008b90:	9207      	str	r2, [sp, #28]
 8008b92:	e014      	b.n	8008bbe <_vfiprintf_r+0x13a>
 8008b94:	eba0 0308 	sub.w	r3, r0, r8
 8008b98:	fa09 f303 	lsl.w	r3, r9, r3
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	46a2      	mov	sl, r4
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	e7d2      	b.n	8008b4a <_vfiprintf_r+0xc6>
 8008ba4:	9b03      	ldr	r3, [sp, #12]
 8008ba6:	1d19      	adds	r1, r3, #4
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	9103      	str	r1, [sp, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfbb      	ittet	lt
 8008bb0:	425b      	neglt	r3, r3
 8008bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb6:	9307      	strge	r3, [sp, #28]
 8008bb8:	9307      	strlt	r3, [sp, #28]
 8008bba:	bfb8      	it	lt
 8008bbc:	9204      	strlt	r2, [sp, #16]
 8008bbe:	7823      	ldrb	r3, [r4, #0]
 8008bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc2:	d10c      	bne.n	8008bde <_vfiprintf_r+0x15a>
 8008bc4:	7863      	ldrb	r3, [r4, #1]
 8008bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc8:	d134      	bne.n	8008c34 <_vfiprintf_r+0x1b0>
 8008bca:	9b03      	ldr	r3, [sp, #12]
 8008bcc:	3402      	adds	r4, #2
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	9203      	str	r2, [sp, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bfb8      	it	lt
 8008bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ca8 <_vfiprintf_r+0x224>
 8008be2:	2203      	movs	r2, #3
 8008be4:	4650      	mov	r0, sl
 8008be6:	7821      	ldrb	r1, [r4, #0]
 8008be8:	f000 fad4 	bl	8009194 <memchr>
 8008bec:	b138      	cbz	r0, 8008bfe <_vfiprintf_r+0x17a>
 8008bee:	2240      	movs	r2, #64	; 0x40
 8008bf0:	9b04      	ldr	r3, [sp, #16]
 8008bf2:	eba0 000a 	sub.w	r0, r0, sl
 8008bf6:	4082      	lsls	r2, r0
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	3401      	adds	r4, #1
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c02:	2206      	movs	r2, #6
 8008c04:	4829      	ldr	r0, [pc, #164]	; (8008cac <_vfiprintf_r+0x228>)
 8008c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c0a:	f000 fac3 	bl	8009194 <memchr>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d03f      	beq.n	8008c92 <_vfiprintf_r+0x20e>
 8008c12:	4b27      	ldr	r3, [pc, #156]	; (8008cb0 <_vfiprintf_r+0x22c>)
 8008c14:	bb1b      	cbnz	r3, 8008c5e <_vfiprintf_r+0x1da>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	3307      	adds	r3, #7
 8008c1a:	f023 0307 	bic.w	r3, r3, #7
 8008c1e:	3308      	adds	r3, #8
 8008c20:	9303      	str	r3, [sp, #12]
 8008c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c24:	443b      	add	r3, r7
 8008c26:	9309      	str	r3, [sp, #36]	; 0x24
 8008c28:	e768      	b.n	8008afc <_vfiprintf_r+0x78>
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c32:	e7a6      	b.n	8008b82 <_vfiprintf_r+0xfe>
 8008c34:	2300      	movs	r3, #0
 8008c36:	f04f 0c0a 	mov.w	ip, #10
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	3401      	adds	r4, #1
 8008c3e:	9305      	str	r3, [sp, #20]
 8008c40:	4620      	mov	r0, r4
 8008c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c46:	3a30      	subs	r2, #48	; 0x30
 8008c48:	2a09      	cmp	r2, #9
 8008c4a:	d903      	bls.n	8008c54 <_vfiprintf_r+0x1d0>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0c6      	beq.n	8008bde <_vfiprintf_r+0x15a>
 8008c50:	9105      	str	r1, [sp, #20]
 8008c52:	e7c4      	b.n	8008bde <_vfiprintf_r+0x15a>
 8008c54:	4604      	mov	r4, r0
 8008c56:	2301      	movs	r3, #1
 8008c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c5c:	e7f0      	b.n	8008c40 <_vfiprintf_r+0x1bc>
 8008c5e:	ab03      	add	r3, sp, #12
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	462a      	mov	r2, r5
 8008c64:	4630      	mov	r0, r6
 8008c66:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <_vfiprintf_r+0x230>)
 8008c68:	a904      	add	r1, sp, #16
 8008c6a:	f3af 8000 	nop.w
 8008c6e:	4607      	mov	r7, r0
 8008c70:	1c78      	adds	r0, r7, #1
 8008c72:	d1d6      	bne.n	8008c22 <_vfiprintf_r+0x19e>
 8008c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c76:	07d9      	lsls	r1, r3, #31
 8008c78:	d405      	bmi.n	8008c86 <_vfiprintf_r+0x202>
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	059a      	lsls	r2, r3, #22
 8008c7e:	d402      	bmi.n	8008c86 <_vfiprintf_r+0x202>
 8008c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c82:	f7ff fcd3 	bl	800862c <__retarget_lock_release_recursive>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	065b      	lsls	r3, r3, #25
 8008c8a:	f53f af1d 	bmi.w	8008ac8 <_vfiprintf_r+0x44>
 8008c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c90:	e71c      	b.n	8008acc <_vfiprintf_r+0x48>
 8008c92:	ab03      	add	r3, sp, #12
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	462a      	mov	r2, r5
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <_vfiprintf_r+0x230>)
 8008c9c:	a904      	add	r1, sp, #16
 8008c9e:	f000 f87d 	bl	8008d9c <_printf_i>
 8008ca2:	e7e4      	b.n	8008c6e <_vfiprintf_r+0x1ea>
 8008ca4:	0800a090 	.word	0x0800a090
 8008ca8:	0800a096 	.word	0x0800a096
 8008cac:	0800a09a 	.word	0x0800a09a
 8008cb0:	00000000 	.word	0x00000000
 8008cb4:	08008a61 	.word	0x08008a61

08008cb8 <_printf_common>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	4616      	mov	r6, r2
 8008cbe:	4699      	mov	r9, r3
 8008cc0:	688a      	ldr	r2, [r1, #8]
 8008cc2:	690b      	ldr	r3, [r1, #16]
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	bfb8      	it	lt
 8008cca:	4613      	movlt	r3, r2
 8008ccc:	6033      	str	r3, [r6, #0]
 8008cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cd8:	b10a      	cbz	r2, 8008cde <_printf_common+0x26>
 8008cda:	3301      	adds	r3, #1
 8008cdc:	6033      	str	r3, [r6, #0]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	0699      	lsls	r1, r3, #26
 8008ce2:	bf42      	ittt	mi
 8008ce4:	6833      	ldrmi	r3, [r6, #0]
 8008ce6:	3302      	addmi	r3, #2
 8008ce8:	6033      	strmi	r3, [r6, #0]
 8008cea:	6825      	ldr	r5, [r4, #0]
 8008cec:	f015 0506 	ands.w	r5, r5, #6
 8008cf0:	d106      	bne.n	8008d00 <_printf_common+0x48>
 8008cf2:	f104 0a19 	add.w	sl, r4, #25
 8008cf6:	68e3      	ldr	r3, [r4, #12]
 8008cf8:	6832      	ldr	r2, [r6, #0]
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	42ab      	cmp	r3, r5
 8008cfe:	dc2b      	bgt.n	8008d58 <_printf_common+0xa0>
 8008d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d04:	1e13      	subs	r3, r2, #0
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	bf18      	it	ne
 8008d0a:	2301      	movne	r3, #1
 8008d0c:	0692      	lsls	r2, r2, #26
 8008d0e:	d430      	bmi.n	8008d72 <_printf_common+0xba>
 8008d10:	4649      	mov	r1, r9
 8008d12:	4638      	mov	r0, r7
 8008d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d023      	beq.n	8008d66 <_printf_common+0xae>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	6922      	ldr	r2, [r4, #16]
 8008d22:	f003 0306 	and.w	r3, r3, #6
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	bf14      	ite	ne
 8008d2a:	2500      	movne	r5, #0
 8008d2c:	6833      	ldreq	r3, [r6, #0]
 8008d2e:	f04f 0600 	mov.w	r6, #0
 8008d32:	bf08      	it	eq
 8008d34:	68e5      	ldreq	r5, [r4, #12]
 8008d36:	f104 041a 	add.w	r4, r4, #26
 8008d3a:	bf08      	it	eq
 8008d3c:	1aed      	subeq	r5, r5, r3
 8008d3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008d42:	bf08      	it	eq
 8008d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	bfc4      	itt	gt
 8008d4c:	1a9b      	subgt	r3, r3, r2
 8008d4e:	18ed      	addgt	r5, r5, r3
 8008d50:	42b5      	cmp	r5, r6
 8008d52:	d11a      	bne.n	8008d8a <_printf_common+0xd2>
 8008d54:	2000      	movs	r0, #0
 8008d56:	e008      	b.n	8008d6a <_printf_common+0xb2>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	4638      	mov	r0, r7
 8008d60:	47c0      	blx	r8
 8008d62:	3001      	adds	r0, #1
 8008d64:	d103      	bne.n	8008d6e <_printf_common+0xb6>
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6e:	3501      	adds	r5, #1
 8008d70:	e7c1      	b.n	8008cf6 <_printf_common+0x3e>
 8008d72:	2030      	movs	r0, #48	; 0x30
 8008d74:	18e1      	adds	r1, r4, r3
 8008d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d80:	4422      	add	r2, r4
 8008d82:	3302      	adds	r3, #2
 8008d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d88:	e7c2      	b.n	8008d10 <_printf_common+0x58>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4649      	mov	r1, r9
 8008d90:	4638      	mov	r0, r7
 8008d92:	47c0      	blx	r8
 8008d94:	3001      	adds	r0, #1
 8008d96:	d0e6      	beq.n	8008d66 <_printf_common+0xae>
 8008d98:	3601      	adds	r6, #1
 8008d9a:	e7d9      	b.n	8008d50 <_printf_common+0x98>

08008d9c <_printf_i>:
 8008d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008da0:	7e0f      	ldrb	r7, [r1, #24]
 8008da2:	4691      	mov	r9, r2
 8008da4:	2f78      	cmp	r7, #120	; 0x78
 8008da6:	4680      	mov	r8, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	469a      	mov	sl, r3
 8008dac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008db2:	d807      	bhi.n	8008dc4 <_printf_i+0x28>
 8008db4:	2f62      	cmp	r7, #98	; 0x62
 8008db6:	d80a      	bhi.n	8008dce <_printf_i+0x32>
 8008db8:	2f00      	cmp	r7, #0
 8008dba:	f000 80d5 	beq.w	8008f68 <_printf_i+0x1cc>
 8008dbe:	2f58      	cmp	r7, #88	; 0x58
 8008dc0:	f000 80c1 	beq.w	8008f46 <_printf_i+0x1aa>
 8008dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dcc:	e03a      	b.n	8008e44 <_printf_i+0xa8>
 8008dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dd2:	2b15      	cmp	r3, #21
 8008dd4:	d8f6      	bhi.n	8008dc4 <_printf_i+0x28>
 8008dd6:	a101      	add	r1, pc, #4	; (adr r1, 8008ddc <_printf_i+0x40>)
 8008dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ddc:	08008e35 	.word	0x08008e35
 8008de0:	08008e49 	.word	0x08008e49
 8008de4:	08008dc5 	.word	0x08008dc5
 8008de8:	08008dc5 	.word	0x08008dc5
 8008dec:	08008dc5 	.word	0x08008dc5
 8008df0:	08008dc5 	.word	0x08008dc5
 8008df4:	08008e49 	.word	0x08008e49
 8008df8:	08008dc5 	.word	0x08008dc5
 8008dfc:	08008dc5 	.word	0x08008dc5
 8008e00:	08008dc5 	.word	0x08008dc5
 8008e04:	08008dc5 	.word	0x08008dc5
 8008e08:	08008f4f 	.word	0x08008f4f
 8008e0c:	08008e75 	.word	0x08008e75
 8008e10:	08008f09 	.word	0x08008f09
 8008e14:	08008dc5 	.word	0x08008dc5
 8008e18:	08008dc5 	.word	0x08008dc5
 8008e1c:	08008f71 	.word	0x08008f71
 8008e20:	08008dc5 	.word	0x08008dc5
 8008e24:	08008e75 	.word	0x08008e75
 8008e28:	08008dc5 	.word	0x08008dc5
 8008e2c:	08008dc5 	.word	0x08008dc5
 8008e30:	08008f11 	.word	0x08008f11
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	1d1a      	adds	r2, r3, #4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	602a      	str	r2, [r5, #0]
 8008e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e44:	2301      	movs	r3, #1
 8008e46:	e0a0      	b.n	8008f8a <_printf_i+0x1ee>
 8008e48:	6820      	ldr	r0, [r4, #0]
 8008e4a:	682b      	ldr	r3, [r5, #0]
 8008e4c:	0607      	lsls	r7, r0, #24
 8008e4e:	f103 0104 	add.w	r1, r3, #4
 8008e52:	6029      	str	r1, [r5, #0]
 8008e54:	d501      	bpl.n	8008e5a <_printf_i+0xbe>
 8008e56:	681e      	ldr	r6, [r3, #0]
 8008e58:	e003      	b.n	8008e62 <_printf_i+0xc6>
 8008e5a:	0646      	lsls	r6, r0, #25
 8008e5c:	d5fb      	bpl.n	8008e56 <_printf_i+0xba>
 8008e5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e62:	2e00      	cmp	r6, #0
 8008e64:	da03      	bge.n	8008e6e <_printf_i+0xd2>
 8008e66:	232d      	movs	r3, #45	; 0x2d
 8008e68:	4276      	negs	r6, r6
 8008e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e6e:	230a      	movs	r3, #10
 8008e70:	4859      	ldr	r0, [pc, #356]	; (8008fd8 <_printf_i+0x23c>)
 8008e72:	e012      	b.n	8008e9a <_printf_i+0xfe>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	6820      	ldr	r0, [r4, #0]
 8008e78:	1d19      	adds	r1, r3, #4
 8008e7a:	6029      	str	r1, [r5, #0]
 8008e7c:	0605      	lsls	r5, r0, #24
 8008e7e:	d501      	bpl.n	8008e84 <_printf_i+0xe8>
 8008e80:	681e      	ldr	r6, [r3, #0]
 8008e82:	e002      	b.n	8008e8a <_printf_i+0xee>
 8008e84:	0641      	lsls	r1, r0, #25
 8008e86:	d5fb      	bpl.n	8008e80 <_printf_i+0xe4>
 8008e88:	881e      	ldrh	r6, [r3, #0]
 8008e8a:	2f6f      	cmp	r7, #111	; 0x6f
 8008e8c:	bf0c      	ite	eq
 8008e8e:	2308      	moveq	r3, #8
 8008e90:	230a      	movne	r3, #10
 8008e92:	4851      	ldr	r0, [pc, #324]	; (8008fd8 <_printf_i+0x23c>)
 8008e94:	2100      	movs	r1, #0
 8008e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e9a:	6865      	ldr	r5, [r4, #4]
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	bfa8      	it	ge
 8008ea0:	6821      	ldrge	r1, [r4, #0]
 8008ea2:	60a5      	str	r5, [r4, #8]
 8008ea4:	bfa4      	itt	ge
 8008ea6:	f021 0104 	bicge.w	r1, r1, #4
 8008eaa:	6021      	strge	r1, [r4, #0]
 8008eac:	b90e      	cbnz	r6, 8008eb2 <_printf_i+0x116>
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	d04b      	beq.n	8008f4a <_printf_i+0x1ae>
 8008eb2:	4615      	mov	r5, r2
 8008eb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eb8:	fb03 6711 	mls	r7, r3, r1, r6
 8008ebc:	5dc7      	ldrb	r7, [r0, r7]
 8008ebe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ec2:	4637      	mov	r7, r6
 8008ec4:	42bb      	cmp	r3, r7
 8008ec6:	460e      	mov	r6, r1
 8008ec8:	d9f4      	bls.n	8008eb4 <_printf_i+0x118>
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	d10b      	bne.n	8008ee6 <_printf_i+0x14a>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	07de      	lsls	r6, r3, #31
 8008ed2:	d508      	bpl.n	8008ee6 <_printf_i+0x14a>
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	6861      	ldr	r1, [r4, #4]
 8008ed8:	4299      	cmp	r1, r3
 8008eda:	bfde      	ittt	le
 8008edc:	2330      	movle	r3, #48	; 0x30
 8008ede:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ee2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ee6:	1b52      	subs	r2, r2, r5
 8008ee8:	6122      	str	r2, [r4, #16]
 8008eea:	464b      	mov	r3, r9
 8008eec:	4621      	mov	r1, r4
 8008eee:	4640      	mov	r0, r8
 8008ef0:	f8cd a000 	str.w	sl, [sp]
 8008ef4:	aa03      	add	r2, sp, #12
 8008ef6:	f7ff fedf 	bl	8008cb8 <_printf_common>
 8008efa:	3001      	adds	r0, #1
 8008efc:	d14a      	bne.n	8008f94 <_printf_i+0x1f8>
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295
 8008f02:	b004      	add	sp, #16
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	6823      	ldr	r3, [r4, #0]
 8008f0a:	f043 0320 	orr.w	r3, r3, #32
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	2778      	movs	r7, #120	; 0x78
 8008f12:	4832      	ldr	r0, [pc, #200]	; (8008fdc <_printf_i+0x240>)
 8008f14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	6829      	ldr	r1, [r5, #0]
 8008f1c:	061f      	lsls	r7, r3, #24
 8008f1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f22:	d402      	bmi.n	8008f2a <_printf_i+0x18e>
 8008f24:	065f      	lsls	r7, r3, #25
 8008f26:	bf48      	it	mi
 8008f28:	b2b6      	uxthmi	r6, r6
 8008f2a:	07df      	lsls	r7, r3, #31
 8008f2c:	bf48      	it	mi
 8008f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f32:	6029      	str	r1, [r5, #0]
 8008f34:	bf48      	it	mi
 8008f36:	6023      	strmi	r3, [r4, #0]
 8008f38:	b91e      	cbnz	r6, 8008f42 <_printf_i+0x1a6>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	f023 0320 	bic.w	r3, r3, #32
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	2310      	movs	r3, #16
 8008f44:	e7a6      	b.n	8008e94 <_printf_i+0xf8>
 8008f46:	4824      	ldr	r0, [pc, #144]	; (8008fd8 <_printf_i+0x23c>)
 8008f48:	e7e4      	b.n	8008f14 <_printf_i+0x178>
 8008f4a:	4615      	mov	r5, r2
 8008f4c:	e7bd      	b.n	8008eca <_printf_i+0x12e>
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	6826      	ldr	r6, [r4, #0]
 8008f52:	1d18      	adds	r0, r3, #4
 8008f54:	6961      	ldr	r1, [r4, #20]
 8008f56:	6028      	str	r0, [r5, #0]
 8008f58:	0635      	lsls	r5, r6, #24
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	d501      	bpl.n	8008f62 <_printf_i+0x1c6>
 8008f5e:	6019      	str	r1, [r3, #0]
 8008f60:	e002      	b.n	8008f68 <_printf_i+0x1cc>
 8008f62:	0670      	lsls	r0, r6, #25
 8008f64:	d5fb      	bpl.n	8008f5e <_printf_i+0x1c2>
 8008f66:	8019      	strh	r1, [r3, #0]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	4615      	mov	r5, r2
 8008f6c:	6123      	str	r3, [r4, #16]
 8008f6e:	e7bc      	b.n	8008eea <_printf_i+0x14e>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	2100      	movs	r1, #0
 8008f74:	1d1a      	adds	r2, r3, #4
 8008f76:	602a      	str	r2, [r5, #0]
 8008f78:	681d      	ldr	r5, [r3, #0]
 8008f7a:	6862      	ldr	r2, [r4, #4]
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 f909 	bl	8009194 <memchr>
 8008f82:	b108      	cbz	r0, 8008f88 <_printf_i+0x1ec>
 8008f84:	1b40      	subs	r0, r0, r5
 8008f86:	6060      	str	r0, [r4, #4]
 8008f88:	6863      	ldr	r3, [r4, #4]
 8008f8a:	6123      	str	r3, [r4, #16]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f92:	e7aa      	b.n	8008eea <_printf_i+0x14e>
 8008f94:	462a      	mov	r2, r5
 8008f96:	4649      	mov	r1, r9
 8008f98:	4640      	mov	r0, r8
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	47d0      	blx	sl
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d0ad      	beq.n	8008efe <_printf_i+0x162>
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	079b      	lsls	r3, r3, #30
 8008fa6:	d413      	bmi.n	8008fd0 <_printf_i+0x234>
 8008fa8:	68e0      	ldr	r0, [r4, #12]
 8008faa:	9b03      	ldr	r3, [sp, #12]
 8008fac:	4298      	cmp	r0, r3
 8008fae:	bfb8      	it	lt
 8008fb0:	4618      	movlt	r0, r3
 8008fb2:	e7a6      	b.n	8008f02 <_printf_i+0x166>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	4632      	mov	r2, r6
 8008fb8:	4649      	mov	r1, r9
 8008fba:	4640      	mov	r0, r8
 8008fbc:	47d0      	blx	sl
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d09d      	beq.n	8008efe <_printf_i+0x162>
 8008fc2:	3501      	adds	r5, #1
 8008fc4:	68e3      	ldr	r3, [r4, #12]
 8008fc6:	9903      	ldr	r1, [sp, #12]
 8008fc8:	1a5b      	subs	r3, r3, r1
 8008fca:	42ab      	cmp	r3, r5
 8008fcc:	dcf2      	bgt.n	8008fb4 <_printf_i+0x218>
 8008fce:	e7eb      	b.n	8008fa8 <_printf_i+0x20c>
 8008fd0:	2500      	movs	r5, #0
 8008fd2:	f104 0619 	add.w	r6, r4, #25
 8008fd6:	e7f5      	b.n	8008fc4 <_printf_i+0x228>
 8008fd8:	0800a0a1 	.word	0x0800a0a1
 8008fdc:	0800a0b2 	.word	0x0800a0b2

08008fe0 <__swbuf_r>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	460e      	mov	r6, r1
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	b118      	cbz	r0, 8008ff2 <__swbuf_r+0x12>
 8008fea:	6a03      	ldr	r3, [r0, #32]
 8008fec:	b90b      	cbnz	r3, 8008ff2 <__swbuf_r+0x12>
 8008fee:	f7ff fa29 	bl	8008444 <__sinit>
 8008ff2:	69a3      	ldr	r3, [r4, #24]
 8008ff4:	60a3      	str	r3, [r4, #8]
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	071a      	lsls	r2, r3, #28
 8008ffa:	d525      	bpl.n	8009048 <__swbuf_r+0x68>
 8008ffc:	6923      	ldr	r3, [r4, #16]
 8008ffe:	b31b      	cbz	r3, 8009048 <__swbuf_r+0x68>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	6922      	ldr	r2, [r4, #16]
 8009004:	b2f6      	uxtb	r6, r6
 8009006:	1a98      	subs	r0, r3, r2
 8009008:	6963      	ldr	r3, [r4, #20]
 800900a:	4637      	mov	r7, r6
 800900c:	4283      	cmp	r3, r0
 800900e:	dc04      	bgt.n	800901a <__swbuf_r+0x3a>
 8009010:	4621      	mov	r1, r4
 8009012:	4628      	mov	r0, r5
 8009014:	f7ff fcbe 	bl	8008994 <_fflush_r>
 8009018:	b9e0      	cbnz	r0, 8009054 <__swbuf_r+0x74>
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	3b01      	subs	r3, #1
 800901e:	60a3      	str	r3, [r4, #8]
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	6022      	str	r2, [r4, #0]
 8009026:	701e      	strb	r6, [r3, #0]
 8009028:	6962      	ldr	r2, [r4, #20]
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	429a      	cmp	r2, r3
 800902e:	d004      	beq.n	800903a <__swbuf_r+0x5a>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	07db      	lsls	r3, r3, #31
 8009034:	d506      	bpl.n	8009044 <__swbuf_r+0x64>
 8009036:	2e0a      	cmp	r6, #10
 8009038:	d104      	bne.n	8009044 <__swbuf_r+0x64>
 800903a:	4621      	mov	r1, r4
 800903c:	4628      	mov	r0, r5
 800903e:	f7ff fca9 	bl	8008994 <_fflush_r>
 8009042:	b938      	cbnz	r0, 8009054 <__swbuf_r+0x74>
 8009044:	4638      	mov	r0, r7
 8009046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009048:	4621      	mov	r1, r4
 800904a:	4628      	mov	r0, r5
 800904c:	f000 f806 	bl	800905c <__swsetup_r>
 8009050:	2800      	cmp	r0, #0
 8009052:	d0d5      	beq.n	8009000 <__swbuf_r+0x20>
 8009054:	f04f 37ff 	mov.w	r7, #4294967295
 8009058:	e7f4      	b.n	8009044 <__swbuf_r+0x64>
	...

0800905c <__swsetup_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4b2a      	ldr	r3, [pc, #168]	; (8009108 <__swsetup_r+0xac>)
 8009060:	4605      	mov	r5, r0
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	460c      	mov	r4, r1
 8009066:	b118      	cbz	r0, 8009070 <__swsetup_r+0x14>
 8009068:	6a03      	ldr	r3, [r0, #32]
 800906a:	b90b      	cbnz	r3, 8009070 <__swsetup_r+0x14>
 800906c:	f7ff f9ea 	bl	8008444 <__sinit>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009076:	0718      	lsls	r0, r3, #28
 8009078:	d422      	bmi.n	80090c0 <__swsetup_r+0x64>
 800907a:	06d9      	lsls	r1, r3, #27
 800907c:	d407      	bmi.n	800908e <__swsetup_r+0x32>
 800907e:	2309      	movs	r3, #9
 8009080:	602b      	str	r3, [r5, #0]
 8009082:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009086:	f04f 30ff 	mov.w	r0, #4294967295
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	e034      	b.n	80090f8 <__swsetup_r+0x9c>
 800908e:	0758      	lsls	r0, r3, #29
 8009090:	d512      	bpl.n	80090b8 <__swsetup_r+0x5c>
 8009092:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009094:	b141      	cbz	r1, 80090a8 <__swsetup_r+0x4c>
 8009096:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800909a:	4299      	cmp	r1, r3
 800909c:	d002      	beq.n	80090a4 <__swsetup_r+0x48>
 800909e:	4628      	mov	r0, r5
 80090a0:	f7ff fafa 	bl	8008698 <_free_r>
 80090a4:	2300      	movs	r3, #0
 80090a6:	6363      	str	r3, [r4, #52]	; 0x34
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	2300      	movs	r3, #0
 80090b2:	6063      	str	r3, [r4, #4]
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	f043 0308 	orr.w	r3, r3, #8
 80090be:	81a3      	strh	r3, [r4, #12]
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	b94b      	cbnz	r3, 80090d8 <__swsetup_r+0x7c>
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ce:	d003      	beq.n	80090d8 <__swsetup_r+0x7c>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 f891 	bl	80091fa <__smakebuf_r>
 80090d8:	89a0      	ldrh	r0, [r4, #12]
 80090da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090de:	f010 0301 	ands.w	r3, r0, #1
 80090e2:	d00a      	beq.n	80090fa <__swsetup_r+0x9e>
 80090e4:	2300      	movs	r3, #0
 80090e6:	60a3      	str	r3, [r4, #8]
 80090e8:	6963      	ldr	r3, [r4, #20]
 80090ea:	425b      	negs	r3, r3
 80090ec:	61a3      	str	r3, [r4, #24]
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	b943      	cbnz	r3, 8009104 <__swsetup_r+0xa8>
 80090f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090f6:	d1c4      	bne.n	8009082 <__swsetup_r+0x26>
 80090f8:	bd38      	pop	{r3, r4, r5, pc}
 80090fa:	0781      	lsls	r1, r0, #30
 80090fc:	bf58      	it	pl
 80090fe:	6963      	ldrpl	r3, [r4, #20]
 8009100:	60a3      	str	r3, [r4, #8]
 8009102:	e7f4      	b.n	80090ee <__swsetup_r+0x92>
 8009104:	2000      	movs	r0, #0
 8009106:	e7f7      	b.n	80090f8 <__swsetup_r+0x9c>
 8009108:	20000820 	.word	0x20000820

0800910c <_raise_r>:
 800910c:	291f      	cmp	r1, #31
 800910e:	b538      	push	{r3, r4, r5, lr}
 8009110:	4604      	mov	r4, r0
 8009112:	460d      	mov	r5, r1
 8009114:	d904      	bls.n	8009120 <_raise_r+0x14>
 8009116:	2316      	movs	r3, #22
 8009118:	6003      	str	r3, [r0, #0]
 800911a:	f04f 30ff 	mov.w	r0, #4294967295
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009122:	b112      	cbz	r2, 800912a <_raise_r+0x1e>
 8009124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009128:	b94b      	cbnz	r3, 800913e <_raise_r+0x32>
 800912a:	4620      	mov	r0, r4
 800912c:	f000 f830 	bl	8009190 <_getpid_r>
 8009130:	462a      	mov	r2, r5
 8009132:	4601      	mov	r1, r0
 8009134:	4620      	mov	r0, r4
 8009136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800913a:	f000 b817 	b.w	800916c <_kill_r>
 800913e:	2b01      	cmp	r3, #1
 8009140:	d00a      	beq.n	8009158 <_raise_r+0x4c>
 8009142:	1c59      	adds	r1, r3, #1
 8009144:	d103      	bne.n	800914e <_raise_r+0x42>
 8009146:	2316      	movs	r3, #22
 8009148:	6003      	str	r3, [r0, #0]
 800914a:	2001      	movs	r0, #1
 800914c:	e7e7      	b.n	800911e <_raise_r+0x12>
 800914e:	2400      	movs	r4, #0
 8009150:	4628      	mov	r0, r5
 8009152:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009156:	4798      	blx	r3
 8009158:	2000      	movs	r0, #0
 800915a:	e7e0      	b.n	800911e <_raise_r+0x12>

0800915c <raise>:
 800915c:	4b02      	ldr	r3, [pc, #8]	; (8009168 <raise+0xc>)
 800915e:	4601      	mov	r1, r0
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	f7ff bfd3 	b.w	800910c <_raise_r>
 8009166:	bf00      	nop
 8009168:	20000820 	.word	0x20000820

0800916c <_kill_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	2300      	movs	r3, #0
 8009170:	4d06      	ldr	r5, [pc, #24]	; (800918c <_kill_r+0x20>)
 8009172:	4604      	mov	r4, r0
 8009174:	4608      	mov	r0, r1
 8009176:	4611      	mov	r1, r2
 8009178:	602b      	str	r3, [r5, #0]
 800917a:	f7f9 fddb 	bl	8002d34 <_kill>
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	d102      	bne.n	8009188 <_kill_r+0x1c>
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	b103      	cbz	r3, 8009188 <_kill_r+0x1c>
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	bd38      	pop	{r3, r4, r5, pc}
 800918a:	bf00      	nop
 800918c:	20002d9c 	.word	0x20002d9c

08009190 <_getpid_r>:
 8009190:	f7f9 bdce 	b.w	8002d30 <_getpid>

08009194 <memchr>:
 8009194:	4603      	mov	r3, r0
 8009196:	b510      	push	{r4, lr}
 8009198:	b2c9      	uxtb	r1, r1
 800919a:	4402      	add	r2, r0
 800919c:	4293      	cmp	r3, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	d101      	bne.n	80091a6 <memchr+0x12>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e003      	b.n	80091ae <memchr+0x1a>
 80091a6:	7804      	ldrb	r4, [r0, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	428c      	cmp	r4, r1
 80091ac:	d1f6      	bne.n	800919c <memchr+0x8>
 80091ae:	bd10      	pop	{r4, pc}

080091b0 <__swhatbuf_r>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	460c      	mov	r4, r1
 80091b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b8:	4615      	mov	r5, r2
 80091ba:	2900      	cmp	r1, #0
 80091bc:	461e      	mov	r6, r3
 80091be:	b096      	sub	sp, #88	; 0x58
 80091c0:	da0c      	bge.n	80091dc <__swhatbuf_r+0x2c>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	2100      	movs	r1, #0
 80091c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091ca:	bf0c      	ite	eq
 80091cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091d0:	2340      	movne	r3, #64	; 0x40
 80091d2:	2000      	movs	r0, #0
 80091d4:	6031      	str	r1, [r6, #0]
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	b016      	add	sp, #88	; 0x58
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	466a      	mov	r2, sp
 80091de:	f000 f849 	bl	8009274 <_fstat_r>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	dbed      	blt.n	80091c2 <__swhatbuf_r+0x12>
 80091e6:	9901      	ldr	r1, [sp, #4]
 80091e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091f0:	4259      	negs	r1, r3
 80091f2:	4159      	adcs	r1, r3
 80091f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091f8:	e7eb      	b.n	80091d2 <__swhatbuf_r+0x22>

080091fa <__smakebuf_r>:
 80091fa:	898b      	ldrh	r3, [r1, #12]
 80091fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091fe:	079d      	lsls	r5, r3, #30
 8009200:	4606      	mov	r6, r0
 8009202:	460c      	mov	r4, r1
 8009204:	d507      	bpl.n	8009216 <__smakebuf_r+0x1c>
 8009206:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800920a:	6023      	str	r3, [r4, #0]
 800920c:	6123      	str	r3, [r4, #16]
 800920e:	2301      	movs	r3, #1
 8009210:	6163      	str	r3, [r4, #20]
 8009212:	b002      	add	sp, #8
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	466a      	mov	r2, sp
 8009218:	ab01      	add	r3, sp, #4
 800921a:	f7ff ffc9 	bl	80091b0 <__swhatbuf_r>
 800921e:	9900      	ldr	r1, [sp, #0]
 8009220:	4605      	mov	r5, r0
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff faa8 	bl	8008778 <_malloc_r>
 8009228:	b948      	cbnz	r0, 800923e <__smakebuf_r+0x44>
 800922a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800922e:	059a      	lsls	r2, r3, #22
 8009230:	d4ef      	bmi.n	8009212 <__smakebuf_r+0x18>
 8009232:	f023 0303 	bic.w	r3, r3, #3
 8009236:	f043 0302 	orr.w	r3, r3, #2
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	e7e3      	b.n	8009206 <__smakebuf_r+0xc>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	6020      	str	r0, [r4, #0]
 8009242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009246:	81a3      	strh	r3, [r4, #12]
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	6120      	str	r0, [r4, #16]
 800924c:	6163      	str	r3, [r4, #20]
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	b15b      	cbz	r3, 800926a <__smakebuf_r+0x70>
 8009252:	4630      	mov	r0, r6
 8009254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009258:	f000 f81e 	bl	8009298 <_isatty_r>
 800925c:	b128      	cbz	r0, 800926a <__smakebuf_r+0x70>
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	f023 0303 	bic.w	r3, r3, #3
 8009264:	f043 0301 	orr.w	r3, r3, #1
 8009268:	81a3      	strh	r3, [r4, #12]
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	431d      	orrs	r5, r3
 800926e:	81a5      	strh	r5, [r4, #12]
 8009270:	e7cf      	b.n	8009212 <__smakebuf_r+0x18>
	...

08009274 <_fstat_r>:
 8009274:	b538      	push	{r3, r4, r5, lr}
 8009276:	2300      	movs	r3, #0
 8009278:	4d06      	ldr	r5, [pc, #24]	; (8009294 <_fstat_r+0x20>)
 800927a:	4604      	mov	r4, r0
 800927c:	4608      	mov	r0, r1
 800927e:	4611      	mov	r1, r2
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	f7f9 fd86 	bl	8002d92 <_fstat>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d102      	bne.n	8009290 <_fstat_r+0x1c>
 800928a:	682b      	ldr	r3, [r5, #0]
 800928c:	b103      	cbz	r3, 8009290 <_fstat_r+0x1c>
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	bd38      	pop	{r3, r4, r5, pc}
 8009292:	bf00      	nop
 8009294:	20002d9c 	.word	0x20002d9c

08009298 <_isatty_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	2300      	movs	r3, #0
 800929c:	4d05      	ldr	r5, [pc, #20]	; (80092b4 <_isatty_r+0x1c>)
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	f7f9 fd7a 	bl	8002d9c <_isatty>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d102      	bne.n	80092b2 <_isatty_r+0x1a>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	b103      	cbz	r3, 80092b2 <_isatty_r+0x1a>
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	20002d9c 	.word	0x20002d9c

080092b8 <_init>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	bf00      	nop
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr

080092c4 <_fini>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	bf00      	nop
 80092c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ca:	bc08      	pop	{r3}
 80092cc:	469e      	mov	lr, r3
 80092ce:	4770      	bx	lr
