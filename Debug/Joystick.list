
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08008b78  08008b78  00018b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009940  08009940  0002041c  2**0
                  CONTENTS
  4 .ARM          00000000  08009940  08009940  0002041c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009940  08009940  0002041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009940  08009940  00019940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009944  08009944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000041c  20000000  08009948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002544  2000041c  08009d64  0002041c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002960  08009d64  00022960  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002041c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020445  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027f67  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052f5  00000000  00000000  000483ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012f68  00000000  00000000  0004d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001880  00000000  00000000  00060650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016bc  00000000  00000000  00061ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c055  00000000  00000000  0006358c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000291ee  00000000  00000000  0007f5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e658  00000000  00000000  000a87cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005298  00000000  00000000  00146e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000041c 	.word	0x2000041c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b60 	.word	0x08008b60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000420 	.word	0x20000420
 800014c:	08008b60 	.word	0x08008b60

08000150 <getPlayer>:


player_t *getPlayer(){

	return &Player;
}
 8000150:	4800      	ldr	r0, [pc, #0]	; (8000154 <getPlayer+0x4>)
 8000152:	4770      	bx	lr
 8000154:	200004ac 	.word	0x200004ac

08000158 <getDisparo>:
	return &movimiento_Aliens;
}

disparo_t *getDisparo(){
	return &Disparo;
}
 8000158:	4800      	ldr	r0, [pc, #0]	; (800015c <getDisparo+0x4>)
 800015a:	4770      	bx	lr
 800015c:	200004a4 	.word	0x200004a4

08000160 <getDisparoAliens>:

disparo_t *getDisparoAliens(){
	return &Disparo_Aliens;
}
 8000160:	4800      	ldr	r0, [pc, #0]	; (8000164 <getDisparoAliens+0x4>)
 8000162:	4770      	bx	lr
 8000164:	200004a8 	.word	0x200004a8

08000168 <getDificultad>:

dificultad_t *getDificultad(){

	return &dificultad;
}
 8000168:	4800      	ldr	r0, [pc, #0]	; (800016c <getDificultad+0x4>)
 800016a:	4770      	bx	lr
 800016c:	200004b4 	.word	0x200004b4

08000170 <actualizarPantalla>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void actualizarPantalla(){
 8000170:	b508      	push	{r3, lr}

    SSD1306_UpdateScreen(); // update screen
 8000172:	f001 feef 	bl	8001f54 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000176:	2000      	movs	r0, #0
 8000178:	f001 fbb4 	bl	80018e4 <SSD1306_Fill>
}
 800017c:	bd08      	pop	{r3, pc}
	...

08000180 <playerInit>:


void playerInit(){

	getPlayer()->posicion_X = 64;
 8000180:	4b02      	ldr	r3, [pc, #8]	; (800018c <playerInit+0xc>)
 8000182:	2240      	movs	r2, #64	; 0x40
 8000184:	705a      	strb	r2, [r3, #1]
	getPlayer()->vivo = true;
 8000186:	2201      	movs	r2, #1
 8000188:	709a      	strb	r2, [r3, #2]
}
 800018a:	4770      	bx	lr
 800018c:	200004ac 	.word	0x200004ac

08000190 <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 8000190:	b500      	push	{lr}
 8000192:	b083      	sub	sp, #12
 8000194:	468c      	mov	ip, r1

	if(getPlayer()->vivo == true){
 8000196:	4b16      	ldr	r3, [pc, #88]	; (80001f0 <plotPlayer+0x60>)
 8000198:	789b      	ldrb	r3, [r3, #2]
 800019a:	2b01      	cmp	r3, #1
 800019c:	d11d      	bne.n	80001da <plotPlayer+0x4a>

		if(direccion == derecha){
 800019e:	2802      	cmp	r0, #2
 80001a0:	d00e      	beq.n	80001c0 <plotPlayer+0x30>
			else{
				player->posicion_X = player->posicion_X + 4;
			}

		}
		else if(direccion == izquierda){
 80001a2:	2803      	cmp	r0, #3
 80001a4:	d013      	beq.n	80001ce <plotPlayer+0x3e>
			else{
				player->posicion_X = player->posicion_X - 4;
			}
		}

		SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 80001a6:	2301      	movs	r3, #1
 80001a8:	9301      	str	r3, [sp, #4]
 80001aa:	2308      	movs	r3, #8
 80001ac:	9300      	str	r3, [sp, #0]
 80001ae:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <plotPlayer+0x64>)
 80001b0:	2138      	movs	r1, #56	; 0x38
 80001b2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80001b6:	f001 fbcd 	bl	8001954 <SSD1306_DrawBitmap>

		SSD1306_DrawBitmap(player->posicion_X, 56, nave_explotada, 8,8,1);
	}


}
 80001ba:	b003      	add	sp, #12
 80001bc:	f85d fb04 	ldr.w	pc, [sp], #4
			if(player->posicion_X >= 120){
 80001c0:	784b      	ldrb	r3, [r1, #1]
 80001c2:	2b77      	cmp	r3, #119	; 0x77
				player->posicion_X = 120;
 80001c4:	bf8c      	ite	hi
 80001c6:	2378      	movhi	r3, #120	; 0x78
				player->posicion_X = player->posicion_X + 4;
 80001c8:	3304      	addls	r3, #4
 80001ca:	704b      	strb	r3, [r1, #1]
 80001cc:	e7eb      	b.n	80001a6 <plotPlayer+0x16>
			if(player->posicion_X <= 0){
 80001ce:	784b      	ldrb	r3, [r1, #1]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d0e8      	beq.n	80001a6 <plotPlayer+0x16>
				player->posicion_X = player->posicion_X - 4;
 80001d4:	3b04      	subs	r3, #4
 80001d6:	704b      	strb	r3, [r1, #1]
 80001d8:	e7e5      	b.n	80001a6 <plotPlayer+0x16>
		SSD1306_DrawBitmap(player->posicion_X, 56, nave_explotada, 8,8,1);
 80001da:	2301      	movs	r3, #1
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	2308      	movs	r3, #8
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	4a05      	ldr	r2, [pc, #20]	; (80001f8 <plotPlayer+0x68>)
 80001e4:	2138      	movs	r1, #56	; 0x38
 80001e6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80001ea:	f001 fbb3 	bl	8001954 <SSD1306_DrawBitmap>
}
 80001ee:	e7e4      	b.n	80001ba <plotPlayer+0x2a>
 80001f0:	200004ac 	.word	0x200004ac
 80001f4:	08009348 	.word	0x08009348
 80001f8:	08009350 	.word	0x08009350

080001fc <InvaderInit>:



void InvaderInit(){
 80001fc:	b510      	push	{r4, lr}

	getMovAliens()->orientacion = mov_derecha;
 80001fe:	2100      	movs	r1, #0
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <InvaderInit+0x38>)
 8000202:	7019      	strb	r1, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000204:	4c0c      	ldr	r4, [pc, #48]	; (8000238 <InvaderInit+0x3c>)
void InvaderInit(){
 8000206:	f04f 0e0a 	mov.w	lr, #10
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
			getAlien(y, x)->vivo = true;
 800020a:	f04f 0c01 	mov.w	ip, #1
			getAlien(y, x)->conteo_explosion = 2;
 800020e:	2002      	movs	r0, #2
void InvaderInit(){
 8000210:	4622      	mov	r2, r4
 8000212:	4673      	mov	r3, lr
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 8000214:	7013      	strb	r3, [r2, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 8000216:	7051      	strb	r1, [r2, #1]
			getAlien(y, x)->vivo = true;
 8000218:	f882 c002 	strb.w	ip, [r2, #2]
			getAlien(y, x)->conteo_explosion = 2;
 800021c:	7110      	strb	r0, [r2, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800021e:	330d      	adds	r3, #13
 8000220:	b2db      	uxtb	r3, r3
 8000222:	3205      	adds	r2, #5
 8000224:	2b65      	cmp	r3, #101	; 0x65
 8000226:	d1f5      	bne.n	8000214 <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000228:	3423      	adds	r4, #35	; 0x23
 800022a:	310b      	adds	r1, #11
 800022c:	b2c9      	uxtb	r1, r1
 800022e:	2921      	cmp	r1, #33	; 0x21
 8000230:	d1ee      	bne.n	8000210 <InvaderInit+0x14>
		}
	}

}
 8000232:	bd10      	pop	{r4, pc}
 8000234:	200004b8 	.word	0x200004b8
 8000238:	20000438 	.word	0x20000438

0800023c <plotAliens>:

void plotAliens(){
 800023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000240:	b083      	sub	sp, #12


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 8000242:	4b6b      	ldr	r3, [pc, #428]	; (80003f0 <plotAliens+0x1b4>)
 8000244:	7859      	ldrb	r1, [r3, #1]
 8000246:	4b6b      	ldr	r3, [pc, #428]	; (80003f4 <plotAliens+0x1b8>)
 8000248:	781a      	ldrb	r2, [r3, #0]
 800024a:	fbb1 f3f2 	udiv	r3, r1, r2
 800024e:	fb02 1313 	mls	r3, r2, r3, r1
 8000252:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000256:	d13c      	bne.n	80002d2 <plotAliens+0x96>
		/*getMovAliens()->animacion = getMovAliens()->animacion + 1;
		if(getMovAliens()->animacion >= 8){
			getMovAliens()->animacion = 0;
		}*/

		getMovAliens()->animacion = !getMovAliens()->animacion;
 8000258:	4a65      	ldr	r2, [pc, #404]	; (80003f0 <plotAliens+0x1b4>)
 800025a:	78d3      	ldrb	r3, [r2, #3]
 800025c:	fab3 f383 	clz	r3, r3
 8000260:	095b      	lsrs	r3, r3, #5
 8000262:	70d3      	strb	r3, [r2, #3]

			switch(getMovAliens()->orientacion){
 8000264:	7813      	ldrb	r3, [r2, #0]
 8000266:	b18b      	cbz	r3, 800028c <plotAliens+0x50>
 8000268:	2b01      	cmp	r3, #1
 800026a:	d11e      	bne.n	80002aa <plotAliens+0x6e>
 800026c:	4c62      	ldr	r4, [pc, #392]	; (80003f8 <plotAliens+0x1bc>)
 800026e:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8000272:	348c      	adds	r4, #140	; 0x8c
					break;

				case mov_izquierda:

						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000274:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23

								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 2;
 8000278:	781a      	ldrb	r2, [r3, #0]
 800027a:	3a02      	subs	r2, #2
 800027c:	f803 2b05 	strb.w	r2, [r3], #5
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000280:	4283      	cmp	r3, r0
 8000282:	d1f9      	bne.n	8000278 <plotAliens+0x3c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000284:	3023      	adds	r0, #35	; 0x23
 8000286:	42a0      	cmp	r0, r4
 8000288:	d1f4      	bne.n	8000274 <plotAliens+0x38>
 800028a:	e00e      	b.n	80002aa <plotAliens+0x6e>
 800028c:	4c5a      	ldr	r4, [pc, #360]	; (80003f8 <plotAliens+0x1bc>)
 800028e:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8000292:	348c      	adds	r4, #140	; 0x8c
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000294:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 2;
 8000298:	781a      	ldrb	r2, [r3, #0]
 800029a:	3202      	adds	r2, #2
 800029c:	f803 2b05 	strb.w	r2, [r3], #5
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d1f9      	bne.n	8000298 <plotAliens+0x5c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002a4:	3023      	adds	r0, #35	; 0x23
 80002a6:	42a0      	cmp	r0, r4
 80002a8:	d1f4      	bne.n	8000294 <plotAliens+0x58>
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 80002aa:	4b53      	ldr	r3, [pc, #332]	; (80003f8 <plotAliens+0x1bc>)
 80002ac:	7f9b      	ldrb	r3, [r3, #30]
 80002ae:	2b72      	cmp	r3, #114	; 0x72
 80002b0:	d902      	bls.n	80002b8 <plotAliens+0x7c>

				getMovAliens()->orientacion = mov_izquierda;
 80002b2:	4b4f      	ldr	r3, [pc, #316]	; (80003f0 <plotAliens+0x1b4>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 80002b8:	4b4f      	ldr	r3, [pc, #316]	; (80003f8 <plotAliens+0x1bc>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	b92b      	cbnz	r3, 80002ca <plotAliens+0x8e>
				getMovAliens()->orientacion = mov_derecha;
 80002be:	4b4c      	ldr	r3, [pc, #304]	; (80003f0 <plotAliens+0x1b4>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 80002c4:	789a      	ldrb	r2, [r3, #2]
 80002c6:	3201      	adds	r2, #1
 80002c8:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 80002ca:	4b49      	ldr	r3, [pc, #292]	; (80003f0 <plotAliens+0x1b4>)
 80002cc:	789b      	ldrb	r3, [r3, #2]
 80002ce:	2b0a      	cmp	r3, #10
 80002d0:	d009      	beq.n	80002e6 <plotAliens+0xaa>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 80002d2:	3101      	adds	r1, #1
 80002d4:	4b46      	ldr	r3, [pc, #280]	; (80003f0 <plotAliens+0x1b4>)
 80002d6:	7059      	strb	r1, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002d8:	f8df b11c 	ldr.w	fp, [pc, #284]	; 80003f8 <plotAliens+0x1bc>
	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 80002dc:	46d9      	mov	r9, fp
 80002de:	f04f 0800 	mov.w	r8, #0
					switch(y){

					case 0:
						if(getAlien(y,x)->vivo == true){

							if(getMovAliens()->animacion == true ){
 80002e2:	469a      	mov	sl, r3
 80002e4:	e07a      	b.n	80003dc <plotAliens+0x1a0>
						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 80002e6:	4b43      	ldr	r3, [pc, #268]	; (80003f4 <plotAliens+0x1b8>)
 80002e8:	785c      	ldrb	r4, [r3, #1]
 80002ea:	4d43      	ldr	r5, [pc, #268]	; (80003f8 <plotAliens+0x1bc>)
 80002ec:	f105 0023 	add.w	r0, r5, #35	; 0x23
 80002f0:	358c      	adds	r5, #140	; 0x8c
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002f2:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 80002f6:	785a      	ldrb	r2, [r3, #1]
 80002f8:	4422      	add	r2, r4
 80002fa:	705a      	strb	r2, [r3, #1]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002fc:	3305      	adds	r3, #5
 80002fe:	4283      	cmp	r3, r0
 8000300:	d1f9      	bne.n	80002f6 <plotAliens+0xba>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000302:	3023      	adds	r0, #35	; 0x23
 8000304:	42a8      	cmp	r0, r5
 8000306:	d1f4      	bne.n	80002f2 <plotAliens+0xb6>
 8000308:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <plotAliens+0x1b4>)
 800030a:	2200      	movs	r2, #0
 800030c:	709a      	strb	r2, [r3, #2]
 800030e:	e7e0      	b.n	80002d2 <plotAliens+0x96>
						if(getAlien(y,x)->vivo == true){
 8000310:	78a3      	ldrb	r3, [r4, #2]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d019      	beq.n	800034a <plotAliens+0x10e>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000316:	3405      	adds	r4, #5
 8000318:	3505      	adds	r5, #5
 800031a:	42a7      	cmp	r7, r4
 800031c:	d057      	beq.n	80003ce <plotAliens+0x192>
					switch(y){
 800031e:	2e00      	cmp	r6, #0
 8000320:	d0f6      	beq.n	8000310 <plotAliens+0xd4>
 8000322:	2e01      	cmp	r6, #1
 8000324:	d028      	beq.n	8000378 <plotAliens+0x13c>
								//getMovAliens()->animacion = true;
							}
						}
						break;
					default:
						if(getAlien(y,x)->vivo == true){
 8000326:	78ab      	ldrb	r3, [r5, #2]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d1f4      	bne.n	8000316 <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 800032c:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d042      	beq.n	80003ba <plotAliens+0x17e>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
							}
							else{
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx2,16,8,1);
 8000334:	2301      	movs	r3, #1
 8000336:	9301      	str	r3, [sp, #4]
 8000338:	2308      	movs	r3, #8
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2310      	movs	r3, #16
 800033e:	4a2f      	ldr	r2, [pc, #188]	; (80003fc <plotAliens+0x1c0>)
 8000340:	7869      	ldrb	r1, [r5, #1]
 8000342:	7828      	ldrb	r0, [r5, #0]
 8000344:	f001 fb06 	bl	8001954 <SSD1306_DrawBitmap>
 8000348:	e7e5      	b.n	8000316 <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 800034a:	f89a 3003 	ldrb.w	r3, [sl, #3]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d009      	beq.n	8000366 <plotAliens+0x12a>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderTopGfx2,8,8,1);
 8000352:	2301      	movs	r3, #1
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	2308      	movs	r3, #8
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	4a29      	ldr	r2, [pc, #164]	; (8000400 <plotAliens+0x1c4>)
 800035c:	7861      	ldrb	r1, [r4, #1]
 800035e:	7820      	ldrb	r0, [r4, #0]
 8000360:	f001 faf8 	bl	8001954 <SSD1306_DrawBitmap>
 8000364:	e7d7      	b.n	8000316 <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderTopGfx,8,8,1);
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	2308      	movs	r3, #8
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	4a25      	ldr	r2, [pc, #148]	; (8000404 <plotAliens+0x1c8>)
 800036e:	7861      	ldrb	r1, [r4, #1]
 8000370:	7820      	ldrb	r0, [r4, #0]
 8000372:	f001 faef 	bl	8001954 <SSD1306_DrawBitmap>
 8000376:	e7ce      	b.n	8000316 <plotAliens+0xda>
						if(getAlien(y,x)->vivo == true){
 8000378:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800037c:	2b01      	cmp	r3, #1
 800037e:	d1ca      	bne.n	8000316 <plotAliens+0xda>
							if(getMovAliens()->animacion == true ){
 8000380:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d00c      	beq.n	80003a2 <plotAliens+0x166>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx2,16,8,1);
 8000388:	2301      	movs	r3, #1
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2308      	movs	r3, #8
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2310      	movs	r3, #16
 8000392:	4a1d      	ldr	r2, [pc, #116]	; (8000408 <plotAliens+0x1cc>)
 8000394:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8000398:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800039c:	f001 fada 	bl	8001954 <SSD1306_DrawBitmap>
 80003a0:	e7b9      	b.n	8000316 <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80003a2:	9301      	str	r3, [sp, #4]
 80003a4:	2308      	movs	r3, #8
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2310      	movs	r3, #16
 80003aa:	4a18      	ldr	r2, [pc, #96]	; (800040c <plotAliens+0x1d0>)
 80003ac:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80003b0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 80003b4:	f001 face 	bl	8001954 <SSD1306_DrawBitmap>
 80003b8:	e7ad      	b.n	8000316 <plotAliens+0xda>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	2308      	movs	r3, #8
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2310      	movs	r3, #16
 80003c2:	4a13      	ldr	r2, [pc, #76]	; (8000410 <plotAliens+0x1d4>)
 80003c4:	7869      	ldrb	r1, [r5, #1]
 80003c6:	7828      	ldrb	r0, [r5, #0]
 80003c8:	f001 fac4 	bl	8001954 <SSD1306_DrawBitmap>
 80003cc:	e7a3      	b.n	8000316 <plotAliens+0xda>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003ce:	f108 0801 	add.w	r8, r8, #1
 80003d2:	f109 0923 	add.w	r9, r9, #35	; 0x23
 80003d6:	f1b8 0f03 	cmp.w	r8, #3
 80003da:	d006      	beq.n	80003ea <plotAliens+0x1ae>
 80003dc:	fa5f f688 	uxtb.w	r6, r8
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003e0:	f10b 0723 	add.w	r7, fp, #35	; 0x23
void plotAliens(){
 80003e4:	464d      	mov	r5, r9
 80003e6:	465c      	mov	r4, fp
 80003e8:	e799      	b.n	800031e <plotAliens+0xe2>
					}
			}

		}

}
 80003ea:	b003      	add	sp, #12
 80003ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003f0:	200004b8 	.word	0x200004b8
 80003f4:	200004b4 	.word	0x200004b4
 80003f8:	20000438 	.word	0x20000438
 80003fc:	080092f8 	.word	0x080092f8
 8000400:	08009330 	.word	0x08009330
 8000404:	08009328 	.word	0x08009328
 8000408:	08009318 	.word	0x08009318
 800040c:	08009308 	.word	0x08009308
 8000410:	080092e8 	.word	0x080092e8

08000414 <disparoInit>:


void disparoInit(){

	//Inicializacion del disparo del Player
	getDisparo()->posicion_x = 0;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <disparoInit+0x18>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800041a:	2132      	movs	r1, #50	; 0x32
 800041c:	7059      	strb	r1, [r3, #1]
	getDisparo()->disparo = false;
 800041e:	709a      	strb	r2, [r3, #2]
	getDisparo()->numero_disparos = 0;
 8000420:	70da      	strb	r2, [r3, #3]

	//Inicializacion del Disparo de los Aliens
	getDisparoAliens()->numero_disparos = 21;
 8000422:	4b03      	ldr	r3, [pc, #12]	; (8000430 <disparoInit+0x1c>)
 8000424:	2215      	movs	r2, #21
 8000426:	70da      	strb	r2, [r3, #3]
}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	200004a4 	.word	0x200004a4
 8000430:	200004a8 	.word	0x200004a8

08000434 <disparar>:


void disparar(){
 8000434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000438:	b083      	sub	sp, #12


			if(getDisparo()->numero_disparos == 1 && getPlayer()->vivo == true ){
 800043a:	4b47      	ldr	r3, [pc, #284]	; (8000558 <disparar+0x124>)
 800043c:	78db      	ldrb	r3, [r3, #3]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d00e      	beq.n	8000460 <disparar+0x2c>
				getDisparo()->disparo = true;
				getDisparo()->posicion_x = getPlayer()->posicion_X;
			}


			if(getDisparo()->disparo == true){
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <disparar+0x124>)
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d014      	beq.n	8000474 <disparar+0x40>
			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){

				uint8_t tamano_alien = TAMANO_ALIEN_TOP;

				switch(y){
 800044a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800055c <disparar+0x128>
 800044e:	f04f 0900 	mov.w	r9, #0
				uint8_t tamano_alien = TAMANO_ALIEN_TOP;
 8000452:	2708      	movs	r7, #8

				}

				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){

					if( (getDisparo()->posicion_x + 1 >= getAlien(y,x)->posicion_X) &  (getDisparo()->posicion_x + 1 <= (getAlien(y,x)->posicion_X + tamano_alien)) & ((getDisparo()->posicion_y) >= getAlien(y,x)->posicion_Y) & (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + tamano_alien)){
 8000454:	4e40      	ldr	r6, [pc, #256]	; (8000558 <disparar+0x124>)
									getDisparo()->numero_disparos = 0;


									//Conteo de la cantidad de aliens eliminados (esto para la funcion disparoAliens())
									//getDisparoAliens()->numero_disparos se interpretará como aliens eliminados.
									getDisparoAliens()->numero_disparos = getDisparoAliens()->numero_disparos - 1;
 8000456:	f8df b108 	ldr.w	fp, [pc, #264]	; 8000560 <disparar+0x12c>

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 800045a:	f04f 0a01 	mov.w	sl, #1
 800045e:	e074      	b.n	800054a <disparar+0x116>
			if(getDisparo()->numero_disparos == 1 && getPlayer()->vivo == true ){
 8000460:	4b40      	ldr	r3, [pc, #256]	; (8000564 <disparar+0x130>)
 8000462:	789b      	ldrb	r3, [r3, #2]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d1ec      	bne.n	8000442 <disparar+0xe>
				getDisparo()->disparo = true;
 8000468:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <disparar+0x124>)
 800046a:	2201      	movs	r2, #1
 800046c:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 800046e:	4a3d      	ldr	r2, [pc, #244]	; (8000564 <disparar+0x130>)
 8000470:	7852      	ldrb	r2, [r2, #1]
 8000472:	701a      	strb	r2, [r3, #0]
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 2, 1);
 8000474:	4c38      	ldr	r4, [pc, #224]	; (8000558 <disparar+0x124>)
 8000476:	7820      	ldrb	r0, [r4, #0]
 8000478:	3004      	adds	r0, #4
 800047a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800047e:	b289      	uxth	r1, r1
 8000480:	1c8b      	adds	r3, r1, #2
 8000482:	2201      	movs	r2, #1
 8000484:	9200      	str	r2, [sp, #0]
 8000486:	b29b      	uxth	r3, r3
 8000488:	4602      	mov	r2, r0
 800048a:	f001 fb14 	bl	8001ab6 <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800048e:	7863      	ldrb	r3, [r4, #1]
 8000490:	3b04      	subs	r3, #4
 8000492:	b25b      	sxtb	r3, r3
 8000494:	7063      	strb	r3, [r4, #1]
				if(getDisparo()->posicion_y <= 0){
 8000496:	2b00      	cmp	r3, #0
 8000498:	dcd7      	bgt.n	800044a <disparar+0x16>
					getDisparo()->disparo = false;
 800049a:	2200      	movs	r2, #0
 800049c:	70a2      	strb	r2, [r4, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800049e:	2132      	movs	r1, #50	; 0x32
 80004a0:	7061      	strb	r1, [r4, #1]
					getDisparo()->numero_disparos = 0;
 80004a2:	70e2      	strb	r2, [r4, #3]
 80004a4:	e7d1      	b.n	800044a <disparar+0x16>
				switch(y){
 80004a6:	270b      	movs	r7, #11
 80004a8:	e04d      	b.n	8000546 <disparar+0x112>
					if(getAlien(y,x)->explosion == true){
 80004aa:	78eb      	ldrb	r3, [r5, #3]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d02b      	beq.n	8000508 <disparar+0xd4>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80004b0:	3405      	adds	r4, #5
 80004b2:	4544      	cmp	r4, r8
 80004b4:	d038      	beq.n	8000528 <disparar+0xf4>
					if( (getDisparo()->posicion_x + 1 >= getAlien(y,x)->posicion_X) &  (getDisparo()->posicion_x + 1 <= (getAlien(y,x)->posicion_X + tamano_alien)) & ((getDisparo()->posicion_y) >= getAlien(y,x)->posicion_Y) & (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + tamano_alien)){
 80004b6:	7832      	ldrb	r2, [r6, #0]
 80004b8:	4625      	mov	r5, r4
 80004ba:	7820      	ldrb	r0, [r4, #0]
 80004bc:	f996 c001 	ldrsb.w	ip, [r6, #1]
 80004c0:	7861      	ldrb	r1, [r4, #1]
 80004c2:	1c53      	adds	r3, r2, #1
 80004c4:	4283      	cmp	r3, r0
 80004c6:	bfa8      	it	ge
 80004c8:	458c      	cmpge	ip, r1
 80004ca:	bfac      	ite	ge
 80004cc:	2301      	movge	r3, #1
 80004ce:	2300      	movlt	r3, #0
 80004d0:	eb00 0e07 	add.w	lr, r0, r7
 80004d4:	4572      	cmp	r2, lr
 80004d6:	bfac      	ite	ge
 80004d8:	2300      	movge	r3, #0
 80004da:	f003 0301 	andlt.w	r3, r3, #1
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0e3      	beq.n	80004aa <disparar+0x76>
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	459c      	cmp	ip, r3
 80004e6:	dce0      	bgt.n	80004aa <disparar+0x76>
								if(getAlien(y,x)->vivo == true){
 80004e8:	78a3      	ldrb	r3, [r4, #2]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d1dd      	bne.n	80004aa <disparar+0x76>
									getAlien(y,x)->vivo = false;
 80004ee:	2300      	movs	r3, #0
 80004f0:	70a3      	strb	r3, [r4, #2]
									getAlien(y,x)->explosion = true;
 80004f2:	f884 a003 	strb.w	sl, [r4, #3]
									getDisparo()->disparo = false;
 80004f6:	70b3      	strb	r3, [r6, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 80004f8:	2232      	movs	r2, #50	; 0x32
 80004fa:	7072      	strb	r2, [r6, #1]
									getDisparo()->numero_disparos = 0;
 80004fc:	70f3      	strb	r3, [r6, #3]
									getDisparoAliens()->numero_disparos = getDisparoAliens()->numero_disparos - 1;
 80004fe:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8000502:	3b01      	subs	r3, #1
 8000504:	f88b 3003 	strb.w	r3, [fp, #3]
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 8000508:	f8cd a004 	str.w	sl, [sp, #4]
 800050c:	2308      	movs	r3, #8
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2310      	movs	r3, #16
 8000512:	4a15      	ldr	r2, [pc, #84]	; (8000568 <disparar+0x134>)
 8000514:	f001 fa1e 	bl	8001954 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 8000518:	792b      	ldrb	r3, [r5, #4]
 800051a:	3b01      	subs	r3, #1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	712b      	strb	r3, [r5, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1c5      	bne.n	80004b0 <disparar+0x7c>
							getAlien(y,x)->explosion = false;
 8000524:	70eb      	strb	r3, [r5, #3]
 8000526:	e7c3      	b.n	80004b0 <disparar+0x7c>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000528:	f109 0901 	add.w	r9, r9, #1
 800052c:	fa5f f989 	uxtb.w	r9, r9
 8000530:	f1b9 0f03 	cmp.w	r9, #3
 8000534:	d00c      	beq.n	8000550 <disparar+0x11c>
				switch(y){
 8000536:	f1b9 0f01 	cmp.w	r9, #1
 800053a:	d0b4      	beq.n	80004a6 <disparar+0x72>
					tamano_alien = TAMANO_ALIEN_BOTTOM;
 800053c:	f1b9 0f02 	cmp.w	r9, #2
 8000540:	bf14      	ite	ne
 8000542:	2708      	movne	r7, #8
 8000544:	270c      	moveq	r7, #12
 8000546:	f108 0823 	add.w	r8, r8, #35	; 0x23
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800054a:	f1a8 0423 	sub.w	r4, r8, #35	; 0x23
 800054e:	e7b2      	b.n	80004b6 <disparar+0x82>
						}
					}
				}
			}
}
 8000550:	b003      	add	sp, #12
 8000552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000556:	bf00      	nop
 8000558:	200004a4 	.word	0x200004a4
 800055c:	2000045b 	.word	0x2000045b
 8000560:	200004a8 	.word	0x200004a8
 8000564:	200004ac 	.word	0x200004ac
 8000568:	08009338 	.word	0x08009338

0800056c <disparoAliens>:


void disparoAliens(){


	if(getDisparoAliens()->numero_disparos != 0){	//Si no hay aliens vivos.
 800056c:	4b35      	ldr	r3, [pc, #212]	; (8000644 <disparoAliens+0xd8>)
 800056e:	78db      	ldrb	r3, [r3, #3]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d066      	beq.n	8000642 <disparoAliens+0xd6>
void disparoAliens(){
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	b083      	sub	sp, #12

				if(getDisparoAliens()->disparo == true){
 8000578:	4b32      	ldr	r3, [pc, #200]	; (8000644 <disparoAliens+0xd8>)
 800057a:	789b      	ldrb	r3, [r3, #2]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d044      	beq.n	800060a <disparoAliens+0x9e>
					uint8_t flag = false;

					while(flag != true){


						uint8_t fila = rand() % NUM_ALIEN_FILA;
 8000580:	4f31      	ldr	r7, [pc, #196]	; (8000648 <disparoAliens+0xdc>)
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 8000582:	4e32      	ldr	r6, [pc, #200]	; (800064c <disparoAliens+0xe0>)

						if(getAlien(fila, columna)->vivo == true){
 8000584:	4d32      	ldr	r5, [pc, #200]	; (8000650 <disparoAliens+0xe4>)
						uint8_t fila = rand() % NUM_ALIEN_FILA;
 8000586:	f007 faa5 	bl	8007ad4 <rand>
 800058a:	4604      	mov	r4, r0
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 800058c:	f007 faa2 	bl	8007ad4 <rand>
						uint8_t fila = rand() % NUM_ALIEN_FILA;
 8000590:	fb87 1204 	smull	r1, r2, r7, r4
 8000594:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8000598:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800059c:	1aa4      	subs	r4, r4, r2
 800059e:	b2e4      	uxtb	r4, r4
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 80005a0:	fb86 2100 	smull	r2, r1, r6, r0
 80005a4:	4401      	add	r1, r0
 80005a6:	17c2      	asrs	r2, r0, #31
 80005a8:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80005ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80005b0:	1a83      	subs	r3, r0, r2
 80005b2:	b2db      	uxtb	r3, r3
						if(getAlien(fila, columna)->vivo == true){
 80005b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80005b8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80005bc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80005c0:	440a      	add	r2, r1
 80005c2:	442a      	add	r2, r5
 80005c4:	7892      	ldrb	r2, [r2, #2]
 80005c6:	2a01      	cmp	r2, #1
 80005c8:	d1dd      	bne.n	8000586 <disparoAliens+0x1a>
							flag = true;
							getDisparoAliens()->disparo = true;
 80005ca:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <disparoAliens+0xd8>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	7091      	strb	r1, [r2, #2]

							getDisparoAliens()->posicion_x = getAlien(fila, columna)->posicion_X + (TAMANO_ALIEN/2);
 80005d0:	491f      	ldr	r1, [pc, #124]	; (8000650 <disparoAliens+0xe4>)
 80005d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80005da:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80005de:	4423      	add	r3, r4
 80005e0:	18c8      	adds	r0, r1, r3
 80005e2:	5ccb      	ldrb	r3, [r1, r3]
 80005e4:	3304      	adds	r3, #4
 80005e6:	7013      	strb	r3, [r2, #0]
							getDisparoAliens()->posicion_y = getAlien(fila, columna)->posicion_Y + (TAMANO_ALIEN/2);
 80005e8:	7843      	ldrb	r3, [r0, #1]
 80005ea:	3304      	adds	r3, #4
 80005ec:	7053      	strb	r3, [r2, #1]
						}

					}
				}

				SSD1306_DrawBitmap(getDisparoAliens()->posicion_x, getDisparoAliens()->posicion_y, AlienBombGfx, 2, 4, 1);
 80005ee:	4815      	ldr	r0, [pc, #84]	; (8000644 <disparoAliens+0xd8>)
 80005f0:	2301      	movs	r3, #1
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2304      	movs	r3, #4
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2302      	movs	r3, #2
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <disparoAliens+0xe8>)
 80005fc:	f990 1001 	ldrsb.w	r1, [r0, #1]
 8000600:	7800      	ldrb	r0, [r0, #0]
 8000602:	f001 f9a7 	bl	8001954 <SSD1306_DrawBitmap>

	}

}
 8000606:	b003      	add	sp, #12
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
					getDisparoAliens()->posicion_y = getDisparoAliens()->posicion_y + dificultad.velocidad_disparo_aliens;
 800060a:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <disparoAliens+0xd8>)
 800060c:	7853      	ldrb	r3, [r2, #1]
 800060e:	4912      	ldr	r1, [pc, #72]	; (8000658 <disparoAliens+0xec>)
 8000610:	7889      	ldrb	r1, [r1, #2]
 8000612:	440b      	add	r3, r1
 8000614:	b25b      	sxtb	r3, r3
 8000616:	7053      	strb	r3, [r2, #1]
					if( (getDisparoAliens()->posicion_x + 1 >= getPlayer()->posicion_X) &  (getDisparoAliens()->posicion_x + 1 <= getPlayer()->posicion_X + 6) ){
 8000618:	7811      	ldrb	r1, [r2, #0]
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <disparoAliens+0xf0>)
 800061c:	7852      	ldrb	r2, [r2, #1]
 800061e:	1c48      	adds	r0, r1, #1
 8000620:	4290      	cmp	r0, r2
 8000622:	db08      	blt.n	8000636 <disparoAliens+0xca>
 8000624:	3205      	adds	r2, #5
 8000626:	4291      	cmp	r1, r2
 8000628:	dc05      	bgt.n	8000636 <disparoAliens+0xca>
						getDisparoAliens()->disparo = false;
 800062a:	2300      	movs	r3, #0
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <disparoAliens+0xd8>)
 800062e:	7093      	strb	r3, [r2, #2]
						getPlayer()->vivo = false;
 8000630:	4a0a      	ldr	r2, [pc, #40]	; (800065c <disparoAliens+0xf0>)
 8000632:	7093      	strb	r3, [r2, #2]
 8000634:	e7db      	b.n	80005ee <disparoAliens+0x82>
					else if(getDisparoAliens()->posicion_y >= 60){
 8000636:	2b3b      	cmp	r3, #59	; 0x3b
 8000638:	ddd9      	ble.n	80005ee <disparoAliens+0x82>
						getDisparoAliens()->disparo = false;
 800063a:	4b02      	ldr	r3, [pc, #8]	; (8000644 <disparoAliens+0xd8>)
 800063c:	2200      	movs	r2, #0
 800063e:	709a      	strb	r2, [r3, #2]
 8000640:	e7d5      	b.n	80005ee <disparoAliens+0x82>
 8000642:	4770      	bx	lr
 8000644:	200004a8 	.word	0x200004a8
 8000648:	55555556 	.word	0x55555556
 800064c:	92492493 	.word	0x92492493
 8000650:	20000438 	.word	0x20000438
 8000654:	080092e4 	.word	0x080092e4
 8000658:	200004b4 	.word	0x200004b4
 800065c:	200004ac 	.word	0x200004ac

08000660 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000664:	b083      	sub	sp, #12

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000666:	f006 f959 	bl	800691c <xTaskGetTickCount>
 800066a:	9000      	str	r0, [sp, #0]

  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  HAL_ADC_Start(&hadc1);
 800066c:	4d2c      	ldr	r5, [pc, #176]	; (8000720 <entryJoystick+0xc0>)
		  joystick.y_value = nulo;
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 800066e:	4e2d      	ldr	r6, [pc, #180]	; (8000724 <entryJoystick+0xc4>)
		  joystick.boton = false;
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000670:	4f2d      	ldr	r7, [pc, #180]	; (8000728 <entryJoystick+0xc8>)
 8000672:	e01f      	b.n	80006b4 <entryJoystick+0x54>
 8000674:	2302      	movs	r3, #2
 8000676:	e045      	b.n	8000704 <entryJoystick+0xa4>
 8000678:	2401      	movs	r4, #1
		  joystick.y_value = abajo;
 800067a:	f88d 4005 	strb.w	r4, [sp, #5]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 800067e:	2104      	movs	r1, #4
 8000680:	4630      	mov	r0, r6
 8000682:	f002 fc33 	bl	8002eec <HAL_GPIO_ReadPin>
 8000686:	fab0 f080 	clz	r0, r0
 800068a:	0940      	lsrs	r0, r0, #5
 800068c:	f88d 0006 	strb.w	r0, [sp, #6]
	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000690:	2300      	movs	r3, #0
 8000692:	461a      	mov	r2, r3
 8000694:	a901      	add	r1, sp, #4
 8000696:	4825      	ldr	r0, [pc, #148]	; (800072c <entryJoystick+0xcc>)
 8000698:	6800      	ldr	r0, [r0, #0]
 800069a:	f004 ff9b 	bl	80055d4 <osMessageQueuePut>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800069e:	b128      	cbz	r0, 80006ac <entryJoystick+0x4c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a6:	4638      	mov	r0, r7
 80006a8:	f002 fc26 	bl	8002ef8 <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 80006ac:	2132      	movs	r1, #50	; 0x32
 80006ae:	4668      	mov	r0, sp
 80006b0:	f006 fa56 	bl	8006b60 <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc1);
 80006b4:	4628      	mov	r0, r5
 80006b6:	f002 f947 	bl	8002948 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80006ba:	210a      	movs	r1, #10
 80006bc:	4628      	mov	r0, r5
 80006be:	f001 ff8d 	bl	80025dc <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 80006c2:	4628      	mov	r0, r5
 80006c4:	f002 f84c 	bl	8002760 <HAL_ADC_GetValue>
 80006c8:	fa1f f980 	uxth.w	r9, r0
	  HAL_ADC_Stop(&hadc1);
 80006cc:	4628      	mov	r0, r5
 80006ce:	f002 fa63 	bl	8002b98 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 80006d2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8000730 <entryJoystick+0xd0>
 80006d6:	4640      	mov	r0, r8
 80006d8:	f002 f936 	bl	8002948 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 80006dc:	210a      	movs	r1, #10
 80006de:	4640      	mov	r0, r8
 80006e0:	f001 ff7c 	bl	80025dc <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 80006e4:	4640      	mov	r0, r8
 80006e6:	f002 f83b 	bl	8002760 <HAL_ADC_GetValue>
 80006ea:	b284      	uxth	r4, r0
	  HAL_ADC_Stop(&hadc2);
 80006ec:	4640      	mov	r0, r8
 80006ee:	f002 fa53 	bl	8002b98 <HAL_ADC_Stop>
	  if(val_x > 2200){
 80006f2:	f640 0398 	movw	r3, #2200	; 0x898
 80006f6:	4599      	cmp	r9, r3
 80006f8:	d8bc      	bhi.n	8000674 <entryJoystick+0x14>
	  else if(val_x < 1600){
 80006fa:	f5b9 6fc8 	cmp.w	r9, #1600	; 0x640
 80006fe:	bf2c      	ite	cs
 8000700:	2304      	movcs	r3, #4
 8000702:	2303      	movcc	r3, #3
		  joystick.x_value = derecha;
 8000704:	f88d 3004 	strb.w	r3, [sp, #4]
	  if(val_y > 2200){
 8000708:	f640 0398 	movw	r3, #2200	; 0x898
 800070c:	429c      	cmp	r4, r3
 800070e:	d8b3      	bhi.n	8000678 <entryJoystick+0x18>
	  else if(val_y < 1600){
 8000710:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8000714:	bf34      	ite	cc
 8000716:	2400      	movcc	r4, #0
 8000718:	2401      	movcs	r4, #1
 800071a:	00a4      	lsls	r4, r4, #2
 800071c:	e7ad      	b.n	800067a <entryJoystick+0x1a>
 800071e:	bf00      	nop
 8000720:	200004cc 	.word	0x200004cc
 8000724:	40010800 	.word	0x40010800
 8000728:	40011000 	.word	0x40011000
 800072c:	20000678 	.word	0x20000678
 8000730:	200004fc 	.word	0x200004fc

08000734 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000734:	b530      	push	{r4, r5, lr}
 8000736:	b083      	sub	sp, #12

	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000738:	f000 fd36 	bl	80011a8 <menuInit>


  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 800073c:	4d11      	ldr	r5, [pc, #68]	; (8000784 <entryPantalla+0x50>)

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 800073e:	4c12      	ldr	r4, [pc, #72]	; (8000788 <entryPantalla+0x54>)
 8000740:	e005      	b.n	800074e <entryPantalla+0x1a>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000748:	4620      	mov	r0, r4
 800074a:	f002 fbd5 	bl	8002ef8 <HAL_GPIO_WritePin>
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	2200      	movs	r2, #0
 8000754:	a901      	add	r1, sp, #4
 8000756:	6828      	ldr	r0, [r5, #0]
 8000758:	f004 ff8c 	bl	8005674 <osMessageQueueGet>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 800075c:	2800      	cmp	r0, #0
 800075e:	d1f0      	bne.n	8000742 <entryPantalla+0xe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000766:	4620      	mov	r0, r4
 8000768:	f002 fbc6 	bl	8002ef8 <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 800076c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000770:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000774:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000778:	f000 fd6c 	bl	8001254 <menuActualizar>
		actualizarPantalla();
 800077c:	f7ff fcf8 	bl	8000170 <actualizarPantalla>
 8000780:	e7e5      	b.n	800074e <entryPantalla+0x1a>
 8000782:	bf00      	nop
 8000784:	20000678 	.word	0x20000678
 8000788:	40011000 	.word	0x40011000

0800078c <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	b083      	sub	sp, #12
  /* USER CODE BEGIN entryMemoria */

	//vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );

	osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 8000790:	f04f 31ff 	mov.w	r1, #4294967295
 8000794:	4b25      	ldr	r3, [pc, #148]	; (800082c <entryMemoria+0xa0>)
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	f004 fdd2 	bl	8005340 <osMutexAcquire>

	uint8_t buffer[6];

	uint16_t address = MEMORIA_ADDRESS;

	strcpy(buffer, "lindo");
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <entryMemoria+0xa4>)
 800079e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007a2:	9000      	str	r0, [sp, #0]
 80007a4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint16_t puntaje = 2450;

	Write_Enable();
 80007a8:	f000 fb3c 	bl	8000e24 <Write_Enable>
	HAL_Delay(10);
 80007ac:	200a      	movs	r0, #10
 80007ae:	f001 ff01 	bl	80025b4 <HAL_Delay>

	for(uint8_t i=0;i<6;i++){
 80007b2:	466d      	mov	r5, sp
	uint16_t address = MEMORIA_ADDRESS;
 80007b4:	2400      	movs	r4, #0

		Write_Memoria(address, buffer[i]);
		address++;
		HAL_Delay(10);
 80007b6:	260a      	movs	r6, #10
		Write_Memoria(address, buffer[i]);
 80007b8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80007bc:	4620      	mov	r0, r4
 80007be:	f000 fb59 	bl	8000e74 <Write_Memoria>
		address++;
 80007c2:	3401      	adds	r4, #1
 80007c4:	b2a4      	uxth	r4, r4
		HAL_Delay(10);
 80007c6:	4630      	mov	r0, r6
 80007c8:	f001 fef4 	bl	80025b4 <HAL_Delay>
	for(uint8_t i=0;i<6;i++){
 80007cc:	2c06      	cmp	r4, #6
 80007ce:	d1f3      	bne.n	80007b8 <entryMemoria+0x2c>
	}

	Write_Memoria(address, puntaje>>8);
 80007d0:	2109      	movs	r1, #9
 80007d2:	2006      	movs	r0, #6
 80007d4:	f000 fb4e 	bl	8000e74 <Write_Memoria>
	HAL_Delay(10);
 80007d8:	200a      	movs	r0, #10
 80007da:	f001 feeb 	bl	80025b4 <HAL_Delay>
	address++;
	Write_Memoria(address, puntaje);
 80007de:	2192      	movs	r1, #146	; 0x92
 80007e0:	2007      	movs	r0, #7
 80007e2:	f000 fb47 	bl	8000e74 <Write_Memoria>

	memoriaInit();
 80007e6:	f000 fbad 	bl	8000f44 <memoriaInit>
	Ordenamiento_Puntajes();
 80007ea:	f000 fc79 	bl	80010e0 <Ordenamiento_Puntajes>

	osMutexRelease(mutexPuntajesHandle);
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <entryMemoria+0xa0>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f004 fde7 	bl	80053c4 <osMutexRelease>
  /* Infinite loop */
  for(;;)
  {

	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 80007f6:	4e0f      	ldr	r6, [pc, #60]	; (8000834 <entryMemoria+0xa8>)
 80007f8:	f04f 34ff 	mov.w	r4, #4294967295

	      // Realiza acciones basadas en la notificación recibida
	      if (flags == NOTIFICATION_VALUE)
	      {
	    	  //Acceso al mutex, ya que se comparte el periférico SPI con la tarea SonidoTask.
	    	  osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 80007fc:	4f0b      	ldr	r7, [pc, #44]	; (800082c <entryMemoria+0xa0>)
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 80007fe:	2500      	movs	r5, #0
 8000800:	4623      	mov	r3, r4
 8000802:	462a      	mov	r2, r5
 8000804:	2101      	movs	r1, #1
 8000806:	6830      	ldr	r0, [r6, #0]
 8000808:	f004 fcfc 	bl	8005204 <osEventFlagsWait>
	      if (flags == NOTIFICATION_VALUE)
 800080c:	2801      	cmp	r0, #1
 800080e:	d1f7      	bne.n	8000800 <entryMemoria+0x74>
	    	  osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 8000810:	4621      	mov	r1, r4
 8000812:	6838      	ldr	r0, [r7, #0]
 8000814:	f004 fd94 	bl	8005340 <osMutexAcquire>

	    	  //Ordenamiento_Puntajes();
	    	  //writeNuevosPuntajes(1);
	    	  //guardarNuevosPuntaje();

	    	  osMutexRelease(mutexPuntajesHandle);
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	f004 fdd3 	bl	80053c4 <osMutexRelease>


	    	  //Envio la notificacion 2 para que la tarea PantallaTask pueda pasar del menu guardado_nombre al menu de puntajes una vez que los puntajes ya se encuentran ordenadas y guardadas, ya que sin esta segunda sincronizacion, puede pasarse al menu puntajes sin que estos se encuentren ordenados. El ordenado se realiza en esta tarea MemoriaTask ya que las escrituras de puntajes se realizan solo en esta tarea.
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 800081e:	2102      	movs	r1, #2
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <entryMemoria+0xac>)
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	f004 fcb0 	bl	8005188 <osEventFlagsSet>
 8000828:	e7e9      	b.n	80007fe <entryMemoria+0x72>
 800082a:	bf00      	nop
 800082c:	20000668 	.word	0x20000668
 8000830:	08009358 	.word	0x08009358
 8000834:	20000670 	.word	0x20000670
 8000838:	20000674 	.word	0x20000674

0800083c <entrySonido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySonido */
void entrySonido(void *argument)
{
 800083c:	b508      	push	{r3, lr}
  /* Infinite loop */
  for(;;)
  {
	 // osSemaphoreAcquire(mySem01Handle, osWaitForever);

	  osDelay(1);
 800083e:	2401      	movs	r4, #1
 8000840:	4620      	mov	r0, r4
 8000842:	f004 fc57 	bl	80050f4 <osDelay>
  for(;;)
 8000846:	e7fb      	b.n	8000840 <entrySonido+0x4>

08000848 <SystemClock_Config>:
{
 8000848:	b500      	push	{lr}
 800084a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084c:	2300      	movs	r3, #0
 800084e:	930c      	str	r3, [sp, #48]	; 0x30
 8000850:	930d      	str	r3, [sp, #52]	; 0x34
 8000852:	930f      	str	r3, [sp, #60]	; 0x3c
 8000854:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000856:	9305      	str	r3, [sp, #20]
 8000858:	9306      	str	r3, [sp, #24]
 800085a:	9307      	str	r3, [sp, #28]
 800085c:	9308      	str	r3, [sp, #32]
 800085e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	9302      	str	r3, [sp, #8]
 8000864:	9303      	str	r3, [sp, #12]
 8000866:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2201      	movs	r2, #1
 800086a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000870:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000872:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2202      	movs	r2, #2
 8000876:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000878:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800087a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800087e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	a80a      	add	r0, sp, #40	; 0x28
 8000882:	f002 fefb 	bl	800367c <HAL_RCC_OscConfig>
 8000886:	b9c8      	cbnz	r0, 80008bc <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2102      	movs	r1, #2
 800088e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	a805      	add	r0, sp, #20
 800089e:	f003 f92d 	bl	8003afc <HAL_RCC_ClockConfig>
 80008a2:	b968      	cbnz	r0, 80008c0 <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008a4:	2302      	movs	r3, #2
 80008a6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ac:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ae:	a801      	add	r0, sp, #4
 80008b0:	f003 fa1a 	bl	8003ce8 <HAL_RCCEx_PeriphCLKConfig>
 80008b4:	b930      	cbnz	r0, 80008c4 <SystemClock_Config+0x7c>
}
 80008b6:	b015      	add	sp, #84	; 0x54
 80008b8:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008be:	e7fe      	b.n	80008be <SystemClock_Config+0x76>
 80008c0:	b672      	cpsid	i
 80008c2:	e7fe      	b.n	80008c2 <SystemClock_Config+0x7a>
 80008c4:	b672      	cpsid	i
 80008c6:	e7fe      	b.n	80008c6 <SystemClock_Config+0x7e>

080008c8 <main>:
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 80008cc:	f001 fe4e 	bl	800256c <HAL_Init>
  SystemClock_Config();
 80008d0:	f7ff ffba 	bl	8000848 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	2400      	movs	r4, #0
 80008d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80008d8:	940c      	str	r4, [sp, #48]	; 0x30
 80008da:	940d      	str	r4, [sp, #52]	; 0x34
 80008dc:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4ba8      	ldr	r3, [pc, #672]	; (8000b80 <main+0x2b8>)
 80008e0:	699a      	ldr	r2, [r3, #24]
 80008e2:	f042 0210 	orr.w	r2, r2, #16
 80008e6:	619a      	str	r2, [r3, #24]
 80008e8:	699a      	ldr	r2, [r3, #24]
 80008ea:	f002 0210 	and.w	r2, r2, #16
 80008ee:	9201      	str	r2, [sp, #4]
 80008f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	f042 0220 	orr.w	r2, r2, #32
 80008f8:	619a      	str	r2, [r3, #24]
 80008fa:	699a      	ldr	r2, [r3, #24]
 80008fc:	f002 0220 	and.w	r2, r2, #32
 8000900:	9202      	str	r2, [sp, #8]
 8000902:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	f042 0204 	orr.w	r2, r2, #4
 800090a:	619a      	str	r2, [r3, #24]
 800090c:	699a      	ldr	r2, [r3, #24]
 800090e:	f002 0204 	and.w	r2, r2, #4
 8000912:	9203      	str	r2, [sp, #12]
 8000914:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	f042 0208 	orr.w	r2, r2, #8
 800091c:	619a      	str	r2, [r3, #24]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	9304      	str	r3, [sp, #16]
 8000926:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000928:	f8df 9258 	ldr.w	r9, [pc, #600]	; 8000b84 <main+0x2bc>
 800092c:	4622      	mov	r2, r4
 800092e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000932:	4648      	mov	r0, r9
 8000934:	f002 fae0 	bl	8002ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 8000938:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8000b88 <main+0x2c0>
 800093c:	4622      	mov	r2, r4
 800093e:	f24c 0120 	movw	r1, #49184	; 0xc020
 8000942:	4640      	mov	r0, r8
 8000944:	f002 fad8 	bl	8002ef8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000948:	4e90      	ldr	r6, [pc, #576]	; (8000b8c <main+0x2c4>)
 800094a:	4622      	mov	r2, r4
 800094c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000950:	4630      	mov	r0, r6
 8000952:	f002 fad1 	bl	8002ef8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2501      	movs	r5, #1
 800095e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2702      	movs	r7, #2
 8000964:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	a90b      	add	r1, sp, #44	; 0x2c
 8000968:	4648      	mov	r0, r9
 800096a:	f002 f985 	bl	8002c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800096e:	2304      	movs	r3, #4
 8000970:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000974:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	a90b      	add	r1, sp, #44	; 0x2c
 8000978:	4630      	mov	r0, r6
 800097a:	f002 f97d 	bl	8002c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 800097e:	f24c 0320 	movw	r3, #49184	; 0xc020
 8000982:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	a90b      	add	r1, sp, #44	; 0x2c
 800098c:	4640      	mov	r0, r8
 800098e:	f002 f973 	bl	8002c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000992:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000996:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	a90b      	add	r1, sp, #44	; 0x2c
 80009a0:	4630      	mov	r0, r6
 80009a2:	f002 f969 	bl	8002c78 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80009a8:	940c      	str	r4, [sp, #48]	; 0x30
 80009aa:	940d      	str	r4, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 80009ac:	4878      	ldr	r0, [pc, #480]	; (8000b90 <main+0x2c8>)
 80009ae:	4b79      	ldr	r3, [pc, #484]	; (8000b94 <main+0x2cc>)
 80009b0:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b2:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009b4:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b6:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b8:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80009bc:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009c0:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c2:	f002 f865 	bl	8002a90 <HAL_ADC_Init>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	f040 8132 	bne.w	8000c30 <main+0x368>
  sConfig.Channel = ADC_CHANNEL_3;
 80009cc:	2303      	movs	r3, #3
 80009ce:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009d4:	2300      	movs	r3, #0
 80009d6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	a90b      	add	r1, sp, #44	; 0x2c
 80009da:	486d      	ldr	r0, [pc, #436]	; (8000b90 <main+0x2c8>)
 80009dc:	f001 fec4 	bl	8002768 <HAL_ADC_ConfigChannel>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	f040 8127 	bne.w	8000c34 <main+0x36c>
  hi2c1.Instance = I2C1;
 80009e6:	486c      	ldr	r0, [pc, #432]	; (8000b98 <main+0x2d0>)
 80009e8:	4b6c      	ldr	r3, [pc, #432]	; (8000b9c <main+0x2d4>)
 80009ea:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009ec:	4b6c      	ldr	r3, [pc, #432]	; (8000ba0 <main+0x2d8>)
 80009ee:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f0:	2300      	movs	r3, #0
 80009f2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fa:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a02:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a04:	f002 fb9e 	bl	8003144 <HAL_I2C_Init>
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	f040 8115 	bne.w	8000c38 <main+0x370>
  hspi1.Instance = SPI1;
 8000a0e:	4865      	ldr	r0, [pc, #404]	; (8000ba4 <main+0x2dc>)
 8000a10:	4b65      	ldr	r3, [pc, #404]	; (8000ba8 <main+0x2e0>)
 8000a12:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a14:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a18:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a20:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a22:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a28:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a2a:	2228      	movs	r2, #40	; 0x28
 8000a2c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a30:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a32:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a34:	230a      	movs	r3, #10
 8000a36:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a38:	f003 fb09 	bl	800404e <HAL_SPI_Init>
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	f040 80fd 	bne.w	8000c3c <main+0x374>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a42:	2300      	movs	r3, #0
 8000a44:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a46:	930c      	str	r3, [sp, #48]	; 0x30
 8000a48:	930d      	str	r3, [sp, #52]	; 0x34
  hadc2.Instance = ADC2;
 8000a4a:	4858      	ldr	r0, [pc, #352]	; (8000bac <main+0x2e4>)
 8000a4c:	4a58      	ldr	r2, [pc, #352]	; (8000bb0 <main+0x2e8>)
 8000a4e:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a50:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a52:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a54:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a5a:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a5c:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a62:	f002 f815 	bl	8002a90 <HAL_ADC_Init>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	f040 80ea 	bne.w	8000c40 <main+0x378>
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a72:	2300      	movs	r3, #0
 8000a74:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a76:	a90b      	add	r1, sp, #44	; 0x2c
 8000a78:	484c      	ldr	r0, [pc, #304]	; (8000bac <main+0x2e4>)
 8000a7a:	f001 fe75 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	f040 80e0 	bne.w	8000c44 <main+0x37c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	9307      	str	r3, [sp, #28]
 8000a88:	9308      	str	r3, [sp, #32]
 8000a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a8c:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	9305      	str	r3, [sp, #20]
 8000a90:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a94:	930c      	str	r3, [sp, #48]	; 0x30
 8000a96:	930d      	str	r3, [sp, #52]	; 0x34
 8000a98:	930e      	str	r3, [sp, #56]	; 0x38
 8000a9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a9c:	9310      	str	r3, [sp, #64]	; 0x40
 8000a9e:	9311      	str	r3, [sp, #68]	; 0x44
  htim2.Instance = TIM2;
 8000aa0:	4844      	ldr	r0, [pc, #272]	; (8000bb4 <main+0x2ec>)
 8000aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1-1;
 8000aa8:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 255-1;
 8000aac:	22fe      	movs	r2, #254	; 0xfe
 8000aae:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab4:	f003 ffcc 	bl	8004a50 <HAL_TIM_Base_Init>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	f040 80c5 	bne.w	8000c48 <main+0x380>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac2:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac4:	a907      	add	r1, sp, #28
 8000ac6:	483b      	ldr	r0, [pc, #236]	; (8000bb4 <main+0x2ec>)
 8000ac8:	f004 f8c2 	bl	8004c50 <HAL_TIM_ConfigClockSource>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	f040 80bd 	bne.w	8000c4c <main+0x384>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad2:	4838      	ldr	r0, [pc, #224]	; (8000bb4 <main+0x2ec>)
 8000ad4:	f003 ffe8 	bl	8004aa8 <HAL_TIM_PWM_Init>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	f040 80b9 	bne.w	8000c50 <main+0x388>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	a905      	add	r1, sp, #20
 8000ae6:	4833      	ldr	r0, [pc, #204]	; (8000bb4 <main+0x2ec>)
 8000ae8:	f004 fa1c 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	f040 80b1 	bne.w	8000c54 <main+0x38c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af2:	2360      	movs	r3, #96	; 0x60
 8000af4:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000af6:	2200      	movs	r2, #0
 8000af8:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afa:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afc:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afe:	a90b      	add	r1, sp, #44	; 0x2c
 8000b00:	482c      	ldr	r0, [pc, #176]	; (8000bb4 <main+0x2ec>)
 8000b02:	f004 f82b 	bl	8004b5c <HAL_TIM_PWM_ConfigChannel>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	f040 80a6 	bne.w	8000c58 <main+0x390>
  HAL_TIM_MspPostInit(&htim2);
 8000b0c:	4829      	ldr	r0, [pc, #164]	; (8000bb4 <main+0x2ec>)
 8000b0e:	f001 fc19 	bl	8002344 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	2300      	movs	r3, #0
 8000b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b16:	930c      	str	r3, [sp, #48]	; 0x30
 8000b18:	930d      	str	r3, [sp, #52]	; 0x34
 8000b1a:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	9307      	str	r3, [sp, #28]
 8000b1e:	9308      	str	r3, [sp, #32]
  htim3.Instance = TIM3;
 8000b20:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <main+0x2f0>)
 8000b22:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <main+0x2f4>)
 8000b24:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 8000b26:	2247      	movs	r2, #71	; 0x47
 8000b28:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 125-1;
 8000b2c:	227c      	movs	r2, #124	; 0x7c
 8000b2e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b30:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b34:	f003 ff8c 	bl	8004a50 <HAL_TIM_Base_Init>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	f040 808f 	bne.w	8000c5c <main+0x394>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b44:	a90b      	add	r1, sp, #44	; 0x2c
 8000b46:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <main+0x2f0>)
 8000b48:	f004 f882 	bl	8004c50 <HAL_TIM_ConfigClockSource>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	f040 8087 	bne.w	8000c60 <main+0x398>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b58:	a907      	add	r1, sp, #28
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <main+0x2f0>)
 8000b5c:	f004 f9e2 	bl	8004f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d17f      	bne.n	8000c64 <main+0x39c>
  osKernelInitialize();
 8000b64:	f004 fa14 	bl	8004f90 <osKernelInitialize>
  mutexPuntajesHandle = osMutexNew(&mutexPuntajes_attributes);
 8000b68:	4815      	ldr	r0, [pc, #84]	; (8000bc0 <main+0x2f8>)
 8000b6a:	f004 fb95 	bl	8005298 <osMutexNew>
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <main+0x2fc>)
 8000b70:	6018      	str	r0, [r3, #0]
  mySem01Handle = osSemaphoreNew(1, 1, &mySem01_attributes);
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <main+0x300>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	4608      	mov	r0, r1
 8000b78:	f004 fc5c 	bl	8005434 <osSemaphoreNew>
 8000b7c:	e026      	b.n	8000bcc <main+0x304>
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	200004cc 	.word	0x200004cc
 8000b94:	40012400 	.word	0x40012400
 8000b98:	2000052c 	.word	0x2000052c
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	00061a80 	.word	0x00061a80
 8000ba4:	20000580 	.word	0x20000580
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	200004fc 	.word	0x200004fc
 8000bb0:	40012800 	.word	0x40012800
 8000bb4:	200005d8 	.word	0x200005d8
 8000bb8:	20000620 	.word	0x20000620
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	08009450 	.word	0x08009450
 8000bc4:	20000668 	.word	0x20000668
 8000bc8:	08009460 	.word	0x08009460
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <main+0x3a0>)
 8000bce:	6018      	str	r0, [r3, #0]
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000bd0:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <main+0x3a4>)
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f004 fca1 	bl	800551c <osMessageQueueNew>
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <main+0x3a8>)
 8000bdc:	6018      	str	r0, [r3, #0]
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000bde:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <main+0x3ac>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	4825      	ldr	r0, [pc, #148]	; (8000c78 <main+0x3b0>)
 8000be4:	f004 fa20 	bl	8005028 <osThreadNew>
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <main+0x3b4>)
 8000bea:	6018      	str	r0, [r3, #0]
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8000bec:	4a24      	ldr	r2, [pc, #144]	; (8000c80 <main+0x3b8>)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4824      	ldr	r0, [pc, #144]	; (8000c84 <main+0x3bc>)
 8000bf2:	f004 fa19 	bl	8005028 <osThreadNew>
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x3c0>)
 8000bf8:	6018      	str	r0, [r3, #0]
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 8000bfa:	4a24      	ldr	r2, [pc, #144]	; (8000c8c <main+0x3c4>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4824      	ldr	r0, [pc, #144]	; (8000c90 <main+0x3c8>)
 8000c00:	f004 fa12 	bl	8005028 <osThreadNew>
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <main+0x3cc>)
 8000c06:	6018      	str	r0, [r3, #0]
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 8000c08:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <main+0x3d0>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4823      	ldr	r0, [pc, #140]	; (8000c9c <main+0x3d4>)
 8000c0e:	f004 fa0b 	bl	8005028 <osThreadNew>
 8000c12:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <main+0x3d8>)
 8000c14:	6018      	str	r0, [r3, #0]
  notificationFlag = osEventFlagsNew(NULL);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f004 fa8e 	bl	8005138 <osEventFlagsNew>
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <main+0x3dc>)
 8000c1e:	6018      	str	r0, [r3, #0]
  notificationFlag2 = osEventFlagsNew(NULL);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f004 fa89 	bl	8005138 <osEventFlagsNew>
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <main+0x3e0>)
 8000c28:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c2a:	f004 f9d5 	bl	8004fd8 <osKernelStart>
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <main+0x366>
 8000c30:	b672      	cpsid	i
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <main+0x36a>
 8000c34:	b672      	cpsid	i
 8000c36:	e7fe      	b.n	8000c36 <main+0x36e>
 8000c38:	b672      	cpsid	i
 8000c3a:	e7fe      	b.n	8000c3a <main+0x372>
 8000c3c:	b672      	cpsid	i
 8000c3e:	e7fe      	b.n	8000c3e <main+0x376>
 8000c40:	b672      	cpsid	i
 8000c42:	e7fe      	b.n	8000c42 <main+0x37a>
 8000c44:	b672      	cpsid	i
 8000c46:	e7fe      	b.n	8000c46 <main+0x37e>
 8000c48:	b672      	cpsid	i
 8000c4a:	e7fe      	b.n	8000c4a <main+0x382>
 8000c4c:	b672      	cpsid	i
 8000c4e:	e7fe      	b.n	8000c4e <main+0x386>
 8000c50:	b672      	cpsid	i
 8000c52:	e7fe      	b.n	8000c52 <main+0x38a>
 8000c54:	b672      	cpsid	i
 8000c56:	e7fe      	b.n	8000c56 <main+0x38e>
 8000c58:	b672      	cpsid	i
 8000c5a:	e7fe      	b.n	8000c5a <main+0x392>
 8000c5c:	b672      	cpsid	i
 8000c5e:	e7fe      	b.n	8000c5e <main+0x396>
 8000c60:	b672      	cpsid	i
 8000c62:	e7fe      	b.n	8000c62 <main+0x39a>
 8000c64:	b672      	cpsid	i
 8000c66:	e7fe      	b.n	8000c66 <main+0x39e>
 8000c68:	2000066c 	.word	0x2000066c
 8000c6c:	08009470 	.word	0x08009470
 8000c70:	20000678 	.word	0x20000678
 8000c74:	080093c0 	.word	0x080093c0
 8000c78:	08000661 	.word	0x08000661
 8000c7c:	200004bc 	.word	0x200004bc
 8000c80:	08009408 	.word	0x08009408
 8000c84:	08000735 	.word	0x08000735
 8000c88:	200004c4 	.word	0x200004c4
 8000c8c:	080093e4 	.word	0x080093e4
 8000c90:	0800078d 	.word	0x0800078d
 8000c94:	200004c0 	.word	0x200004c0
 8000c98:	0800942c 	.word	0x0800942c
 8000c9c:	0800083d 	.word	0x0800083d
 8000ca0:	200004c8 	.word	0x200004c8
 8000ca4:	20000670 	.word	0x20000670
 8000ca8:	20000674 	.word	0x20000674

08000cac <HAL_TIM_PeriodElapsedCallback>:
{
 8000cac:	b510      	push	{r4, lr}
 8000cae:	4604      	mov	r4, r0
  if (htim->Instance == TIM4) {
 8000cb0:	6802      	ldr	r2, [r0, #0]
 8000cb2:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d004      	beq.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM3) {
 8000cb8:	6822      	ldr	r2, [r4, #0]
 8000cba:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d003      	beq.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8000cc0:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000cc2:	f001 fc65 	bl	8002590 <HAL_IncTick>
 8000cc6:	e7f7      	b.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0xc>
		TIM2->CCR1 = *puntero >>2;
 8000cc8:	4946      	ldr	r1, [pc, #280]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000cca:	680b      	ldr	r3, [r1, #0]
 8000ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cd0:	0892      	lsrs	r2, r2, #2
 8000cd2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cd6:	6342      	str	r2, [r0, #52]	; 0x34
		puntero++;
 8000cd8:	600b      	str	r3, [r1, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8000ce2:	f002 f90f 	bl	8002f04 <HAL_GPIO_TogglePin>
	  		switch(tonos){
 8000ce6:	4b40      	ldr	r3, [pc, #256]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d02e      	beq.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d048      	beq.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8000cf2:	b17b      	cbz	r3, 8000d14 <HAL_TIM_PeriodElapsedCallback+0x68>
				if(puntero == puntero_final_tonos){
 8000cf4:	4a3b      	ldr	r2, [pc, #236]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000cf6:	6811      	ldr	r1, [r2, #0]
 8000cf8:	4a3c      	ldr	r2, [pc, #240]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	4291      	cmp	r1, r2
 8000cfe:	d05d      	beq.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x110>
	  			if(conteo == 0){
 8000d00:	4a3b      	ldr	r2, [pc, #236]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d1db      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
					switch(tonos){
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d8d9      	bhi.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000d0c:	e8df f003 	tbb	[pc, r3]
 8000d10:	5e44280c 	.word	0x5e44280c
				if(puntero == puntero_final_f622){
 8000d14:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d00d      	beq.n	8000d3c <HAL_TIM_PeriodElapsedCallback+0x90>
	  			if(conteo == 0){
 8000d20:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1cb      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
						puntero = tono_587hz;
 8000d28:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d2a:	4a33      	ldr	r2, [pc, #204]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d2c:	601a      	str	r2, [r3, #0]
						tonos = f587;
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
						conteo = VECES_587HZ;
 8000d34:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d36:	22a0      	movs	r2, #160	; 0xa0
 8000d38:	701a      	strb	r2, [r3, #0]
						break;
 8000d3a:	e7c1      	b.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
						puntero = tono_622hz;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d3e:	4a2f      	ldr	r2, [pc, #188]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d40:	601a      	str	r2, [r3, #0]
						conteo--;
 8000d42:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d44:	7813      	ldrb	r3, [r2, #0]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	7013      	strb	r3, [r2, #0]
 8000d4a:	e7e9      	b.n	8000d20 <HAL_TIM_PeriodElapsedCallback+0x74>
				if(puntero == puntero_final_f587){
 8000d4c:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d00d      	beq.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  			if(conteo == 0){
 8000d58:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1af      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
						puntero = tono_554hz;
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d62:	4a28      	ldr	r2, [pc, #160]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000d64:	601a      	str	r2, [r3, #0]
						tonos = f554;
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d68:	2202      	movs	r2, #2
 8000d6a:	701a      	strb	r2, [r3, #0]
						conteo = VECES_554HZ;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d6e:	2296      	movs	r2, #150	; 0x96
 8000d70:	701a      	strb	r2, [r3, #0]
						break;
 8000d72:	e7a5      	b.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
						puntero = tono_587hz;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d76:	4a20      	ldr	r2, [pc, #128]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d78:	601a      	str	r2, [r3, #0]
						conteo--;
 8000d7a:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d7c:	7813      	ldrb	r3, [r2, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	7013      	strb	r3, [r2, #0]
 8000d82:	e7e9      	b.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0xac>
				if(puntero == puntero_final_f554){
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d00d      	beq.n	8000dac <HAL_TIM_PeriodElapsedCallback+0x100>
	  			if(conteo == 0){
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d193      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
						puntero = tonos_variables;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000d9c:	601a      	str	r2, [r3, #0]
						tonos = variables;
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000da0:	2203      	movs	r2, #3
 8000da2:	701a      	strb	r2, [r3, #0]
						conteo = VECES_TONOS_VARIABLES;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000da6:	220a      	movs	r2, #10
 8000da8:	701a      	strb	r2, [r3, #0]
						break;
 8000daa:	e789      	b.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
						puntero = tono_554hz;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000db0:	601a      	str	r2, [r3, #0]
						conteo--;
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000db4:	7813      	ldrb	r3, [r2, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	7013      	strb	r3, [r2, #0]
 8000dba:	e7e9      	b.n	8000d90 <HAL_TIM_PeriodElapsedCallback+0xe4>
						puntero = tonos_variables;
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000dbe:	4913      	ldr	r1, [pc, #76]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000dc0:	6011      	str	r1, [r2, #0]
						conteo--;
 8000dc2:	490b      	ldr	r1, [pc, #44]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000dc4:	780a      	ldrb	r2, [r1, #0]
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	700a      	strb	r2, [r1, #0]
 8000dca:	e799      	b.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0x54>
						HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4810      	ldr	r0, [pc, #64]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000dd0:	f004 f866 	bl	8004ea0 <HAL_TIM_PWM_Stop>
						HAL_TIM_Base_Stop_IT(&htim3);
 8000dd4:	480f      	ldr	r0, [pc, #60]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000dd6:	f003 fd11 	bl	80047fc <HAL_TIM_Base_Stop_IT>
}
 8000dda:	e771      	b.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000ddc:	40000800 	.word	0x40000800
 8000de0:	40000400 	.word	0x40000400
 8000de4:	2000000c 	.word	0x2000000c
 8000de8:	2000067c 	.word	0x2000067c
 8000dec:	2000001c 	.word	0x2000001c
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000018 	.word	0x20000018
 8000df8:	20000030 	.word	0x20000030
 8000dfc:	20000040 	.word	0x20000040
 8000e00:	20000014 	.word	0x20000014
 8000e04:	20000020 	.word	0x20000020
 8000e08:	20000010 	.word	0x20000010
 8000e0c:	20000050 	.word	0x20000050
 8000e10:	200005d8 	.word	0x200005d8
 8000e14:	20000620 	.word	0x20000620

08000e18 <getPuntajes>:

puntajes_t *getPuntajes(uint8_t indice){

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
}
 8000e18:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <getPuntajes+0x8>)
 8000e1a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e1e:	4770      	bx	lr
 8000e20:	20000680 	.word	0x20000680

08000e24 <Write_Enable>:


void Write_Enable(){
 8000e24:	b530      	push	{r4, r5, lr}
 8000e26:	b083      	sub	sp, #12


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 8000e28:	4c10      	ldr	r4, [pc, #64]	; (8000e6c <Write_Enable+0x48>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2120      	movs	r1, #32
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f002 f862 	bl	8002ef8 <HAL_GPIO_WritePin>

	uint8_t comando[2] = { 0x27 , 0xFF};
 8000e34:	f64f 7327 	movw	r3, #65319	; 0xff27
 8000e38:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&hspi1, &comando[0], 1, HAL_MAX_DELAY);
 8000e3c:	4d0c      	ldr	r5, [pc, #48]	; (8000e70 <Write_Enable+0x4c>)
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	2201      	movs	r2, #1
 8000e44:	a901      	add	r1, sp, #4
 8000e46:	4628      	mov	r0, r5
 8000e48:	f003 f95c 	bl	8004104 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &comando[1], 1, HAL_MAX_DELAY);
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e50:	2201      	movs	r2, #1
 8000e52:	f10d 0105 	add.w	r1, sp, #5
 8000e56:	4628      	mov	r0, r5
 8000e58:	f003 f954 	bl	8004104 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2120      	movs	r1, #32
 8000e60:	4620      	mov	r0, r4
 8000e62:	f002 f849 	bl	8002ef8 <HAL_GPIO_WritePin>


}
 8000e66:	b003      	add	sp, #12
 8000e68:	bd30      	pop	{r4, r5, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010c00 	.word	0x40010c00
 8000e70:	20000580 	.word	0x20000580

08000e74 <Write_Memoria>:

void Write_Memoria(uint16_t address, uint8_t dato){
 8000e74:	b570      	push	{r4, r5, r6, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	4604      	mov	r4, r0
 8000e7a:	460d      	mov	r5, r1

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 8000e7c:	4e0d      	ldr	r6, [pc, #52]	; (8000eb4 <Write_Memoria+0x40>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2120      	movs	r1, #32
 8000e82:	4630      	mov	r0, r6
 8000e84:	f002 f838 	bl	8002ef8 <HAL_GPIO_WritePin>

	uint8_t comando[3] = { ((uint8_t)WRITE<<3) + (address>>8  & 0xFF), address & 0xFF, dato};
 8000e88:	0a23      	lsrs	r3, r4, #8
 8000e8a:	3328      	adds	r3, #40	; 0x28
 8000e8c:	f88d 3004 	strb.w	r3, [sp, #4]
 8000e90:	f88d 4005 	strb.w	r4, [sp, #5]
 8000e94:	f88d 5006 	strb.w	r5, [sp, #6]
	HAL_SPI_Transmit(&hspi1, comando, 3, HAL_MAX_DELAY);
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	a901      	add	r1, sp, #4
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <Write_Memoria+0x44>)
 8000ea2:	f003 f92f 	bl	8004104 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4630      	mov	r0, r6
 8000eac:	f002 f824 	bl	8002ef8 <HAL_GPIO_WritePin>
}
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	20000580 	.word	0x20000580

08000ebc <Read_all>:


	return ((dato_leido[0]<<1) + (dato_leido[1]>>7));
}

void Read_all(uint16_t address, uint16_t tamano, uint8_t *buffer){
 8000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	460d      	mov	r5, r1
 8000ec4:	4614      	mov	r4, r2


	uint8_t dato_actual, dato_anterior;


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2120      	movs	r1, #32
 8000eca:	481c      	ldr	r0, [pc, #112]	; (8000f3c <Read_all+0x80>)
 8000ecc:	f002 f814 	bl	8002ef8 <HAL_GPIO_WritePin>

	uint8_t comando[2] = { ((uint16_t)READ<<3) + (address>>8 & 0xFF), address & 0xFF};
 8000ed0:	0a33      	lsrs	r3, r6, #8
 8000ed2:	3330      	adds	r3, #48	; 0x30
 8000ed4:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ed8:	f88d 6005 	strb.w	r6, [sp, #5]
	HAL_SPI_Transmit(&hspi1, comando, 2, 100);
 8000edc:	4e18      	ldr	r6, [pc, #96]	; (8000f40 <Read_all+0x84>)
 8000ede:	2364      	movs	r3, #100	; 0x64
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	a901      	add	r1, sp, #4
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f003 f90d 	bl	8004104 <HAL_SPI_Transmit>

	//HAL_Delay(10);

	HAL_SPI_Receive(&hspi1, &dato_anterior, 1, HAL_MAX_DELAY);
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f10d 0106 	add.w	r1, sp, #6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	f003 fb07 	bl	8004508 <HAL_SPI_Receive>


	for(uint16_t i=0; i< tamano; i++){
 8000efa:	b1bd      	cbz	r5, 8000f2c <Read_all+0x70>
 8000efc:	4425      	add	r5, r4

		HAL_SPI_Receive(&hspi1, &dato_actual, 1, HAL_MAX_DELAY);
 8000efe:	4637      	mov	r7, r6
 8000f00:	f04f 36ff 	mov.w	r6, #4294967295
 8000f04:	4633      	mov	r3, r6
 8000f06:	2201      	movs	r2, #1
 8000f08:	f10d 0107 	add.w	r1, sp, #7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	f003 fafb 	bl	8004508 <HAL_SPI_Receive>
		*buffer = (dato_anterior<<1) + (dato_actual>>7);
 8000f12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8000f16:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8000f1a:	09d3      	lsrs	r3, r2, #7
 8000f1c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8000f20:	f804 3b01 	strb.w	r3, [r4], #1
		buffer++;
		dato_anterior = dato_actual;
 8000f24:	f88d 2006 	strb.w	r2, [sp, #6]
	for(uint16_t i=0; i< tamano; i++){
 8000f28:	42ac      	cmp	r4, r5
 8000f2a:	d1eb      	bne.n	8000f04 <Read_all+0x48>

	}


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <Read_all+0x80>)
 8000f32:	f001 ffe1 	bl	8002ef8 <HAL_GPIO_WritePin>

}
 8000f36:	b003      	add	sp, #12
 8000f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	20000580 	.word	0x20000580

08000f44 <memoriaInit>:



void memoriaInit(){
 8000f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f48:	b08d      	sub	sp, #52	; 0x34
 8000f4a:	2700      	movs	r7, #0


		char buff_nombre[7];
		strcpy(buff_nombre, "      ");
 8000f4c:	4b62      	ldr	r3, [pc, #392]	; (80010d8 <memoriaInit+0x194>)
 8000f4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f52:	900a      	str	r0, [sp, #40]	; 0x28
 8000f54:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8000f58:	0c09      	lsrs	r1, r1, #16
 8000f5a:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
		uint8_t puntaje_msb;

		uint8_t buffer[TAMANO_TOTAL_PUNTAJES];


		Read_all(address, TAMANO_TOTAL_PUNTAJES, buffer);
 8000f5e:	466a      	mov	r2, sp
 8000f60:	2128      	movs	r1, #40	; 0x28
 8000f62:	4638      	mov	r0, r7
 8000f64:	f7ff ffaa 	bl	8000ebc <Read_all>
 8000f68:	466e      	mov	r6, sp
 8000f6a:	2401      	movs	r4, #1
 8000f6c:	463d      	mov	r5, r7
		uint8_t permiso = true;
 8000f6e:	46a4      	mov	ip, r4
		uint8_t j = 0;
 8000f70:	4638      	mov	r0, r7
				puntaje_lsb = buffer[i];

				switch(i){

				case 7:
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8000f72:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80010dc <memoriaInit+0x198>
						else if((i>=32 && i<38)){
							strcpy(getPuntajes(4)->nombre, buff_nombre);
						}

						j = 0;
						strcpy(buff_nombre, "      ");
 8000f76:	f8df a160 	ldr.w	sl, [pc, #352]	; 80010d8 <memoriaInit+0x194>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8000f7a:	f108 0b20 	add.w	fp, r8, #32
 8000f7e:	e006      	b.n	8000f8e <memoriaInit+0x4a>
				puntaje_msb = buffer[i];
 8000f80:	7837      	ldrb	r7, [r6, #0]
					}
				}
			}
			i++;

		}while(i != 40);
 8000f82:	2c28      	cmp	r4, #40	; 0x28
 8000f84:	d06f      	beq.n	8001066 <memoriaInit+0x122>
 8000f86:	3501      	adds	r5, #1
 8000f88:	3401      	adds	r4, #1
 8000f8a:	b2e4      	uxtb	r4, r4
 8000f8c:	3601      	adds	r6, #1
 8000f8e:	b2eb      	uxtb	r3, r5
			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 8000f90:	2b06      	cmp	r3, #6
 8000f92:	d0f5      	beq.n	8000f80 <memoriaInit+0x3c>
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	f000 8096 	beq.w	80010c6 <memoriaInit+0x182>
 8000f9a:	f1a3 020e 	sub.w	r2, r3, #14
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	2a19      	cmp	r2, #25
 8000fa2:	d80a      	bhi.n	8000fba <memoriaInit+0x76>
 8000fa4:	f1a3 010e 	sub.w	r1, r3, #14
 8000fa8:	b2c9      	uxtb	r1, r1
 8000faa:	2201      	movs	r2, #1
 8000fac:	408a      	lsls	r2, r1
 8000fae:	f012 3f02 	tst.w	r2, #33686018	; 0x2020202
 8000fb2:	d12e      	bne.n	8001012 <memoriaInit+0xce>
 8000fb4:	f012 3f01 	tst.w	r2, #16843009	; 0x1010101
 8000fb8:	d1e2      	bne.n	8000f80 <memoriaInit+0x3c>
				if( (buff_nombre[j] != '\0') && permiso==true){
 8000fba:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8000fbe:	446a      	add	r2, sp
 8000fc0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	d0dc      	beq.n	8000f82 <memoriaInit+0x3e>
 8000fc8:	f1bc 0f01 	cmp.w	ip, #1
 8000fcc:	d1d9      	bne.n	8000f82 <memoriaInit+0x3e>
					buff_nombre[j]  = buffer[i];;
 8000fce:	f896 9000 	ldrb.w	r9, [r6]
 8000fd2:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8000fd6:	eb0d 0102 	add.w	r1, sp, r2
 8000fda:	f801 9c08 	strb.w	r9, [r1, #-8]
					if(buff_nombre[j] == '\0'){
 8000fde:	f1b9 0f00 	cmp.w	r9, #0
 8000fe2:	d169      	bne.n	80010b8 <memoriaInit+0x174>
						if((i>=0 && i<6)){
 8000fe4:	2b25      	cmp	r3, #37	; 0x25
 8000fe6:	d845      	bhi.n	8001074 <memoriaInit+0x130>
 8000fe8:	e8df f003 	tbb	[pc, r3]
 8000fec:	40404040 	.word	0x40404040
 8000ff0:	44444040 	.word	0x44444040
 8000ff4:	4f4f4f4f 	.word	0x4f4f4f4f
 8000ff8:	44444f4f 	.word	0x44444f4f
 8000ffc:	55555555 	.word	0x55555555
 8001000:	44445555 	.word	0x44445555
 8001004:	5b5b5b5b 	.word	0x5b5b5b5b
 8001008:	44445b5b 	.word	0x44445b5b
 800100c:	61616161 	.word	0x61616161
 8001010:	6161      	.short	0x6161
				puntaje_lsb = buffer[i];
 8001012:	7832      	ldrb	r2, [r6, #0]
				switch(i){
 8001014:	3b07      	subs	r3, #7
 8001016:	2b20      	cmp	r3, #32
 8001018:	d851      	bhi.n	80010be <memoriaInit+0x17a>
 800101a:	e8df f003 	tbb	[pc, r3]
 800101e:	5055      	.short	0x5055
 8001020:	50505050 	.word	0x50505050
 8001024:	50115050 	.word	0x50115050
 8001028:	50505050 	.word	0x50505050
 800102c:	50165050 	.word	0x50165050
 8001030:	50505050 	.word	0x50505050
 8001034:	501b5050 	.word	0x501b5050
 8001038:	50505050 	.word	0x50505050
 800103c:	5050      	.short	0x5050
 800103e:	20          	.byte	0x20
 800103f:	00          	.byte	0x00
					getPuntajes(1)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001040:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8001044:	f8a8 200e 	strh.w	r2, [r8, #14]
					break;
 8001048:	e042      	b.n	80010d0 <memoriaInit+0x18c>
					getPuntajes(2)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 800104a:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 800104e:	f8a8 2016 	strh.w	r2, [r8, #22]
					break;
 8001052:	e03d      	b.n	80010d0 <memoriaInit+0x18c>
					getPuntajes(3)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001054:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8001058:	f8a8 201e 	strh.w	r2, [r8, #30]
					break;
 800105c:	e038      	b.n	80010d0 <memoriaInit+0x18c>
					getPuntajes(4)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 800105e:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <memoriaInit+0x198>)
 8001064:	84da      	strh	r2, [r3, #38]	; 0x26


}
 8001066:	b00d      	add	sp, #52	; 0x34
 8001068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							strcpy(getPuntajes(0)->nombre, buff_nombre);
 800106c:	a90a      	add	r1, sp, #40	; 0x28
 800106e:	4640      	mov	r0, r8
 8001070:	f006 ff31 	bl	8007ed6 <strcpy>
						strcpy(buff_nombre, "      ");
 8001074:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8001078:	900a      	str	r0, [sp, #40]	; 0x28
 800107a:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 800107e:	0c09      	lsrs	r1, r1, #16
 8001080:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
						permiso = false;
 8001084:	46cc      	mov	ip, r9
						j = 0;
 8001086:	4648      	mov	r0, r9
 8001088:	e77b      	b.n	8000f82 <memoriaInit+0x3e>
							strcpy(getPuntajes(1)->nombre, buff_nombre);
 800108a:	a90a      	add	r1, sp, #40	; 0x28
 800108c:	f108 0008 	add.w	r0, r8, #8
 8001090:	f006 ff21 	bl	8007ed6 <strcpy>
 8001094:	e7ee      	b.n	8001074 <memoriaInit+0x130>
							strcpy(getPuntajes(2)->nombre, buff_nombre);
 8001096:	a90a      	add	r1, sp, #40	; 0x28
 8001098:	f108 0010 	add.w	r0, r8, #16
 800109c:	f006 ff1b 	bl	8007ed6 <strcpy>
 80010a0:	e7e8      	b.n	8001074 <memoriaInit+0x130>
							strcpy(getPuntajes(3)->nombre, buff_nombre);
 80010a2:	a90a      	add	r1, sp, #40	; 0x28
 80010a4:	f108 0018 	add.w	r0, r8, #24
 80010a8:	f006 ff15 	bl	8007ed6 <strcpy>
 80010ac:	e7e2      	b.n	8001074 <memoriaInit+0x130>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 80010ae:	a90a      	add	r1, sp, #40	; 0x28
 80010b0:	4658      	mov	r0, fp
 80010b2:	f006 ff10 	bl	8007ed6 <strcpy>
 80010b6:	e7dd      	b.n	8001074 <memoriaInit+0x130>
						j++;
 80010b8:	3001      	adds	r0, #1
 80010ba:	b2c0      	uxtb	r0, r0
 80010bc:	e761      	b.n	8000f82 <memoriaInit+0x3e>
				switch(i){
 80010be:	2700      	movs	r7, #0
 80010c0:	f04f 0c01 	mov.w	ip, #1
 80010c4:	e75d      	b.n	8000f82 <memoriaInit+0x3e>
				puntaje_lsb = buffer[i];
 80010c6:	7832      	ldrb	r2, [r6, #0]
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010c8:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 80010cc:	f8a8 2006 	strh.w	r2, [r8, #6]
						j = 0;
 80010d0:	2700      	movs	r7, #0
 80010d2:	f04f 0c01 	mov.w	ip, #1
 80010d6:	e756      	b.n	8000f86 <memoriaInit+0x42>
 80010d8:	08009488 	.word	0x08009488
 80010dc:	20000680 	.word	0x20000680

080010e0 <Ordenamiento_Puntajes>:
}*/


//Hay que corregir el ordenamiento de puntajes.

void Ordenamiento_Puntajes(){
 80010e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010e4:	b08f      	sub	sp, #60	; 0x3c
	uint8_t indice_subvector = 1;
	uint16_t auxiliar;


	//Copio los nombres y los puntajes porque voy a reescribir getPuntajes()
	for(uint8_t i=0;i<5;i++){
 80010e6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80011a4 <Ordenamiento_Puntajes+0xc4>
 80010ea:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 80010ee:	ad03      	add	r5, sp, #12
 80010f0:	f109 0728 	add.w	r7, r9, #40	; 0x28
void Ordenamiento_Puntajes(){
 80010f4:	4656      	mov	r6, sl
 80010f6:	464c      	mov	r4, r9

		vector[i] = getPuntajes(i)->puntaje;
 80010f8:	88e3      	ldrh	r3, [r4, #6]
 80010fa:	f826 3b02 	strh.w	r3, [r6], #2
		strcpy(buff_nombre[i], getPuntajes(i)->nombre);
 80010fe:	4621      	mov	r1, r4
 8001100:	4628      	mov	r0, r5
 8001102:	f006 fee8 	bl	8007ed6 <strcpy>
	for(uint8_t i=0;i<5;i++){
 8001106:	3408      	adds	r4, #8
 8001108:	3506      	adds	r5, #6
 800110a:	42bc      	cmp	r4, r7
 800110c:	d1f4      	bne.n	80010f8 <Ordenamiento_Puntajes+0x18>
 800110e:	2402      	movs	r4, #2
 8001110:	2001      	movs	r0, #1
 8001112:	e003      	b.n	800111c <Ordenamiento_Puntajes+0x3c>
 8001114:	3001      	adds	r0, #1
 8001116:	b2c0      	uxtb	r0, r0
 8001118:	3401      	adds	r4, #1
 800111a:	b2e4      	uxtb	r4, r4
	}

	//Ordenamiento de mayor a menor xd.
	do{

			for(uint8_t j=indice_subvector; j > 0; j--){
 800111c:	2800      	cmp	r0, #0
 800111e:	d0f9      	beq.n	8001114 <Ordenamiento_Puntajes+0x34>
 8001120:	ab0b      	add	r3, sp, #44	; 0x2c
 8001122:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001126:	4605      	mov	r5, r0

					if(vector[j] > vector[j-1]){
 8001128:	8819      	ldrh	r1, [r3, #0]
 800112a:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800112e:	4291      	cmp	r1, r2

						auxiliar = vector[j-1];
						vector[j-1] = vector[j];
 8001130:	bf84      	itt	hi
 8001132:	8019      	strhhi	r1, [r3, #0]
						vector[j] = auxiliar;
 8001134:	805a      	strhhi	r2, [r3, #2]
			for(uint8_t j=indice_subvector; j > 0; j--){
 8001136:	3d01      	subs	r5, #1
 8001138:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800113c:	d1f4      	bne.n	8001128 <Ordenamiento_Puntajes+0x48>

			}

		indice_subvector++;

	}while(indice_subvector != 5);
 800113e:	2c05      	cmp	r4, #5
 8001140:	d1e8      	bne.n	8001114 <Ordenamiento_Puntajes+0x34>
 8001142:	f10a 0b0a 	add.w	fp, sl, #10
		finalizado = true;

			uint8_t j=0;
			do{

				if(getPuntajes(j)->puntaje == vector[k]){
 8001146:	4e17      	ldr	r6, [pc, #92]	; (80011a4 <Ordenamiento_Puntajes+0xc4>)
 8001148:	f83a 8b02 	ldrh.w	r8, [sl], #2
 800114c:	88f3      	ldrh	r3, [r6, #6]
 800114e:	4543      	cmp	r3, r8
 8001150:	d024      	beq.n	800119c <Ordenamiento_Puntajes+0xbc>
			uint8_t j=0;
 8001152:	462c      	mov	r4, r5

					getPuntajes(j)->puntaje = getPuntajes(k)->puntaje;
					getPuntajes(k)->puntaje = vector[k];
					finalizado = false;
				}
				j++;
 8001154:	3401      	adds	r4, #1
 8001156:	b2e4      	uxtb	r4, r4
	return &Puntajes[indice];
 8001158:	4627      	mov	r7, r4
				if(getPuntajes(j)->puntaje == vector[k]){
 800115a:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 800115e:	88db      	ldrh	r3, [r3, #6]
 8001160:	4543      	cmp	r3, r8
 8001162:	d1f7      	bne.n	8001154 <Ordenamiento_Puntajes+0x74>
	return &Puntajes[indice];
 8001164:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
					strcpy(buff_aux, getPuntajes(k)->nombre);
 8001168:	4649      	mov	r1, r9
 800116a:	a801      	add	r0, sp, #4
 800116c:	f006 feb3 	bl	8007ed6 <strcpy>
					strcpy(getPuntajes(k)->nombre, getPuntajes(j)->nombre);
 8001170:	4621      	mov	r1, r4
 8001172:	4648      	mov	r0, r9
 8001174:	f006 feaf 	bl	8007ed6 <strcpy>
					strcpy(getPuntajes(j)->nombre, buff_aux);
 8001178:	a901      	add	r1, sp, #4
 800117a:	4620      	mov	r0, r4
 800117c:	f006 feab 	bl	8007ed6 <strcpy>
					getPuntajes(j)->puntaje = getPuntajes(k)->puntaje;
 8001180:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8001184:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
 8001188:	80fb      	strh	r3, [r7, #6]
					getPuntajes(k)->puntaje = vector[k];
 800118a:	f8a9 8006 	strh.w	r8, [r9, #6]
	for(uint8_t k=0;k<5;k++){
 800118e:	f109 0908 	add.w	r9, r9, #8
 8001192:	45da      	cmp	sl, fp
 8001194:	d1d8      	bne.n	8001148 <Ordenamiento_Puntajes+0x68>
	}




}
 8001196:	b00f      	add	sp, #60	; 0x3c
 8001198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return &Puntajes[indice];
 800119c:	4634      	mov	r4, r6
 800119e:	2700      	movs	r7, #0
 80011a0:	e7e2      	b.n	8001168 <Ordenamiento_Puntajes+0x88>
 80011a2:	bf00      	nop
 80011a4:	20000680 	.word	0x20000680

080011a8 <menuInit>:

	return &menu;
}


void menuInit(){
 80011a8:	b510      	push	{r4, lr}

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 80011aa:	f000 ff01 	bl	8001fb0 <SSD1306_Init>
	SSD1306_Clear();
 80011ae:	f000 fef7 	bl	8001fa0 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 80011b2:	f000 fecf 	bl	8001f54 <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 80011b6:	f7fe ffe3 	bl	8000180 <playerInit>
	InvaderInit();
 80011ba:	f7ff f81f 	bl	80001fc <InvaderInit>
	disparoInit();
 80011be:	f7ff f929 	bl	8000414 <disparoInit>

	//Se inicializan las dificultades
	getDificultad()->velocidad_horizontal = 8;
 80011c2:	f7fe ffd1 	bl	8000168 <getDificultad>
 80011c6:	2308      	movs	r3, #8
 80011c8:	7003      	strb	r3, [r0, #0]
	getDificultad()->velocidad_bajada = 1;
 80011ca:	f7fe ffcd 	bl	8000168 <getDificultad>
 80011ce:	2401      	movs	r4, #1
 80011d0:	7044      	strb	r4, [r0, #1]
	getDificultad()->velocidad_disparo_aliens = 3;
 80011d2:	f7fe ffc9 	bl	8000168 <getDificultad>
 80011d6:	2303      	movs	r3, #3
 80011d8:	7083      	strb	r3, [r0, #2]


	//Se inicializa el cursor de la pantalla principal.
	//getMenu()->menuActual =  guardar_nombre;
	//getMenu()->menuActual = menu_principal;
	getMenu()->menuActual = juego;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <menuInit+0x4c>)
 80011dc:	701c      	strb	r4, [r3, #0]
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80011de:	2226      	movs	r2, #38	; 0x26
 80011e0:	705a      	strb	r2, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 80011e2:	2209      	movs	r2, #9
 80011e4:	711a      	strb	r2, [r3, #4]
	getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 80011e6:	221b      	movs	r2, #27
 80011e8:	715a      	strb	r2, [r3, #5]
	getMenu()->GuardarNombre.indice = 0;
 80011ea:	2200      	movs	r2, #0
 80011ec:	731a      	strb	r2, [r3, #12]



	//Para las variables de juego
	getMenu()->juego.flag = 0;
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]


}
 80011f2:	bd10      	pop	{r4, pc}
 80011f4:	200006a8 	.word	0x200006a8

080011f8 <menuReset>:
	}

}


void menuReset(){
 80011f8:	b508      	push	{r3, lr}

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 80011fa:	f7fe ffc1 	bl	8000180 <playerInit>
	InvaderInit();
 80011fe:	f7fe fffd 	bl	80001fc <InvaderInit>
	disparoInit();
 8001202:	f7ff f907 	bl	8000414 <disparoInit>

	//Se reinician las dificultades al nivel 1
	getDificultad()->velocidad_horizontal = 8;
 8001206:	f7fe ffaf 	bl	8000168 <getDificultad>
 800120a:	2308      	movs	r3, #8
 800120c:	7003      	strb	r3, [r0, #0]
	getDificultad()->velocidad_bajada = 1;
 800120e:	f7fe ffab 	bl	8000168 <getDificultad>
 8001212:	2301      	movs	r3, #1
 8001214:	7043      	strb	r3, [r0, #1]
	getDificultad()->velocidad_disparo_aliens = 3;
 8001216:	f7fe ffa7 	bl	8000168 <getDificultad>
 800121a:	2303      	movs	r3, #3
 800121c:	7083      	strb	r3, [r0, #2]


	//Para las variables de juego
	getMenu()->juego.flag = 0;
 800121e:	4b03      	ldr	r3, [pc, #12]	; (800122c <menuReset+0x34>)
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2020 	strb.w	r2, [r3, #32]

	//Se inicializa el cursor de la pantalla principal.
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001226:	2226      	movs	r2, #38	; 0x26
 8001228:	705a      	strb	r2, [r3, #1]

}
 800122a:	bd08      	pop	{r3, pc}
 800122c:	200006a8 	.word	0x200006a8

08001230 <GuardarNombreReset>:


void GuardarNombreReset(){

	//Se inicializa el cursor de la pantalla Guardado de nombre
	getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <GuardarNombreReset+0x1c>)
 8001232:	2209      	movs	r2, #9
 8001234:	711a      	strb	r2, [r3, #4]
	getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001236:	221b      	movs	r2, #27
 8001238:	715a      	strb	r2, [r3, #5]
	getMenu()->GuardarNombre.indice = 0;
 800123a:	2200      	movs	r2, #0
 800123c:	731a      	strb	r2, [r3, #12]
	strcpy(getMenu()->GuardarNombre.nombre,"     ");
 800123e:	4a04      	ldr	r2, [pc, #16]	; (8001250 <GuardarNombreReset+0x20>)
 8001240:	6810      	ldr	r0, [r2, #0]
 8001242:	f8c3 0006 	str.w	r0, [r3, #6]
 8001246:	8892      	ldrh	r2, [r2, #4]
 8001248:	815a      	strh	r2, [r3, #10]

}
 800124a:	4770      	bx	lr
 800124c:	200006a8 	.word	0x200006a8
 8001250:	08009490 	.word	0x08009490

08001254 <menuActualizar>:
void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8001254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001258:	b08d      	sub	sp, #52	; 0x34
 800125a:	9003      	str	r0, [sp, #12]
 800125c:	460d      	mov	r5, r1
 800125e:	4616      	mov	r6, r2
	switch(getMenu()->menuActual){
 8001260:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <menuActualizar+0x20c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b05      	cmp	r3, #5
 8001266:	f200 81ba 	bhi.w	80015de <menuActualizar+0x38a>
 800126a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800126e:	0006      	.short	0x0006
 8001270:	008a0046 	.word	0x008a0046
 8001274:	010b00ac 	.word	0x010b00ac
 8001278:	02cb      	.short	0x02cb
		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 800127a:	2401      	movs	r4, #1
 800127c:	9401      	str	r4, [sp, #4]
 800127e:	2320      	movs	r3, #32
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2340      	movs	r3, #64	; 0x40
 8001284:	4a77      	ldr	r2, [pc, #476]	; (8001464 <menuActualizar+0x210>)
 8001286:	2100      	movs	r1, #0
 8001288:	2023      	movs	r0, #35	; 0x23
 800128a:	f000 fb63 	bl	8001954 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(45, 35);
 800128e:	2123      	movs	r1, #35	; 0x23
 8001290:	202d      	movs	r0, #45	; 0x2d
 8001292:	f000 fbab 	bl	80019ec <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8001296:	4f74      	ldr	r7, [pc, #464]	; (8001468 <menuActualizar+0x214>)
 8001298:	4622      	mov	r2, r4
 800129a:	4639      	mov	r1, r7
 800129c:	4873      	ldr	r0, [pc, #460]	; (800146c <menuActualizar+0x218>)
 800129e:	f000 fbf7 	bl	8001a90 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 80012a2:	212d      	movs	r1, #45	; 0x2d
 80012a4:	4608      	mov	r0, r1
 80012a6:	f000 fba1 	bl	80019ec <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80012aa:	4622      	mov	r2, r4
 80012ac:	4639      	mov	r1, r7
 80012ae:	4870      	ldr	r0, [pc, #448]	; (8001470 <menuActualizar+0x21c>)
 80012b0:	f000 fbee 	bl	8001a90 <SSD1306_Puts>
		if(y == arriba){
 80012b4:	b9bd      	cbnz	r5, 80012e6 <menuActualizar+0x92>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80012b6:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <menuActualizar+0x20c>)
 80012b8:	2226      	movs	r2, #38	; 0x26
 80012ba:	705a      	strb	r2, [r3, #1]
		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 80012bc:	2301      	movs	r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	4967      	ldr	r1, [pc, #412]	; (8001460 <menuActualizar+0x20c>)
 80012c2:	7849      	ldrb	r1, [r1, #1]
 80012c4:	2027      	movs	r0, #39	; 0x27
 80012c6:	f000 fce3 	bl	8001c90 <SSD1306_DrawCircle>
		switch(boton){
 80012ca:	2e01      	cmp	r6, #1
 80012cc:	f040 8187 	bne.w	80015de <menuActualizar+0x38a>
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 80012d0:	4b63      	ldr	r3, [pc, #396]	; (8001460 <menuActualizar+0x20c>)
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	2b26      	cmp	r3, #38	; 0x26
 80012d6:	d00c      	beq.n	80012f2 <menuActualizar+0x9e>
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 80012d8:	2b30      	cmp	r3, #48	; 0x30
 80012da:	f040 8180 	bne.w	80015de <menuActualizar+0x38a>
			    getMenu()->menuActual = puntajes;
 80012de:	4b60      	ldr	r3, [pc, #384]	; (8001460 <menuActualizar+0x20c>)
 80012e0:	2203      	movs	r2, #3
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e17b      	b.n	80015de <menuActualizar+0x38a>
		else if(y == abajo){
 80012e6:	2d01      	cmp	r5, #1
 80012e8:	d1e8      	bne.n	80012bc <menuActualizar+0x68>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <menuActualizar+0x20c>)
 80012ec:	2230      	movs	r2, #48	; 0x30
 80012ee:	705a      	strb	r2, [r3, #1]
 80012f0:	e7e4      	b.n	80012bc <menuActualizar+0x68>
				getMenu()->menuActual = juego;
 80012f2:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <menuActualizar+0x20c>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e171      	b.n	80015de <menuActualizar+0x38a>
		plotPlayer(x, getPlayer());
 80012fa:	f7fe ff29 	bl	8000150 <getPlayer>
 80012fe:	4601      	mov	r1, r0
 8001300:	9803      	ldr	r0, [sp, #12]
 8001302:	f7fe ff45 	bl	8000190 <plotPlayer>
		plotAliens();
 8001306:	f7fe ff99 	bl	800023c <plotAliens>
		disparoAliens();
 800130a:	f7ff f92f 	bl	800056c <disparoAliens>
		if( getDisparoAliens()->numero_disparos == 0){
 800130e:	f7fe ff27 	bl	8000160 <getDisparoAliens>
 8001312:	78c3      	ldrb	r3, [r0, #3]
 8001314:	b913      	cbnz	r3, 800131c <menuActualizar+0xc8>
			getMenu()->menuActual = progresion_niveles;
 8001316:	4b52      	ldr	r3, [pc, #328]	; (8001460 <menuActualizar+0x20c>)
 8001318:	2202      	movs	r2, #2
 800131a:	701a      	strb	r2, [r3, #0]
		TickType_t Tiempo_Actual = xTaskGetTickCount();
 800131c:	f005 fafe 	bl	800691c <xTaskGetTickCount>
 8001320:	4604      	mov	r4, r0
		if(getMenu()->juego.flag == 0){
 8001322:	4b4f      	ldr	r3, [pc, #316]	; (8001460 <menuActualizar+0x20c>)
 8001324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001328:	b16b      	cbz	r3, 8001346 <menuActualizar+0xf2>
		if(Tiempo_Actual - getMenu()->juego.retrasoJuego_GameOver > pdMS_TO_TICKS(500)){
 800132a:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <menuActualizar+0x20c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	1ae4      	subs	r4, r4, r3
 8001330:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8001334:	d902      	bls.n	800133c <menuActualizar+0xe8>
			getMenu()->menuActual = game_over;
 8001336:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <menuActualizar+0x20c>)
 8001338:	2205      	movs	r2, #5
 800133a:	701a      	strb	r2, [r3, #0]
		if(boton == true){
 800133c:	2e01      	cmp	r6, #1
 800133e:	d018      	beq.n	8001372 <menuActualizar+0x11e>
		disparar();
 8001340:	f7ff f878 	bl	8000434 <disparar>
		break;
 8001344:	e14b      	b.n	80015de <menuActualizar+0x38a>
			if(getPlayer()->vivo == false){
 8001346:	f7fe ff03 	bl	8000150 <getPlayer>
 800134a:	7883      	ldrb	r3, [r0, #2]
 800134c:	b113      	cbz	r3, 8001354 <menuActualizar+0x100>
				getMenu()->juego.retrasoJuego_GameOver = Tiempo_Actual;
 800134e:	4b44      	ldr	r3, [pc, #272]	; (8001460 <menuActualizar+0x20c>)
 8001350:	61dc      	str	r4, [r3, #28]
		if(Tiempo_Actual - getMenu()->juego.retrasoJuego_GameOver > pdMS_TO_TICKS(500)){
 8001352:	e7f3      	b.n	800133c <menuActualizar+0xe8>
				getMenu()->juego.retrasoJuego_GameOver = xTaskGetTickCount();
 8001354:	f005 fae2 	bl	800691c <xTaskGetTickCount>
 8001358:	4b41      	ldr	r3, [pc, #260]	; (8001460 <menuActualizar+0x20c>)
 800135a:	61d8      	str	r0, [r3, #28]
				getMenu()->juego.flag = 1;
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
				  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001362:	2100      	movs	r1, #0
 8001364:	4843      	ldr	r0, [pc, #268]	; (8001474 <menuActualizar+0x220>)
 8001366:	f003 fd37 	bl	8004dd8 <HAL_TIM_PWM_Start>
				  HAL_TIM_Base_Start_IT(&htim3);
 800136a:	4843      	ldr	r0, [pc, #268]	; (8001478 <menuActualizar+0x224>)
 800136c:	f003 fa12 	bl	8004794 <HAL_TIM_Base_Start_IT>
 8001370:	e7db      	b.n	800132a <menuActualizar+0xd6>
				getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 8001372:	f7fe fef1 	bl	8000158 <getDisparo>
 8001376:	78c4      	ldrb	r4, [r0, #3]
 8001378:	f7fe feee 	bl	8000158 <getDisparo>
 800137c:	3401      	adds	r4, #1
 800137e:	70c4      	strb	r4, [r0, #3]
 8001380:	e7de      	b.n	8001340 <menuActualizar+0xec>
		SSD1306_GotoXY(15, 15);
 8001382:	210f      	movs	r1, #15
 8001384:	4608      	mov	r0, r1
 8001386:	f000 fb31 	bl	80019ec <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJE ACTUAL", &Font_7x10, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	4936      	ldr	r1, [pc, #216]	; (8001468 <menuActualizar+0x214>)
 800138e:	483b      	ldr	r0, [pc, #236]	; (800147c <menuActualizar+0x228>)
 8001390:	f000 fb7e 	bl	8001a90 <SSD1306_Puts>
		getDificultad()->velocidad_horizontal = 6;
 8001394:	f7fe fee8 	bl	8000168 <getDificultad>
 8001398:	2306      	movs	r3, #6
 800139a:	7003      	strb	r3, [r0, #0]
		getDificultad()->velocidad_bajada = 2;
 800139c:	f7fe fee4 	bl	8000168 <getDificultad>
 80013a0:	2302      	movs	r3, #2
 80013a2:	7043      	strb	r3, [r0, #1]
		getDificultad()->velocidad_disparo_aliens = 3;
 80013a4:	f7fe fee0 	bl	8000168 <getDificultad>
 80013a8:	2303      	movs	r3, #3
 80013aa:	7083      	strb	r3, [r0, #2]
		playerInit();
 80013ac:	f7fe fee8 	bl	8000180 <playerInit>
		InvaderInit();
 80013b0:	f7fe ff24 	bl	80001fc <InvaderInit>
		disparoInit();
 80013b4:	f7ff f82e 	bl	8000414 <disparoInit>
		if(y == arriba){
 80013b8:	2d00      	cmp	r5, #0
 80013ba:	f040 8110 	bne.w	80015de <menuActualizar+0x38a>
			getMenu()->menuActual = juego;
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <menuActualizar+0x20c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e10b      	b.n	80015de <menuActualizar+0x38a>
		SSD1306_GotoXY(35, 0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	2023      	movs	r0, #35	; 0x23
 80013ca:	f000 fb0f 	bl	80019ec <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	4925      	ldr	r1, [pc, #148]	; (8001468 <menuActualizar+0x214>)
 80013d2:	4827      	ldr	r0, [pc, #156]	; (8001470 <menuActualizar+0x21c>)
 80013d4:	f000 fb5c 	bl	8001a90 <SSD1306_Puts>
		osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <menuActualizar+0x22c>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f003 ffae 	bl	8005340 <osMutexAcquire>
 80013e4:	240d      	movs	r4, #13
 80013e6:	2600      	movs	r6, #0
			SSD1306_GotoXY(15, posicion);
 80013e8:	f04f 090f 	mov.w	r9, #15
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 80013ec:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001468 <menuActualizar+0x214>
 80013f0:	2701      	movs	r7, #1
			SSD1306_GotoXY(15, posicion);
 80013f2:	4621      	mov	r1, r4
 80013f4:	4648      	mov	r0, r9
 80013f6:	f000 faf9 	bl	80019ec <SSD1306_GotoXY>
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 80013fa:	b2f0      	uxtb	r0, r6
 80013fc:	f7ff fd0c 	bl	8000e18 <getPuntajes>
 8001400:	463a      	mov	r2, r7
 8001402:	4641      	mov	r1, r8
 8001404:	f000 fb44 	bl	8001a90 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001408:	3601      	adds	r6, #1
 800140a:	340a      	adds	r4, #10
 800140c:	b2a4      	uxth	r4, r4
 800140e:	2e05      	cmp	r6, #5
 8001410:	d1ef      	bne.n	80013f2 <menuActualizar+0x19e>
 8001412:	240d      	movs	r4, #13
 8001414:	2600      	movs	r6, #0
			SSD1306_GotoXY(90, posicion);
 8001416:	f04f 085a 	mov.w	r8, #90	; 0x5a
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 800141a:	4f13      	ldr	r7, [pc, #76]	; (8001468 <menuActualizar+0x214>)
			SSD1306_GotoXY(90, posicion);
 800141c:	4621      	mov	r1, r4
 800141e:	4640      	mov	r0, r8
 8001420:	f000 fae4 	bl	80019ec <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 8001424:	b2f0      	uxtb	r0, r6
 8001426:	f7ff fcf7 	bl	8000e18 <getPuntajes>
 800142a:	220a      	movs	r2, #10
 800142c:	a909      	add	r1, sp, #36	; 0x24
 800142e:	88c0      	ldrh	r0, [r0, #6]
 8001430:	f006 fb4e 	bl	8007ad0 <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	4639      	mov	r1, r7
 8001438:	a809      	add	r0, sp, #36	; 0x24
 800143a:	f000 fb29 	bl	8001a90 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 800143e:	3601      	adds	r6, #1
 8001440:	340a      	adds	r4, #10
 8001442:	b2a4      	uxth	r4, r4
 8001444:	2e05      	cmp	r6, #5
 8001446:	d1e9      	bne.n	800141c <menuActualizar+0x1c8>
		osMutexRelease(mutexPuntajesHandle);
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <menuActualizar+0x22c>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	f003 ffba 	bl	80053c4 <osMutexRelease>
		switch(y){
 8001450:	2d00      	cmp	r5, #0
 8001452:	f040 80c4 	bne.w	80015de <menuActualizar+0x38a>
				getMenu()->menuActual = menu_principal;
 8001456:	4b02      	ldr	r3, [pc, #8]	; (8001460 <menuActualizar+0x20c>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
			break;
 800145c:	e0bf      	b.n	80015de <menuActualizar+0x38a>
 800145e:	bf00      	nop
 8001460:	200006a8 	.word	0x200006a8
 8001464:	080094dc 	.word	0x080094dc
 8001468:	20000000 	.word	0x20000000
 800146c:	08009498 	.word	0x08009498
 8001470:	080094a0 	.word	0x080094a0
 8001474:	200005d8 	.word	0x200005d8
 8001478:	20000620 	.word	0x20000620
 800147c:	080094ac 	.word	0x080094ac
 8001480:	20000668 	.word	0x20000668
		char buff_qwerty[] = "qwertyuiop";
 8001484:	4ab0      	ldr	r2, [pc, #704]	; (8001748 <menuActualizar+0x4f4>)
 8001486:	ab06      	add	r3, sp, #24
 8001488:	ca07      	ldmia	r2, {r0, r1, r2}
 800148a:	c303      	stmia	r3!, {r0, r1}
 800148c:	f823 2b02 	strh.w	r2, [r3], #2
 8001490:	0c12      	lsrs	r2, r2, #16
 8001492:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 8001494:	4aad      	ldr	r2, [pc, #692]	; (800174c <menuActualizar+0x4f8>)
 8001496:	ab09      	add	r3, sp, #36	; 0x24
 8001498:	ca07      	ldmia	r2, {r0, r1, r2}
 800149a:	c303      	stmia	r3!, {r0, r1}
 800149c:	f823 2b02 	strh.w	r2, [r3], #2
 80014a0:	0c12      	lsrs	r2, r2, #16
 80014a2:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 80014a4:	4aaa      	ldr	r2, [pc, #680]	; (8001750 <menuActualizar+0x4fc>)
 80014a6:	ab04      	add	r3, sp, #16
 80014a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ac:	e883 0003 	stmia.w	r3, {r0, r1}
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 80014b0:	2301      	movs	r3, #1
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	230f      	movs	r3, #15
 80014b6:	223c      	movs	r2, #60	; 0x3c
 80014b8:	2100      	movs	r1, #0
 80014ba:	201e      	movs	r0, #30
 80014bc:	f000 fbab 	bl	8001c16 <SSD1306_DrawRectangle>
			for(uint8_t i=0;i<10;i++){
 80014c0:	f10d 0a18 	add.w	sl, sp, #24
 80014c4:	f10d 0924 	add.w	r9, sp, #36	; 0x24
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 80014c8:	2406      	movs	r4, #6
				SSD1306_GotoXY(posicion_x, 23);
 80014ca:	f04f 0b17 	mov.w	fp, #23
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 80014ce:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8001754 <menuActualizar+0x500>
 80014d2:	2701      	movs	r7, #1
				SSD1306_GotoXY(posicion_x, 23);
 80014d4:	4659      	mov	r1, fp
 80014d6:	4620      	mov	r0, r4
 80014d8:	f000 fa88 	bl	80019ec <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 80014dc:	463a      	mov	r2, r7
 80014de:	4641      	mov	r1, r8
 80014e0:	f81a 0b01 	ldrb.w	r0, [sl], #1
 80014e4:	f000 fa88 	bl	80019f8 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 80014e8:	2126      	movs	r1, #38	; 0x26
 80014ea:	4620      	mov	r0, r4
 80014ec:	f000 fa7e 	bl	80019ec <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 80014f0:	463a      	mov	r2, r7
 80014f2:	4641      	mov	r1, r8
 80014f4:	f819 0b01 	ldrb.w	r0, [r9], #1
 80014f8:	f000 fa7e 	bl	80019f8 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 80014fc:	340c      	adds	r4, #12
 80014fe:	b2a4      	uxth	r4, r4
 8001500:	2c7e      	cmp	r4, #126	; 0x7e
 8001502:	d1e7      	bne.n	80014d4 <menuActualizar+0x280>
 8001504:	f10d 070f 	add.w	r7, sp, #15
 8001508:	241a      	movs	r4, #26
				SSD1306_GotoXY(posicion_x, 53);
 800150a:	f04f 0a35 	mov.w	sl, #53	; 0x35
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 800150e:	f8df 9244 	ldr.w	r9, [pc, #580]	; 8001754 <menuActualizar+0x500>
 8001512:	f04f 0801 	mov.w	r8, #1
				SSD1306_GotoXY(posicion_x, 53);
 8001516:	4651      	mov	r1, sl
 8001518:	4620      	mov	r0, r4
 800151a:	f000 fa67 	bl	80019ec <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 800151e:	4642      	mov	r2, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 8001526:	f000 fa67 	bl	80019f8 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 800152a:	340c      	adds	r4, #12
 800152c:	b2a4      	uxth	r4, r4
 800152e:	2c6e      	cmp	r4, #110	; 0x6e
 8001530:	d1f1      	bne.n	8001516 <menuActualizar+0x2c2>
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 8001532:	2401      	movs	r4, #1
 8001534:	9400      	str	r4, [sp, #0]
 8001536:	2310      	movs	r3, #16
 8001538:	461a      	mov	r2, r3
 800153a:	2132      	movs	r1, #50	; 0x32
 800153c:	2003      	movs	r0, #3
 800153e:	f000 fb6a 	bl	8001c16 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 8001542:	2135      	movs	r1, #53	; 0x35
 8001544:	2008      	movs	r0, #8
 8001546:	f000 fa51 	bl	80019ec <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 800154a:	4f82      	ldr	r7, [pc, #520]	; (8001754 <menuActualizar+0x500>)
 800154c:	4622      	mov	r2, r4
 800154e:	4639      	mov	r1, r7
 8001550:	2078      	movs	r0, #120	; 0x78
 8001552:	f000 fa51 	bl	80019f8 <SSD1306_Putc>
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 8001556:	9400      	str	r4, [sp, #0]
 8001558:	2310      	movs	r3, #16
 800155a:	461a      	mov	r2, r3
 800155c:	2132      	movs	r1, #50	; 0x32
 800155e:	206c      	movs	r0, #108	; 0x6c
 8001560:	f000 fb59 	bl	8001c16 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 8001564:	2135      	movs	r1, #53	; 0x35
 8001566:	2071      	movs	r0, #113	; 0x71
 8001568:	f000 fa40 	bl	80019ec <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 800156c:	4622      	mov	r2, r4
 800156e:	4639      	mov	r1, r7
 8001570:	203c      	movs	r0, #60	; 0x3c
 8001572:	f000 fa41 	bl	80019f8 <SSD1306_Putc>
			switch(y){
 8001576:	2d00      	cmp	r5, #0
 8001578:	f000 8177 	beq.w	800186a <menuActualizar+0x616>
 800157c:	42a5      	cmp	r5, r4
 800157e:	f000 815e 	beq.w	800183e <menuActualizar+0x5ea>
			Timenow = xTaskGetTickCount();
 8001582:	f005 f9cb 	bl	800691c <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001586:	4b74      	ldr	r3, [pc, #464]	; (8001758 <menuActualizar+0x504>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	1ac0      	subs	r0, r0, r3
 800158c:	2896      	cmp	r0, #150	; 0x96
 800158e:	d965      	bls.n	800165c <menuActualizar+0x408>
 8001590:	2d04      	cmp	r5, #4
 8001592:	d127      	bne.n	80015e4 <menuActualizar+0x390>
 8001594:	9d03      	ldr	r5, [sp, #12]
			Timenow = xTaskGetTickCount();
 8001596:	f005 f9c1 	bl	800691c <xTaskGetTickCount>
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 800159a:	4b6f      	ldr	r3, [pc, #444]	; (8001758 <menuActualizar+0x504>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	1ac0      	subs	r0, r0, r3
 80015a0:	2864      	cmp	r0, #100	; 0x64
 80015a2:	d902      	bls.n	80015aa <menuActualizar+0x356>
 80015a4:	9b03      	ldr	r3, [sp, #12]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d15a      	bne.n	8001660 <menuActualizar+0x40c>
			Timenow = xTaskGetTickCount();
 80015aa:	f005 f9b7 	bl	800691c <xTaskGetTickCount>
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 80015ae:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <menuActualizar+0x504>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	1ac0      	subs	r0, r0, r3
 80015b4:	2864      	cmp	r0, #100	; 0x64
 80015b6:	d902      	bls.n	80015be <menuActualizar+0x36a>
 80015b8:	2e00      	cmp	r6, #0
 80015ba:	f040 809b 	bne.w	80016f4 <menuActualizar+0x4a0>
				SSD1306_DrawFilledCircle(getMenu()->GuardarNombre.posicion_x,  getMenu()->GuardarNombre.posicion_y, 5, 1);
 80015be:	4c66      	ldr	r4, [pc, #408]	; (8001758 <menuActualizar+0x504>)
 80015c0:	2301      	movs	r3, #1
 80015c2:	2205      	movs	r2, #5
 80015c4:	7961      	ldrb	r1, [r4, #5]
 80015c6:	7920      	ldrb	r0, [r4, #4]
 80015c8:	f000 fbfd 	bl	8001dc6 <SSD1306_DrawFilledCircle>
				SSD1306_GotoXY(43, 5);
 80015cc:	2105      	movs	r1, #5
 80015ce:	202b      	movs	r0, #43	; 0x2b
 80015d0:	f000 fa0c 	bl	80019ec <SSD1306_GotoXY>
				SSD1306_Puts(getMenu()->GuardarNombre.nombre, &Font_7x10, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	495f      	ldr	r1, [pc, #380]	; (8001754 <menuActualizar+0x500>)
 80015d8:	1da0      	adds	r0, r4, #6
 80015da:	f000 fa59 	bl	8001a90 <SSD1306_Puts>
}
 80015de:	b00d      	add	sp, #52	; 0x34
 80015e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015e4:	9d03      	ldr	r5, [sp, #12]
 80015e6:	e148      	b.n	800187a <menuActualizar+0x626>
 80015e8:	2d01      	cmp	r5, #1
 80015ea:	d1d4      	bne.n	8001596 <menuActualizar+0x342>
 80015ec:	e133      	b.n	8001856 <menuActualizar+0x602>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 80015ee:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <menuActualizar+0x504>)
 80015f0:	221b      	movs	r2, #27
 80015f2:	715a      	strb	r2, [r3, #5]
							break;
 80015f4:	e7cf      	b.n	8001596 <menuActualizar+0x342>
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 80015f6:	4b58      	ldr	r3, [pc, #352]	; (8001758 <menuActualizar+0x504>)
 80015f8:	2209      	movs	r2, #9
 80015fa:	711a      	strb	r2, [r3, #4]
 80015fc:	e7cb      	b.n	8001596 <menuActualizar+0x342>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 80015fe:	4b56      	ldr	r3, [pc, #344]	; (8001758 <menuActualizar+0x504>)
 8001600:	2209      	movs	r2, #9
 8001602:	711a      	strb	r2, [r3, #4]
 8001604:	e7c7      	b.n	8001596 <menuActualizar+0x342>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001606:	4b54      	ldr	r3, [pc, #336]	; (8001758 <menuActualizar+0x504>)
 8001608:	222a      	movs	r2, #42	; 0x2a
 800160a:	715a      	strb	r2, [r3, #5]
							break;
 800160c:	2501      	movs	r5, #1
 800160e:	e7c2      	b.n	8001596 <menuActualizar+0x342>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 8001610:	4b51      	ldr	r3, [pc, #324]	; (8001758 <menuActualizar+0x504>)
 8001612:	2239      	movs	r2, #57	; 0x39
 8001614:	715a      	strb	r2, [r3, #5]
							div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 8001616:	791b      	ldrb	r3, [r3, #4]
 8001618:	3b09      	subs	r3, #9
 800161a:	b25b      	sxtb	r3, r3
							div = div/GUARDADO_OFFSET_X_CURSOR;
 800161c:	4a4f      	ldr	r2, [pc, #316]	; (800175c <menuActualizar+0x508>)
 800161e:	fb82 1203 	smull	r1, r2, r2, r3
 8001622:	17db      	asrs	r3, r3, #31
 8001624:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8001628:	b25b      	sxtb	r3, r3
							if(div == 0){
 800162a:	b923      	cbnz	r3, 8001636 <menuActualizar+0x3e2>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 800162c:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <menuActualizar+0x504>)
 800162e:	220b      	movs	r2, #11
 8001630:	711a      	strb	r2, [r3, #4]
 8001632:	2501      	movs	r5, #1
 8001634:	e7af      	b.n	8001596 <menuActualizar+0x342>
							else if(div == 8 || div == 9){
 8001636:	f1a3 0208 	sub.w	r2, r3, #8
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	2a01      	cmp	r2, #1
 800163e:	d908      	bls.n	8001652 <menuActualizar+0x3fe>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 8001640:	3b01      	subs	r3, #1
 8001642:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	331c      	adds	r3, #28
 800164a:	4a43      	ldr	r2, [pc, #268]	; (8001758 <menuActualizar+0x504>)
 800164c:	7113      	strb	r3, [r2, #4]
 800164e:	2501      	movs	r5, #1
 8001650:	e7a1      	b.n	8001596 <menuActualizar+0x342>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <menuActualizar+0x504>)
 8001654:	2274      	movs	r2, #116	; 0x74
 8001656:	711a      	strb	r2, [r3, #4]
 8001658:	2501      	movs	r5, #1
 800165a:	e79c      	b.n	8001596 <menuActualizar+0x342>
 800165c:	9d03      	ldr	r5, [sp, #12]
 800165e:	e79a      	b.n	8001596 <menuActualizar+0x342>
			getMenu()->GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 8001660:	f005 f95c 	bl	800691c <xTaskGetTickCount>
 8001664:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <menuActualizar+0x504>)
 8001666:	6118      	str	r0, [r3, #16]
			switch(mov){
 8001668:	2d02      	cmp	r5, #2
 800166a:	d021      	beq.n	80016b0 <menuActualizar+0x45c>
 800166c:	2d03      	cmp	r5, #3
 800166e:	d19c      	bne.n	80015aa <menuActualizar+0x356>
					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 8001670:	461a      	mov	r2, r3
 8001672:	791b      	ldrb	r3, [r3, #4]
 8001674:	3b0c      	subs	r3, #12
 8001676:	b2db      	uxtb	r3, r3
 8001678:	7113      	strb	r3, [r2, #4]
					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 800167a:	7952      	ldrb	r2, [r2, #5]
 800167c:	2a39      	cmp	r2, #57	; 0x39
 800167e:	d005      	beq.n	800168c <menuActualizar+0x438>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 8001680:	2bfd      	cmp	r3, #253	; 0xfd
 8001682:	d192      	bne.n	80015aa <menuActualizar+0x356>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <menuActualizar+0x504>)
 8001686:	2275      	movs	r2, #117	; 0x75
 8001688:	711a      	strb	r2, [r3, #4]
 800168a:	e78e      	b.n	80015aa <menuActualizar+0x356>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR) ){
 800168c:	2b10      	cmp	r3, #16
 800168e:	d007      	beq.n	80016a0 <menuActualizar+0x44c>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 8001690:	2b68      	cmp	r3, #104	; 0x68
 8001692:	d009      	beq.n	80016a8 <menuActualizar+0x454>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 8001694:	2bff      	cmp	r3, #255	; 0xff
 8001696:	d188      	bne.n	80015aa <menuActualizar+0x356>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <menuActualizar+0x504>)
 800169a:	220b      	movs	r2, #11
 800169c:	711a      	strb	r2, [r3, #4]
 800169e:	e784      	b.n	80015aa <menuActualizar+0x356>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <menuActualizar+0x504>)
 80016a2:	220b      	movs	r2, #11
 80016a4:	711a      	strb	r2, [r3, #4]
 80016a6:	e780      	b.n	80015aa <menuActualizar+0x356>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <menuActualizar+0x504>)
 80016aa:	2264      	movs	r2, #100	; 0x64
 80016ac:	711a      	strb	r2, [r3, #4]
 80016ae:	e77c      	b.n	80015aa <menuActualizar+0x356>
					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 80016b0:	4a29      	ldr	r2, [pc, #164]	; (8001758 <menuActualizar+0x504>)
 80016b2:	7913      	ldrb	r3, [r2, #4]
 80016b4:	330c      	adds	r3, #12
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	7113      	strb	r3, [r2, #4]
					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 80016ba:	7952      	ldrb	r2, [r2, #5]
 80016bc:	2a39      	cmp	r2, #57	; 0x39
 80016be:	d006      	beq.n	80016ce <menuActualizar+0x47a>
						if(getMenu()->GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 80016c0:	2b75      	cmp	r3, #117	; 0x75
 80016c2:	f67f af72 	bls.w	80015aa <menuActualizar+0x356>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <menuActualizar+0x504>)
 80016c8:	2209      	movs	r2, #9
 80016ca:	711a      	strb	r2, [r3, #4]
 80016cc:	e76d      	b.n	80015aa <menuActualizar+0x356>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 80016ce:	2b70      	cmp	r3, #112	; 0x70
 80016d0:	d008      	beq.n	80016e4 <menuActualizar+0x490>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 80016d2:	2b80      	cmp	r3, #128	; 0x80
 80016d4:	d00a      	beq.n	80016ec <menuActualizar+0x498>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 80016d6:	2b17      	cmp	r3, #23
 80016d8:	f47f af67 	bne.w	80015aa <menuActualizar+0x356>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <menuActualizar+0x504>)
 80016de:	221c      	movs	r2, #28
 80016e0:	711a      	strb	r2, [r3, #4]
 80016e2:	e762      	b.n	80015aa <menuActualizar+0x356>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <menuActualizar+0x504>)
 80016e6:	2274      	movs	r2, #116	; 0x74
 80016e8:	711a      	strb	r2, [r3, #4]
 80016ea:	e75e      	b.n	80015aa <menuActualizar+0x356>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <menuActualizar+0x504>)
 80016ee:	220b      	movs	r2, #11
 80016f0:	711a      	strb	r2, [r3, #4]
 80016f2:	e75a      	b.n	80015aa <menuActualizar+0x356>
			getMenu()->GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 80016f4:	f005 f912 	bl	800691c <xTaskGetTickCount>
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <menuActualizar+0x504>)
 80016fa:	6198      	str	r0, [r3, #24]
			if((boton == true) && (getMenu()->GuardarNombre.indice <= 5)){
 80016fc:	2e01      	cmp	r6, #1
 80016fe:	f47f af5e 	bne.w	80015be <menuActualizar+0x36a>
 8001702:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001706:	2b05      	cmp	r3, #5
 8001708:	f73f af59 	bgt.w	80015be <menuActualizar+0x36a>
						if((getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 800170c:	4a12      	ldr	r2, [pc, #72]	; (8001758 <menuActualizar+0x504>)
 800170e:	7951      	ldrb	r1, [r2, #5]
 8001710:	2939      	cmp	r1, #57	; 0x39
 8001712:	d03a      	beq.n	800178a <menuActualizar+0x536>
							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 8001714:	7912      	ldrb	r2, [r2, #4]
 8001716:	3a09      	subs	r2, #9
 8001718:	b252      	sxtb	r2, r2
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 800171a:	4810      	ldr	r0, [pc, #64]	; (800175c <menuActualizar+0x508>)
 800171c:	fb80 4002 	smull	r4, r0, r0, r2
 8001720:	17d2      	asrs	r2, r2, #31
 8001722:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 8001726:	b252      	sxtb	r2, r2
							if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 8001728:	291b      	cmp	r1, #27
 800172a:	d019      	beq.n	8001760 <menuActualizar+0x50c>
							else if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 800172c:	292a      	cmp	r1, #42	; 0x2a
 800172e:	f47f af46 	bne.w	80015be <menuActualizar+0x36a>
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_asdf[div];
 8001732:	4909      	ldr	r1, [pc, #36]	; (8001758 <menuActualizar+0x504>)
 8001734:	18c8      	adds	r0, r1, r3
 8001736:	3230      	adds	r2, #48	; 0x30
 8001738:	446a      	add	r2, sp
 800173a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800173e:	7182      	strb	r2, [r0, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 8001740:	3301      	adds	r3, #1
 8001742:	730b      	strb	r3, [r1, #12]
 8001744:	e015      	b.n	8001772 <menuActualizar+0x51e>
 8001746:	bf00      	nop
 8001748:	080094bc 	.word	0x080094bc
 800174c:	080094c8 	.word	0x080094c8
 8001750:	080094d4 	.word	0x080094d4
 8001754:	20000000 	.word	0x20000000
 8001758:	200006a8 	.word	0x200006a8
 800175c:	2aaaaaab 	.word	0x2aaaaaab
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_qwerty[div];
 8001760:	495a      	ldr	r1, [pc, #360]	; (80018cc <menuActualizar+0x678>)
 8001762:	18c8      	adds	r0, r1, r3
 8001764:	3230      	adds	r2, #48	; 0x30
 8001766:	446a      	add	r2, sp
 8001768:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800176c:	7182      	strb	r2, [r0, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 800176e:	3301      	adds	r3, #1
 8001770:	730b      	strb	r3, [r1, #12]
						if(getMenu()->GuardarNombre.indice > 5){
 8001772:	4b56      	ldr	r3, [pc, #344]	; (80018cc <menuActualizar+0x678>)
 8001774:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001778:	2b05      	cmp	r3, #5
 800177a:	f77f af20 	ble.w	80015be <menuActualizar+0x36a>
							getMenu()->GuardarNombre.indice = 5;
 800177e:	4b53      	ldr	r3, [pc, #332]	; (80018cc <menuActualizar+0x678>)
 8001780:	2205      	movs	r2, #5
 8001782:	731a      	strb	r2, [r3, #12]
							getMenu()->GuardarNombre.nombre[5] = '\0';
 8001784:	2200      	movs	r2, #0
 8001786:	72da      	strb	r2, [r3, #11]
 8001788:	e719      	b.n	80015be <menuActualizar+0x36a>
							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 800178a:	4a50      	ldr	r2, [pc, #320]	; (80018cc <menuActualizar+0x678>)
 800178c:	7912      	ldrb	r2, [r2, #4]
 800178e:	3a1c      	subs	r2, #28
 8001790:	b252      	sxtb	r2, r2
							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 8001792:	2a00      	cmp	r2, #0
 8001794:	db0e      	blt.n	80017b4 <menuActualizar+0x560>
								div = div / GUARDADO_OFFSET_X_CURSOR;
 8001796:	210c      	movs	r1, #12
 8001798:	fb92 f2f1 	sdiv	r2, r2, r1
									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 800179c:	2a07      	cmp	r2, #7
 800179e:	d013      	beq.n	80017c8 <menuActualizar+0x574>
										getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_zxc[div];
 80017a0:	494a      	ldr	r1, [pc, #296]	; (80018cc <menuActualizar+0x678>)
 80017a2:	18c8      	adds	r0, r1, r3
 80017a4:	3230      	adds	r2, #48	; 0x30
 80017a6:	446a      	add	r2, sp
 80017a8:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80017ac:	7182      	strb	r2, [r0, #6]
										getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 80017ae:	3301      	adds	r3, #1
 80017b0:	730b      	strb	r3, [r1, #12]
 80017b2:	e7de      	b.n	8001772 <menuActualizar+0x51e>
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice - 1;
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80017bc:	4a43      	ldr	r2, [pc, #268]	; (80018cc <menuActualizar+0x678>)
 80017be:	7313      	strb	r3, [r2, #12]
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = '\0';
 80017c0:	441a      	add	r2, r3
 80017c2:	2300      	movs	r3, #0
 80017c4:	7193      	strb	r3, [r2, #6]
 80017c6:	e7d4      	b.n	8001772 <menuActualizar+0x51e>
										if((getMenu()->GuardarNombre.indice != 0 )){
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f43f aef8 	beq.w	80015be <menuActualizar+0x36a>
											strcpy(getPuntajes(4)->nombre,getMenu()->GuardarNombre.nombre);
 80017ce:	2004      	movs	r0, #4
 80017d0:	f7ff fb22 	bl	8000e18 <getPuntajes>
 80017d4:	493e      	ldr	r1, [pc, #248]	; (80018d0 <menuActualizar+0x67c>)
 80017d6:	f006 fb7e 	bl	8007ed6 <strcpy>
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 80017da:	2101      	movs	r1, #1
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <menuActualizar+0x680>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	f003 fcd2 	bl	8005188 <osEventFlagsSet>
										    uint32_t flags = osEventFlagsWait(notificationFlag2, NOTIFICATION_VALUE2, osFlagsWaitAny, osWaitForever);
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	2200      	movs	r2, #0
 80017ea:	2102      	movs	r1, #2
 80017ec:	483a      	ldr	r0, [pc, #232]	; (80018d8 <menuActualizar+0x684>)
 80017ee:	6800      	ldr	r0, [r0, #0]
 80017f0:	f003 fd08 	bl	8005204 <osEventFlagsWait>
										    if (flags == NOTIFICATION_VALUE2){
 80017f4:	2802      	cmp	r0, #2
 80017f6:	d1bc      	bne.n	8001772 <menuActualizar+0x51e>
										    	menuReset();
 80017f8:	f7ff fcfe 	bl	80011f8 <menuReset>
										    	getMenu()->menuActual = puntajes;
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <menuActualizar+0x678>)
 80017fe:	2203      	movs	r2, #3
 8001800:	701a      	strb	r2, [r3, #0]
 8001802:	e7b6      	b.n	8001772 <menuActualizar+0x51e>
		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 8001804:	2301      	movs	r3, #1
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2328      	movs	r3, #40	; 0x28
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2364      	movs	r3, #100	; 0x64
 800180e:	4a33      	ldr	r2, [pc, #204]	; (80018dc <menuActualizar+0x688>)
 8001810:	210a      	movs	r1, #10
 8001812:	200f      	movs	r0, #15
 8001814:	f000 f89e 	bl	8001954 <SSD1306_DrawBitmap>
		if(getMenu()->musica_gameover == true){
 8001818:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <menuActualizar+0x678>)
 800181a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800181e:	2b01      	cmp	r3, #1
 8001820:	d008      	beq.n	8001834 <menuActualizar+0x5e0>
		if(y == arriba){
 8001822:	2d00      	cmp	r5, #0
 8001824:	f47f aedb 	bne.w	80015de <menuActualizar+0x38a>
			GuardarNombreReset();
 8001828:	f7ff fd02 	bl	8001230 <GuardarNombreReset>
			getMenu()->menuActual = guardar_nombre;
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <menuActualizar+0x678>)
 800182e:	2204      	movs	r2, #4
 8001830:	701a      	strb	r2, [r3, #0]
}
 8001832:	e6d4      	b.n	80015de <menuActualizar+0x38a>
			getMenu()->musica_gameover = false;
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <menuActualizar+0x678>)
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800183c:	e7f1      	b.n	8001822 <menuActualizar+0x5ce>
			Timenow = xTaskGetTickCount();
 800183e:	f005 f86d 	bl	800691c <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <menuActualizar+0x678>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	1ac0      	subs	r0, r0, r3
 8001848:	2896      	cmp	r0, #150	; 0x96
 800184a:	f67f aea4 	bls.w	8001596 <menuActualizar+0x342>
				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 800184e:	f005 f865 	bl	800691c <xTaskGetTickCount>
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <menuActualizar+0x678>)
 8001854:	6158      	str	r0, [r3, #20]
					switch(getMenu()->GuardarNombre.posicion_y){
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <menuActualizar+0x678>)
 8001858:	795b      	ldrb	r3, [r3, #5]
 800185a:	2b1b      	cmp	r3, #27
 800185c:	f43f aed3 	beq.w	8001606 <menuActualizar+0x3b2>
 8001860:	2b2a      	cmp	r3, #42	; 0x2a
 8001862:	f43f aed5 	beq.w	8001610 <menuActualizar+0x3bc>
 8001866:	2501      	movs	r5, #1
 8001868:	e695      	b.n	8001596 <menuActualizar+0x342>
			Timenow = xTaskGetTickCount();
 800186a:	f005 f857 	bl	800691c <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <menuActualizar+0x678>)
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	1ac0      	subs	r0, r0, r3
 8001874:	2896      	cmp	r0, #150	; 0x96
 8001876:	f67f ae8e 	bls.w	8001596 <menuActualizar+0x342>
				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 800187a:	f005 f84f 	bl	800691c <xTaskGetTickCount>
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <menuActualizar+0x678>)
 8001880:	6158      	str	r0, [r3, #20]
			switch(mov){
 8001882:	2d00      	cmp	r5, #0
 8001884:	f47f aeb0 	bne.w	80015e8 <menuActualizar+0x394>
					switch(getMenu()->GuardarNombre.posicion_y){
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <menuActualizar+0x678>)
 800188a:	795b      	ldrb	r3, [r3, #5]
 800188c:	2b2a      	cmp	r3, #42	; 0x2a
 800188e:	f43f aeae 	beq.w	80015ee <menuActualizar+0x39a>
 8001892:	2b39      	cmp	r3, #57	; 0x39
 8001894:	f47f ae7f 	bne.w	8001596 <menuActualizar+0x342>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <menuActualizar+0x678>)
 800189a:	222a      	movs	r2, #42	; 0x2a
 800189c:	715a      	strb	r2, [r3, #5]
							if(getMenu()->GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 800189e:	791b      	ldrb	r3, [r3, #4]
 80018a0:	2b1b      	cmp	r3, #27
 80018a2:	f67f aeac 	bls.w	80015fe <menuActualizar+0x3aa>
								div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 80018a6:	3b1c      	subs	r3, #28
 80018a8:	b25b      	sxtb	r3, r3
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f6ff aea3 	blt.w	80015f6 <menuActualizar+0x3a2>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <menuActualizar+0x68c>)
 80018b2:	fb82 1203 	smull	r1, r2, r2, r3
 80018b6:	17db      	asrs	r3, r3, #31
 80018b8:	ebc3 0362 	rsb	r3, r3, r2, asr #1
									 getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 80018bc:	3301      	adds	r3, #1
 80018be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	3309      	adds	r3, #9
 80018c6:	4a01      	ldr	r2, [pc, #4]	; (80018cc <menuActualizar+0x678>)
 80018c8:	7113      	strb	r3, [r2, #4]
 80018ca:	e664      	b.n	8001596 <menuActualizar+0x342>
 80018cc:	200006a8 	.word	0x200006a8
 80018d0:	200006ae 	.word	0x200006ae
 80018d4:	20000670 	.word	0x20000670
 80018d8:	20000674 	.word	0x20000674
 80018dc:	080095dc 	.word	0x080095dc
 80018e0:	2aaaaaab 	.word	0x2aaaaaab

080018e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018e4:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018e6:	2800      	cmp	r0, #0
 80018e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ec:	bf0c      	ite	eq
 80018ee:	2100      	moveq	r1, #0
 80018f0:	21ff      	movne	r1, #255	; 0xff
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <SSD1306_Fill+0x18>)
 80018f4:	f006 fa73 	bl	8007dde <memset>
}
 80018f8:	bd08      	pop	{r3, pc}
 80018fa:	bf00      	nop
 80018fc:	200006d8 	.word	0x200006d8

08001900 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001900:	287f      	cmp	r0, #127	; 0x7f
 8001902:	d822      	bhi.n	800194a <SSD1306_DrawPixel+0x4a>
		x >= SSD1306_WIDTH ||
 8001904:	293f      	cmp	r1, #63	; 0x3f
 8001906:	d820      	bhi.n	800194a <SSD1306_DrawPixel+0x4a>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <SSD1306_DrawPixel+0x4c>)
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	b17b      	cbz	r3, 800192e <SSD1306_DrawPixel+0x2e>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800190e:	b182      	cbz	r2, 8001932 <SSD1306_DrawPixel+0x32>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001910:	b410      	push	{r4}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001912:	08cb      	lsrs	r3, r1, #3
 8001914:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001918:	4c0d      	ldr	r4, [pc, #52]	; (8001950 <SSD1306_DrawPixel+0x50>)
 800191a:	f001 0107 	and.w	r1, r1, #7
 800191e:	2201      	movs	r2, #1
 8001920:	408a      	lsls	r2, r1
 8001922:	5c23      	ldrb	r3, [r4, r0]
 8001924:	ea23 0302 	bic.w	r3, r3, r2
 8001928:	5423      	strb	r3, [r4, r0]
	}
}
 800192a:	bc10      	pop	{r4}
 800192c:	4770      	bx	lr
	if (color == SSD1306_COLOR_WHITE) {
 800192e:	2a01      	cmp	r2, #1
 8001930:	d1ee      	bne.n	8001910 <SSD1306_DrawPixel+0x10>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001932:	08cb      	lsrs	r3, r1, #3
 8001934:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001938:	4a05      	ldr	r2, [pc, #20]	; (8001950 <SSD1306_DrawPixel+0x50>)
 800193a:	f001 0107 	and.w	r1, r1, #7
 800193e:	2301      	movs	r3, #1
 8001940:	408b      	lsls	r3, r1
 8001942:	5c11      	ldrb	r1, [r2, r0]
 8001944:	430b      	orrs	r3, r1
 8001946:	5413      	strb	r3, [r2, r0]
 8001948:	4770      	bx	lr
 800194a:	4770      	bx	lr
 800194c:	200006d0 	.word	0x200006d0
 8001950:	200006d8 	.word	0x200006d8

08001954 <SSD1306_DrawBitmap>:
{
 8001954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001958:	b085      	sub	sp, #20
 800195a:	4683      	mov	fp, r0
 800195c:	4688      	mov	r8, r1
 800195e:	9203      	str	r2, [sp, #12]
 8001960:	461e      	mov	r6, r3
 8001962:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8001966:	9301      	str	r3, [sp, #4]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001968:	1df3      	adds	r3, r6, #7
 800196a:	bf48      	it	mi
 800196c:	3307      	addmi	r3, #7
 800196e:	10db      	asrs	r3, r3, #3
 8001970:	9302      	str	r3, [sp, #8]
    for(int16_t j=0; j<h; j++, y++)
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	dd36      	ble.n	80019e6 <SSD1306_DrawBitmap+0x92>
 8001978:	2700      	movs	r7, #0
    uint8_t byte = 0;
 800197a:	463d      	mov	r5, r7
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800197c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	e026      	b.n	80019d2 <SSD1306_DrawBitmap+0x7e>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001984:	461a      	mov	r2, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	bfb8      	it	lt
 800198a:	1dda      	addlt	r2, r3, #7
 800198c:	f342 02cf 	sbfx	r2, r2, #3, #16
 8001990:	f819 5002 	ldrb.w	r5, [r9, r2]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001994:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001998:	d10a      	bne.n	80019b0 <SSD1306_DrawBitmap+0x5c>
        for(int16_t i=0; i<w; i++)
 800199a:	3401      	adds	r4, #1
 800199c:	b223      	sxth	r3, r4
 800199e:	42b3      	cmp	r3, r6
 80019a0:	d00e      	beq.n	80019c0 <SSD1306_DrawBitmap+0x6c>
            if(i & 7)
 80019a2:	b29c      	uxth	r4, r3
 80019a4:	f013 0f07 	tst.w	r3, #7
 80019a8:	d0ec      	beq.n	8001984 <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 80019aa:	006d      	lsls	r5, r5, #1
 80019ac:	b2ed      	uxtb	r5, r5
 80019ae:	e7f1      	b.n	8001994 <SSD1306_DrawBitmap+0x40>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80019b0:	eb04 000b 	add.w	r0, r4, fp
 80019b4:	9a00      	ldr	r2, [sp, #0]
 80019b6:	4651      	mov	r1, sl
 80019b8:	b280      	uxth	r0, r0
 80019ba:	f7ff ffa1 	bl	8001900 <SSD1306_DrawPixel>
 80019be:	e7ec      	b.n	800199a <SSD1306_DrawBitmap+0x46>
    for(int16_t j=0; j<h; j++, y++)
 80019c0:	3701      	adds	r7, #1
 80019c2:	b23f      	sxth	r7, r7
 80019c4:	f108 0801 	add.w	r8, r8, #1
 80019c8:	fa0f f888 	sxth.w	r8, r8
 80019cc:	9b01      	ldr	r3, [sp, #4]
 80019ce:	42bb      	cmp	r3, r7
 80019d0:	dd09      	ble.n	80019e6 <SSD1306_DrawBitmap+0x92>
        for(int16_t i=0; i<w; i++)
 80019d2:	2e00      	cmp	r6, #0
 80019d4:	ddf4      	ble.n	80019c0 <SSD1306_DrawBitmap+0x6c>
 80019d6:	2300      	movs	r3, #0
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80019d8:	9a03      	ldr	r2, [sp, #12]
 80019da:	9902      	ldr	r1, [sp, #8]
 80019dc:	fb07 2901 	mla	r9, r7, r1, r2
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80019e0:	fa1f fa88 	uxth.w	sl, r8
 80019e4:	e7dd      	b.n	80019a2 <SSD1306_DrawBitmap+0x4e>
}
 80019e6:	b005      	add	sp, #20
 80019e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019ec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019ec:	4b01      	ldr	r3, [pc, #4]	; (80019f4 <SSD1306_GotoXY+0x8>)
 80019ee:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80019f0:	8059      	strh	r1, [r3, #2]
}
 80019f2:	4770      	bx	lr
 80019f4:	200006d0 	.word	0x200006d0

080019f8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019fc:	b083      	sub	sp, #12
 80019fe:	9001      	str	r0, [sp, #4]
 8001a00:	4691      	mov	r9, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <SSD1306_Putc+0x94>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	780b      	ldrb	r3, [r1, #0]
 8001a0c:	4413      	add	r3, r2
	if (
 8001a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a10:	dc38      	bgt.n	8001a84 <SSD1306_Putc+0x8c>
 8001a12:	460e      	mov	r6, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <SSD1306_Putc+0x94>)
 8001a16:	885f      	ldrh	r7, [r3, #2]
 8001a18:	784b      	ldrb	r3, [r1, #1]
 8001a1a:	18fa      	adds	r2, r7, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a1c:	2a3f      	cmp	r2, #63	; 0x3f
 8001a1e:	dc33      	bgt.n	8001a88 <SSD1306_Putc+0x90>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a20:	b333      	cbz	r3, 8001a70 <SSD1306_Putc+0x78>
 8001a22:	f04f 0a00 	mov.w	sl, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a26:	f1a0 0b20 	sub.w	fp, r0, #32
 8001a2a:	fb03 a30b 	mla	r3, r3, fp, sl
 8001a2e:	6872      	ldr	r2, [r6, #4]
 8001a30:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a34:	7833      	ldrb	r3, [r6, #0]
 8001a36:	b1a3      	cbz	r3, 8001a62 <SSD1306_Putc+0x6a>
 8001a38:	9c00      	ldr	r4, [sp, #0]
 8001a3a:	2500      	movs	r5, #0
			if ((b << j) & 0x8000) {
 8001a3c:	fa08 f305 	lsl.w	r3, r8, r5
 8001a40:	f413 4f00 	tst.w	r3, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a44:	bf12      	itee	ne
 8001a46:	464a      	movne	r2, r9
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a48:	fab9 f289 	clzeq	r2, r9
 8001a4c:	0952      	lsreq	r2, r2, #5
 8001a4e:	4639      	mov	r1, r7
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff ff55 	bl	8001900 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a56:	3501      	adds	r5, #1
 8001a58:	3401      	adds	r4, #1
 8001a5a:	b2a4      	uxth	r4, r4
 8001a5c:	7833      	ldrb	r3, [r6, #0]
 8001a5e:	42ab      	cmp	r3, r5
 8001a60:	d8ec      	bhi.n	8001a3c <SSD1306_Putc+0x44>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a62:	f10a 0a01 	add.w	sl, sl, #1
 8001a66:	7873      	ldrb	r3, [r6, #1]
 8001a68:	3701      	adds	r7, #1
 8001a6a:	b2bf      	uxth	r7, r7
 8001a6c:	4553      	cmp	r3, sl
 8001a6e:	d8dc      	bhi.n	8001a2a <SSD1306_Putc+0x32>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a70:	7833      	ldrb	r3, [r6, #0]
 8001a72:	9a00      	ldr	r2, [sp, #0]
 8001a74:	441a      	add	r2, r3
 8001a76:	4613      	mov	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <SSD1306_Putc+0x94>)
 8001a7a:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8001a7c:	9801      	ldr	r0, [sp, #4]
}
 8001a7e:	b003      	add	sp, #12
 8001a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001a84:	2000      	movs	r0, #0
 8001a86:	e7fa      	b.n	8001a7e <SSD1306_Putc+0x86>
 8001a88:	2000      	movs	r0, #0
 8001a8a:	e7f8      	b.n	8001a7e <SSD1306_Putc+0x86>
 8001a8c:	200006d0 	.word	0x200006d0

08001a90 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	4604      	mov	r4, r0
 8001a94:	460e      	mov	r6, r1
 8001a96:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8001a98:	7800      	ldrb	r0, [r0, #0]
 8001a9a:	b158      	cbz	r0, 8001ab4 <SSD1306_Puts+0x24>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a9c:	462a      	mov	r2, r5
 8001a9e:	4631      	mov	r1, r6
 8001aa0:	f7ff ffaa 	bl	80019f8 <SSD1306_Putc>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	7820      	ldrb	r0, [r4, #0]
 8001aa8:	4283      	cmp	r3, r0
 8001aaa:	d103      	bne.n	8001ab4 <SSD1306_Puts+0x24>
	while (*str) {
 8001aac:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d1f3      	bne.n	8001a9c <SSD1306_Puts+0xc>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}

08001ab6 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001ac0:	287f      	cmp	r0, #127	; 0x7f
 8001ac2:	bf28      	it	cs
 8001ac4:	207f      	movcs	r0, #127	; 0x7f
 8001ac6:	4605      	mov	r5, r0
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8001ac8:	2a7f      	cmp	r2, #127	; 0x7f
 8001aca:	bf28      	it	cs
 8001acc:	227f      	movcs	r2, #127	; 0x7f
 8001ace:	4690      	mov	r8, r2
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001ad0:	293f      	cmp	r1, #63	; 0x3f
 8001ad2:	bf28      	it	cs
 8001ad4:	213f      	movcs	r1, #63	; 0x3f
 8001ad6:	460c      	mov	r4, r1
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001ad8:	2b3f      	cmp	r3, #63	; 0x3f
 8001ada:	bf28      	it	cs
 8001adc:	233f      	movcs	r3, #63	; 0x3f
 8001ade:	9301      	str	r3, [sp, #4]
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001ae0:	4290      	cmp	r0, r2
 8001ae2:	d21c      	bcs.n	8001b1e <SSD1306_DrawLine+0x68>
 8001ae4:	eba2 0a00 	sub.w	sl, r2, r0
 8001ae8:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001aec:	4299      	cmp	r1, r3
 8001aee:	d326      	bcc.n	8001b3e <SSD1306_DrawLine+0x88>
 8001af0:	9b01      	ldr	r3, [sp, #4]
 8001af2:	1ae7      	subs	r7, r4, r3
 8001af4:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001af6:	4545      	cmp	r5, r8
 8001af8:	d230      	bcs.n	8001b5c <SSD1306_DrawLine+0xa6>
 8001afa:	2301      	movs	r3, #1
 8001afc:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	9302      	str	r3, [sp, #8]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001b04:	4557      	cmp	r7, sl
 8001b06:	da2e      	bge.n	8001b66 <SSD1306_DrawLine+0xb0>
 8001b08:	eb0a 76da 	add.w	r6, sl, sl, lsr #31
 8001b0c:	1076      	asrs	r6, r6, #1

	if (dx == 0) {
 8001b0e:	f1ba 0f00 	cmp.w	sl, #0
 8001b12:	d02e      	beq.n	8001b72 <SSD1306_DrawLine+0xbc>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 8001b14:	2f00      	cmp	r7, #0
 8001b16:	d047      	beq.n	8001ba8 <SSD1306_DrawLine+0xf2>
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 8001b18:	f1ca 0b00 	rsb	fp, sl, #0
 8001b1c:	e06c      	b.n	8001bf8 <SSD1306_DrawLine+0x142>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b1e:	eba0 0a02 	sub.w	sl, r0, r2
 8001b22:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b26:	9b01      	ldr	r3, [sp, #4]
 8001b28:	4299      	cmp	r1, r3
 8001b2a:	d2e1      	bcs.n	8001af0 <SSD1306_DrawLine+0x3a>
 8001b2c:	9b01      	ldr	r3, [sp, #4]
 8001b2e:	1a5f      	subs	r7, r3, r1
 8001b30:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	e7e2      	b.n	8001b04 <SSD1306_DrawLine+0x4e>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b3e:	9b01      	ldr	r3, [sp, #4]
 8001b40:	1a5f      	subs	r7, r3, r1
 8001b42:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001b44:	4290      	cmp	r0, r2
 8001b46:	d203      	bcs.n	8001b50 <SSD1306_DrawLine+0x9a>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	e7d9      	b.n	8001b04 <SSD1306_DrawLine+0x4e>
	sx = (x0 < x1) ? 1 : -1; 
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
 8001b54:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001b56:	2301      	movs	r3, #1
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e7d3      	b.n	8001b04 <SSD1306_DrawLine+0x4e>
	sx = (x0 < x1) ? 1 : -1; 
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	e7ce      	b.n	8001b04 <SSD1306_DrawLine+0x4e>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001b66:	eb07 76d7 	add.w	r6, r7, r7, lsr #31
 8001b6a:	1076      	asrs	r6, r6, #1
 8001b6c:	4276      	negs	r6, r6
 8001b6e:	b236      	sxth	r6, r6
 8001b70:	e7cd      	b.n	8001b0e <SSD1306_DrawLine+0x58>
		if (y1 < y0) {
 8001b72:	9a01      	ldr	r2, [sp, #4]
 8001b74:	4294      	cmp	r4, r2
 8001b76:	d902      	bls.n	8001b7e <SSD1306_DrawLine+0xc8>
 8001b78:	4623      	mov	r3, r4
			y0 = tmp;
 8001b7a:	4614      	mov	r4, r2
			y1 = y0;
 8001b7c:	9301      	str	r3, [sp, #4]
		if (x1 < x0) {
 8001b7e:	45a8      	cmp	r8, r5
 8001b80:	bf28      	it	cs
 8001b82:	46a8      	movcs	r8, r5
 8001b84:	fa1f f888 	uxth.w	r8, r8
		for (i = y0; i <= y1; i++) {
 8001b88:	b224      	sxth	r4, r4
 8001b8a:	9b01      	ldr	r3, [sp, #4]
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	429c      	cmp	r4, r3
 8001b90:	dc26      	bgt.n	8001be0 <SSD1306_DrawLine+0x12a>
			SSD1306_DrawPixel(x0, i, c);
 8001b92:	b2a4      	uxth	r4, r4
 8001b94:	464a      	mov	r2, r9
 8001b96:	4621      	mov	r1, r4
 8001b98:	4640      	mov	r0, r8
 8001b9a:	f7ff feb1 	bl	8001900 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001b9e:	3401      	adds	r4, #1
 8001ba0:	b224      	sxth	r4, r4
 8001ba2:	42ac      	cmp	r4, r5
 8001ba4:	ddf5      	ble.n	8001b92 <SSD1306_DrawLine+0xdc>
 8001ba6:	e01b      	b.n	8001be0 <SSD1306_DrawLine+0x12a>
		if (y1 < y0) {
 8001ba8:	9b01      	ldr	r3, [sp, #4]
 8001baa:	429c      	cmp	r4, r3
 8001bac:	bf28      	it	cs
 8001bae:	461c      	movcs	r4, r3
 8001bb0:	b2a4      	uxth	r4, r4
		if (x1 < x0) {
 8001bb2:	4545      	cmp	r5, r8
 8001bb4:	d902      	bls.n	8001bbc <SSD1306_DrawLine+0x106>
 8001bb6:	462b      	mov	r3, r5
			x0 = tmp;
 8001bb8:	4645      	mov	r5, r8
			x1 = x0;
 8001bba:	4698      	mov	r8, r3
		for (i = x0; i <= x1; i++) {
 8001bbc:	b22d      	sxth	r5, r5
 8001bbe:	4646      	mov	r6, r8
 8001bc0:	4545      	cmp	r5, r8
 8001bc2:	dc0d      	bgt.n	8001be0 <SSD1306_DrawLine+0x12a>
			SSD1306_DrawPixel(i, y0, c);
 8001bc4:	b2ad      	uxth	r5, r5
 8001bc6:	464a      	mov	r2, r9
 8001bc8:	4621      	mov	r1, r4
 8001bca:	4628      	mov	r0, r5
 8001bcc:	f7ff fe98 	bl	8001900 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001bd0:	3501      	adds	r5, #1
 8001bd2:	b22d      	sxth	r5, r5
 8001bd4:	42b5      	cmp	r5, r6
 8001bd6:	ddf5      	ble.n	8001bc4 <SSD1306_DrawLine+0x10e>
 8001bd8:	e002      	b.n	8001be0 <SSD1306_DrawLine+0x12a>
		if (x0 == x1 && y0 == y1) {
 8001bda:	9b01      	ldr	r3, [sp, #4]
 8001bdc:	429c      	cmp	r4, r3
 8001bde:	d112      	bne.n	8001c06 <SSD1306_DrawLine+0x150>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8001be0:	b005      	add	sp, #20
 8001be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001be6:	4633      	mov	r3, r6
		if (e2 < dy) {
 8001be8:	42be      	cmp	r6, r7
 8001bea:	da04      	bge.n	8001bf6 <SSD1306_DrawLine+0x140>
			err += dx;
 8001bec:	4453      	add	r3, sl
 8001bee:	b21b      	sxth	r3, r3
			y0 += sy;
 8001bf0:	9a02      	ldr	r2, [sp, #8]
 8001bf2:	4414      	add	r4, r2
 8001bf4:	b2a4      	uxth	r4, r4
			x1 = x0;
 8001bf6:	461e      	mov	r6, r3
		SSD1306_DrawPixel(x0, y0, c);
 8001bf8:	464a      	mov	r2, r9
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	4628      	mov	r0, r5
 8001bfe:	f7ff fe7f 	bl	8001900 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001c02:	45a8      	cmp	r8, r5
 8001c04:	d0e9      	beq.n	8001bda <SSD1306_DrawLine+0x124>
		if (e2 > -dx) {
 8001c06:	455e      	cmp	r6, fp
 8001c08:	dded      	ble.n	8001be6 <SSD1306_DrawLine+0x130>
			err -= dy;
 8001c0a:	1bf3      	subs	r3, r6, r7
 8001c0c:	b21b      	sxth	r3, r3
			x0 += sx;
 8001c0e:	9a03      	ldr	r2, [sp, #12]
 8001c10:	4415      	add	r5, r2
 8001c12:	b2ad      	uxth	r5, r5
 8001c14:	e7e8      	b.n	8001be8 <SSD1306_DrawLine+0x132>

08001c16 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* Check input parameters */
	if (
 8001c20:	287f      	cmp	r0, #127	; 0x7f
 8001c22:	d832      	bhi.n	8001c8a <SSD1306_DrawRectangle+0x74>
 8001c24:	4606      	mov	r6, r0
 8001c26:	460f      	mov	r7, r1
 8001c28:	461d      	mov	r5, r3
		x >= SSD1306_WIDTH ||
 8001c2a:	293f      	cmp	r1, #63	; 0x3f
 8001c2c:	d82d      	bhi.n	8001c8a <SSD1306_DrawRectangle+0x74>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001c2e:	1883      	adds	r3, r0, r2
 8001c30:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8001c32:	bfc4      	itt	gt
 8001c34:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
 8001c38:	b292      	uxthgt	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001c3a:	194b      	adds	r3, r1, r5
 8001c3c:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 8001c3e:	bfc4      	itt	gt
 8001c40:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8001c44:	b2ad      	uxthgt	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001c46:	1814      	adds	r4, r2, r0
 8001c48:	b2a4      	uxth	r4, r4
 8001c4a:	f8cd 8000 	str.w	r8, [sp]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4622      	mov	r2, r4
 8001c52:	f7ff ff30 	bl	8001ab6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001c56:	443d      	add	r5, r7
 8001c58:	b2ad      	uxth	r5, r5
 8001c5a:	f8cd 8000 	str.w	r8, [sp]
 8001c5e:	462b      	mov	r3, r5
 8001c60:	4622      	mov	r2, r4
 8001c62:	4629      	mov	r1, r5
 8001c64:	4630      	mov	r0, r6
 8001c66:	f7ff ff26 	bl	8001ab6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001c6a:	f8cd 8000 	str.w	r8, [sp]
 8001c6e:	462b      	mov	r3, r5
 8001c70:	4632      	mov	r2, r6
 8001c72:	4639      	mov	r1, r7
 8001c74:	4630      	mov	r0, r6
 8001c76:	f7ff ff1e 	bl	8001ab6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001c7a:	f8cd 8000 	str.w	r8, [sp]
 8001c7e:	462b      	mov	r3, r5
 8001c80:	4622      	mov	r2, r4
 8001c82:	4639      	mov	r1, r7
 8001c84:	4620      	mov	r0, r4
 8001c86:	f7ff ff16 	bl	8001ab6 <SSD1306_DrawLine>
}
 8001c8a:	b002      	add	sp, #8
 8001c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c90 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c94:	b085      	sub	sp, #20
 8001c96:	4615      	mov	r5, r2
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	461e      	mov	r6, r3
	int16_t f = 1 - r;
 8001c9c:	b294      	uxth	r4, r2
 8001c9e:	f1c4 0301 	rsb	r3, r4, #1
 8001ca2:	fa0f f983 	sxth.w	r9, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8001ca6:	ebc4 33c4 	rsb	r3, r4, r4, lsl #15
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	9303      	str	r3, [sp, #12]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001cb0:	fa1f fa80 	uxth.w	sl, r0
 8001cb4:	fa1f fb81 	uxth.w	fp, r1
 8001cb8:	eb04 010b 	add.w	r1, r4, fp
 8001cbc:	4632      	mov	r2, r6
 8001cbe:	b289      	uxth	r1, r1
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	f7ff fe1d 	bl	8001900 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001cc6:	ebab 0104 	sub.w	r1, fp, r4
 8001cca:	4632      	mov	r2, r6
 8001ccc:	b289      	uxth	r1, r1
 8001cce:	4650      	mov	r0, sl
 8001cd0:	f7ff fe16 	bl	8001900 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001cd4:	eb04 000a 	add.w	r0, r4, sl
 8001cd8:	4632      	mov	r2, r6
 8001cda:	4659      	mov	r1, fp
 8001cdc:	b280      	uxth	r0, r0
 8001cde:	f7ff fe0f 	bl	8001900 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001ce2:	ebaa 0004 	sub.w	r0, sl, r4
 8001ce6:	4632      	mov	r2, r6
 8001ce8:	4659      	mov	r1, fp
 8001cea:	b280      	uxth	r0, r0
 8001cec:	f7ff fe08 	bl	8001900 <SSD1306_DrawPixel>

    while (x < y) {
 8001cf0:	2d00      	cmp	r5, #0
 8001cf2:	dd65      	ble.n	8001dc0 <SSD1306_DrawCircle+0x130>
	int16_t x = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	e05e      	b.n	8001db8 <SSD1306_DrawCircle+0x128>
        if (f >= 0) {
            y--;
 8001cfa:	9b00      	ldr	r3, [sp, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	9300      	str	r3, [sp, #0]
            ddF_y += 2;
 8001d02:	9b03      	ldr	r3, [sp, #12]
 8001d04:	3302      	adds	r3, #2
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 8001d0a:	444b      	add	r3, r9
 8001d0c:	fa0f f983 	sxth.w	r9, r3
        }
        x++;
 8001d10:	9b01      	ldr	r3, [sp, #4]
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29c      	uxth	r4, r3
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	9301      	str	r3, [sp, #4]
        ddF_x += 2;
 8001d1a:	eb09 0944 	add.w	r9, r9, r4, lsl #1
        f += ddF_x;
 8001d1e:	f109 0901 	add.w	r9, r9, #1
 8001d22:	fa0f f989 	sxth.w	r9, r9

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001d26:	eb0a 0304 	add.w	r3, sl, r4
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	f8bd 5000 	ldrh.w	r5, [sp]
 8001d30:	eb0b 0805 	add.w	r8, fp, r5
 8001d34:	fa1f f888 	uxth.w	r8, r8
 8001d38:	4632      	mov	r2, r6
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	9002      	str	r0, [sp, #8]
 8001d3e:	f7ff fddf 	bl	8001900 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001d42:	ebaa 0704 	sub.w	r7, sl, r4
 8001d46:	b2bf      	uxth	r7, r7
 8001d48:	4632      	mov	r2, r6
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	f7ff fdd7 	bl	8001900 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001d52:	ebab 0805 	sub.w	r8, fp, r5
 8001d56:	fa1f f888 	uxth.w	r8, r8
 8001d5a:	4632      	mov	r2, r6
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	9802      	ldr	r0, [sp, #8]
 8001d60:	f7ff fdce 	bl	8001900 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001d64:	4632      	mov	r2, r6
 8001d66:	4641      	mov	r1, r8
 8001d68:	4638      	mov	r0, r7
 8001d6a:	f7ff fdc9 	bl	8001900 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001d6e:	eb0a 0705 	add.w	r7, sl, r5
 8001d72:	b2bf      	uxth	r7, r7
 8001d74:	eb0b 0804 	add.w	r8, fp, r4
 8001d78:	fa1f f888 	uxth.w	r8, r8
 8001d7c:	4632      	mov	r2, r6
 8001d7e:	4641      	mov	r1, r8
 8001d80:	4638      	mov	r0, r7
 8001d82:	f7ff fdbd 	bl	8001900 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001d86:	ebaa 0505 	sub.w	r5, sl, r5
 8001d8a:	b2ad      	uxth	r5, r5
 8001d8c:	4632      	mov	r2, r6
 8001d8e:	4641      	mov	r1, r8
 8001d90:	4628      	mov	r0, r5
 8001d92:	f7ff fdb5 	bl	8001900 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001d96:	ebab 0404 	sub.w	r4, fp, r4
 8001d9a:	b2a4      	uxth	r4, r4
 8001d9c:	4632      	mov	r2, r6
 8001d9e:	4621      	mov	r1, r4
 8001da0:	4638      	mov	r0, r7
 8001da2:	f7ff fdad 	bl	8001900 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001da6:	4632      	mov	r2, r6
 8001da8:	4621      	mov	r1, r4
 8001daa:	4628      	mov	r0, r5
 8001dac:	f7ff fda8 	bl	8001900 <SSD1306_DrawPixel>
    while (x < y) {
 8001db0:	9a00      	ldr	r2, [sp, #0]
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dd03      	ble.n	8001dc0 <SSD1306_DrawCircle+0x130>
        if (f >= 0) {
 8001db8:	f1b9 0f00 	cmp.w	r9, #0
 8001dbc:	da9d      	bge.n	8001cfa <SSD1306_DrawCircle+0x6a>
 8001dbe:	e7a7      	b.n	8001d10 <SSD1306_DrawCircle+0x80>
    }
}
 8001dc0:	b005      	add	sp, #20
 8001dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001dc6 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	4690      	mov	r8, r2
 8001dce:	9203      	str	r2, [sp, #12]
 8001dd0:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 8001dd2:	b295      	uxth	r5, r2
 8001dd4:	f1c5 0401 	rsb	r4, r5, #1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8001dd8:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001de2:	fa1f fb80 	uxth.w	fp, r0
 8001de6:	b28f      	uxth	r7, r1
 8001de8:	19e9      	adds	r1, r5, r7
 8001dea:	4652      	mov	r2, sl
 8001dec:	b289      	uxth	r1, r1
 8001dee:	4658      	mov	r0, fp
 8001df0:	f7ff fd86 	bl	8001900 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001df4:	1b79      	subs	r1, r7, r5
 8001df6:	4652      	mov	r2, sl
 8001df8:	b289      	uxth	r1, r1
 8001dfa:	4658      	mov	r0, fp
 8001dfc:	f7ff fd80 	bl	8001900 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001e00:	eb05 060b 	add.w	r6, r5, fp
 8001e04:	b2b6      	uxth	r6, r6
 8001e06:	4652      	mov	r2, sl
 8001e08:	4639      	mov	r1, r7
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f7ff fd78 	bl	8001900 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001e10:	ebab 0505 	sub.w	r5, fp, r5
 8001e14:	b2ad      	uxth	r5, r5
 8001e16:	4652      	mov	r2, sl
 8001e18:	4639      	mov	r1, r7
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	f7ff fd70 	bl	8001900 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001e20:	f8cd a000 	str.w	sl, [sp]
 8001e24:	463b      	mov	r3, r7
 8001e26:	4632      	mov	r2, r6
 8001e28:	4639      	mov	r1, r7
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	f7ff fe43 	bl	8001ab6 <SSD1306_DrawLine>

    while (x < y) {
 8001e30:	4643      	mov	r3, r8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	dd52      	ble.n	8001edc <SSD1306_DrawFilledCircle+0x116>
 8001e36:	b224      	sxth	r4, r4
	int16_t x = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9304      	str	r3, [sp, #16]
 8001e3c:	e04b      	b.n	8001ed6 <SSD1306_DrawFilledCircle+0x110>
        if (f >= 0) {
            y--;
 8001e3e:	9b03      	ldr	r3, [sp, #12]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	9303      	str	r3, [sp, #12]
            ddF_y += 2;
 8001e46:	9b05      	ldr	r3, [sp, #20]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8001e4e:	4423      	add	r3, r4
 8001e50:	b21c      	sxth	r4, r3
        }
        x++;
 8001e52:	9b04      	ldr	r3, [sp, #16]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b29d      	uxth	r5, r3
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	9304      	str	r3, [sp, #16]
        ddF_x += 2;
 8001e5c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
        f += ddF_x;
 8001e60:	3401      	adds	r4, #1
 8001e62:	b224      	sxth	r4, r4

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8001e64:	ebab 0905 	sub.w	r9, fp, r5
 8001e68:	fa1f f989 	uxth.w	r9, r9
 8001e6c:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8001e70:	19b9      	adds	r1, r7, r6
 8001e72:	b289      	uxth	r1, r1
 8001e74:	eb0b 0805 	add.w	r8, fp, r5
 8001e78:	fa1f f888 	uxth.w	r8, r8
 8001e7c:	f8cd a000 	str.w	sl, [sp]
 8001e80:	460b      	mov	r3, r1
 8001e82:	4642      	mov	r2, r8
 8001e84:	4648      	mov	r0, r9
 8001e86:	f7ff fe16 	bl	8001ab6 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8001e8a:	1bb9      	subs	r1, r7, r6
 8001e8c:	b289      	uxth	r1, r1
 8001e8e:	f8cd a000 	str.w	sl, [sp]
 8001e92:	460b      	mov	r3, r1
 8001e94:	464a      	mov	r2, r9
 8001e96:	4640      	mov	r0, r8
 8001e98:	f7ff fe0d 	bl	8001ab6 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001e9c:	eb0b 0806 	add.w	r8, fp, r6
 8001ea0:	fa1f f888 	uxth.w	r8, r8
 8001ea4:	1979      	adds	r1, r7, r5
 8001ea6:	b289      	uxth	r1, r1
 8001ea8:	ebab 0606 	sub.w	r6, fp, r6
 8001eac:	b2b6      	uxth	r6, r6
 8001eae:	f8cd a000 	str.w	sl, [sp]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4632      	mov	r2, r6
 8001eb6:	4640      	mov	r0, r8
 8001eb8:	f7ff fdfd 	bl	8001ab6 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001ebc:	1b79      	subs	r1, r7, r5
 8001ebe:	b289      	uxth	r1, r1
 8001ec0:	f8cd a000 	str.w	sl, [sp]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4632      	mov	r2, r6
 8001ec8:	4640      	mov	r0, r8
 8001eca:	f7ff fdf4 	bl	8001ab6 <SSD1306_DrawLine>
    while (x < y) {
 8001ece:	9a03      	ldr	r2, [sp, #12]
 8001ed0:	9b04      	ldr	r3, [sp, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dd02      	ble.n	8001edc <SSD1306_DrawFilledCircle+0x116>
        if (f >= 0) {
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	dab1      	bge.n	8001e3e <SSD1306_DrawFilledCircle+0x78>
 8001eda:	e7ba      	b.n	8001e52 <SSD1306_DrawFilledCircle+0x8c>
    }
}
 8001edc:	b007      	add	sp, #28
 8001ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001ee4 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ee4:	b500      	push	{lr}
 8001ee6:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8001ee8:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8001eec:	4619      	mov	r1, r3
 8001eee:	b173      	cbz	r3, 8001f0e <ssd1306_I2C_WriteMulti+0x2a>
 8001ef0:	f04f 0e00 	mov.w	lr, #0
dt[i+1] = data[i];
 8001ef4:	ab02      	add	r3, sp, #8
 8001ef6:	eb03 0c0e 	add.w	ip, r3, lr
 8001efa:	f812 300e 	ldrb.w	r3, [r2, lr]
 8001efe:	f88c 3001 	strb.w	r3, [ip, #1]
for(i = 0; i < count; i++)
 8001f02:	f10e 0c01 	add.w	ip, lr, #1
 8001f06:	fa5f fe8c 	uxtb.w	lr, ip
 8001f0a:	458e      	cmp	lr, r1
 8001f0c:	d3f2      	bcc.n	8001ef4 <ssd1306_I2C_WriteMulti+0x10>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f0e:	1c4b      	adds	r3, r1, #1
 8001f10:	220a      	movs	r2, #10
 8001f12:	9200      	str	r2, [sp, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	aa02      	add	r2, sp, #8
 8001f18:	4601      	mov	r1, r0
 8001f1a:	4803      	ldr	r0, [pc, #12]	; (8001f28 <ssd1306_I2C_WriteMulti+0x44>)
 8001f1c:	f001 f9d4 	bl	80032c8 <HAL_I2C_Master_Transmit>
}
 8001f20:	b043      	add	sp, #268	; 0x10c
 8001f22:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f26:	bf00      	nop
 8001f28:	2000052c 	.word	0x2000052c

08001f2c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f2c:	b500      	push	{lr}
 8001f2e:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8001f30:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 8001f34:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f38:	230a      	movs	r3, #10
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	aa03      	add	r2, sp, #12
 8001f40:	4601      	mov	r1, r0
 8001f42:	4803      	ldr	r0, [pc, #12]	; (8001f50 <ssd1306_I2C_Write+0x24>)
 8001f44:	f001 f9c0 	bl	80032c8 <HAL_I2C_Master_Transmit>
}
 8001f48:	b005      	add	sp, #20
 8001f4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f4e:	bf00      	nop
 8001f50:	2000052c 	.word	0x2000052c

08001f54 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 8001f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (m = 0; m < 8; m++) {
 8001f58:	4f10      	ldr	r7, [pc, #64]	; (8001f9c <SSD1306_UpdateScreen+0x48>)
void SSD1306_UpdateScreen(void) {
 8001f5a:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f5c:	2600      	movs	r6, #0
 8001f5e:	2578      	movs	r5, #120	; 0x78
		SSD1306_WRITECOMMAND(0x10);
 8001f60:	f04f 0810 	mov.w	r8, #16
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001f64:	4622      	mov	r2, r4
 8001f66:	4631      	mov	r1, r6
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f7ff ffdf 	bl	8001f2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001f6e:	4632      	mov	r2, r6
 8001f70:	4631      	mov	r1, r6
 8001f72:	4628      	mov	r0, r5
 8001f74:	f7ff ffda 	bl	8001f2c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001f78:	4642      	mov	r2, r8
 8001f7a:	4631      	mov	r1, r6
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f7ff ffd5 	bl	8001f2c <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	463a      	mov	r2, r7
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	4628      	mov	r0, r5
 8001f8a:	f7ff ffab 	bl	8001ee4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001f8e:	3401      	adds	r4, #1
 8001f90:	b2e4      	uxtb	r4, r4
 8001f92:	3780      	adds	r7, #128	; 0x80
 8001f94:	2cb8      	cmp	r4, #184	; 0xb8
 8001f96:	d1e5      	bne.n	8001f64 <SSD1306_UpdateScreen+0x10>
}
 8001f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f9c:	200006d8 	.word	0x200006d8

08001fa0 <SSD1306_Clear>:
{
 8001fa0:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff fc9e 	bl	80018e4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001fa8:	f7ff ffd4 	bl	8001f54 <SSD1306_UpdateScreen>
}
 8001fac:	bd08      	pop	{r3, pc}
	...

08001fb0 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001fb0:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fb2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2178      	movs	r1, #120	; 0x78
 8001fba:	4854      	ldr	r0, [pc, #336]	; (800210c <SSD1306_Init+0x15c>)
 8001fbc:	f001 fa88 	bl	80034d0 <HAL_I2C_IsDeviceReady>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	f040 80a1 	bne.w	8002108 <SSD1306_Init+0x158>
 8001fc6:	f640 13c4 	movw	r3, #2500	; 0x9c4
	while(p>0)
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	d1fd      	bne.n	8001fca <SSD1306_Init+0x1a>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001fce:	22ae      	movs	r2, #174	; 0xae
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2078      	movs	r0, #120	; 0x78
 8001fd4:	f7ff ffaa 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001fd8:	2220      	movs	r2, #32
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2078      	movs	r0, #120	; 0x78
 8001fde:	f7ff ffa5 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2078      	movs	r0, #120	; 0x78
 8001fe8:	f7ff ffa0 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001fec:	22b0      	movs	r2, #176	; 0xb0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2078      	movs	r0, #120	; 0x78
 8001ff2:	f7ff ff9b 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001ff6:	22c8      	movs	r2, #200	; 0xc8
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2078      	movs	r0, #120	; 0x78
 8001ffc:	f7ff ff96 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002000:	2200      	movs	r2, #0
 8002002:	4611      	mov	r1, r2
 8002004:	2078      	movs	r0, #120	; 0x78
 8002006:	f7ff ff91 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800200a:	2210      	movs	r2, #16
 800200c:	2100      	movs	r1, #0
 800200e:	2078      	movs	r0, #120	; 0x78
 8002010:	f7ff ff8c 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002014:	2240      	movs	r2, #64	; 0x40
 8002016:	2100      	movs	r1, #0
 8002018:	2078      	movs	r0, #120	; 0x78
 800201a:	f7ff ff87 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800201e:	2281      	movs	r2, #129	; 0x81
 8002020:	2100      	movs	r1, #0
 8002022:	2078      	movs	r0, #120	; 0x78
 8002024:	f7ff ff82 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002028:	22ff      	movs	r2, #255	; 0xff
 800202a:	2100      	movs	r1, #0
 800202c:	2078      	movs	r0, #120	; 0x78
 800202e:	f7ff ff7d 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002032:	22a1      	movs	r2, #161	; 0xa1
 8002034:	2100      	movs	r1, #0
 8002036:	2078      	movs	r0, #120	; 0x78
 8002038:	f7ff ff78 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800203c:	22a6      	movs	r2, #166	; 0xa6
 800203e:	2100      	movs	r1, #0
 8002040:	2078      	movs	r0, #120	; 0x78
 8002042:	f7ff ff73 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002046:	22a8      	movs	r2, #168	; 0xa8
 8002048:	2100      	movs	r1, #0
 800204a:	2078      	movs	r0, #120	; 0x78
 800204c:	f7ff ff6e 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002050:	223f      	movs	r2, #63	; 0x3f
 8002052:	2100      	movs	r1, #0
 8002054:	2078      	movs	r0, #120	; 0x78
 8002056:	f7ff ff69 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800205a:	22a4      	movs	r2, #164	; 0xa4
 800205c:	2100      	movs	r1, #0
 800205e:	2078      	movs	r0, #120	; 0x78
 8002060:	f7ff ff64 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002064:	22d3      	movs	r2, #211	; 0xd3
 8002066:	2100      	movs	r1, #0
 8002068:	2078      	movs	r0, #120	; 0x78
 800206a:	f7ff ff5f 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800206e:	2200      	movs	r2, #0
 8002070:	4611      	mov	r1, r2
 8002072:	2078      	movs	r0, #120	; 0x78
 8002074:	f7ff ff5a 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002078:	22d5      	movs	r2, #213	; 0xd5
 800207a:	2100      	movs	r1, #0
 800207c:	2078      	movs	r0, #120	; 0x78
 800207e:	f7ff ff55 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002082:	22f0      	movs	r2, #240	; 0xf0
 8002084:	2100      	movs	r1, #0
 8002086:	2078      	movs	r0, #120	; 0x78
 8002088:	f7ff ff50 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800208c:	22d9      	movs	r2, #217	; 0xd9
 800208e:	2100      	movs	r1, #0
 8002090:	2078      	movs	r0, #120	; 0x78
 8002092:	f7ff ff4b 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002096:	2222      	movs	r2, #34	; 0x22
 8002098:	2100      	movs	r1, #0
 800209a:	2078      	movs	r0, #120	; 0x78
 800209c:	f7ff ff46 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80020a0:	22da      	movs	r2, #218	; 0xda
 80020a2:	2100      	movs	r1, #0
 80020a4:	2078      	movs	r0, #120	; 0x78
 80020a6:	f7ff ff41 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80020aa:	2212      	movs	r2, #18
 80020ac:	2100      	movs	r1, #0
 80020ae:	2078      	movs	r0, #120	; 0x78
 80020b0:	f7ff ff3c 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020b4:	22db      	movs	r2, #219	; 0xdb
 80020b6:	2100      	movs	r1, #0
 80020b8:	2078      	movs	r0, #120	; 0x78
 80020ba:	f7ff ff37 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020be:	2220      	movs	r2, #32
 80020c0:	2100      	movs	r1, #0
 80020c2:	2078      	movs	r0, #120	; 0x78
 80020c4:	f7ff ff32 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020c8:	228d      	movs	r2, #141	; 0x8d
 80020ca:	2100      	movs	r1, #0
 80020cc:	2078      	movs	r0, #120	; 0x78
 80020ce:	f7ff ff2d 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020d2:	2214      	movs	r2, #20
 80020d4:	2100      	movs	r1, #0
 80020d6:	2078      	movs	r0, #120	; 0x78
 80020d8:	f7ff ff28 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80020dc:	22af      	movs	r2, #175	; 0xaf
 80020de:	2100      	movs	r1, #0
 80020e0:	2078      	movs	r0, #120	; 0x78
 80020e2:	f7ff ff23 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80020e6:	222e      	movs	r2, #46	; 0x2e
 80020e8:	2100      	movs	r1, #0
 80020ea:	2078      	movs	r0, #120	; 0x78
 80020ec:	f7ff ff1e 	bl	8001f2c <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff fbf7 	bl	80018e4 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80020f6:	f7ff ff2d 	bl	8001f54 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SSD1306_Init+0x160>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002100:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8002102:	2001      	movs	r0, #1
 8002104:	7158      	strb	r0, [r3, #5]
}
 8002106:	bd08      	pop	{r3, pc}
		return 0;
 8002108:	2000      	movs	r0, #0
 800210a:	e7fc      	b.n	8002106 <SSD1306_Init+0x156>
 800210c:	2000052c 	.word	0x2000052c
 8002110:	200006d0 	.word	0x200006d0

08002114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b500      	push	{lr}
 8002116:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_MspInit+0x4c>)
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	619a      	str	r2, [r3, #24]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	f002 0201 	and.w	r2, r2, #1
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002132:	61da      	str	r2, [r3, #28]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	210f      	movs	r1, #15
 8002142:	f06f 0001 	mvn.w	r0, #1
 8002146:	f000 fd53 	bl	8002bf0 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800214a:	4a06      	ldr	r2, [pc, #24]	; (8002164 <HAL_MspInit+0x50>)
 800214c:	6853      	ldr	r3, [r2, #4]
 800214e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002156:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002158:	b003      	add	sp, #12
 800215a:	f85d fb04 	ldr.w	pc, [sp], #4
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000

08002168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002168:	b500      	push	{lr}
 800216a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	2300      	movs	r3, #0
 800216e:	9304      	str	r3, [sp, #16]
 8002170:	9305      	str	r3, [sp, #20]
 8002172:	9306      	str	r3, [sp, #24]
 8002174:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8002176:	6803      	ldr	r3, [r0, #0]
 8002178:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_ADC_MspInit+0x94>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d005      	beq.n	800218a <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800217e:	4a20      	ldr	r2, [pc, #128]	; (8002200 <HAL_ADC_MspInit+0x98>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d01e      	beq.n	80021c2 <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002184:	b009      	add	sp, #36	; 0x24
 8002186:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_ADC_MspInit+0x9c>)
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002192:	619a      	str	r2, [r3, #24]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800219a:	9200      	str	r2, [sp, #0]
 800219c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	699a      	ldr	r2, [r3, #24]
 80021a0:	f042 0204 	orr.w	r2, r2, #4
 80021a4:	619a      	str	r2, [r3, #24]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021b0:	2308      	movs	r3, #8
 80021b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b4:	2303      	movs	r3, #3
 80021b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	a904      	add	r1, sp, #16
 80021ba:	4813      	ldr	r0, [pc, #76]	; (8002208 <HAL_ADC_MspInit+0xa0>)
 80021bc:	f000 fd5c 	bl	8002c78 <HAL_GPIO_Init>
 80021c0:	e7e0      	b.n	8002184 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_ADC_MspInit+0x9c>)
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021ca:	619a      	str	r2, [r3, #24]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80021d2:	9202      	str	r2, [sp, #8]
 80021d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	f042 0204 	orr.w	r2, r2, #4
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	9303      	str	r3, [sp, #12]
 80021e6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021e8:	2302      	movs	r3, #2
 80021ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ec:	2303      	movs	r3, #3
 80021ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	a904      	add	r1, sp, #16
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <HAL_ADC_MspInit+0xa0>)
 80021f4:	f000 fd40 	bl	8002c78 <HAL_GPIO_Init>
}
 80021f8:	e7c4      	b.n	8002184 <HAL_ADC_MspInit+0x1c>
 80021fa:	bf00      	nop
 80021fc:	40012400 	.word	0x40012400
 8002200:	40012800 	.word	0x40012800
 8002204:	40021000 	.word	0x40021000
 8002208:	40010800 	.word	0x40010800

0800220c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800220c:	b510      	push	{r4, lr}
 800220e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	2300      	movs	r3, #0
 8002212:	9302      	str	r3, [sp, #8]
 8002214:	9303      	str	r3, [sp, #12]
 8002216:	9304      	str	r3, [sp, #16]
 8002218:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800221a:	6802      	ldr	r2, [r0, #0]
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_I2C_MspInit+0x58>)
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002222:	b006      	add	sp, #24
 8002224:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	4c10      	ldr	r4, [pc, #64]	; (8002268 <HAL_I2C_MspInit+0x5c>)
 8002228:	69a3      	ldr	r3, [r4, #24]
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	61a3      	str	r3, [r4, #24]
 8002230:	69a3      	ldr	r3, [r4, #24]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800223a:	23c0      	movs	r3, #192	; 0xc0
 800223c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223e:	2312      	movs	r3, #18
 8002240:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	a902      	add	r1, sp, #8
 8002248:	4808      	ldr	r0, [pc, #32]	; (800226c <HAL_I2C_MspInit+0x60>)
 800224a:	f000 fd15 	bl	8002c78 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800224e:	69e3      	ldr	r3, [r4, #28]
 8002250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002254:	61e3      	str	r3, [r4, #28]
 8002256:	69e3      	ldr	r3, [r4, #28]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	9b01      	ldr	r3, [sp, #4]
}
 8002260:	e7df      	b.n	8002222 <HAL_I2C_MspInit+0x16>
 8002262:	bf00      	nop
 8002264:	40005400 	.word	0x40005400
 8002268:	40021000 	.word	0x40021000
 800226c:	40010c00 	.word	0x40010c00

08002270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002270:	b510      	push	{r4, lr}
 8002272:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	2300      	movs	r3, #0
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	9304      	str	r3, [sp, #16]
 800227c:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 800227e:	6802      	ldr	r2, [r0, #0]
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <HAL_SPI_MspInit+0x6c>)
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002286:	b006      	add	sp, #24
 8002288:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002294:	619a      	str	r2, [r3, #24]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800229c:	9200      	str	r2, [sp, #0]
 800229e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	f042 0204 	orr.w	r2, r2, #4
 80022a6:	619a      	str	r2, [r3, #24]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022b2:	23a0      	movs	r3, #160	; 0xa0
 80022b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	4c08      	ldr	r4, [pc, #32]	; (80022e0 <HAL_SPI_MspInit+0x70>)
 80022c0:	a902      	add	r1, sp, #8
 80022c2:	4620      	mov	r0, r4
 80022c4:	f000 fcd8 	bl	8002c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022c8:	2340      	movs	r3, #64	; 0x40
 80022ca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	a902      	add	r1, sp, #8
 80022d4:	4620      	mov	r0, r4
 80022d6:	f000 fccf 	bl	8002c78 <HAL_GPIO_Init>
}
 80022da:	e7d4      	b.n	8002286 <HAL_SPI_MspInit+0x16>
 80022dc:	40013000 	.word	0x40013000
 80022e0:	40010800 	.word	0x40010800

080022e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e4:	b500      	push	{lr}
 80022e6:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 80022e8:	6803      	ldr	r3, [r0, #0]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d005      	beq.n	80022fc <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_TIM_Base_MspInit+0x58>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00e      	beq.n	8002314 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022f6:	b003      	add	sp, #12
 80022f8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022fc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	61da      	str	r2, [r3, #28]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	9b00      	ldr	r3, [sp, #0]
 8002312:	e7f0      	b.n	80022f6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002314:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_TIM_Base_MspInit+0x5c>)
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	f042 0202 	orr.w	r2, r2, #2
 800231c:	61da      	str	r2, [r3, #28]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2105      	movs	r1, #5
 800232c:	201d      	movs	r0, #29
 800232e:	f000 fc5f 	bl	8002bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002332:	201d      	movs	r0, #29
 8002334:	f000 fc92 	bl	8002c5c <HAL_NVIC_EnableIRQ>
}
 8002338:	e7dd      	b.n	80022f6 <HAL_TIM_Base_MspInit+0x12>
 800233a:	bf00      	nop
 800233c:	40000400 	.word	0x40000400
 8002340:	40021000 	.word	0x40021000

08002344 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002344:	b500      	push	{lr}
 8002346:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	2300      	movs	r3, #0
 800234a:	9302      	str	r3, [sp, #8]
 800234c:	9303      	str	r3, [sp, #12]
 800234e:	9304      	str	r3, [sp, #16]
 8002350:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8002352:	6803      	ldr	r3, [r0, #0]
 8002354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002358:	d002      	beq.n	8002360 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800235a:	b007      	add	sp, #28
 800235c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	f042 0204 	orr.w	r2, r2, #4
 800236a:	619a      	str	r2, [r3, #24]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002376:	2301      	movs	r3, #1
 8002378:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	a902      	add	r1, sp, #8
 8002382:	4802      	ldr	r0, [pc, #8]	; (800238c <HAL_TIM_MspPostInit+0x48>)
 8002384:	f000 fc78 	bl	8002c78 <HAL_GPIO_Init>
}
 8002388:	e7e7      	b.n	800235a <HAL_TIM_MspPostInit+0x16>
 800238a:	bf00      	nop
 800238c:	40010800 	.word	0x40010800

08002390 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b530      	push	{r4, r5, lr}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002396:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_InitTick+0x8c>)
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	f042 0204 	orr.w	r2, r2, #4
 800239e:	61da      	str	r2, [r3, #28]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023aa:	a902      	add	r1, sp, #8
 80023ac:	a803      	add	r0, sp, #12
 80023ae:	f001 fc7d 	bl	8003cac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023b2:	9b06      	ldr	r3, [sp, #24]
 80023b4:	b9cb      	cbnz	r3, 80023ea <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023b6:	f001 fc59 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80023ba:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80023bc:	4818      	ldr	r0, [pc, #96]	; (8002420 <HAL_InitTick+0x90>)
 80023be:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_InitTick+0x94>)
 80023c0:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80023c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023c6:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023c8:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_InitTick+0x98>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0c9b      	lsrs	r3, r3, #18
 80023d0:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80023d2:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80023dc:	f002 fb38 	bl	8004a50 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80023e0:	4605      	mov	r5, r0
 80023e2:	b130      	cbz	r0, 80023f2 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 80023e4:	4628      	mov	r0, r5
 80023e6:	b009      	add	sp, #36	; 0x24
 80023e8:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023ea:	f001 fc3f 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80023ee:	0043      	lsls	r3, r0, #1
 80023f0:	e7e4      	b.n	80023bc <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 80023f2:	480b      	ldr	r0, [pc, #44]	; (8002420 <HAL_InitTick+0x90>)
 80023f4:	f002 f9ce 	bl	8004794 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80023f8:	4605      	mov	r5, r0
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d1f2      	bne.n	80023e4 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023fe:	201e      	movs	r0, #30
 8002400:	f000 fc2c 	bl	8002c5c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002404:	2c0f      	cmp	r4, #15
 8002406:	d901      	bls.n	800240c <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 8002408:	2501      	movs	r5, #1
 800240a:	e7eb      	b.n	80023e4 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800240c:	2200      	movs	r2, #0
 800240e:	4621      	mov	r1, r4
 8002410:	201e      	movs	r0, #30
 8002412:	f000 fbed 	bl	8002bf0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_InitTick+0x9c>)
 8002418:	601c      	str	r4, [r3, #0]
 800241a:	e7e3      	b.n	80023e4 <HAL_InitTick+0x54>
 800241c:	40021000 	.word	0x40021000
 8002420:	20000ad8 	.word	0x20000ad8
 8002424:	40000800 	.word	0x40000800
 8002428:	431bde83 	.word	0x431bde83
 800242c:	200003b8 	.word	0x200003b8

08002430 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <NMI_Handler>
	...

08002434 <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    // Leer el registro CFSR para obtener información sobre el fallo
    uint32_t cfsr = SCB->CFSR;
 8002434:	4b01      	ldr	r3, [pc, #4]	; (800243c <HardFault_Handler+0x8>)
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <HardFault_Handler+0x4>
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <MemManage_Handler>

08002442 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <BusFault_Handler>

08002444 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler>

08002446 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002446:	4770      	bx	lr

08002448 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002448:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800244a:	4802      	ldr	r0, [pc, #8]	; (8002454 <TIM3_IRQHandler+0xc>)
 800244c:	f002 f9f4 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002450:	bd08      	pop	{r3, pc}
 8002452:	bf00      	nop
 8002454:	20000620 	.word	0x20000620

08002458 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002458:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800245a:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM4_IRQHandler+0xc>)
 800245c:	f002 f9ec 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002460:	bd08      	pop	{r3, pc}
 8002462:	bf00      	nop
 8002464:	20000ad8 	.word	0x20000ad8

08002468 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002468:	2001      	movs	r0, #1
 800246a:	4770      	bx	lr

0800246c <_kill>:

int _kill(int pid, int sig)
{
 800246c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800246e:	f005 fd05 	bl	8007e7c <__errno>
 8002472:	2316      	movs	r3, #22
 8002474:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002476:	f04f 30ff 	mov.w	r0, #4294967295
 800247a:	bd08      	pop	{r3, pc}

0800247c <_exit>:

void _exit (int status)
{
 800247c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800247e:	f005 fcfd 	bl	8007e7c <__errno>
 8002482:	2316      	movs	r3, #22
 8002484:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002486:	e7fe      	b.n	8002486 <_exit+0xa>

08002488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002488:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	1e16      	subs	r6, r2, #0
 800248c:	dd07      	ble.n	800249e <_read+0x16>
 800248e:	460c      	mov	r4, r1
 8002490:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002492:	f3af 8000 	nop.w
 8002496:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	42a5      	cmp	r5, r4
 800249c:	d1f9      	bne.n	8002492 <_read+0xa>
  }

  return len;
}
 800249e:	4630      	mov	r0, r6
 80024a0:	bd70      	pop	{r4, r5, r6, pc}

080024a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a2:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a4:	1e16      	subs	r6, r2, #0
 80024a6:	dd07      	ble.n	80024b8 <_write+0x16>
 80024a8:	460c      	mov	r4, r1
 80024aa:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80024ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80024b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b4:	42a5      	cmp	r5, r4
 80024b6:	d1f9      	bne.n	80024ac <_write+0xa>
  }
  return len;
}
 80024b8:	4630      	mov	r0, r6
 80024ba:	bd70      	pop	{r4, r5, r6, pc}

080024bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	4770      	bx	lr

080024c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80024c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c6:	604b      	str	r3, [r1, #4]
  return 0;
}
 80024c8:	2000      	movs	r0, #0
 80024ca:	4770      	bx	lr

080024cc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80024cc:	2001      	movs	r0, #1
 80024ce:	4770      	bx	lr

080024d0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80024d0:	2000      	movs	r0, #0
 80024d2:	4770      	bx	lr

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b508      	push	{r3, lr}
 80024d6:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024d8:	4a0c      	ldr	r2, [pc, #48]	; (800250c <_sbrk+0x38>)
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	b152      	cbz	r2, 80024f4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <_sbrk+0x38>)
 80024e0:	6810      	ldr	r0, [r2, #0]
 80024e2:	4403      	add	r3, r0
 80024e4:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <_sbrk+0x3c>)
 80024e6:	490b      	ldr	r1, [pc, #44]	; (8002514 <_sbrk+0x40>)
 80024e8:	1a52      	subs	r2, r2, r1
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d806      	bhi.n	80024fc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80024ee:	4a07      	ldr	r2, [pc, #28]	; (800250c <_sbrk+0x38>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80024f2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80024f4:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x38>)
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <_sbrk+0x44>)
 80024f8:	6011      	str	r1, [r2, #0]
 80024fa:	e7f0      	b.n	80024de <_sbrk+0xa>
    errno = ENOMEM;
 80024fc:	f005 fcbe 	bl	8007e7c <__errno>
 8002500:	230c      	movs	r3, #12
 8002502:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	e7f3      	b.n	80024f2 <_sbrk+0x1e>
 800250a:	bf00      	nop
 800250c:	20000b20 	.word	0x20000b20
 8002510:	20005000 	.word	0x20005000
 8002514:	00000400 	.word	0x00000400
 8002518:	20002960 	.word	0x20002960

0800251c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800251c:	4770      	bx	lr
	...

08002520 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8002520:	f7ff fffc 	bl	800251c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002524:	480b      	ldr	r0, [pc, #44]	; (8002554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002526:	490c      	ldr	r1, [pc, #48]	; (8002558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002528:	4a0c      	ldr	r2, [pc, #48]	; (800255c <LoopFillZerobss+0x16>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800253c:	4c09      	ldr	r4, [pc, #36]	; (8002564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800254a:	f005 fc9d 	bl	8007e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800254e:	f7fe f9bb 	bl	80008c8 <main>
  bx lr
 8002552:	4770      	bx	lr
  ldr r0, =_sdata
 8002554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002558:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 800255c:	08009948 	.word	0x08009948
  ldr r2, =_sbss
 8002560:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 8002564:	20002960 	.word	0x20002960

08002568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC1_2_IRQHandler>
	...

0800256c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256c:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_Init+0x20>)
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f000 fb27 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257e:	200f      	movs	r0, #15
 8002580:	f7ff ff06 	bl	8002390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002584:	f7ff fdc6 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002588:	2000      	movs	r0, #0
 800258a:	bd08      	pop	{r3, pc}
 800258c:	40022000 	.word	0x40022000

08002590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002590:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_IncTick+0x10>)
 8002592:	6811      	ldr	r1, [r2, #0]
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_IncTick+0x14>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	440b      	add	r3, r1
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000b24 	.word	0x20000b24
 80025a4:	200003b4 	.word	0x200003b4

080025a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025a8:	4b01      	ldr	r3, [pc, #4]	; (80025b0 <HAL_GetTick+0x8>)
 80025aa:	6818      	ldr	r0, [r3, #0]
}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000b24 	.word	0x20000b24

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b538      	push	{r3, r4, r5, lr}
 80025b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff fff6 	bl	80025a8 <HAL_GetTick>
 80025bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025be:	f1b4 3fff 	cmp.w	r4, #4294967295
 80025c2:	d002      	beq.n	80025ca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <HAL_Delay+0x24>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	f7ff ffed 	bl	80025a8 <HAL_GetTick>
 80025ce:	1b40      	subs	r0, r0, r5
 80025d0:	42a0      	cmp	r0, r4
 80025d2:	d3fa      	bcc.n	80025ca <HAL_Delay+0x16>
  {
  }
}
 80025d4:	bd38      	pop	{r3, r4, r5, pc}
 80025d6:	bf00      	nop
 80025d8:	200003b4 	.word	0x200003b4

080025dc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b083      	sub	sp, #12
 80025e0:	4606      	mov	r6, r0
 80025e2:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025ec:	6833      	ldr	r3, [r6, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80025f4:	d124      	bne.n	8002640 <HAL_ADC_PollForConversion+0x64>
 80025f6:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80025fe:	d103      	bne.n	8002608 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002602:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8002606:	d02a      	beq.n	800265e <HAL_ADC_PollForConversion+0x82>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <HAL_ADC_PollForConversion+0x170>)
 800260a:	681d      	ldr	r5, [r3, #0]
 800260c:	2002      	movs	r0, #2
 800260e:	f001 fbf9 	bl	8003e04 <HAL_RCCEx_GetPeriphCLKFreq>
 8002612:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002616:	6833      	ldr	r3, [r6, #0]
 8002618:	6919      	ldr	r1, [r3, #16]
 800261a:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <HAL_ADC_PollForConversion+0x174>)
 800261c:	4211      	tst	r1, r2
 800261e:	d137      	bne.n	8002690 <HAL_ADC_PollForConversion+0xb4>
 8002620:	68d9      	ldr	r1, [r3, #12]
 8002622:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8002626:	4211      	tst	r1, r2
 8002628:	d132      	bne.n	8002690 <HAL_ADC_PollForConversion+0xb4>
 800262a:	6919      	ldr	r1, [r3, #16]
 800262c:	4a49      	ldr	r2, [pc, #292]	; (8002754 <HAL_ADC_PollForConversion+0x178>)
 800262e:	4211      	tst	r1, r2
 8002630:	d158      	bne.n	80026e4 <HAL_ADC_PollForConversion+0x108>
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_ADC_PollForConversion+0x17c>)
 8002636:	421a      	tst	r2, r3
 8002638:	bf14      	ite	ne
 800263a:	2329      	movne	r3, #41	; 0x29
 800263c:	2314      	moveq	r3, #20
 800263e:	e03b      	b.n	80026b8 <HAL_ADC_PollForConversion+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002640:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002642:	f043 0320 	orr.w	r3, r3, #32
 8002646:	62b3      	str	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002648:	2300      	movs	r3, #0
 800264a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    return HAL_ERROR;
 800264e:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8002650:	b003      	add	sp, #12
 8002652:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002654:	6833      	ldr	r3, [r6, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f013 0f02 	tst.w	r3, #2
 800265c:	d00f      	beq.n	800267e <HAL_ADC_PollForConversion+0xa2>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800265e:	6832      	ldr	r2, [r6, #0]
 8002660:	6813      	ldr	r3, [r2, #0]
 8002662:	f013 0f02 	tst.w	r3, #2
 8002666:	d12c      	bne.n	80026c2 <HAL_ADC_PollForConversion+0xe6>
      if(Timeout != HAL_MAX_DELAY)
 8002668:	f1b4 3fff 	cmp.w	r4, #4294967295
 800266c:	d0f8      	beq.n	8002660 <HAL_ADC_PollForConversion+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800266e:	2c00      	cmp	r4, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_ADC_PollForConversion+0x78>
 8002672:	f7ff ff99 	bl	80025a8 <HAL_GetTick>
 8002676:	1bc3      	subs	r3, r0, r7
 8002678:	42a3      	cmp	r3, r4
 800267a:	d9f0      	bls.n	800265e <HAL_ADC_PollForConversion+0x82>
 800267c:	e7ea      	b.n	8002654 <HAL_ADC_PollForConversion+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800267e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	62b3      	str	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002686:	2300      	movs	r3, #0
 8002688:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            return HAL_TIMEOUT;
 800268c:	2003      	movs	r0, #3
 800268e:	e7df      	b.n	8002650 <HAL_ADC_PollForConversion+0x74>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002690:	6919      	ldr	r1, [r3, #16]
 8002692:	4a30      	ldr	r2, [pc, #192]	; (8002754 <HAL_ADC_PollForConversion+0x178>)
 8002694:	4211      	tst	r1, r2
 8002696:	d104      	bne.n	80026a2 <HAL_ADC_PollForConversion+0xc6>
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 800269e:	4211      	tst	r1, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_ADC_PollForConversion+0x10c>
 80026a2:	6919      	ldr	r1, [r3, #16]
 80026a4:	4a2d      	ldr	r2, [pc, #180]	; (800275c <HAL_ADC_PollForConversion+0x180>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	bb02      	cbnz	r2, 80026ec <HAL_ADC_PollForConversion+0x110>
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_ADC_PollForConversion+0x180>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	23fc      	movne	r3, #252	; 0xfc
 80026b6:	2354      	moveq	r3, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80026b8:	fb03 f505 	mul.w	r5, r3, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026bc:	9b01      	ldr	r3, [sp, #4]
 80026be:	429d      	cmp	r5, r3
 80026c0:	d81f      	bhi.n	8002702 <HAL_ADC_PollForConversion+0x126>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026c2:	6833      	ldr	r3, [r6, #0]
 80026c4:	f06f 0212 	mvn.w	r2, #18
 80026c8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026ca:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80026cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d0:	62b3      	str	r3, [r6, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026d2:	6833      	ldr	r3, [r6, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026de:	d024      	beq.n	800272a <HAL_ADC_PollForConversion+0x14e>
  return HAL_OK;
 80026e0:	2000      	movs	r0, #0
 80026e2:	e7b5      	b.n	8002650 <HAL_ADC_PollForConversion+0x74>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026e4:	2329      	movs	r3, #41	; 0x29
 80026e6:	e7e7      	b.n	80026b8 <HAL_ADC_PollForConversion+0xdc>
 80026e8:	2354      	movs	r3, #84	; 0x54
 80026ea:	e7e5      	b.n	80026b8 <HAL_ADC_PollForConversion+0xdc>
 80026ec:	23fc      	movs	r3, #252	; 0xfc
 80026ee:	e7e3      	b.n	80026b8 <HAL_ADC_PollForConversion+0xdc>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026f0:	9b01      	ldr	r3, [sp, #4]
 80026f2:	42ab      	cmp	r3, r5
 80026f4:	d310      	bcc.n	8002718 <HAL_ADC_PollForConversion+0x13c>
      Conversion_Timeout_CPU_cycles ++;
 80026f6:	9b01      	ldr	r3, [sp, #4]
 80026f8:	3301      	adds	r3, #1
 80026fa:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026fc:	9b01      	ldr	r3, [sp, #4]
 80026fe:	42ab      	cmp	r3, r5
 8002700:	d2df      	bcs.n	80026c2 <HAL_ADC_PollForConversion+0xe6>
      if(Timeout != HAL_MAX_DELAY)
 8002702:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002706:	d0f6      	beq.n	80026f6 <HAL_ADC_PollForConversion+0x11a>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002708:	2c00      	cmp	r4, #0
 800270a:	d0f1      	beq.n	80026f0 <HAL_ADC_PollForConversion+0x114>
 800270c:	f7ff ff4c 	bl	80025a8 <HAL_GetTick>
 8002710:	1bc0      	subs	r0, r0, r7
 8002712:	42a0      	cmp	r0, r4
 8002714:	d9ef      	bls.n	80026f6 <HAL_ADC_PollForConversion+0x11a>
 8002716:	e7eb      	b.n	80026f0 <HAL_ADC_PollForConversion+0x114>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002718:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	62b3      	str	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002720:	2300      	movs	r3, #0
 8002722:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
 8002728:	e792      	b.n	8002650 <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800272a:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800272c:	b960      	cbnz	r0, 8002748 <HAL_ADC_PollForConversion+0x16c>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800272e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002734:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002736:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002738:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800273c:	d188      	bne.n	8002650 <HAL_ADC_PollForConversion+0x74>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800273e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	62b3      	str	r3, [r6, #40]	; 0x28
 8002746:	e783      	b.n	8002650 <HAL_ADC_PollForConversion+0x74>
  return HAL_OK;
 8002748:	2000      	movs	r0, #0
 800274a:	e781      	b.n	8002650 <HAL_ADC_PollForConversion+0x74>
 800274c:	200003b0 	.word	0x200003b0
 8002750:	24924924 	.word	0x24924924
 8002754:	12492492 	.word	0x12492492
 8002758:	00492492 	.word	0x00492492
 800275c:	00249249 	.word	0x00249249

08002760 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002760:	6803      	ldr	r3, [r0, #0]
 8002762:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002764:	4770      	bx	lr
	...

08002768 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002768:	b430      	push	{r4, r5}
 800276a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800276c:	2200      	movs	r2, #0
 800276e:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002770:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002774:	2a01      	cmp	r2, #1
 8002776:	f000 8093 	beq.w	80028a0 <HAL_ADC_ConfigChannel+0x138>
 800277a:	4603      	mov	r3, r0
 800277c:	2201      	movs	r2, #1
 800277e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002782:	684a      	ldr	r2, [r1, #4]
 8002784:	2a06      	cmp	r2, #6
 8002786:	d82d      	bhi.n	80027e4 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002788:	6804      	ldr	r4, [r0, #0]
 800278a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800278c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002790:	3a05      	subs	r2, #5
 8002792:	f04f 0c1f 	mov.w	ip, #31
 8002796:	fa0c fc02 	lsl.w	ip, ip, r2
 800279a:	ea20 000c 	bic.w	r0, r0, ip
 800279e:	680d      	ldr	r5, [r1, #0]
 80027a0:	fa05 f202 	lsl.w	r2, r5, r2
 80027a4:	4302      	orrs	r2, r0
 80027a6:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027a8:	680a      	ldr	r2, [r1, #0]
 80027aa:	2a09      	cmp	r2, #9
 80027ac:	d938      	bls.n	8002820 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027ae:	681c      	ldr	r4, [r3, #0]
 80027b0:	68e0      	ldr	r0, [r4, #12]
 80027b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80027b6:	3a1e      	subs	r2, #30
 80027b8:	f04f 0c07 	mov.w	ip, #7
 80027bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80027c0:	ea20 000c 	bic.w	r0, r0, ip
 80027c4:	688d      	ldr	r5, [r1, #8]
 80027c6:	fa05 f202 	lsl.w	r2, r5, r2
 80027ca:	4302      	orrs	r2, r0
 80027cc:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ce:	680a      	ldr	r2, [r1, #0]
 80027d0:	3a10      	subs	r2, #16
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d934      	bls.n	8002840 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d6:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80027de:	b002      	add	sp, #8
 80027e0:	bc30      	pop	{r4, r5}
 80027e2:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80027e4:	2a0c      	cmp	r2, #12
 80027e6:	d80d      	bhi.n	8002804 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027e8:	6805      	ldr	r5, [r0, #0]
 80027ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80027ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80027f0:	3a23      	subs	r2, #35	; 0x23
 80027f2:	241f      	movs	r4, #31
 80027f4:	4094      	lsls	r4, r2
 80027f6:	ea20 0004 	bic.w	r0, r0, r4
 80027fa:	680c      	ldr	r4, [r1, #0]
 80027fc:	4094      	lsls	r4, r2
 80027fe:	4320      	orrs	r0, r4
 8002800:	6328      	str	r0, [r5, #48]	; 0x30
 8002802:	e7d1      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002804:	6805      	ldr	r5, [r0, #0]
 8002806:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002808:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800280c:	3a41      	subs	r2, #65	; 0x41
 800280e:	241f      	movs	r4, #31
 8002810:	4094      	lsls	r4, r2
 8002812:	ea20 0004 	bic.w	r0, r0, r4
 8002816:	680c      	ldr	r4, [r1, #0]
 8002818:	4094      	lsls	r4, r2
 800281a:	4320      	orrs	r0, r4
 800281c:	62e8      	str	r0, [r5, #44]	; 0x2c
 800281e:	e7c3      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002820:	681c      	ldr	r4, [r3, #0]
 8002822:	6920      	ldr	r0, [r4, #16]
 8002824:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002828:	f04f 0c07 	mov.w	ip, #7
 800282c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002830:	ea20 000c 	bic.w	r0, r0, ip
 8002834:	688d      	ldr	r5, [r1, #8]
 8002836:	fa05 f202 	lsl.w	r2, r5, r2
 800283a:	4302      	orrs	r2, r0
 800283c:	6122      	str	r2, [r4, #16]
 800283e:	e7c6      	b.n	80027ce <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <HAL_ADC_ConfigChannel+0x13c>)
 8002844:	4290      	cmp	r0, r2
 8002846:	d005      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284a:	f042 0220 	orr.w	r2, r2, #32
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002850:	2001      	movs	r0, #1
 8002852:	e7c1      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002854:	6892      	ldr	r2, [r2, #8]
 8002856:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 800285a:	d11d      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800285c:	4811      	ldr	r0, [pc, #68]	; (80028a4 <HAL_ADC_ConfigChannel+0x13c>)
 800285e:	6882      	ldr	r2, [r0, #8]
 8002860:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002864:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002866:	680a      	ldr	r2, [r1, #0]
 8002868:	2a10      	cmp	r2, #16
 800286a:	d001      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x108>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286c:	2000      	movs	r0, #0
 800286e:	e7b3      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <HAL_ADC_ConfigChannel+0x140>)
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	490d      	ldr	r1, [pc, #52]	; (80028ac <HAL_ADC_ConfigChannel+0x144>)
 8002876:	fba1 1202 	umull	r1, r2, r1, r2
 800287a:	0c92      	lsrs	r2, r2, #18
 800287c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002880:	0052      	lsls	r2, r2, #1
 8002882:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002884:	9a01      	ldr	r2, [sp, #4]
 8002886:	b14a      	cbz	r2, 800289c <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 8002888:	9a01      	ldr	r2, [sp, #4]
 800288a:	3a01      	subs	r2, #1
 800288c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800288e:	9a01      	ldr	r2, [sp, #4]
 8002890:	2a00      	cmp	r2, #0
 8002892:	d1f9      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002894:	2000      	movs	r0, #0
 8002896:	e79f      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x70>
 8002898:	2000      	movs	r0, #0
 800289a:	e79d      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x70>
 800289c:	2000      	movs	r0, #0
 800289e:	e79b      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80028a0:	2002      	movs	r0, #2
 80028a2:	e79c      	b.n	80027de <HAL_ADC_ConfigChannel+0x76>
 80028a4:	40012400 	.word	0x40012400
 80028a8:	200003b0 	.word	0x200003b0
 80028ac:	431bde83 	.word	0x431bde83

080028b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028b0:	b530      	push	{r4, r5, lr}
 80028b2:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b8:	6803      	ldr	r3, [r0, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	f012 0f01 	tst.w	r2, #1
 80028c0:	d13b      	bne.n	800293a <ADC_Enable+0x8a>
 80028c2:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <ADC_Enable+0x90>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <ADC_Enable+0x94>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0c9b      	lsrs	r3, r3, #18
 80028d8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	b12b      	cbz	r3, 80028ea <ADC_Enable+0x3a>
    {
      wait_loop_index--;
 80028de:	9b01      	ldr	r3, [sp, #4]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f9      	bne.n	80028de <ADC_Enable+0x2e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ea:	f7ff fe5d 	bl	80025a8 <HAL_GetTick>
 80028ee:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f013 0f01 	tst.w	r3, #1
 80028f8:	d006      	beq.n	8002908 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028fa:	2000      	movs	r0, #0
 80028fc:	e01e      	b.n	800293c <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f013 0f01 	tst.w	r3, #1
 8002906:	d116      	bne.n	8002936 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002908:	f7ff fe4e 	bl	80025a8 <HAL_GetTick>
 800290c:	1b43      	subs	r3, r0, r5
 800290e:	2b02      	cmp	r3, #2
 8002910:	d9f5      	bls.n	80028fe <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f013 0f01 	tst.w	r3, #1
 800291a:	d1f0      	bne.n	80028fe <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800291e:	f043 0310 	orr.w	r3, r3, #16
 8002922:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002924:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 800292c:	2300      	movs	r3, #0
 800292e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8002932:	2001      	movs	r0, #1
 8002934:	e002      	b.n	800293c <ADC_Enable+0x8c>
  return HAL_OK;
 8002936:	2000      	movs	r0, #0
 8002938:	e000      	b.n	800293c <ADC_Enable+0x8c>
 800293a:	2000      	movs	r0, #0
}
 800293c:	b003      	add	sp, #12
 800293e:	bd30      	pop	{r4, r5, pc}
 8002940:	200003b0 	.word	0x200003b0
 8002944:	431bde83 	.word	0x431bde83

08002948 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002948:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800294c:	2b01      	cmp	r3, #1
 800294e:	d066      	beq.n	8002a1e <HAL_ADC_Start+0xd6>
{
 8002950:	b510      	push	{r4, lr}
 8002952:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002954:	2301      	movs	r3, #1
 8002956:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800295a:	f7ff ffa9 	bl	80028b0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800295e:	2800      	cmp	r0, #0
 8002960:	d159      	bne.n	8002a16 <HAL_ADC_Start+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 8002962:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	4a2b      	ldr	r2, [pc, #172]	; (8002a24 <HAL_ADC_Start+0xdc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d028      	beq.n	80029cc <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800297a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800297c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002980:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002988:	d005      	beq.n	8002996 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800298a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800298c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002990:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002994:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002996:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002998:	f412 5f80 	tst.w	r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800299c:	bf1a      	itte	ne
 800299e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80029a0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80029a4:	2200      	moveq	r2, #0
 80029a6:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80029a8:	2200      	movs	r2, #0
 80029aa:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029ae:	f06f 0202 	mvn.w	r2, #2
 80029b2:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80029bc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80029c0:	d01a      	beq.n	80029f8 <HAL_ADC_Start+0xb0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	e027      	b.n	8002a1c <HAL_ADC_Start+0xd4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029cc:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80029d0:	6852      	ldr	r2, [r2, #4]
 80029d2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80029d6:	d0d0      	beq.n	800297a <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029de:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_ADC_Start+0xe0>)
 80029e2:	6852      	ldr	r2, [r2, #4]
 80029e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80029e8:	d0d5      	beq.n	8002996 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80029f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80029f6:	e7ce      	b.n	8002996 <HAL_ADC_Start+0x4e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_ADC_Start+0xdc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_ADC_Start+0xc0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	e009      	b.n	8002a1c <HAL_ADC_Start+0xd4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a08:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002a0c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a0e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002a12:	d1d6      	bne.n	80029c2 <HAL_ADC_Start+0x7a>
 8002a14:	e7f3      	b.n	80029fe <HAL_ADC_Start+0xb6>
    __HAL_UNLOCK(hadc);
 8002a16:	2300      	movs	r3, #0
 8002a18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002a1c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002a1e:	2002      	movs	r0, #2
}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40012800 	.word	0x40012800
 8002a28:	40012400 	.word	0x40012400

08002a2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a2e:	6803      	ldr	r3, [r0, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	f012 0f01 	tst.w	r2, #1
 8002a36:	d101      	bne.n	8002a3c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a38:	2000      	movs	r0, #0
}
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002a46:	f7ff fdaf 	bl	80025a8 <HAL_GetTick>
 8002a4a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f013 0f01 	tst.w	r3, #1
 8002a54:	d106      	bne.n	8002a64 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8002a56:	2000      	movs	r0, #0
 8002a58:	e7ef      	b.n	8002a3a <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f013 0f01 	tst.w	r3, #1
 8002a62:	d013      	beq.n	8002a8c <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a64:	f7ff fda0 	bl	80025a8 <HAL_GetTick>
 8002a68:	1b43      	subs	r3, r0, r5
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d9f5      	bls.n	8002a5a <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f013 0f01 	tst.w	r3, #1
 8002a76:	d0f0      	beq.n	8002a5a <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a7a:	f043 0310 	orr.w	r3, r3, #16
 8002a7e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e7d6      	b.n	8002a3a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	e7d4      	b.n	8002a3a <ADC_ConversionStop_Disable+0xe>

08002a90 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d07a      	beq.n	8002b8a <HAL_ADC_Init+0xfa>
{
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d04f      	beq.n	8002b3e <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff ffc4 	bl	8002a2c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aa6:	f013 0310 	ands.w	r3, r3, #16
 8002aaa:	d168      	bne.n	8002b7e <HAL_ADC_Init+0xee>
 8002aac:	2800      	cmp	r0, #0
 8002aae:	d166      	bne.n	8002b7e <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ab2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002ab6:	f022 0202 	bic.w	r2, r2, #2
 8002aba:	f042 0202 	orr.w	r2, r2, #2
 8002abe:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ac0:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ac2:	6862      	ldr	r2, [r4, #4]
 8002ac4:	69e5      	ldr	r5, [r4, #28]
 8002ac6:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ac8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002acc:	68a5      	ldr	r5, [r4, #8]
 8002ace:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002ad2:	d004      	beq.n	8002ade <HAL_ADC_Init+0x4e>
 8002ad4:	2d01      	cmp	r5, #1
 8002ad6:	bf14      	ite	ne
 8002ad8:	2500      	movne	r5, #0
 8002ada:	2501      	moveq	r5, #1
 8002adc:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ade:	7d26      	ldrb	r6, [r4, #20]
 8002ae0:	2e01      	cmp	r6, #1
 8002ae2:	d032      	beq.n	8002b4a <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8002ae4:	6826      	ldr	r6, [r4, #0]
 8002ae6:	6871      	ldr	r1, [r6, #4]
 8002ae8:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002aec:	4329      	orrs	r1, r5
 8002aee:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002af0:	6825      	ldr	r5, [r4, #0]
 8002af2:	68ae      	ldr	r6, [r5, #8]
 8002af4:	4926      	ldr	r1, [pc, #152]	; (8002b90 <HAL_ADC_Init+0x100>)
 8002af6:	4031      	ands	r1, r6
 8002af8:	4311      	orrs	r1, r2
 8002afa:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002afc:	68a1      	ldr	r1, [r4, #8]
 8002afe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002b02:	d001      	beq.n	8002b08 <HAL_ADC_Init+0x78>
 8002b04:	2901      	cmp	r1, #1
 8002b06:	d102      	bne.n	8002b0e <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b08:	6923      	ldr	r3, [r4, #16]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002b0e:	6825      	ldr	r5, [r4, #0]
 8002b10:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002b12:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002b16:	430b      	orrs	r3, r1
 8002b18:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b1a:	6823      	ldr	r3, [r4, #0]
 8002b1c:	6899      	ldr	r1, [r3, #8]
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_ADC_Init+0x104>)
 8002b20:	400b      	ands	r3, r1
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d022      	beq.n	8002b6c <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8002b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b28:	f023 0312 	bic.w	r3, r3, #18
 8002b2c:	f043 0310 	orr.w	r3, r3, #16
 8002b30:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e024      	b.n	8002b88 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3e:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002b40:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002b44:	f7ff fb10 	bl	8002168 <HAL_ADC_MspInit>
 8002b48:	e7a9      	b.n	8002a9e <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b4a:	b931      	cbnz	r1, 8002b5a <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b4c:	69a1      	ldr	r1, [r4, #24]
 8002b4e:	3901      	subs	r1, #1
 8002b50:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002b54:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8002b58:	e7c4      	b.n	8002ae4 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b5c:	f041 0120 	orr.w	r1, r1, #32
 8002b60:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b64:	f041 0101 	orr.w	r1, r1, #1
 8002b68:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002b6a:	e7bb      	b.n	8002ae4 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002b70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b7c:	e004      	b.n	8002b88 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b80:	f043 0310 	orr.w	r3, r3, #16
 8002b84:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002b86:	2001      	movs	r0, #1
}
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002b8a:	2001      	movs	r0, #1
}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	ffe1f7fd 	.word	0xffe1f7fd
 8002b94:	ff1f0efe 	.word	0xff1f0efe

08002b98 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002b98:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d013      	beq.n	8002bc8 <HAL_ADC_Stop+0x30>
{
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002baa:	f7ff ff3f 	bl	8002a2c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002bae:	b938      	cbnz	r0, 8002bc0 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8002bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002bc6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002bc8:	2002      	movs	r0, #2
}
 8002bca:	4770      	bx	lr

08002bcc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4907      	ldr	r1, [pc, #28]	; (8002bec <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002bce:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bd0:	0203      	lsls	r3, r0, #8
 8002bd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bda:	0412      	lsls	r2, r2, #16
 8002bdc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002be8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_NVIC_SetPriority+0x64>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfa:	f1c3 0c07 	rsb	ip, r3, #7
 8002bfe:	f1bc 0f04 	cmp.w	ip, #4
 8002c02:	bf28      	it	cs
 8002c04:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c08:	f103 0e04 	add.w	lr, r3, #4
 8002c0c:	f1be 0f06 	cmp.w	lr, #6
 8002c10:	bf8c      	ite	hi
 8002c12:	3b03      	subhi	r3, #3
 8002c14:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c16:	f04f 3eff 	mov.w	lr, #4294967295
 8002c1a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002c1e:	ea21 010c 	bic.w	r1, r1, ip
 8002c22:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	fa0e fe03 	lsl.w	lr, lr, r3
 8002c28:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	db09      	blt.n	8002c46 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	0109      	lsls	r1, r1, #4
 8002c34:	b2c9      	uxtb	r1, r1
 8002c36:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c3a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002c3e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c42:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	f000 000f 	and.w	r0, r0, #15
 8002c4a:	0109      	lsls	r1, r1, #4
 8002c4c:	b2c9      	uxtb	r1, r1
 8002c4e:	4b02      	ldr	r3, [pc, #8]	; (8002c58 <HAL_NVIC_SetPriority+0x68>)
 8002c50:	5419      	strb	r1, [r3, r0]
 8002c52:	e7f6      	b.n	8002c42 <HAL_NVIC_SetPriority+0x52>
 8002c54:	e000ed00 	.word	0xe000ed00
 8002c58:	e000ed14 	.word	0xe000ed14

08002c5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	db07      	blt.n	8002c70 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c60:	0941      	lsrs	r1, r0, #5
 8002c62:	f000 001f 	and.w	r0, r0, #31
 8002c66:	2301      	movs	r3, #1
 8002c68:	4083      	lsls	r3, r0
 8002c6a:	4a02      	ldr	r2, [pc, #8]	; (8002c74 <HAL_NVIC_EnableIRQ+0x18>)
 8002c6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7e:	f8d1 9000 	ldr.w	r9, [r1]
 8002c82:	f1b9 0f00 	cmp.w	r9, #0
 8002c86:	f000 811f 	beq.w	8002ec8 <HAL_GPIO_Init+0x250>
 8002c8a:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002c8c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c8e:	4e90      	ldr	r6, [pc, #576]	; (8002ed0 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c90:	4c90      	ldr	r4, [pc, #576]	; (8002ed4 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8002c92:	4d91      	ldr	r5, [pc, #580]	; (8002ed8 <HAL_GPIO_Init+0x260>)
 8002c94:	f8df e244 	ldr.w	lr, [pc, #580]	; 8002edc <HAL_GPIO_Init+0x264>
 8002c98:	4694      	mov	ip, r2
 8002c9a:	e0ba      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
 8002c9c:	f04f 0c00 	mov.w	ip, #0
 8002ca0:	e025      	b.n	8002cee <HAL_GPIO_Init+0x76>
 8002ca2:	45a9      	cmp	r9, r5
 8002ca4:	d00f      	beq.n	8002cc6 <HAL_GPIO_Init+0x4e>
 8002ca6:	d906      	bls.n	8002cb6 <HAL_GPIO_Init+0x3e>
 8002ca8:	45f1      	cmp	r9, lr
 8002caa:	d00c      	beq.n	8002cc6 <HAL_GPIO_Init+0x4e>
 8002cac:	f8df a230 	ldr.w	sl, [pc, #560]	; 8002ee0 <HAL_GPIO_Init+0x268>
 8002cb0:	45d1      	cmp	r9, sl
 8002cb2:	d008      	beq.n	8002cc6 <HAL_GPIO_Init+0x4e>
 8002cb4:	e01b      	b.n	8002cee <HAL_GPIO_Init+0x76>
 8002cb6:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8002ee4 <HAL_GPIO_Init+0x26c>
 8002cba:	45d1      	cmp	r9, sl
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x4e>
 8002cbe:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002cc2:	45d1      	cmp	r9, sl
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cc6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002cca:	f1bc 0f00 	cmp.w	ip, #0
 8002cce:	f000 80ef 	beq.w	8002eb0 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cd2:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002cd6:	bf0c      	ite	eq
 8002cd8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002cdc:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce0:	f04f 0c08 	mov.w	ip, #8
 8002ce4:	e003      	b.n	8002cee <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002ce6:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002cea:	45d1      	cmp	r9, sl
 8002cec:	d0eb      	beq.n	8002cc6 <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cee:	2fff      	cmp	r7, #255	; 0xff
 8002cf0:	bf99      	ittee	ls
 8002cf2:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cf4:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cf6:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cfa:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cfe:	f8d9 8000 	ldr.w	r8, [r9]
 8002d02:	f04f 0b0f 	mov.w	fp, #15
 8002d06:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002d0a:	ea28 080b 	bic.w	r8, r8, fp
 8002d0e:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002d12:	ea48 080a 	orr.w	r8, r8, sl
 8002d16:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002d1e:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002d22:	d06f      	beq.n	8002e04 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d24:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002d28:	f048 0801 	orr.w	r8, r8, #1
 8002d2c:	f8c6 8018 	str.w	r8, [r6, #24]
 8002d30:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002d34:	f008 0801 	and.w	r8, r8, #1
 8002d38:	f8cd 8004 	str.w	r8, [sp, #4]
 8002d3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002d40:	f023 0803 	bic.w	r8, r3, #3
 8002d44:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002d48:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002d4c:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d50:	f003 0b03 	and.w	fp, r3, #3
 8002d54:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002d58:	f04f 090f 	mov.w	r9, #15
 8002d5c:	fa09 f90b 	lsl.w	r9, r9, fp
 8002d60:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d64:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8002ee8 <HAL_GPIO_Init+0x270>
 8002d68:	4548      	cmp	r0, r9
 8002d6a:	f000 80a4 	beq.w	8002eb6 <HAL_GPIO_Init+0x23e>
 8002d6e:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002d72:	4548      	cmp	r0, r9
 8002d74:	f000 80a2 	beq.w	8002ebc <HAL_GPIO_Init+0x244>
 8002d78:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002d7c:	4548      	cmp	r0, r9
 8002d7e:	f000 80a0 	beq.w	8002ec2 <HAL_GPIO_Init+0x24a>
 8002d82:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002d86:	4548      	cmp	r0, r9
 8002d88:	bf0c      	ite	eq
 8002d8a:	f04f 0903 	moveq.w	r9, #3
 8002d8e:	f04f 0904 	movne.w	r9, #4
 8002d92:	fa09 f90b 	lsl.w	r9, r9, fp
 8002d96:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002d9a:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d9e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002da2:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002da6:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8002daa:	bf14      	ite	ne
 8002dac:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002db0:	ea28 0807 	biceq.w	r8, r8, r7
 8002db4:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002dbc:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dc0:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8002dc4:	bf14      	ite	ne
 8002dc6:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dca:	ea28 0807 	biceq.w	r8, r8, r7
 8002dce:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd2:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002dd6:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002dda:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002dde:	bf14      	ite	ne
 8002de0:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002de4:	ea28 0807 	biceq.w	r8, r8, r7
 8002de8:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dec:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002df0:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002df4:	f8d4 8000 	ldr.w	r8, [r4]
 8002df8:	bf14      	ite	ne
 8002dfa:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dfe:	ea28 0707 	biceq.w	r7, r8, r7
 8002e02:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8002e04:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e06:	f8d1 9000 	ldr.w	r9, [r1]
 8002e0a:	3204      	adds	r2, #4
 8002e0c:	fa39 f703 	lsrs.w	r7, r9, r3
 8002e10:	d05a      	beq.n	8002ec8 <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 8002e12:	f04f 0801 	mov.w	r8, #1
 8002e16:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1a:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 8002e1e:	ea38 0909 	bics.w	r9, r8, r9
 8002e22:	d1ef      	bne.n	8002e04 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 8002e24:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002e28:	f1b9 0f12 	cmp.w	r9, #18
 8002e2c:	f63f af39 	bhi.w	8002ca2 <HAL_GPIO_Init+0x2a>
 8002e30:	f1b9 0f12 	cmp.w	r9, #18
 8002e34:	f63f af5b 	bhi.w	8002cee <HAL_GPIO_Init+0x76>
 8002e38:	f20f 0a04 	addw	sl, pc, #4
 8002e3c:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002e40:	08002cc7 	.word	0x08002cc7
 8002e44:	08002e8d 	.word	0x08002e8d
 8002e48:	08002e9d 	.word	0x08002e9d
 8002e4c:	08002c9d 	.word	0x08002c9d
 8002e50:	08002cef 	.word	0x08002cef
 8002e54:	08002cef 	.word	0x08002cef
 8002e58:	08002cef 	.word	0x08002cef
 8002e5c:	08002cef 	.word	0x08002cef
 8002e60:	08002cef 	.word	0x08002cef
 8002e64:	08002cef 	.word	0x08002cef
 8002e68:	08002cef 	.word	0x08002cef
 8002e6c:	08002cef 	.word	0x08002cef
 8002e70:	08002cef 	.word	0x08002cef
 8002e74:	08002cef 	.word	0x08002cef
 8002e78:	08002cef 	.word	0x08002cef
 8002e7c:	08002cef 	.word	0x08002cef
 8002e80:	08002cef 	.word	0x08002cef
 8002e84:	08002e93 	.word	0x08002e93
 8002e88:	08002ea7 	.word	0x08002ea7
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e8c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8002e90:	e72d      	b.n	8002cee <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e92:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002e96:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002e9a:	e728      	b.n	8002cee <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e9c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002ea0:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002ea4:	e723      	b.n	8002cee <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ea6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002eaa:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8002eae:	e71e      	b.n	8002cee <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eb0:	f04f 0c04 	mov.w	ip, #4
 8002eb4:	e71b      	b.n	8002cee <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002eb6:	f04f 0900 	mov.w	r9, #0
 8002eba:	e76a      	b.n	8002d92 <HAL_GPIO_Init+0x11a>
 8002ebc:	f04f 0901 	mov.w	r9, #1
 8002ec0:	e767      	b.n	8002d92 <HAL_GPIO_Init+0x11a>
 8002ec2:	f04f 0902 	mov.w	r9, #2
 8002ec6:	e764      	b.n	8002d92 <HAL_GPIO_Init+0x11a>
  }
}
 8002ec8:	b003      	add	sp, #12
 8002eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40010400 	.word	0x40010400
 8002ed8:	10220000 	.word	0x10220000
 8002edc:	10310000 	.word	0x10310000
 8002ee0:	10320000 	.word	0x10320000
 8002ee4:	10120000 	.word	0x10120000
 8002ee8:	40010800 	.word	0x40010800

08002eec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eec:	6883      	ldr	r3, [r0, #8]
 8002eee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ef0:	bf14      	ite	ne
 8002ef2:	2001      	movne	r0, #1
 8002ef4:	2000      	moveq	r0, #0
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ef8:	b10a      	cbz	r2, 8002efe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002efa:	6101      	str	r1, [r0, #16]
 8002efc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002efe:	0409      	lsls	r1, r1, #16
 8002f00:	6101      	str	r1, [r0, #16]
  }
}
 8002f02:	4770      	bx	lr

08002f04 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f04:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f06:	ea01 0203 	and.w	r2, r1, r3
 8002f0a:	ea21 0103 	bic.w	r1, r1, r3
 8002f0e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002f12:	6101      	str	r1, [r0, #16]
}
 8002f14:	4770      	bx	lr

08002f16 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f16:	6803      	ldr	r3, [r0, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002f1e:	d101      	bne.n	8002f24 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8002f20:	2000      	movs	r0, #0
}
 8002f22:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f28:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f38:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002f3a:	f042 0204 	orr.w	r2, r2, #4
 8002f3e:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002f40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8002f44:	2001      	movs	r0, #1
 8002f46:	4770      	bx	lr

08002f48 <I2C_WaitOnFlagUntilTimeout>:
{
 8002f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f4c:	4605      	mov	r5, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	4616      	mov	r6, r2
 8002f52:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f54:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002f58:	f1b8 0f01 	cmp.w	r8, #1
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	bf0c      	ite	eq
 8002f60:	695b      	ldreq	r3, [r3, #20]
 8002f62:	699b      	ldrne	r3, [r3, #24]
 8002f64:	ea24 0c03 	bic.w	ip, r4, r3
 8002f68:	fa1f fc8c 	uxth.w	ip, ip
 8002f6c:	fabc fc8c 	clz	ip, ip
 8002f70:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002f74:	4566      	cmp	r6, ip
 8002f76:	d127      	bne.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002f7c:	d0ec      	beq.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7ff fb13 	bl	80025a8 <HAL_GetTick>
 8002f82:	9b06      	ldr	r3, [sp, #24]
 8002f84:	1ac0      	subs	r0, r0, r3
 8002f86:	42b8      	cmp	r0, r7
 8002f88:	d801      	bhi.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0x46>
 8002f8a:	2f00      	cmp	r7, #0
 8002f8c:	d1e4      	bne.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f8e:	f1b8 0f01 	cmp.w	r8, #1
 8002f92:	682b      	ldr	r3, [r5, #0]
 8002f94:	bf0c      	ite	eq
 8002f96:	695b      	ldreq	r3, [r3, #20]
 8002f98:	699b      	ldrne	r3, [r3, #24]
 8002f9a:	ea24 0303 	bic.w	r3, r4, r3
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	429e      	cmp	r6, r3
 8002fa8:	d1d6      	bne.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fb4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002fba:	f042 0220 	orr.w	r2, r2, #32
 8002fbe:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8002fc0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	e000      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 8002fc8:	2000      	movs	r0, #0
}
 8002fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002fce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	460e      	mov	r6, r1
 8002fd6:	4617      	mov	r7, r2
 8002fd8:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fda:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8002fde:	f1b8 0f01 	cmp.w	r8, #1
 8002fe2:	682b      	ldr	r3, [r5, #0]
 8002fe4:	bf0c      	ite	eq
 8002fe6:	695c      	ldreq	r4, [r3, #20]
 8002fe8:	699c      	ldrne	r4, [r3, #24]
 8002fea:	ea26 0404 	bic.w	r4, r6, r4
 8002fee:	b2a4      	uxth	r4, r4
 8002ff0:	3c00      	subs	r4, #0
 8002ff2:	bf18      	it	ne
 8002ff4:	2401      	movne	r4, #1
 8002ff6:	2c00      	cmp	r4, #0
 8002ff8:	d044      	beq.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ffa:	682b      	ldr	r3, [r5, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003002:	d127      	bne.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8003004:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003008:	d0e9      	beq.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300a:	f7ff facd 	bl	80025a8 <HAL_GetTick>
 800300e:	eba0 0009 	sub.w	r0, r0, r9
 8003012:	42b8      	cmp	r0, r7
 8003014:	d801      	bhi.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 8003016:	2f00      	cmp	r7, #0
 8003018:	d1e1      	bne.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800301a:	f1b8 0f01 	cmp.w	r8, #1
 800301e:	682b      	ldr	r3, [r5, #0]
 8003020:	bf0c      	ite	eq
 8003022:	695b      	ldreq	r3, [r3, #20]
 8003024:	699b      	ldrne	r3, [r3, #24]
 8003026:	ea26 0303 	bic.w	r3, r6, r3
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b00      	subs	r3, #0
 800302e:	bf18      	it	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0d3      	beq.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	2300      	movs	r3, #0
 8003038:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	2220      	movs	r2, #32
 800303c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003040:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003044:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003046:	f042 0220 	orr.w	r2, r2, #32
 800304a:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800304c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003050:	2001      	movs	r0, #1
 8003052:	e015      	b.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003062:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003064:	2300      	movs	r3, #0
 8003066:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	2220      	movs	r2, #32
 800306a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003072:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003074:	f042 0204 	orr.w	r2, r2, #4
 8003078:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800307a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800307e:	2001      	movs	r0, #1
}
 8003080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8003084:	2000      	movs	r0, #0
 8003086:	e7fb      	b.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

08003088 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4604      	mov	r4, r0
 800308c:	460d      	mov	r5, r1
 800308e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003098:	d121      	bne.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309a:	4620      	mov	r0, r4
 800309c:	f7ff ff3b 	bl	8002f16 <I2C_IsAcknowledgeFailed>
 80030a0:	b9f8      	cbnz	r0, 80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80030a2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80030a6:	d0f3      	beq.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	f7ff fa7e 	bl	80025a8 <HAL_GetTick>
 80030ac:	1b80      	subs	r0, r0, r6
 80030ae:	42a8      	cmp	r0, r5
 80030b0:	d801      	bhi.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80030b2:	2d00      	cmp	r5, #0
 80030b4:	d1ec      	bne.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030be:	d1e7      	bne.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	2220      	movs	r2, #32
 80030c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030d0:	f042 0220 	orr.w	r2, r2, #32
 80030d4:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80030d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80030da:	2001      	movs	r0, #1
 80030dc:	e000      	b.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80030de:	2000      	movs	r0, #0
}
 80030e0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80030e2:	2001      	movs	r0, #1
 80030e4:	e7fc      	b.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080030e6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80030e6:	b570      	push	{r4, r5, r6, lr}
 80030e8:	4604      	mov	r4, r0
 80030ea:	460d      	mov	r5, r1
 80030ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f013 0f04 	tst.w	r3, #4
 80030f6:	d121      	bne.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff ff0c 	bl	8002f16 <I2C_IsAcknowledgeFailed>
 80030fe:	b9f8      	cbnz	r0, 8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003100:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003104:	d0f3      	beq.n	80030ee <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7ff fa4f 	bl	80025a8 <HAL_GetTick>
 800310a:	1b80      	subs	r0, r0, r6
 800310c:	42a8      	cmp	r0, r5
 800310e:	d801      	bhi.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003110:	2d00      	cmp	r5, #0
 8003112:	d1ec      	bne.n	80030ee <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f013 0f04 	tst.w	r3, #4
 800311c:	d1e7      	bne.n	80030ee <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	2300      	movs	r3, #0
 8003120:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003122:	2220      	movs	r2, #32
 8003124:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800312e:	f042 0220 	orr.w	r2, r2, #32
 8003132:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003134:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003138:	2001      	movs	r0, #1
 800313a:	e000      	b.n	800313e <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 800313c:	2000      	movs	r0, #0
}
 800313e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003140:	2001      	movs	r0, #1
 8003142:	e7fc      	b.n	800313e <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003144 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003144:	2800      	cmp	r0, #0
 8003146:	f000 80b1 	beq.w	80032ac <HAL_I2C_Init+0x168>
{
 800314a:	b538      	push	{r3, r4, r5, lr}
 800314c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800314e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003152:	2b00      	cmp	r3, #0
 8003154:	d074      	beq.n	8003240 <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003156:	2324      	movs	r3, #36	; 0x24
 8003158:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800315c:	6822      	ldr	r2, [r4, #0]
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003166:	6822      	ldr	r2, [r4, #0]
 8003168:	6813      	ldr	r3, [r2, #0]
 800316a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003170:	6822      	ldr	r2, [r4, #0]
 8003172:	6813      	ldr	r3, [r2, #0]
 8003174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003178:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800317a:	f000 fd77 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800317e:	6862      	ldr	r2, [r4, #4]
 8003180:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <HAL_I2C_Init+0x170>)
 8003182:	429a      	cmp	r2, r3
 8003184:	d861      	bhi.n	800324a <HAL_I2C_Init+0x106>
 8003186:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_I2C_Init+0x174>)
 8003188:	4298      	cmp	r0, r3
 800318a:	f240 8091 	bls.w	80032b0 <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 800318e:	494b      	ldr	r1, [pc, #300]	; (80032bc <HAL_I2C_Init+0x178>)
 8003190:	fba1 3100 	umull	r3, r1, r1, r0
 8003194:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003196:	6825      	ldr	r5, [r4, #0]
 8003198:	686a      	ldr	r2, [r5, #4]
 800319a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800319e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80031a2:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031a4:	6821      	ldr	r1, [r4, #0]
 80031a6:	6a0a      	ldr	r2, [r1, #32]
 80031a8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80031ac:	4d41      	ldr	r5, [pc, #260]	; (80032b4 <HAL_I2C_Init+0x170>)
 80031ae:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80031b2:	45ac      	cmp	ip, r5
 80031b4:	d84e      	bhi.n	8003254 <HAL_I2C_Init+0x110>
 80031b6:	3301      	adds	r3, #1
 80031b8:	4313      	orrs	r3, r2
 80031ba:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031bc:	6821      	ldr	r1, [r4, #0]
 80031be:	69ca      	ldr	r2, [r1, #28]
 80031c0:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80031c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031c8:	6865      	ldr	r5, [r4, #4]
 80031ca:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <HAL_I2C_Init+0x170>)
 80031cc:	429d      	cmp	r5, r3
 80031ce:	d84b      	bhi.n	8003268 <HAL_I2C_Init+0x124>
 80031d0:	1e43      	subs	r3, r0, #1
 80031d2:	006d      	lsls	r5, r5, #1
 80031d4:	fbb3 f3f5 	udiv	r3, r3, r5
 80031d8:	3301      	adds	r3, #1
 80031da:	f640 70fc 	movw	r0, #4092	; 0xffc
 80031de:	4203      	tst	r3, r0
 80031e0:	d05e      	beq.n	80032a0 <HAL_I2C_Init+0x15c>
 80031e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e6:	431a      	orrs	r2, r3
 80031e8:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ea:	6821      	ldr	r1, [r4, #0]
 80031ec:	680a      	ldr	r2, [r1, #0]
 80031ee:	69e3      	ldr	r3, [r4, #28]
 80031f0:	6a20      	ldr	r0, [r4, #32]
 80031f2:	4303      	orrs	r3, r0
 80031f4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	688a      	ldr	r2, [r1, #8]
 8003200:	6923      	ldr	r3, [r4, #16]
 8003202:	68e0      	ldr	r0, [r4, #12]
 8003204:	4303      	orrs	r3, r0
 8003206:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800320a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003212:	6821      	ldr	r1, [r4, #0]
 8003214:	68ca      	ldr	r2, [r1, #12]
 8003216:	6963      	ldr	r3, [r4, #20]
 8003218:	69a0      	ldr	r0, [r4, #24]
 800321a:	4303      	orrs	r3, r0
 800321c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003220:	4313      	orrs	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800322e:	2000      	movs	r0, #0
 8003230:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003232:	2320      	movs	r3, #32
 8003234:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003238:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800323a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800323e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003240:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003244:	f7fe ffe2 	bl	800220c <HAL_I2C_MspInit>
 8003248:	e785      	b.n	8003156 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_I2C_Init+0x17c>)
 800324c:	4298      	cmp	r0, r3
 800324e:	d89e      	bhi.n	800318e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003250:	2001      	movs	r0, #1
 8003252:	e7f4      	b.n	800323e <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003254:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8003258:	fb05 f303 	mul.w	r3, r5, r3
 800325c:	4d19      	ldr	r5, [pc, #100]	; (80032c4 <HAL_I2C_Init+0x180>)
 800325e:	fba5 5303 	umull	r5, r3, r5, r3
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	3301      	adds	r3, #1
 8003266:	e7a7      	b.n	80031b8 <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003268:	68a3      	ldr	r3, [r4, #8]
 800326a:	b95b      	cbnz	r3, 8003284 <HAL_I2C_Init+0x140>
 800326c:	1e43      	subs	r3, r0, #1
 800326e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003272:	fbb3 f3f5 	udiv	r3, r3, r5
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	b193      	cbz	r3, 80032a4 <HAL_I2C_Init+0x160>
 800327e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003282:	e7b0      	b.n	80031e6 <HAL_I2C_Init+0xa2>
 8003284:	1e43      	subs	r3, r0, #1
 8003286:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800328a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800328e:	fbb3 f3f5 	udiv	r3, r3, r5
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	b133      	cbz	r3, 80032a8 <HAL_I2C_Init+0x164>
 800329a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329e:	e7a2      	b.n	80031e6 <HAL_I2C_Init+0xa2>
 80032a0:	2304      	movs	r3, #4
 80032a2:	e7a0      	b.n	80031e6 <HAL_I2C_Init+0xa2>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e79e      	b.n	80031e6 <HAL_I2C_Init+0xa2>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e79c      	b.n	80031e6 <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
}
 80032ae:	4770      	bx	lr
    return HAL_ERROR;
 80032b0:	2001      	movs	r0, #1
 80032b2:	e7c4      	b.n	800323e <HAL_I2C_Init+0xfa>
 80032b4:	000186a0 	.word	0x000186a0
 80032b8:	001e847f 	.word	0x001e847f
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	003d08ff 	.word	0x003d08ff
 80032c4:	10624dd3 	.word	0x10624dd3

080032c8 <HAL_I2C_Master_Transmit>:
{
 80032c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032cc:	b085      	sub	sp, #20
 80032ce:	4604      	mov	r4, r0
 80032d0:	460f      	mov	r7, r1
 80032d2:	4691      	mov	r9, r2
 80032d4:	4698      	mov	r8, r3
 80032d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff f966 	bl	80025a8 <HAL_GetTick>
 80032dc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032de:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80032e2:	b2c0      	uxtb	r0, r0
 80032e4:	2820      	cmp	r0, #32
 80032e6:	d004      	beq.n	80032f2 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80032e8:	2702      	movs	r7, #2
}
 80032ea:	4638      	mov	r0, r7
 80032ec:	b005      	add	sp, #20
 80032ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f2:	9500      	str	r5, [sp, #0]
 80032f4:	2319      	movs	r3, #25
 80032f6:	2201      	movs	r2, #1
 80032f8:	4971      	ldr	r1, [pc, #452]	; (80034c0 <HAL_I2C_Master_Transmit+0x1f8>)
 80032fa:	4620      	mov	r0, r4
 80032fc:	f7ff fe24 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8003300:	2800      	cmp	r0, #0
 8003302:	f040 80d7 	bne.w	80034b4 <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 8003306:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800330a:	2b01      	cmp	r3, #1
 800330c:	f000 80d4 	beq.w	80034b8 <HAL_I2C_Master_Transmit+0x1f0>
 8003310:	2301      	movs	r3, #1
 8003312:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003316:	6823      	ldr	r3, [r4, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f012 0f01 	tst.w	r2, #1
 800331e:	d103      	bne.n	8003328 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	6813      	ldr	r3, [r2, #0]
 800332c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003330:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003332:	2321      	movs	r3, #33	; 0x21
 8003334:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003338:	2310      	movs	r3, #16
 800333a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800333e:	2300      	movs	r3, #0
 8003340:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003342:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003346:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800334a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800334c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334e:	4b5d      	ldr	r3, [pc, #372]	; (80034c4 <HAL_I2C_Master_Transmit+0x1fc>)
 8003350:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003352:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003354:	2b08      	cmp	r3, #8
 8003356:	d00d      	beq.n	8003374 <HAL_I2C_Master_Transmit+0xac>
 8003358:	2b01      	cmp	r3, #1
 800335a:	d00b      	beq.n	8003374 <HAL_I2C_Master_Transmit+0xac>
 800335c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003360:	d008      	beq.n	8003374 <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003362:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003364:	2b12      	cmp	r3, #18
 8003366:	d10a      	bne.n	800337e <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003368:	6822      	ldr	r2, [r4, #0]
 800336a:	6813      	ldr	r3, [r2, #0]
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e004      	b.n	800337e <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800337e:	9500      	str	r5, [sp, #0]
 8003380:	4633      	mov	r3, r6
 8003382:	2200      	movs	r2, #0
 8003384:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003388:	4620      	mov	r0, r4
 800338a:	f7ff fddd 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 800338e:	b9d0      	cbnz	r0, 80033c6 <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003390:	6923      	ldr	r3, [r4, #16]
 8003392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003396:	d120      	bne.n	80033da <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800339e:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a0:	462b      	mov	r3, r5
 80033a2:	4632      	mov	r2, r6
 80033a4:	4948      	ldr	r1, [pc, #288]	; (80034c8 <HAL_I2C_Master_Transmit+0x200>)
 80033a6:	4620      	mov	r0, r4
 80033a8:	f7ff fe11 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033ac:	4607      	mov	r7, r0
 80033ae:	2800      	cmp	r0, #0
 80033b0:	f040 8084 	bne.w	80034bc <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b4:	2300      	movs	r3, #0
 80033b6:	9303      	str	r3, [sp, #12]
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	9203      	str	r2, [sp, #12]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	9303      	str	r3, [sp, #12]
 80033c2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80033c4:	e02f      	b.n	8003426 <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033ce:	d002      	beq.n	80033d6 <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d4:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80033d6:	2701      	movs	r7, #1
 80033d8:	e787      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033da:	6822      	ldr	r2, [r4, #0]
 80033dc:	11fb      	asrs	r3, r7, #7
 80033de:	f003 0306 	and.w	r3, r3, #6
 80033e2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80033e6:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033e8:	462b      	mov	r3, r5
 80033ea:	4632      	mov	r2, r6
 80033ec:	4937      	ldr	r1, [pc, #220]	; (80034cc <HAL_I2C_Master_Transmit+0x204>)
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff fded 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	d1ee      	bne.n	80033d6 <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	b2ff      	uxtb	r7, r7
 80033fc:	611f      	str	r7, [r3, #16]
 80033fe:	e7cf      	b.n	80033a0 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003402:	2b04      	cmp	r3, #4
 8003404:	d001      	beq.n	800340a <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 8003406:	2701      	movs	r7, #1
 8003408:	e76f      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	6813      	ldr	r3, [r2, #0]
 800340e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003412:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003414:	2701      	movs	r7, #1
 8003416:	e768      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	462a      	mov	r2, r5
 800341a:	4631      	mov	r1, r6
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff fe62 	bl	80030e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003422:	2800      	cmp	r0, #0
 8003424:	d12c      	bne.n	8003480 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 8003426:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d035      	beq.n	8003498 <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342c:	462a      	mov	r2, r5
 800342e:	4631      	mov	r1, r6
 8003430:	4620      	mov	r0, r4
 8003432:	f7ff fe29 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8003436:	2800      	cmp	r0, #0
 8003438:	d1e2      	bne.n	8003400 <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003442:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003444:	1c53      	adds	r3, r2, #1
 8003446:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003448:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800344a:	3901      	subs	r1, #1
 800344c:	b289      	uxth	r1, r1
 800344e:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003450:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8003452:	3901      	subs	r1, #1
 8003454:	b289      	uxth	r1, r1
 8003456:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	6958      	ldr	r0, [r3, #20]
 800345c:	f010 0f04 	tst.w	r0, #4
 8003460:	d0da      	beq.n	8003418 <HAL_I2C_Master_Transmit+0x150>
 8003462:	2900      	cmp	r1, #0
 8003464:	d0d8      	beq.n	8003418 <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003466:	7852      	ldrb	r2, [r2, #1]
 8003468:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800346a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800346c:	3301      	adds	r3, #1
 800346e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003470:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003472:	3b01      	subs	r3, #1
 8003474:	b29b      	uxth	r3, r3
 8003476:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003478:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	8523      	strh	r3, [r4, #40]	; 0x28
 800347e:	e7cb      	b.n	8003418 <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003480:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003482:	2b04      	cmp	r3, #4
 8003484:	d001      	beq.n	800348a <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 8003486:	2701      	movs	r7, #1
 8003488:	e72f      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	6813      	ldr	r3, [r2, #0]
 800348e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003492:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003494:	2701      	movs	r7, #1
 8003496:	e728      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	6822      	ldr	r2, [r4, #0]
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	2320      	movs	r3, #32
 80034a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80034ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80034b2:	e71a      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 80034b4:	2702      	movs	r7, #2
 80034b6:	e718      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 80034b8:	2702      	movs	r7, #2
 80034ba:	e716      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 80034bc:	2701      	movs	r7, #1
 80034be:	e714      	b.n	80032ea <HAL_I2C_Master_Transmit+0x22>
 80034c0:	00100002 	.word	0x00100002
 80034c4:	ffff0000 	.word	0xffff0000
 80034c8:	00010002 	.word	0x00010002
 80034cc:	00010008 	.word	0x00010008

080034d0 <HAL_I2C_IsDeviceReady>:
{
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	b085      	sub	sp, #20
 80034d6:	4604      	mov	r4, r0
 80034d8:	4689      	mov	r9, r1
 80034da:	4692      	mov	sl, r2
 80034dc:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80034de:	f7ff f863 	bl	80025a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d003      	beq.n	80034f4 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80034ec:	2002      	movs	r0, #2
}
 80034ee:	b005      	add	sp, #20
 80034f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f6:	9000      	str	r0, [sp, #0]
 80034f8:	2319      	movs	r3, #25
 80034fa:	2201      	movs	r2, #1
 80034fc:	495d      	ldr	r1, [pc, #372]	; (8003674 <HAL_I2C_IsDeviceReady+0x1a4>)
 80034fe:	4620      	mov	r0, r4
 8003500:	f7ff fd22 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8003504:	2800      	cmp	r0, #0
 8003506:	f040 80ab 	bne.w	8003660 <HAL_I2C_IsDeviceReady+0x190>
    __HAL_LOCK(hi2c);
 800350a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	f000 80a8 	beq.w	8003664 <HAL_I2C_IsDeviceReady+0x194>
 8003514:	2301      	movs	r3, #1
 8003516:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	f012 0f01 	tst.w	r2, #1
 8003522:	d103      	bne.n	800352c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	6813      	ldr	r3, [r2, #0]
 8003530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003534:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003536:	2324      	movs	r3, #36	; 0x24
 8003538:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353c:	2300      	movs	r3, #0
 800353e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003540:	4a4d      	ldr	r2, [pc, #308]	; (8003678 <HAL_I2C_IsDeviceReady+0x1a8>)
 8003542:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 0U;
 8003544:	4698      	mov	r8, r3
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003546:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354a:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003674 <HAL_I2C_IsDeviceReady+0x1a4>
 800354e:	e03f      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x100>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003558:	f000 8086 	beq.w	8003668 <HAL_I2C_IsDeviceReady+0x198>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003560:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003562:	2003      	movs	r0, #3
 8003564:	e7c3      	b.n	80034ee <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003566:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	6953      	ldr	r3, [r2, #20]
 800356e:	f003 0302 	and.w	r3, r3, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003572:	6951      	ldr	r1, [r2, #20]
 8003574:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003578:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	2aa0      	cmp	r2, #160	; 0xa0
 8003580:	d009      	beq.n	8003596 <HAL_I2C_IsDeviceReady+0xc6>
 8003582:	430b      	orrs	r3, r1
 8003584:	d107      	bne.n	8003596 <HAL_I2C_IsDeviceReady+0xc6>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7ff f80f 	bl	80025a8 <HAL_GetTick>
 800358a:	1b80      	subs	r0, r0, r6
 800358c:	42a8      	cmp	r0, r5
 800358e:	d8ea      	bhi.n	8003566 <HAL_I2C_IsDeviceReady+0x96>
 8003590:	2d00      	cmp	r5, #0
 8003592:	d1ea      	bne.n	800356a <HAL_I2C_IsDeviceReady+0x9a>
 8003594:	e7e7      	b.n	8003566 <HAL_I2C_IsDeviceReady+0x96>
      hi2c->State = HAL_I2C_STATE_READY;
 8003596:	2320      	movs	r3, #32
 8003598:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	f012 0f02 	tst.w	r2, #2
 80035a4:	d139      	bne.n	800361a <HAL_I2C_IsDeviceReady+0x14a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b4:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b6:	9600      	str	r6, [sp, #0]
 80035b8:	2319      	movs	r3, #25
 80035ba:	2201      	movs	r2, #1
 80035bc:	4659      	mov	r1, fp
 80035be:	4620      	mov	r0, r4
 80035c0:	f7ff fcc2 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	d153      	bne.n	8003670 <HAL_I2C_IsDeviceReady+0x1a0>
      I2C_Trials++;
 80035c8:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 80035cc:	45d0      	cmp	r8, sl
 80035ce:	d23f      	bcs.n	8003650 <HAL_I2C_IsDeviceReady+0x180>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d0:	6822      	ldr	r2, [r4, #0]
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d8:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	9600      	str	r6, [sp, #0]
 80035dc:	462b      	mov	r3, r5
 80035de:	2200      	movs	r2, #0
 80035e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035e4:	4620      	mov	r0, r4
 80035e6:	f7ff fcaf 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d1b0      	bne.n	8003550 <HAL_I2C_IsDeviceReady+0x80>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80035f4:	f7fe ffd8 	bl	80025a8 <HAL_GetTick>
 80035f8:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	6953      	ldr	r3, [r2, #20]
 80035fe:	f003 0302 	and.w	r3, r3, #2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003602:	6951      	ldr	r1, [r2, #20]
 8003604:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003608:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	2aa0      	cmp	r2, #160	; 0xa0
 8003610:	d0c1      	beq.n	8003596 <HAL_I2C_IsDeviceReady+0xc6>
 8003612:	430b      	orrs	r3, r1
 8003614:	d1bf      	bne.n	8003596 <HAL_I2C_IsDeviceReady+0xc6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003616:	27a0      	movs	r7, #160	; 0xa0
 8003618:	e7b5      	b.n	8003586 <HAL_I2C_IsDeviceReady+0xb6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003620:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003622:	2300      	movs	r3, #0
 8003624:	9303      	str	r3, [sp, #12]
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	9203      	str	r2, [sp, #12]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	9303      	str	r3, [sp, #12]
 8003630:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003632:	9600      	str	r6, [sp, #0]
 8003634:	2319      	movs	r3, #25
 8003636:	2201      	movs	r2, #1
 8003638:	490e      	ldr	r1, [pc, #56]	; (8003674 <HAL_I2C_IsDeviceReady+0x1a4>)
 800363a:	4620      	mov	r0, r4
 800363c:	f7ff fc84 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8003640:	b9a0      	cbnz	r0, 800366c <HAL_I2C_IsDeviceReady+0x19c>
        hi2c->State = HAL_I2C_STATE_READY;
 8003642:	2320      	movs	r3, #32
 8003644:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003648:	2300      	movs	r3, #0
 800364a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 800364e:	e74e      	b.n	80034ee <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	2320      	movs	r3, #32
 8003652:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800365c:	2001      	movs	r0, #1
 800365e:	e746      	b.n	80034ee <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003660:	2002      	movs	r0, #2
 8003662:	e744      	b.n	80034ee <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003664:	2002      	movs	r0, #2
 8003666:	e742      	b.n	80034ee <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 8003668:	2003      	movs	r0, #3
 800366a:	e740      	b.n	80034ee <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800366c:	2001      	movs	r0, #1
 800366e:	e73e      	b.n	80034ee <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003670:	2001      	movs	r0, #1
 8003672:	e73c      	b.n	80034ee <HAL_I2C_IsDeviceReady+0x1e>
 8003674:	00100002 	.word	0x00100002
 8003678:	ffff0000 	.word	0xffff0000

0800367c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800367c:	2800      	cmp	r0, #0
 800367e:	f000 8201 	beq.w	8003a84 <HAL_RCC_OscConfig+0x408>
{
 8003682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368a:	6803      	ldr	r3, [r0, #0]
 800368c:	f013 0f01 	tst.w	r3, #1
 8003690:	d02c      	beq.n	80036ec <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003692:	4b9f      	ldr	r3, [pc, #636]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d01d      	beq.n	80036da <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800369e:	4b9c      	ldr	r3, [pc, #624]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d012      	beq.n	80036d0 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d041      	beq.n	8003736 <HAL_RCC_OscConfig+0xba>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d155      	bne.n	8003762 <HAL_RCC_OscConfig+0xe6>
 80036b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e037      	b.n	8003740 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036d0:	4b8f      	ldr	r3, [pc, #572]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80036d8:	d0e7      	beq.n	80036aa <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036da:	4b8d      	ldr	r3, [pc, #564]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80036e2:	d003      	beq.n	80036ec <HAL_RCC_OscConfig+0x70>
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 81ce 	beq.w	8003a88 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	f013 0f02 	tst.w	r3, #2
 80036f2:	d075      	beq.n	80037e0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036f4:	4b86      	ldr	r3, [pc, #536]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f013 0f0c 	tst.w	r3, #12
 80036fc:	d05f      	beq.n	80037be <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036fe:	4b84      	ldr	r3, [pc, #528]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b08      	cmp	r3, #8
 8003708:	d054      	beq.n	80037b4 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 808a 	beq.w	8003826 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003712:	4b80      	ldr	r3, [pc, #512]	; (8003914 <HAL_RCC_OscConfig+0x298>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fe ff46 	bl	80025a8 <HAL_GetTick>
 800371c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371e:	4e7c      	ldr	r6, [pc, #496]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	f013 0f02 	tst.w	r3, #2
 8003726:	d175      	bne.n	8003814 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003728:	f7fe ff3e 	bl	80025a8 <HAL_GetTick>
 800372c:	1b40      	subs	r0, r0, r5
 800372e:	2802      	cmp	r0, #2
 8003730:	d9f6      	bls.n	8003720 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8003732:	2003      	movs	r0, #3
 8003734:	e1ad      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003736:	4a76      	ldr	r2, [pc, #472]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003740:	6863      	ldr	r3, [r4, #4]
 8003742:	b343      	cbz	r3, 8003796 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8003744:	f7fe ff30 	bl	80025a8 <HAL_GetTick>
 8003748:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4e71      	ldr	r6, [pc, #452]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 800374c:	6833      	ldr	r3, [r6, #0]
 800374e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003752:	d1cb      	bne.n	80036ec <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003754:	f7fe ff28 	bl	80025a8 <HAL_GetTick>
 8003758:	1b40      	subs	r0, r0, r5
 800375a:	2864      	cmp	r0, #100	; 0x64
 800375c:	d9f6      	bls.n	800374c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800375e:	2003      	movs	r0, #3
 8003760:	e197      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003766:	d009      	beq.n	800377c <HAL_RCC_OscConfig+0x100>
 8003768:	4b69      	ldr	r3, [pc, #420]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	e7e1      	b.n	8003740 <HAL_RCC_OscConfig+0xc4>
 800377c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003780:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e7d4      	b.n	8003740 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003796:	f7fe ff07 	bl	80025a8 <HAL_GetTick>
 800379a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379c:	4e5c      	ldr	r6, [pc, #368]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 800379e:	6833      	ldr	r3, [r6, #0]
 80037a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037a4:	d0a2      	beq.n	80036ec <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a6:	f7fe feff 	bl	80025a8 <HAL_GetTick>
 80037aa:	1b40      	subs	r0, r0, r5
 80037ac:	2864      	cmp	r0, #100	; 0x64
 80037ae:	d9f6      	bls.n	800379e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80037b0:	2003      	movs	r0, #3
 80037b2:	e16e      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037b4:	4b56      	ldr	r3, [pc, #344]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80037bc:	d1a5      	bne.n	800370a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	4b54      	ldr	r3, [pc, #336]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f013 0f02 	tst.w	r3, #2
 80037c6:	d003      	beq.n	80037d0 <HAL_RCC_OscConfig+0x154>
 80037c8:	6923      	ldr	r3, [r4, #16]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	f040 815e 	bne.w	8003a8c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4a4f      	ldr	r2, [pc, #316]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	6961      	ldr	r1, [r4, #20]
 80037d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80037de:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f013 0f08 	tst.w	r3, #8
 80037e6:	d03d      	beq.n	8003864 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e8:	69a3      	ldr	r3, [r4, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d066      	beq.n	80038bc <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <HAL_RCC_OscConfig+0x298>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f6:	f7fe fed7 	bl	80025a8 <HAL_GetTick>
 80037fa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fc:	4e44      	ldr	r6, [pc, #272]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80037fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003800:	f013 0f02 	tst.w	r3, #2
 8003804:	d121      	bne.n	800384a <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003806:	f7fe fecf 	bl	80025a8 <HAL_GetTick>
 800380a:	1b40      	subs	r0, r0, r5
 800380c:	2802      	cmp	r0, #2
 800380e:	d9f6      	bls.n	80037fe <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003810:	2003      	movs	r0, #3
 8003812:	e13e      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003814:	4a3e      	ldr	r2, [pc, #248]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	6961      	ldr	r1, [r4, #20]
 800381a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800381e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	e7dc      	b.n	80037e0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_RCC_OscConfig+0x298>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800382c:	f7fe febc 	bl	80025a8 <HAL_GetTick>
 8003830:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	4e37      	ldr	r6, [pc, #220]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 8003834:	6833      	ldr	r3, [r6, #0]
 8003836:	f013 0f02 	tst.w	r3, #2
 800383a:	d0d1      	beq.n	80037e0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383c:	f7fe feb4 	bl	80025a8 <HAL_GetTick>
 8003840:	1b40      	subs	r0, r0, r5
 8003842:	2802      	cmp	r0, #2
 8003844:	d9f6      	bls.n	8003834 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003846:	2003      	movs	r0, #3
 8003848:	e123      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800384a:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_RCC_OscConfig+0x29c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a33      	ldr	r2, [pc, #204]	; (800391c <HAL_RCC_OscConfig+0x2a0>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	0a5b      	lsrs	r3, r3, #9
 8003856:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003858:	bf00      	nop
  }
  while (Delay --);
 800385a:	9b01      	ldr	r3, [sp, #4]
 800385c:	1e5a      	subs	r2, r3, #1
 800385e:	9201      	str	r2, [sp, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f9      	bne.n	8003858 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	f013 0f04 	tst.w	r3, #4
 800386a:	f000 809b 	beq.w	80039a4 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386e:	4b28      	ldr	r3, [pc, #160]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003876:	d134      	bne.n	80038e2 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003878:	4b25      	ldr	r3, [pc, #148]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003880:	61da      	str	r2, [r3, #28]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800388c:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x2a4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003896:	d026      	beq.n	80038e6 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003898:	68e3      	ldr	r3, [r4, #12]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d042      	beq.n	8003924 <HAL_RCC_OscConfig+0x2a8>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d158      	bne.n	8003954 <HAL_RCC_OscConfig+0x2d8>
 80038a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	621a      	str	r2, [r3, #32]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	f022 0204 	bic.w	r2, r2, #4
 80038b8:	621a      	str	r2, [r3, #32]
 80038ba:	e038      	b.n	800392e <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_RCC_OscConfig+0x298>)
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80038c4:	f7fe fe70 	bl	80025a8 <HAL_GetTick>
 80038c8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ca:	4e11      	ldr	r6, [pc, #68]	; (8003910 <HAL_RCC_OscConfig+0x294>)
 80038cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80038ce:	f013 0f02 	tst.w	r3, #2
 80038d2:	d0c7      	beq.n	8003864 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fe fe68 	bl	80025a8 <HAL_GetTick>
 80038d8:	1b40      	subs	r0, r0, r5
 80038da:	2802      	cmp	r0, #2
 80038dc:	d9f6      	bls.n	80038cc <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 80038de:	2003      	movs	r0, #3
 80038e0:	e0d7      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2500      	movs	r5, #0
 80038e4:	e7d3      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <HAL_RCC_OscConfig+0x2a4>)
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ee:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80038f0:	f7fe fe5a 	bl	80025a8 <HAL_GetTick>
 80038f4:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f6:	4f0a      	ldr	r7, [pc, #40]	; (8003920 <HAL_RCC_OscConfig+0x2a4>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038fe:	d1cb      	bne.n	8003898 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003900:	f7fe fe52 	bl	80025a8 <HAL_GetTick>
 8003904:	1b80      	subs	r0, r0, r6
 8003906:	2864      	cmp	r0, #100	; 0x64
 8003908:	d9f6      	bls.n	80038f8 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800390a:	2003      	movs	r0, #3
 800390c:	e0c1      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000
 8003914:	42420000 	.word	0x42420000
 8003918:	200003b0 	.word	0x200003b0
 800391c:	10624dd3 	.word	0x10624dd3
 8003920:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003924:	4a5e      	ldr	r2, [pc, #376]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 8003926:	6a13      	ldr	r3, [r2, #32]
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800392e:	68e3      	ldr	r3, [r4, #12]
 8003930:	b333      	cbz	r3, 8003980 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003932:	f7fe fe39 	bl	80025a8 <HAL_GetTick>
 8003936:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	4f59      	ldr	r7, [pc, #356]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	f013 0f02 	tst.w	r3, #2
 8003944:	d12d      	bne.n	80039a2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fe fe2f 	bl	80025a8 <HAL_GetTick>
 800394a:	1b80      	subs	r0, r0, r6
 800394c:	4540      	cmp	r0, r8
 800394e:	d9f6      	bls.n	800393e <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003950:	2003      	movs	r0, #3
 8003952:	e09e      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003954:	2b05      	cmp	r3, #5
 8003956:	d009      	beq.n	800396c <HAL_RCC_OscConfig+0x2f0>
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 800395a:	6a1a      	ldr	r2, [r3, #32]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	621a      	str	r2, [r3, #32]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	f022 0204 	bic.w	r2, r2, #4
 8003968:	621a      	str	r2, [r3, #32]
 800396a:	e7e0      	b.n	800392e <HAL_RCC_OscConfig+0x2b2>
 800396c:	4b4c      	ldr	r3, [pc, #304]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 800396e:	6a1a      	ldr	r2, [r3, #32]
 8003970:	f042 0204 	orr.w	r2, r2, #4
 8003974:	621a      	str	r2, [r3, #32]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	621a      	str	r2, [r3, #32]
 800397e:	e7d6      	b.n	800392e <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003980:	f7fe fe12 	bl	80025a8 <HAL_GetTick>
 8003984:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003986:	4f46      	ldr	r7, [pc, #280]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f013 0f02 	tst.w	r3, #2
 8003992:	d006      	beq.n	80039a2 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fe fe08 	bl	80025a8 <HAL_GetTick>
 8003998:	1b80      	subs	r0, r0, r6
 800399a:	4540      	cmp	r0, r8
 800399c:	d9f6      	bls.n	800398c <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 800399e:	2003      	movs	r0, #3
 80039a0:	e077      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80039a2:	b9e5      	cbnz	r5, 80039de <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a4:	69e3      	ldr	r3, [r4, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d072      	beq.n	8003a90 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039aa:	4a3d      	ldr	r2, [pc, #244]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 80039ac:	6852      	ldr	r2, [r2, #4]
 80039ae:	f002 020c 	and.w	r2, r2, #12
 80039b2:	2a08      	cmp	r2, #8
 80039b4:	d056      	beq.n	8003a64 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d017      	beq.n	80039ea <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <HAL_RCC_OscConfig+0x428>)
 80039bc:	2200      	movs	r2, #0
 80039be:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80039c0:	f7fe fdf2 	bl	80025a8 <HAL_GetTick>
 80039c4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c6:	4d36      	ldr	r5, [pc, #216]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039ce:	d047      	beq.n	8003a60 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fe fdea 	bl	80025a8 <HAL_GetTick>
 80039d4:	1b00      	subs	r0, r0, r4
 80039d6:	2802      	cmp	r0, #2
 80039d8:	d9f6      	bls.n	80039c8 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 80039da:	2003      	movs	r0, #3
 80039dc:	e059      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039de:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 80039e0:	69d3      	ldr	r3, [r2, #28]
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	61d3      	str	r3, [r2, #28]
 80039e8:	e7dc      	b.n	80039a4 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCC_OscConfig+0x428>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80039f0:	f7fe fdda 	bl	80025a8 <HAL_GetTick>
 80039f4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f6:	4e2a      	ldr	r6, [pc, #168]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 80039f8:	6833      	ldr	r3, [r6, #0]
 80039fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039fe:	d006      	beq.n	8003a0e <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe fdd2 	bl	80025a8 <HAL_GetTick>
 8003a04:	1b40      	subs	r0, r0, r5
 8003a06:	2802      	cmp	r0, #2
 8003a08:	d9f6      	bls.n	80039f8 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8003a0a:	2003      	movs	r0, #3
 8003a0c:	e041      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a0e:	6a23      	ldr	r3, [r4, #32]
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d01a      	beq.n	8003a4c <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a16:	4922      	ldr	r1, [pc, #136]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 8003a18:	684a      	ldr	r2, [r1, #4]
 8003a1a:	6a23      	ldr	r3, [r4, #32]
 8003a1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003a1e:	4303      	orrs	r3, r0
 8003a20:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a28:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <HAL_RCC_OscConfig+0x428>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003a2e:	f7fe fdbb 	bl	80025a8 <HAL_GetTick>
 8003a32:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a34:	4d1a      	ldr	r5, [pc, #104]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 8003a36:	682b      	ldr	r3, [r5, #0]
 8003a38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a3c:	d10e      	bne.n	8003a5c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fe fdb3 	bl	80025a8 <HAL_GetTick>
 8003a42:	1b00      	subs	r0, r0, r4
 8003a44:	2802      	cmp	r0, #2
 8003a46:	d9f6      	bls.n	8003a36 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003a48:	2003      	movs	r0, #3
 8003a4a:	e022      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 8003a4e:	6853      	ldr	r3, [r2, #4]
 8003a50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a54:	68a1      	ldr	r1, [r4, #8]
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6053      	str	r3, [r2, #4]
 8003a5a:	e7dc      	b.n	8003a16 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	e018      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
 8003a60:	2000      	movs	r0, #0
 8003a62:	e016      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d017      	beq.n	8003a98 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003a68:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <HAL_RCC_OscConfig+0x424>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003a70:	6a22      	ldr	r2, [r4, #32]
 8003a72:	4291      	cmp	r1, r2
 8003a74:	d112      	bne.n	8003a9c <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a76:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8003a7c:	1a18      	subs	r0, r3, r0
 8003a7e:	bf18      	it	ne
 8003a80:	2001      	movne	r0, #1
 8003a82:	e006      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
 8003a84:	2001      	movs	r0, #1
}
 8003a86:	4770      	bx	lr
        return HAL_ERROR;
 8003a88:	2001      	movs	r0, #1
 8003a8a:	e002      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003a90:	2000      	movs	r0, #0
}
 8003a92:	b002      	add	sp, #8
 8003a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003a98:	2001      	movs	r0, #1
 8003a9a:	e7fa      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	e7f8      	b.n	8003a92 <HAL_RCC_OscConfig+0x416>
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	42420000 	.word	0x42420000

08003aa8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x40>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003aac:	f003 020c 	and.w	r2, r3, #12
 8003ab0:	2a08      	cmp	r2, #8
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003ab4:	480d      	ldr	r0, [pc, #52]	; (8003aec <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003ab6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ab8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003abc:	490c      	ldr	r1, [pc, #48]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x48>)
 8003abe:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ac0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003ac4:	d00b      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0x40>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aca:	4a08      	ldr	r2, [pc, #32]	; (8003aec <HAL_RCC_GetSysClockFreq+0x44>)
 8003acc:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ad0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003ad4:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ad8:	fbb0 f0f3 	udiv	r0, r0, r3
 8003adc:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x50>)
 8003ae0:	fb03 f000 	mul.w	r0, r3, r0
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	007a1200 	.word	0x007a1200
 8003af0:	080097fc 	.word	0x080097fc
 8003af4:	0800980c 	.word	0x0800980c
 8003af8:	003d0900 	.word	0x003d0900

08003afc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f000 80a2 	beq.w	8003c46 <HAL_RCC_ClockConfig+0x14a>
{
 8003b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b06:	460d      	mov	r5, r1
 8003b08:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0a:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <HAL_RCC_ClockConfig+0x15c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d20b      	bcs.n	8003b2e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4a50      	ldr	r2, [pc, #320]	; (8003c58 <HAL_RCC_ClockConfig+0x15c>)
 8003b18:	6813      	ldr	r3, [r2, #0]
 8003b1a:	f023 0307 	bic.w	r3, r3, #7
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	f040 808e 	bne.w	8003c4a <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	f013 0f02 	tst.w	r3, #2
 8003b34:	d017      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b36:	f013 0f04 	tst.w	r3, #4
 8003b3a:	d004      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b3c:	4a47      	ldr	r2, [pc, #284]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003b3e:	6853      	ldr	r3, [r2, #4]
 8003b40:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b44:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	f013 0f08 	tst.w	r3, #8
 8003b4c:	d004      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b4e:	4a43      	ldr	r2, [pc, #268]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003b50:	6853      	ldr	r3, [r2, #4]
 8003b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b56:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003b5a:	6853      	ldr	r3, [r2, #4]
 8003b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b60:	68a1      	ldr	r1, [r4, #8]
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	f013 0f01 	tst.w	r3, #1
 8003b6c:	d031      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6e:	6862      	ldr	r2, [r4, #4]
 8003b70:	2a01      	cmp	r2, #1
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b74:	2a02      	cmp	r2, #2
 8003b76:	d025      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b78:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f013 0f02 	tst.w	r3, #2
 8003b80:	d065      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b82:	4936      	ldr	r1, [pc, #216]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003b84:	684b      	ldr	r3, [r1, #4]
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003b8e:	f7fe fd0b 	bl	80025a8 <HAL_GetTick>
 8003b92:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b94:	4f31      	ldr	r7, [pc, #196]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b96:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	6862      	ldr	r2, [r4, #4]
 8003ba2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ba6:	d014      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba8:	f7fe fcfe 	bl	80025a8 <HAL_GetTick>
 8003bac:	1b80      	subs	r0, r0, r6
 8003bae:	4540      	cmp	r0, r8
 8003bb0:	d9f3      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003bb2:	2003      	movs	r0, #3
 8003bb4:	e045      	b.n	8003c42 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b29      	ldr	r3, [pc, #164]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003bbe:	d1e0      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	e03e      	b.n	8003c42 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003bcc:	d1d9      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003bce:	2001      	movs	r0, #1
 8003bd0:	e037      	b.n	8003c42 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd2:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <HAL_RCC_ClockConfig+0x15c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	42ab      	cmp	r3, r5
 8003bdc:	d90a      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4a1e      	ldr	r2, [pc, #120]	; (8003c58 <HAL_RCC_ClockConfig+0x15c>)
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	432b      	orrs	r3, r5
 8003be8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	6813      	ldr	r3, [r2, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	42ab      	cmp	r3, r5
 8003bf2:	d12e      	bne.n	8003c52 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	f013 0f04 	tst.w	r3, #4
 8003bfa:	d006      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003bfe:	6853      	ldr	r3, [r2, #4]
 8003c00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c04:	68e1      	ldr	r1, [r4, #12]
 8003c06:	430b      	orrs	r3, r1
 8003c08:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	f013 0f08 	tst.w	r3, #8
 8003c10:	d007      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c12:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003c14:	6853      	ldr	r3, [r2, #4]
 8003c16:	6921      	ldr	r1, [r4, #16]
 8003c18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003c1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c20:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c22:	f7ff ff41 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_RCC_ClockConfig+0x160>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c2e:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <HAL_RCC_ClockConfig+0x164>)
 8003c30:	5cd3      	ldrb	r3, [r2, r3]
 8003c32:	40d8      	lsrs	r0, r3
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x168>)
 8003c36:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_ClockConfig+0x16c>)
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	f7fe fba8 	bl	8002390 <HAL_InitTick>
  return HAL_OK;
 8003c40:	2000      	movs	r0, #0
}
 8003c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003c46:	2001      	movs	r0, #1
}
 8003c48:	4770      	bx	lr
    return HAL_ERROR;
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	e7f9      	b.n	8003c42 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003c4e:	2001      	movs	r0, #1
 8003c50:	e7f7      	b.n	8003c42 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003c52:	2001      	movs	r0, #1
 8003c54:	e7f5      	b.n	8003c42 <HAL_RCC_ClockConfig+0x146>
 8003c56:	bf00      	nop
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	080097e4 	.word	0x080097e4
 8003c64:	200003b0 	.word	0x200003b0
 8003c68:	200003b8 	.word	0x200003b8

08003c6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c74:	4a03      	ldr	r2, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003c76:	5cd3      	ldrb	r3, [r2, r3]
 8003c78:	4a03      	ldr	r2, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c7a:	6810      	ldr	r0, [r2, #0]
}
 8003c7c:	40d8      	lsrs	r0, r3
 8003c7e:	4770      	bx	lr
 8003c80:	40021000 	.word	0x40021000
 8003c84:	080097f4 	.word	0x080097f4
 8003c88:	200003b0 	.word	0x200003b0

08003c8c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003c94:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	4a03      	ldr	r2, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c9a:	6810      	ldr	r0, [r2, #0]
}
 8003c9c:	40d8      	lsrs	r0, r3
 8003c9e:	4770      	bx	lr
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	080097f4 	.word	0x080097f4
 8003ca8:	200003b0 	.word	0x200003b0

08003cac <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cac:	230f      	movs	r3, #15
 8003cae:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_GetClockConfig+0x34>)
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	f002 0203 	and.w	r2, r2, #3
 8003cb8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003cc0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003cc8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cd2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <HAL_RCC_GetClockConfig+0x38>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	600b      	str	r3, [r1, #0]
}
 8003cde:	4770      	bx	lr
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40022000 	.word	0x40022000

08003ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cf0:	6803      	ldr	r3, [r0, #0]
 8003cf2:	f013 0f01 	tst.w	r3, #1
 8003cf6:	d036      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf8:	4b3f      	ldr	r3, [pc, #252]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d00:	d149      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d0a:	61da      	str	r2, [r3, #28]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d16:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d18:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003d20:	d03b      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d22:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d26:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003d2a:	d013      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003d2c:	6862      	ldr	r2, [r4, #4]
 8003d2e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d00e      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d36:	4a30      	ldr	r2, [pc, #192]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003d38:	6a13      	ldr	r3, [r2, #32]
 8003d3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d3e:	4930      	ldr	r1, [pc, #192]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d40:	2601      	movs	r6, #1
 8003d42:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d46:	2600      	movs	r6, #0
 8003d48:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d4c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d4e:	f013 0f01 	tst.w	r3, #1
 8003d52:	d136      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d54:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003d56:	6a13      	ldr	r3, [r2, #32]
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	6861      	ldr	r1, [r4, #4]
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	d13e      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	f013 0f02 	tst.w	r3, #2
 8003d6c:	d006      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d6e:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003d70:	6853      	ldr	r3, [r2, #4]
 8003d72:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d76:	68a1      	ldr	r1, [r4, #8]
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	f013 0f10 	tst.w	r3, #16
 8003d82:	d034      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003d86:	6853      	ldr	r3, [r2, #4]
 8003d88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003d8c:	68e1      	ldr	r1, [r4, #12]
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d92:	2000      	movs	r0, #0
 8003d94:	e02c      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8003d96:	2500      	movs	r5, #0
 8003d98:	e7be      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003d9c:	6813      	ldr	r3, [r2, #0]
 8003d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003da4:	f7fe fc00 	bl	80025a8 <HAL_GetTick>
 8003da8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003daa:	4f14      	ldr	r7, [pc, #80]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003db2:	d1b6      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db4:	f7fe fbf8 	bl	80025a8 <HAL_GetTick>
 8003db8:	1b80      	subs	r0, r0, r6
 8003dba:	2864      	cmp	r0, #100	; 0x64
 8003dbc:	d9f6      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8003dbe:	2003      	movs	r0, #3
 8003dc0:	e016      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fbf1 	bl	80025a8 <HAL_GetTick>
 8003dc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	4f0b      	ldr	r7, [pc, #44]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f013 0f02 	tst.w	r3, #2
 8003dd4:	d1be      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe fbe7 	bl	80025a8 <HAL_GetTick>
 8003dda:	1b80      	subs	r0, r0, r6
 8003ddc:	4540      	cmp	r0, r8
 8003dde:	d9f6      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8003de0:	2003      	movs	r0, #3
 8003de2:	e005      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de4:	69d3      	ldr	r3, [r2, #28]
 8003de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dea:	61d3      	str	r3, [r2, #28]
 8003dec:	e7bb      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8003dee:	2000      	movs	r0, #0
}
 8003df0:	b002      	add	sp, #8
 8003df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	42420000 	.word	0x42420000

08003e04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e04:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e06:	2802      	cmp	r0, #2
 8003e08:	d050      	beq.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8003e0a:	2810      	cmp	r0, #16
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8003e0e:	2801      	cmp	r0, #1
 8003e10:	d028      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003e12:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003e14:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8003e16:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003e18:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003e20:	d0f8      	beq.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e22:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003e26:	4929      	ldr	r1, [pc, #164]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8003e28:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e2a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003e2e:	d015      	beq.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003e38:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8003e3a:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 8003e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e42:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e46:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003e4e:	d1e1      	bne.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8003e50:	0040      	lsls	r0, r0, #1
 8003e52:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8003e54:	fba3 3000 	umull	r3, r0, r3, r0
 8003e58:	0840      	lsrs	r0, r0, #1
 8003e5a:	e7db      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e5c:	4b1f      	ldr	r3, [pc, #124]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8003e5e:	fb03 f000 	mul.w	r0, r3, r0
 8003e62:	e7f0      	b.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e68:	f240 3202 	movw	r2, #770	; 0x302
 8003e6c:	401a      	ands	r2, r3
 8003e6e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8003e72:	d026      	beq.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d004      	beq.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e84:	2000      	movs	r0, #0
  return (frequency);
 8003e86:	e7c5      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e88:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003e8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
        frequency = LSI_VALUE;
 8003e8c:	f010 0002 	ands.w	r0, r0, #2
 8003e90:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e94:	bf18      	it	ne
 8003e96:	4618      	movne	r0, r3
 8003e98:	e7bc      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003e9c:	6818      	ldr	r0, [r3, #0]
        frequency = HSE_VALUE / 128U;
 8003e9e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003ea2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ea6:	bf18      	it	ne
 8003ea8:	4618      	movne	r0, r3
 8003eaa:	e7b3      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003eac:	f7ff feee 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003eb8:	3301      	adds	r3, #1
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003ec0:	e7a8      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 8003ec2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ec6:	e7a5      	b.n	8003e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08009810 	.word	0x08009810
 8003ed0:	08009820 	.word	0x08009820
 8003ed4:	007a1200 	.word	0x007a1200
 8003ed8:	aaaaaaab 	.word	0xaaaaaaab
 8003edc:	003d0900 	.word	0x003d0900

08003ee0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	4681      	mov	r9, r0
 8003ee8:	460f      	mov	r7, r1
 8003eea:	4616      	mov	r6, r2
 8003eec:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003eee:	f7fe fb5b 	bl	80025a8 <HAL_GetTick>
 8003ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ef4:	442b      	add	r3, r5
 8003ef6:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8003efa:	f7fe fb55 	bl	80025a8 <HAL_GetTick>
 8003efe:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003f08:	fb08 f303 	mul.w	r3, r8, r3
 8003f0c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f0e:	f8d9 2000 	ldr.w	r2, [r9]
 8003f12:	6894      	ldr	r4, [r2, #8]
 8003f14:	ea37 0404 	bics.w	r4, r7, r4
 8003f18:	bf0c      	ite	eq
 8003f1a:	2301      	moveq	r3, #1
 8003f1c:	2300      	movne	r3, #0
 8003f1e:	42b3      	cmp	r3, r6
 8003f20:	d044      	beq.n	8003fac <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f22:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f26:	d0f4      	beq.n	8003f12 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f28:	f7fe fb3e 	bl	80025a8 <HAL_GetTick>
 8003f2c:	eba0 000a 	sub.w	r0, r0, sl
 8003f30:	4540      	cmp	r0, r8
 8003f32:	d207      	bcs.n	8003f44 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f34:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf08      	it	eq
 8003f3a:	4698      	moveq	r8, r3
      }
      count--;
 8003f3c:	9b01      	ldr	r3, [sp, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	e7e4      	b.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f44:	f8d9 2000 	ldr.w	r2, [r9]
 8003f48:	6853      	ldr	r3, [r2, #4]
 8003f4a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003f4e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f50:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003f54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f58:	d00c      	beq.n	8003f74 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f5a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8003f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f62:	d016      	beq.n	8003f92 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8003f70:	2003      	movs	r0, #3
 8003f72:	e01c      	b.n	8003fae <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f74:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	d002      	beq.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d1ea      	bne.n	8003f5a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8003f84:	f8d9 2000 	ldr.w	r2, [r9]
 8003f88:	6813      	ldr	r3, [r2, #0]
 8003f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e7e3      	b.n	8003f5a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8003f92:	f8d9 2000 	ldr.w	r2, [r9]
 8003f96:	6813      	ldr	r3, [r2, #0]
 8003f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	f8d9 2000 	ldr.w	r2, [r9]
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e7db      	b.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8003fac:	2000      	movs	r0, #0
}
 8003fae:	b002      	add	sp, #8
 8003fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb4:	200003b0 	.word	0x200003b0

08003fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b510      	push	{r4, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	9200      	str	r2, [sp, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2180      	movs	r1, #128	; 0x80
 8003fc6:	f7ff ff8b 	bl	8003ee0 <SPI_WaitFlagStateUntilTimeout>
 8003fca:	b908      	cbnz	r0, 8003fd0 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fd8:	2003      	movs	r0, #3
 8003fda:	e7f7      	b.n	8003fcc <SPI_EndRxTxTransaction+0x14>

08003fdc <SPI_EndRxTransaction>:
{
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe4:	6841      	ldr	r1, [r0, #4]
 8003fe6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8003fea:	d008      	beq.n	8003ffe <SPI_EndRxTransaction+0x22>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fec:	9200      	str	r2, [sp, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7ff ff74 	bl	8003ee0 <SPI_WaitFlagStateUntilTimeout>
 8003ff8:	bb18      	cbnz	r0, 8004042 <SPI_EndRxTransaction+0x66>
}
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ffe:	6881      	ldr	r1, [r0, #8]
 8004000:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004004:	d002      	beq.n	800400c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004006:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800400a:	d1ef      	bne.n	8003fec <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 800400c:	6820      	ldr	r0, [r4, #0]
 800400e:	6801      	ldr	r1, [r0, #0]
 8004010:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004014:	6001      	str	r1, [r0, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004016:	6861      	ldr	r1, [r4, #4]
 8004018:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800401c:	d1e6      	bne.n	8003fec <SPI_EndRxTransaction+0x10>
 800401e:	68a1      	ldr	r1, [r4, #8]
 8004020:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004024:	d1e2      	bne.n	8003fec <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004026:	9200      	str	r2, [sp, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	2101      	movs	r1, #1
 800402c:	4620      	mov	r0, r4
 800402e:	f7ff ff57 	bl	8003ee0 <SPI_WaitFlagStateUntilTimeout>
 8004032:	2800      	cmp	r0, #0
 8004034:	d0e1      	beq.n	8003ffa <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004036:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004038:	f043 0320 	orr.w	r3, r3, #32
 800403c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800403e:	2003      	movs	r0, #3
 8004040:	e7db      	b.n	8003ffa <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004042:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004044:	f043 0320 	orr.w	r3, r3, #32
 8004048:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800404a:	2003      	movs	r0, #3
 800404c:	e7d5      	b.n	8003ffa <SPI_EndRxTransaction+0x1e>

0800404e <HAL_SPI_Init>:
  if (hspi == NULL)
 800404e:	2800      	cmp	r0, #0
 8004050:	d056      	beq.n	8004100 <HAL_SPI_Init+0xb2>
{
 8004052:	b510      	push	{r4, lr}
 8004054:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004056:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004058:	b933      	cbnz	r3, 8004068 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405a:	6843      	ldr	r3, [r0, #4]
 800405c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004060:	d005      	beq.n	800406e <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004062:	2300      	movs	r3, #0
 8004064:	61c3      	str	r3, [r0, #28]
 8004066:	e002      	b.n	800406e <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004068:	2300      	movs	r3, #0
 800406a:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800406c:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406e:	2300      	movs	r3, #0
 8004070:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004072:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004076:	2b00      	cmp	r3, #0
 8004078:	d03c      	beq.n	80040f4 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004080:	6822      	ldr	r2, [r4, #0]
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004088:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	6863      	ldr	r3, [r4, #4]
 800408e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004092:	68a1      	ldr	r1, [r4, #8]
 8004094:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8004098:	430b      	orrs	r3, r1
 800409a:	68e1      	ldr	r1, [r4, #12]
 800409c:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6921      	ldr	r1, [r4, #16]
 80040a4:	f001 0102 	and.w	r1, r1, #2
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6961      	ldr	r1, [r4, #20]
 80040ac:	f001 0101 	and.w	r1, r1, #1
 80040b0:	430b      	orrs	r3, r1
 80040b2:	69a1      	ldr	r1, [r4, #24]
 80040b4:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80040b8:	430b      	orrs	r3, r1
 80040ba:	69e1      	ldr	r1, [r4, #28]
 80040bc:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6a21      	ldr	r1, [r4, #32]
 80040c4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80040cc:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80040d4:	6822      	ldr	r2, [r4, #0]
 80040d6:	8b63      	ldrh	r3, [r4, #26]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040de:	6822      	ldr	r2, [r4, #0]
 80040e0:	69d3      	ldr	r3, [r2, #28]
 80040e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040e6:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040e8:	2000      	movs	r0, #0
 80040ea:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80040f2:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80040f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80040f8:	4620      	mov	r0, r4
 80040fa:	f7fe f8b9 	bl	8002270 <HAL_SPI_MspInit>
 80040fe:	e7bc      	b.n	800407a <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004100:	2001      	movs	r0, #1
}
 8004102:	4770      	bx	lr

08004104 <HAL_SPI_Transmit>:
{
 8004104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004108:	b083      	sub	sp, #12
 800410a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800410c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004110:	2b01      	cmp	r3, #1
 8004112:	f000 80d6 	beq.w	80042c2 <HAL_SPI_Transmit+0x1be>
 8004116:	4604      	mov	r4, r0
 8004118:	4688      	mov	r8, r1
 800411a:	4691      	mov	r9, r2
 800411c:	2301      	movs	r3, #1
 800411e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004122:	f7fe fa41 	bl	80025a8 <HAL_GetTick>
 8004126:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004128:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 800412c:	b2f6      	uxtb	r6, r6
 800412e:	2e01      	cmp	r6, #1
 8004130:	f040 80bf 	bne.w	80042b2 <HAL_SPI_Transmit+0x1ae>
  if ((pData == NULL) || (Size == 0U))
 8004134:	f1b8 0f00 	cmp.w	r8, #0
 8004138:	f000 80bc 	beq.w	80042b4 <HAL_SPI_Transmit+0x1b0>
 800413c:	f1b9 0f00 	cmp.w	r9, #0
 8004140:	f000 80b8 	beq.w	80042b4 <HAL_SPI_Transmit+0x1b0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004144:	2303      	movs	r3, #3
 8004146:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800414a:	2300      	movs	r3, #0
 800414c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800414e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004152:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004156:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800415a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800415c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800415e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004160:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004162:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004164:	68a3      	ldr	r3, [r4, #8]
 8004166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416a:	d039      	beq.n	80041e0 <HAL_SPI_Transmit+0xdc>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004174:	d103      	bne.n	800417e <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800417c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800417e:	68e3      	ldr	r3, [r4, #12]
 8004180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004184:	d037      	beq.n	80041f6 <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004186:	6863      	ldr	r3, [r4, #4]
 8004188:	b113      	cbz	r3, 8004190 <HAL_SPI_Transmit+0x8c>
 800418a:	f1b9 0f01 	cmp.w	r9, #1
 800418e:	d10a      	bne.n	80041a6 <HAL_SPI_Transmit+0xa2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004194:	7812      	ldrb	r2, [r2, #0]
 8004196:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800419a:	3301      	adds	r3, #1
 800419c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800419e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80041a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d166      	bne.n	800427c <HAL_SPI_Transmit+0x178>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ae:	463a      	mov	r2, r7
 80041b0:	4629      	mov	r1, r5
 80041b2:	4620      	mov	r0, r4
 80041b4:	f7ff ff00 	bl	8003fb8 <SPI_EndRxTxTransaction>
 80041b8:	b108      	cbz	r0, 80041be <HAL_SPI_Transmit+0xba>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041ba:	2320      	movs	r3, #32
 80041bc:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041be:	68a3      	ldr	r3, [r4, #8]
 80041c0:	b933      	cbnz	r3, 80041d0 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	9201      	str	r2, [sp, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d16e      	bne.n	80042b4 <HAL_SPI_Transmit+0x1b0>
    hspi->State = HAL_SPI_STATE_READY;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041dc:	2600      	movs	r6, #0
 80041de:	e069      	b.n	80042b4 <HAL_SPI_Transmit+0x1b0>
    __HAL_SPI_DISABLE(hspi);
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	6813      	ldr	r3, [r2, #0]
 80041e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	6813      	ldr	r3, [r2, #0]
 80041ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	e7ba      	b.n	800416c <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	b113      	cbz	r3, 8004200 <HAL_SPI_Transmit+0xfc>
 80041fa:	f1b9 0f01 	cmp.w	r9, #1
 80041fe:	d10a      	bne.n	8004216 <HAL_SPI_Transmit+0x112>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004204:	8812      	ldrh	r2, [r2, #0]
 8004206:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004208:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800420a:	3302      	adds	r3, #2
 800420c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800420e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004210:	3b01      	subs	r3, #1
 8004212:	b29b      	uxth	r3, r3
 8004214:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004216:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004218:	b29b      	uxth	r3, r3
 800421a:	b963      	cbnz	r3, 8004236 <HAL_SPI_Transmit+0x132>
 800421c:	e7c7      	b.n	80041ae <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421e:	f7fe f9c3 	bl	80025a8 <HAL_GetTick>
 8004222:	1bc0      	subs	r0, r0, r7
 8004224:	42a8      	cmp	r0, r5
 8004226:	d316      	bcc.n	8004256 <HAL_SPI_Transmit+0x152>
 8004228:	f1b5 3fff 	cmp.w	r5, #4294967295
 800422c:	d115      	bne.n	800425a <HAL_SPI_Transmit+0x156>
    while (hspi->TxXferCount > 0U)
 800422e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0bb      	beq.n	80041ae <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	f012 0f02 	tst.w	r2, #2
 800423e:	d0ee      	beq.n	800421e <HAL_SPI_Transmit+0x11a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004240:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004242:	8812      	ldrh	r2, [r2, #0]
 8004244:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004246:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004248:	3302      	adds	r3, #2
 800424a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800424c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800424e:	3b01      	subs	r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004254:	e7eb      	b.n	800422e <HAL_SPI_Transmit+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004256:	2d00      	cmp	r5, #0
 8004258:	d1e9      	bne.n	800422e <HAL_SPI_Transmit+0x12a>
          hspi->State = HAL_SPI_STATE_READY;
 800425a:	2301      	movs	r3, #1
 800425c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004260:	2603      	movs	r6, #3
          goto error;
 8004262:	e027      	b.n	80042b4 <HAL_SPI_Transmit+0x1b0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004264:	f7fe f9a0 	bl	80025a8 <HAL_GetTick>
 8004268:	1bc0      	subs	r0, r0, r7
 800426a:	42a8      	cmp	r0, r5
 800426c:	d31a      	bcc.n	80042a4 <HAL_SPI_Transmit+0x1a0>
 800426e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004272:	d119      	bne.n	80042a8 <HAL_SPI_Transmit+0x1a4>
    while (hspi->TxXferCount > 0U)
 8004274:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8004276:	b289      	uxth	r1, r1
 8004278:	2900      	cmp	r1, #0
 800427a:	d098      	beq.n	80041ae <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	f012 0f02 	tst.w	r2, #2
 8004284:	d0ee      	beq.n	8004264 <HAL_SPI_Transmit+0x160>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004286:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004288:	7812      	ldrb	r2, [r2, #0]
 800428a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800428c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800428e:	3301      	adds	r3, #1
 8004290:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004292:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8004296:	f10c 3cff 	add.w	ip, ip, #4294967295
 800429a:	fa1f fc8c 	uxth.w	ip, ip
 800429e:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 80042a2:	e7e7      	b.n	8004274 <HAL_SPI_Transmit+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	d1e5      	bne.n	8004274 <HAL_SPI_Transmit+0x170>
          hspi->State = HAL_SPI_STATE_READY;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80042ae:	2603      	movs	r6, #3
          goto error;
 80042b0:	e000      	b.n	80042b4 <HAL_SPI_Transmit+0x1b0>
    errorcode = HAL_BUSY;
 80042b2:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80042b4:	2300      	movs	r3, #0
 80042b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80042ba:	4630      	mov	r0, r6
 80042bc:	b003      	add	sp, #12
 80042be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80042c2:	2602      	movs	r6, #2
 80042c4:	e7f9      	b.n	80042ba <HAL_SPI_Transmit+0x1b6>

080042c6 <HAL_SPI_TransmitReceive>:
{
 80042c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042ca:	b083      	sub	sp, #12
 80042cc:	461f      	mov	r7, r3
 80042ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80042d0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	f000 8115 	beq.w	8004504 <HAL_SPI_TransmitReceive+0x23e>
 80042da:	4604      	mov	r4, r0
 80042dc:	4688      	mov	r8, r1
 80042de:	4691      	mov	r9, r2
 80042e0:	2301      	movs	r3, #1
 80042e2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80042e6:	f7fe f95f 	bl	80025a8 <HAL_GetTick>
 80042ea:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80042ec:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80042f0:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80042f2:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042f4:	2801      	cmp	r0, #1
 80042f6:	d00a      	beq.n	800430e <HAL_SPI_TransmitReceive+0x48>
 80042f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fc:	f040 80ef 	bne.w	80044de <HAL_SPI_TransmitReceive+0x218>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004300:	68a3      	ldr	r3, [r4, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 80f2 	bne.w	80044ec <HAL_SPI_TransmitReceive+0x226>
 8004308:	2804      	cmp	r0, #4
 800430a:	f040 80f1 	bne.w	80044f0 <HAL_SPI_TransmitReceive+0x22a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800430e:	f1b8 0f00 	cmp.w	r8, #0
 8004312:	f000 80ef 	beq.w	80044f4 <HAL_SPI_TransmitReceive+0x22e>
 8004316:	f1b9 0f00 	cmp.w	r9, #0
 800431a:	f000 80ed 	beq.w	80044f8 <HAL_SPI_TransmitReceive+0x232>
 800431e:	2f00      	cmp	r7, #0
 8004320:	f000 80ec 	beq.w	80044fc <HAL_SPI_TransmitReceive+0x236>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004324:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800432c:	bf1c      	itt	ne
 800432e:	2305      	movne	r3, #5
 8004330:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004334:	2300      	movs	r3, #0
 8004336:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004338:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800433c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800433e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004340:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004344:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004346:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8004348:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800434a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004354:	d103      	bne.n	800435e <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d012      	beq.n	800438c <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004366:	6863      	ldr	r3, [r4, #4]
 8004368:	b10b      	cbz	r3, 800436e <HAL_SPI_TransmitReceive+0xa8>
 800436a:	2f01      	cmp	r7, #1
 800436c:	d10a      	bne.n	8004384 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004376:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004378:	3301      	adds	r3, #1
 800437a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800437c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800437e:	3b01      	subs	r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004384:	2701      	movs	r7, #1
        txallowed = 0U;
 8004386:	f04f 0800 	mov.w	r8, #0
 800438a:	e06b      	b.n	8004464 <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800438c:	6863      	ldr	r3, [r4, #4]
 800438e:	b10b      	cbz	r3, 8004394 <HAL_SPI_TransmitReceive+0xce>
 8004390:	2f01      	cmp	r7, #1
 8004392:	d10a      	bne.n	80043aa <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004398:	8812      	ldrh	r2, [r2, #0]
 800439a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800439c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800439e:	3302      	adds	r3, #2
 80043a0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80043a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80043aa:	2701      	movs	r7, #1
        txallowed = 0U;
 80043ac:	f04f 0800 	mov.w	r8, #0
 80043b0:	e01a      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	6893      	ldr	r3, [r2, #8]
 80043b6:	f013 0301 	ands.w	r3, r3, #1
 80043ba:	d00d      	beq.n	80043d8 <HAL_SPI_TransmitReceive+0x112>
 80043bc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80043be:	b289      	uxth	r1, r1
 80043c0:	b151      	cbz	r1, 80043d8 <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043c2:	68d1      	ldr	r1, [r2, #12]
 80043c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043c6:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043ca:	3202      	adds	r2, #2
 80043cc:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80043ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80043d0:	3a01      	subs	r2, #1
 80043d2:	b292      	uxth	r2, r2
 80043d4:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 80043d6:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043d8:	f7fe f8e6 	bl	80025a8 <HAL_GetTick>
 80043dc:	1b80      	subs	r0, r0, r6
 80043de:	42a8      	cmp	r0, r5
 80043e0:	d302      	bcc.n	80043e8 <HAL_SPI_TransmitReceive+0x122>
 80043e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80043e6:	d11d      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	b91b      	cbnz	r3, 80043f6 <HAL_SPI_TransmitReceive+0x130>
 80043ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d05a      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x1e6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	f012 0f02 	tst.w	r2, #2
 80043fe:	d0d8      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0xec>
 8004400:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004402:	b292      	uxth	r2, r2
 8004404:	2a00      	cmp	r2, #0
 8004406:	d0d4      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0xec>
 8004408:	2f00      	cmp	r7, #0
 800440a:	d0d2      	beq.n	80043b2 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800440e:	8812      	ldrh	r2, [r2, #0]
 8004410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004412:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004414:	3302      	adds	r3, #2
 8004416:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004418:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800441a:	3b01      	subs	r3, #1
 800441c:	b29b      	uxth	r3, r3
 800441e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004420:	4647      	mov	r7, r8
 8004422:	e7c6      	b.n	80043b2 <HAL_SPI_TransmitReceive+0xec>
        hspi->State = HAL_SPI_STATE_READY;
 8004424:	2301      	movs	r3, #1
 8004426:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 800442a:	2003      	movs	r0, #3
        goto error;
 800442c:	e058      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800442e:	6822      	ldr	r2, [r4, #0]
 8004430:	6893      	ldr	r3, [r2, #8]
 8004432:	f013 0301 	ands.w	r3, r3, #1
 8004436:	d00d      	beq.n	8004454 <HAL_SPI_TransmitReceive+0x18e>
 8004438:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800443a:	b289      	uxth	r1, r1
 800443c:	b151      	cbz	r1, 8004454 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800443e:	68d1      	ldr	r1, [r2, #12]
 8004440:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004442:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 8004444:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004446:	3201      	adds	r2, #1
 8004448:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800444a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800444c:	3a01      	subs	r2, #1
 800444e:	b292      	uxth	r2, r2
 8004450:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004452:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004454:	f7fe f8a8 	bl	80025a8 <HAL_GetTick>
 8004458:	1b83      	subs	r3, r0, r6
 800445a:	42ab      	cmp	r3, r5
 800445c:	d31f      	bcc.n	800449e <HAL_SPI_TransmitReceive+0x1d8>
 800445e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004462:	d11e      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x1dc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004464:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004466:	b29b      	uxth	r3, r3
 8004468:	b913      	cbnz	r3, 8004470 <HAL_SPI_TransmitReceive+0x1aa>
 800446a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	b1eb      	cbz	r3, 80044ac <HAL_SPI_TransmitReceive+0x1e6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	f012 0f02 	tst.w	r2, #2
 8004478:	d0d9      	beq.n	800442e <HAL_SPI_TransmitReceive+0x168>
 800447a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800447c:	b292      	uxth	r2, r2
 800447e:	2a00      	cmp	r2, #0
 8004480:	d0d5      	beq.n	800442e <HAL_SPI_TransmitReceive+0x168>
 8004482:	2f01      	cmp	r7, #1
 8004484:	d1d3      	bne.n	800442e <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004486:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800448c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800448e:	3301      	adds	r3, #1
 8004490:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004492:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004494:	3b01      	subs	r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800449a:	4647      	mov	r7, r8
 800449c:	e7c7      	b.n	800442e <HAL_SPI_TransmitReceive+0x168>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800449e:	2d00      	cmp	r5, #0
 80044a0:	d1e0      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x19e>
        hspi->State = HAL_SPI_STATE_READY;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 80044a8:	2003      	movs	r0, #3
        goto error;
 80044aa:	e019      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ac:	4632      	mov	r2, r6
 80044ae:	4629      	mov	r1, r5
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7ff fd81 	bl	8003fb8 <SPI_EndRxTxTransaction>
 80044b6:	b970      	cbnz	r0, 80044d6 <HAL_SPI_TransmitReceive+0x210>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044b8:	68a3      	ldr	r3, [r4, #8]
 80044ba:	b933      	cbnz	r3, 80044ca <HAL_SPI_TransmitReceive+0x204>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	9201      	str	r2, [sp, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044cc:	b9c3      	cbnz	r3, 8004500 <HAL_SPI_TransmitReceive+0x23a>
    hspi->State = HAL_SPI_STATE_READY;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80044d4:	e004      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d6:	2320      	movs	r3, #32
 80044d8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80044da:	2001      	movs	r0, #1
    goto error;
 80044dc:	e000      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_BUSY;
 80044de:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80044e0:	2300      	movs	r3, #0
 80044e2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80044e6:	b003      	add	sp, #12
 80044e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80044ec:	2002      	movs	r0, #2
 80044ee:	e7f7      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
 80044f0:	2002      	movs	r0, #2
 80044f2:	e7f5      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 80044f4:	2001      	movs	r0, #1
 80044f6:	e7f3      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
 80044f8:	2001      	movs	r0, #1
 80044fa:	e7f1      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
 80044fc:	2001      	movs	r0, #1
 80044fe:	e7ef      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 8004500:	2001      	movs	r0, #1
 8004502:	e7ed      	b.n	80044e0 <HAL_SPI_TransmitReceive+0x21a>
  __HAL_LOCK(hspi);
 8004504:	2002      	movs	r0, #2
 8004506:	e7ee      	b.n	80044e6 <HAL_SPI_TransmitReceive+0x220>

08004508 <HAL_SPI_Receive>:
{
 8004508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800450c:	b083      	sub	sp, #12
 800450e:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004510:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 8004514:	b2ed      	uxtb	r5, r5
 8004516:	2d01      	cmp	r5, #1
 8004518:	f040 80b7 	bne.w	800468a <HAL_SPI_Receive+0x182>
 800451c:	4688      	mov	r8, r1
 800451e:	4691      	mov	r9, r2
 8004520:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004522:	6843      	ldr	r3, [r0, #4]
 8004524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004528:	d045      	beq.n	80045b6 <HAL_SPI_Receive+0xae>
  __HAL_LOCK(hspi);
 800452a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800452e:	2b01      	cmp	r3, #1
 8004530:	f000 80b3 	beq.w	800469a <HAL_SPI_Receive+0x192>
 8004534:	2301      	movs	r3, #1
 8004536:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800453a:	f7fe f835 	bl	80025a8 <HAL_GetTick>
 800453e:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8004540:	f1b8 0f00 	cmp.w	r8, #0
 8004544:	f000 80a2 	beq.w	800468c <HAL_SPI_Receive+0x184>
 8004548:	f1b9 0f00 	cmp.w	r9, #0
 800454c:	f000 809e 	beq.w	800468c <HAL_SPI_Receive+0x184>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004550:	2304      	movs	r3, #4
 8004552:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004556:	2300      	movs	r3, #0
 8004558:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800455a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800455e:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004562:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004566:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004568:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800456a:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800456c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800456e:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004570:	68a3      	ldr	r3, [r4, #8]
 8004572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004576:	d02b      	beq.n	80045d0 <HAL_SPI_Receive+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004580:	d103      	bne.n	800458a <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004588:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800458a:	68e3      	ldr	r3, [r4, #12]
 800458c:	b35b      	cbz	r3, 80045e6 <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 800458e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d15e      	bne.n	8004654 <HAL_SPI_Receive+0x14c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004596:	463a      	mov	r2, r7
 8004598:	4631      	mov	r1, r6
 800459a:	4620      	mov	r0, r4
 800459c:	f7ff fd1e 	bl	8003fdc <SPI_EndRxTransaction>
 80045a0:	b108      	cbz	r0, 80045a6 <HAL_SPI_Receive+0x9e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045a2:	2320      	movs	r3, #32
 80045a4:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d16f      	bne.n	800468c <HAL_SPI_Receive+0x184>
    hspi->State = HAL_SPI_STATE_READY;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045b2:	2500      	movs	r5, #0
 80045b4:	e06a      	b.n	800468c <HAL_SPI_Receive+0x184>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045b6:	6883      	ldr	r3, [r0, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1b6      	bne.n	800452a <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045bc:	2304      	movs	r3, #4
 80045be:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045c2:	9600      	str	r6, [sp, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	460a      	mov	r2, r1
 80045c8:	f7ff fe7d 	bl	80042c6 <HAL_SPI_TransmitReceive>
 80045cc:	4605      	mov	r5, r0
 80045ce:	e060      	b.n	8004692 <HAL_SPI_Receive+0x18a>
    __HAL_SPI_DISABLE(hspi);
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	6813      	ldr	r3, [r2, #0]
 80045d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	6813      	ldr	r3, [r2, #0]
 80045de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e7c8      	b.n	8004578 <HAL_SPI_Receive+0x70>
    while (hspi->RxXferCount > 0U)
 80045e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	b963      	cbnz	r3, 8004606 <HAL_SPI_Receive+0xfe>
 80045ec:	e7d3      	b.n	8004596 <HAL_SPI_Receive+0x8e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ee:	f7fd ffdb 	bl	80025a8 <HAL_GetTick>
 80045f2:	1bc0      	subs	r0, r0, r7
 80045f4:	42b0      	cmp	r0, r6
 80045f6:	d31a      	bcc.n	800462e <HAL_SPI_Receive+0x126>
 80045f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80045fc:	d119      	bne.n	8004632 <HAL_SPI_Receive+0x12a>
    while (hspi->RxXferCount > 0U)
 80045fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0c7      	beq.n	8004596 <HAL_SPI_Receive+0x8e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	f012 0f01 	tst.w	r2, #1
 800460e:	d0ee      	beq.n	80045ee <HAL_SPI_Receive+0xe6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004610:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004612:	7b1b      	ldrb	r3, [r3, #12]
 8004614:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004618:	3301      	adds	r3, #1
 800461a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800461c:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8004620:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004624:	fa1f fc8c 	uxth.w	ip, ip
 8004628:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800462c:	e7e7      	b.n	80045fe <HAL_SPI_Receive+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462e:	2e00      	cmp	r6, #0
 8004630:	d1e5      	bne.n	80045fe <HAL_SPI_Receive+0xf6>
          hspi->State = HAL_SPI_STATE_READY;
 8004632:	2301      	movs	r3, #1
 8004634:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004638:	2503      	movs	r5, #3
          goto error;
 800463a:	e027      	b.n	800468c <HAL_SPI_Receive+0x184>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800463c:	f7fd ffb4 	bl	80025a8 <HAL_GetTick>
 8004640:	1bc0      	subs	r0, r0, r7
 8004642:	42b0      	cmp	r0, r6
 8004644:	d31a      	bcc.n	800467c <HAL_SPI_Receive+0x174>
 8004646:	f1b6 3fff 	cmp.w	r6, #4294967295
 800464a:	d119      	bne.n	8004680 <HAL_SPI_Receive+0x178>
    while (hspi->RxXferCount > 0U)
 800464c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0a0      	beq.n	8004596 <HAL_SPI_Receive+0x8e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	f012 0f01 	tst.w	r2, #1
 800465c:	d0ee      	beq.n	800463c <HAL_SPI_Receive+0x134>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004664:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004666:	3302      	adds	r3, #2
 8004668:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800466a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800466e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004672:	fa1f fc8c 	uxth.w	ip, ip
 8004676:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800467a:	e7e7      	b.n	800464c <HAL_SPI_Receive+0x144>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467c:	2e00      	cmp	r6, #0
 800467e:	d1e5      	bne.n	800464c <HAL_SPI_Receive+0x144>
          hspi->State = HAL_SPI_STATE_READY;
 8004680:	2301      	movs	r3, #1
 8004682:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004686:	2503      	movs	r5, #3
          goto error;
 8004688:	e000      	b.n	800468c <HAL_SPI_Receive+0x184>
    errorcode = HAL_BUSY;
 800468a:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 800468c:	2300      	movs	r3, #0
 800468e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004692:	4628      	mov	r0, r5
 8004694:	b003      	add	sp, #12
 8004696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800469a:	2502      	movs	r5, #2
 800469c:	e7f9      	b.n	8004692 <HAL_SPI_Receive+0x18a>
	...

080046a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a4:	6a02      	ldr	r2, [r0, #32]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	680d      	ldr	r5, [r1, #0]
 80046b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046b8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046bc:	688d      	ldr	r5, [r1, #8]
 80046be:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046c0:	4d0b      	ldr	r5, [pc, #44]	; (80046f0 <TIM_OC1_SetConfig+0x50>)
 80046c2:	42a8      	cmp	r0, r5
 80046c4:	d006      	beq.n	80046d4 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ca:	684a      	ldr	r2, [r1, #4]
 80046cc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ce:	6203      	str	r3, [r0, #32]
}
 80046d0:	bc70      	pop	{r4, r5, r6}
 80046d2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80046d4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80046d8:	68cd      	ldr	r5, [r1, #12]
 80046da:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80046dc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e4:	694d      	ldr	r5, [r1, #20]
 80046e6:	698e      	ldr	r6, [r1, #24]
 80046e8:	4335      	orrs	r5, r6
 80046ea:	432c      	orrs	r4, r5
 80046ec:	e7eb      	b.n	80046c6 <TIM_OC1_SetConfig+0x26>
 80046ee:	bf00      	nop
 80046f0:	40012c00 	.word	0x40012c00

080046f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f8:	6a02      	ldr	r2, [r0, #32]
 80046fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fe:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004702:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004704:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004708:	680d      	ldr	r5, [r1, #0]
 800470a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800470c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004710:	688d      	ldr	r5, [r1, #8]
 8004712:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004716:	4d0c      	ldr	r5, [pc, #48]	; (8004748 <TIM_OC3_SetConfig+0x54>)
 8004718:	42a8      	cmp	r0, r5
 800471a:	d006      	beq.n	800472a <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800471e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004720:	684a      	ldr	r2, [r1, #4]
 8004722:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004724:	6203      	str	r3, [r0, #32]
}
 8004726:	bc70      	pop	{r4, r5, r6}
 8004728:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800472a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800472e:	68cd      	ldr	r5, [r1, #12]
 8004730:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004738:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800473c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800473e:	698e      	ldr	r6, [r1, #24]
 8004740:	4335      	orrs	r5, r6
 8004742:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004746:	e7e9      	b.n	800471c <TIM_OC3_SetConfig+0x28>
 8004748:	40012c00 	.word	0x40012c00

0800474c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004750:	6a02      	ldr	r2, [r0, #32]
 8004752:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004756:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800475c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	680d      	ldr	r5, [r1, #0]
 8004762:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800476a:	688d      	ldr	r5, [r1, #8]
 800476c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004770:	4d07      	ldr	r5, [pc, #28]	; (8004790 <TIM_OC4_SetConfig+0x44>)
 8004772:	42a8      	cmp	r0, r5
 8004774:	d006      	beq.n	8004784 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004778:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800477a:	684a      	ldr	r2, [r1, #4]
 800477c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477e:	6203      	str	r3, [r0, #32]
}
 8004780:	bc30      	pop	{r4, r5}
 8004782:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004784:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004788:	694d      	ldr	r5, [r1, #20]
 800478a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800478e:	e7f2      	b.n	8004776 <TIM_OC4_SetConfig+0x2a>
 8004790:	40012c00 	.word	0x40012c00

08004794 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004794:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d127      	bne.n	80047ee <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800479e:	2302      	movs	r3, #2
 80047a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047a4:	6802      	ldr	r2, [r0, #0]
 80047a6:	68d3      	ldr	r3, [r2, #12]
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ae:	6803      	ldr	r3, [r0, #0]
 80047b0:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <HAL_TIM_Base_Start_IT+0x64>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d010      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x44>
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d00d      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x44>
 80047bc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x44>
 80047c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d005      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80047d4:	2000      	movs	r0, #0
 80047d6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	2a06      	cmp	r2, #6
 80047e0:	d007      	beq.n	80047f2 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80047ea:	2000      	movs	r0, #0
 80047ec:	4770      	bx	lr
    return HAL_ERROR;
 80047ee:	2001      	movs	r0, #1
 80047f0:	4770      	bx	lr
  return HAL_OK;
 80047f2:	2000      	movs	r0, #0
}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40012c00 	.word	0x40012c00

080047fc <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80047fc:	6802      	ldr	r2, [r0, #0]
 80047fe:	68d3      	ldr	r3, [r2, #12]
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8004806:	6803      	ldr	r3, [r0, #0]
 8004808:	6a19      	ldr	r1, [r3, #32]
 800480a:	f241 1211 	movw	r2, #4369	; 0x1111
 800480e:	4211      	tst	r1, r2
 8004810:	d108      	bne.n	8004824 <HAL_TIM_Base_Stop_IT+0x28>
 8004812:	6a19      	ldr	r1, [r3, #32]
 8004814:	f240 4244 	movw	r2, #1092	; 0x444
 8004818:	4211      	tst	r1, r2
 800481a:	d103      	bne.n	8004824 <HAL_TIM_Base_Stop_IT+0x28>
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004824:	2301      	movs	r3, #1
 8004826:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800482a:	2000      	movs	r0, #0
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_PWM_MspInit>:
}
 800482e:	4770      	bx	lr

08004830 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004830:	4770      	bx	lr

08004832 <HAL_TIM_IC_CaptureCallback>:
}
 8004832:	4770      	bx	lr

08004834 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_TriggerCallback>:
}
 8004836:	4770      	bx	lr

08004838 <HAL_TIM_IRQHandler>:
{
 8004838:	b510      	push	{r4, lr}
 800483a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800483c:	6803      	ldr	r3, [r0, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	f012 0f02 	tst.w	r2, #2
 8004844:	d011      	beq.n	800486a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	f012 0f02 	tst.w	r2, #2
 800484c:	d00d      	beq.n	800486a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800484e:	f06f 0202 	mvn.w	r2, #2
 8004852:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004854:	2301      	movs	r3, #1
 8004856:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004858:	6803      	ldr	r3, [r0, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f013 0f03 	tst.w	r3, #3
 8004860:	d070      	beq.n	8004944 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004862:	f7ff ffe6 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004866:	2300      	movs	r3, #0
 8004868:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	f012 0f04 	tst.w	r2, #4
 8004872:	d012      	beq.n	800489a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	f012 0f04 	tst.w	r2, #4
 800487a:	d00e      	beq.n	800489a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800487c:	f06f 0204 	mvn.w	r2, #4
 8004880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004882:	2302      	movs	r3, #2
 8004884:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800488e:	d05f      	beq.n	8004950 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004890:	4620      	mov	r0, r4
 8004892:	f7ff ffce 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	2300      	movs	r3, #0
 8004898:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	f012 0f08 	tst.w	r2, #8
 80048a2:	d012      	beq.n	80048ca <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	f012 0f08 	tst.w	r2, #8
 80048aa:	d00e      	beq.n	80048ca <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048ac:	f06f 0208 	mvn.w	r2, #8
 80048b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b2:	2304      	movs	r3, #4
 80048b4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f013 0f03 	tst.w	r3, #3
 80048be:	d04e      	beq.n	800495e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7ff ffb6 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c6:	2300      	movs	r3, #0
 80048c8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	f012 0f10 	tst.w	r2, #16
 80048d2:	d012      	beq.n	80048fa <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	f012 0f10 	tst.w	r2, #16
 80048da:	d00e      	beq.n	80048fa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048dc:	f06f 0210 	mvn.w	r2, #16
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048e2:	2308      	movs	r3, #8
 80048e4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f413 7f40 	tst.w	r3, #768	; 0x300
 80048ee:	d03d      	beq.n	800496c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80048f0:	4620      	mov	r0, r4
 80048f2:	f7ff ff9e 	bl	8004832 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f6:	2300      	movs	r3, #0
 80048f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	f012 0f01 	tst.w	r2, #1
 8004902:	d003      	beq.n	800490c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	f012 0f01 	tst.w	r2, #1
 800490a:	d136      	bne.n	800497a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	f012 0f80 	tst.w	r2, #128	; 0x80
 800491c:	d134      	bne.n	8004988 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004926:	d003      	beq.n	8004930 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800492e:	d132      	bne.n	8004996 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	f012 0f20 	tst.w	r2, #32
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	f012 0f20 	tst.w	r2, #32
 8004940:	d130      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x16c>
}
 8004942:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004944:	f7ff ff74 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	4620      	mov	r0, r4
 800494a:	f7ff ff73 	bl	8004834 <HAL_TIM_PWM_PulseFinishedCallback>
 800494e:	e78a      	b.n	8004866 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004950:	4620      	mov	r0, r4
 8004952:	f7ff ff6d 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004956:	4620      	mov	r0, r4
 8004958:	f7ff ff6c 	bl	8004834 <HAL_TIM_PWM_PulseFinishedCallback>
 800495c:	e79b      	b.n	8004896 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	4620      	mov	r0, r4
 8004960:	f7ff ff66 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ff65 	bl	8004834 <HAL_TIM_PWM_PulseFinishedCallback>
 800496a:	e7ac      	b.n	80048c6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496c:	4620      	mov	r0, r4
 800496e:	f7ff ff5f 	bl	8004830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff ff5e 	bl	8004834 <HAL_TIM_PWM_PulseFinishedCallback>
 8004978:	e7bd      	b.n	80048f6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800497a:	f06f 0201 	mvn.w	r2, #1
 800497e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004980:	4620      	mov	r0, r4
 8004982:	f7fc f993 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
 8004986:	e7c1      	b.n	800490c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800498c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800498e:	4620      	mov	r0, r4
 8004990:	f000 fafd 	bl	8004f8e <HAL_TIMEx_BreakCallback>
 8004994:	e7c3      	b.n	800491e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004996:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800499a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff ff4a 	bl	8004836 <HAL_TIM_TriggerCallback>
 80049a2:	e7c5      	b.n	8004930 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049a4:	f06f 0220 	mvn.w	r2, #32
 80049a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80049aa:	4620      	mov	r0, r4
 80049ac:	f000 faee 	bl	8004f8c <HAL_TIMEx_CommutCallback>
}
 80049b0:	e7c7      	b.n	8004942 <HAL_TIM_IRQHandler+0x10a>
	...

080049b4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80049b4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b6:	4a25      	ldr	r2, [pc, #148]	; (8004a4c <TIM_Base_SetConfig+0x98>)
 80049b8:	4290      	cmp	r0, r2
 80049ba:	d014      	beq.n	80049e6 <TIM_Base_SetConfig+0x32>
 80049bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80049c0:	d026      	beq.n	8004a10 <TIM_Base_SetConfig+0x5c>
 80049c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80049c6:	4290      	cmp	r0, r2
 80049c8:	d036      	beq.n	8004a38 <TIM_Base_SetConfig+0x84>
 80049ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ce:	4290      	cmp	r0, r2
 80049d0:	d037      	beq.n	8004a42 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d6:	694a      	ldr	r2, [r1, #20]
 80049d8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80049da:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049dc:	688b      	ldr	r3, [r1, #8]
 80049de:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049e0:	680b      	ldr	r3, [r1, #0]
 80049e2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e4:	e025      	b.n	8004a32 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80049ea:	684a      	ldr	r2, [r1, #4]
 80049ec:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	68ca      	ldr	r2, [r1, #12]
 80049f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fa:	694a      	ldr	r2, [r1, #20]
 80049fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80049fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a00:	688b      	ldr	r3, [r1, #8]
 8004a02:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a04:	680b      	ldr	r3, [r1, #0]
 8004a06:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004a08:	690a      	ldr	r2, [r1, #16]
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <TIM_Base_SetConfig+0x98>)
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a0e:	e010      	b.n	8004a32 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a14:	684a      	ldr	r2, [r1, #4]
 8004a16:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1c:	68ca      	ldr	r2, [r1, #12]
 8004a1e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a24:	694a      	ldr	r2, [r1, #20]
 8004a26:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004a28:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2a:	688b      	ldr	r3, [r1, #8]
 8004a2c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a2e:	680b      	ldr	r3, [r1, #0]
 8004a30:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004a32:	2301      	movs	r3, #1
 8004a34:	6143      	str	r3, [r0, #20]
}
 8004a36:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a3c:	684a      	ldr	r2, [r1, #4]
 8004a3e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a40:	e7ea      	b.n	8004a18 <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a46:	684a      	ldr	r2, [r1, #4]
 8004a48:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4a:	e7e5      	b.n	8004a18 <TIM_Base_SetConfig+0x64>
 8004a4c:	40012c00 	.word	0x40012c00

08004a50 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004a50:	b340      	cbz	r0, 8004aa4 <HAL_TIM_Base_Init+0x54>
{
 8004a52:	b510      	push	{r4, lr}
 8004a54:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a5a:	b1f3      	cbz	r3, 8004a9a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a62:	4621      	mov	r1, r4
 8004a64:	f851 0b04 	ldr.w	r0, [r1], #4
 8004a68:	f7ff ffa4 	bl	80049b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004a76:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004a92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004a96:	2000      	movs	r0, #0
}
 8004a98:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004a9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a9e:	f7fd fc21 	bl	80022e4 <HAL_TIM_Base_MspInit>
 8004aa2:	e7db      	b.n	8004a5c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004aa4:	2001      	movs	r0, #1
}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004aa8:	b340      	cbz	r0, 8004afc <HAL_TIM_PWM_Init+0x54>
{
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ab2:	b1f3      	cbz	r3, 8004af2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aba:	4621      	mov	r1, r4
 8004abc:	f851 0b04 	ldr.w	r0, [r1], #4
 8004ac0:	f7ff ff78 	bl	80049b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004ace:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004ad2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004ad6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004ae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004aee:	2000      	movs	r0, #0
}
 8004af0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004af2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004af6:	f7ff fe9a 	bl	800482e <HAL_TIM_PWM_MspInit>
 8004afa:	e7db      	b.n	8004ab4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004afc:	2001      	movs	r0, #1
}
 8004afe:	4770      	bx	lr

08004b00 <TIM_OC2_SetConfig>:
{
 8004b00:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8004b02:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b04:	6a02      	ldr	r2, [r0, #32]
 8004b06:	f022 0210 	bic.w	r2, r2, #16
 8004b0a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004b0c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b0e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b10:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b14:	680d      	ldr	r5, [r1, #0]
 8004b16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004b1a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b1e:	688d      	ldr	r5, [r1, #8]
 8004b20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b24:	4d0c      	ldr	r5, [pc, #48]	; (8004b58 <TIM_OC2_SetConfig+0x58>)
 8004b26:	42a8      	cmp	r0, r5
 8004b28:	d006      	beq.n	8004b38 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8004b2a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b2c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b2e:	684a      	ldr	r2, [r1, #4]
 8004b30:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004b32:	6203      	str	r3, [r0, #32]
}
 8004b34:	bc70      	pop	{r4, r5, r6}
 8004b36:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b3c:	68cd      	ldr	r5, [r1, #12]
 8004b3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b46:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b4a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b4c:	698e      	ldr	r6, [r1, #24]
 8004b4e:	4335      	orrs	r5, r6
 8004b50:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004b54:	e7e9      	b.n	8004b2a <TIM_OC2_SetConfig+0x2a>
 8004b56:	bf00      	nop
 8004b58:	40012c00 	.word	0x40012c00

08004b5c <HAL_TIM_PWM_ConfigChannel>:
{
 8004b5c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004b5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d066      	beq.n	8004c34 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004b66:	4604      	mov	r4, r0
 8004b68:	460d      	mov	r5, r1
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004b70:	2a0c      	cmp	r2, #12
 8004b72:	d85a      	bhi.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0xce>
 8004b74:	e8df f002 	tbb	[pc, r2]
 8004b78:	59595907 	.word	0x59595907
 8004b7c:	5959591b 	.word	0x5959591b
 8004b80:	59595930 	.word	0x59595930
 8004b84:	44          	.byte	0x44
 8004b85:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b86:	6800      	ldr	r0, [r0, #0]
 8004b88:	f7ff fd8a 	bl	80046a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b8c:	6822      	ldr	r2, [r4, #0]
 8004b8e:	6993      	ldr	r3, [r2, #24]
 8004b90:	f043 0308 	orr.w	r3, r3, #8
 8004b94:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	6993      	ldr	r3, [r2, #24]
 8004b9a:	f023 0304 	bic.w	r3, r3, #4
 8004b9e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	6993      	ldr	r3, [r2, #24]
 8004ba4:	6929      	ldr	r1, [r5, #16]
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004baa:	2000      	movs	r0, #0
      break;
 8004bac:	e03e      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bae:	6800      	ldr	r0, [r0, #0]
 8004bb0:	f7ff ffa6 	bl	8004b00 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	6993      	ldr	r3, [r2, #24]
 8004bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bbc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	6993      	ldr	r3, [r2, #24]
 8004bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	6993      	ldr	r3, [r2, #24]
 8004bcc:	6929      	ldr	r1, [r5, #16]
 8004bce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004bd2:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd4:	2000      	movs	r0, #0
      break;
 8004bd6:	e029      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bd8:	6800      	ldr	r0, [r0, #0]
 8004bda:	f7ff fd8b 	bl	80046f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bde:	6822      	ldr	r2, [r4, #0]
 8004be0:	69d3      	ldr	r3, [r2, #28]
 8004be2:	f043 0308 	orr.w	r3, r3, #8
 8004be6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	69d3      	ldr	r3, [r2, #28]
 8004bec:	f023 0304 	bic.w	r3, r3, #4
 8004bf0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bf2:	6822      	ldr	r2, [r4, #0]
 8004bf4:	69d3      	ldr	r3, [r2, #28]
 8004bf6:	6929      	ldr	r1, [r5, #16]
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfc:	2000      	movs	r0, #0
      break;
 8004bfe:	e015      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c00:	6800      	ldr	r0, [r0, #0]
 8004c02:	f7ff fda3 	bl	800474c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	69d3      	ldr	r3, [r2, #28]
 8004c0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c0e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c10:	6822      	ldr	r2, [r4, #0]
 8004c12:	69d3      	ldr	r3, [r2, #28]
 8004c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c18:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c1a:	6822      	ldr	r2, [r4, #0]
 8004c1c:	69d3      	ldr	r3, [r2, #28]
 8004c1e:	6929      	ldr	r1, [r5, #16]
 8004c20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c24:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2000      	movs	r0, #0
      break;
 8004c28:	e000      	b.n	8004c2c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8004c2a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004c34:	2002      	movs	r0, #2
 8004c36:	e7fc      	b.n	8004c32 <HAL_TIM_PWM_ConfigChannel+0xd6>

08004c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c38:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c40:	430a      	orrs	r2, r1
 8004c42:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004c46:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4a:	6082      	str	r2, [r0, #8]
}
 8004c4c:	bc10      	pop	{r4}
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIM_ConfigClockSource>:
{
 8004c50:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004c52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	f000 80ad 	beq.w	8004db6 <HAL_TIM_ConfigClockSource+0x166>
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	2302      	movs	r3, #2
 8004c66:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004c6a:	6802      	ldr	r2, [r0, #0]
 8004c6c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004c76:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004c78:	680b      	ldr	r3, [r1, #0]
 8004c7a:	2b60      	cmp	r3, #96	; 0x60
 8004c7c:	d060      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0xf0>
 8004c7e:	d83d      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0xac>
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d079      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x128>
 8004c84:	d91c      	bls.n	8004cc0 <HAL_TIM_ConfigClockSource+0x70>
 8004c86:	2b50      	cmp	r3, #80	; 0x50
 8004c88:	d136      	bne.n	8004cf8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004c8e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004c90:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	6a1a      	ldr	r2, [r3, #32]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ca0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004ca8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cac:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cae:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004cb0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cb6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004cba:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbc:	2000      	movs	r0, #0
}
 8004cbe:	e012      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d002      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x7a>
 8004cc4:	d90b      	bls.n	8004cde <HAL_TIM_ConfigClockSource+0x8e>
 8004cc6:	2b30      	cmp	r3, #48	; 0x30
 8004cc8:	d114      	bne.n	8004cf4 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cca:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004ccc:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004cd8:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cda:	2000      	movs	r0, #0
}
 8004cdc:	e003      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004cde:	f033 0210 	bics.w	r2, r3, #16
 8004ce2:	d0f2      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x7a>
 8004ce4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004cec:	2300      	movs	r3, #0
 8004cee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	e7f6      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	e7f4      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d055      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15e>
 8004d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d06:	d10c      	bne.n	8004d22 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8004d08:	68cb      	ldr	r3, [r1, #12]
 8004d0a:	684a      	ldr	r2, [r1, #4]
 8004d0c:	6889      	ldr	r1, [r1, #8]
 8004d0e:	6800      	ldr	r0, [r0, #0]
 8004d10:	f7ff ff92 	bl	8004c38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d14:	6822      	ldr	r2, [r4, #0]
 8004d16:	6893      	ldr	r3, [r2, #8]
 8004d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d1c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2000      	movs	r0, #0
      break;
 8004d20:	e7e1      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004d22:	2b70      	cmp	r3, #112	; 0x70
 8004d24:	d145      	bne.n	8004db2 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8004d26:	68cb      	ldr	r3, [r1, #12]
 8004d28:	684a      	ldr	r2, [r1, #4]
 8004d2a:	6889      	ldr	r1, [r1, #8]
 8004d2c:	6800      	ldr	r0, [r0, #0]
 8004d2e:	f7ff ff83 	bl	8004c38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d32:	6822      	ldr	r2, [r4, #0]
 8004d34:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004d3a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3c:	2000      	movs	r0, #0
      break;
 8004d3e:	e7d2      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d40:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d42:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004d44:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004d46:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d48:	6a19      	ldr	r1, [r3, #32]
 8004d4a:	f021 0110 	bic.w	r1, r1, #16
 8004d4e:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d50:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d52:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d56:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d5e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004d62:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d64:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d66:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004d68:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004d72:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2000      	movs	r0, #0
}
 8004d76:	e7b6      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d78:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004d7e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d80:	6a1a      	ldr	r2, [r3, #32]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d88:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d8e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d92:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004d96:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004d98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d9c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004d9e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004da4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004da8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2000      	movs	r0, #0
}
 8004dac:	e79b      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2000      	movs	r0, #0
 8004db0:	e799      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004db2:	2001      	movs	r0, #1
 8004db4:	e797      	b.n	8004ce6 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8004db6:	2002      	movs	r0, #2
 8004db8:	e79b      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0xa2>

08004dba <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dba:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dbe:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dc0:	f04f 0c01 	mov.w	ip, #1
 8004dc4:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 8004dc8:	ea23 030c 	bic.w	r3, r3, ip
 8004dcc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dce:	6a03      	ldr	r3, [r0, #32]
 8004dd0:	408a      	lsls	r2, r1
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	6202      	str	r2, [r0, #32]
}
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_TIM_PWM_Start>:
{
 8004dd8:	b510      	push	{r4, lr}
 8004dda:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ddc:	4608      	mov	r0, r1
 8004dde:	bb01      	cbnz	r1, 8004e22 <HAL_TIM_PWM_Start+0x4a>
 8004de0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d152      	bne.n	8004e90 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dea:	2302      	movs	r3, #2
 8004dec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004df0:	2201      	movs	r2, #1
 8004df2:	4601      	mov	r1, r0
 8004df4:	6820      	ldr	r0, [r4, #0]
 8004df6:	f7ff ffe0 	bl	8004dba <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	4a26      	ldr	r2, [pc, #152]	; (8004e98 <HAL_TIM_PWM_Start+0xc0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d034      	beq.n	8004e6c <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e06:	d038      	beq.n	8004e7a <HAL_TIM_PWM_Start+0xa2>
 8004e08:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <HAL_TIM_PWM_Start+0xc4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d035      	beq.n	8004e7a <HAL_TIM_PWM_Start+0xa2>
 8004e0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d031      	beq.n	8004e7a <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	f042 0201 	orr.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e035      	b.n	8004e8e <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e22:	2904      	cmp	r1, #4
 8004e24:	d00c      	beq.n	8004e40 <HAL_TIM_PWM_Start+0x68>
 8004e26:	2908      	cmp	r1, #8
 8004e28:	bf0c      	ite	eq
 8004e2a:	f894 3040 	ldrbeq.w	r3, [r4, #64]	; 0x40
 8004e2e:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	bf18      	it	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	b143      	cbz	r3, 8004e4e <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	e026      	b.n	8004e8e <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e40:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	bf18      	it	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	e7f5      	b.n	8004e3a <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4e:	2804      	cmp	r0, #4
 8004e50:	d008      	beq.n	8004e64 <HAL_TIM_PWM_Start+0x8c>
 8004e52:	2808      	cmp	r0, #8
 8004e54:	f04f 0302 	mov.w	r3, #2
 8004e58:	bf0c      	ite	eq
 8004e5a:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8004e5e:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8004e62:	e7c5      	b.n	8004df0 <HAL_TIM_PWM_Start+0x18>
 8004e64:	2302      	movs	r3, #2
 8004e66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004e6a:	e7c1      	b.n	8004df0 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8004e6c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e72:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d1c3      	bne.n	8004e02 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	2a06      	cmp	r2, #6
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004e8c:	2000      	movs	r0, #0
}
 8004e8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e90:	2001      	movs	r0, #1
 8004e92:	e7fc      	b.n	8004e8e <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 8004e94:	2000      	movs	r0, #0
 8004e96:	e7fa      	b.n	8004e8e <HAL_TIM_PWM_Start+0xb6>
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40000400 	.word	0x40000400

08004ea0 <HAL_TIM_PWM_Stop>:
{
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	6800      	ldr	r0, [r0, #0]
 8004eaa:	f7ff ff86 	bl	8004dba <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_TIM_PWM_Stop+0x80>)
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d014      	beq.n	8004ee0 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	6a19      	ldr	r1, [r3, #32]
 8004eba:	f241 1211 	movw	r2, #4369	; 0x1111
 8004ebe:	4211      	tst	r1, r2
 8004ec0:	d108      	bne.n	8004ed4 <HAL_TIM_PWM_Stop+0x34>
 8004ec2:	6a19      	ldr	r1, [r3, #32]
 8004ec4:	f240 4244 	movw	r2, #1092	; 0x444
 8004ec8:	4211      	tst	r1, r2
 8004eca:	d103      	bne.n	8004ed4 <HAL_TIM_PWM_Stop+0x34>
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	b9ad      	cbnz	r5, 8004f02 <HAL_TIM_PWM_Stop+0x62>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004edc:	2000      	movs	r0, #0
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ee6:	421a      	tst	r2, r3
 8004ee8:	d1e5      	bne.n	8004eb6 <HAL_TIM_PWM_Stop+0x16>
 8004eea:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <HAL_TIM_PWM_Stop+0x80>)
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	f240 4344 	movw	r3, #1092	; 0x444
 8004ef2:	421a      	tst	r2, r3
 8004ef4:	d1df      	bne.n	8004eb6 <HAL_TIM_PWM_Stop+0x16>
 8004ef6:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <HAL_TIM_PWM_Stop+0x80>)
 8004ef8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004efa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004efe:	6453      	str	r3, [r2, #68]	; 0x44
 8004f00:	e7d9      	b.n	8004eb6 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f02:	2d04      	cmp	r5, #4
 8004f04:	d008      	beq.n	8004f18 <HAL_TIM_PWM_Stop+0x78>
 8004f06:	2d08      	cmp	r5, #8
 8004f08:	f04f 0301 	mov.w	r3, #1
 8004f0c:	bf0c      	ite	eq
 8004f0e:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8004f12:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8004f16:	e7e1      	b.n	8004edc <HAL_TIM_PWM_Stop+0x3c>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004f1e:	e7dd      	b.n	8004edc <HAL_TIM_PWM_Stop+0x3c>
 8004f20:	40012c00 	.word	0x40012c00

08004f24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f24:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004f28:	2a01      	cmp	r2, #1
 8004f2a:	d02b      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8004f2c:	b430      	push	{r4, r5}
 8004f2e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004f30:	2201      	movs	r2, #1
 8004f32:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f36:	2202      	movs	r2, #2
 8004f38:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f3c:	6804      	ldr	r4, [r0, #0]
 8004f3e:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f46:	680d      	ldr	r5, [r1, #0]
 8004f48:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4a:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4c0e      	ldr	r4, [pc, #56]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004f50:	42a2      	cmp	r2, r4
 8004f52:	d00a      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004f54:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004f58:	d007      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004f5a:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004f5e:	42a2      	cmp	r2, r4
 8004f60:	d003      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004f62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004f66:	42a2      	cmp	r2, r4
 8004f68:	d104      	bne.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6e:	6849      	ldr	r1, [r1, #4]
 8004f70:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f72:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8004f80:	bc30      	pop	{r4, r5}
 8004f82:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004f84:	2002      	movs	r0, #2
}
 8004f86:	4770      	bx	lr
 8004f88:	40012c00 	.word	0x40012c00

08004f8c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f8e:	4770      	bx	lr

08004f90 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f90:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f94:	b9a3      	cbnz	r3, 8004fc0 <osKernelInitialize+0x30>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	b9a3      	cbnz	r3, 8004fc6 <osKernelInitialize+0x36>
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <osKernelInitialize+0x44>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	2802      	cmp	r0, #2
 8004fa2:	d004      	beq.n	8004fae <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fa4:	b990      	cbnz	r0, 8004fcc <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004fa6:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <osKernelInitialize+0x44>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fac:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fae:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	bf14      	ite	ne
 8004fb6:	f06f 0005 	mvnne.w	r0, #5
 8004fba:	f04f 30ff 	moveq.w	r0, #4294967295
 8004fbe:	4770      	bx	lr
    stat = osErrorISR;
 8004fc0:	f06f 0005 	mvn.w	r0, #5
 8004fc4:	4770      	bx	lr
 8004fc6:	f06f 0005 	mvn.w	r0, #5
 8004fca:	4770      	bx	lr
      stat = osError;
 8004fcc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000d88 	.word	0x20000d88

08004fd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fd8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fda:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fde:	b9c3      	cbnz	r3, 8005012 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe4:	b9c3      	cbnz	r3, 8005018 <osKernelStart+0x40>
 8004fe6:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <osKernelStart+0x4c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d008      	beq.n	8005000 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d115      	bne.n	800501e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <osKernelStart+0x4c>)
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ff8:	f001 fc42 	bl	8006880 <vTaskStartScheduler>
      stat = osOK;
 8004ffc:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8004ffe:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005000:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf14      	ite	ne
 8005008:	f06f 0005 	mvnne.w	r0, #5
 800500c:	f04f 30ff 	moveq.w	r0, #4294967295
 8005010:	e7f5      	b.n	8004ffe <osKernelStart+0x26>
    stat = osErrorISR;
 8005012:	f06f 0005 	mvn.w	r0, #5
 8005016:	e7f2      	b.n	8004ffe <osKernelStart+0x26>
 8005018:	f06f 0005 	mvn.w	r0, #5
 800501c:	e7ef      	b.n	8004ffe <osKernelStart+0x26>
      stat = osError;
 800501e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8005022:	e7ec      	b.n	8004ffe <osKernelStart+0x26>
 8005024:	20000d88 	.word	0x20000d88

08005028 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800502c:	2400      	movs	r4, #0
 800502e:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005030:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005034:	b9d4      	cbnz	r4, 800506c <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005036:	f3ef 8310 	mrs	r3, PRIMASK
 800503a:	b9bb      	cbnz	r3, 800506c <osThreadNew+0x44>
 800503c:	4b2c      	ldr	r3, [pc, #176]	; (80050f0 <osThreadNew+0xc8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d00f      	beq.n	8005064 <osThreadNew+0x3c>
 8005044:	b190      	cbz	r0, 800506c <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005046:	2300      	movs	r3, #0
 8005048:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800504c:	2a00      	cmp	r2, #0
 800504e:	d03a      	beq.n	80050c6 <osThreadNew+0x9e>
      if (attr->name != NULL) {
 8005050:	6814      	ldr	r4, [r2, #0]
 8005052:	b174      	cbz	r4, 8005072 <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005054:	6993      	ldr	r3, [r2, #24]
 8005056:	b17b      	cbz	r3, 8005078 <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 8005058:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800505a:	3b01      	subs	r3, #1
 800505c:	2b37      	cmp	r3, #55	; 0x37
 800505e:	d90c      	bls.n	800507a <osThreadNew+0x52>
        return (NULL);
 8005060:	2000      	movs	r0, #0
 8005062:	e004      	b.n	800506e <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005064:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0eb      	beq.n	8005044 <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800506c:	9804      	ldr	r0, [sp, #16]
}
 800506e:	b007      	add	sp, #28
 8005070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 8005072:	f10d 0417 	add.w	r4, sp, #23
 8005076:	e7ed      	b.n	8005054 <osThreadNew+0x2c>
 8005078:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800507a:	6853      	ldr	r3, [r2, #4]
 800507c:	f013 0f01 	tst.w	r3, #1
 8005080:	d134      	bne.n	80050ec <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 8005082:	6953      	ldr	r3, [r2, #20]
 8005084:	b113      	cbz	r3, 800508c <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 8005086:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800508a:	e001      	b.n	8005090 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 800508c:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005090:	6896      	ldr	r6, [r2, #8]
 8005092:	b18e      	cbz	r6, 80050b8 <osThreadNew+0x90>
 8005094:	68d7      	ldr	r7, [r2, #12]
 8005096:	2f5f      	cmp	r7, #95	; 0x5f
 8005098:	d9e8      	bls.n	800506c <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800509a:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800509c:	2a00      	cmp	r2, #0
 800509e:	d0e5      	beq.n	800506c <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0e3      	beq.n	800506c <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050a4:	9602      	str	r6, [sp, #8]
 80050a6:	9201      	str	r2, [sp, #4]
 80050a8:	9500      	str	r5, [sp, #0]
 80050aa:	460b      	mov	r3, r1
 80050ac:	4662      	mov	r2, ip
 80050ae:	4621      	mov	r1, r4
 80050b0:	f001 fb7a 	bl	80067a8 <xTaskCreateStatic>
 80050b4:	9004      	str	r0, [sp, #16]
 80050b6:	e7d9      	b.n	800506c <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050b8:	68d3      	ldr	r3, [r2, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1d6      	bne.n	800506c <osThreadNew+0x44>
      if (mem == 0) {
 80050be:	6913      	ldr	r3, [r2, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1d3      	bne.n	800506c <osThreadNew+0x44>
 80050c4:	e004      	b.n	80050d0 <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 80050c6:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 80050c8:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 80050cc:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050d0:	ab04      	add	r3, sp, #16
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	9500      	str	r5, [sp, #0]
 80050d6:	460b      	mov	r3, r1
 80050d8:	fa1f f28c 	uxth.w	r2, ip
 80050dc:	4621      	mov	r1, r4
 80050de:	f001 fb9d 	bl	800681c <xTaskCreate>
 80050e2:	2801      	cmp	r0, #1
          hTask = NULL;
 80050e4:	bf1c      	itt	ne
 80050e6:	2300      	movne	r3, #0
 80050e8:	9304      	strne	r3, [sp, #16]
 80050ea:	e7bf      	b.n	800506c <osThreadNew+0x44>
        return (NULL);
 80050ec:	2000      	movs	r0, #0
 80050ee:	e7be      	b.n	800506e <osThreadNew+0x46>
 80050f0:	20000d88 	.word	0x20000d88

080050f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80050f4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80050fa:	b9a3      	cbnz	r3, 8005126 <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005100:	b9a3      	cbnz	r3, 800512c <osDelay+0x38>
 8005102:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <osDelay+0x40>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d002      	beq.n	8005110 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800510a:	b940      	cbnz	r0, 800511e <osDelay+0x2a>
    stat = osOK;
 800510c:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800510e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005110:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f8      	beq.n	800510a <osDelay+0x16>
    stat = osErrorISR;
 8005118:	f06f 0005 	mvn.w	r0, #5
 800511c:	e7f7      	b.n	800510e <osDelay+0x1a>
      vTaskDelay(ticks);
 800511e:	f001 fd6f 	bl	8006c00 <vTaskDelay>
    stat = osOK;
 8005122:	2000      	movs	r0, #0
 8005124:	e7f3      	b.n	800510e <osDelay+0x1a>
    stat = osErrorISR;
 8005126:	f06f 0005 	mvn.w	r0, #5
 800512a:	e7f0      	b.n	800510e <osDelay+0x1a>
 800512c:	f06f 0005 	mvn.w	r0, #5
 8005130:	e7ed      	b.n	800510e <osDelay+0x1a>
 8005132:	bf00      	nop
 8005134:	20000d88 	.word	0x20000d88

08005138 <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005138:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 800513c:	b9f2      	cbnz	r2, 800517c <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800513e:	b508      	push	{r3, lr}
 8005140:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005142:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8005146:	b9da      	cbnz	r2, 8005180 <osEventFlagsNew+0x48>
 8005148:	4a0e      	ldr	r2, [pc, #56]	; (8005184 <osEventFlagsNew+0x4c>)
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	2a02      	cmp	r2, #2
 800514e:	d007      	beq.n	8005160 <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 8005150:	b173      	cbz	r3, 8005170 <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005152:	6898      	ldr	r0, [r3, #8]
 8005154:	b150      	cbz	r0, 800516c <osEventFlagsNew+0x34>
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b1f      	cmp	r3, #31
 800515a:	d80c      	bhi.n	8005176 <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 800515c:	2000      	movs	r0, #0
 800515e:	e009      	b.n	8005174 <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005160:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8005164:	2a00      	cmp	r2, #0
 8005166:	d0f3      	beq.n	8005150 <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 8005168:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800516a:	e003      	b.n	8005174 <osEventFlagsNew+0x3c>
      if (mem == 0) {
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	b90b      	cbnz	r3, 8005174 <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 8005170:	f000 fb0b 	bl	800578a <xEventGroupCreate>
}
 8005174:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005176:	f000 fae3 	bl	8005740 <xEventGroupCreateStatic>
 800517a:	e7fb      	b.n	8005174 <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 800517c:	2000      	movs	r0, #0
}
 800517e:	4770      	bx	lr
  hEventGroup = NULL;
 8005180:	2000      	movs	r0, #0
 8005182:	e7f7      	b.n	8005174 <osEventFlagsNew+0x3c>
 8005184:	20000d88 	.word	0x20000d88

08005188 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005188:	b370      	cbz	r0, 80051e8 <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800518a:	b510      	push	{r4, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	460c      	mov	r4, r1
 8005190:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005192:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005196:	d12a      	bne.n	80051ee <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005198:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 800519c:	b94a      	cbnz	r2, 80051b2 <osEventFlagsSet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8210 	mrs	r2, PRIMASK
 80051a2:	b932      	cbnz	r2, 80051b2 <osEventFlagsSet+0x2a>
 80051a4:	4a16      	ldr	r2, [pc, #88]	; (8005200 <osEventFlagsSet+0x78>)
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	2a02      	cmp	r2, #2
 80051aa:	d118      	bne.n	80051de <osEventFlagsSet+0x56>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051ac:	f3ef 8211 	mrs	r2, BASEPRI
 80051b0:	b1aa      	cbz	r2, 80051de <osEventFlagsSet+0x56>
    yield = pdFALSE;
 80051b2:	2200      	movs	r2, #0
 80051b4:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80051b6:	aa01      	add	r2, sp, #4
 80051b8:	4621      	mov	r1, r4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fbca 	bl	8005954 <xEventGroupSetBitsFromISR>
 80051c0:	b9c8      	cbnz	r0, 80051f6 <osEventFlagsSet+0x6e>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 80051c2:	9b01      	ldr	r3, [sp, #4]
 80051c4:	b1d3      	cbz	r3, 80051fc <osEventFlagsSet+0x74>
 80051c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80051ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	f3bf 8f6f 	isb	sy
      rflags = flags;
 80051da:	4620      	mov	r0, r4
 80051dc:	e009      	b.n	80051f2 <osEventFlagsSet+0x6a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80051de:	4621      	mov	r1, r4
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fb6a 	bl	80058ba <xEventGroupSetBits>
 80051e6:	e004      	b.n	80051f2 <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 80051e8:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 80051ec:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80051ee:	f06f 0003 	mvn.w	r0, #3
}
 80051f2:	b002      	add	sp, #8
 80051f4:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 80051f6:	f06f 0002 	mvn.w	r0, #2
 80051fa:	e7fa      	b.n	80051f2 <osEventFlagsSet+0x6a>
      rflags = flags;
 80051fc:	4620      	mov	r0, r4
  return (rflags);
 80051fe:	e7f8      	b.n	80051f2 <osEventFlagsSet+0x6a>
 8005200:	20000d88 	.word	0x20000d88

08005204 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005204:	2800      	cmp	r0, #0
 8005206:	d037      	beq.n	8005278 <osEventFlagsWait+0x74>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	460c      	mov	r4, r1
 800520e:	461d      	mov	r5, r3
 8005210:	4684      	mov	ip, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005212:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005216:	d132      	bne.n	800527e <osEventFlagsWait+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005218:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 800521c:	bb9b      	cbnz	r3, 8005286 <osEventFlagsWait+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521e:	f3ef 8310 	mrs	r3, PRIMASK
 8005222:	bb9b      	cbnz	r3, 800528c <osEventFlagsWait+0x88>
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <osEventFlagsWait+0x90>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d015      	beq.n	8005258 <osEventFlagsWait+0x54>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 800522c:	f002 0601 	and.w	r6, r2, #1
      wait_all = pdTRUE;
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 8005230:	f082 0202 	eor.w	r2, r2, #2
      exit_clr = pdFAIL;
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005234:	9500      	str	r5, [sp, #0]
 8005236:	4633      	mov	r3, r6
 8005238:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800523c:	4621      	mov	r1, r4
 800523e:	4660      	mov	r0, ip
 8005240:	f000 fab1 	bl	80057a6 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 8005244:	b17e      	cbz	r6, 8005266 <osEventFlagsWait+0x62>
      if (flags != rflags) {
 8005246:	4284      	cmp	r4, r0
 8005248:	d01b      	beq.n	8005282 <osEventFlagsWait+0x7e>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 800524a:	2d00      	cmp	r5, #0
 800524c:	bf14      	ite	ne
 800524e:	f06f 0001 	mvnne.w	r0, #1
 8005252:	f06f 0002 	mvneq.w	r0, #2
 8005256:	e014      	b.n	8005282 <osEventFlagsWait+0x7e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005258:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0e5      	beq.n	800522c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorISR;
 8005260:	f06f 0005 	mvn.w	r0, #5
 8005264:	e00d      	b.n	8005282 <osEventFlagsWait+0x7e>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005266:	4204      	tst	r4, r0
 8005268:	d10b      	bne.n	8005282 <osEventFlagsWait+0x7e>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 800526a:	2d00      	cmp	r5, #0
 800526c:	bf14      	ite	ne
 800526e:	f06f 0001 	mvnne.w	r0, #1
 8005272:	f06f 0002 	mvneq.w	r0, #2
 8005276:	e004      	b.n	8005282 <osEventFlagsWait+0x7e>
    rflags = (uint32_t)osErrorParameter;
 8005278:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 800527c:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 800527e:	f06f 0003 	mvn.w	r0, #3
}
 8005282:	b002      	add	sp, #8
 8005284:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 8005286:	f06f 0005 	mvn.w	r0, #5
 800528a:	e7fa      	b.n	8005282 <osEventFlagsWait+0x7e>
 800528c:	f06f 0005 	mvn.w	r0, #5
 8005290:	e7f7      	b.n	8005282 <osEventFlagsWait+0x7e>
 8005292:	bf00      	nop
 8005294:	20000d88 	.word	0x20000d88

08005298 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005298:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800529a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d145      	bne.n	800532e <osMutexNew+0x96>
 80052a2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a4:	f3ef 8310 	mrs	r3, PRIMASK
 80052a8:	461e      	mov	r6, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d142      	bne.n	8005334 <osMutexNew+0x9c>
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <osMutexNew+0xa4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d00f      	beq.n	80052d6 <osMutexNew+0x3e>
    if (attr != NULL) {
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	d034      	beq.n	8005324 <osMutexNew+0x8c>
      type = attr->attr_bits;
 80052ba:	6863      	ldr	r3, [r4, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80052bc:	f013 0f08 	tst.w	r3, #8
 80052c0:	d13a      	bne.n	8005338 <osMutexNew+0xa0>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80052c2:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 80052c6:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80052c8:	68a1      	ldr	r1, [r4, #8]
 80052ca:	b151      	cbz	r1, 80052e2 <osMutexNew+0x4a>
 80052cc:	68e2      	ldr	r2, [r4, #12]
 80052ce:	2a4f      	cmp	r2, #79	; 0x4f
 80052d0:	d813      	bhi.n	80052fa <osMutexNew+0x62>
  hMutex = NULL;
 80052d2:	2500      	movs	r5, #0
 80052d4:	e02c      	b.n	8005330 <osMutexNew+0x98>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052d6:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0eb      	beq.n	80052b6 <osMutexNew+0x1e>
  hMutex = NULL;
 80052de:	2500      	movs	r5, #0
 80052e0:	e026      	b.n	8005330 <osMutexNew+0x98>
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 80052e2:	68e2      	ldr	r2, [r4, #12]
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	d1f4      	bne.n	80052d2 <osMutexNew+0x3a>
          if (rmtx != 0U) {
 80052e8:	b1e3      	cbz	r3, 8005324 <osMutexNew+0x8c>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80052ea:	2004      	movs	r0, #4
 80052ec:	f000 fde8 	bl	8005ec0 <xQueueCreateMutex>
 80052f0:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	d0ed      	beq.n	80052d2 <osMutexNew+0x3a>
        if (attr != NULL) {
 80052f6:	b93c      	cbnz	r4, 8005308 <osMutexNew+0x70>
 80052f8:	e007      	b.n	800530a <osMutexNew+0x72>
        if (rmtx != 0U) {
 80052fa:	b173      	cbz	r3, 800531a <osMutexNew+0x82>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80052fc:	2004      	movs	r0, #4
 80052fe:	f000 fdea 	bl	8005ed6 <xQueueCreateMutexStatic>
 8005302:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8005304:	2d00      	cmp	r5, #0
 8005306:	d0e4      	beq.n	80052d2 <osMutexNew+0x3a>
          name = attr->name;
 8005308:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 800530a:	4621      	mov	r1, r4
 800530c:	4628      	mov	r0, r5
 800530e:	f001 f873 	bl	80063f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005312:	b16e      	cbz	r6, 8005330 <osMutexNew+0x98>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005314:	f045 0501 	orr.w	r5, r5, #1
 8005318:	e00a      	b.n	8005330 <osMutexNew+0x98>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800531a:	2001      	movs	r0, #1
 800531c:	f000 fddb 	bl	8005ed6 <xQueueCreateMutexStatic>
 8005320:	4605      	mov	r5, r0
 8005322:	e7ef      	b.n	8005304 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateMutex ();
 8005324:	2001      	movs	r0, #1
 8005326:	f000 fdcb 	bl	8005ec0 <xQueueCreateMutex>
 800532a:	4605      	mov	r5, r0
 800532c:	e7e1      	b.n	80052f2 <osMutexNew+0x5a>
  hMutex = NULL;
 800532e:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8005330:	4628      	mov	r0, r5
 8005332:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8005334:	2500      	movs	r5, #0
 8005336:	e7fb      	b.n	8005330 <osMutexNew+0x98>
 8005338:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 800533a:	e7f9      	b.n	8005330 <osMutexNew+0x98>
 800533c:	20000d88 	.word	0x20000d88

08005340 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005340:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8005344:	bb72      	cbnz	r2, 80053a4 <osMutexAcquire+0x64>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005346:	b510      	push	{r4, lr}
 8005348:	4603      	mov	r3, r0
 800534a:	460c      	mov	r4, r1
 800534c:	f020 0001 	bic.w	r0, r0, #1
 8005350:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8005358:	bb3a      	cbnz	r2, 80053aa <osMutexAcquire+0x6a>
 800535a:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <osMutexAcquire+0x80>)
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	2a02      	cmp	r2, #2
 8005360:	d00d      	beq.n	800537e <osMutexAcquire+0x3e>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8005362:	b328      	cbz	r0, 80053b0 <osMutexAcquire+0x70>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8005364:	b193      	cbz	r3, 800538c <osMutexAcquire+0x4c>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005366:	4621      	mov	r1, r4
 8005368:	f000 ffcf 	bl	800630a <xQueueTakeMutexRecursive>
 800536c:	2801      	cmp	r0, #1
 800536e:	d022      	beq.n	80053b6 <osMutexAcquire+0x76>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8005370:	2c00      	cmp	r4, #0
 8005372:	bf14      	ite	ne
 8005374:	f06f 0001 	mvnne.w	r0, #1
 8005378:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 800537c:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800537e:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005382:	2a00      	cmp	r2, #0
 8005384:	d0ed      	beq.n	8005362 <osMutexAcquire+0x22>
    stat = osErrorISR;
 8005386:	f06f 0005 	mvn.w	r0, #5
 800538a:	e7f7      	b.n	800537c <osMutexAcquire+0x3c>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800538c:	4621      	mov	r1, r4
 800538e:	f000 fee9 	bl	8006164 <xQueueSemaphoreTake>
 8005392:	2801      	cmp	r0, #1
 8005394:	d011      	beq.n	80053ba <osMutexAcquire+0x7a>
          stat = osErrorResource;
 8005396:	2c00      	cmp	r4, #0
 8005398:	bf14      	ite	ne
 800539a:	f06f 0001 	mvnne.w	r0, #1
 800539e:	f06f 0002 	mvneq.w	r0, #2
 80053a2:	e7eb      	b.n	800537c <osMutexAcquire+0x3c>
    stat = osErrorISR;
 80053a4:	f06f 0005 	mvn.w	r0, #5
}
 80053a8:	4770      	bx	lr
    stat = osErrorISR;
 80053aa:	f06f 0005 	mvn.w	r0, #5
 80053ae:	e7e5      	b.n	800537c <osMutexAcquire+0x3c>
    stat = osErrorParameter;
 80053b0:	f06f 0003 	mvn.w	r0, #3
 80053b4:	e7e2      	b.n	800537c <osMutexAcquire+0x3c>
  stat = osOK;
 80053b6:	2000      	movs	r0, #0
 80053b8:	e7e0      	b.n	800537c <osMutexAcquire+0x3c>
 80053ba:	2000      	movs	r0, #0
 80053bc:	e7de      	b.n	800537c <osMutexAcquire+0x3c>
 80053be:	bf00      	nop
 80053c0:	20000d88 	.word	0x20000d88

080053c4 <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c4:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80053c8:	bb42      	cbnz	r2, 800541c <osMutexRelease+0x58>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80053ca:	b508      	push	{r3, lr}
 80053cc:	4603      	mov	r3, r0
 80053ce:	f020 0001 	bic.w	r0, r0, #1
 80053d2:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d6:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80053da:	bb12      	cbnz	r2, 8005422 <osMutexRelease+0x5e>
 80053dc:	4a14      	ldr	r2, [pc, #80]	; (8005430 <osMutexRelease+0x6c>)
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	2a02      	cmp	r2, #2
 80053e2:	d009      	beq.n	80053f8 <osMutexRelease+0x34>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80053e4:	b300      	cbz	r0, 8005428 <osMutexRelease+0x64>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80053e6:	b173      	cbz	r3, 8005406 <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80053e8:	f000 fd84 	bl	8005ef4 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 80053ec:	2801      	cmp	r0, #1
 80053ee:	bf0c      	ite	eq
 80053f0:	2000      	moveq	r0, #0
 80053f2:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 80053f6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053f8:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80053fc:	2a00      	cmp	r2, #0
 80053fe:	d0f1      	beq.n	80053e4 <osMutexRelease+0x20>
    stat = osErrorISR;
 8005400:	f06f 0005 	mvn.w	r0, #5
 8005404:	e7f7      	b.n	80053f6 <osMutexRelease+0x32>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005406:	2300      	movs	r3, #0
 8005408:	461a      	mov	r2, r3
 800540a:	4619      	mov	r1, r3
 800540c:	f000 fc80 	bl	8005d10 <xQueueGenericSend>
        stat = osErrorResource;
 8005410:	2801      	cmp	r0, #1
 8005412:	bf0c      	ite	eq
 8005414:	2000      	moveq	r0, #0
 8005416:	f06f 0002 	mvnne.w	r0, #2
 800541a:	e7ec      	b.n	80053f6 <osMutexRelease+0x32>
    stat = osErrorISR;
 800541c:	f06f 0005 	mvn.w	r0, #5
}
 8005420:	4770      	bx	lr
    stat = osErrorISR;
 8005422:	f06f 0005 	mvn.w	r0, #5
 8005426:	e7e6      	b.n	80053f6 <osMutexRelease+0x32>
    stat = osErrorParameter;
 8005428:	f06f 0003 	mvn.w	r0, #3
 800542c:	e7e3      	b.n	80053f6 <osMutexRelease+0x32>
 800542e:	bf00      	nop
 8005430:	20000d88 	.word	0x20000d88

08005434 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005438:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800543c:	2b00      	cmp	r3, #0
 800543e:	d146      	bne.n	80054ce <osSemaphoreNew+0x9a>
 8005440:	460e      	mov	r6, r1
 8005442:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005444:	f3ef 8310 	mrs	r3, PRIMASK
 8005448:	2b00      	cmp	r3, #0
 800544a:	d144      	bne.n	80054d6 <osSemaphoreNew+0xa2>
 800544c:	4b32      	ldr	r3, [pc, #200]	; (8005518 <osSemaphoreNew+0xe4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d00c      	beq.n	800546e <osSemaphoreNew+0x3a>
 8005454:	2800      	cmp	r0, #0
 8005456:	d040      	beq.n	80054da <osSemaphoreNew+0xa6>
 8005458:	42b0      	cmp	r0, r6
 800545a:	d340      	bcc.n	80054de <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 800545c:	2d00      	cmp	r5, #0
 800545e:	d04a      	beq.n	80054f6 <osSemaphoreNew+0xc2>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005460:	68ac      	ldr	r4, [r5, #8]
 8005462:	b154      	cbz	r4, 800547a <osSemaphoreNew+0x46>
 8005464:	68eb      	ldr	r3, [r5, #12]
 8005466:	2b4f      	cmp	r3, #79	; 0x4f
 8005468:	d83b      	bhi.n	80054e2 <osSemaphoreNew+0xae>
  hSemaphore = NULL;
 800546a:	2400      	movs	r4, #0
 800546c:	e030      	b.n	80054d0 <osSemaphoreNew+0x9c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800546e:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ee      	beq.n	8005454 <osSemaphoreNew+0x20>
  hSemaphore = NULL;
 8005476:	2400      	movs	r4, #0
 8005478:	e02a      	b.n	80054d0 <osSemaphoreNew+0x9c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800547a:	68eb      	ldr	r3, [r5, #12]
 800547c:	bb43      	cbnz	r3, 80054d0 <osSemaphoreNew+0x9c>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800547e:	2801      	cmp	r0, #1
 8005480:	d142      	bne.n	8005508 <osSemaphoreNew+0xd4>
        if (mem == 1) {
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005482:	2203      	movs	r2, #3
 8005484:	2100      	movs	r1, #0
 8005486:	2001      	movs	r0, #1
 8005488:	f000 fbd9 	bl	8005c3e <xQueueGenericCreate>
 800548c:	4604      	mov	r4, r0
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800548e:	b1fc      	cbz	r4, 80054d0 <osSemaphoreNew+0x9c>
 8005490:	b986      	cbnz	r6, 80054b4 <osSemaphoreNew+0x80>
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 8005492:	b105      	cbz	r5, 8005496 <osSemaphoreNew+0x62>
          name = attr->name;
 8005494:	682d      	ldr	r5, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005496:	4629      	mov	r1, r5
 8005498:	4620      	mov	r0, r4
 800549a:	f000 ffad 	bl	80063f8 <vQueueAddToRegistry>
 800549e:	e017      	b.n	80054d0 <osSemaphoreNew+0x9c>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80054a0:	2303      	movs	r3, #3
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	4623      	mov	r3, r4
 80054a6:	2200      	movs	r2, #0
 80054a8:	4611      	mov	r1, r2
 80054aa:	2001      	movs	r0, #1
 80054ac:	f000 fb75 	bl	8005b9a <xQueueGenericCreateStatic>
 80054b0:	4604      	mov	r4, r0
 80054b2:	e7ec      	b.n	800548e <osSemaphoreNew+0x5a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80054b4:	2300      	movs	r3, #0
 80054b6:	461a      	mov	r2, r3
 80054b8:	4619      	mov	r1, r3
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fc28 	bl	8005d10 <xQueueGenericSend>
 80054c0:	2801      	cmp	r0, #1
 80054c2:	d0e6      	beq.n	8005492 <osSemaphoreNew+0x5e>
            vSemaphoreDelete (hSemaphore);
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 ffc1 	bl	800644c <vQueueDelete>
            hSemaphore = NULL;
 80054ca:	2400      	movs	r4, #0
 80054cc:	e000      	b.n	80054d0 <osSemaphoreNew+0x9c>
  hSemaphore = NULL;
 80054ce:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80054d0:	4620      	mov	r0, r4
 80054d2:	b002      	add	sp, #8
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 80054d6:	2400      	movs	r4, #0
 80054d8:	e7fa      	b.n	80054d0 <osSemaphoreNew+0x9c>
 80054da:	2400      	movs	r4, #0
 80054dc:	e7f8      	b.n	80054d0 <osSemaphoreNew+0x9c>
 80054de:	2400      	movs	r4, #0
  return ((osSemaphoreId_t)hSemaphore);
 80054e0:	e7f6      	b.n	80054d0 <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 80054e2:	2801      	cmp	r0, #1
 80054e4:	d0dc      	beq.n	80054a0 <osSemaphoreNew+0x6c>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80054e6:	4622      	mov	r2, r4
 80054e8:	4631      	mov	r1, r6
 80054ea:	f000 fbd0 	bl	8005c8e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80054ee:	4604      	mov	r4, r0
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d1cf      	bne.n	8005494 <osSemaphoreNew+0x60>
 80054f4:	e7ec      	b.n	80054d0 <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 80054f6:	2801      	cmp	r0, #1
 80054f8:	d0c3      	beq.n	8005482 <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80054fa:	4631      	mov	r1, r6
 80054fc:	f000 fbea 	bl	8005cd4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8005500:	4604      	mov	r4, r0
 8005502:	2800      	cmp	r0, #0
 8005504:	d0e4      	beq.n	80054d0 <osSemaphoreNew+0x9c>
 8005506:	e7c6      	b.n	8005496 <osSemaphoreNew+0x62>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005508:	4631      	mov	r1, r6
 800550a:	f000 fbe3 	bl	8005cd4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800550e:	4604      	mov	r4, r0
 8005510:	2800      	cmp	r0, #0
 8005512:	d1bf      	bne.n	8005494 <osSemaphoreNew+0x60>
 8005514:	e7dc      	b.n	80054d0 <osSemaphoreNew+0x9c>
 8005516:	bf00      	nop
 8005518:	20000d88 	.word	0x20000d88

0800551c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800551c:	b530      	push	{r4, r5, lr}
 800551e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005520:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005524:	2b00      	cmp	r3, #0
 8005526:	d13e      	bne.n	80055a6 <osMessageQueueNew+0x8a>
 8005528:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552a:	f3ef 8310 	mrs	r3, PRIMASK
 800552e:	2b00      	cmp	r3, #0
 8005530:	d13d      	bne.n	80055ae <osMessageQueueNew+0x92>
 8005532:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <osMessageQueueNew+0xb4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d014      	beq.n	8005564 <osMessageQueueNew+0x48>
 800553a:	2800      	cmp	r0, #0
 800553c:	d039      	beq.n	80055b2 <osMessageQueueNew+0x96>
 800553e:	2900      	cmp	r1, #0
 8005540:	d039      	beq.n	80055b6 <osMessageQueueNew+0x9a>
    mem = -1;

    if (attr != NULL) {
 8005542:	2d00      	cmp	r5, #0
 8005544:	d03d      	beq.n	80055c2 <osMessageQueueNew+0xa6>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005546:	68ac      	ldr	r4, [r5, #8]
 8005548:	b194      	cbz	r4, 8005570 <osMessageQueueNew+0x54>
 800554a:	68eb      	ldr	r3, [r5, #12]
 800554c:	2b4f      	cmp	r3, #79	; 0x4f
 800554e:	d934      	bls.n	80055ba <osMessageQueueNew+0x9e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005550:	692a      	ldr	r2, [r5, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005552:	b3a2      	cbz	r2, 80055be <osMessageQueueNew+0xa2>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005554:	fb01 f300 	mul.w	r3, r1, r0
 8005558:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800555c:	459c      	cmp	ip, r3
 800555e:	d219      	bcs.n	8005594 <osMessageQueueNew+0x78>
  hQueue = NULL;
 8005560:	2400      	movs	r4, #0
 8005562:	e021      	b.n	80055a8 <osMessageQueueNew+0x8c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005564:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0e6      	beq.n	800553a <osMessageQueueNew+0x1e>
  hQueue = NULL;
 800556c:	2400      	movs	r4, #0
 800556e:	e01b      	b.n	80055a8 <osMessageQueueNew+0x8c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005570:	68eb      	ldr	r3, [r5, #12]
 8005572:	b9cb      	cbnz	r3, 80055a8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005574:	692a      	ldr	r2, [r5, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005576:	b9ba      	cbnz	r2, 80055a8 <osMessageQueueNew+0x8c>

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005578:	696b      	ldr	r3, [r5, #20]
  hQueue = NULL;
 800557a:	4614      	mov	r4, r2
      if (mem == 0) {
 800557c:	b9a3      	cbnz	r3, 80055a8 <osMessageQueueNew+0x8c>
        hQueue = xQueueCreate (msg_count, msg_size);
 800557e:	2200      	movs	r2, #0
 8005580:	f000 fb5d 	bl	8005c3e <xQueueGenericCreate>
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005584:	4604      	mov	r4, r0
 8005586:	b178      	cbz	r0, 80055a8 <osMessageQueueNew+0x8c>
      if (attr != NULL) {
        name = attr->name;
 8005588:	682d      	ldr	r5, [r5, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800558a:	4629      	mov	r1, r5
 800558c:	4620      	mov	r0, r4
 800558e:	f000 ff33 	bl	80063f8 <vQueueAddToRegistry>
 8005592:	e009      	b.n	80055a8 <osMessageQueueNew+0x8c>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005594:	2300      	movs	r3, #0
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4623      	mov	r3, r4
 800559a:	f000 fafe 	bl	8005b9a <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800559e:	4604      	mov	r4, r0
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d1f1      	bne.n	8005588 <osMessageQueueNew+0x6c>
 80055a4:	e000      	b.n	80055a8 <osMessageQueueNew+0x8c>
  hQueue = NULL;
 80055a6:	2400      	movs	r4, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80055a8:	4620      	mov	r0, r4
 80055aa:	b003      	add	sp, #12
 80055ac:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 80055ae:	2400      	movs	r4, #0
 80055b0:	e7fa      	b.n	80055a8 <osMessageQueueNew+0x8c>
 80055b2:	2400      	movs	r4, #0
 80055b4:	e7f8      	b.n	80055a8 <osMessageQueueNew+0x8c>
 80055b6:	2400      	movs	r4, #0
 80055b8:	e7f6      	b.n	80055a8 <osMessageQueueNew+0x8c>
 80055ba:	2400      	movs	r4, #0
 80055bc:	e7f4      	b.n	80055a8 <osMessageQueueNew+0x8c>
 80055be:	4614      	mov	r4, r2
  return ((osMessageQueueId_t)hQueue);
 80055c0:	e7f2      	b.n	80055a8 <osMessageQueueNew+0x8c>
        hQueue = xQueueCreate (msg_count, msg_size);
 80055c2:	2200      	movs	r2, #0
 80055c4:	f000 fb3b 	bl	8005c3e <xQueueGenericCreate>
    if (hQueue != NULL) {
 80055c8:	4604      	mov	r4, r0
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d0ec      	beq.n	80055a8 <osMessageQueueNew+0x8c>
 80055ce:	e7dc      	b.n	800558a <osMessageQueueNew+0x6e>
 80055d0:	20000d88 	.word	0x20000d88

080055d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80055d4:	b510      	push	{r4, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055da:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80055de:	b9cb      	cbnz	r3, 8005614 <osMessageQueuePut+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e0:	f3ef 8310 	mrs	r3, PRIMASK
 80055e4:	b9b3      	cbnz	r3, 8005614 <osMessageQueuePut+0x40>
 80055e6:	4b22      	ldr	r3, [pc, #136]	; (8005670 <osMessageQueuePut+0x9c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d00e      	beq.n	800560c <osMessageQueuePut+0x38>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80055ee:	b3b0      	cbz	r0, 800565e <osMessageQueuePut+0x8a>
 80055f0:	b3c1      	cbz	r1, 8005664 <osMessageQueuePut+0x90>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80055f2:	2300      	movs	r3, #0
 80055f4:	4622      	mov	r2, r4
 80055f6:	f000 fb8b 	bl	8005d10 <xQueueGenericSend>
 80055fa:	2801      	cmp	r0, #1
 80055fc:	d035      	beq.n	800566a <osMessageQueuePut+0x96>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 80055fe:	2c00      	cmp	r4, #0
 8005600:	bf14      	ite	ne
 8005602:	f06f 0001 	mvnne.w	r0, #1
 8005606:	f06f 0002 	mvneq.w	r0, #2
 800560a:	e01a      	b.n	8005642 <osMessageQueuePut+0x6e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800560c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ec      	beq.n	80055ee <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005614:	b1b8      	cbz	r0, 8005646 <osMessageQueuePut+0x72>
 8005616:	b1c9      	cbz	r1, 800564c <osMessageQueuePut+0x78>
 8005618:	b9dc      	cbnz	r4, 8005652 <osMessageQueuePut+0x7e>
      yield = pdFALSE;
 800561a:	2300      	movs	r3, #0
 800561c:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800561e:	aa01      	add	r2, sp, #4
 8005620:	f000 fc88 	bl	8005f34 <xQueueGenericSendFromISR>
 8005624:	2801      	cmp	r0, #1
 8005626:	d117      	bne.n	8005658 <osMessageQueuePut+0x84>
        portYIELD_FROM_ISR (yield);
 8005628:	9801      	ldr	r0, [sp, #4]
 800562a:	b150      	cbz	r0, 8005642 <osMessageQueuePut+0x6e>
 800562c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005634:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005640:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005642:	b002      	add	sp, #8
 8005644:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005646:	f06f 0003 	mvn.w	r0, #3
 800564a:	e7fa      	b.n	8005642 <osMessageQueuePut+0x6e>
 800564c:	f06f 0003 	mvn.w	r0, #3
 8005650:	e7f7      	b.n	8005642 <osMessageQueuePut+0x6e>
 8005652:	f06f 0003 	mvn.w	r0, #3
 8005656:	e7f4      	b.n	8005642 <osMessageQueuePut+0x6e>
        stat = osErrorResource;
 8005658:	f06f 0002 	mvn.w	r0, #2
 800565c:	e7f1      	b.n	8005642 <osMessageQueuePut+0x6e>
      stat = osErrorParameter;
 800565e:	f06f 0003 	mvn.w	r0, #3
 8005662:	e7ee      	b.n	8005642 <osMessageQueuePut+0x6e>
 8005664:	f06f 0003 	mvn.w	r0, #3
 8005668:	e7eb      	b.n	8005642 <osMessageQueuePut+0x6e>
  stat = osOK;
 800566a:	2000      	movs	r0, #0
 800566c:	e7e9      	b.n	8005642 <osMessageQueuePut+0x6e>
 800566e:	bf00      	nop
 8005670:	20000d88 	.word	0x20000d88

08005674 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005674:	b510      	push	{r4, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800567a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800567e:	b9c3      	cbnz	r3, 80056b2 <osMessageQueueGet+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005680:	f3ef 8310 	mrs	r3, PRIMASK
 8005684:	b9ab      	cbnz	r3, 80056b2 <osMessageQueueGet+0x3e>
 8005686:	4b21      	ldr	r3, [pc, #132]	; (800570c <osMessageQueueGet+0x98>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d00d      	beq.n	80056aa <osMessageQueueGet+0x36>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800568e:	b3a8      	cbz	r0, 80056fc <osMessageQueueGet+0x88>
 8005690:	b3b9      	cbz	r1, 8005702 <osMessageQueueGet+0x8e>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005692:	4622      	mov	r2, r4
 8005694:	f000 fcb4 	bl	8006000 <xQueueReceive>
 8005698:	2801      	cmp	r0, #1
 800569a:	d035      	beq.n	8005708 <osMessageQueueGet+0x94>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 800569c:	2c00      	cmp	r4, #0
 800569e:	bf14      	ite	ne
 80056a0:	f06f 0001 	mvnne.w	r0, #1
 80056a4:	f06f 0002 	mvneq.w	r0, #2
 80056a8:	e01a      	b.n	80056e0 <osMessageQueueGet+0x6c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056aa:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0ed      	beq.n	800568e <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056b2:	b1b8      	cbz	r0, 80056e4 <osMessageQueueGet+0x70>
 80056b4:	b1c9      	cbz	r1, 80056ea <osMessageQueueGet+0x76>
 80056b6:	b9dc      	cbnz	r4, 80056f0 <osMessageQueueGet+0x7c>
      yield = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80056bc:	aa01      	add	r2, sp, #4
 80056be:	f000 fe44 	bl	800634a <xQueueReceiveFromISR>
 80056c2:	2801      	cmp	r0, #1
 80056c4:	d117      	bne.n	80056f6 <osMessageQueueGet+0x82>
        portYIELD_FROM_ISR (yield);
 80056c6:	9801      	ldr	r0, [sp, #4]
 80056c8:	b150      	cbz	r0, 80056e0 <osMessageQueueGet+0x6c>
 80056ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80056de:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80056e0:	b002      	add	sp, #8
 80056e2:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 80056e4:	f06f 0003 	mvn.w	r0, #3
 80056e8:	e7fa      	b.n	80056e0 <osMessageQueueGet+0x6c>
 80056ea:	f06f 0003 	mvn.w	r0, #3
 80056ee:	e7f7      	b.n	80056e0 <osMessageQueueGet+0x6c>
 80056f0:	f06f 0003 	mvn.w	r0, #3
 80056f4:	e7f4      	b.n	80056e0 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
 80056f6:	f06f 0002 	mvn.w	r0, #2
 80056fa:	e7f1      	b.n	80056e0 <osMessageQueueGet+0x6c>
      stat = osErrorParameter;
 80056fc:	f06f 0003 	mvn.w	r0, #3
 8005700:	e7ee      	b.n	80056e0 <osMessageQueueGet+0x6c>
 8005702:	f06f 0003 	mvn.w	r0, #3
 8005706:	e7eb      	b.n	80056e0 <osMessageQueueGet+0x6c>
  stat = osOK;
 8005708:	2000      	movs	r0, #0
 800570a:	e7e9      	b.n	80056e0 <osMessageQueueGet+0x6c>
 800570c:	20000d88 	.word	0x20000d88

08005710 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <vApplicationGetIdleTaskMemory+0x10>)
 8005712:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005714:	4b03      	ldr	r3, [pc, #12]	; (8005724 <vApplicationGetIdleTaskMemory+0x14>)
 8005716:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	6013      	str	r3, [r2, #0]
}
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000d28 	.word	0x20000d28
 8005724:	20000b28 	.word	0x20000b28

08005728 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <vApplicationGetTimerTaskMemory+0x10>)
 800572a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800572c:	4b03      	ldr	r3, [pc, #12]	; (800573c <vApplicationGetTimerTaskMemory+0x14>)
 800572e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005734:	6013      	str	r3, [r2, #0]
}
 8005736:	4770      	bx	lr
 8005738:	2000118c 	.word	0x2000118c
 800573c:	20000d8c 	.word	0x20000d8c

08005740 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005740:	b180      	cbz	r0, 8005764 <xEventGroupCreateStatic+0x24>
	{
 8005742:	b510      	push	{r4, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005748:	2320      	movs	r3, #32
 800574a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800574c:	9b01      	ldr	r3, [sp, #4]
 800574e:	2b20      	cmp	r3, #32
 8005750:	d011      	beq.n	8005776 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	e7fe      	b.n	8005762 <xEventGroupCreateStatic+0x22>
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8005774:	e7fe      	b.n	8005774 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800577c:	f000 f8f4 	bl	8005968 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 8005784:	4620      	mov	r0, r4
 8005786:	b002      	add	sp, #8
 8005788:	bd10      	pop	{r4, pc}

0800578a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800578a:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800578c:	2020      	movs	r0, #32
 800578e:	f002 f8bb 	bl	8007908 <pvPortMalloc>

		if( pxEventBits != NULL )
 8005792:	4604      	mov	r4, r0
 8005794:	b128      	cbz	r0, 80057a2 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8005796:	2500      	movs	r5, #0
 8005798:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800579c:	f000 f8e4 	bl	8005968 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80057a0:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80057a2:	4620      	mov	r0, r4
 80057a4:	bd38      	pop	{r3, r4, r5, pc}

080057a6 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80057a6:	b188      	cbz	r0, 80057cc <xEventGroupWaitBits+0x26>
{
 80057a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ac:	460c      	mov	r4, r1
 80057ae:	4616      	mov	r6, r2
 80057b0:	461d      	mov	r5, r3
 80057b2:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80057b4:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80057b8:	d011      	beq.n	80057de <xEventGroupWaitBits+0x38>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	e7fe      	b.n	80057ca <xEventGroupWaitBits+0x24>
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80057dc:	e7fe      	b.n	80057dc <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 80057de:	b941      	cbnz	r1, 80057f2 <xEventGroupWaitBits+0x4c>
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	e7fe      	b.n	80057f0 <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057f2:	f001 fbbf 	bl	8006f74 <xTaskGetSchedulerState>
 80057f6:	b950      	cbnz	r0, 800580e <xEventGroupWaitBits+0x68>
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	b143      	cbz	r3, 800580e <xEventGroupWaitBits+0x68>
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	e7fe      	b.n	800580c <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 800580e:	f001 f87d 	bl	800690c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005812:	f8d7 8000 	ldr.w	r8, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8005816:	bb5d      	cbnz	r5, 8005870 <xEventGroupWaitBits+0xca>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005818:	ea14 0f08 	tst.w	r4, r8
 800581c:	bf14      	ite	ne
 800581e:	2001      	movne	r0, #1
 8005820:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 8005822:	bb58      	cbnz	r0, 800587c <xEventGroupWaitBits+0xd6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005824:	9b06      	ldr	r3, [sp, #24]
 8005826:	b36b      	cbz	r3, 8005884 <xEventGroupWaitBits+0xde>
			if( xClearOnExit != pdFALSE )
 8005828:	1e31      	subs	r1, r6, #0
 800582a:	bf18      	it	ne
 800582c:	2101      	movne	r1, #1
 800582e:	0609      	lsls	r1, r1, #24
			if( xWaitForAllBits != pdFALSE )
 8005830:	b10d      	cbz	r5, 8005836 <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005832:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005836:	9a06      	ldr	r2, [sp, #24]
 8005838:	4321      	orrs	r1, r4
 800583a:	1d38      	adds	r0, r7, #4
 800583c:	f001 fa6e 	bl	8006d1c <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8005840:	f001 f90c 	bl	8006a5c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005844:	b948      	cbnz	r0, 800585a <xEventGroupWaitBits+0xb4>
			portYIELD_WITHIN_API();
 8005846:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 800585a:	f001 fc7f 	bl	800715c <uxTaskResetEventItemValue>
 800585e:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005860:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005864:	d011      	beq.n	800588a <xEventGroupWaitBits+0xe4>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005866:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
}
 800586a:	4640      	mov	r0, r8
 800586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005870:	ea34 0308 	bics.w	r3, r4, r8
 8005874:	bf0c      	ite	eq
 8005876:	2001      	moveq	r0, #1
 8005878:	2000      	movne	r0, #0
 800587a:	e7d2      	b.n	8005822 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 800587c:	b116      	cbz	r6, 8005884 <xEventGroupWaitBits+0xde>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800587e:	ea28 0404 	bic.w	r4, r8, r4
 8005882:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8005884:	f001 f8ea 	bl	8006a5c <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8005888:	e7ef      	b.n	800586a <xEventGroupWaitBits+0xc4>
			taskENTER_CRITICAL();
 800588a:	f001 fef3 	bl	8007674 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 800588e:	f8d7 8000 	ldr.w	r8, [r7]
	if( xWaitForAllBits == pdFALSE )
 8005892:	b965      	cbnz	r5, 80058ae <xEventGroupWaitBits+0x108>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005894:	ea14 0f08 	tst.w	r4, r8
 8005898:	bf14      	ite	ne
 800589a:	2301      	movne	r3, #1
 800589c:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800589e:	b11b      	cbz	r3, 80058a8 <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80058a0:	b116      	cbz	r6, 80058a8 <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80058a2:	ea28 0404 	bic.w	r4, r8, r4
 80058a6:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 80058a8:	f001 ff06 	bl	80076b8 <vPortExitCritical>
 80058ac:	e7db      	b.n	8005866 <xEventGroupWaitBits+0xc0>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80058ae:	ea34 0308 	bics.w	r3, r4, r8
 80058b2:	bf0c      	ite	eq
 80058b4:	2301      	moveq	r3, #1
 80058b6:	2300      	movne	r3, #0
 80058b8:	e7f1      	b.n	800589e <xEventGroupWaitBits+0xf8>

080058ba <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 80058ba:	b178      	cbz	r0, 80058dc <xEventGroupSetBits+0x22>
{
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c0:	460e      	mov	r6, r1
 80058c2:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80058c4:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80058c8:	d011      	beq.n	80058ee <xEventGroupSetBits+0x34>
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	e7fe      	b.n	80058da <xEventGroupSetBits+0x20>
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80058ec:	e7fe      	b.n	80058ec <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ee:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 80058f2:	f001 f80b 	bl	800690c <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80058f6:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	4333      	orrs	r3, r6
 80058fc:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 80058fe:	42a7      	cmp	r7, r4
 8005900:	d118      	bne.n	8005934 <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005902:	682b      	ldr	r3, [r5, #0]
 8005904:	ea23 0308 	bic.w	r3, r3, r8
 8005908:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800590a:	f001 f8a7 	bl	8006a5c <xTaskResumeAll>
}
 800590e:	6828      	ldr	r0, [r5, #0]
 8005910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005914:	6829      	ldr	r1, [r5, #0]
 8005916:	ea32 0101 	bics.w	r1, r2, r1
 800591a:	d109      	bne.n	8005930 <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800591c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 8005920:	bf18      	it	ne
 8005922:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005926:	6829      	ldr	r1, [r5, #0]
 8005928:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800592c:	f001 fa84 	bl	8006e38 <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 8005930:	42a7      	cmp	r7, r4
 8005932:	d0e6      	beq.n	8005902 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 8005934:	4620      	mov	r0, r4
 8005936:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005938:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800593a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800593e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005942:	d1e7      	bne.n	8005914 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005944:	6829      	ldr	r1, [r5, #0]
 8005946:	420a      	tst	r2, r1
 8005948:	d1e8      	bne.n	800591c <xEventGroupSetBits+0x62>
 800594a:	e7f1      	b.n	8005930 <xEventGroupSetBits+0x76>

0800594c <vEventGroupSetBitsCallback>:
{
 800594c:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800594e:	f7ff ffb4 	bl	80058ba <xEventGroupSetBits>
}
 8005952:	bd08      	pop	{r3, pc}

08005954 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005954:	b508      	push	{r3, lr}
 8005956:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005958:	460a      	mov	r2, r1
 800595a:	4601      	mov	r1, r0
 800595c:	4801      	ldr	r0, [pc, #4]	; (8005964 <xEventGroupSetBitsFromISR+0x10>)
 800595e:	f001 fe1b 	bl	8007598 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005962:	bd08      	pop	{r3, pc}
 8005964:	0800594d 	.word	0x0800594d

08005968 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005968:	f100 0308 	add.w	r3, r0, #8
 800596c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800596e:	f04f 32ff 	mov.w	r2, #4294967295
 8005972:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005974:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005976:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800597c:	4770      	bx	lr

0800597e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005982:	4770      	bx	lr

08005984 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005984:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005986:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800598c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800598e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005990:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	6003      	str	r3, [r0, #0]
}
 8005998:	4770      	bx	lr

0800599a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800599a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800599c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800599e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80059a2:	d011      	beq.n	80059c8 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a4:	f100 0308 	add.w	r3, r0, #8
 80059a8:	461c      	mov	r4, r3
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	42aa      	cmp	r2, r5
 80059b0:	d9fa      	bls.n	80059a8 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059b2:	6863      	ldr	r3, [r4, #4]
 80059b4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059b6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059b8:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80059ba:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80059bc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80059be:	6803      	ldr	r3, [r0, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	6003      	str	r3, [r0, #0]
}
 80059c4:	bc30      	pop	{r4, r5}
 80059c6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80059c8:	6904      	ldr	r4, [r0, #16]
 80059ca:	e7f2      	b.n	80059b2 <vListInsert+0x18>

080059cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80059cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059ce:	6841      	ldr	r1, [r0, #4]
 80059d0:	6882      	ldr	r2, [r0, #8]
 80059d2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059d4:	6841      	ldr	r1, [r0, #4]
 80059d6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059dc:	bf04      	itt	eq
 80059de:	6882      	ldreq	r2, [r0, #8]
 80059e0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80059e2:	2200      	movs	r2, #0
 80059e4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	3a01      	subs	r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059ec:	6818      	ldr	r0, [r3, #0]
}
 80059ee:	4770      	bx	lr

080059f0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059f0:	b510      	push	{r4, lr}
 80059f2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059f4:	f001 fe3e 	bl	8007674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80059fa:	f001 fe5d 	bl	80076b8 <vPortExitCritical>

	return xReturn;
}
 80059fe:	fab4 f084 	clz	r0, r4
 8005a02:	0940      	lsrs	r0, r0, #5
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <prvCopyDataToQueue>:
{
 8005a06:	b570      	push	{r4, r5, r6, lr}
 8005a08:	4604      	mov	r4, r0
 8005a0a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a0c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005a10:	b95a      	cbnz	r2, 8005a2a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a12:	6803      	ldr	r3, [r0, #0]
 8005a14:	b11b      	cbz	r3, 8005a1e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005a16:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a18:	3601      	adds	r6, #1
 8005a1a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a1e:	6840      	ldr	r0, [r0, #4]
 8005a20:	f001 fb04 	bl	800702c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	6063      	str	r3, [r4, #4]
 8005a28:	e7f6      	b.n	8005a18 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005a2a:	b96d      	cbnz	r5, 8005a48 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a2c:	6880      	ldr	r0, [r0, #8]
 8005a2e:	f002 fa5a 	bl	8007ee6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a32:	68a3      	ldr	r3, [r4, #8]
 8005a34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a36:	4413      	add	r3, r2
 8005a38:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a3a:	6862      	ldr	r2, [r4, #4]
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d319      	bcc.n	8005a74 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005a44:	4628      	mov	r0, r5
 8005a46:	e7e7      	b.n	8005a18 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a48:	68c0      	ldr	r0, [r0, #12]
 8005a4a:	f002 fa4c 	bl	8007ee6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005a4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a50:	4251      	negs	r1, r2
 8005a52:	68e3      	ldr	r3, [r4, #12]
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a58:	6822      	ldr	r2, [r4, #0]
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d202      	bcs.n	8005a64 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	440b      	add	r3, r1
 8005a62:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005a64:	2d02      	cmp	r5, #2
 8005a66:	d001      	beq.n	8005a6c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e7d5      	b.n	8005a18 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a6c:	b126      	cbz	r6, 8005a78 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005a6e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005a70:	2000      	movs	r0, #0
 8005a72:	e7d1      	b.n	8005a18 <prvCopyDataToQueue+0x12>
 8005a74:	4628      	mov	r0, r5
 8005a76:	e7cf      	b.n	8005a18 <prvCopyDataToQueue+0x12>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e7cd      	b.n	8005a18 <prvCopyDataToQueue+0x12>

08005a7c <prvCopyDataFromQueue>:
{
 8005a7c:	b508      	push	{r3, lr}
 8005a7e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005a82:	b162      	cbz	r2, 8005a9e <prvCopyDataFromQueue+0x22>
 8005a84:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a86:	68d9      	ldr	r1, [r3, #12]
 8005a88:	4411      	add	r1, r2
 8005a8a:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a8c:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005a90:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a92:	bf24      	itt	cs
 8005a94:	6819      	ldrcs	r1, [r3, #0]
 8005a96:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a98:	68d9      	ldr	r1, [r3, #12]
 8005a9a:	f002 fa24 	bl	8007ee6 <memcpy>
}
 8005a9e:	bd08      	pop	{r3, pc}

08005aa0 <prvUnlockQueue>:
{
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005aa4:	f001 fde6 	bl	8007674 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005aa8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005aac:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005aae:	2c00      	cmp	r4, #0
 8005ab0:	dd0f      	ble.n	8005ad2 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab2:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005ab6:	e002      	b.n	8005abe <prvUnlockQueue+0x1e>
			--cTxLock;
 8005ab8:	3c01      	subs	r4, #1
 8005aba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005abc:	b14c      	cbz	r4, 8005ad2 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ac0:	b13b      	cbz	r3, 8005ad2 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f001 f974 	bl	8006db0 <xTaskRemoveFromEventList>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d0f5      	beq.n	8005ab8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005acc:	f001 fa46 	bl	8006f5c <vTaskMissedYield>
 8005ad0:	e7f2      	b.n	8005ab8 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005ad2:	23ff      	movs	r3, #255	; 0xff
 8005ad4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005ad8:	f001 fdee 	bl	80076b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005adc:	f001 fdca 	bl	8007674 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005ae0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005ae4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ae6:	2c00      	cmp	r4, #0
 8005ae8:	dd0f      	ble.n	8005b0a <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aea:	f105 0610 	add.w	r6, r5, #16
 8005aee:	e002      	b.n	8005af6 <prvUnlockQueue+0x56>
				--cRxLock;
 8005af0:	3c01      	subs	r4, #1
 8005af2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005af4:	b14c      	cbz	r4, 8005b0a <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005af6:	692b      	ldr	r3, [r5, #16]
 8005af8:	b13b      	cbz	r3, 8005b0a <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005afa:	4630      	mov	r0, r6
 8005afc:	f001 f958 	bl	8006db0 <xTaskRemoveFromEventList>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d0f5      	beq.n	8005af0 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8005b04:	f001 fa2a 	bl	8006f5c <vTaskMissedYield>
 8005b08:	e7f2      	b.n	8005af0 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8005b0a:	23ff      	movs	r3, #255	; 0xff
 8005b0c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005b10:	f001 fdd2 	bl	80076b8 <vPortExitCritical>
}
 8005b14:	bd70      	pop	{r4, r5, r6, pc}

08005b16 <xQueueGenericReset>:
{
 8005b16:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005b18:	b1e0      	cbz	r0, 8005b54 <xQueueGenericReset+0x3e>
 8005b1a:	460d      	mov	r5, r1
 8005b1c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005b1e:	f001 fda9 	bl	8007674 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005b26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	18d0      	adds	r0, r2, r3
 8005b2e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b30:	2000      	movs	r0, #0
 8005b32:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b34:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005b36:	1a5b      	subs	r3, r3, r1
 8005b38:	441a      	add	r2, r3
 8005b3a:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b3c:	23ff      	movs	r3, #255	; 0xff
 8005b3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005b46:	b9fd      	cbnz	r5, 8005b88 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	b963      	cbnz	r3, 8005b66 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005b4c:	f001 fdb4 	bl	80076b8 <vPortExitCritical>
}
 8005b50:	2001      	movs	r0, #1
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005b64:	e7fe      	b.n	8005b64 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b66:	f104 0010 	add.w	r0, r4, #16
 8005b6a:	f001 f921 	bl	8006db0 <xTaskRemoveFromEventList>
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d0ec      	beq.n	8005b4c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005b72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	e7e1      	b.n	8005b4c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b88:	f104 0010 	add.w	r0, r4, #16
 8005b8c:	f7ff feec 	bl	8005968 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b94:	f7ff fee8 	bl	8005968 <vListInitialise>
 8005b98:	e7d8      	b.n	8005b4c <xQueueGenericReset+0x36>

08005b9a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b9a:	b940      	cbnz	r0, 8005bae <xQueueGenericCreateStatic+0x14>
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	e7fe      	b.n	8005bac <xQueueGenericCreateStatic+0x12>
	{
 8005bae:	b510      	push	{r4, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	461c      	mov	r4, r3
 8005bb4:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8005bb6:	b154      	cbz	r4, 8005bce <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bb8:	b192      	cbz	r2, 8005be0 <xQueueGenericCreateStatic+0x46>
 8005bba:	b9d9      	cbnz	r1, 8005bf4 <xQueueGenericCreateStatic+0x5a>
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	e7fe      	b.n	8005bcc <xQueueGenericCreateStatic+0x32>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005bde:	e7fe      	b.n	8005bde <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005be0:	b1b1      	cbz	r1, 8005c10 <xQueueGenericCreateStatic+0x76>
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	e7fe      	b.n	8005bf2 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bf4:	2050      	movs	r0, #80	; 0x50
 8005bf6:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bf8:	9801      	ldr	r0, [sp, #4]
 8005bfa:	2850      	cmp	r0, #80	; 0x50
 8005bfc:	d00e      	beq.n	8005c1c <xQueueGenericCreateStatic+0x82>
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	e7fe      	b.n	8005c0e <xQueueGenericCreateStatic+0x74>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c10:	2250      	movs	r2, #80	; 0x50
 8005c12:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c14:	9a01      	ldr	r2, [sp, #4]
 8005c16:	2a50      	cmp	r2, #80	; 0x50
 8005c18:	d1f1      	bne.n	8005bfe <xQueueGenericCreateStatic+0x64>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c1a:	4622      	mov	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 8005c22:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005c24:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c26:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c28:	4601      	mov	r1, r0
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f7ff ff73 	bl	8005b16 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005c30:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005c34:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005c38:	4620      	mov	r0, r4
 8005c3a:	b002      	add	sp, #8
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <xQueueGenericCreate>:
	{
 8005c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c40:	b940      	cbnz	r0, 8005c54 <xQueueGenericCreate+0x16>
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	e7fe      	b.n	8005c52 <xQueueGenericCreate+0x14>
 8005c54:	460c      	mov	r4, r1
 8005c56:	4616      	mov	r6, r2
 8005c58:	4607      	mov	r7, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005c5e:	3050      	adds	r0, #80	; 0x50
 8005c60:	f001 fe52 	bl	8007908 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005c64:	4605      	mov	r5, r0
 8005c66:	b170      	cbz	r0, 8005c86 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c6e:	b164      	cbz	r4, 8005c8a <xQueueGenericCreate+0x4c>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005c70:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c74:	602b      	str	r3, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005c76:	63ef      	str	r7, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c78:	642c      	str	r4, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7ff ff4a 	bl	8005b16 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005c82:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
	}
 8005c86:	4628      	mov	r0, r5
 8005c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	e7f2      	b.n	8005c74 <xQueueGenericCreate+0x36>

08005c8e <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8005c8e:	b940      	cbnz	r0, 8005ca2 <xQueueCreateCountingSemaphoreStatic+0x14>
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	e7fe      	b.n	8005ca0 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ca8:	4288      	cmp	r0, r1
 8005caa:	d208      	bcs.n	8005cbe <xQueueCreateCountingSemaphoreStatic+0x30>
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	e7fe      	b.n	8005cbc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	f7ff ff67 	bl	8005b9a <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005ccc:	b100      	cbz	r0, 8005cd0 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005cce:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005cd0:	b002      	add	sp, #8
 8005cd2:	bd10      	pop	{r4, pc}

08005cd4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8005cd4:	b940      	cbnz	r0, 8005ce8 <xQueueCreateCountingSemaphore+0x14>
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	e7fe      	b.n	8005ce6 <xQueueCreateCountingSemaphore+0x12>
	{
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cec:	4288      	cmp	r0, r1
 8005cee:	d208      	bcs.n	8005d02 <xQueueCreateCountingSemaphore+0x2e>
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	e7fe      	b.n	8005d00 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d02:	2202      	movs	r2, #2
 8005d04:	2100      	movs	r1, #0
 8005d06:	f7ff ff9a 	bl	8005c3e <xQueueGenericCreate>
		if( xHandle != NULL )
 8005d0a:	b100      	cbz	r0, 8005d0e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d0c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005d0e:	bd10      	pop	{r4, pc}

08005d10 <xQueueGenericSend>:
{
 8005d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d14:	b085      	sub	sp, #20
 8005d16:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005d18:	b188      	cbz	r0, 8005d3e <xQueueGenericSend+0x2e>
 8005d1a:	460e      	mov	r6, r1
 8005d1c:	461d      	mov	r5, r3
 8005d1e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d20:	b1b1      	cbz	r1, 8005d50 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d22:	2d02      	cmp	r5, #2
 8005d24:	d120      	bne.n	8005d68 <xQueueGenericSend+0x58>
 8005d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d01d      	beq.n	8005d68 <xQueueGenericSend+0x58>
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	e7fe      	b.n	8005d3c <xQueueGenericSend+0x2c>
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005d4e:	e7fe      	b.n	8005d4e <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0e5      	beq.n	8005d22 <xQueueGenericSend+0x12>
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	e7fe      	b.n	8005d66 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d68:	f001 f904 	bl	8006f74 <xTaskGetSchedulerState>
 8005d6c:	b950      	cbnz	r0, 8005d84 <xQueueGenericSend+0x74>
 8005d6e:	9b01      	ldr	r3, [sp, #4]
 8005d70:	b163      	cbz	r3, 8005d8c <xQueueGenericSend+0x7c>
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	e7fe      	b.n	8005d82 <xQueueGenericSend+0x72>
 8005d84:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005d88:	2700      	movs	r7, #0
 8005d8a:	e03a      	b.n	8005e02 <xQueueGenericSend+0xf2>
 8005d8c:	f04f 0800 	mov.w	r8, #0
 8005d90:	e7fa      	b.n	8005d88 <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d92:	462a      	mov	r2, r5
 8005d94:	4631      	mov	r1, r6
 8005d96:	4620      	mov	r0, r4
 8005d98:	f7ff fe35 	bl	8005a06 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d9e:	b983      	cbnz	r3, 8005dc2 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8005da0:	b148      	cbz	r0, 8005db6 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8005da2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005daa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005db6:	f001 fc7f 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 8005dba:	2001      	movs	r0, #1
}
 8005dbc:	b005      	add	sp, #20
 8005dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005dc6:	f000 fff3 	bl	8006db0 <xTaskRemoveFromEventList>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d0f3      	beq.n	8005db6 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 8005dce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	e7e8      	b.n	8005db6 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8005de4:	f001 fc68 	bl	80076b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8005de8:	2000      	movs	r0, #0
 8005dea:	e7e7      	b.n	8005dbc <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dec:	a802      	add	r0, sp, #8
 8005dee:	f001 f867 	bl	8006ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005df2:	e014      	b.n	8005e1e <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8005df4:	4620      	mov	r0, r4
 8005df6:	f7ff fe53 	bl	8005aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dfa:	f000 fe2f 	bl	8006a5c <xTaskResumeAll>
 8005dfe:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8005e02:	f001 fc37 	bl	8007674 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d3c1      	bcc.n	8005d92 <xQueueGenericSend+0x82>
 8005e0e:	2d02      	cmp	r5, #2
 8005e10:	d0bf      	beq.n	8005d92 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e12:	9b01      	ldr	r3, [sp, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0e5      	beq.n	8005de4 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8005e18:	f1b8 0f00 	cmp.w	r8, #0
 8005e1c:	d0e6      	beq.n	8005dec <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 8005e1e:	f001 fc4b 	bl	80076b8 <vPortExitCritical>
		vTaskSuspendAll();
 8005e22:	f000 fd73 	bl	800690c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e26:	f001 fc25 	bl	8007674 <vPortEnterCritical>
 8005e2a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005e2e:	b252      	sxtb	r2, r2
 8005e30:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e34:	bf08      	it	eq
 8005e36:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005e3a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8005e3e:	b252      	sxtb	r2, r2
 8005e40:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e44:	bf08      	it	eq
 8005e46:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005e4a:	f001 fc35 	bl	80076b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e4e:	a901      	add	r1, sp, #4
 8005e50:	a802      	add	r0, sp, #8
 8005e52:	f001 f841 	bl	8006ed8 <xTaskCheckForTimeOut>
 8005e56:	bb00      	cbnz	r0, 8005e9a <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e58:	f001 fc0c 	bl	8007674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e5c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8005e60:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005e64:	f001 fc28 	bl	80076b8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e68:	45c1      	cmp	r9, r8
 8005e6a:	d1c3      	bne.n	8005df4 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e6c:	9901      	ldr	r1, [sp, #4]
 8005e6e:	f104 0010 	add.w	r0, r4, #16
 8005e72:	f000 ff3b 	bl	8006cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e76:	4620      	mov	r0, r4
 8005e78:	f7ff fe12 	bl	8005aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e7c:	f000 fdee 	bl	8006a5c <xTaskResumeAll>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d1bc      	bne.n	8005dfe <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8005e84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	e7b1      	b.n	8005dfe <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff fe00 	bl	8005aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ea0:	f000 fddc 	bl	8006a5c <xTaskResumeAll>
			return errQUEUE_FULL;
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	e789      	b.n	8005dbc <xQueueGenericSend+0xac>

08005ea8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8005ea8:	b148      	cbz	r0, 8005ebe <prvInitialiseMutex+0x16>
	{
 8005eaa:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8005eac:	2100      	movs	r1, #0
 8005eae:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005eb0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005eb2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	f7ff ff2a 	bl	8005d10 <xQueueGenericSend>
	}
 8005ebc:	bd08      	pop	{r3, pc}
 8005ebe:	4770      	bx	lr

08005ec0 <xQueueCreateMutex>:
	{
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4602      	mov	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	f7ff feb9 	bl	8005c3e <xQueueGenericCreate>
 8005ecc:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8005ece:	f7ff ffeb 	bl	8005ea8 <prvInitialiseMutex>
	}
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	bd10      	pop	{r4, pc}

08005ed6 <xQueueCreateMutexStatic>:
	{
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005edc:	9000      	str	r0, [sp, #0]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	f7ff fe59 	bl	8005b9a <xQueueGenericCreateStatic>
 8005ee8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8005eea:	f7ff ffdd 	bl	8005ea8 <prvInitialiseMutex>
	}
 8005eee:	4620      	mov	r0, r4
 8005ef0:	b002      	add	sp, #8
 8005ef2:	bd10      	pop	{r4, pc}

08005ef4 <xQueueGiveMutexRecursive>:
	{
 8005ef4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8005ef6:	b138      	cbz	r0, 8005f08 <xQueueGiveMutexRecursive+0x14>
 8005ef8:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005efa:	6845      	ldr	r5, [r0, #4]
 8005efc:	f001 f834 	bl	8006f68 <xTaskGetCurrentTaskHandle>
 8005f00:	4285      	cmp	r5, r0
 8005f02:	d00a      	beq.n	8005f1a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8005f04:	2000      	movs	r0, #0
	}
 8005f06:	bd38      	pop	{r3, r4, r5, pc}
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8005f18:	e7fe      	b.n	8005f18 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 8005f1a:	68e3      	ldr	r3, [r4, #12]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005f20:	b10b      	cbz	r3, 8005f26 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8005f22:	2001      	movs	r0, #1
		return xReturn;
 8005f24:	e7ef      	b.n	8005f06 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005f26:	461a      	mov	r2, r3
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f7ff fef0 	bl	8005d10 <xQueueGenericSend>
			xReturn = pdPASS;
 8005f30:	2001      	movs	r0, #1
 8005f32:	e7e8      	b.n	8005f06 <xQueueGiveMutexRecursive+0x12>

08005f34 <xQueueGenericSendFromISR>:
{
 8005f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005f38:	b190      	cbz	r0, 8005f60 <xQueueGenericSendFromISR+0x2c>
 8005f3a:	460f      	mov	r7, r1
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	461c      	mov	r4, r3
 8005f40:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f42:	b1b1      	cbz	r1, 8005f72 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f44:	2c02      	cmp	r4, #2
 8005f46:	d120      	bne.n	8005f8a <xQueueGenericSendFromISR+0x56>
 8005f48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d01d      	beq.n	8005f8a <xQueueGenericSendFromISR+0x56>
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	e7fe      	b.n	8005f5e <xQueueGenericSendFromISR+0x2a>
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005f70:	e7fe      	b.n	8005f70 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0e5      	beq.n	8005f44 <xQueueGenericSendFromISR+0x10>
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f8a:	f001 fc61 	bl	8007850 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f8e:	f3ef 8811 	mrs	r8, BASEPRI
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fa2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8005fa4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d306      	bcc.n	8005fb8 <xQueueGenericSendFromISR+0x84>
 8005faa:	2c02      	cmp	r4, #2
 8005fac:	d004      	beq.n	8005fb8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005fae:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fb0:	f388 8811 	msr	BASEPRI, r8
}
 8005fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fb8:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8005fbc:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff fd1e 	bl	8005a06 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005fca:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005fce:	d006      	beq.n	8005fde <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fd0:	f109 0301 	add.w	r3, r9, #1
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8005fda:	2001      	movs	r0, #1
 8005fdc:	e7e8      	b.n	8005fb0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fe0:	b90b      	cbnz	r3, 8005fe6 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	e7e4      	b.n	8005fb0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8005fea:	f000 fee1 	bl	8006db0 <xTaskRemoveFromEventList>
 8005fee:	b118      	cbz	r0, 8005ff8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8005ff0:	b126      	cbz	r6, 8005ffc <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	6030      	str	r0, [r6, #0]
 8005ff6:	e7db      	b.n	8005fb0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	e7d9      	b.n	8005fb0 <xQueueGenericSendFromISR+0x7c>
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	e7d7      	b.n	8005fb0 <xQueueGenericSendFromISR+0x7c>

08006000 <xQueueReceive>:
{
 8006000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006008:	b180      	cbz	r0, 800602c <xQueueReceive+0x2c>
 800600a:	460e      	mov	r6, r1
 800600c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800600e:	b1b1      	cbz	r1, 800603e <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006010:	f000 ffb0 	bl	8006f74 <xTaskGetSchedulerState>
 8006014:	b9f8      	cbnz	r0, 8006056 <xQueueReceive+0x56>
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	b30b      	cbz	r3, 800605e <xQueueReceive+0x5e>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	e7fe      	b.n	800602a <xQueueReceive+0x2a>
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800603c:	e7fe      	b.n	800603c <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800603e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0e5      	beq.n	8006010 <xQueueReceive+0x10>
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	e7fe      	b.n	8006054 <xQueueReceive+0x54>
 8006056:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800605a:	2700      	movs	r7, #0
 800605c:	e03b      	b.n	80060d6 <xQueueReceive+0xd6>
 800605e:	f04f 0800 	mov.w	r8, #0
 8006062:	e7fa      	b.n	800605a <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006064:	4631      	mov	r1, r6
 8006066:	4620      	mov	r0, r4
 8006068:	f7ff fd08 	bl	8005a7c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800606c:	3d01      	subs	r5, #1
 800606e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	b92b      	cbnz	r3, 8006080 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8006074:	f001 fb20 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 8006078:	2001      	movs	r0, #1
}
 800607a:	b004      	add	sp, #16
 800607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006080:	f104 0010 	add.w	r0, r4, #16
 8006084:	f000 fe94 	bl	8006db0 <xTaskRemoveFromEventList>
 8006088:	2800      	cmp	r0, #0
 800608a:	d0f3      	beq.n	8006074 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 800608c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006094:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	e7e8      	b.n	8006074 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 80060a2:	f001 fb09 	bl	80076b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80060a6:	2000      	movs	r0, #0
 80060a8:	e7e7      	b.n	800607a <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060aa:	a802      	add	r0, sp, #8
 80060ac:	f000 ff08 	bl	8006ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060b0:	e01c      	b.n	80060ec <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7ff fcf4 	bl	8005aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060b8:	f000 fcd0 	bl	8006a5c <xTaskResumeAll>
 80060bc:	e009      	b.n	80060d2 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 80060be:	4620      	mov	r0, r4
 80060c0:	f7ff fcee 	bl	8005aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060c4:	f000 fcca 	bl	8006a5c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060c8:	4620      	mov	r0, r4
 80060ca:	f7ff fc91 	bl	80059f0 <prvIsQueueEmpty>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d146      	bne.n	8006160 <xQueueReceive+0x160>
 80060d2:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 80060d6:	f001 facd 	bl	8007674 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060da:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060dc:	2d00      	cmp	r5, #0
 80060de:	d1c1      	bne.n	8006064 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80060e0:	9b01      	ldr	r3, [sp, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0dd      	beq.n	80060a2 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 80060e6:	f1b8 0f00 	cmp.w	r8, #0
 80060ea:	d0de      	beq.n	80060aa <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 80060ec:	f001 fae4 	bl	80076b8 <vPortExitCritical>
		vTaskSuspendAll();
 80060f0:	f000 fc0c 	bl	800690c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060f4:	f001 fabe 	bl	8007674 <vPortEnterCritical>
 80060f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	bf08      	it	eq
 8006104:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8006108:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800610c:	b25b      	sxtb	r3, r3
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	bf08      	it	eq
 8006114:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8006118:	f001 face 	bl	80076b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800611c:	a901      	add	r1, sp, #4
 800611e:	a802      	add	r0, sp, #8
 8006120:	f000 feda 	bl	8006ed8 <xTaskCheckForTimeOut>
 8006124:	2800      	cmp	r0, #0
 8006126:	d1ca      	bne.n	80060be <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006128:	4620      	mov	r0, r4
 800612a:	f7ff fc61 	bl	80059f0 <prvIsQueueEmpty>
 800612e:	2800      	cmp	r0, #0
 8006130:	d0bf      	beq.n	80060b2 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006132:	9901      	ldr	r1, [sp, #4]
 8006134:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006138:	f000 fdd8 	bl	8006cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800613c:	4620      	mov	r0, r4
 800613e:	f7ff fcaf 	bl	8005aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006142:	f000 fc8b 	bl	8006a5c <xTaskResumeAll>
 8006146:	2800      	cmp	r0, #0
 8006148:	d1c3      	bne.n	80060d2 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 800614a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800614e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006152:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	e7b8      	b.n	80060d2 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8006160:	2000      	movs	r0, #0
 8006162:	e78a      	b.n	800607a <xQueueReceive+0x7a>

08006164 <xQueueSemaphoreTake>:
{
 8006164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006166:	b085      	sub	sp, #20
 8006168:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800616a:	b158      	cbz	r0, 8006184 <xQueueSemaphoreTake+0x20>
 800616c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800616e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006170:	b18b      	cbz	r3, 8006196 <xQueueSemaphoreTake+0x32>
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	e7fe      	b.n	8006182 <xQueueSemaphoreTake+0x1e>
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006194:	e7fe      	b.n	8006194 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006196:	f000 feed 	bl	8006f74 <xTaskGetSchedulerState>
 800619a:	b950      	cbnz	r0, 80061b2 <xQueueSemaphoreTake+0x4e>
 800619c:	9b01      	ldr	r3, [sp, #4]
 800619e:	b163      	cbz	r3, 80061ba <xQueueSemaphoreTake+0x56>
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	e7fe      	b.n	80061b0 <xQueueSemaphoreTake+0x4c>
 80061b2:	2600      	movs	r6, #0
 80061b4:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 80061b6:	2500      	movs	r5, #0
 80061b8:	e04e      	b.n	8006258 <xQueueSemaphoreTake+0xf4>
 80061ba:	2600      	movs	r6, #0
 80061bc:	4637      	mov	r7, r6
 80061be:	e7fa      	b.n	80061b6 <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061c0:	3b01      	subs	r3, #1
 80061c2:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	b13b      	cbz	r3, 80061d8 <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	b94b      	cbnz	r3, 80061e0 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 80061cc:	f001 fa74 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 80061d0:	2601      	movs	r6, #1
}
 80061d2:	4630      	mov	r0, r6
 80061d4:	b005      	add	sp, #20
 80061d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80061d8:	f000 ffcc 	bl	8007174 <pvTaskIncrementMutexHeldCount>
 80061dc:	6060      	str	r0, [r4, #4]
 80061de:	e7f3      	b.n	80061c8 <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061e0:	f104 0010 	add.w	r0, r4, #16
 80061e4:	f000 fde4 	bl	8006db0 <xTaskRemoveFromEventList>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d0ef      	beq.n	80061cc <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 80061ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80061f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	e7e4      	b.n	80061cc <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006202:	b146      	cbz	r6, 8006216 <xQueueSemaphoreTake+0xb2>
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	e7fe      	b.n	8006214 <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 8006216:	f001 fa4f 	bl	80076b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800621a:	e7da      	b.n	80061d2 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800621c:	a802      	add	r0, sp, #8
 800621e:	f000 fe4f 	bl	8006ec0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006222:	e023      	b.n	800626c <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 8006224:	f001 fa26 	bl	8007674 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006228:	6860      	ldr	r0, [r4, #4]
 800622a:	f000 feb3 	bl	8006f94 <xTaskPriorityInherit>
 800622e:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8006230:	f001 fa42 	bl	80076b8 <vPortExitCritical>
 8006234:	e040      	b.n	80062b8 <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 8006236:	4620      	mov	r0, r4
 8006238:	f7ff fc32 	bl	8005aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800623c:	f000 fc0e 	bl	8006a5c <xTaskResumeAll>
 8006240:	e009      	b.n	8006256 <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 8006242:	4620      	mov	r0, r4
 8006244:	f7ff fc2c 	bl	8005aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006248:	f000 fc08 	bl	8006a5c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800624c:	4620      	mov	r0, r4
 800624e:	f7ff fbcf 	bl	80059f0 <prvIsQueueEmpty>
 8006252:	2800      	cmp	r0, #0
 8006254:	d147      	bne.n	80062e6 <xQueueSemaphoreTake+0x182>
 8006256:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8006258:	f001 fa0c 	bl	8007674 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800625c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1ae      	bne.n	80061c0 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006262:	9b01      	ldr	r3, [sp, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0cc      	beq.n	8006202 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 8006268:	2f00      	cmp	r7, #0
 800626a:	d0d7      	beq.n	800621c <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 800626c:	f001 fa24 	bl	80076b8 <vPortExitCritical>
		vTaskSuspendAll();
 8006270:	f000 fb4c 	bl	800690c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006274:	f001 f9fe 	bl	8007674 <vPortEnterCritical>
 8006278:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800627c:	b25b      	sxtb	r3, r3
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	bf08      	it	eq
 8006284:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 8006288:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800628c:	b25b      	sxtb	r3, r3
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	bf08      	it	eq
 8006294:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 8006298:	f001 fa0e 	bl	80076b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800629c:	a901      	add	r1, sp, #4
 800629e:	a802      	add	r0, sp, #8
 80062a0:	f000 fe1a 	bl	8006ed8 <xTaskCheckForTimeOut>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d1cc      	bne.n	8006242 <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062a8:	4620      	mov	r0, r4
 80062aa:	f7ff fba1 	bl	80059f0 <prvIsQueueEmpty>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d0c1      	beq.n	8006236 <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0b5      	beq.n	8006224 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062b8:	9901      	ldr	r1, [sp, #4]
 80062ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80062be:	f000 fd15 	bl	8006cec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7ff fbec 	bl	8005aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062c8:	f000 fbc8 	bl	8006a5c <xTaskResumeAll>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d1c2      	bne.n	8006256 <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 80062d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	e7b7      	b.n	8006256 <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	f43f af73 	beq.w	80061d2 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 80062ec:	f001 f9c2 	bl	8007674 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80062f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80062f2:	b119      	cbz	r1, 80062fc <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062f6:	6819      	ldr	r1, [r3, #0]
 80062f8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80062fc:	6860      	ldr	r0, [r4, #4]
 80062fe:	f000 fedd 	bl	80070bc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006302:	f001 f9d9 	bl	80076b8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006306:	2600      	movs	r6, #0
 8006308:	e763      	b.n	80061d2 <xQueueSemaphoreTake+0x6e>

0800630a <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800630a:	b180      	cbz	r0, 800632e <xQueueTakeMutexRecursive+0x24>
	{
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	460c      	mov	r4, r1
 8006310:	4605      	mov	r5, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006312:	6846      	ldr	r6, [r0, #4]
 8006314:	f000 fe28 	bl	8006f68 <xTaskGetCurrentTaskHandle>
 8006318:	4286      	cmp	r6, r0
 800631a:	d011      	beq.n	8006340 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f7ff ff20 	bl	8006164 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006324:	b180      	cbz	r0, 8006348 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.uxRecursiveCallCount )++;
 8006326:	68eb      	ldr	r3, [r5, #12]
 8006328:	3301      	adds	r3, #1
 800632a:	60eb      	str	r3, [r5, #12]
		return xReturn;
 800632c:	e00c      	b.n	8006348 <xQueueTakeMutexRecursive+0x3e>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800633e:	e7fe      	b.n	800633e <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.uxRecursiveCallCount )++;
 8006340:	68eb      	ldr	r3, [r5, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8006346:	2001      	movs	r0, #1
	}
 8006348:	bd70      	pop	{r4, r5, r6, pc}

0800634a <xQueueReceiveFromISR>:
{
 800634a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800634e:	b1b0      	cbz	r0, 800637e <xQueueReceiveFromISR+0x34>
 8006350:	460d      	mov	r5, r1
 8006352:	4690      	mov	r8, r2
 8006354:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006356:	b1d9      	cbz	r1, 8006390 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006358:	f001 fa7a 	bl	8007850 <vPortValidateInterruptPriority>
	__asm volatile
 800635c:	f3ef 8711 	mrs	r7, BASEPRI
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006370:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006372:	b9ce      	cbnz	r6, 80063a8 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8006374:	2000      	movs	r0, #0
	__asm volatile
 8006376:	f387 8811 	msr	BASEPRI, r7
}
 800637a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800638e:	e7fe      	b.n	800638e <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006390:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0e0      	beq.n	8006358 <xQueueReceiveFromISR+0xe>
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	e7fe      	b.n	80063a6 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80063a8:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80063ac:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063b0:	4629      	mov	r1, r5
 80063b2:	4620      	mov	r0, r4
 80063b4:	f7ff fb62 	bl	8005a7c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063b8:	1e73      	subs	r3, r6, #1
 80063ba:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80063bc:	f1b9 3fff 	cmp.w	r9, #4294967295
 80063c0:	d006      	beq.n	80063d0 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80063c2:	f109 0301 	add.w	r3, r9, #1
 80063c6:	b25b      	sxtb	r3, r3
 80063c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80063cc:	2001      	movs	r0, #1
 80063ce:	e7d2      	b.n	8006376 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	b90b      	cbnz	r3, 80063d8 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 80063d4:	2001      	movs	r0, #1
 80063d6:	e7ce      	b.n	8006376 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d8:	f104 0010 	add.w	r0, r4, #16
 80063dc:	f000 fce8 	bl	8006db0 <xTaskRemoveFromEventList>
 80063e0:	b130      	cbz	r0, 80063f0 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 80063e2:	f1b8 0f00 	cmp.w	r8, #0
 80063e6:	d005      	beq.n	80063f4 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80063e8:	2001      	movs	r0, #1
 80063ea:	f8c8 0000 	str.w	r0, [r8]
 80063ee:	e7c2      	b.n	8006376 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80063f0:	2001      	movs	r0, #1
 80063f2:	e7c0      	b.n	8006376 <xQueueReceiveFromISR+0x2c>
 80063f4:	2001      	movs	r0, #1
 80063f6:	e7be      	b.n	8006376 <xQueueReceiveFromISR+0x2c>

080063f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063f8:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063fa:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063fc:	4c07      	ldr	r4, [pc, #28]	; (800641c <vQueueAddToRegistry+0x24>)
 80063fe:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8006402:	b122      	cbz	r2, 800640e <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006404:	3301      	adds	r3, #1
 8006406:	2b08      	cmp	r3, #8
 8006408:	d1f9      	bne.n	80063fe <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800640a:	bc10      	pop	{r4}
 800640c:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800640e:	4a03      	ldr	r2, [pc, #12]	; (800641c <vQueueAddToRegistry+0x24>)
 8006410:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006414:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006418:	6050      	str	r0, [r2, #4]
				break;
 800641a:	e7f6      	b.n	800640a <vQueueAddToRegistry+0x12>
 800641c:	200011ec 	.word	0x200011ec

08006420 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006420:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006422:	4909      	ldr	r1, [pc, #36]	; (8006448 <vQueueUnregisterQueue+0x28>)
 8006424:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8006428:	6852      	ldr	r2, [r2, #4]
 800642a:	4282      	cmp	r2, r0
 800642c:	d003      	beq.n	8006436 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800642e:	3301      	adds	r3, #1
 8006430:	2b08      	cmp	r3, #8
 8006432:	d1f7      	bne.n	8006424 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006434:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006436:	4a04      	ldr	r2, [pc, #16]	; (8006448 <vQueueUnregisterQueue+0x28>)
 8006438:	2100      	movs	r1, #0
 800643a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800643e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006442:	6051      	str	r1, [r2, #4]
				break;
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	200011ec 	.word	0x200011ec

0800644c <vQueueDelete>:
	configASSERT( pxQueue );
 800644c:	b138      	cbz	r0, 800645e <vQueueDelete+0x12>
{
 800644e:	b510      	push	{r4, lr}
 8006450:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8006452:	f7ff ffe5 	bl	8006420 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006456:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800645a:	b14b      	cbz	r3, 8006470 <vQueueDelete+0x24>
}
 800645c:	bd10      	pop	{r4, pc}
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800646e:	e7fe      	b.n	800646e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8006470:	4620      	mov	r0, r4
 8006472:	f001 fadf 	bl	8007a34 <vPortFree>
}
 8006476:	e7f1      	b.n	800645c <vQueueDelete+0x10>

08006478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
 800647e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006480:	f001 f8f8 	bl	8007674 <vPortEnterCritical>
 8006484:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006488:	b25b      	sxtb	r3, r3
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	bf04      	itt	eq
 8006490:	2300      	moveq	r3, #0
 8006492:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8006496:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800649a:	b25b      	sxtb	r3, r3
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	bf04      	itt	eq
 80064a2:	2300      	moveq	r3, #0
 80064a4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80064a8:	f001 f906 	bl	80076b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80064ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064ae:	b11b      	cbz	r3, 80064b8 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80064b0:	4620      	mov	r0, r4
 80064b2:	f7ff faf5 	bl	8005aa0 <prvUnlockQueue>
	}
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80064b8:	4632      	mov	r2, r6
 80064ba:	4629      	mov	r1, r5
 80064bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80064c0:	f000 fc58 	bl	8006d74 <vTaskPlaceOnEventListRestricted>
 80064c4:	e7f4      	b.n	80064b0 <vQueueWaitForMessageRestricted+0x38>
	...

080064c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c8:	4b08      	ldr	r3, [pc, #32]	; (80064ec <prvResetNextTaskUnblockTime+0x24>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	b923      	cbnz	r3, 80064da <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <prvResetNextTaskUnblockTime+0x28>)
 80064d2:	f04f 32ff 	mov.w	r2, #4294967295
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064da:	4b04      	ldr	r3, [pc, #16]	; (80064ec <prvResetNextTaskUnblockTime+0x24>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	4b02      	ldr	r3, [pc, #8]	; (80064f0 <prvResetNextTaskUnblockTime+0x28>)
 80064e6:	601a      	str	r2, [r3, #0]
	}
}
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	20001230 	.word	0x20001230
 80064f0:	200016d8 	.word	0x200016d8

080064f4 <prvInitialiseNewTask>:
{
 80064f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f8:	4606      	mov	r6, r0
 80064fa:	4689      	mov	r9, r1
 80064fc:	461f      	mov	r7, r3
 80064fe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006502:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006504:	0095      	lsls	r5, r2, #2
 8006506:	462a      	mov	r2, r5
 8006508:	21a5      	movs	r1, #165	; 0xa5
 800650a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800650c:	f001 fc67 	bl	8007dde <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006510:	3d04      	subs	r5, #4
 8006512:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006514:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006516:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800651a:	f109 3cff 	add.w	ip, r9, #4294967295
 800651e:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8006522:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006526:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800652a:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 800652e:	b10a      	cbz	r2, 8006534 <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006530:	458c      	cmp	ip, r1
 8006532:	d1f8      	bne.n	8006526 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006534:	f04f 0a00 	mov.w	sl, #0
 8006538:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800653c:	9b08      	ldr	r3, [sp, #32]
 800653e:	2b37      	cmp	r3, #55	; 0x37
 8006540:	bf28      	it	cs
 8006542:	2337      	movcs	r3, #55	; 0x37
 8006544:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8006546:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006548:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800654a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800654e:	1d20      	adds	r0, r4, #4
 8006550:	f7ff fa15 	bl	800597e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006554:	f104 0018 	add.w	r0, r4, #24
 8006558:	f7ff fa11 	bl	800597e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800655c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800655e:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 8006562:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006564:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8006566:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 800656a:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800656e:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006572:	463a      	mov	r2, r7
 8006574:	4631      	mov	r1, r6
 8006576:	4628      	mov	r0, r5
 8006578:	f001 f852 	bl	8007620 <pxPortInitialiseStack>
 800657c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800657e:	f1b8 0f00 	cmp.w	r8, #0
 8006582:	d001      	beq.n	8006588 <prvInitialiseNewTask+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006584:	f8c8 4000 	str.w	r4, [r8]
}
 8006588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800658c <prvAddNewTaskToReadyList>:
{
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006590:	f001 f870 	bl	8007674 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006594:	4a30      	ldr	r2, [pc, #192]	; (8006658 <prvAddNewTaskToReadyList+0xcc>)
 8006596:	6813      	ldr	r3, [r2, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800659c:	4b2f      	ldr	r3, [pc, #188]	; (800665c <prvAddNewTaskToReadyList+0xd0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d034      	beq.n	800660e <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 80065a4:	4b2e      	ldr	r3, [pc, #184]	; (8006660 <prvAddNewTaskToReadyList+0xd4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	b93b      	cbnz	r3, 80065ba <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065aa:	4b2c      	ldr	r3, [pc, #176]	; (800665c <prvAddNewTaskToReadyList+0xd0>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80065b2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80065b4:	bf9c      	itt	ls
 80065b6:	4b29      	ldrls	r3, [pc, #164]	; (800665c <prvAddNewTaskToReadyList+0xd0>)
 80065b8:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 80065ba:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <prvAddNewTaskToReadyList+0xd8>)
 80065bc:	6813      	ldr	r3, [r2, #0]
 80065be:	3301      	adds	r3, #1
 80065c0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065c2:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80065c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80065c6:	4b28      	ldr	r3, [pc, #160]	; (8006668 <prvAddNewTaskToReadyList+0xdc>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4298      	cmp	r0, r3
 80065cc:	bf84      	itt	hi
 80065ce:	4b26      	ldrhi	r3, [pc, #152]	; (8006668 <prvAddNewTaskToReadyList+0xdc>)
 80065d0:	6018      	strhi	r0, [r3, #0]
 80065d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80065d6:	1d29      	adds	r1, r5, #4
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <prvAddNewTaskToReadyList+0xe0>)
 80065da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80065de:	f7ff f9d1 	bl	8005984 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80065e2:	f001 f869 	bl	80076b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80065e6:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <prvAddNewTaskToReadyList+0xd4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	b17b      	cbz	r3, 800660c <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065ec:	4b1b      	ldr	r3, [pc, #108]	; (800665c <prvAddNewTaskToReadyList+0xd0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d209      	bcs.n	800660c <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 80065f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80065fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006600:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
}
 800660c:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 800660e:	4b13      	ldr	r3, [pc, #76]	; (800665c <prvAddNewTaskToReadyList+0xd0>)
 8006610:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006612:	6813      	ldr	r3, [r2, #0]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d1d0      	bne.n	80065ba <prvAddNewTaskToReadyList+0x2e>
 8006618:	4c14      	ldr	r4, [pc, #80]	; (800666c <prvAddNewTaskToReadyList+0xe0>)
 800661a:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800661e:	4620      	mov	r0, r4
 8006620:	f7ff f9a2 	bl	8005968 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006624:	3414      	adds	r4, #20
 8006626:	42b4      	cmp	r4, r6
 8006628:	d1f9      	bne.n	800661e <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 800662a:	4e11      	ldr	r6, [pc, #68]	; (8006670 <prvAddNewTaskToReadyList+0xe4>)
 800662c:	4630      	mov	r0, r6
 800662e:	f7ff f99b 	bl	8005968 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006632:	4c10      	ldr	r4, [pc, #64]	; (8006674 <prvAddNewTaskToReadyList+0xe8>)
 8006634:	4620      	mov	r0, r4
 8006636:	f7ff f997 	bl	8005968 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800663a:	480f      	ldr	r0, [pc, #60]	; (8006678 <prvAddNewTaskToReadyList+0xec>)
 800663c:	f7ff f994 	bl	8005968 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006640:	480e      	ldr	r0, [pc, #56]	; (800667c <prvAddNewTaskToReadyList+0xf0>)
 8006642:	f7ff f991 	bl	8005968 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006646:	480e      	ldr	r0, [pc, #56]	; (8006680 <prvAddNewTaskToReadyList+0xf4>)
 8006648:	f7ff f98e 	bl	8005968 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <prvAddNewTaskToReadyList+0xf8>)
 800664e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <prvAddNewTaskToReadyList+0xfc>)
 8006652:	601c      	str	r4, [r3, #0]
}
 8006654:	e7b1      	b.n	80065ba <prvAddNewTaskToReadyList+0x2e>
 8006656:	bf00      	nop
 8006658:	20001698 	.word	0x20001698
 800665c:	2000122c 	.word	0x2000122c
 8006660:	200016f4 	.word	0x200016f4
 8006664:	200016a8 	.word	0x200016a8
 8006668:	200016ac 	.word	0x200016ac
 800666c:	20001238 	.word	0x20001238
 8006670:	200016b0 	.word	0x200016b0
 8006674:	200016c4 	.word	0x200016c4
 8006678:	200016e0 	.word	0x200016e0
 800667c:	2000170c 	.word	0x2000170c
 8006680:	200016f8 	.word	0x200016f8
 8006684:	20001230 	.word	0x20001230
 8006688:	20001234 	.word	0x20001234

0800668c <prvDeleteTCB>:
	{
 800668c:	b510      	push	{r4, lr}
 800668e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006690:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8006694:	b163      	cbz	r3, 80066b0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006696:	2b01      	cmp	r3, #1
 8006698:	d011      	beq.n	80066be <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800669a:	2b02      	cmp	r3, #2
 800669c:	d00e      	beq.n	80066bc <prvDeleteTCB+0x30>
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	e7fe      	b.n	80066ae <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80066b0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80066b2:	f001 f9bf 	bl	8007a34 <vPortFree>
				vPortFree( pxTCB );
 80066b6:	4620      	mov	r0, r4
 80066b8:	f001 f9bc 	bl	8007a34 <vPortFree>
	}
 80066bc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80066be:	f001 f9b9 	bl	8007a34 <vPortFree>
 80066c2:	e7fb      	b.n	80066bc <prvDeleteTCB+0x30>

080066c4 <prvIdleTask>:
{
 80066c4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066c6:	4c15      	ldr	r4, [pc, #84]	; (800671c <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066c8:	4f15      	ldr	r7, [pc, #84]	; (8006720 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80066ca:	4e16      	ldr	r6, [pc, #88]	; (8006724 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066cc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006728 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	b1a3      	cbz	r3, 80066fe <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80066d4:	f000 ffce 	bl	8007674 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066dc:	1d28      	adds	r0, r5, #4
 80066de:	f7ff f975 	bl	80059cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066e2:	6833      	ldr	r3, [r6, #0]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80066ee:	f000 ffe3 	bl	80076b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80066f2:	4628      	mov	r0, r5
 80066f4:	f7ff ffca 	bl	800668c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1ea      	bne.n	80066d4 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d9e4      	bls.n	80066d0 <prvIdleTask+0xc>
				taskYIELD();
 8006706:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800670a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	e7d9      	b.n	80066d0 <prvIdleTask+0xc>
 800671c:	2000169c 	.word	0x2000169c
 8006720:	2000170c 	.word	0x2000170c
 8006724:	20001698 	.word	0x20001698
 8006728:	20001238 	.word	0x20001238

0800672c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006732:	4b17      	ldr	r3, [pc, #92]	; (8006790 <prvAddCurrentTaskToDelayedList+0x64>)
 8006734:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006736:	4b17      	ldr	r3, [pc, #92]	; (8006794 <prvAddCurrentTaskToDelayedList+0x68>)
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	3004      	adds	r0, #4
 800673c:	f7ff f946 	bl	80059cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006740:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006744:	d00d      	beq.n	8006762 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006746:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006748:	4b12      	ldr	r3, [pc, #72]	; (8006794 <prvAddCurrentTaskToDelayedList+0x68>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800674e:	42a6      	cmp	r6, r4
 8006750:	d910      	bls.n	8006774 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006752:	4b11      	ldr	r3, [pc, #68]	; (8006798 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	4b0f      	ldr	r3, [pc, #60]	; (8006794 <prvAddCurrentTaskToDelayedList+0x68>)
 8006758:	6819      	ldr	r1, [r3, #0]
 800675a:	3104      	adds	r1, #4
 800675c:	f7ff f91d 	bl	800599a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006760:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006762:	2d00      	cmp	r5, #0
 8006764:	d0ef      	beq.n	8006746 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <prvAddCurrentTaskToDelayedList+0x68>)
 8006768:	6819      	ldr	r1, [r3, #0]
 800676a:	3104      	adds	r1, #4
 800676c:	480b      	ldr	r0, [pc, #44]	; (800679c <prvAddCurrentTaskToDelayedList+0x70>)
 800676e:	f7ff f909 	bl	8005984 <vListInsertEnd>
 8006772:	e7f5      	b.n	8006760 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006774:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <prvAddCurrentTaskToDelayedList+0x74>)
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <prvAddCurrentTaskToDelayedList+0x68>)
 800677a:	6819      	ldr	r1, [r3, #0]
 800677c:	3104      	adds	r1, #4
 800677e:	f7ff f90c 	bl	800599a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006782:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <prvAddCurrentTaskToDelayedList+0x78>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006788:	bf84      	itt	hi
 800678a:	4b06      	ldrhi	r3, [pc, #24]	; (80067a4 <prvAddCurrentTaskToDelayedList+0x78>)
 800678c:	601c      	strhi	r4, [r3, #0]
}
 800678e:	e7e7      	b.n	8006760 <prvAddCurrentTaskToDelayedList+0x34>
 8006790:	20001720 	.word	0x20001720
 8006794:	2000122c 	.word	0x2000122c
 8006798:	20001234 	.word	0x20001234
 800679c:	200016f8 	.word	0x200016f8
 80067a0:	20001230 	.word	0x20001230
 80067a4:	200016d8 	.word	0x200016d8

080067a8 <xTaskCreateStatic>:
	{
 80067a8:	b530      	push	{r4, r5, lr}
 80067aa:	b087      	sub	sp, #28
 80067ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80067ae:	b17c      	cbz	r4, 80067d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067b2:	b1b5      	cbz	r5, 80067e2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80067b4:	2560      	movs	r5, #96	; 0x60
 80067b6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067b8:	9d04      	ldr	r5, [sp, #16]
 80067ba:	2d60      	cmp	r5, #96	; 0x60
 80067bc:	d01a      	beq.n	80067f4 <xTaskCreateStatic+0x4c>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	e7fe      	b.n	80067ce <xTaskCreateStatic+0x26>
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80067e0:	e7fe      	b.n	80067e0 <xTaskCreateStatic+0x38>
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80067f2:	e7fe      	b.n	80067f2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067f6:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067f8:	2402      	movs	r4, #2
 80067fa:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067fe:	2400      	movs	r4, #0
 8006800:	9403      	str	r4, [sp, #12]
 8006802:	9502      	str	r5, [sp, #8]
 8006804:	ac05      	add	r4, sp, #20
 8006806:	9401      	str	r4, [sp, #4]
 8006808:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800680a:	9400      	str	r4, [sp, #0]
 800680c:	f7ff fe72 	bl	80064f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006810:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006812:	f7ff febb 	bl	800658c <prvAddNewTaskToReadyList>
	}
 8006816:	9805      	ldr	r0, [sp, #20]
 8006818:	b007      	add	sp, #28
 800681a:	bd30      	pop	{r4, r5, pc}

0800681c <xTaskCreate>:
	{
 800681c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006820:	b085      	sub	sp, #20
 8006822:	4607      	mov	r7, r0
 8006824:	4688      	mov	r8, r1
 8006826:	4614      	mov	r4, r2
 8006828:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682a:	0090      	lsls	r0, r2, #2
 800682c:	f001 f86c 	bl	8007908 <pvPortMalloc>
			if( pxStack != NULL )
 8006830:	b308      	cbz	r0, 8006876 <xTaskCreate+0x5a>
 8006832:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006834:	2060      	movs	r0, #96	; 0x60
 8006836:	f001 f867 	bl	8007908 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800683a:	4605      	mov	r5, r0
 800683c:	b1a8      	cbz	r0, 800686a <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800683e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006842:	2300      	movs	r3, #0
 8006844:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006848:	9303      	str	r3, [sp, #12]
 800684a:	9002      	str	r0, [sp, #8]
 800684c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	4633      	mov	r3, r6
 8006856:	4622      	mov	r2, r4
 8006858:	4641      	mov	r1, r8
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff fe4a 	bl	80064f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006860:	4628      	mov	r0, r5
 8006862:	f7ff fe93 	bl	800658c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006866:	2001      	movs	r0, #1
 8006868:	e007      	b.n	800687a <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800686a:	4648      	mov	r0, r9
 800686c:	f001 f8e2 	bl	8007a34 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e001      	b.n	800687a <xTaskCreate+0x5e>
 8006876:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800687a:	b005      	add	sp, #20
 800687c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006880 <vTaskStartScheduler>:
{
 8006880:	b510      	push	{r4, lr}
 8006882:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006884:	2400      	movs	r4, #0
 8006886:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006888:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800688a:	aa07      	add	r2, sp, #28
 800688c:	a906      	add	r1, sp, #24
 800688e:	a805      	add	r0, sp, #20
 8006890:	f7fe ff3e 	bl	8005710 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006894:	9b05      	ldr	r3, [sp, #20]
 8006896:	9302      	str	r3, [sp, #8]
 8006898:	9b06      	ldr	r3, [sp, #24]
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	9400      	str	r4, [sp, #0]
 800689e:	4623      	mov	r3, r4
 80068a0:	9a07      	ldr	r2, [sp, #28]
 80068a2:	4915      	ldr	r1, [pc, #84]	; (80068f8 <vTaskStartScheduler+0x78>)
 80068a4:	4815      	ldr	r0, [pc, #84]	; (80068fc <vTaskStartScheduler+0x7c>)
 80068a6:	f7ff ff7f 	bl	80067a8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80068aa:	b310      	cbz	r0, 80068f2 <vTaskStartScheduler+0x72>
			xReturn = xTimerCreateTimerTask();
 80068ac:	f000 fccc 	bl	8007248 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80068b0:	2801      	cmp	r0, #1
 80068b2:	d00b      	beq.n	80068cc <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80068b8:	d11b      	bne.n	80068f2 <vTaskStartScheduler+0x72>
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	e7fe      	b.n	80068ca <vTaskStartScheduler+0x4a>
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80068dc:	4b08      	ldr	r3, [pc, #32]	; (8006900 <vTaskStartScheduler+0x80>)
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068e4:	4b07      	ldr	r3, [pc, #28]	; (8006904 <vTaskStartScheduler+0x84>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <vTaskStartScheduler+0x88>)
 80068ec:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80068ee:	f000 ff4b 	bl	8007788 <xPortStartScheduler>
}
 80068f2:	b008      	add	sp, #32
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	08009824 	.word	0x08009824
 80068fc:	080066c5 	.word	0x080066c5
 8006900:	200016d8 	.word	0x200016d8
 8006904:	200016f4 	.word	0x200016f4
 8006908:	20001720 	.word	0x20001720

0800690c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800690c:	4a02      	ldr	r2, [pc, #8]	; (8006918 <vTaskSuspendAll+0xc>)
 800690e:	6813      	ldr	r3, [r2, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	6013      	str	r3, [r2, #0]
}
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	200016a4 	.word	0x200016a4

0800691c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800691c:	4b01      	ldr	r3, [pc, #4]	; (8006924 <xTaskGetTickCount+0x8>)
 800691e:	6818      	ldr	r0, [r3, #0]
}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20001720 	.word	0x20001720

08006928 <xTaskIncrementTick>:
{
 8006928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800692c:	4b40      	ldr	r3, [pc, #256]	; (8006a30 <xTaskIncrementTick+0x108>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d170      	bne.n	8006a16 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006934:	4b3f      	ldr	r3, [pc, #252]	; (8006a34 <xTaskIncrementTick+0x10c>)
 8006936:	681e      	ldr	r6, [r3, #0]
 8006938:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800693a:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800693c:	b9c6      	cbnz	r6, 8006970 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800693e:	4b3e      	ldr	r3, [pc, #248]	; (8006a38 <xTaskIncrementTick+0x110>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	b143      	cbz	r3, 8006958 <xTaskIncrementTick+0x30>
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	e7fe      	b.n	8006956 <xTaskIncrementTick+0x2e>
 8006958:	4a37      	ldr	r2, [pc, #220]	; (8006a38 <xTaskIncrementTick+0x110>)
 800695a:	6811      	ldr	r1, [r2, #0]
 800695c:	4b37      	ldr	r3, [pc, #220]	; (8006a3c <xTaskIncrementTick+0x114>)
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	6010      	str	r0, [r2, #0]
 8006962:	6019      	str	r1, [r3, #0]
 8006964:	4a36      	ldr	r2, [pc, #216]	; (8006a40 <xTaskIncrementTick+0x118>)
 8006966:	6813      	ldr	r3, [r2, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	f7ff fdac 	bl	80064c8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006970:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <xTaskIncrementTick+0x11c>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	42b3      	cmp	r3, r6
 8006976:	d841      	bhi.n	80069fc <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006978:	4b2f      	ldr	r3, [pc, #188]	; (8006a38 <xTaskIncrementTick+0x110>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	b13b      	cbz	r3, 8006990 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8006980:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006982:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006a38 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8006986:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006a48 <xTaskIncrementTick+0x120>
 800698a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8006a4c <xTaskIncrementTick+0x124>
 800698e:	e022      	b.n	80069d6 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8006990:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006992:	4b2c      	ldr	r3, [pc, #176]	; (8006a44 <xTaskIncrementTick+0x11c>)
 8006994:	f04f 32ff 	mov.w	r2, #4294967295
 8006998:	601a      	str	r2, [r3, #0]
					break;
 800699a:	e030      	b.n	80069fe <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 800699c:	4a29      	ldr	r2, [pc, #164]	; (8006a44 <xTaskIncrementTick+0x11c>)
 800699e:	6013      	str	r3, [r2, #0]
						break;
 80069a0:	e02d      	b.n	80069fe <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 80069a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80069a4:	f8d9 3000 	ldr.w	r3, [r9]
 80069a8:	4298      	cmp	r0, r3
 80069aa:	bf88      	it	hi
 80069ac:	f8c9 0000 	strhi.w	r0, [r9]
 80069b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069b4:	4639      	mov	r1, r7
 80069b6:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80069ba:	f7fe ffe3 	bl	8005984 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069be:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <xTaskIncrementTick+0x128>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80069c6:	429a      	cmp	r2, r3
 80069c8:	bf28      	it	cs
 80069ca:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069cc:	f8d8 3000 	ldr.w	r3, [r8]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0dd      	beq.n	8006992 <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069d6:	f8d8 3000 	ldr.w	r3, [r8]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069de:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 80069e0:	429e      	cmp	r6, r3
 80069e2:	d3db      	bcc.n	800699c <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e4:	1d27      	adds	r7, r4, #4
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7fe fff0 	bl	80059cc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0d7      	beq.n	80069a2 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069f2:	f104 0018 	add.w	r0, r4, #24
 80069f6:	f7fe ffe9 	bl	80059cc <uxListRemove>
 80069fa:	e7d2      	b.n	80069a2 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 80069fc:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069fe:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <xTaskIncrementTick+0x128>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4a10      	ldr	r2, [pc, #64]	; (8006a4c <xTaskIncrementTick+0x124>)
 8006a0c:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	bf28      	it	cs
 8006a12:	2501      	movcs	r5, #1
 8006a14:	e004      	b.n	8006a20 <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 8006a16:	4a0f      	ldr	r2, [pc, #60]	; (8006a54 <xTaskIncrementTick+0x12c>)
 8006a18:	6813      	ldr	r3, [r2, #0]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006a1e:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <xTaskIncrementTick+0x130>)
 8006a22:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006a24:	2b00      	cmp	r3, #0
}
 8006a26:	bf0c      	ite	eq
 8006a28:	4628      	moveq	r0, r5
 8006a2a:	2001      	movne	r0, #1
 8006a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a30:	200016a4 	.word	0x200016a4
 8006a34:	20001720 	.word	0x20001720
 8006a38:	20001230 	.word	0x20001230
 8006a3c:	20001234 	.word	0x20001234
 8006a40:	200016dc 	.word	0x200016dc
 8006a44:	200016d8 	.word	0x200016d8
 8006a48:	200016ac 	.word	0x200016ac
 8006a4c:	20001238 	.word	0x20001238
 8006a50:	2000122c 	.word	0x2000122c
 8006a54:	200016a0 	.word	0x200016a0
 8006a58:	20001724 	.word	0x20001724

08006a5c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006a5c:	4b38      	ldr	r3, [pc, #224]	; (8006b40 <xTaskResumeAll+0xe4>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	b943      	cbnz	r3, 8006a74 <xTaskResumeAll+0x18>
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	e7fe      	b.n	8006a72 <xTaskResumeAll+0x16>
{
 8006a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006a78:	f000 fdfc 	bl	8007674 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006a7c:	4b30      	ldr	r3, [pc, #192]	; (8006b40 <xTaskResumeAll+0xe4>)
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	3a01      	subs	r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d149      	bne.n	8006b1e <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a8a:	4b2e      	ldr	r3, [pc, #184]	; (8006b44 <xTaskResumeAll+0xe8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d04b      	beq.n	8006b2a <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a92:	4b2d      	ldr	r3, [pc, #180]	; (8006b48 <xTaskResumeAll+0xec>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d04b      	beq.n	8006b32 <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006a9a:	4e2b      	ldr	r6, [pc, #172]	; (8006b48 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8006a9c:	4f2b      	ldr	r7, [pc, #172]	; (8006b4c <xTaskResumeAll+0xf0>)
 8006a9e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006b50 <xTaskResumeAll+0xf4>
 8006aa2:	e002      	b.n	8006aaa <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aa4:	6833      	ldr	r3, [r6, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d041      	beq.n	8006b2e <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006aaa:	68f3      	ldr	r3, [r6, #12]
 8006aac:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aae:	f104 0018 	add.w	r0, r4, #24
 8006ab2:	f7fe ff8b 	bl	80059cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab6:	1d25      	adds	r5, r4, #4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f7fe ff87 	bl	80059cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006abe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4298      	cmp	r0, r3
 8006ac4:	bf88      	it	hi
 8006ac6:	6038      	strhi	r0, [r7, #0]
 8006ac8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006acc:	4629      	mov	r1, r5
 8006ace:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006ad2:	f7fe ff57 	bl	8005984 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ad6:	4b1f      	ldr	r3, [pc, #124]	; (8006b54 <xTaskResumeAll+0xf8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d3e0      	bcc.n	8006aa4 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006ae2:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <xTaskResumeAll+0xfc>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e7dc      	b.n	8006aa4 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006aea:	3c01      	subs	r4, #1
 8006aec:	d005      	beq.n	8006afa <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8006aee:	f7ff ff1b 	bl	8006928 <xTaskIncrementTick>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d0f9      	beq.n	8006aea <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8006af6:	6035      	str	r5, [r6, #0]
 8006af8:	e7f7      	b.n	8006aea <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 8006afa:	4b18      	ldr	r3, [pc, #96]	; (8006b5c <xTaskResumeAll+0x100>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006b00:	4b15      	ldr	r3, [pc, #84]	; (8006b58 <xTaskResumeAll+0xfc>)
 8006b02:	681c      	ldr	r4, [r3, #0]
 8006b04:	b164      	cbz	r4, 8006b20 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8006b06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006b1a:	2401      	movs	r4, #1
 8006b1c:	e000      	b.n	8006b20 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8006b1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006b20:	f000 fdca 	bl	80076b8 <vPortExitCritical>
}
 8006b24:	4620      	mov	r0, r4
 8006b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006b2a:	2400      	movs	r4, #0
 8006b2c:	e7f8      	b.n	8006b20 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 8006b2e:	f7ff fccb 	bl	80064c8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b32:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <xTaskResumeAll+0x100>)
 8006b34:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	d0e2      	beq.n	8006b00 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006b3a:	4e07      	ldr	r6, [pc, #28]	; (8006b58 <xTaskResumeAll+0xfc>)
 8006b3c:	2501      	movs	r5, #1
 8006b3e:	e7d6      	b.n	8006aee <xTaskResumeAll+0x92>
 8006b40:	200016a4 	.word	0x200016a4
 8006b44:	20001698 	.word	0x20001698
 8006b48:	200016e0 	.word	0x200016e0
 8006b4c:	200016ac 	.word	0x200016ac
 8006b50:	20001238 	.word	0x20001238
 8006b54:	2000122c 	.word	0x2000122c
 8006b58:	20001724 	.word	0x20001724
 8006b5c:	200016a0 	.word	0x200016a0

08006b60 <vTaskDelayUntil>:
	{
 8006b60:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8006b62:	b158      	cbz	r0, 8006b7c <vTaskDelayUntil+0x1c>
 8006b64:	460c      	mov	r4, r1
 8006b66:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8006b68:	b989      	cbnz	r1, 8006b8e <vTaskDelayUntil+0x2e>
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	e7fe      	b.n	8006b7a <vTaskDelayUntil+0x1a>
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8006b8c:	e7fe      	b.n	8006b8c <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 8006b8e:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <vTaskDelayUntil+0x98>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	b143      	cbz	r3, 8006ba6 <vTaskDelayUntil+0x46>
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	e7fe      	b.n	8006ba4 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 8006ba6:	f7ff feb1 	bl	800690c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8006baa:	4b14      	ldr	r3, [pc, #80]	; (8006bfc <vTaskDelayUntil+0x9c>)
 8006bac:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006bae:	682b      	ldr	r3, [r5, #0]
 8006bb0:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 8006bb2:	4283      	cmp	r3, r0
 8006bb4:	d907      	bls.n	8006bc6 <vTaskDelayUntil+0x66>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006bb6:	42a3      	cmp	r3, r4
 8006bb8:	d801      	bhi.n	8006bbe <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 8006bba:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006bbc:	e00e      	b.n	8006bdc <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006bbe:	42a0      	cmp	r0, r4
 8006bc0:	d307      	bcc.n	8006bd2 <vTaskDelayUntil+0x72>
			*pxPreviousWakeTime = xTimeToWake;
 8006bc2:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006bc4:	e00a      	b.n	8006bdc <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	d803      	bhi.n	8006bd2 <vTaskDelayUntil+0x72>
 8006bca:	42a0      	cmp	r0, r4
 8006bcc:	d301      	bcc.n	8006bd2 <vTaskDelayUntil+0x72>
			*pxPreviousWakeTime = xTimeToWake;
 8006bce:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006bd0:	e004      	b.n	8006bdc <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8006bd2:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	1a20      	subs	r0, r4, r0
 8006bd8:	f7ff fda8 	bl	800672c <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8006bdc:	f7ff ff3e 	bl	8006a5c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006be0:	b948      	cbnz	r0, 8006bf6 <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 8006be2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
	}
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	200016a4 	.word	0x200016a4
 8006bfc:	20001720 	.word	0x20001720

08006c00 <vTaskDelay>:
	{
 8006c00:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c02:	b1a8      	cbz	r0, 8006c30 <vTaskDelay+0x30>
 8006c04:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006c06:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <vTaskDelay+0x48>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	b143      	cbz	r3, 8006c1e <vTaskDelay+0x1e>
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	e7fe      	b.n	8006c1c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006c1e:	f7ff fe75 	bl	800690c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c22:	2100      	movs	r1, #0
 8006c24:	4620      	mov	r0, r4
 8006c26:	f7ff fd81 	bl	800672c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006c2a:	f7ff ff17 	bl	8006a5c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006c2e:	b948      	cbnz	r0, 8006c44 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006c30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c38:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	f3bf 8f6f 	isb	sy
	}
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	bf00      	nop
 8006c48:	200016a4 	.word	0x200016a4

08006c4c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <vTaskSwitchContext+0x8c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	b11b      	cbz	r3, 8006c5a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006c52:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <vTaskSwitchContext+0x90>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006c5a:	4b20      	ldr	r3, [pc, #128]	; (8006cdc <vTaskSwitchContext+0x90>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c60:	4b1f      	ldr	r3, [pc, #124]	; (8006ce0 <vTaskSwitchContext+0x94>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006c68:	0092      	lsls	r2, r2, #2
 8006c6a:	491e      	ldr	r1, [pc, #120]	; (8006ce4 <vTaskSwitchContext+0x98>)
 8006c6c:	588a      	ldr	r2, [r1, r2]
 8006c6e:	b98a      	cbnz	r2, 8006c94 <vTaskSwitchContext+0x48>
 8006c70:	b13b      	cbz	r3, 8006c82 <vTaskSwitchContext+0x36>
 8006c72:	3b01      	subs	r3, #1
 8006c74:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006c78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006c7c:	b952      	cbnz	r2, 8006c94 <vTaskSwitchContext+0x48>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f7      	bne.n	8006c72 <vTaskSwitchContext+0x26>
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	e7fe      	b.n	8006c92 <vTaskSwitchContext+0x46>
 8006c94:	4a13      	ldr	r2, [pc, #76]	; (8006ce4 <vTaskSwitchContext+0x98>)
 8006c96:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006c9a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006c9e:	6848      	ldr	r0, [r1, #4]
 8006ca0:	6840      	ldr	r0, [r0, #4]
 8006ca2:	6048      	str	r0, [r1, #4]
 8006ca4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006ca8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006cac:	3208      	adds	r2, #8
 8006cae:	4290      	cmp	r0, r2
 8006cb0:	d00b      	beq.n	8006cca <vTaskSwitchContext+0x7e>
 8006cb2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006cb6:	4a0b      	ldr	r2, [pc, #44]	; (8006ce4 <vTaskSwitchContext+0x98>)
 8006cb8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006cbc:	6852      	ldr	r2, [r2, #4]
 8006cbe:	68d1      	ldr	r1, [r2, #12]
 8006cc0:	4a09      	ldr	r2, [pc, #36]	; (8006ce8 <vTaskSwitchContext+0x9c>)
 8006cc2:	6011      	str	r1, [r2, #0]
 8006cc4:	4a06      	ldr	r2, [pc, #24]	; (8006ce0 <vTaskSwitchContext+0x94>)
 8006cc6:	6013      	str	r3, [r2, #0]
}
 8006cc8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cca:	6840      	ldr	r0, [r0, #4]
 8006ccc:	4a05      	ldr	r2, [pc, #20]	; (8006ce4 <vTaskSwitchContext+0x98>)
 8006cce:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006cd2:	6050      	str	r0, [r2, #4]
 8006cd4:	e7ed      	b.n	8006cb2 <vTaskSwitchContext+0x66>
 8006cd6:	bf00      	nop
 8006cd8:	200016a4 	.word	0x200016a4
 8006cdc:	20001724 	.word	0x20001724
 8006ce0:	200016ac 	.word	0x200016ac
 8006ce4:	20001238 	.word	0x20001238
 8006ce8:	2000122c 	.word	0x2000122c

08006cec <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006cec:	b158      	cbz	r0, 8006d06 <vTaskPlaceOnEventList+0x1a>
{
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cf2:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <vTaskPlaceOnEventList+0x2c>)
 8006cf4:	6811      	ldr	r1, [r2, #0]
 8006cf6:	3118      	adds	r1, #24
 8006cf8:	f7fe fe4f 	bl	800599a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f7ff fd14 	bl	800672c <prvAddCurrentTaskToDelayedList>
}
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006d16:	e7fe      	b.n	8006d16 <vTaskPlaceOnEventList+0x2a>
 8006d18:	2000122c 	.word	0x2000122c

08006d1c <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8006d1c:	b170      	cbz	r0, 8006d3c <vTaskPlaceOnUnorderedEventList+0x20>
{
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4614      	mov	r4, r2
 8006d22:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8006d24:	4b11      	ldr	r3, [pc, #68]	; (8006d6c <vTaskPlaceOnUnorderedEventList+0x50>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	b98b      	cbnz	r3, 8006d4e <vTaskPlaceOnUnorderedEventList+0x32>
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	e7fe      	b.n	8006d3a <vTaskPlaceOnUnorderedEventList+0x1e>
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006d4c:	e7fe      	b.n	8006d4c <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006d4e:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <vTaskPlaceOnUnorderedEventList+0x54>)
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006d56:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d58:	6819      	ldr	r1, [r3, #0]
 8006d5a:	3118      	adds	r1, #24
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	f7fe fe11 	bl	8005984 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d62:	2101      	movs	r1, #1
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7ff fce1 	bl	800672c <prvAddCurrentTaskToDelayedList>
}
 8006d6a:	bd10      	pop	{r4, pc}
 8006d6c:	200016a4 	.word	0x200016a4
 8006d70:	2000122c 	.word	0x2000122c

08006d74 <vTaskPlaceOnEventListRestricted>:
	{
 8006d74:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006d76:	b178      	cbz	r0, 8006d98 <vTaskPlaceOnEventListRestricted+0x24>
 8006d78:	460d      	mov	r5, r1
 8006d7a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d7c:	4a0b      	ldr	r2, [pc, #44]	; (8006dac <vTaskPlaceOnEventListRestricted+0x38>)
 8006d7e:	6811      	ldr	r1, [r2, #0]
 8006d80:	3118      	adds	r1, #24
 8006d82:	f7fe fdff 	bl	8005984 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006d86:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d88:	4621      	mov	r1, r4
 8006d8a:	bf0c      	ite	eq
 8006d8c:	4628      	moveq	r0, r5
 8006d8e:	f04f 30ff 	movne.w	r0, #4294967295
 8006d92:	f7ff fccb 	bl	800672c <prvAddCurrentTaskToDelayedList>
	}
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006da8:	e7fe      	b.n	8006da8 <vTaskPlaceOnEventListRestricted+0x34>
 8006daa:	bf00      	nop
 8006dac:	2000122c 	.word	0x2000122c

08006db0 <xTaskRemoveFromEventList>:
{
 8006db0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006db2:	68c3      	ldr	r3, [r0, #12]
 8006db4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006db6:	b32c      	cbz	r4, 8006e04 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006db8:	f104 0518 	add.w	r5, r4, #24
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f7fe fe05 	bl	80059cc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dc2:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <xTaskRemoveFromEventList+0x70>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	bb33      	cbnz	r3, 8006e16 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dc8:	1d25      	adds	r5, r4, #4
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f7fe fdfe 	bl	80059cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006dd2:	4b14      	ldr	r3, [pc, #80]	; (8006e24 <xTaskRemoveFromEventList+0x74>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4298      	cmp	r0, r3
 8006dd8:	bf84      	itt	hi
 8006dda:	4b12      	ldrhi	r3, [pc, #72]	; (8006e24 <xTaskRemoveFromEventList+0x74>)
 8006ddc:	6018      	strhi	r0, [r3, #0]
 8006dde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006de2:	4629      	mov	r1, r5
 8006de4:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <xTaskRemoveFromEventList+0x78>)
 8006de6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006dea:	f7fe fdcb 	bl	8005984 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <xTaskRemoveFromEventList+0x7c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006df8:	bf83      	ittte	hi
 8006dfa:	2001      	movhi	r0, #1
 8006dfc:	4b0c      	ldrhi	r3, [pc, #48]	; (8006e30 <xTaskRemoveFromEventList+0x80>)
 8006dfe:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006e00:	2000      	movls	r0, #0
}
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006e14:	e7fe      	b.n	8006e14 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e16:	4629      	mov	r1, r5
 8006e18:	4806      	ldr	r0, [pc, #24]	; (8006e34 <xTaskRemoveFromEventList+0x84>)
 8006e1a:	f7fe fdb3 	bl	8005984 <vListInsertEnd>
 8006e1e:	e7e6      	b.n	8006dee <xTaskRemoveFromEventList+0x3e>
 8006e20:	200016a4 	.word	0x200016a4
 8006e24:	200016ac 	.word	0x200016ac
 8006e28:	20001238 	.word	0x20001238
 8006e2c:	2000122c 	.word	0x2000122c
 8006e30:	20001724 	.word	0x20001724
 8006e34:	200016e0 	.word	0x200016e0

08006e38 <vTaskRemoveFromUnorderedEventList>:
{
 8006e38:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006e3a:	4b1c      	ldr	r3, [pc, #112]	; (8006eac <vTaskRemoveFromUnorderedEventList+0x74>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	b943      	cbnz	r3, 8006e52 <vTaskRemoveFromUnorderedEventList+0x1a>
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	e7fe      	b.n	8006e50 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e52:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006e56:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006e58:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8006e5a:	b1f4      	cbz	r4, 8006e9a <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8006e5c:	f7fe fdb6 	bl	80059cc <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e60:	1d25      	adds	r5, r4, #4
 8006e62:	4628      	mov	r0, r5
 8006e64:	f7fe fdb2 	bl	80059cc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006e68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4298      	cmp	r0, r3
 8006e70:	bf84      	itt	hi
 8006e72:	4b0f      	ldrhi	r3, [pc, #60]	; (8006eb0 <vTaskRemoveFromUnorderedEventList+0x78>)
 8006e74:	6018      	strhi	r0, [r3, #0]
 8006e76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8006e7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e82:	f7fe fd7f 	bl	8005984 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <vTaskRemoveFromUnorderedEventList+0x80>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d902      	bls.n	8006e98 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8006e92:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <vTaskRemoveFromUnorderedEventList+0x84>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
}
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006eaa:	e7fe      	b.n	8006eaa <vTaskRemoveFromUnorderedEventList+0x72>
 8006eac:	200016a4 	.word	0x200016a4
 8006eb0:	200016ac 	.word	0x200016ac
 8006eb4:	20001238 	.word	0x20001238
 8006eb8:	2000122c 	.word	0x2000122c
 8006ebc:	20001724 	.word	0x20001724

08006ec0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ec0:	4b03      	ldr	r3, [pc, #12]	; (8006ed0 <vTaskInternalSetTimeOutState+0x10>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ec6:	4b03      	ldr	r3, [pc, #12]	; (8006ed4 <vTaskInternalSetTimeOutState+0x14>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6043      	str	r3, [r0, #4]
}
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	200016dc 	.word	0x200016dc
 8006ed4:	20001720 	.word	0x20001720

08006ed8 <xTaskCheckForTimeOut>:
{
 8006ed8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 8006eda:	b1d0      	cbz	r0, 8006f12 <xTaskCheckForTimeOut+0x3a>
 8006edc:	460c      	mov	r4, r1
 8006ede:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006ee0:	b301      	cbz	r1, 8006f24 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8006ee2:	f000 fbc7 	bl	8007674 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006ee6:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <xTaskCheckForTimeOut+0x7c>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d029      	beq.n	8006f46 <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ef2:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ef4:	4818      	ldr	r0, [pc, #96]	; (8006f58 <xTaskCheckForTimeOut+0x80>)
 8006ef6:	6800      	ldr	r0, [r0, #0]
 8006ef8:	f8d5 c000 	ldr.w	ip, [r5]
 8006efc:	4584      	cmp	ip, r0
 8006efe:	d001      	beq.n	8006f04 <xTaskCheckForTimeOut+0x2c>
 8006f00:	4291      	cmp	r1, r2
 8006f02:	d925      	bls.n	8006f50 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f04:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f06:	4283      	cmp	r3, r0
 8006f08:	d815      	bhi.n	8006f36 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006f0e:	2401      	movs	r4, #1
 8006f10:	e01a      	b.n	8006f48 <xTaskCheckForTimeOut+0x70>
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006f22:	e7fe      	b.n	8006f22 <xTaskCheckForTimeOut+0x4a>
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006f34:	e7fe      	b.n	8006f34 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8006f36:	1a9b      	subs	r3, r3, r2
 8006f38:	440b      	add	r3, r1
 8006f3a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f7ff ffbf 	bl	8006ec0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f42:	2400      	movs	r4, #0
 8006f44:	e000      	b.n	8006f48 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8006f46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006f48:	f000 fbb6 	bl	80076b8 <vPortExitCritical>
}
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8006f50:	2401      	movs	r4, #1
 8006f52:	e7f9      	b.n	8006f48 <xTaskCheckForTimeOut+0x70>
 8006f54:	20001720 	.word	0x20001720
 8006f58:	200016dc 	.word	0x200016dc

08006f5c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006f5c:	4b01      	ldr	r3, [pc, #4]	; (8006f64 <vTaskMissedYield+0x8>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	4770      	bx	lr
 8006f64:	20001724 	.word	0x20001724

08006f68 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8006f68:	4b01      	ldr	r3, [pc, #4]	; (8006f70 <xTaskGetCurrentTaskHandle+0x8>)
 8006f6a:	6818      	ldr	r0, [r3, #0]
	}
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	2000122c 	.word	0x2000122c

08006f74 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <xTaskGetSchedulerState+0x18>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	b133      	cbz	r3, 8006f88 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <xTaskGetSchedulerState+0x1c>)
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	fab0 f080 	clz	r0, r0
 8006f82:	0940      	lsrs	r0, r0, #5
 8006f84:	0040      	lsls	r0, r0, #1
 8006f86:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f88:	2001      	movs	r0, #1
	}
 8006f8a:	4770      	bx	lr
 8006f8c:	200016f4 	.word	0x200016f4
 8006f90:	200016a4 	.word	0x200016a4

08006f94 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d040      	beq.n	800701a <xTaskPriorityInherit+0x86>
	{
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006f9e:	4a20      	ldr	r2, [pc, #128]	; (8007020 <xTaskPriorityInherit+0x8c>)
 8006fa0:	6812      	ldr	r2, [r2, #0]
 8006fa2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d22f      	bcs.n	8007008 <xTaskPriorityInherit+0x74>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fa8:	6982      	ldr	r2, [r0, #24]
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	db05      	blt.n	8006fba <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fae:	4a1c      	ldr	r2, [pc, #112]	; (8007020 <xTaskPriorityInherit+0x8c>)
 8006fb0:	6812      	ldr	r2, [r2, #0]
 8006fb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006fb4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006fb8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006fba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006fbe:	4a19      	ldr	r2, [pc, #100]	; (8007024 <xTaskPriorityInherit+0x90>)
 8006fc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fc4:	6962      	ldr	r2, [r4, #20]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d005      	beq.n	8006fd6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fca:	4b15      	ldr	r3, [pc, #84]	; (8007020 <xTaskPriorityInherit+0x8c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	e020      	b.n	8007018 <xTaskPriorityInherit+0x84>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd6:	1d25      	adds	r5, r4, #4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f7fe fcf7 	bl	80059cc <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fde:	4b10      	ldr	r3, [pc, #64]	; (8007020 <xTaskPriorityInherit+0x8c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006fe4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fe6:	4b10      	ldr	r3, [pc, #64]	; (8007028 <xTaskPriorityInherit+0x94>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4298      	cmp	r0, r3
 8006fec:	d809      	bhi.n	8007002 <xTaskPriorityInherit+0x6e>
 8006fee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <xTaskPriorityInherit+0x90>)
 8006ff6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ffa:	f7fe fcc3 	bl	8005984 <vListInsertEnd>
				xReturn = pdTRUE;
 8006ffe:	2001      	movs	r0, #1
 8007000:	e00a      	b.n	8007018 <xTaskPriorityInherit+0x84>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <xTaskPriorityInherit+0x94>)
 8007004:	6018      	str	r0, [r3, #0]
 8007006:	e7f2      	b.n	8006fee <xTaskPriorityInherit+0x5a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <xTaskPriorityInherit+0x8c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	4298      	cmp	r0, r3
 8007012:	bf2c      	ite	cs
 8007014:	2000      	movcs	r0, #0
 8007016:	2001      	movcc	r0, #1
	}
 8007018:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800701a:	2000      	movs	r0, #0
	}
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	2000122c 	.word	0x2000122c
 8007024:	20001238 	.word	0x20001238
 8007028:	200016ac 	.word	0x200016ac

0800702c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800702c:	2800      	cmp	r0, #0
 800702e:	d03b      	beq.n	80070a8 <xTaskPriorityDisinherit+0x7c>
	{
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007034:	4b1e      	ldr	r3, [pc, #120]	; (80070b0 <xTaskPriorityDisinherit+0x84>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4283      	cmp	r3, r0
 800703a:	d008      	beq.n	800704e <xTaskPriorityDisinherit+0x22>
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	e7fe      	b.n	800704c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800704e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007050:	b943      	cbnz	r3, 8007064 <xTaskPriorityDisinherit+0x38>
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	e7fe      	b.n	8007062 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007064:	3b01      	subs	r3, #1
 8007066:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007068:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800706a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800706c:	4291      	cmp	r1, r2
 800706e:	d01d      	beq.n	80070ac <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007070:	b10b      	cbz	r3, 8007076 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8007072:	2000      	movs	r0, #0
	}
 8007074:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007076:	1d05      	adds	r5, r0, #4
 8007078:	4628      	mov	r0, r5
 800707a:	f7fe fca7 	bl	80059cc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800707e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007080:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007082:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8007086:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <xTaskPriorityDisinherit+0x88>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4298      	cmp	r0, r3
 800708e:	bf84      	itt	hi
 8007090:	4b08      	ldrhi	r3, [pc, #32]	; (80070b4 <xTaskPriorityDisinherit+0x88>)
 8007092:	6018      	strhi	r0, [r3, #0]
 8007094:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007098:	4629      	mov	r1, r5
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <xTaskPriorityDisinherit+0x8c>)
 800709c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070a0:	f7fe fc70 	bl	8005984 <vListInsertEnd>
					xReturn = pdTRUE;
 80070a4:	2001      	movs	r0, #1
 80070a6:	e7e5      	b.n	8007074 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80070a8:	2000      	movs	r0, #0
	}
 80070aa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80070ac:	2000      	movs	r0, #0
 80070ae:	e7e1      	b.n	8007074 <xTaskPriorityDisinherit+0x48>
 80070b0:	2000122c 	.word	0x2000122c
 80070b4:	200016ac 	.word	0x200016ac
 80070b8:	20001238 	.word	0x20001238

080070bc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80070bc:	2800      	cmp	r0, #0
 80070be:	d046      	beq.n	800714e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80070c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80070c6:	b943      	cbnz	r3, 80070da <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	e7fe      	b.n	80070d8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80070da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80070dc:	4291      	cmp	r1, r2
 80070de:	bf38      	it	cc
 80070e0:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80070e2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80070e4:	428a      	cmp	r2, r1
 80070e6:	d001      	beq.n	80070ec <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d000      	beq.n	80070ee <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80070ec:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4283      	cmp	r3, r0
 80070f4:	d022      	beq.n	800713c <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80070f6:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070f8:	6983      	ldr	r3, [r0, #24]
 80070fa:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070fc:	bfa4      	itt	ge
 80070fe:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 8007102:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007104:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007108:	4b12      	ldr	r3, [pc, #72]	; (8007154 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800710a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800710e:	6942      	ldr	r2, [r0, #20]
 8007110:	429a      	cmp	r2, r3
 8007112:	d1eb      	bne.n	80070ec <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007114:	1d05      	adds	r5, r0, #4
 8007116:	4628      	mov	r0, r5
 8007118:	f7fe fc58 	bl	80059cc <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800711c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800711e:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4298      	cmp	r0, r3
 8007124:	bf84      	itt	hi
 8007126:	4b0c      	ldrhi	r3, [pc, #48]	; (8007158 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007128:	6018      	strhi	r0, [r3, #0]
 800712a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800712e:	4629      	mov	r1, r5
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007132:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007136:	f7fe fc25 	bl	8005984 <vListInsertEnd>
	}
 800713a:	e7d7      	b.n	80070ec <vTaskPriorityDisinheritAfterTimeout+0x30>
 800713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800714c:	e7fe      	b.n	800714c <vTaskPriorityDisinheritAfterTimeout+0x90>
 800714e:	4770      	bx	lr
 8007150:	2000122c 	.word	0x2000122c
 8007154:	20001238 	.word	0x20001238
 8007158:	200016ac 	.word	0x200016ac

0800715c <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800715c:	4b04      	ldr	r3, [pc, #16]	; (8007170 <uxTaskResetEventItemValue+0x14>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007162:	6819      	ldr	r1, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8007168:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800716c:	6193      	str	r3, [r2, #24]
}
 800716e:	4770      	bx	lr
 8007170:	2000122c 	.word	0x2000122c

08007174 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <pvTaskIncrementMutexHeldCount+0x18>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	b123      	cbz	r3, 8007184 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800717a:	4b04      	ldr	r3, [pc, #16]	; (800718c <pvTaskIncrementMutexHeldCount+0x18>)
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007180:	3301      	adds	r3, #1
 8007182:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8007184:	4b01      	ldr	r3, [pc, #4]	; (800718c <pvTaskIncrementMutexHeldCount+0x18>)
 8007186:	6818      	ldr	r0, [r3, #0]
	}
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	2000122c 	.word	0x2000122c

08007190 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007190:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007192:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007194:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007196:	4291      	cmp	r1, r2
 8007198:	d80c      	bhi.n	80071b4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800719a:	1ad2      	subs	r2, r2, r3
 800719c:	6983      	ldr	r3, [r0, #24]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d301      	bcc.n	80071a6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071a2:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80071a4:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071a6:	1d01      	adds	r1, r0, #4
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <prvInsertTimerInActiveList+0x40>)
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	f7fe fbf5 	bl	800599a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80071b0:	2000      	movs	r0, #0
 80071b2:	e7f7      	b.n	80071a4 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d201      	bcs.n	80071bc <prvInsertTimerInActiveList+0x2c>
 80071b8:	4299      	cmp	r1, r3
 80071ba:	d206      	bcs.n	80071ca <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071bc:	1d01      	adds	r1, r0, #4
 80071be:	4b05      	ldr	r3, [pc, #20]	; (80071d4 <prvInsertTimerInActiveList+0x44>)
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	f7fe fbea 	bl	800599a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80071c6:	2000      	movs	r0, #0
 80071c8:	e7ec      	b.n	80071a4 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80071ca:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80071cc:	e7ea      	b.n	80071a4 <prvInsertTimerInActiveList+0x14>
 80071ce:	bf00      	nop
 80071d0:	2000172c 	.word	0x2000172c
 80071d4:	20001728 	.word	0x20001728

080071d8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071d8:	b530      	push	{r4, r5, lr}
 80071da:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071dc:	f000 fa4a 	bl	8007674 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071e0:	4b11      	ldr	r3, [pc, #68]	; (8007228 <prvCheckForValidListAndQueue+0x50>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	b11b      	cbz	r3, 80071ee <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071e6:	f000 fa67 	bl	80076b8 <vPortExitCritical>
}
 80071ea:	b003      	add	sp, #12
 80071ec:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80071ee:	4d0f      	ldr	r5, [pc, #60]	; (800722c <prvCheckForValidListAndQueue+0x54>)
 80071f0:	4628      	mov	r0, r5
 80071f2:	f7fe fbb9 	bl	8005968 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071f6:	4c0e      	ldr	r4, [pc, #56]	; (8007230 <prvCheckForValidListAndQueue+0x58>)
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7fe fbb5 	bl	8005968 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071fe:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <prvCheckForValidListAndQueue+0x5c>)
 8007200:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007202:	4b0d      	ldr	r3, [pc, #52]	; (8007238 <prvCheckForValidListAndQueue+0x60>)
 8007204:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007206:	2300      	movs	r3, #0
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4b0c      	ldr	r3, [pc, #48]	; (800723c <prvCheckForValidListAndQueue+0x64>)
 800720c:	4a0c      	ldr	r2, [pc, #48]	; (8007240 <prvCheckForValidListAndQueue+0x68>)
 800720e:	2110      	movs	r1, #16
 8007210:	200a      	movs	r0, #10
 8007212:	f7fe fcc2 	bl	8005b9a <xQueueGenericCreateStatic>
 8007216:	4b04      	ldr	r3, [pc, #16]	; (8007228 <prvCheckForValidListAndQueue+0x50>)
 8007218:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800721a:	2800      	cmp	r0, #0
 800721c:	d0e3      	beq.n	80071e6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800721e:	4909      	ldr	r1, [pc, #36]	; (8007244 <prvCheckForValidListAndQueue+0x6c>)
 8007220:	f7ff f8ea 	bl	80063f8 <vQueueAddToRegistry>
 8007224:	e7df      	b.n	80071e6 <prvCheckForValidListAndQueue+0xe>
 8007226:	bf00      	nop
 8007228:	2000184c 	.word	0x2000184c
 800722c:	200017d0 	.word	0x200017d0
 8007230:	200017e4 	.word	0x200017e4
 8007234:	20001728 	.word	0x20001728
 8007238:	2000172c 	.word	0x2000172c
 800723c:	200017fc 	.word	0x200017fc
 8007240:	20001730 	.word	0x20001730
 8007244:	0800982c 	.word	0x0800982c

08007248 <xTimerCreateTimerTask>:
{
 8007248:	b510      	push	{r4, lr}
 800724a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800724c:	f7ff ffc4 	bl	80071d8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007250:	4b12      	ldr	r3, [pc, #72]	; (800729c <xTimerCreateTimerTask+0x54>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	b1cb      	cbz	r3, 800728a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007256:	2400      	movs	r4, #0
 8007258:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800725a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800725c:	aa07      	add	r2, sp, #28
 800725e:	a906      	add	r1, sp, #24
 8007260:	a805      	add	r0, sp, #20
 8007262:	f7fe fa61 	bl	8005728 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007266:	9b05      	ldr	r3, [sp, #20]
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	9b06      	ldr	r3, [sp, #24]
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	2302      	movs	r3, #2
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	4623      	mov	r3, r4
 8007274:	9a07      	ldr	r2, [sp, #28]
 8007276:	490a      	ldr	r1, [pc, #40]	; (80072a0 <xTimerCreateTimerTask+0x58>)
 8007278:	480a      	ldr	r0, [pc, #40]	; (80072a4 <xTimerCreateTimerTask+0x5c>)
 800727a:	f7ff fa95 	bl	80067a8 <xTaskCreateStatic>
 800727e:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <xTimerCreateTimerTask+0x60>)
 8007280:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007282:	b110      	cbz	r0, 800728a <xTimerCreateTimerTask+0x42>
}
 8007284:	2001      	movs	r0, #1
 8007286:	b008      	add	sp, #32
 8007288:	bd10      	pop	{r4, pc}
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800729a:	e7fe      	b.n	800729a <xTimerCreateTimerTask+0x52>
 800729c:	2000184c 	.word	0x2000184c
 80072a0:	08009834 	.word	0x08009834
 80072a4:	080073b5 	.word	0x080073b5
 80072a8:	20001850 	.word	0x20001850

080072ac <xTimerGenericCommand>:
	configASSERT( xTimer );
 80072ac:	b1d8      	cbz	r0, 80072e6 <xTimerGenericCommand+0x3a>
 80072ae:	469c      	mov	ip, r3
 80072b0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80072b2:	4815      	ldr	r0, [pc, #84]	; (8007308 <xTimerGenericCommand+0x5c>)
 80072b4:	6800      	ldr	r0, [r0, #0]
 80072b6:	b328      	cbz	r0, 8007304 <xTimerGenericCommand+0x58>
{
 80072b8:	b500      	push	{lr}
 80072ba:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80072bc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072be:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80072c0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072c2:	2905      	cmp	r1, #5
 80072c4:	dc18      	bgt.n	80072f8 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072c6:	f7ff fe55 	bl	8006f74 <xTaskGetSchedulerState>
 80072ca:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	bf0c      	ite	eq
 80072d2:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072d4:	461a      	movne	r2, r3
 80072d6:	4669      	mov	r1, sp
 80072d8:	480b      	ldr	r0, [pc, #44]	; (8007308 <xTimerGenericCommand+0x5c>)
 80072da:	6800      	ldr	r0, [r0, #0]
 80072dc:	f7fe fd18 	bl	8005d10 <xQueueGenericSend>
}
 80072e0:	b005      	add	sp, #20
 80072e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80072f6:	e7fe      	b.n	80072f6 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072f8:	2300      	movs	r3, #0
 80072fa:	4662      	mov	r2, ip
 80072fc:	4669      	mov	r1, sp
 80072fe:	f7fe fe19 	bl	8005f34 <xQueueGenericSendFromISR>
 8007302:	e7ed      	b.n	80072e0 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8007304:	2000      	movs	r0, #0
}
 8007306:	4770      	bx	lr
 8007308:	2000184c 	.word	0x2000184c

0800730c <prvSampleTimeNow>:
{
 800730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 8007314:	f7ff fb02 	bl	800691c <xTaskGetTickCount>
 8007318:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 800731a:	4b23      	ldr	r3, [pc, #140]	; (80073a8 <prvSampleTimeNow+0x9c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4283      	cmp	r3, r0
 8007320:	d808      	bhi.n	8007334 <prvSampleTimeNow+0x28>
 8007322:	2300      	movs	r3, #0
		*pxTimerListsWereSwitched = pdTRUE;
 8007324:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 8007328:	4b1f      	ldr	r3, [pc, #124]	; (80073a8 <prvSampleTimeNow+0x9c>)
 800732a:	601e      	str	r6, [r3, #0]
}
 800732c:	4630      	mov	r0, r6
 800732e:	b002      	add	sp, #8
 8007330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007334:	4d1d      	ldr	r5, [pc, #116]	; (80073ac <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007336:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800733a:	682b      	ldr	r3, [r5, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	b35a      	cbz	r2, 8007398 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007344:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007346:	f104 0904 	add.w	r9, r4, #4
 800734a:	4648      	mov	r0, r9
 800734c:	f7fe fb3e 	bl	80059cc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007352:	4620      	mov	r0, r4
 8007354:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007356:	69e3      	ldr	r3, [r4, #28]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d1ee      	bne.n	800733a <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800735c:	69a3      	ldr	r3, [r4, #24]
 800735e:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8007360:	429f      	cmp	r7, r3
 8007362:	d206      	bcs.n	8007372 <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007364:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007366:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007368:	4649      	mov	r1, r9
 800736a:	6828      	ldr	r0, [r5, #0]
 800736c:	f7fe fb15 	bl	800599a <vListInsert>
 8007370:	e7e3      	b.n	800733a <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007372:	f8cd 8000 	str.w	r8, [sp]
 8007376:	4643      	mov	r3, r8
 8007378:	463a      	mov	r2, r7
 800737a:	4641      	mov	r1, r8
 800737c:	4620      	mov	r0, r4
 800737e:	f7ff ff95 	bl	80072ac <xTimerGenericCommand>
				configASSERT( xResult );
 8007382:	2800      	cmp	r0, #0
 8007384:	d1d9      	bne.n	800733a <prvSampleTimeNow+0x2e>
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	e7fe      	b.n	8007396 <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 8007398:	4a05      	ldr	r2, [pc, #20]	; (80073b0 <prvSampleTimeNow+0xa4>)
 800739a:	6810      	ldr	r0, [r2, #0]
 800739c:	4903      	ldr	r1, [pc, #12]	; (80073ac <prvSampleTimeNow+0xa0>)
 800739e:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80073a0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7be      	b.n	8007324 <prvSampleTimeNow+0x18>
 80073a6:	bf00      	nop
 80073a8:	200017f8 	.word	0x200017f8
 80073ac:	20001728 	.word	0x20001728
 80073b0:	2000172c 	.word	0x2000172c

080073b4 <prvTimerTask>:
{
 80073b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073b8:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073ba:	4e74      	ldr	r6, [pc, #464]	; (800758c <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80073bc:	4d74      	ldr	r5, [pc, #464]	; (8007590 <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073be:	4f75      	ldr	r7, [pc, #468]	; (8007594 <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073c0:	6833      	ldr	r3, [r6, #0]
 80073c2:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 80073c6:	f1b8 0f00 	cmp.w	r8, #0
 80073ca:	d00f      	beq.n	80073ec <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80073d2:	f7ff fa9b 	bl	800690c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073d6:	a804      	add	r0, sp, #16
 80073d8:	f7ff ff98 	bl	800730c <prvSampleTimeNow>
 80073dc:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d154      	bne.n	800748e <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073e4:	4580      	cmp	r8, r0
 80073e6:	d923      	bls.n	8007430 <prvTimerTask+0x7c>
 80073e8:	2200      	movs	r2, #0
 80073ea:	e00d      	b.n	8007408 <prvTimerTask+0x54>
	vTaskSuspendAll();
 80073ec:	f7ff fa8e 	bl	800690c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073f0:	a804      	add	r0, sp, #16
 80073f2:	f7ff ff8b 	bl	800730c <prvSampleTimeNow>
 80073f6:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80073f8:	9b04      	ldr	r3, [sp, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d147      	bne.n	800748e <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	fab2 f282 	clz	r2, r2
 8007406:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007408:	eba8 0104 	sub.w	r1, r8, r4
 800740c:	6828      	ldr	r0, [r5, #0]
 800740e:	f7ff f833 	bl	8006478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007412:	f7ff fb23 	bl	8006a5c <xTaskResumeAll>
 8007416:	2800      	cmp	r0, #0
 8007418:	d13b      	bne.n	8007492 <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 800741a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800741e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007422:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	e030      	b.n	8007492 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8007430:	f7ff fb14 	bl	8006a5c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007434:	6833      	ldr	r3, [r6, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800743c:	f109 0004 	add.w	r0, r9, #4
 8007440:	f7fe fac4 	bl	80059cc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007444:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d004      	beq.n	8007456 <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800744c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8007450:	4648      	mov	r0, r9
 8007452:	4798      	blx	r3
}
 8007454:	e01d      	b.n	8007492 <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007456:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800745a:	4643      	mov	r3, r8
 800745c:	4622      	mov	r2, r4
 800745e:	4441      	add	r1, r8
 8007460:	4648      	mov	r0, r9
 8007462:	f7ff fe95 	bl	8007190 <prvInsertTimerInActiveList>
 8007466:	2800      	cmp	r0, #0
 8007468:	d0f0      	beq.n	800744c <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800746a:	2100      	movs	r1, #0
 800746c:	9100      	str	r1, [sp, #0]
 800746e:	460b      	mov	r3, r1
 8007470:	4642      	mov	r2, r8
 8007472:	4648      	mov	r0, r9
 8007474:	f7ff ff1a 	bl	80072ac <xTimerGenericCommand>
			configASSERT( xResult );
 8007478:	2800      	cmp	r0, #0
 800747a:	d1e7      	bne.n	800744c <prvTimerTask+0x98>
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	e7fe      	b.n	800748c <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 800748e:	f7ff fae5 	bl	8006a5c <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007492:	2400      	movs	r4, #0
}
 8007494:	e006      	b.n	80074a4 <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007496:	9907      	ldr	r1, [sp, #28]
 8007498:	9806      	ldr	r0, [sp, #24]
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da09      	bge.n	80074b8 <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074a4:	4622      	mov	r2, r4
 80074a6:	a904      	add	r1, sp, #16
 80074a8:	6828      	ldr	r0, [r5, #0]
 80074aa:	f7fe fda9 	bl	8006000 <xQueueReceive>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d086      	beq.n	80073c0 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074b2:	9b04      	ldr	r3, [sp, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dbee      	blt.n	8007496 <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80074c0:	b11b      	cbz	r3, 80074ca <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074c2:	f108 0004 	add.w	r0, r8, #4
 80074c6:	f7fe fa81 	bl	80059cc <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074ca:	a803      	add	r0, sp, #12
 80074cc:	f7ff ff1e 	bl	800730c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80074d0:	9b04      	ldr	r3, [sp, #16]
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	d8e6      	bhi.n	80074a4 <prvTimerTask+0xf0>
 80074d6:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <prvTimerTask+0x128>)
 80074d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074dc:	08007505 	.word	0x08007505
 80074e0:	08007505 	.word	0x08007505
 80074e4:	08007505 	.word	0x08007505
 80074e8:	080074a5 	.word	0x080074a5
 80074ec:	08007553 	.word	0x08007553
 80074f0:	0800757b 	.word	0x0800757b
 80074f4:	08007505 	.word	0x08007505
 80074f8:	08007505 	.word	0x08007505
 80074fc:	080074a5 	.word	0x080074a5
 8007500:	08007553 	.word	0x08007553
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007504:	9b05      	ldr	r3, [sp, #20]
 8007506:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800750a:	4602      	mov	r2, r0
 800750c:	4419      	add	r1, r3
 800750e:	4640      	mov	r0, r8
 8007510:	f7ff fe3e 	bl	8007190 <prvInsertTimerInActiveList>
 8007514:	2800      	cmp	r0, #0
 8007516:	d0c5      	beq.n	80074a4 <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007518:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800751c:	4640      	mov	r0, r8
 800751e:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007520:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d1bd      	bne.n	80074a4 <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007528:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800752c:	9400      	str	r4, [sp, #0]
 800752e:	4623      	mov	r3, r4
 8007530:	9905      	ldr	r1, [sp, #20]
 8007532:	440a      	add	r2, r1
 8007534:	4621      	mov	r1, r4
 8007536:	4640      	mov	r0, r8
 8007538:	f7ff feb8 	bl	80072ac <xTimerGenericCommand>
							configASSERT( xResult );
 800753c:	2800      	cmp	r0, #0
 800753e:	d1b1      	bne.n	80074a4 <prvTimerTask+0xf0>
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	e7fe      	b.n	8007550 <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007552:	9905      	ldr	r1, [sp, #20]
 8007554:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007558:	b131      	cbz	r1, 8007568 <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800755a:	4603      	mov	r3, r0
 800755c:	4602      	mov	r2, r0
 800755e:	4401      	add	r1, r0
 8007560:	4640      	mov	r0, r8
 8007562:	f7ff fe15 	bl	8007190 <prvInsertTimerInActiveList>
					break;
 8007566:	e79d      	b.n	80074a4 <prvTimerTask+0xf0>
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007578:	e7fe      	b.n	8007578 <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800757a:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d190      	bne.n	80074a4 <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 8007582:	4640      	mov	r0, r8
 8007584:	f000 fa56 	bl	8007a34 <vPortFree>
 8007588:	e78c      	b.n	80074a4 <prvTimerTask+0xf0>
 800758a:	bf00      	nop
 800758c:	20001728 	.word	0x20001728
 8007590:	2000184c 	.word	0x2000184c
 8007594:	2000172c 	.word	0x2000172c

08007598 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007598:	b510      	push	{r4, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	4614      	mov	r4, r2
 800759e:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80075a0:	f06f 0301 	mvn.w	r3, #1
 80075a4:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80075a6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80075a8:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80075aa:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80075ac:	2300      	movs	r3, #0
 80075ae:	4669      	mov	r1, sp
 80075b0:	4802      	ldr	r0, [pc, #8]	; (80075bc <xTimerPendFunctionCallFromISR+0x24>)
 80075b2:	6800      	ldr	r0, [r0, #0]
 80075b4:	f7fe fcbe 	bl	8005f34 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 80075b8:	b004      	add	sp, #16
 80075ba:	bd10      	pop	{r4, pc}
 80075bc:	2000184c 	.word	0x2000184c

080075c0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075c0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <prvTaskExitError+0x3c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d008      	beq.n	80075e2 <prvTaskExitError+0x22>
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	e7fe      	b.n	80075e0 <prvTaskExitError+0x20>
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075f2:	9b01      	ldr	r3, [sp, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0fc      	beq.n	80075f2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075f8:	b002      	add	sp, #8
 80075fa:	4770      	bx	lr
 80075fc:	200003bc 	.word	0x200003bc

08007600 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007600:	4806      	ldr	r0, [pc, #24]	; (800761c <prvPortStartFirstTask+0x1c>)
 8007602:	6800      	ldr	r0, [r0, #0]
 8007604:	6800      	ldr	r0, [r0, #0]
 8007606:	f380 8808 	msr	MSP, r0
 800760a:	b662      	cpsie	i
 800760c:	b661      	cpsie	f
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	df00      	svc	0
 8007618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800761a:	0000      	.short	0x0000
 800761c:	e000ed08 	.word	0xe000ed08

08007620 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007624:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007628:	f021 0101 	bic.w	r1, r1, #1
 800762c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007630:	4b03      	ldr	r3, [pc, #12]	; (8007640 <pxPortInitialiseStack+0x20>)
 8007632:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007636:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800763a:	3840      	subs	r0, #64	; 0x40
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	080075c1 	.word	0x080075c1
	...

08007650 <SVC_Handler>:
	__asm volatile (
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <pxCurrentTCBConst2>)
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800765a:	f380 8809 	msr	PSP, r0
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f380 8811 	msr	BASEPRI, r0
 800766a:	f04e 0e0d 	orr.w	lr, lr, #13
 800766e:	4770      	bx	lr

08007670 <pxCurrentTCBConst2>:
 8007670:	2000122c 	.word	0x2000122c

08007674 <vPortEnterCritical>:
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007684:	4a0b      	ldr	r2, [pc, #44]	; (80076b4 <vPortEnterCritical+0x40>)
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	3301      	adds	r3, #1
 800768a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800768c:	2b01      	cmp	r3, #1
 800768e:	d000      	beq.n	8007692 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007690:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007692:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007696:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800769a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800769e:	d0f7      	beq.n	8007690 <vPortEnterCritical+0x1c>
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	e7fe      	b.n	80076b0 <vPortEnterCritical+0x3c>
 80076b2:	bf00      	nop
 80076b4:	200003bc 	.word	0x200003bc

080076b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80076b8:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <vPortExitCritical+0x28>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	b943      	cbnz	r3, 80076d0 <vPortExitCritical+0x18>
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	e7fe      	b.n	80076ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80076d0:	3b01      	subs	r3, #1
 80076d2:	4a03      	ldr	r2, [pc, #12]	; (80076e0 <vPortExitCritical+0x28>)
 80076d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076d6:	b90b      	cbnz	r3, 80076dc <vPortExitCritical+0x24>
	__asm volatile
 80076d8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	200003bc 	.word	0x200003bc
	...

080076f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076f0:	f3ef 8009 	mrs	r0, PSP
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <pxCurrentTCBConst>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007700:	6010      	str	r0, [r2, #0]
 8007702:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007706:	f04f 0050 	mov.w	r0, #80	; 0x50
 800770a:	f380 8811 	msr	BASEPRI, r0
 800770e:	f7ff fa9d 	bl	8006c4c <vTaskSwitchContext>
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8811 	msr	BASEPRI, r0
 800771a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800771e:	6819      	ldr	r1, [r3, #0]
 8007720:	6808      	ldr	r0, [r1, #0]
 8007722:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007726:	f380 8809 	msr	PSP, r0
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	4770      	bx	lr

08007730 <pxCurrentTCBConst>:
 8007730:	2000122c 	.word	0x2000122c

08007734 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007734:	b508      	push	{r3, lr}
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007746:	f7ff f8ef 	bl	8006928 <xTaskIncrementTick>
 800774a:	b128      	cbz	r0, 8007758 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800774c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007754:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007758:	2300      	movs	r3, #0
 800775a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800775e:	bd08      	pop	{r3, pc}

08007760 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007760:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007764:	2300      	movs	r3, #0
 8007766:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007768:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <vPortSetupTimerInterrupt+0x20>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4905      	ldr	r1, [pc, #20]	; (8007784 <vPortSetupTimerInterrupt+0x24>)
 8007770:	fba1 1303 	umull	r1, r3, r1, r3
 8007774:	099b      	lsrs	r3, r3, #6
 8007776:	3b01      	subs	r3, #1
 8007778:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800777a:	2307      	movs	r3, #7
 800777c:	6113      	str	r3, [r2, #16]
}
 800777e:	4770      	bx	lr
 8007780:	200003b0 	.word	0x200003b0
 8007784:	10624dd3 	.word	0x10624dd3

08007788 <xPortStartScheduler>:
{
 8007788:	b510      	push	{r4, lr}
 800778a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800778c:	4b2c      	ldr	r3, [pc, #176]	; (8007840 <xPortStartScheduler+0xb8>)
 800778e:	781a      	ldrb	r2, [r3, #0]
 8007790:	b2d2      	uxtb	r2, r2
 8007792:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007794:	22ff      	movs	r2, #255	; 0xff
 8007796:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80077a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077a8:	4a26      	ldr	r2, [pc, #152]	; (8007844 <xPortStartScheduler+0xbc>)
 80077aa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077ac:	4b26      	ldr	r3, [pc, #152]	; (8007848 <xPortStartScheduler+0xc0>)
 80077ae:	2207      	movs	r2, #7
 80077b0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80077b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077ba:	d013      	beq.n	80077e4 <xPortStartScheduler+0x5c>
 80077bc:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077ca:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80077ce:	4610      	mov	r0, r2
 80077d0:	3a01      	subs	r2, #1
 80077d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80077d6:	d1f2      	bne.n	80077be <xPortStartScheduler+0x36>
 80077d8:	4a1b      	ldr	r2, [pc, #108]	; (8007848 <xPortStartScheduler+0xc0>)
 80077da:	6010      	str	r0, [r2, #0]
 80077dc:	f88d 3003 	strb.w	r3, [sp, #3]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077e0:	2803      	cmp	r0, #3
 80077e2:	d008      	beq.n	80077f6 <xPortStartScheduler+0x6e>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	e7fe      	b.n	80077f4 <xPortStartScheduler+0x6c>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077f6:	4b14      	ldr	r3, [pc, #80]	; (8007848 <xPortStartScheduler+0xc0>)
 80077f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80077fc:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077fe:	9b01      	ldr	r3, [sp, #4]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	4a0f      	ldr	r2, [pc, #60]	; (8007840 <xPortStartScheduler+0xb8>)
 8007804:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007806:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800780a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800780e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007812:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007816:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800781a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800781e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007822:	f7ff ff9d 	bl	8007760 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007826:	2400      	movs	r4, #0
 8007828:	4b08      	ldr	r3, [pc, #32]	; (800784c <xPortStartScheduler+0xc4>)
 800782a:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800782c:	f7ff fee8 	bl	8007600 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007830:	f7ff fa0c 	bl	8006c4c <vTaskSwitchContext>
	prvTaskExitError();
 8007834:	f7ff fec4 	bl	80075c0 <prvTaskExitError>
}
 8007838:	4620      	mov	r0, r4
 800783a:	b002      	add	sp, #8
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	e000e400 	.word	0xe000e400
 8007844:	20001854 	.word	0x20001854
 8007848:	20001858 	.word	0x20001858
 800784c:	200003bc 	.word	0x200003bc

08007850 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007850:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007854:	2b0f      	cmp	r3, #15
 8007856:	d90f      	bls.n	8007878 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007858:	4a11      	ldr	r2, [pc, #68]	; (80078a0 <vPortValidateInterruptPriority+0x50>)
 800785a:	5c9b      	ldrb	r3, [r3, r2]
 800785c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800785e:	4a11      	ldr	r2, [pc, #68]	; (80078a4 <vPortValidateInterruptPriority+0x54>)
 8007860:	7812      	ldrb	r2, [r2, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d908      	bls.n	8007878 <vPortValidateInterruptPriority+0x28>
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	e7fe      	b.n	8007876 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007878:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800787c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007880:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007884:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <vPortValidateInterruptPriority+0x58>)
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	4293      	cmp	r3, r2
 800788a:	d908      	bls.n	800789e <vPortValidateInterruptPriority+0x4e>
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	e7fe      	b.n	800789c <vPortValidateInterruptPriority+0x4c>
	}
 800789e:	4770      	bx	lr
 80078a0:	e000e3f0 	.word	0xe000e3f0
 80078a4:	20001854 	.word	0x20001854
 80078a8:	20001858 	.word	0x20001858

080078ac <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078ac:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078ae:	4b14      	ldr	r3, [pc, #80]	; (8007900 <prvInsertBlockIntoFreeList+0x54>)
 80078b0:	461a      	mov	r2, r3
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4283      	cmp	r3, r0
 80078b6:	d3fb      	bcc.n	80078b0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078b8:	6854      	ldr	r4, [r2, #4]
 80078ba:	1911      	adds	r1, r2, r4
 80078bc:	4288      	cmp	r0, r1
 80078be:	d009      	beq.n	80078d4 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078c0:	6844      	ldr	r4, [r0, #4]
 80078c2:	1901      	adds	r1, r0, r4
 80078c4:	428b      	cmp	r3, r1
 80078c6:	d00f      	beq.n	80078e8 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078c8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078ca:	4282      	cmp	r2, r0
 80078cc:	d000      	beq.n	80078d0 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078ce:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078d0:	bc10      	pop	{r4}
 80078d2:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078d4:	6841      	ldr	r1, [r0, #4]
 80078d6:	4421      	add	r1, r4
 80078d8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078da:	460c      	mov	r4, r1
 80078dc:	4411      	add	r1, r2
 80078de:	428b      	cmp	r3, r1
 80078e0:	d001      	beq.n	80078e6 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078e2:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 80078e4:	e7f4      	b.n	80078d0 <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078e6:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078e8:	4906      	ldr	r1, [pc, #24]	; (8007904 <prvInsertBlockIntoFreeList+0x58>)
 80078ea:	6809      	ldr	r1, [r1, #0]
 80078ec:	428b      	cmp	r3, r1
 80078ee:	d005      	beq.n	80078fc <prvInsertBlockIntoFreeList+0x50>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	4423      	add	r3, r4
 80078f4:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078f6:	6813      	ldr	r3, [r2, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	e7e5      	b.n	80078c8 <prvInsertBlockIntoFreeList+0x1c>
 80078fc:	460b      	mov	r3, r1
 80078fe:	e7e3      	b.n	80078c8 <prvInsertBlockIntoFreeList+0x1c>
 8007900:	2000280c 	.word	0x2000280c
 8007904:	2000185c 	.word	0x2000185c

08007908 <pvPortMalloc>:
{
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800790c:	f7fe fffe 	bl	800690c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007910:	4b42      	ldr	r3, [pc, #264]	; (8007a1c <pvPortMalloc+0x114>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	b1b3      	cbz	r3, 8007944 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007916:	4b42      	ldr	r3, [pc, #264]	; (8007a20 <pvPortMalloc+0x118>)
 8007918:	681d      	ldr	r5, [r3, #0]
 800791a:	4225      	tst	r5, r4
 800791c:	d179      	bne.n	8007a12 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 800791e:	2c00      	cmp	r4, #0
 8007920:	d077      	beq.n	8007a12 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007922:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007926:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800792a:	bf1c      	itt	ne
 800792c:	f022 0207 	bicne.w	r2, r2, #7
 8007930:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007932:	2a00      	cmp	r2, #0
 8007934:	d06d      	beq.n	8007a12 <pvPortMalloc+0x10a>
 8007936:	4b3b      	ldr	r3, [pc, #236]	; (8007a24 <pvPortMalloc+0x11c>)
 8007938:	681e      	ldr	r6, [r3, #0]
 800793a:	4296      	cmp	r6, r2
 800793c:	d369      	bcc.n	8007a12 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 800793e:	493a      	ldr	r1, [pc, #232]	; (8007a28 <pvPortMalloc+0x120>)
 8007940:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007942:	e027      	b.n	8007994 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007944:	4a39      	ldr	r2, [pc, #228]	; (8007a2c <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007946:	f012 0f07 	tst.w	r2, #7
 800794a:	d007      	beq.n	800795c <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800794c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800794e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007952:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8007956:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007958:	460a      	mov	r2, r1
 800795a:	e001      	b.n	8007960 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800795c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007960:	4831      	ldr	r0, [pc, #196]	; (8007a28 <pvPortMalloc+0x120>)
 8007962:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007964:	2100      	movs	r1, #0
 8007966:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007968:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800796a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800796c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007970:	482a      	ldr	r0, [pc, #168]	; (8007a1c <pvPortMalloc+0x114>)
 8007972:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007974:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007976:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007978:	1a99      	subs	r1, r3, r2
 800797a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800797c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800797e:	4b2c      	ldr	r3, [pc, #176]	; (8007a30 <pvPortMalloc+0x128>)
 8007980:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007982:	4b28      	ldr	r3, [pc, #160]	; (8007a24 <pvPortMalloc+0x11c>)
 8007984:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007986:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <pvPortMalloc+0x118>)
 8007988:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800798c:	601a      	str	r2, [r3, #0]
}
 800798e:	e7c2      	b.n	8007916 <pvPortMalloc+0xe>
 8007990:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007992:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	4293      	cmp	r3, r2
 8007998:	d202      	bcs.n	80079a0 <pvPortMalloc+0x98>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f7      	bne.n	8007990 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 80079a0:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <pvPortMalloc+0x114>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d034      	beq.n	8007a12 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079a8:	680f      	ldr	r7, [r1, #0]
 80079aa:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	2b10      	cmp	r3, #16
 80079b6:	d910      	bls.n	80079da <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079b8:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ba:	f010 0f07 	tst.w	r0, #7
 80079be:	d008      	beq.n	80079d2 <pvPortMalloc+0xca>
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	e7fe      	b.n	80079d0 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079d2:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079d4:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079d6:	f7ff ff69 	bl	80078ac <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	1af6      	subs	r6, r6, r3
 80079de:	4a11      	ldr	r2, [pc, #68]	; (8007a24 <pvPortMalloc+0x11c>)
 80079e0:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079e2:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <pvPortMalloc+0x128>)
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079e8:	bf3c      	itt	cc
 80079ea:	4a11      	ldrcc	r2, [pc, #68]	; (8007a30 <pvPortMalloc+0x128>)
 80079ec:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ee:	431d      	orrs	r5, r3
 80079f0:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80079f6:	f7ff f831 	bl	8006a5c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079fa:	f017 0f07 	tst.w	r7, #7
 80079fe:	d00b      	beq.n	8007a18 <pvPortMalloc+0x110>
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	e7fe      	b.n	8007a10 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007a12:	f7ff f823 	bl	8006a5c <xTaskResumeAll>
 8007a16:	2700      	movs	r7, #0
}
 8007a18:	4638      	mov	r0, r7
 8007a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1c:	2000185c 	.word	0x2000185c
 8007a20:	20002800 	.word	0x20002800
 8007a24:	20002804 	.word	0x20002804
 8007a28:	2000280c 	.word	0x2000280c
 8007a2c:	20001860 	.word	0x20001860
 8007a30:	20002808 	.word	0x20002808

08007a34 <vPortFree>:
	if( pv != NULL )
 8007a34:	b378      	cbz	r0, 8007a96 <vPortFree+0x62>
{
 8007a36:	b510      	push	{r4, lr}
 8007a38:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007a3e:	4a16      	ldr	r2, [pc, #88]	; (8007a98 <vPortFree+0x64>)
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	4213      	tst	r3, r2
 8007a44:	d108      	bne.n	8007a58 <vPortFree+0x24>
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	e7fe      	b.n	8007a56 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a58:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007a5c:	b141      	cbz	r1, 8007a70 <vPortFree+0x3c>
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	e7fe      	b.n	8007a6e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a70:	ea23 0302 	bic.w	r3, r3, r2
 8007a74:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007a78:	f7fe ff48 	bl	800690c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a7c:	4a07      	ldr	r2, [pc, #28]	; (8007a9c <vPortFree+0x68>)
 8007a7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007a82:	6811      	ldr	r1, [r2, #0]
 8007a84:	440b      	add	r3, r1
 8007a86:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a88:	f1a4 0008 	sub.w	r0, r4, #8
 8007a8c:	f7ff ff0e 	bl	80078ac <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007a90:	f7fe ffe4 	bl	8006a5c <xTaskResumeAll>
}
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	4770      	bx	lr
 8007a98:	20002800 	.word	0x20002800
 8007a9c:	20002804 	.word	0x20002804

08007aa0 <__itoa>:
 8007aa0:	1e93      	subs	r3, r2, #2
 8007aa2:	2b22      	cmp	r3, #34	; 0x22
 8007aa4:	b510      	push	{r4, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	d904      	bls.n	8007ab4 <__itoa+0x14>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	461c      	mov	r4, r3
 8007aae:	700b      	strb	r3, [r1, #0]
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	bd10      	pop	{r4, pc}
 8007ab4:	2a0a      	cmp	r2, #10
 8007ab6:	d109      	bne.n	8007acc <__itoa+0x2c>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	da07      	bge.n	8007acc <__itoa+0x2c>
 8007abc:	232d      	movs	r3, #45	; 0x2d
 8007abe:	700b      	strb	r3, [r1, #0]
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	4240      	negs	r0, r0
 8007ac4:	4421      	add	r1, r4
 8007ac6:	f000 f843 	bl	8007b50 <__utoa>
 8007aca:	e7f1      	b.n	8007ab0 <__itoa+0x10>
 8007acc:	2100      	movs	r1, #0
 8007ace:	e7f9      	b.n	8007ac4 <__itoa+0x24>

08007ad0 <itoa>:
 8007ad0:	f7ff bfe6 	b.w	8007aa0 <__itoa>

08007ad4 <rand>:
 8007ad4:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <rand+0x5c>)
 8007ad6:	b510      	push	{r4, lr}
 8007ad8:	681c      	ldr	r4, [r3, #0]
 8007ada:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007adc:	b9b3      	cbnz	r3, 8007b0c <rand+0x38>
 8007ade:	2018      	movs	r0, #24
 8007ae0:	f000 fa76 	bl	8007fd0 <malloc>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6320      	str	r0, [r4, #48]	; 0x30
 8007ae8:	b920      	cbnz	r0, 8007af4 <rand+0x20>
 8007aea:	2152      	movs	r1, #82	; 0x52
 8007aec:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <rand+0x60>)
 8007aee:	4812      	ldr	r0, [pc, #72]	; (8007b38 <rand+0x64>)
 8007af0:	f000 fa08 	bl	8007f04 <__assert_func>
 8007af4:	4911      	ldr	r1, [pc, #68]	; (8007b3c <rand+0x68>)
 8007af6:	4b12      	ldr	r3, [pc, #72]	; (8007b40 <rand+0x6c>)
 8007af8:	e9c0 1300 	strd	r1, r3, [r0]
 8007afc:	4b11      	ldr	r3, [pc, #68]	; (8007b44 <rand+0x70>)
 8007afe:	2100      	movs	r1, #0
 8007b00:	6083      	str	r3, [r0, #8]
 8007b02:	230b      	movs	r3, #11
 8007b04:	8183      	strh	r3, [r0, #12]
 8007b06:	2001      	movs	r0, #1
 8007b08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007b0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007b0e:	480e      	ldr	r0, [pc, #56]	; (8007b48 <rand+0x74>)
 8007b10:	690b      	ldr	r3, [r1, #16]
 8007b12:	694c      	ldr	r4, [r1, #20]
 8007b14:	4358      	muls	r0, r3
 8007b16:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <rand+0x78>)
 8007b18:	fb02 0004 	mla	r0, r2, r4, r0
 8007b1c:	fba3 3202 	umull	r3, r2, r3, r2
 8007b20:	3301      	adds	r3, #1
 8007b22:	eb40 0002 	adc.w	r0, r0, r2
 8007b26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007b2a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007b2e:	bd10      	pop	{r4, pc}
 8007b30:	20000418 	.word	0x20000418
 8007b34:	0800983c 	.word	0x0800983c
 8007b38:	08009853 	.word	0x08009853
 8007b3c:	abcd330e 	.word	0xabcd330e
 8007b40:	e66d1234 	.word	0xe66d1234
 8007b44:	0005deec 	.word	0x0005deec
 8007b48:	5851f42d 	.word	0x5851f42d
 8007b4c:	4c957f2d 	.word	0x4c957f2d

08007b50 <__utoa>:
 8007b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b52:	b08b      	sub	sp, #44	; 0x2c
 8007b54:	4605      	mov	r5, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	466e      	mov	r6, sp
 8007b5a:	4c1d      	ldr	r4, [pc, #116]	; (8007bd0 <__utoa+0x80>)
 8007b5c:	f104 0c20 	add.w	ip, r4, #32
 8007b60:	4637      	mov	r7, r6
 8007b62:	6820      	ldr	r0, [r4, #0]
 8007b64:	6861      	ldr	r1, [r4, #4]
 8007b66:	3408      	adds	r4, #8
 8007b68:	c703      	stmia	r7!, {r0, r1}
 8007b6a:	4564      	cmp	r4, ip
 8007b6c:	463e      	mov	r6, r7
 8007b6e:	d1f7      	bne.n	8007b60 <__utoa+0x10>
 8007b70:	7921      	ldrb	r1, [r4, #4]
 8007b72:	6820      	ldr	r0, [r4, #0]
 8007b74:	7139      	strb	r1, [r7, #4]
 8007b76:	1e91      	subs	r1, r2, #2
 8007b78:	2922      	cmp	r1, #34	; 0x22
 8007b7a:	6038      	str	r0, [r7, #0]
 8007b7c:	f04f 0100 	mov.w	r1, #0
 8007b80:	d904      	bls.n	8007b8c <__utoa+0x3c>
 8007b82:	7019      	strb	r1, [r3, #0]
 8007b84:	460b      	mov	r3, r1
 8007b86:	4618      	mov	r0, r3
 8007b88:	b00b      	add	sp, #44	; 0x2c
 8007b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b8c:	1e58      	subs	r0, r3, #1
 8007b8e:	4684      	mov	ip, r0
 8007b90:	fbb5 f7f2 	udiv	r7, r5, r2
 8007b94:	fb02 5617 	mls	r6, r2, r7, r5
 8007b98:	3628      	adds	r6, #40	; 0x28
 8007b9a:	446e      	add	r6, sp
 8007b9c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007ba6:	462e      	mov	r6, r5
 8007ba8:	42b2      	cmp	r2, r6
 8007baa:	463d      	mov	r5, r7
 8007bac:	f101 0101 	add.w	r1, r1, #1
 8007bb0:	d9ee      	bls.n	8007b90 <__utoa+0x40>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	545a      	strb	r2, [r3, r1]
 8007bb6:	1919      	adds	r1, r3, r4
 8007bb8:	1aa5      	subs	r5, r4, r2
 8007bba:	42aa      	cmp	r2, r5
 8007bbc:	dae3      	bge.n	8007b86 <__utoa+0x36>
 8007bbe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007bc2:	780e      	ldrb	r6, [r1, #0]
 8007bc4:	3201      	adds	r2, #1
 8007bc6:	7006      	strb	r6, [r0, #0]
 8007bc8:	f801 5901 	strb.w	r5, [r1], #-1
 8007bcc:	e7f4      	b.n	8007bb8 <__utoa+0x68>
 8007bce:	bf00      	nop
 8007bd0:	080098ab 	.word	0x080098ab

08007bd4 <std>:
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	b510      	push	{r4, lr}
 8007bd8:	4604      	mov	r4, r0
 8007bda:	e9c0 3300 	strd	r3, r3, [r0]
 8007bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007be2:	6083      	str	r3, [r0, #8]
 8007be4:	8181      	strh	r1, [r0, #12]
 8007be6:	6643      	str	r3, [r0, #100]	; 0x64
 8007be8:	81c2      	strh	r2, [r0, #14]
 8007bea:	6183      	str	r3, [r0, #24]
 8007bec:	4619      	mov	r1, r3
 8007bee:	2208      	movs	r2, #8
 8007bf0:	305c      	adds	r0, #92	; 0x5c
 8007bf2:	f000 f8f4 	bl	8007dde <memset>
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <std+0x58>)
 8007bf8:	6224      	str	r4, [r4, #32]
 8007bfa:	6263      	str	r3, [r4, #36]	; 0x24
 8007bfc:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <std+0x5c>)
 8007bfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c00:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <std+0x60>)
 8007c02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c04:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <std+0x64>)
 8007c06:	6323      	str	r3, [r4, #48]	; 0x30
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <std+0x68>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d006      	beq.n	8007c1c <std+0x48>
 8007c0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c12:	4294      	cmp	r4, r2
 8007c14:	d002      	beq.n	8007c1c <std+0x48>
 8007c16:	33d0      	adds	r3, #208	; 0xd0
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	d105      	bne.n	8007c28 <std+0x54>
 8007c1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c24:	f000 b954 	b.w	8007ed0 <__retarget_lock_init_recursive>
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	bf00      	nop
 8007c2c:	08007d59 	.word	0x08007d59
 8007c30:	08007d7b 	.word	0x08007d7b
 8007c34:	08007db3 	.word	0x08007db3
 8007c38:	08007dd7 	.word	0x08007dd7
 8007c3c:	20002814 	.word	0x20002814

08007c40 <stdio_exit_handler>:
 8007c40:	4a02      	ldr	r2, [pc, #8]	; (8007c4c <stdio_exit_handler+0xc>)
 8007c42:	4903      	ldr	r1, [pc, #12]	; (8007c50 <stdio_exit_handler+0x10>)
 8007c44:	4803      	ldr	r0, [pc, #12]	; (8007c54 <stdio_exit_handler+0x14>)
 8007c46:	f000 b869 	b.w	8007d1c <_fwalk_sglue>
 8007c4a:	bf00      	nop
 8007c4c:	200003c0 	.word	0x200003c0
 8007c50:	0800823d 	.word	0x0800823d
 8007c54:	200003cc 	.word	0x200003cc

08007c58 <cleanup_stdio>:
 8007c58:	6841      	ldr	r1, [r0, #4]
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <cleanup_stdio+0x34>)
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	4604      	mov	r4, r0
 8007c62:	d001      	beq.n	8007c68 <cleanup_stdio+0x10>
 8007c64:	f000 faea 	bl	800823c <_fflush_r>
 8007c68:	68a1      	ldr	r1, [r4, #8]
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <cleanup_stdio+0x38>)
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	d002      	beq.n	8007c76 <cleanup_stdio+0x1e>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fae3 	bl	800823c <_fflush_r>
 8007c76:	68e1      	ldr	r1, [r4, #12]
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <cleanup_stdio+0x3c>)
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	d004      	beq.n	8007c88 <cleanup_stdio+0x30>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c84:	f000 bada 	b.w	800823c <_fflush_r>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20002814 	.word	0x20002814
 8007c90:	2000287c 	.word	0x2000287c
 8007c94:	200028e4 	.word	0x200028e4

08007c98 <global_stdio_init.part.0>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <global_stdio_init.part.0+0x30>)
 8007c9c:	4c0b      	ldr	r4, [pc, #44]	; (8007ccc <global_stdio_init.part.0+0x34>)
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	; (8007cd0 <global_stdio_init.part.0+0x38>)
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	2104      	movs	r1, #4
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f7ff ff94 	bl	8007bd4 <std>
 8007cac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	2109      	movs	r1, #9
 8007cb4:	f7ff ff8e 	bl	8007bd4 <std>
 8007cb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cc2:	2112      	movs	r1, #18
 8007cc4:	f7ff bf86 	b.w	8007bd4 <std>
 8007cc8:	2000294c 	.word	0x2000294c
 8007ccc:	20002814 	.word	0x20002814
 8007cd0:	08007c41 	.word	0x08007c41

08007cd4 <__sfp_lock_acquire>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sfp_lock_acquire+0x8>)
 8007cd6:	f000 b8fc 	b.w	8007ed2 <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	20002955 	.word	0x20002955

08007ce0 <__sfp_lock_release>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__sfp_lock_release+0x8>)
 8007ce2:	f000 b8f7 	b.w	8007ed4 <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	20002955 	.word	0x20002955

08007cec <__sinit>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	4604      	mov	r4, r0
 8007cf0:	f7ff fff0 	bl	8007cd4 <__sfp_lock_acquire>
 8007cf4:	6a23      	ldr	r3, [r4, #32]
 8007cf6:	b11b      	cbz	r3, 8007d00 <__sinit+0x14>
 8007cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cfc:	f7ff bff0 	b.w	8007ce0 <__sfp_lock_release>
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <__sinit+0x28>)
 8007d02:	6223      	str	r3, [r4, #32]
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <__sinit+0x2c>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f5      	bne.n	8007cf8 <__sinit+0xc>
 8007d0c:	f7ff ffc4 	bl	8007c98 <global_stdio_init.part.0>
 8007d10:	e7f2      	b.n	8007cf8 <__sinit+0xc>
 8007d12:	bf00      	nop
 8007d14:	08007c59 	.word	0x08007c59
 8007d18:	2000294c 	.word	0x2000294c

08007d1c <_fwalk_sglue>:
 8007d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	4607      	mov	r7, r0
 8007d22:	4688      	mov	r8, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	2600      	movs	r6, #0
 8007d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007d30:	d505      	bpl.n	8007d3e <_fwalk_sglue+0x22>
 8007d32:	6824      	ldr	r4, [r4, #0]
 8007d34:	2c00      	cmp	r4, #0
 8007d36:	d1f7      	bne.n	8007d28 <_fwalk_sglue+0xc>
 8007d38:	4630      	mov	r0, r6
 8007d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d907      	bls.n	8007d54 <_fwalk_sglue+0x38>
 8007d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	d003      	beq.n	8007d54 <_fwalk_sglue+0x38>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4638      	mov	r0, r7
 8007d50:	47c0      	blx	r8
 8007d52:	4306      	orrs	r6, r0
 8007d54:	3568      	adds	r5, #104	; 0x68
 8007d56:	e7e9      	b.n	8007d2c <_fwalk_sglue+0x10>

08007d58 <__sread>:
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d60:	f000 f868 	bl	8007e34 <_read_r>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	bfab      	itete	ge
 8007d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d6c:	181b      	addge	r3, r3, r0
 8007d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d72:	bfac      	ite	ge
 8007d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d76:	81a3      	strhlt	r3, [r4, #12]
 8007d78:	bd10      	pop	{r4, pc}

08007d7a <__swrite>:
 8007d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7e:	461f      	mov	r7, r3
 8007d80:	898b      	ldrh	r3, [r1, #12]
 8007d82:	4605      	mov	r5, r0
 8007d84:	05db      	lsls	r3, r3, #23
 8007d86:	460c      	mov	r4, r1
 8007d88:	4616      	mov	r6, r2
 8007d8a:	d505      	bpl.n	8007d98 <__swrite+0x1e>
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d94:	f000 f83c 	bl	8007e10 <_lseek_r>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	4632      	mov	r2, r6
 8007d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	4628      	mov	r0, r5
 8007da4:	463b      	mov	r3, r7
 8007da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dae:	f000 b853 	b.w	8007e58 <_write_r>

08007db2 <__sseek>:
 8007db2:	b510      	push	{r4, lr}
 8007db4:	460c      	mov	r4, r1
 8007db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dba:	f000 f829 	bl	8007e10 <_lseek_r>
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	bf15      	itete	ne
 8007dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dce:	81a3      	strheq	r3, [r4, #12]
 8007dd0:	bf18      	it	ne
 8007dd2:	81a3      	strhne	r3, [r4, #12]
 8007dd4:	bd10      	pop	{r4, pc}

08007dd6 <__sclose>:
 8007dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dda:	f000 b809 	b.w	8007df0 <_close_r>

08007dde <memset>:
 8007dde:	4603      	mov	r3, r0
 8007de0:	4402      	add	r2, r0
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d100      	bne.n	8007de8 <memset+0xa>
 8007de6:	4770      	bx	lr
 8007de8:	f803 1b01 	strb.w	r1, [r3], #1
 8007dec:	e7f9      	b.n	8007de2 <memset+0x4>
	...

08007df0 <_close_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	2300      	movs	r3, #0
 8007df4:	4d05      	ldr	r5, [pc, #20]	; (8007e0c <_close_r+0x1c>)
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	602b      	str	r3, [r5, #0]
 8007dfc:	f7fa fb5e 	bl	80024bc <_close>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_close_r+0x1a>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_close_r+0x1a>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20002950 	.word	0x20002950

08007e10 <_lseek_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4d05      	ldr	r5, [pc, #20]	; (8007e30 <_lseek_r+0x20>)
 8007e1c:	602a      	str	r2, [r5, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f7fa fb56 	bl	80024d0 <_lseek>
 8007e24:	1c43      	adds	r3, r0, #1
 8007e26:	d102      	bne.n	8007e2e <_lseek_r+0x1e>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	b103      	cbz	r3, 8007e2e <_lseek_r+0x1e>
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	bd38      	pop	{r3, r4, r5, pc}
 8007e30:	20002950 	.word	0x20002950

08007e34 <_read_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4d05      	ldr	r5, [pc, #20]	; (8007e54 <_read_r+0x20>)
 8007e40:	602a      	str	r2, [r5, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f7fa fb20 	bl	8002488 <_read>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_read_r+0x1e>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_read_r+0x1e>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	20002950 	.word	0x20002950

08007e58 <_write_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	4611      	mov	r1, r2
 8007e60:	2200      	movs	r2, #0
 8007e62:	4d05      	ldr	r5, [pc, #20]	; (8007e78 <_write_r+0x20>)
 8007e64:	602a      	str	r2, [r5, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f7fa fb1b 	bl	80024a2 <_write>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_write_r+0x1e>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_write_r+0x1e>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	20002950 	.word	0x20002950

08007e7c <__errno>:
 8007e7c:	4b01      	ldr	r3, [pc, #4]	; (8007e84 <__errno+0x8>)
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20000418 	.word	0x20000418

08007e88 <__libc_init_array>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	2600      	movs	r6, #0
 8007e8c:	4d0c      	ldr	r5, [pc, #48]	; (8007ec0 <__libc_init_array+0x38>)
 8007e8e:	4c0d      	ldr	r4, [pc, #52]	; (8007ec4 <__libc_init_array+0x3c>)
 8007e90:	1b64      	subs	r4, r4, r5
 8007e92:	10a4      	asrs	r4, r4, #2
 8007e94:	42a6      	cmp	r6, r4
 8007e96:	d109      	bne.n	8007eac <__libc_init_array+0x24>
 8007e98:	f000 fe62 	bl	8008b60 <_init>
 8007e9c:	2600      	movs	r6, #0
 8007e9e:	4d0a      	ldr	r5, [pc, #40]	; (8007ec8 <__libc_init_array+0x40>)
 8007ea0:	4c0a      	ldr	r4, [pc, #40]	; (8007ecc <__libc_init_array+0x44>)
 8007ea2:	1b64      	subs	r4, r4, r5
 8007ea4:	10a4      	asrs	r4, r4, #2
 8007ea6:	42a6      	cmp	r6, r4
 8007ea8:	d105      	bne.n	8007eb6 <__libc_init_array+0x2e>
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb0:	4798      	blx	r3
 8007eb2:	3601      	adds	r6, #1
 8007eb4:	e7ee      	b.n	8007e94 <__libc_init_array+0xc>
 8007eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eba:	4798      	blx	r3
 8007ebc:	3601      	adds	r6, #1
 8007ebe:	e7f2      	b.n	8007ea6 <__libc_init_array+0x1e>
 8007ec0:	08009940 	.word	0x08009940
 8007ec4:	08009940 	.word	0x08009940
 8007ec8:	08009940 	.word	0x08009940
 8007ecc:	08009944 	.word	0x08009944

08007ed0 <__retarget_lock_init_recursive>:
 8007ed0:	4770      	bx	lr

08007ed2 <__retarget_lock_acquire_recursive>:
 8007ed2:	4770      	bx	lr

08007ed4 <__retarget_lock_release_recursive>:
 8007ed4:	4770      	bx	lr

08007ed6 <strcpy>:
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007edc:	f803 2b01 	strb.w	r2, [r3], #1
 8007ee0:	2a00      	cmp	r2, #0
 8007ee2:	d1f9      	bne.n	8007ed8 <strcpy+0x2>
 8007ee4:	4770      	bx	lr

08007ee6 <memcpy>:
 8007ee6:	440a      	add	r2, r1
 8007ee8:	4291      	cmp	r1, r2
 8007eea:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eee:	d100      	bne.n	8007ef2 <memcpy+0xc>
 8007ef0:	4770      	bx	lr
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef8:	4291      	cmp	r1, r2
 8007efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007efe:	d1f9      	bne.n	8007ef4 <memcpy+0xe>
 8007f00:	bd10      	pop	{r4, pc}
	...

08007f04 <__assert_func>:
 8007f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f06:	4614      	mov	r4, r2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4b09      	ldr	r3, [pc, #36]	; (8007f30 <__assert_func+0x2c>)
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68d8      	ldr	r0, [r3, #12]
 8007f12:	b14c      	cbz	r4, 8007f28 <__assert_func+0x24>
 8007f14:	4b07      	ldr	r3, [pc, #28]	; (8007f34 <__assert_func+0x30>)
 8007f16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f1a:	9100      	str	r1, [sp, #0]
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	4906      	ldr	r1, [pc, #24]	; (8007f38 <__assert_func+0x34>)
 8007f20:	f000 f9b4 	bl	800828c <fiprintf>
 8007f24:	f000 f9d4 	bl	80082d0 <abort>
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <__assert_func+0x38>)
 8007f2a:	461c      	mov	r4, r3
 8007f2c:	e7f3      	b.n	8007f16 <__assert_func+0x12>
 8007f2e:	bf00      	nop
 8007f30:	20000418 	.word	0x20000418
 8007f34:	080098d0 	.word	0x080098d0
 8007f38:	080098dd 	.word	0x080098dd
 8007f3c:	0800990b 	.word	0x0800990b

08007f40 <_free_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4605      	mov	r5, r0
 8007f44:	2900      	cmp	r1, #0
 8007f46:	d040      	beq.n	8007fca <_free_r+0x8a>
 8007f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f4c:	1f0c      	subs	r4, r1, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfb8      	it	lt
 8007f52:	18e4      	addlt	r4, r4, r3
 8007f54:	f000 f8e4 	bl	8008120 <__malloc_lock>
 8007f58:	4a1c      	ldr	r2, [pc, #112]	; (8007fcc <_free_r+0x8c>)
 8007f5a:	6813      	ldr	r3, [r2, #0]
 8007f5c:	b933      	cbnz	r3, 8007f6c <_free_r+0x2c>
 8007f5e:	6063      	str	r3, [r4, #4]
 8007f60:	6014      	str	r4, [r2, #0]
 8007f62:	4628      	mov	r0, r5
 8007f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f68:	f000 b8e0 	b.w	800812c <__malloc_unlock>
 8007f6c:	42a3      	cmp	r3, r4
 8007f6e:	d908      	bls.n	8007f82 <_free_r+0x42>
 8007f70:	6820      	ldr	r0, [r4, #0]
 8007f72:	1821      	adds	r1, r4, r0
 8007f74:	428b      	cmp	r3, r1
 8007f76:	bf01      	itttt	eq
 8007f78:	6819      	ldreq	r1, [r3, #0]
 8007f7a:	685b      	ldreq	r3, [r3, #4]
 8007f7c:	1809      	addeq	r1, r1, r0
 8007f7e:	6021      	streq	r1, [r4, #0]
 8007f80:	e7ed      	b.n	8007f5e <_free_r+0x1e>
 8007f82:	461a      	mov	r2, r3
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	b10b      	cbz	r3, 8007f8c <_free_r+0x4c>
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	d9fa      	bls.n	8007f82 <_free_r+0x42>
 8007f8c:	6811      	ldr	r1, [r2, #0]
 8007f8e:	1850      	adds	r0, r2, r1
 8007f90:	42a0      	cmp	r0, r4
 8007f92:	d10b      	bne.n	8007fac <_free_r+0x6c>
 8007f94:	6820      	ldr	r0, [r4, #0]
 8007f96:	4401      	add	r1, r0
 8007f98:	1850      	adds	r0, r2, r1
 8007f9a:	4283      	cmp	r3, r0
 8007f9c:	6011      	str	r1, [r2, #0]
 8007f9e:	d1e0      	bne.n	8007f62 <_free_r+0x22>
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	4408      	add	r0, r1
 8007fa6:	6010      	str	r0, [r2, #0]
 8007fa8:	6053      	str	r3, [r2, #4]
 8007faa:	e7da      	b.n	8007f62 <_free_r+0x22>
 8007fac:	d902      	bls.n	8007fb4 <_free_r+0x74>
 8007fae:	230c      	movs	r3, #12
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	e7d6      	b.n	8007f62 <_free_r+0x22>
 8007fb4:	6820      	ldr	r0, [r4, #0]
 8007fb6:	1821      	adds	r1, r4, r0
 8007fb8:	428b      	cmp	r3, r1
 8007fba:	bf01      	itttt	eq
 8007fbc:	6819      	ldreq	r1, [r3, #0]
 8007fbe:	685b      	ldreq	r3, [r3, #4]
 8007fc0:	1809      	addeq	r1, r1, r0
 8007fc2:	6021      	streq	r1, [r4, #0]
 8007fc4:	6063      	str	r3, [r4, #4]
 8007fc6:	6054      	str	r4, [r2, #4]
 8007fc8:	e7cb      	b.n	8007f62 <_free_r+0x22>
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	20002958 	.word	0x20002958

08007fd0 <malloc>:
 8007fd0:	4b02      	ldr	r3, [pc, #8]	; (8007fdc <malloc+0xc>)
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	6818      	ldr	r0, [r3, #0]
 8007fd6:	f000 b823 	b.w	8008020 <_malloc_r>
 8007fda:	bf00      	nop
 8007fdc:	20000418 	.word	0x20000418

08007fe0 <sbrk_aligned>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4e0e      	ldr	r6, [pc, #56]	; (800801c <sbrk_aligned+0x3c>)
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	6831      	ldr	r1, [r6, #0]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	b911      	cbnz	r1, 8007ff2 <sbrk_aligned+0x12>
 8007fec:	f000 f960 	bl	80082b0 <_sbrk_r>
 8007ff0:	6030      	str	r0, [r6, #0]
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f000 f95b 	bl	80082b0 <_sbrk_r>
 8007ffa:	1c43      	adds	r3, r0, #1
 8007ffc:	d00a      	beq.n	8008014 <sbrk_aligned+0x34>
 8007ffe:	1cc4      	adds	r4, r0, #3
 8008000:	f024 0403 	bic.w	r4, r4, #3
 8008004:	42a0      	cmp	r0, r4
 8008006:	d007      	beq.n	8008018 <sbrk_aligned+0x38>
 8008008:	1a21      	subs	r1, r4, r0
 800800a:	4628      	mov	r0, r5
 800800c:	f000 f950 	bl	80082b0 <_sbrk_r>
 8008010:	3001      	adds	r0, #1
 8008012:	d101      	bne.n	8008018 <sbrk_aligned+0x38>
 8008014:	f04f 34ff 	mov.w	r4, #4294967295
 8008018:	4620      	mov	r0, r4
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	2000295c 	.word	0x2000295c

08008020 <_malloc_r>:
 8008020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008024:	1ccd      	adds	r5, r1, #3
 8008026:	f025 0503 	bic.w	r5, r5, #3
 800802a:	3508      	adds	r5, #8
 800802c:	2d0c      	cmp	r5, #12
 800802e:	bf38      	it	cc
 8008030:	250c      	movcc	r5, #12
 8008032:	2d00      	cmp	r5, #0
 8008034:	4607      	mov	r7, r0
 8008036:	db01      	blt.n	800803c <_malloc_r+0x1c>
 8008038:	42a9      	cmp	r1, r5
 800803a:	d905      	bls.n	8008048 <_malloc_r+0x28>
 800803c:	230c      	movs	r3, #12
 800803e:	2600      	movs	r6, #0
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	4630      	mov	r0, r6
 8008044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008048:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800811c <_malloc_r+0xfc>
 800804c:	f000 f868 	bl	8008120 <__malloc_lock>
 8008050:	f8d8 3000 	ldr.w	r3, [r8]
 8008054:	461c      	mov	r4, r3
 8008056:	bb5c      	cbnz	r4, 80080b0 <_malloc_r+0x90>
 8008058:	4629      	mov	r1, r5
 800805a:	4638      	mov	r0, r7
 800805c:	f7ff ffc0 	bl	8007fe0 <sbrk_aligned>
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	4604      	mov	r4, r0
 8008064:	d155      	bne.n	8008112 <_malloc_r+0xf2>
 8008066:	f8d8 4000 	ldr.w	r4, [r8]
 800806a:	4626      	mov	r6, r4
 800806c:	2e00      	cmp	r6, #0
 800806e:	d145      	bne.n	80080fc <_malloc_r+0xdc>
 8008070:	2c00      	cmp	r4, #0
 8008072:	d048      	beq.n	8008106 <_malloc_r+0xe6>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	4631      	mov	r1, r6
 8008078:	4638      	mov	r0, r7
 800807a:	eb04 0903 	add.w	r9, r4, r3
 800807e:	f000 f917 	bl	80082b0 <_sbrk_r>
 8008082:	4581      	cmp	r9, r0
 8008084:	d13f      	bne.n	8008106 <_malloc_r+0xe6>
 8008086:	6821      	ldr	r1, [r4, #0]
 8008088:	4638      	mov	r0, r7
 800808a:	1a6d      	subs	r5, r5, r1
 800808c:	4629      	mov	r1, r5
 800808e:	f7ff ffa7 	bl	8007fe0 <sbrk_aligned>
 8008092:	3001      	adds	r0, #1
 8008094:	d037      	beq.n	8008106 <_malloc_r+0xe6>
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	442b      	add	r3, r5
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	f8d8 3000 	ldr.w	r3, [r8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d038      	beq.n	8008116 <_malloc_r+0xf6>
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	42a2      	cmp	r2, r4
 80080a8:	d12b      	bne.n	8008102 <_malloc_r+0xe2>
 80080aa:	2200      	movs	r2, #0
 80080ac:	605a      	str	r2, [r3, #4]
 80080ae:	e00f      	b.n	80080d0 <_malloc_r+0xb0>
 80080b0:	6822      	ldr	r2, [r4, #0]
 80080b2:	1b52      	subs	r2, r2, r5
 80080b4:	d41f      	bmi.n	80080f6 <_malloc_r+0xd6>
 80080b6:	2a0b      	cmp	r2, #11
 80080b8:	d917      	bls.n	80080ea <_malloc_r+0xca>
 80080ba:	1961      	adds	r1, r4, r5
 80080bc:	42a3      	cmp	r3, r4
 80080be:	6025      	str	r5, [r4, #0]
 80080c0:	bf18      	it	ne
 80080c2:	6059      	strne	r1, [r3, #4]
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	bf08      	it	eq
 80080c8:	f8c8 1000 	streq.w	r1, [r8]
 80080cc:	5162      	str	r2, [r4, r5]
 80080ce:	604b      	str	r3, [r1, #4]
 80080d0:	4638      	mov	r0, r7
 80080d2:	f104 060b 	add.w	r6, r4, #11
 80080d6:	f000 f829 	bl	800812c <__malloc_unlock>
 80080da:	f026 0607 	bic.w	r6, r6, #7
 80080de:	1d23      	adds	r3, r4, #4
 80080e0:	1af2      	subs	r2, r6, r3
 80080e2:	d0ae      	beq.n	8008042 <_malloc_r+0x22>
 80080e4:	1b9b      	subs	r3, r3, r6
 80080e6:	50a3      	str	r3, [r4, r2]
 80080e8:	e7ab      	b.n	8008042 <_malloc_r+0x22>
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	6862      	ldr	r2, [r4, #4]
 80080ee:	d1dd      	bne.n	80080ac <_malloc_r+0x8c>
 80080f0:	f8c8 2000 	str.w	r2, [r8]
 80080f4:	e7ec      	b.n	80080d0 <_malloc_r+0xb0>
 80080f6:	4623      	mov	r3, r4
 80080f8:	6864      	ldr	r4, [r4, #4]
 80080fa:	e7ac      	b.n	8008056 <_malloc_r+0x36>
 80080fc:	4634      	mov	r4, r6
 80080fe:	6876      	ldr	r6, [r6, #4]
 8008100:	e7b4      	b.n	800806c <_malloc_r+0x4c>
 8008102:	4613      	mov	r3, r2
 8008104:	e7cc      	b.n	80080a0 <_malloc_r+0x80>
 8008106:	230c      	movs	r3, #12
 8008108:	4638      	mov	r0, r7
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	f000 f80e 	bl	800812c <__malloc_unlock>
 8008110:	e797      	b.n	8008042 <_malloc_r+0x22>
 8008112:	6025      	str	r5, [r4, #0]
 8008114:	e7dc      	b.n	80080d0 <_malloc_r+0xb0>
 8008116:	605b      	str	r3, [r3, #4]
 8008118:	deff      	udf	#255	; 0xff
 800811a:	bf00      	nop
 800811c:	20002958 	.word	0x20002958

08008120 <__malloc_lock>:
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__malloc_lock+0x8>)
 8008122:	f7ff bed6 	b.w	8007ed2 <__retarget_lock_acquire_recursive>
 8008126:	bf00      	nop
 8008128:	20002954 	.word	0x20002954

0800812c <__malloc_unlock>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__malloc_unlock+0x8>)
 800812e:	f7ff bed1 	b.w	8007ed4 <__retarget_lock_release_recursive>
 8008132:	bf00      	nop
 8008134:	20002954 	.word	0x20002954

08008138 <__sflush_r>:
 8008138:	898a      	ldrh	r2, [r1, #12]
 800813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813c:	4605      	mov	r5, r0
 800813e:	0710      	lsls	r0, r2, #28
 8008140:	460c      	mov	r4, r1
 8008142:	d457      	bmi.n	80081f4 <__sflush_r+0xbc>
 8008144:	684b      	ldr	r3, [r1, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dc04      	bgt.n	8008154 <__sflush_r+0x1c>
 800814a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	dc01      	bgt.n	8008154 <__sflush_r+0x1c>
 8008150:	2000      	movs	r0, #0
 8008152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008156:	2e00      	cmp	r6, #0
 8008158:	d0fa      	beq.n	8008150 <__sflush_r+0x18>
 800815a:	2300      	movs	r3, #0
 800815c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008160:	682f      	ldr	r7, [r5, #0]
 8008162:	6a21      	ldr	r1, [r4, #32]
 8008164:	602b      	str	r3, [r5, #0]
 8008166:	d032      	beq.n	80081ce <__sflush_r+0x96>
 8008168:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	075a      	lsls	r2, r3, #29
 800816e:	d505      	bpl.n	800817c <__sflush_r+0x44>
 8008170:	6863      	ldr	r3, [r4, #4]
 8008172:	1ac0      	subs	r0, r0, r3
 8008174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008176:	b10b      	cbz	r3, 800817c <__sflush_r+0x44>
 8008178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800817a:	1ac0      	subs	r0, r0, r3
 800817c:	2300      	movs	r3, #0
 800817e:	4602      	mov	r2, r0
 8008180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008182:	4628      	mov	r0, r5
 8008184:	6a21      	ldr	r1, [r4, #32]
 8008186:	47b0      	blx	r6
 8008188:	1c43      	adds	r3, r0, #1
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	d106      	bne.n	800819c <__sflush_r+0x64>
 800818e:	6829      	ldr	r1, [r5, #0]
 8008190:	291d      	cmp	r1, #29
 8008192:	d82b      	bhi.n	80081ec <__sflush_r+0xb4>
 8008194:	4a28      	ldr	r2, [pc, #160]	; (8008238 <__sflush_r+0x100>)
 8008196:	410a      	asrs	r2, r1
 8008198:	07d6      	lsls	r6, r2, #31
 800819a:	d427      	bmi.n	80081ec <__sflush_r+0xb4>
 800819c:	2200      	movs	r2, #0
 800819e:	6062      	str	r2, [r4, #4]
 80081a0:	6922      	ldr	r2, [r4, #16]
 80081a2:	04d9      	lsls	r1, r3, #19
 80081a4:	6022      	str	r2, [r4, #0]
 80081a6:	d504      	bpl.n	80081b2 <__sflush_r+0x7a>
 80081a8:	1c42      	adds	r2, r0, #1
 80081aa:	d101      	bne.n	80081b0 <__sflush_r+0x78>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b903      	cbnz	r3, 80081b2 <__sflush_r+0x7a>
 80081b0:	6560      	str	r0, [r4, #84]	; 0x54
 80081b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081b4:	602f      	str	r7, [r5, #0]
 80081b6:	2900      	cmp	r1, #0
 80081b8:	d0ca      	beq.n	8008150 <__sflush_r+0x18>
 80081ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081be:	4299      	cmp	r1, r3
 80081c0:	d002      	beq.n	80081c8 <__sflush_r+0x90>
 80081c2:	4628      	mov	r0, r5
 80081c4:	f7ff febc 	bl	8007f40 <_free_r>
 80081c8:	2000      	movs	r0, #0
 80081ca:	6360      	str	r0, [r4, #52]	; 0x34
 80081cc:	e7c1      	b.n	8008152 <__sflush_r+0x1a>
 80081ce:	2301      	movs	r3, #1
 80081d0:	4628      	mov	r0, r5
 80081d2:	47b0      	blx	r6
 80081d4:	1c41      	adds	r1, r0, #1
 80081d6:	d1c8      	bne.n	800816a <__sflush_r+0x32>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0c5      	beq.n	800816a <__sflush_r+0x32>
 80081de:	2b1d      	cmp	r3, #29
 80081e0:	d001      	beq.n	80081e6 <__sflush_r+0xae>
 80081e2:	2b16      	cmp	r3, #22
 80081e4:	d101      	bne.n	80081ea <__sflush_r+0xb2>
 80081e6:	602f      	str	r7, [r5, #0]
 80081e8:	e7b2      	b.n	8008150 <__sflush_r+0x18>
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	e7ae      	b.n	8008152 <__sflush_r+0x1a>
 80081f4:	690f      	ldr	r7, [r1, #16]
 80081f6:	2f00      	cmp	r7, #0
 80081f8:	d0aa      	beq.n	8008150 <__sflush_r+0x18>
 80081fa:	0793      	lsls	r3, r2, #30
 80081fc:	bf18      	it	ne
 80081fe:	2300      	movne	r3, #0
 8008200:	680e      	ldr	r6, [r1, #0]
 8008202:	bf08      	it	eq
 8008204:	694b      	ldreq	r3, [r1, #20]
 8008206:	1bf6      	subs	r6, r6, r7
 8008208:	600f      	str	r7, [r1, #0]
 800820a:	608b      	str	r3, [r1, #8]
 800820c:	2e00      	cmp	r6, #0
 800820e:	dd9f      	ble.n	8008150 <__sflush_r+0x18>
 8008210:	4633      	mov	r3, r6
 8008212:	463a      	mov	r2, r7
 8008214:	4628      	mov	r0, r5
 8008216:	6a21      	ldr	r1, [r4, #32]
 8008218:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800821c:	47e0      	blx	ip
 800821e:	2800      	cmp	r0, #0
 8008220:	dc06      	bgt.n	8008230 <__sflush_r+0xf8>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	e790      	b.n	8008152 <__sflush_r+0x1a>
 8008230:	4407      	add	r7, r0
 8008232:	1a36      	subs	r6, r6, r0
 8008234:	e7ea      	b.n	800820c <__sflush_r+0xd4>
 8008236:	bf00      	nop
 8008238:	dfbffffe 	.word	0xdfbffffe

0800823c <_fflush_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	690b      	ldr	r3, [r1, #16]
 8008240:	4605      	mov	r5, r0
 8008242:	460c      	mov	r4, r1
 8008244:	b913      	cbnz	r3, 800824c <_fflush_r+0x10>
 8008246:	2500      	movs	r5, #0
 8008248:	4628      	mov	r0, r5
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	b118      	cbz	r0, 8008256 <_fflush_r+0x1a>
 800824e:	6a03      	ldr	r3, [r0, #32]
 8008250:	b90b      	cbnz	r3, 8008256 <_fflush_r+0x1a>
 8008252:	f7ff fd4b 	bl	8007cec <__sinit>
 8008256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0f3      	beq.n	8008246 <_fflush_r+0xa>
 800825e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008260:	07d0      	lsls	r0, r2, #31
 8008262:	d404      	bmi.n	800826e <_fflush_r+0x32>
 8008264:	0599      	lsls	r1, r3, #22
 8008266:	d402      	bmi.n	800826e <_fflush_r+0x32>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f7ff fe32 	bl	8007ed2 <__retarget_lock_acquire_recursive>
 800826e:	4628      	mov	r0, r5
 8008270:	4621      	mov	r1, r4
 8008272:	f7ff ff61 	bl	8008138 <__sflush_r>
 8008276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008278:	4605      	mov	r5, r0
 800827a:	07da      	lsls	r2, r3, #31
 800827c:	d4e4      	bmi.n	8008248 <_fflush_r+0xc>
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	059b      	lsls	r3, r3, #22
 8008282:	d4e1      	bmi.n	8008248 <_fflush_r+0xc>
 8008284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008286:	f7ff fe25 	bl	8007ed4 <__retarget_lock_release_recursive>
 800828a:	e7dd      	b.n	8008248 <_fflush_r+0xc>

0800828c <fiprintf>:
 800828c:	b40e      	push	{r1, r2, r3}
 800828e:	b503      	push	{r0, r1, lr}
 8008290:	4601      	mov	r1, r0
 8008292:	ab03      	add	r3, sp, #12
 8008294:	4805      	ldr	r0, [pc, #20]	; (80082ac <fiprintf+0x20>)
 8008296:	f853 2b04 	ldr.w	r2, [r3], #4
 800829a:	6800      	ldr	r0, [r0, #0]
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	f000 f845 	bl	800832c <_vfiprintf_r>
 80082a2:	b002      	add	sp, #8
 80082a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082a8:	b003      	add	sp, #12
 80082aa:	4770      	bx	lr
 80082ac:	20000418 	.word	0x20000418

080082b0 <_sbrk_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	2300      	movs	r3, #0
 80082b4:	4d05      	ldr	r5, [pc, #20]	; (80082cc <_sbrk_r+0x1c>)
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7fa f90a 	bl	80024d4 <_sbrk>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_sbrk_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_sbrk_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20002950 	.word	0x20002950

080082d0 <abort>:
 80082d0:	2006      	movs	r0, #6
 80082d2:	b508      	push	{r3, lr}
 80082d4:	f000 fb96 	bl	8008a04 <raise>
 80082d8:	2001      	movs	r0, #1
 80082da:	f7fa f8cf 	bl	800247c <_exit>

080082de <__sfputc_r>:
 80082de:	6893      	ldr	r3, [r2, #8]
 80082e0:	b410      	push	{r4}
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	6093      	str	r3, [r2, #8]
 80082e8:	da07      	bge.n	80082fa <__sfputc_r+0x1c>
 80082ea:	6994      	ldr	r4, [r2, #24]
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	db01      	blt.n	80082f4 <__sfputc_r+0x16>
 80082f0:	290a      	cmp	r1, #10
 80082f2:	d102      	bne.n	80082fa <__sfputc_r+0x1c>
 80082f4:	bc10      	pop	{r4}
 80082f6:	f000 bac7 	b.w	8008888 <__swbuf_r>
 80082fa:	6813      	ldr	r3, [r2, #0]
 80082fc:	1c58      	adds	r0, r3, #1
 80082fe:	6010      	str	r0, [r2, #0]
 8008300:	7019      	strb	r1, [r3, #0]
 8008302:	4608      	mov	r0, r1
 8008304:	bc10      	pop	{r4}
 8008306:	4770      	bx	lr

08008308 <__sfputs_r>:
 8008308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	4614      	mov	r4, r2
 8008310:	18d5      	adds	r5, r2, r3
 8008312:	42ac      	cmp	r4, r5
 8008314:	d101      	bne.n	800831a <__sfputs_r+0x12>
 8008316:	2000      	movs	r0, #0
 8008318:	e007      	b.n	800832a <__sfputs_r+0x22>
 800831a:	463a      	mov	r2, r7
 800831c:	4630      	mov	r0, r6
 800831e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008322:	f7ff ffdc 	bl	80082de <__sfputc_r>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d1f3      	bne.n	8008312 <__sfputs_r+0xa>
 800832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800832c <_vfiprintf_r>:
 800832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008330:	460d      	mov	r5, r1
 8008332:	4614      	mov	r4, r2
 8008334:	4698      	mov	r8, r3
 8008336:	4606      	mov	r6, r0
 8008338:	b09d      	sub	sp, #116	; 0x74
 800833a:	b118      	cbz	r0, 8008344 <_vfiprintf_r+0x18>
 800833c:	6a03      	ldr	r3, [r0, #32]
 800833e:	b90b      	cbnz	r3, 8008344 <_vfiprintf_r+0x18>
 8008340:	f7ff fcd4 	bl	8007cec <__sinit>
 8008344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008346:	07d9      	lsls	r1, r3, #31
 8008348:	d405      	bmi.n	8008356 <_vfiprintf_r+0x2a>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	059a      	lsls	r2, r3, #22
 800834e:	d402      	bmi.n	8008356 <_vfiprintf_r+0x2a>
 8008350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008352:	f7ff fdbe 	bl	8007ed2 <__retarget_lock_acquire_recursive>
 8008356:	89ab      	ldrh	r3, [r5, #12]
 8008358:	071b      	lsls	r3, r3, #28
 800835a:	d501      	bpl.n	8008360 <_vfiprintf_r+0x34>
 800835c:	692b      	ldr	r3, [r5, #16]
 800835e:	b99b      	cbnz	r3, 8008388 <_vfiprintf_r+0x5c>
 8008360:	4629      	mov	r1, r5
 8008362:	4630      	mov	r0, r6
 8008364:	f000 face 	bl	8008904 <__swsetup_r>
 8008368:	b170      	cbz	r0, 8008388 <_vfiprintf_r+0x5c>
 800836a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800836c:	07dc      	lsls	r4, r3, #31
 800836e:	d504      	bpl.n	800837a <_vfiprintf_r+0x4e>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	b01d      	add	sp, #116	; 0x74
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	89ab      	ldrh	r3, [r5, #12]
 800837c:	0598      	lsls	r0, r3, #22
 800837e:	d4f7      	bmi.n	8008370 <_vfiprintf_r+0x44>
 8008380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008382:	f7ff fda7 	bl	8007ed4 <__retarget_lock_release_recursive>
 8008386:	e7f3      	b.n	8008370 <_vfiprintf_r+0x44>
 8008388:	2300      	movs	r3, #0
 800838a:	9309      	str	r3, [sp, #36]	; 0x24
 800838c:	2320      	movs	r3, #32
 800838e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008392:	2330      	movs	r3, #48	; 0x30
 8008394:	f04f 0901 	mov.w	r9, #1
 8008398:	f8cd 800c 	str.w	r8, [sp, #12]
 800839c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800854c <_vfiprintf_r+0x220>
 80083a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083a4:	4623      	mov	r3, r4
 80083a6:	469a      	mov	sl, r3
 80083a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ac:	b10a      	cbz	r2, 80083b2 <_vfiprintf_r+0x86>
 80083ae:	2a25      	cmp	r2, #37	; 0x25
 80083b0:	d1f9      	bne.n	80083a6 <_vfiprintf_r+0x7a>
 80083b2:	ebba 0b04 	subs.w	fp, sl, r4
 80083b6:	d00b      	beq.n	80083d0 <_vfiprintf_r+0xa4>
 80083b8:	465b      	mov	r3, fp
 80083ba:	4622      	mov	r2, r4
 80083bc:	4629      	mov	r1, r5
 80083be:	4630      	mov	r0, r6
 80083c0:	f7ff ffa2 	bl	8008308 <__sfputs_r>
 80083c4:	3001      	adds	r0, #1
 80083c6:	f000 80a9 	beq.w	800851c <_vfiprintf_r+0x1f0>
 80083ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083cc:	445a      	add	r2, fp
 80083ce:	9209      	str	r2, [sp, #36]	; 0x24
 80083d0:	f89a 3000 	ldrb.w	r3, [sl]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 80a1 	beq.w	800851c <_vfiprintf_r+0x1f0>
 80083da:	2300      	movs	r3, #0
 80083dc:	f04f 32ff 	mov.w	r2, #4294967295
 80083e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083e4:	f10a 0a01 	add.w	sl, sl, #1
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	9307      	str	r3, [sp, #28]
 80083ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083f0:	931a      	str	r3, [sp, #104]	; 0x68
 80083f2:	4654      	mov	r4, sl
 80083f4:	2205      	movs	r2, #5
 80083f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fa:	4854      	ldr	r0, [pc, #336]	; (800854c <_vfiprintf_r+0x220>)
 80083fc:	f000 fb1e 	bl	8008a3c <memchr>
 8008400:	9a04      	ldr	r2, [sp, #16]
 8008402:	b9d8      	cbnz	r0, 800843c <_vfiprintf_r+0x110>
 8008404:	06d1      	lsls	r1, r2, #27
 8008406:	bf44      	itt	mi
 8008408:	2320      	movmi	r3, #32
 800840a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800840e:	0713      	lsls	r3, r2, #28
 8008410:	bf44      	itt	mi
 8008412:	232b      	movmi	r3, #43	; 0x2b
 8008414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008418:	f89a 3000 	ldrb.w	r3, [sl]
 800841c:	2b2a      	cmp	r3, #42	; 0x2a
 800841e:	d015      	beq.n	800844c <_vfiprintf_r+0x120>
 8008420:	4654      	mov	r4, sl
 8008422:	2000      	movs	r0, #0
 8008424:	f04f 0c0a 	mov.w	ip, #10
 8008428:	9a07      	ldr	r2, [sp, #28]
 800842a:	4621      	mov	r1, r4
 800842c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008430:	3b30      	subs	r3, #48	; 0x30
 8008432:	2b09      	cmp	r3, #9
 8008434:	d94d      	bls.n	80084d2 <_vfiprintf_r+0x1a6>
 8008436:	b1b0      	cbz	r0, 8008466 <_vfiprintf_r+0x13a>
 8008438:	9207      	str	r2, [sp, #28]
 800843a:	e014      	b.n	8008466 <_vfiprintf_r+0x13a>
 800843c:	eba0 0308 	sub.w	r3, r0, r8
 8008440:	fa09 f303 	lsl.w	r3, r9, r3
 8008444:	4313      	orrs	r3, r2
 8008446:	46a2      	mov	sl, r4
 8008448:	9304      	str	r3, [sp, #16]
 800844a:	e7d2      	b.n	80083f2 <_vfiprintf_r+0xc6>
 800844c:	9b03      	ldr	r3, [sp, #12]
 800844e:	1d19      	adds	r1, r3, #4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	9103      	str	r1, [sp, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfbb      	ittet	lt
 8008458:	425b      	neglt	r3, r3
 800845a:	f042 0202 	orrlt.w	r2, r2, #2
 800845e:	9307      	strge	r3, [sp, #28]
 8008460:	9307      	strlt	r3, [sp, #28]
 8008462:	bfb8      	it	lt
 8008464:	9204      	strlt	r2, [sp, #16]
 8008466:	7823      	ldrb	r3, [r4, #0]
 8008468:	2b2e      	cmp	r3, #46	; 0x2e
 800846a:	d10c      	bne.n	8008486 <_vfiprintf_r+0x15a>
 800846c:	7863      	ldrb	r3, [r4, #1]
 800846e:	2b2a      	cmp	r3, #42	; 0x2a
 8008470:	d134      	bne.n	80084dc <_vfiprintf_r+0x1b0>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	3402      	adds	r4, #2
 8008476:	1d1a      	adds	r2, r3, #4
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	9203      	str	r2, [sp, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	bfb8      	it	lt
 8008480:	f04f 33ff 	movlt.w	r3, #4294967295
 8008484:	9305      	str	r3, [sp, #20]
 8008486:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008550 <_vfiprintf_r+0x224>
 800848a:	2203      	movs	r2, #3
 800848c:	4650      	mov	r0, sl
 800848e:	7821      	ldrb	r1, [r4, #0]
 8008490:	f000 fad4 	bl	8008a3c <memchr>
 8008494:	b138      	cbz	r0, 80084a6 <_vfiprintf_r+0x17a>
 8008496:	2240      	movs	r2, #64	; 0x40
 8008498:	9b04      	ldr	r3, [sp, #16]
 800849a:	eba0 000a 	sub.w	r0, r0, sl
 800849e:	4082      	lsls	r2, r0
 80084a0:	4313      	orrs	r3, r2
 80084a2:	3401      	adds	r4, #1
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084aa:	2206      	movs	r2, #6
 80084ac:	4829      	ldr	r0, [pc, #164]	; (8008554 <_vfiprintf_r+0x228>)
 80084ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084b2:	f000 fac3 	bl	8008a3c <memchr>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d03f      	beq.n	800853a <_vfiprintf_r+0x20e>
 80084ba:	4b27      	ldr	r3, [pc, #156]	; (8008558 <_vfiprintf_r+0x22c>)
 80084bc:	bb1b      	cbnz	r3, 8008506 <_vfiprintf_r+0x1da>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	3307      	adds	r3, #7
 80084c2:	f023 0307 	bic.w	r3, r3, #7
 80084c6:	3308      	adds	r3, #8
 80084c8:	9303      	str	r3, [sp, #12]
 80084ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084cc:	443b      	add	r3, r7
 80084ce:	9309      	str	r3, [sp, #36]	; 0x24
 80084d0:	e768      	b.n	80083a4 <_vfiprintf_r+0x78>
 80084d2:	460c      	mov	r4, r1
 80084d4:	2001      	movs	r0, #1
 80084d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80084da:	e7a6      	b.n	800842a <_vfiprintf_r+0xfe>
 80084dc:	2300      	movs	r3, #0
 80084de:	f04f 0c0a 	mov.w	ip, #10
 80084e2:	4619      	mov	r1, r3
 80084e4:	3401      	adds	r4, #1
 80084e6:	9305      	str	r3, [sp, #20]
 80084e8:	4620      	mov	r0, r4
 80084ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ee:	3a30      	subs	r2, #48	; 0x30
 80084f0:	2a09      	cmp	r2, #9
 80084f2:	d903      	bls.n	80084fc <_vfiprintf_r+0x1d0>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0c6      	beq.n	8008486 <_vfiprintf_r+0x15a>
 80084f8:	9105      	str	r1, [sp, #20]
 80084fa:	e7c4      	b.n	8008486 <_vfiprintf_r+0x15a>
 80084fc:	4604      	mov	r4, r0
 80084fe:	2301      	movs	r3, #1
 8008500:	fb0c 2101 	mla	r1, ip, r1, r2
 8008504:	e7f0      	b.n	80084e8 <_vfiprintf_r+0x1bc>
 8008506:	ab03      	add	r3, sp, #12
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	462a      	mov	r2, r5
 800850c:	4630      	mov	r0, r6
 800850e:	4b13      	ldr	r3, [pc, #76]	; (800855c <_vfiprintf_r+0x230>)
 8008510:	a904      	add	r1, sp, #16
 8008512:	f3af 8000 	nop.w
 8008516:	4607      	mov	r7, r0
 8008518:	1c78      	adds	r0, r7, #1
 800851a:	d1d6      	bne.n	80084ca <_vfiprintf_r+0x19e>
 800851c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800851e:	07d9      	lsls	r1, r3, #31
 8008520:	d405      	bmi.n	800852e <_vfiprintf_r+0x202>
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	059a      	lsls	r2, r3, #22
 8008526:	d402      	bmi.n	800852e <_vfiprintf_r+0x202>
 8008528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800852a:	f7ff fcd3 	bl	8007ed4 <__retarget_lock_release_recursive>
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	065b      	lsls	r3, r3, #25
 8008532:	f53f af1d 	bmi.w	8008370 <_vfiprintf_r+0x44>
 8008536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008538:	e71c      	b.n	8008374 <_vfiprintf_r+0x48>
 800853a:	ab03      	add	r3, sp, #12
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	462a      	mov	r2, r5
 8008540:	4630      	mov	r0, r6
 8008542:	4b06      	ldr	r3, [pc, #24]	; (800855c <_vfiprintf_r+0x230>)
 8008544:	a904      	add	r1, sp, #16
 8008546:	f000 f87d 	bl	8008644 <_printf_i>
 800854a:	e7e4      	b.n	8008516 <_vfiprintf_r+0x1ea>
 800854c:	0800990c 	.word	0x0800990c
 8008550:	08009912 	.word	0x08009912
 8008554:	08009916 	.word	0x08009916
 8008558:	00000000 	.word	0x00000000
 800855c:	08008309 	.word	0x08008309

08008560 <_printf_common>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	4616      	mov	r6, r2
 8008566:	4699      	mov	r9, r3
 8008568:	688a      	ldr	r2, [r1, #8]
 800856a:	690b      	ldr	r3, [r1, #16]
 800856c:	4607      	mov	r7, r0
 800856e:	4293      	cmp	r3, r2
 8008570:	bfb8      	it	lt
 8008572:	4613      	movlt	r3, r2
 8008574:	6033      	str	r3, [r6, #0]
 8008576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800857a:	460c      	mov	r4, r1
 800857c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008580:	b10a      	cbz	r2, 8008586 <_printf_common+0x26>
 8008582:	3301      	adds	r3, #1
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	0699      	lsls	r1, r3, #26
 800858a:	bf42      	ittt	mi
 800858c:	6833      	ldrmi	r3, [r6, #0]
 800858e:	3302      	addmi	r3, #2
 8008590:	6033      	strmi	r3, [r6, #0]
 8008592:	6825      	ldr	r5, [r4, #0]
 8008594:	f015 0506 	ands.w	r5, r5, #6
 8008598:	d106      	bne.n	80085a8 <_printf_common+0x48>
 800859a:	f104 0a19 	add.w	sl, r4, #25
 800859e:	68e3      	ldr	r3, [r4, #12]
 80085a0:	6832      	ldr	r2, [r6, #0]
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	42ab      	cmp	r3, r5
 80085a6:	dc2b      	bgt.n	8008600 <_printf_common+0xa0>
 80085a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085ac:	1e13      	subs	r3, r2, #0
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	bf18      	it	ne
 80085b2:	2301      	movne	r3, #1
 80085b4:	0692      	lsls	r2, r2, #26
 80085b6:	d430      	bmi.n	800861a <_printf_common+0xba>
 80085b8:	4649      	mov	r1, r9
 80085ba:	4638      	mov	r0, r7
 80085bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085c0:	47c0      	blx	r8
 80085c2:	3001      	adds	r0, #1
 80085c4:	d023      	beq.n	800860e <_printf_common+0xae>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	6922      	ldr	r2, [r4, #16]
 80085ca:	f003 0306 	and.w	r3, r3, #6
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	bf14      	ite	ne
 80085d2:	2500      	movne	r5, #0
 80085d4:	6833      	ldreq	r3, [r6, #0]
 80085d6:	f04f 0600 	mov.w	r6, #0
 80085da:	bf08      	it	eq
 80085dc:	68e5      	ldreq	r5, [r4, #12]
 80085de:	f104 041a 	add.w	r4, r4, #26
 80085e2:	bf08      	it	eq
 80085e4:	1aed      	subeq	r5, r5, r3
 80085e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80085ea:	bf08      	it	eq
 80085ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085f0:	4293      	cmp	r3, r2
 80085f2:	bfc4      	itt	gt
 80085f4:	1a9b      	subgt	r3, r3, r2
 80085f6:	18ed      	addgt	r5, r5, r3
 80085f8:	42b5      	cmp	r5, r6
 80085fa:	d11a      	bne.n	8008632 <_printf_common+0xd2>
 80085fc:	2000      	movs	r0, #0
 80085fe:	e008      	b.n	8008612 <_printf_common+0xb2>
 8008600:	2301      	movs	r3, #1
 8008602:	4652      	mov	r2, sl
 8008604:	4649      	mov	r1, r9
 8008606:	4638      	mov	r0, r7
 8008608:	47c0      	blx	r8
 800860a:	3001      	adds	r0, #1
 800860c:	d103      	bne.n	8008616 <_printf_common+0xb6>
 800860e:	f04f 30ff 	mov.w	r0, #4294967295
 8008612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008616:	3501      	adds	r5, #1
 8008618:	e7c1      	b.n	800859e <_printf_common+0x3e>
 800861a:	2030      	movs	r0, #48	; 0x30
 800861c:	18e1      	adds	r1, r4, r3
 800861e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008628:	4422      	add	r2, r4
 800862a:	3302      	adds	r3, #2
 800862c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008630:	e7c2      	b.n	80085b8 <_printf_common+0x58>
 8008632:	2301      	movs	r3, #1
 8008634:	4622      	mov	r2, r4
 8008636:	4649      	mov	r1, r9
 8008638:	4638      	mov	r0, r7
 800863a:	47c0      	blx	r8
 800863c:	3001      	adds	r0, #1
 800863e:	d0e6      	beq.n	800860e <_printf_common+0xae>
 8008640:	3601      	adds	r6, #1
 8008642:	e7d9      	b.n	80085f8 <_printf_common+0x98>

08008644 <_printf_i>:
 8008644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	7e0f      	ldrb	r7, [r1, #24]
 800864a:	4691      	mov	r9, r2
 800864c:	2f78      	cmp	r7, #120	; 0x78
 800864e:	4680      	mov	r8, r0
 8008650:	460c      	mov	r4, r1
 8008652:	469a      	mov	sl, r3
 8008654:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800865a:	d807      	bhi.n	800866c <_printf_i+0x28>
 800865c:	2f62      	cmp	r7, #98	; 0x62
 800865e:	d80a      	bhi.n	8008676 <_printf_i+0x32>
 8008660:	2f00      	cmp	r7, #0
 8008662:	f000 80d5 	beq.w	8008810 <_printf_i+0x1cc>
 8008666:	2f58      	cmp	r7, #88	; 0x58
 8008668:	f000 80c1 	beq.w	80087ee <_printf_i+0x1aa>
 800866c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008674:	e03a      	b.n	80086ec <_printf_i+0xa8>
 8008676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800867a:	2b15      	cmp	r3, #21
 800867c:	d8f6      	bhi.n	800866c <_printf_i+0x28>
 800867e:	a101      	add	r1, pc, #4	; (adr r1, 8008684 <_printf_i+0x40>)
 8008680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008684:	080086dd 	.word	0x080086dd
 8008688:	080086f1 	.word	0x080086f1
 800868c:	0800866d 	.word	0x0800866d
 8008690:	0800866d 	.word	0x0800866d
 8008694:	0800866d 	.word	0x0800866d
 8008698:	0800866d 	.word	0x0800866d
 800869c:	080086f1 	.word	0x080086f1
 80086a0:	0800866d 	.word	0x0800866d
 80086a4:	0800866d 	.word	0x0800866d
 80086a8:	0800866d 	.word	0x0800866d
 80086ac:	0800866d 	.word	0x0800866d
 80086b0:	080087f7 	.word	0x080087f7
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	080087b1 	.word	0x080087b1
 80086bc:	0800866d 	.word	0x0800866d
 80086c0:	0800866d 	.word	0x0800866d
 80086c4:	08008819 	.word	0x08008819
 80086c8:	0800866d 	.word	0x0800866d
 80086cc:	0800871d 	.word	0x0800871d
 80086d0:	0800866d 	.word	0x0800866d
 80086d4:	0800866d 	.word	0x0800866d
 80086d8:	080087b9 	.word	0x080087b9
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	1d1a      	adds	r2, r3, #4
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	602a      	str	r2, [r5, #0]
 80086e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ec:	2301      	movs	r3, #1
 80086ee:	e0a0      	b.n	8008832 <_printf_i+0x1ee>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	0607      	lsls	r7, r0, #24
 80086f6:	f103 0104 	add.w	r1, r3, #4
 80086fa:	6029      	str	r1, [r5, #0]
 80086fc:	d501      	bpl.n	8008702 <_printf_i+0xbe>
 80086fe:	681e      	ldr	r6, [r3, #0]
 8008700:	e003      	b.n	800870a <_printf_i+0xc6>
 8008702:	0646      	lsls	r6, r0, #25
 8008704:	d5fb      	bpl.n	80086fe <_printf_i+0xba>
 8008706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800870a:	2e00      	cmp	r6, #0
 800870c:	da03      	bge.n	8008716 <_printf_i+0xd2>
 800870e:	232d      	movs	r3, #45	; 0x2d
 8008710:	4276      	negs	r6, r6
 8008712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008716:	230a      	movs	r3, #10
 8008718:	4859      	ldr	r0, [pc, #356]	; (8008880 <_printf_i+0x23c>)
 800871a:	e012      	b.n	8008742 <_printf_i+0xfe>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	1d19      	adds	r1, r3, #4
 8008722:	6029      	str	r1, [r5, #0]
 8008724:	0605      	lsls	r5, r0, #24
 8008726:	d501      	bpl.n	800872c <_printf_i+0xe8>
 8008728:	681e      	ldr	r6, [r3, #0]
 800872a:	e002      	b.n	8008732 <_printf_i+0xee>
 800872c:	0641      	lsls	r1, r0, #25
 800872e:	d5fb      	bpl.n	8008728 <_printf_i+0xe4>
 8008730:	881e      	ldrh	r6, [r3, #0]
 8008732:	2f6f      	cmp	r7, #111	; 0x6f
 8008734:	bf0c      	ite	eq
 8008736:	2308      	moveq	r3, #8
 8008738:	230a      	movne	r3, #10
 800873a:	4851      	ldr	r0, [pc, #324]	; (8008880 <_printf_i+0x23c>)
 800873c:	2100      	movs	r1, #0
 800873e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008742:	6865      	ldr	r5, [r4, #4]
 8008744:	2d00      	cmp	r5, #0
 8008746:	bfa8      	it	ge
 8008748:	6821      	ldrge	r1, [r4, #0]
 800874a:	60a5      	str	r5, [r4, #8]
 800874c:	bfa4      	itt	ge
 800874e:	f021 0104 	bicge.w	r1, r1, #4
 8008752:	6021      	strge	r1, [r4, #0]
 8008754:	b90e      	cbnz	r6, 800875a <_printf_i+0x116>
 8008756:	2d00      	cmp	r5, #0
 8008758:	d04b      	beq.n	80087f2 <_printf_i+0x1ae>
 800875a:	4615      	mov	r5, r2
 800875c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008760:	fb03 6711 	mls	r7, r3, r1, r6
 8008764:	5dc7      	ldrb	r7, [r0, r7]
 8008766:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800876a:	4637      	mov	r7, r6
 800876c:	42bb      	cmp	r3, r7
 800876e:	460e      	mov	r6, r1
 8008770:	d9f4      	bls.n	800875c <_printf_i+0x118>
 8008772:	2b08      	cmp	r3, #8
 8008774:	d10b      	bne.n	800878e <_printf_i+0x14a>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	07de      	lsls	r6, r3, #31
 800877a:	d508      	bpl.n	800878e <_printf_i+0x14a>
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	6861      	ldr	r1, [r4, #4]
 8008780:	4299      	cmp	r1, r3
 8008782:	bfde      	ittt	le
 8008784:	2330      	movle	r3, #48	; 0x30
 8008786:	f805 3c01 	strble.w	r3, [r5, #-1]
 800878a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800878e:	1b52      	subs	r2, r2, r5
 8008790:	6122      	str	r2, [r4, #16]
 8008792:	464b      	mov	r3, r9
 8008794:	4621      	mov	r1, r4
 8008796:	4640      	mov	r0, r8
 8008798:	f8cd a000 	str.w	sl, [sp]
 800879c:	aa03      	add	r2, sp, #12
 800879e:	f7ff fedf 	bl	8008560 <_printf_common>
 80087a2:	3001      	adds	r0, #1
 80087a4:	d14a      	bne.n	800883c <_printf_i+0x1f8>
 80087a6:	f04f 30ff 	mov.w	r0, #4294967295
 80087aa:	b004      	add	sp, #16
 80087ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	f043 0320 	orr.w	r3, r3, #32
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	2778      	movs	r7, #120	; 0x78
 80087ba:	4832      	ldr	r0, [pc, #200]	; (8008884 <_printf_i+0x240>)
 80087bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	6829      	ldr	r1, [r5, #0]
 80087c4:	061f      	lsls	r7, r3, #24
 80087c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80087ca:	d402      	bmi.n	80087d2 <_printf_i+0x18e>
 80087cc:	065f      	lsls	r7, r3, #25
 80087ce:	bf48      	it	mi
 80087d0:	b2b6      	uxthmi	r6, r6
 80087d2:	07df      	lsls	r7, r3, #31
 80087d4:	bf48      	it	mi
 80087d6:	f043 0320 	orrmi.w	r3, r3, #32
 80087da:	6029      	str	r1, [r5, #0]
 80087dc:	bf48      	it	mi
 80087de:	6023      	strmi	r3, [r4, #0]
 80087e0:	b91e      	cbnz	r6, 80087ea <_printf_i+0x1a6>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	f023 0320 	bic.w	r3, r3, #32
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	2310      	movs	r3, #16
 80087ec:	e7a6      	b.n	800873c <_printf_i+0xf8>
 80087ee:	4824      	ldr	r0, [pc, #144]	; (8008880 <_printf_i+0x23c>)
 80087f0:	e7e4      	b.n	80087bc <_printf_i+0x178>
 80087f2:	4615      	mov	r5, r2
 80087f4:	e7bd      	b.n	8008772 <_printf_i+0x12e>
 80087f6:	682b      	ldr	r3, [r5, #0]
 80087f8:	6826      	ldr	r6, [r4, #0]
 80087fa:	1d18      	adds	r0, r3, #4
 80087fc:	6961      	ldr	r1, [r4, #20]
 80087fe:	6028      	str	r0, [r5, #0]
 8008800:	0635      	lsls	r5, r6, #24
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	d501      	bpl.n	800880a <_printf_i+0x1c6>
 8008806:	6019      	str	r1, [r3, #0]
 8008808:	e002      	b.n	8008810 <_printf_i+0x1cc>
 800880a:	0670      	lsls	r0, r6, #25
 800880c:	d5fb      	bpl.n	8008806 <_printf_i+0x1c2>
 800880e:	8019      	strh	r1, [r3, #0]
 8008810:	2300      	movs	r3, #0
 8008812:	4615      	mov	r5, r2
 8008814:	6123      	str	r3, [r4, #16]
 8008816:	e7bc      	b.n	8008792 <_printf_i+0x14e>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	2100      	movs	r1, #0
 800881c:	1d1a      	adds	r2, r3, #4
 800881e:	602a      	str	r2, [r5, #0]
 8008820:	681d      	ldr	r5, [r3, #0]
 8008822:	6862      	ldr	r2, [r4, #4]
 8008824:	4628      	mov	r0, r5
 8008826:	f000 f909 	bl	8008a3c <memchr>
 800882a:	b108      	cbz	r0, 8008830 <_printf_i+0x1ec>
 800882c:	1b40      	subs	r0, r0, r5
 800882e:	6060      	str	r0, [r4, #4]
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	2300      	movs	r3, #0
 8008836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883a:	e7aa      	b.n	8008792 <_printf_i+0x14e>
 800883c:	462a      	mov	r2, r5
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	47d0      	blx	sl
 8008846:	3001      	adds	r0, #1
 8008848:	d0ad      	beq.n	80087a6 <_printf_i+0x162>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	079b      	lsls	r3, r3, #30
 800884e:	d413      	bmi.n	8008878 <_printf_i+0x234>
 8008850:	68e0      	ldr	r0, [r4, #12]
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	4298      	cmp	r0, r3
 8008856:	bfb8      	it	lt
 8008858:	4618      	movlt	r0, r3
 800885a:	e7a6      	b.n	80087aa <_printf_i+0x166>
 800885c:	2301      	movs	r3, #1
 800885e:	4632      	mov	r2, r6
 8008860:	4649      	mov	r1, r9
 8008862:	4640      	mov	r0, r8
 8008864:	47d0      	blx	sl
 8008866:	3001      	adds	r0, #1
 8008868:	d09d      	beq.n	80087a6 <_printf_i+0x162>
 800886a:	3501      	adds	r5, #1
 800886c:	68e3      	ldr	r3, [r4, #12]
 800886e:	9903      	ldr	r1, [sp, #12]
 8008870:	1a5b      	subs	r3, r3, r1
 8008872:	42ab      	cmp	r3, r5
 8008874:	dcf2      	bgt.n	800885c <_printf_i+0x218>
 8008876:	e7eb      	b.n	8008850 <_printf_i+0x20c>
 8008878:	2500      	movs	r5, #0
 800887a:	f104 0619 	add.w	r6, r4, #25
 800887e:	e7f5      	b.n	800886c <_printf_i+0x228>
 8008880:	0800991d 	.word	0x0800991d
 8008884:	0800992e 	.word	0x0800992e

08008888 <__swbuf_r>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	460e      	mov	r6, r1
 800888c:	4614      	mov	r4, r2
 800888e:	4605      	mov	r5, r0
 8008890:	b118      	cbz	r0, 800889a <__swbuf_r+0x12>
 8008892:	6a03      	ldr	r3, [r0, #32]
 8008894:	b90b      	cbnz	r3, 800889a <__swbuf_r+0x12>
 8008896:	f7ff fa29 	bl	8007cec <__sinit>
 800889a:	69a3      	ldr	r3, [r4, #24]
 800889c:	60a3      	str	r3, [r4, #8]
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	071a      	lsls	r2, r3, #28
 80088a2:	d525      	bpl.n	80088f0 <__swbuf_r+0x68>
 80088a4:	6923      	ldr	r3, [r4, #16]
 80088a6:	b31b      	cbz	r3, 80088f0 <__swbuf_r+0x68>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	6922      	ldr	r2, [r4, #16]
 80088ac:	b2f6      	uxtb	r6, r6
 80088ae:	1a98      	subs	r0, r3, r2
 80088b0:	6963      	ldr	r3, [r4, #20]
 80088b2:	4637      	mov	r7, r6
 80088b4:	4283      	cmp	r3, r0
 80088b6:	dc04      	bgt.n	80088c2 <__swbuf_r+0x3a>
 80088b8:	4621      	mov	r1, r4
 80088ba:	4628      	mov	r0, r5
 80088bc:	f7ff fcbe 	bl	800823c <_fflush_r>
 80088c0:	b9e0      	cbnz	r0, 80088fc <__swbuf_r+0x74>
 80088c2:	68a3      	ldr	r3, [r4, #8]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	60a3      	str	r3, [r4, #8]
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	701e      	strb	r6, [r3, #0]
 80088d0:	6962      	ldr	r2, [r4, #20]
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d004      	beq.n	80088e2 <__swbuf_r+0x5a>
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	07db      	lsls	r3, r3, #31
 80088dc:	d506      	bpl.n	80088ec <__swbuf_r+0x64>
 80088de:	2e0a      	cmp	r6, #10
 80088e0:	d104      	bne.n	80088ec <__swbuf_r+0x64>
 80088e2:	4621      	mov	r1, r4
 80088e4:	4628      	mov	r0, r5
 80088e6:	f7ff fca9 	bl	800823c <_fflush_r>
 80088ea:	b938      	cbnz	r0, 80088fc <__swbuf_r+0x74>
 80088ec:	4638      	mov	r0, r7
 80088ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f0:	4621      	mov	r1, r4
 80088f2:	4628      	mov	r0, r5
 80088f4:	f000 f806 	bl	8008904 <__swsetup_r>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d0d5      	beq.n	80088a8 <__swbuf_r+0x20>
 80088fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008900:	e7f4      	b.n	80088ec <__swbuf_r+0x64>
	...

08008904 <__swsetup_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4b2a      	ldr	r3, [pc, #168]	; (80089b0 <__swsetup_r+0xac>)
 8008908:	4605      	mov	r5, r0
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	460c      	mov	r4, r1
 800890e:	b118      	cbz	r0, 8008918 <__swsetup_r+0x14>
 8008910:	6a03      	ldr	r3, [r0, #32]
 8008912:	b90b      	cbnz	r3, 8008918 <__swsetup_r+0x14>
 8008914:	f7ff f9ea 	bl	8007cec <__sinit>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800891e:	0718      	lsls	r0, r3, #28
 8008920:	d422      	bmi.n	8008968 <__swsetup_r+0x64>
 8008922:	06d9      	lsls	r1, r3, #27
 8008924:	d407      	bmi.n	8008936 <__swsetup_r+0x32>
 8008926:	2309      	movs	r3, #9
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800892e:	f04f 30ff 	mov.w	r0, #4294967295
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	e034      	b.n	80089a0 <__swsetup_r+0x9c>
 8008936:	0758      	lsls	r0, r3, #29
 8008938:	d512      	bpl.n	8008960 <__swsetup_r+0x5c>
 800893a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800893c:	b141      	cbz	r1, 8008950 <__swsetup_r+0x4c>
 800893e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008942:	4299      	cmp	r1, r3
 8008944:	d002      	beq.n	800894c <__swsetup_r+0x48>
 8008946:	4628      	mov	r0, r5
 8008948:	f7ff fafa 	bl	8007f40 <_free_r>
 800894c:	2300      	movs	r3, #0
 800894e:	6363      	str	r3, [r4, #52]	; 0x34
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	2300      	movs	r3, #0
 800895a:	6063      	str	r3, [r4, #4]
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	f043 0308 	orr.w	r3, r3, #8
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	b94b      	cbnz	r3, 8008980 <__swsetup_r+0x7c>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008976:	d003      	beq.n	8008980 <__swsetup_r+0x7c>
 8008978:	4621      	mov	r1, r4
 800897a:	4628      	mov	r0, r5
 800897c:	f000 f891 	bl	8008aa2 <__smakebuf_r>
 8008980:	89a0      	ldrh	r0, [r4, #12]
 8008982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008986:	f010 0301 	ands.w	r3, r0, #1
 800898a:	d00a      	beq.n	80089a2 <__swsetup_r+0x9e>
 800898c:	2300      	movs	r3, #0
 800898e:	60a3      	str	r3, [r4, #8]
 8008990:	6963      	ldr	r3, [r4, #20]
 8008992:	425b      	negs	r3, r3
 8008994:	61a3      	str	r3, [r4, #24]
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	b943      	cbnz	r3, 80089ac <__swsetup_r+0xa8>
 800899a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800899e:	d1c4      	bne.n	800892a <__swsetup_r+0x26>
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	0781      	lsls	r1, r0, #30
 80089a4:	bf58      	it	pl
 80089a6:	6963      	ldrpl	r3, [r4, #20]
 80089a8:	60a3      	str	r3, [r4, #8]
 80089aa:	e7f4      	b.n	8008996 <__swsetup_r+0x92>
 80089ac:	2000      	movs	r0, #0
 80089ae:	e7f7      	b.n	80089a0 <__swsetup_r+0x9c>
 80089b0:	20000418 	.word	0x20000418

080089b4 <_raise_r>:
 80089b4:	291f      	cmp	r1, #31
 80089b6:	b538      	push	{r3, r4, r5, lr}
 80089b8:	4604      	mov	r4, r0
 80089ba:	460d      	mov	r5, r1
 80089bc:	d904      	bls.n	80089c8 <_raise_r+0x14>
 80089be:	2316      	movs	r3, #22
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089ca:	b112      	cbz	r2, 80089d2 <_raise_r+0x1e>
 80089cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089d0:	b94b      	cbnz	r3, 80089e6 <_raise_r+0x32>
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 f830 	bl	8008a38 <_getpid_r>
 80089d8:	462a      	mov	r2, r5
 80089da:	4601      	mov	r1, r0
 80089dc:	4620      	mov	r0, r4
 80089de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e2:	f000 b817 	b.w	8008a14 <_kill_r>
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d00a      	beq.n	8008a00 <_raise_r+0x4c>
 80089ea:	1c59      	adds	r1, r3, #1
 80089ec:	d103      	bne.n	80089f6 <_raise_r+0x42>
 80089ee:	2316      	movs	r3, #22
 80089f0:	6003      	str	r3, [r0, #0]
 80089f2:	2001      	movs	r0, #1
 80089f4:	e7e7      	b.n	80089c6 <_raise_r+0x12>
 80089f6:	2400      	movs	r4, #0
 80089f8:	4628      	mov	r0, r5
 80089fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089fe:	4798      	blx	r3
 8008a00:	2000      	movs	r0, #0
 8008a02:	e7e0      	b.n	80089c6 <_raise_r+0x12>

08008a04 <raise>:
 8008a04:	4b02      	ldr	r3, [pc, #8]	; (8008a10 <raise+0xc>)
 8008a06:	4601      	mov	r1, r0
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	f7ff bfd3 	b.w	80089b4 <_raise_r>
 8008a0e:	bf00      	nop
 8008a10:	20000418 	.word	0x20000418

08008a14 <_kill_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	2300      	movs	r3, #0
 8008a18:	4d06      	ldr	r5, [pc, #24]	; (8008a34 <_kill_r+0x20>)
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	4608      	mov	r0, r1
 8008a1e:	4611      	mov	r1, r2
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	f7f9 fd23 	bl	800246c <_kill>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	d102      	bne.n	8008a30 <_kill_r+0x1c>
 8008a2a:	682b      	ldr	r3, [r5, #0]
 8008a2c:	b103      	cbz	r3, 8008a30 <_kill_r+0x1c>
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	bd38      	pop	{r3, r4, r5, pc}
 8008a32:	bf00      	nop
 8008a34:	20002950 	.word	0x20002950

08008a38 <_getpid_r>:
 8008a38:	f7f9 bd16 	b.w	8002468 <_getpid>

08008a3c <memchr>:
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	b510      	push	{r4, lr}
 8008a40:	b2c9      	uxtb	r1, r1
 8008a42:	4402      	add	r2, r0
 8008a44:	4293      	cmp	r3, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	d101      	bne.n	8008a4e <memchr+0x12>
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	e003      	b.n	8008a56 <memchr+0x1a>
 8008a4e:	7804      	ldrb	r4, [r0, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	428c      	cmp	r4, r1
 8008a54:	d1f6      	bne.n	8008a44 <memchr+0x8>
 8008a56:	bd10      	pop	{r4, pc}

08008a58 <__swhatbuf_r>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a60:	4615      	mov	r5, r2
 8008a62:	2900      	cmp	r1, #0
 8008a64:	461e      	mov	r6, r3
 8008a66:	b096      	sub	sp, #88	; 0x58
 8008a68:	da0c      	bge.n	8008a84 <__swhatbuf_r+0x2c>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a72:	bf0c      	ite	eq
 8008a74:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a78:	2340      	movne	r3, #64	; 0x40
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	6031      	str	r1, [r6, #0]
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	b016      	add	sp, #88	; 0x58
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	466a      	mov	r2, sp
 8008a86:	f000 f849 	bl	8008b1c <_fstat_r>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	dbed      	blt.n	8008a6a <__swhatbuf_r+0x12>
 8008a8e:	9901      	ldr	r1, [sp, #4]
 8008a90:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a94:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a98:	4259      	negs	r1, r3
 8008a9a:	4159      	adcs	r1, r3
 8008a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aa0:	e7eb      	b.n	8008a7a <__swhatbuf_r+0x22>

08008aa2 <__smakebuf_r>:
 8008aa2:	898b      	ldrh	r3, [r1, #12]
 8008aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008aa6:	079d      	lsls	r5, r3, #30
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	d507      	bpl.n	8008abe <__smakebuf_r+0x1c>
 8008aae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ab2:	6023      	str	r3, [r4, #0]
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	6163      	str	r3, [r4, #20]
 8008aba:	b002      	add	sp, #8
 8008abc:	bd70      	pop	{r4, r5, r6, pc}
 8008abe:	466a      	mov	r2, sp
 8008ac0:	ab01      	add	r3, sp, #4
 8008ac2:	f7ff ffc9 	bl	8008a58 <__swhatbuf_r>
 8008ac6:	9900      	ldr	r1, [sp, #0]
 8008ac8:	4605      	mov	r5, r0
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff faa8 	bl	8008020 <_malloc_r>
 8008ad0:	b948      	cbnz	r0, 8008ae6 <__smakebuf_r+0x44>
 8008ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ad6:	059a      	lsls	r2, r3, #22
 8008ad8:	d4ef      	bmi.n	8008aba <__smakebuf_r+0x18>
 8008ada:	f023 0303 	bic.w	r3, r3, #3
 8008ade:	f043 0302 	orr.w	r3, r3, #2
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	e7e3      	b.n	8008aae <__smakebuf_r+0xc>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	6020      	str	r0, [r4, #0]
 8008aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	9b00      	ldr	r3, [sp, #0]
 8008af2:	6120      	str	r0, [r4, #16]
 8008af4:	6163      	str	r3, [r4, #20]
 8008af6:	9b01      	ldr	r3, [sp, #4]
 8008af8:	b15b      	cbz	r3, 8008b12 <__smakebuf_r+0x70>
 8008afa:	4630      	mov	r0, r6
 8008afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b00:	f000 f81e 	bl	8008b40 <_isatty_r>
 8008b04:	b128      	cbz	r0, 8008b12 <__smakebuf_r+0x70>
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	f023 0303 	bic.w	r3, r3, #3
 8008b0c:	f043 0301 	orr.w	r3, r3, #1
 8008b10:	81a3      	strh	r3, [r4, #12]
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	431d      	orrs	r5, r3
 8008b16:	81a5      	strh	r5, [r4, #12]
 8008b18:	e7cf      	b.n	8008aba <__smakebuf_r+0x18>
	...

08008b1c <_fstat_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	2300      	movs	r3, #0
 8008b20:	4d06      	ldr	r5, [pc, #24]	; (8008b3c <_fstat_r+0x20>)
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	4611      	mov	r1, r2
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	f7f9 fcca 	bl	80024c2 <_fstat>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	d102      	bne.n	8008b38 <_fstat_r+0x1c>
 8008b32:	682b      	ldr	r3, [r5, #0]
 8008b34:	b103      	cbz	r3, 8008b38 <_fstat_r+0x1c>
 8008b36:	6023      	str	r3, [r4, #0]
 8008b38:	bd38      	pop	{r3, r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20002950 	.word	0x20002950

08008b40 <_isatty_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	2300      	movs	r3, #0
 8008b44:	4d05      	ldr	r5, [pc, #20]	; (8008b5c <_isatty_r+0x1c>)
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	f7f9 fcbe 	bl	80024cc <_isatty>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_isatty_r+0x1a>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_isatty_r+0x1a>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	20002950 	.word	0x20002950

08008b60 <_init>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr

08008b6c <_fini>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr
