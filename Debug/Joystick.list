
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009740  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  08009850  08009850  00019850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a0  0800a2a0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2a0  0800a2a0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2a0  0800a2a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800a2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000232c  20000018  0800a2c0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002344  0800a2c0  00022344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3a4  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004045  00000000  00000000  0003a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  0003e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001319  00000000  00000000  0003fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f01  00000000  00000000  00041011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001deb6  00000000  00000000  0005af12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b12a  00000000  00000000  00078dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000679c  00000000  00000000  00113ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08009838 	.word	0x08009838

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08009838 	.word	0x08009838

08000150 <getPlayer>:


extern dificultad_t dificultad;


player_t *getPlayer(){
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

	return &Player;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <getPlayer+0x10>)
}
 8000156:	4618      	mov	r0, r3
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000034 	.word	0x20000034

08000164 <getAlien>:

alien_t *getAlien(uint8_t fila, uint8_t columna){
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	460a      	mov	r2, r1
 800016e:	71fb      	strb	r3, [r7, #7]
 8000170:	4613      	mov	r3, r2
 8000172:	71bb      	strb	r3, [r7, #6]
	return &Alien[fila][columna];
 8000174:	79f9      	ldrb	r1, [r7, #7]
 8000176:	79bb      	ldrb	r3, [r7, #6]
 8000178:	461a      	mov	r2, r3
 800017a:	0092      	lsls	r2, r2, #2
 800017c:	441a      	add	r2, r3
 800017e:	460b      	mov	r3, r1
 8000180:	009b      	lsls	r3, r3, #2
 8000182:	440b      	add	r3, r1
 8000184:	00d9      	lsls	r1, r3, #3
 8000186:	1ac9      	subs	r1, r1, r3
 8000188:	1853      	adds	r3, r2, r1
 800018a:	4a03      	ldr	r2, [pc, #12]	; (8000198 <getAlien+0x34>)
 800018c:	4413      	add	r3, r2
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000040 	.word	0x20000040

0800019c <getMovAliens>:

movimiento_aliens_t *getMovAliens(){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	return &movimiento_Aliens;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <getMovAliens+0x10>)
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000003c 	.word	0x2000003c

080001b0 <getDisparo>:

disparo_t *getDisparo(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	return &Disparo;
 80001b4:	4b02      	ldr	r3, [pc, #8]	; (80001c0 <getDisparo+0x10>)
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000038 	.word	0x20000038

080001c4 <playerInit>:

void playerInit(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	Player.posicion_X = 64;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <playerInit+0x14>)
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	705a      	strb	r2, [r3, #1]

}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000034 	.word	0x20000034

080001dc <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af02      	add	r7, sp, #8
 80001e2:	4603      	mov	r3, r0
 80001e4:	6039      	str	r1, [r7, #0]
 80001e6:	71fb      	strb	r3, [r7, #7]

	if(direccion == derecha){
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10e      	bne.n	800020c <plotPlayer+0x30>

		if(player->posicion_X >= 120){
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	2b77      	cmp	r3, #119	; 0x77
 80001f4:	d903      	bls.n	80001fe <plotPlayer+0x22>
			player->posicion_X = 120;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2278      	movs	r2, #120	; 0x78
 80001fa:	705a      	strb	r2, [r3, #1]
 80001fc:	e017      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X + 4;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	3304      	adds	r3, #4
 8000204:	b2da      	uxtb	r2, r3
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	705a      	strb	r2, [r3, #1]
 800020a:	e010      	b.n	800022e <plotPlayer+0x52>
		}

	}
	else if(direccion == izquierda){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b03      	cmp	r3, #3
 8000210:	d10d      	bne.n	800022e <plotPlayer+0x52>

		if(player->posicion_X <= 0){
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d103      	bne.n	8000222 <plotPlayer+0x46>
			player->posicion_X = 0;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	705a      	strb	r2, [r3, #1]
 8000220:	e005      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X - 4;
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	3b04      	subs	r3, #4
 8000228:	b2da      	uxtb	r2, r3
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	705a      	strb	r2, [r3, #1]
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	b218      	sxth	r0, r3
 8000234:	2301      	movs	r3, #1
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	2308      	movs	r3, #8
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2308      	movs	r3, #8
 800023e:	4a04      	ldr	r2, [pc, #16]	; (8000250 <plotPlayer+0x74>)
 8000240:	2138      	movs	r1, #56	; 0x38
 8000242:	f001 fbe7 	bl	8001a14 <SSD1306_DrawBitmap>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	0800a090 	.word	0x0800a090

08000254 <InvaderInit>:



void InvaderInit(){
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

	movimiento_Aliens.orientacion = mov_derecha;
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <InvaderInit+0xa0>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000260:	2300      	movs	r3, #0
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	e03e      	b.n	80002e4 <InvaderInit+0x90>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	e035      	b.n	80002d8 <InvaderInit+0x84>
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	461a      	mov	r2, r3
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	441a      	add	r2, r3
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	4413      	add	r3, r2
 8000278:	b2dc      	uxtb	r4, r3
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff6f 	bl	8000164 <getAlien>
 8000286:	4603      	mov	r3, r0
 8000288:	f104 020a 	add.w	r2, r4, #10
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	701a      	strb	r2, [r3, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff64 	bl	8000164 <getAlien>
 800029c:	4602      	mov	r2, r0
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4619      	mov	r1, r3
 80002a2:	0089      	lsls	r1, r1, #2
 80002a4:	4419      	add	r1, r3
 80002a6:	0049      	lsls	r1, r1, #1
 80002a8:	440b      	add	r3, r1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	7053      	strb	r3, [r2, #1]
			getAlien(y, x)->vivo = true;
 80002ae:	79ba      	ldrb	r2, [r7, #6]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff55 	bl	8000164 <getAlien>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2201      	movs	r2, #1
 80002be:	709a      	strb	r2, [r3, #2]
			getAlien(y, x)->conteo_explosion = 2;
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff4c 	bl	8000164 <getAlien>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2202      	movs	r2, #2
 80002d0:	711a      	strb	r2, [r3, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b06      	cmp	r3, #6
 80002dc:	d9c6      	bls.n	800026c <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	3301      	adds	r3, #1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d9bd      	bls.n	8000266 <InvaderInit+0x12>
		}
	}

}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	2000003c 	.word	0x2000003c

080002f8 <plotAliens>:

void plotAliens(){
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af02      	add	r7, sp, #8


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80002fe:	f7ff ff4d 	bl	800019c <getMovAliens>
 8000302:	4603      	mov	r3, r0
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	4aa9      	ldr	r2, [pc, #676]	; (80005ac <plotAliens+0x2b4>)
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	fbb3 f1f2 	udiv	r1, r3, r2
 800030e:	fb01 f202 	mul.w	r2, r1, r2
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 80a8 	bne.w	800046c <plotAliens+0x174>
			switch(getMovAliens()->orientacion){
 800031c:	f7ff ff3e 	bl	800019c <getMovAliens>
 8000320:	4603      	mov	r3, r0
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <plotAliens+0x36>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d025      	beq.n	8000378 <plotAliens+0x80>
							}
						}

						break;
				default:
					break;
 800032c:	e049      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	e01d      	b.n	8000370 <plotAliens+0x78>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000334:	2300      	movs	r3, #0
 8000336:	71bb      	strb	r3, [r7, #6]
 8000338:	e014      	b.n	8000364 <plotAliens+0x6c>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 1;
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff0f 	bl	8000164 <getAlien>
 8000346:	4603      	mov	r3, r0
 8000348:	781c      	ldrb	r4, [r3, #0]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff07 	bl	8000164 <getAlien>
 8000356:	4603      	mov	r3, r0
 8000358:	1c62      	adds	r2, r4, #1
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3301      	adds	r3, #1
 8000362:	71bb      	strb	r3, [r7, #6]
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	2b06      	cmp	r3, #6
 8000368:	d9e7      	bls.n	800033a <plotAliens+0x42>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	3301      	adds	r3, #1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d9de      	bls.n	8000334 <plotAliens+0x3c>
					break;
 8000376:	e024      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000378:	2300      	movs	r3, #0
 800037a:	717b      	strb	r3, [r7, #5]
 800037c:	e01d      	b.n	80003ba <plotAliens+0xc2>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800037e:	2300      	movs	r3, #0
 8000380:	713b      	strb	r3, [r7, #4]
 8000382:	e014      	b.n	80003ae <plotAliens+0xb6>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 1;
 8000384:	793a      	ldrb	r2, [r7, #4]
 8000386:	797b      	ldrb	r3, [r7, #5]
 8000388:	4611      	mov	r1, r2
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff feea 	bl	8000164 <getAlien>
 8000390:	4603      	mov	r3, r0
 8000392:	781c      	ldrb	r4, [r3, #0]
 8000394:	793a      	ldrb	r2, [r7, #4]
 8000396:	797b      	ldrb	r3, [r7, #5]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fee2 	bl	8000164 <getAlien>
 80003a0:	4603      	mov	r3, r0
 80003a2:	1e62      	subs	r2, r4, #1
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003a8:	793b      	ldrb	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	713b      	strb	r3, [r7, #4]
 80003ae:	793b      	ldrb	r3, [r7, #4]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d9e7      	bls.n	8000384 <plotAliens+0x8c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	3301      	adds	r3, #1
 80003b8:	717b      	strb	r3, [r7, #5]
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d9de      	bls.n	800037e <plotAliens+0x86>
						break;
 80003c0:	bf00      	nop
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 80003c2:	2106      	movs	r1, #6
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fecd 	bl	8000164 <getAlien>
 80003ca:	4603      	mov	r3, r0
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b72      	cmp	r3, #114	; 0x72
 80003d0:	d904      	bls.n	80003dc <plotAliens+0xe4>

				getMovAliens()->orientacion = mov_izquierda;
 80003d2:	f7ff fee3 	bl	800019c <getMovAliens>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 80003dc:	2100      	movs	r1, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff fec0 	bl	8000164 <getAlien>
 80003e4:	4603      	mov	r3, r0
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10e      	bne.n	800040a <plotAliens+0x112>
				getMovAliens()->orientacion = mov_derecha;
 80003ec:	f7ff fed6 	bl	800019c <getMovAliens>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 80003f6:	f7ff fed1 	bl	800019c <getMovAliens>
 80003fa:	4603      	mov	r3, r0
 80003fc:	789c      	ldrb	r4, [r3, #2]
 80003fe:	f7ff fecd 	bl	800019c <getMovAliens>
 8000402:	4603      	mov	r3, r0
 8000404:	1c62      	adds	r2, r4, #1
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 800040a:	f7ff fec7 	bl	800019c <getMovAliens>
 800040e:	4603      	mov	r3, r0
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	2b0a      	cmp	r3, #10
 8000414:	d12a      	bne.n	800046c <plotAliens+0x174>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000416:	2300      	movs	r3, #0
 8000418:	70fb      	strb	r3, [r7, #3]
 800041a:	e024      	b.n	8000466 <plotAliens+0x16e>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800041c:	2300      	movs	r3, #0
 800041e:	70bb      	strb	r3, [r7, #2]
 8000420:	e01b      	b.n	800045a <plotAliens+0x162>

						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 8000422:	78ba      	ldrb	r2, [r7, #2]
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe9b 	bl	8000164 <getAlien>
 800042e:	4603      	mov	r3, r0
 8000430:	785d      	ldrb	r5, [r3, #1]
 8000432:	4b5e      	ldr	r3, [pc, #376]	; (80005ac <plotAliens+0x2b4>)
 8000434:	785c      	ldrb	r4, [r3, #1]
 8000436:	78ba      	ldrb	r2, [r7, #2]
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe91 	bl	8000164 <getAlien>
 8000442:	4603      	mov	r3, r0
 8000444:	192a      	adds	r2, r5, r4
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	705a      	strb	r2, [r3, #1]
						getMovAliens()->conteo_bajada = 0;
 800044a:	f7ff fea7 	bl	800019c <getMovAliens>
 800044e:	4603      	mov	r3, r0
 8000450:	2200      	movs	r2, #0
 8000452:	709a      	strb	r2, [r3, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	3301      	adds	r3, #1
 8000458:	70bb      	strb	r3, [r7, #2]
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	2b06      	cmp	r3, #6
 800045e:	d9e0      	bls.n	8000422 <plotAliens+0x12a>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	3301      	adds	r3, #1
 8000464:	70fb      	strb	r3, [r7, #3]
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d9d7      	bls.n	800041c <plotAliens+0x124>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 800046c:	f7ff fe96 	bl	800019c <getMovAliens>
 8000470:	4603      	mov	r3, r0
 8000472:	785c      	ldrb	r4, [r3, #1]
 8000474:	f7ff fe92 	bl	800019c <getMovAliens>
 8000478:	4603      	mov	r3, r0
 800047a:	1c62      	adds	r2, r4, #1
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	705a      	strb	r2, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000480:	2300      	movs	r3, #0
 8000482:	707b      	strb	r3, [r7, #1]
 8000484:	e089      	b.n	800059a <plotAliens+0x2a2>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000486:	2300      	movs	r3, #0
 8000488:	703b      	strb	r3, [r7, #0]
 800048a:	e07f      	b.n	800058c <plotAliens+0x294>

					switch(y){
 800048c:	787b      	ldrb	r3, [r7, #1]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <plotAliens+0x1a0>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d026      	beq.n	80004e4 <plotAliens+0x1ec>
 8000496:	e04b      	b.n	8000530 <plotAliens+0x238>

					case 0:
						if(getAlien(y,x)->vivo == true){
 8000498:	783a      	ldrb	r2, [r7, #0]
 800049a:	787b      	ldrb	r3, [r7, #1]
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe60 	bl	8000164 <getAlien>
 80004a4:	4603      	mov	r3, r0
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d167      	bne.n	800057c <plotAliens+0x284>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004ac:	783a      	ldrb	r2, [r7, #0]
 80004ae:	787b      	ldrb	r3, [r7, #1]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe56 	bl	8000164 <getAlien>
 80004b8:	4603      	mov	r3, r0
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b21c      	sxth	r4, r3
 80004be:	783a      	ldrb	r2, [r7, #0]
 80004c0:	787b      	ldrb	r3, [r7, #1]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe4d 	bl	8000164 <getAlien>
 80004ca:	4603      	mov	r3, r0
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	b219      	sxth	r1, r3
 80004d0:	2301      	movs	r3, #1
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2308      	movs	r3, #8
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2310      	movs	r3, #16
 80004da:	4a35      	ldr	r2, [pc, #212]	; (80005b0 <plotAliens+0x2b8>)
 80004dc:	4620      	mov	r0, r4
 80004de:	f001 fa99 	bl	8001a14 <SSD1306_DrawBitmap>
						}
						break;
 80004e2:	e04b      	b.n	800057c <plotAliens+0x284>
					case 1:
						if(getAlien(y,x)->vivo == true){
 80004e4:	783a      	ldrb	r2, [r7, #0]
 80004e6:	787b      	ldrb	r3, [r7, #1]
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe3a 	bl	8000164 <getAlien>
 80004f0:	4603      	mov	r3, r0
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d143      	bne.n	8000580 <plotAliens+0x288>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004f8:	783a      	ldrb	r2, [r7, #0]
 80004fa:	787b      	ldrb	r3, [r7, #1]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe30 	bl	8000164 <getAlien>
 8000504:	4603      	mov	r3, r0
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b21c      	sxth	r4, r3
 800050a:	783a      	ldrb	r2, [r7, #0]
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe27 	bl	8000164 <getAlien>
 8000516:	4603      	mov	r3, r0
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	b219      	sxth	r1, r3
 800051c:	2301      	movs	r3, #1
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2308      	movs	r3, #8
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2310      	movs	r3, #16
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <plotAliens+0x2b8>)
 8000528:	4620      	mov	r0, r4
 800052a:	f001 fa73 	bl	8001a14 <SSD1306_DrawBitmap>
						}
						break;
 800052e:	e027      	b.n	8000580 <plotAliens+0x288>
					default:
						if(getAlien(y,x)->vivo == true){
 8000530:	783a      	ldrb	r2, [r7, #0]
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe14 	bl	8000164 <getAlien>
 800053c:	4603      	mov	r3, r0
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d11f      	bne.n	8000584 <plotAliens+0x28c>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000544:	783a      	ldrb	r2, [r7, #0]
 8000546:	787b      	ldrb	r3, [r7, #1]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe0a 	bl	8000164 <getAlien>
 8000550:	4603      	mov	r3, r0
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b21c      	sxth	r4, r3
 8000556:	783a      	ldrb	r2, [r7, #0]
 8000558:	787b      	ldrb	r3, [r7, #1]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe01 	bl	8000164 <getAlien>
 8000562:	4603      	mov	r3, r0
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	b219      	sxth	r1, r3
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2308      	movs	r3, #8
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2310      	movs	r3, #16
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <plotAliens+0x2bc>)
 8000574:	4620      	mov	r0, r4
 8000576:	f001 fa4d 	bl	8001a14 <SSD1306_DrawBitmap>
						}
						break;
 800057a:	e003      	b.n	8000584 <plotAliens+0x28c>
						break;
 800057c:	bf00      	nop
 800057e:	e002      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000580:	bf00      	nop
 8000582:	e000      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000584:	bf00      	nop
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000586:	783b      	ldrb	r3, [r7, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	703b      	strb	r3, [r7, #0]
 800058c:	783b      	ldrb	r3, [r7, #0]
 800058e:	2b06      	cmp	r3, #6
 8000590:	f67f af7c 	bls.w	800048c <plotAliens+0x194>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000594:	787b      	ldrb	r3, [r7, #1]
 8000596:	3301      	adds	r3, #1
 8000598:	707b      	strb	r3, [r7, #1]
 800059a:	787b      	ldrb	r3, [r7, #1]
 800059c:	2b02      	cmp	r3, #2
 800059e:	f67f af72 	bls.w	8000486 <plotAliens+0x18e>
					}
			}

		}

}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	200000ac 	.word	0x200000ac
 80005b0:	0800a070 	.word	0x0800a070
 80005b4:	0800a080 	.word	0x0800a080

080005b8 <disparoInit>:


void disparoInit(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

	Disparo.posicion_x = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <disparoInit+0x20>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <disparoInit+0x20>)
 80005c4:	223c      	movs	r2, #60	; 0x3c
 80005c6:	705a      	strb	r2, [r3, #1]
	Disparo.disparo = false;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <disparoInit+0x20>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	709a      	strb	r2, [r3, #2]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000038 	.word	0x20000038

080005dc <disparar>:


void disparar(){
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8


			if(getDisparo()->numero_disparos == 1){
 80005e2:	f7ff fde5 	bl	80001b0 <getDisparo>
 80005e6:	4603      	mov	r3, r0
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10c      	bne.n	8000608 <disparar+0x2c>
				getDisparo()->disparo = true;
 80005ee:	f7ff fddf 	bl	80001b0 <getDisparo>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2201      	movs	r2, #1
 80005f6:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 80005f8:	f7ff fdaa 	bl	8000150 <getPlayer>
 80005fc:	4604      	mov	r4, r0
 80005fe:	f7ff fdd7 	bl	80001b0 <getDisparo>
 8000602:	4603      	mov	r3, r0
 8000604:	7862      	ldrb	r2, [r4, #1]
 8000606:	701a      	strb	r2, [r3, #0]
			}


			if(getDisparo()->disparo == true){
 8000608:	f7ff fdd2 	bl	80001b0 <getDisparo>
 800060c:	4603      	mov	r3, r0
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d145      	bne.n	80006a0 <disparar+0xc4>
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 3, 1);
 8000614:	f7ff fdcc 	bl	80001b0 <getDisparo>
 8000618:	4603      	mov	r3, r0
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3304      	adds	r3, #4
 8000620:	b29c      	uxth	r4, r3
 8000622:	f7ff fdc5 	bl	80001b0 <getDisparo>
 8000626:	4603      	mov	r3, r0
 8000628:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800062c:	b29d      	uxth	r5, r3
 800062e:	f7ff fdbf 	bl	80001b0 <getDisparo>
 8000632:	4603      	mov	r3, r0
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	3304      	adds	r3, #4
 800063a:	b29e      	uxth	r6, r3
 800063c:	f7ff fdb8 	bl	80001b0 <getDisparo>
 8000640:	4603      	mov	r3, r0
 8000642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000646:	b29b      	uxth	r3, r3
 8000648:	3303      	adds	r3, #3
 800064a:	b29b      	uxth	r3, r3
 800064c:	2201      	movs	r2, #1
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	4632      	mov	r2, r6
 8000652:	4629      	mov	r1, r5
 8000654:	4620      	mov	r0, r4
 8000656:	f001 fc68 	bl	8001f2a <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800065a:	f7ff fda9 	bl	80001b0 <getDisparo>
 800065e:	4603      	mov	r3, r0
 8000660:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b06      	subs	r3, #6
 8000668:	b2dc      	uxtb	r4, r3
 800066a:	f7ff fda1 	bl	80001b0 <getDisparo>
 800066e:	4603      	mov	r3, r0
 8000670:	b262      	sxtb	r2, r4
 8000672:	705a      	strb	r2, [r3, #1]


				if(getDisparo()->posicion_y <= 0){
 8000674:	f7ff fd9c 	bl	80001b0 <getDisparo>
 8000678:	4603      	mov	r3, r0
 800067a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800067e:	2b00      	cmp	r3, #0
 8000680:	dc0e      	bgt.n	80006a0 <disparar+0xc4>
					//Se reinician los valores del disparo
					getDisparo()->disparo = false;
 8000682:	f7ff fd95 	bl	80001b0 <getDisparo>
 8000686:	4603      	mov	r3, r0
 8000688:	2200      	movs	r2, #0
 800068a:	709a      	strb	r2, [r3, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800068c:	f7ff fd90 	bl	80001b0 <getDisparo>
 8000690:	4603      	mov	r3, r0
 8000692:	223c      	movs	r2, #60	; 0x3c
 8000694:	705a      	strb	r2, [r3, #1]
					getDisparo()->numero_disparos = 0;
 8000696:	f7ff fd8b 	bl	80001b0 <getDisparo>
 800069a:	4603      	mov	r3, r0
 800069c:	2200      	movs	r2, #0
 800069e:	70da      	strb	r2, [r3, #3]
				}
			}


			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e0c0      	b.n	8000828 <disparar+0x24c>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	e0b6      	b.n	800081a <disparar+0x23e>

					if( (getDisparo()->posicion_x >= getAlien(y,x)->posicion_X) &&  (getDisparo()->posicion_x <= getAlien(y,x)->posicion_X + (TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS) )){
 80006ac:	f7ff fd80 	bl	80001b0 <getDisparo>
 80006b0:	4603      	mov	r3, r0
 80006b2:	781c      	ldrb	r4, [r3, #0]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd52 	bl	8000164 <getAlien>
 80006c0:	4603      	mov	r3, r0
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d35b      	bcc.n	8000780 <disparar+0x1a4>
 80006c8:	f7ff fd72 	bl	80001b0 <getDisparo>
 80006cc:	4603      	mov	r3, r0
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461c      	mov	r4, r3
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd43 	bl	8000164 <getAlien>
 80006de:	4603      	mov	r3, r0
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	330d      	adds	r3, #13
 80006e4:	429c      	cmp	r4, r3
 80006e6:	dc4b      	bgt.n	8000780 <disparar+0x1a4>
						if( (getDisparo()->posicion_y >= getAlien(y,x)->posicion_Y) && (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + (TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS)) ){
 80006e8:	f7ff fd62 	bl	80001b0 <getDisparo>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f2:	461c      	mov	r4, r3
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd32 	bl	8000164 <getAlien>
 8000700:	4603      	mov	r3, r0
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	429c      	cmp	r4, r3
 8000706:	db3b      	blt.n	8000780 <disparar+0x1a4>
 8000708:	f7ff fd52 	bl	80001b0 <getDisparo>
 800070c:	4603      	mov	r3, r0
 800070e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000712:	461c      	mov	r4, r3
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd22 	bl	8000164 <getAlien>
 8000720:	4603      	mov	r3, r0
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	330b      	adds	r3, #11
 8000726:	429c      	cmp	r4, r3
 8000728:	dc2a      	bgt.n	8000780 <disparar+0x1a4>

								if(getAlien(y,x)->vivo == true){
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd17 	bl	8000164 <getAlien>
 8000736:	4603      	mov	r3, r0
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d120      	bne.n	8000780 <disparar+0x1a4>
									getAlien(y,x)->vivo = false;
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd0d 	bl	8000164 <getAlien>
 800074a:	4603      	mov	r3, r0
 800074c:	2200      	movs	r2, #0
 800074e:	709a      	strb	r2, [r3, #2]
									getAlien(y,x)->explosion = true;
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd04 	bl	8000164 <getAlien>
 800075c:	4603      	mov	r3, r0
 800075e:	2201      	movs	r2, #1
 8000760:	70da      	strb	r2, [r3, #3]

									//Se reinician los valores del disparo
									getDisparo()->disparo = false;
 8000762:	f7ff fd25 	bl	80001b0 <getDisparo>
 8000766:	4603      	mov	r3, r0
 8000768:	2200      	movs	r2, #0
 800076a:	709a      	strb	r2, [r3, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800076c:	f7ff fd20 	bl	80001b0 <getDisparo>
 8000770:	4603      	mov	r3, r0
 8000772:	223c      	movs	r2, #60	; 0x3c
 8000774:	705a      	strb	r2, [r3, #1]
									getDisparo()->numero_disparos = 0;
 8000776:	f7ff fd1b 	bl	80001b0 <getDisparo>
 800077a:	4603      	mov	r3, r0
 800077c:	2200      	movs	r2, #0
 800077e:	70da      	strb	r2, [r3, #3]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fcec 	bl	8000164 <getAlien>
 800078c:	4603      	mov	r3, r0
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d13f      	bne.n	8000814 <disparar+0x238>
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fce2 	bl	8000164 <getAlien>
 80007a0:	4603      	mov	r3, r0
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b21c      	sxth	r4, r3
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fcd9 	bl	8000164 <getAlien>
 80007b2:	4603      	mov	r3, r0
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	b219      	sxth	r1, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2308      	movs	r3, #8
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2310      	movs	r3, #16
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <disparar+0x260>)
 80007c4:	4620      	mov	r0, r4
 80007c6:	f001 f925 	bl	8001a14 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fcc7 	bl	8000164 <getAlien>
 80007d6:	4603      	mov	r3, r0
 80007d8:	791c      	ldrb	r4, [r3, #4]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcbf 	bl	8000164 <getAlien>
 80007e6:	4603      	mov	r3, r0
 80007e8:	1e62      	subs	r2, r4, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	711a      	strb	r2, [r3, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fcb5 	bl	8000164 <getAlien>
 80007fa:	4603      	mov	r3, r0
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <disparar+0x238>
							getAlien(y,x)->explosion = false;
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fcab 	bl	8000164 <getAlien>
 800080e:	4603      	mov	r3, r0
 8000810:	2200      	movs	r2, #0
 8000812:	70da      	strb	r2, [r3, #3]
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	3301      	adds	r3, #1
 8000818:	71bb      	strb	r3, [r7, #6]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	2b06      	cmp	r3, #6
 800081e:	f67f af45 	bls.w	80006ac <disparar+0xd0>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b02      	cmp	r3, #2
 800082c:	f67f af3b 	bls.w	80006a6 <disparar+0xca>
						}
					}
				}
			}
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	bf00      	nop
 800083c:	0800a098 	.word	0x0800a098

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f002 f916 	bl	8002a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f850 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f98a 	bl	8000b64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000850:	f000 f8a8 	bl	80009a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000854:	f000 f922 	bl	8000a9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000858:	f000 f94e 	bl	8000af8 <MX_SPI1_Init>
  MX_ADC2_Init();
 800085c:	f000 f8e0 	bl	8000a20 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000860:	f005 fb92 	bl	8005f88 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutexPuntajes */
  mutexPuntajesHandle = osMutexNew(&mutexPuntajes_attributes);
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <main+0x78>)
 8000866:	f005 fccd 	bl	8006204 <osMutexNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <main+0x7c>)
 800086e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueJoystPant */
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <main+0x80>)
 8000872:	2103      	movs	r1, #3
 8000874:	200a      	movs	r0, #10
 8000876:	f005 fe0d 	bl	8006494 <osMessageQueueNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <main+0x84>)
 800087e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of JoystickTask */
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000880:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <main+0x88>)
 8000882:	2100      	movs	r1, #0
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <main+0x8c>)
 8000886:	f005 fbe5 	bl	8006054 <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <main+0x90>)
 800088e:	6013      	str	r3, [r2, #0]

  /* creation of PantallaTask */
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8000890:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <main+0x94>)
 8000892:	2100      	movs	r1, #0
 8000894:	4810      	ldr	r0, [pc, #64]	; (80008d8 <main+0x98>)
 8000896:	f005 fbdd 	bl	8006054 <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <main+0x9c>)
 800089e:	6013      	str	r3, [r2, #0]

  /* creation of MemoriaTask */
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <main+0xa0>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <main+0xa4>)
 80008a6:	f005 fbd5 	bl	8006054 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <main+0xa8>)
 80008ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b0:	f005 fb9c 	bl	8005fec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0x74>
 80008b6:	bf00      	nop
 80008b8:	0800a12c 	.word	0x0800a12c
 80008bc:	200001cc 	.word	0x200001cc
 80008c0:	0800a114 	.word	0x0800a114
 80008c4:	200001c8 	.word	0x200001c8
 80008c8:	0800a0a8 	.word	0x0800a0a8
 80008cc:	08000c85 	.word	0x08000c85
 80008d0:	200001bc 	.word	0x200001bc
 80008d4:	0800a0cc 	.word	0x0800a0cc
 80008d8:	08000d71 	.word	0x08000d71
 80008dc:	200001c0 	.word	0x200001c0
 80008e0:	0800a0f0 	.word	0x0800a0f0
 80008e4:	08000ded 	.word	0x08000ded
 80008e8:	200001c4 	.word	0x200001c4

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f6:	2228      	movs	r2, #40	; 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f008 ff5a 	bl	80097b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000938:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800093c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fda2 	bl	800448c <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800094e:	f000 fa77 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f004 f80e 	bl	8004990 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800097a:	f000 fa61 	bl	8000e40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800097e:	2302      	movs	r3, #2
 8000980:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000986:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f004 f9be 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000996:	f000 fa53 	bl	8000e40 <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <MX_ADC1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009e2:	f002 f89d 	bl	8002b20 <HAL_ADC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009ec:	f000 fa28 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_ADC1_Init+0x74>)
 8000a02:	f002 fb51 	bl	80030a8 <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a0c:	f000 fa18 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000b0 	.word	0x200000b0
 8000a1c:	40012400 	.word	0x40012400

08000a20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <MX_ADC2_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a5e:	f002 f85f 	bl	8002b20 <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 f9ea 	bl	8000e40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a7e:	f002 fb13 	bl	80030a8 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f000 f9da 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000e0 	.word	0x200000e0
 8000a98:	40012800 	.word	0x40012800

08000a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aa2:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <MX_I2C1_Init+0x54>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_I2C1_Init+0x58>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ada:	f002 ff0d 	bl	80038f8 <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 f9ac 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000110 	.word	0x20000110
 8000af0:	40005400 	.word	0x40005400
 8000af4:	00061a80 	.word	0x00061a80

08000af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_SPI1_Init+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b2c:	2218      	movs	r2, #24
 8000b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b4a:	f004 fa4b 	bl	8004fe4 <HAL_SPI_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b54:	f000 f974 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000164 	.word	0x20000164
 8000b60:	40013000 	.word	0x40013000

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b90:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a2b      	ldr	r2, [pc, #172]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000be0:	f002 fe71 	bl	80038c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000bec:	f002 fe6b 	bl	80038c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_GPIO_Init+0x11c>)
 8000bf6:	f002 fe66 	bl	80038c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4819      	ldr	r0, [pc, #100]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000c14:	f002 fcbc 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000c2c:	f002 fcb0 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000c4a:	f002 fca1 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_GPIO_Init+0x11c>)
 8000c66:	f002 fc93 	bl	8003590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000c8c:	f007 f92a 	bl	8007ee4 <xTaskGetTickCount>
 8000c90:	4603      	mov	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]

  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  HAL_ADC_Start(&hadc1);
 8000c94:	4831      	ldr	r0, [pc, #196]	; (8000d5c <entryJoystick+0xd8>)
 8000c96:	f002 f81b 	bl	8002cd0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c9a:	210a      	movs	r1, #10
 8000c9c:	482f      	ldr	r0, [pc, #188]	; (8000d5c <entryJoystick+0xd8>)
 8000c9e:	f002 f8f1 	bl	8002e84 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000ca2:	482e      	ldr	r0, [pc, #184]	; (8000d5c <entryJoystick+0xd8>)
 8000ca4:	f002 f9f4 	bl	8003090 <HAL_ADC_GetValue>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	82fb      	strh	r3, [r7, #22]
	  HAL_ADC_Stop(&hadc1);
 8000cac:	482b      	ldr	r0, [pc, #172]	; (8000d5c <entryJoystick+0xd8>)
 8000cae:	f002 f8bd 	bl	8002e2c <HAL_ADC_Stop>

	  //Joystick eje Y: arriba o abajo.
	  HAL_ADC_Start(&hadc2);
 8000cb2:	482b      	ldr	r0, [pc, #172]	; (8000d60 <entryJoystick+0xdc>)
 8000cb4:	f002 f80c 	bl	8002cd0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000cb8:	210a      	movs	r1, #10
 8000cba:	4829      	ldr	r0, [pc, #164]	; (8000d60 <entryJoystick+0xdc>)
 8000cbc:	f002 f8e2 	bl	8002e84 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000cc0:	4827      	ldr	r0, [pc, #156]	; (8000d60 <entryJoystick+0xdc>)
 8000cc2:	f002 f9e5 	bl	8003090 <HAL_ADC_GetValue>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	82bb      	strh	r3, [r7, #20]
	  HAL_ADC_Stop(&hadc2);
 8000cca:	4825      	ldr	r0, [pc, #148]	; (8000d60 <entryJoystick+0xdc>)
 8000ccc:	f002 f8ae 	bl	8002e2c <HAL_ADC_Stop>

	  if(val_x > 2000){
 8000cd0:	8afb      	ldrh	r3, [r7, #22]
 8000cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cd6:	d902      	bls.n	8000cde <entryJoystick+0x5a>
		  joystick.x_value = derecha;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	733b      	strb	r3, [r7, #12]
 8000cdc:	e008      	b.n	8000cf0 <entryJoystick+0x6c>
	  }
	  else if(val_x < 1600){
 8000cde:	8afb      	ldrh	r3, [r7, #22]
 8000ce0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000ce4:	d202      	bcs.n	8000cec <entryJoystick+0x68>
		  joystick.x_value = izquierda;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	733b      	strb	r3, [r7, #12]
 8000cea:	e001      	b.n	8000cf0 <entryJoystick+0x6c>
	  }
	  else{
		  joystick.x_value = nulo;
 8000cec:	2304      	movs	r3, #4
 8000cee:	733b      	strb	r3, [r7, #12]
	  }


	  if(val_y > 2000){
 8000cf0:	8abb      	ldrh	r3, [r7, #20]
 8000cf2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cf6:	d902      	bls.n	8000cfe <entryJoystick+0x7a>
		  joystick.y_value = abajo;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	737b      	strb	r3, [r7, #13]
 8000cfc:	e008      	b.n	8000d10 <entryJoystick+0x8c>
	  }
	  else if(val_y < 1600){
 8000cfe:	8abb      	ldrh	r3, [r7, #20]
 8000d00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000d04:	d202      	bcs.n	8000d0c <entryJoystick+0x88>
		  joystick.y_value = arriba;
 8000d06:	2300      	movs	r3, #0
 8000d08:	737b      	strb	r3, [r7, #13]
 8000d0a:	e001      	b.n	8000d10 <entryJoystick+0x8c>
	  }
	  else{
		  joystick.y_value = nulo;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	737b      	strb	r3, [r7, #13]
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000d10:	2104      	movs	r1, #4
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <entryJoystick+0xe0>)
 8000d14:	f002 fdc0 	bl	8003898 <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <entryJoystick+0xa0>
		  joystick.boton = true;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73bb      	strb	r3, [r7, #14]
 8000d22:	e001      	b.n	8000d28 <entryJoystick+0xa4>
	  }
	  else{
		  joystick.boton = false;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <entryJoystick+0xe4>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	f107 010c 	add.w	r1, r7, #12
 8000d30:	2300      	movs	r3, #0
 8000d32:	2200      	movs	r2, #0
 8000d34:	f005 fc34 	bl	80065a0 <osMessageQueuePut>
 8000d38:	6138      	str	r0, [r7, #16]
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <entryJoystick+0xc8>
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <entryJoystick+0xe8>)
 8000d48:	f002 fdbd 	bl	80038c6 <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	2132      	movs	r1, #50	; 0x32
 8000d52:	4618      	mov	r0, r3
 8000d54:	f006 ff02 	bl	8007b5c <vTaskDelayUntil>
  {
 8000d58:	e79c      	b.n	8000c94 <entryJoystick+0x10>
 8000d5a:	bf00      	nop
 8000d5c:	200000b0 	.word	0x200000b0
 8000d60:	200000e0 	.word	0x200000e0
 8000d64:	40010800 	.word	0x40010800
 8000d68:	200001c8 	.word	0x200001c8
 8000d6c:	40011000 	.word	0x40011000

08000d70 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8000d78:	f000 feb4 	bl	8001ae4 <SSD1306_Init>
	SSD1306_Clear();
 8000d7c:	f001 fbe9 	bl	8002552 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8000d80:	f000 ff74 	bl	8001c6c <SSD1306_UpdateScreen>

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000d84:	f000 faca 	bl	800131c <menuInit>


	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 1;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <entryPantalla+0x70>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 1;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <entryPantalla+0x70>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	705a      	strb	r2, [r3, #1]

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <entryPantalla+0x74>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	f107 0108 	add.w	r1, r7, #8
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	2200      	movs	r2, #0
 8000da2:	f005 fc71 	bl	8006688 <osMessageQueueGet>
 8000da6:	60f8      	str	r0, [r7, #12]

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <entryPantalla+0x4c>
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <entryPantalla+0x78>)
 8000db6:	f002 fd86 	bl	80038c6 <HAL_GPIO_WritePin>
 8000dba:	e00b      	b.n	8000dd4 <entryPantalla+0x64>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <entryPantalla+0x78>)
 8000dc4:	f002 fd7f 	bl	80038c6 <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000dc8:	7a3b      	ldrb	r3, [r7, #8]
 8000dca:	7a79      	ldrb	r1, [r7, #9]
 8000dcc:	7aba      	ldrb	r2, [r7, #10]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fac2 	bl	8001358 <menuActualizar>

	}


    SSD1306_UpdateScreen(); // update screen
 8000dd4:	f000 ff4a 	bl	8001c6c <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 ff75 	bl	8001cc8 <SSD1306_Fill>
  {
 8000dde:	e7d9      	b.n	8000d94 <entryPantalla+0x24>
 8000de0:	200000ac 	.word	0x200000ac
 8000de4:	200001c8 	.word	0x200001c8
 8000de8:	40011000 	.word	0x40011000

08000dec <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryMemoria */


	osMutexAcquire(mutexPuntajesHandle, osWaitForever);
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <entryMemoria+0x2c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f005 fa9b 	bl	8006338 <osMutexAcquire>

	//puntajesActualizar();
	memoriaInit();
 8000e02:	f000 f8ab 	bl	8000f5c <memoriaInit>
	//Ordenamiento_Puntajes();

	osMutexRelease(mutexPuntajesHandle);
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <entryMemoria+0x2c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 faf2 	bl	80063f4 <osMutexRelease>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f005 f9c9 	bl	80061a8 <osDelay>
 8000e16:	e7fb      	b.n	8000e10 <entryMemoria+0x24>
 8000e18:	200001cc 	.word	0x200001cc

08000e1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e2e:	f001 fe37 	bl	8002aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40000800 	.word	0x40000800

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <getPuntajes>:

#include "memoria.h"

puntajes_t Puntajes[5];

puntajes_t *getPuntajes(uint8_t indice){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <getPuntajes+0x1c>)
 8000e5c:	4413      	add	r3, r2
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	200001d0 	.word	0x200001d0

08000e6c <Write_Memoria>:

void Write_Memoria(uint16_t address, uint8_t value){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	80fb      	strh	r3, [r7, #6]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	717b      	strb	r3, [r7, #5]

	uint8_t data[3];
	data[0] = WRITE;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	733b      	strb	r3, [r7, #12]
	data[1] = address>>8;
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	737b      	strb	r3, [r7, #13]
	data[2] = address;
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	73bb      	strb	r3, [r7, #14]
	//data[4] = value;

	uint8_t wren = WREN;
 8000e90:	2306      	movs	r3, #6
 8000e92:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000e94:	2200      	movs	r2, #0
 8000e96:	2120      	movs	r1, #32
 8000e98:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <Write_Memoria+0x88>)
 8000e9a:	f002 fd14 	bl	80038c6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &wren, 1, 100);  // write data to register
 8000e9e:	f107 010b 	add.w	r1, r7, #11
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <Write_Memoria+0x8c>)
 8000ea8:	f004 f920 	bl	80050ec <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000eac:	2201      	movs	r2, #1
 8000eae:	2120      	movs	r1, #32
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <Write_Memoria+0x88>)
 8000eb2:	f002 fd08 	bl	80038c6 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f001 fe0e 	bl	8002ad8 <HAL_Delay>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2120      	movs	r1, #32
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <Write_Memoria+0x88>)
 8000ec2:	f002 fd00 	bl	80038c6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // write data to register
 8000ec6:	f107 010c 	add.w	r1, r7, #12
 8000eca:	2364      	movs	r3, #100	; 0x64
 8000ecc:	2203      	movs	r2, #3
 8000ece:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <Write_Memoria+0x8c>)
 8000ed0:	f004 f90c 	bl	80050ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit (&hspi1, &value, 1, 100);  // write data to register
 8000ed4:	1d79      	adds	r1, r7, #5
 8000ed6:	2364      	movs	r3, #100	; 0x64
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <Write_Memoria+0x8c>)
 8000edc:	f004 f906 	bl	80050ec <HAL_SPI_Transmit>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <Write_Memoria+0x88>)
 8000ee6:	f002 fcee 	bl	80038c6 <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	20000164 	.word	0x20000164

08000efc <Read_memoria>:


uint8_t Read_memoria(uint16_t address)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
	uint8_t data_rec;
	uint8_t data[3];
	data[0] = READ;
 8000f06:	2303      	movs	r3, #3
 8000f08:	733b      	strb	r3, [r7, #12]
	data[1] = address>>8;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	737b      	strb	r3, [r7, #13]
	data[2] = address;
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the pin low
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <Read_memoria+0x58>)
 8000f20:	f002 fcd1 	bl	80038c6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // send address
 8000f24:	f107 010c 	add.w	r1, r7, #12
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	480a      	ldr	r0, [pc, #40]	; (8000f58 <Read_memoria+0x5c>)
 8000f2e:	f004 f8dd 	bl	80050ec <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, &data_rec, 1, 100);  // receive 6 bytes data
 8000f32:	f107 010f 	add.w	r1, r7, #15
 8000f36:	2364      	movs	r3, #100	; 0x64
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <Read_memoria+0x5c>)
 8000f3c:	f004 fa19 	bl	8005372 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the pin high
 8000f40:	2201      	movs	r2, #1
 8000f42:	2120      	movs	r1, #32
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <Read_memoria+0x58>)
 8000f46:	f002 fcbe 	bl	80038c6 <HAL_GPIO_WritePin>

	return data_rec;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	20000164 	.word	0x20000164

08000f5c <memoriaInit>:



void memoriaInit(){
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0


		puntajesActualizar();
 8000f62:	f000 f983 	bl	800126c <puntajesActualizar>

		char buff_nombre[7];

		uint16_t address = MEMORIA_ADDRESS;
 8000f66:	2300      	movs	r3, #0
 8000f68:	81fb      	strh	r3, [r7, #14]
		uint8_t j = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	737b      	strb	r3, [r7, #13]
		uint8_t permiso = true;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	733b      	strb	r3, [r7, #12]
		uint8_t i=0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	72fb      	strb	r3, [r7, #11]
		uint8_t puntaje_lsb;
		uint8_t puntaje_msb;
		uint8_t byte_dumb;


		buff_nombre[0]  = Read_memoria(address);
 8000f76:	89fb      	ldrh	r3, [r7, #14]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ffbf 	bl	8000efc <Read_memoria>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	703b      	strb	r3, [r7, #0]
		HAL_Delay(3);
 8000f82:	2003      	movs	r0, #3
 8000f84:	f001 fda8 	bl	8002ad8 <HAL_Delay>

		strcpy(buff_nombre, "      ");
 8000f88:	4ab7      	ldr	r2, [pc, #732]	; (8001268 <memoriaInit+0x30c>)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f90:	6018      	str	r0, [r3, #0]
 8000f92:	3304      	adds	r3, #4
 8000f94:	8019      	strh	r1, [r3, #0]
 8000f96:	3302      	adds	r3, #2
 8000f98:	0c0a      	lsrs	r2, r1, #16
 8000f9a:	701a      	strb	r2, [r3, #0]

		do{

			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d00b      	beq.n	8000fba <memoriaInit+0x5e>
 8000fa2:	7afb      	ldrb	r3, [r7, #11]
 8000fa4:	2b0e      	cmp	r3, #14
 8000fa6:	d008      	beq.n	8000fba <memoriaInit+0x5e>
 8000fa8:	7afb      	ldrb	r3, [r7, #11]
 8000faa:	2b16      	cmp	r3, #22
 8000fac:	d005      	beq.n	8000fba <memoriaInit+0x5e>
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	2b1e      	cmp	r3, #30
 8000fb2:	d002      	beq.n	8000fba <memoriaInit+0x5e>
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
 8000fb6:	2b26      	cmp	r3, #38	; 0x26
 8000fb8:	d109      	bne.n	8000fce <memoriaInit+0x72>

				puntaje_msb = Read_memoria(address);
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff9d 	bl	8000efc <Read_memoria>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	72bb      	strb	r3, [r7, #10]
				HAL_Delay(3);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f001 fd86 	bl	8002ad8 <HAL_Delay>
 8000fcc:	e13c      	b.n	8001248 <memoriaInit+0x2ec>
			}
			else if((i==7) || (i==15) || (i==23) || (i==31) || (i==39)){
 8000fce:	7afb      	ldrb	r3, [r7, #11]
 8000fd0:	2b07      	cmp	r3, #7
 8000fd2:	d00c      	beq.n	8000fee <memoriaInit+0x92>
 8000fd4:	7afb      	ldrb	r3, [r7, #11]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d009      	beq.n	8000fee <memoriaInit+0x92>
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	2b17      	cmp	r3, #23
 8000fde:	d006      	beq.n	8000fee <memoriaInit+0x92>
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	2b1f      	cmp	r3, #31
 8000fe4:	d003      	beq.n	8000fee <memoriaInit+0x92>
 8000fe6:	7afb      	ldrb	r3, [r7, #11]
 8000fe8:	2b27      	cmp	r3, #39	; 0x27
 8000fea:	f040 80a0 	bne.w	800112e <memoriaInit+0x1d2>

				puntaje_lsb = Read_memoria(address);
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff83 	bl	8000efc <Read_memoria>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	723b      	strb	r3, [r7, #8]
				HAL_Delay(3);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f001 fd6c 	bl	8002ad8 <HAL_Delay>

				switch(i){
 8001000:	7afb      	ldrb	r3, [r7, #11]
 8001002:	3b07      	subs	r3, #7
 8001004:	2b20      	cmp	r3, #32
 8001006:	f200 808b 	bhi.w	8001120 <memoriaInit+0x1c4>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <memoriaInit+0xb4>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001095 	.word	0x08001095
 8001014:	08001121 	.word	0x08001121
 8001018:	08001121 	.word	0x08001121
 800101c:	08001121 	.word	0x08001121
 8001020:	08001121 	.word	0x08001121
 8001024:	08001121 	.word	0x08001121
 8001028:	08001121 	.word	0x08001121
 800102c:	08001121 	.word	0x08001121
 8001030:	080010b1 	.word	0x080010b1
 8001034:	08001121 	.word	0x08001121
 8001038:	08001121 	.word	0x08001121
 800103c:	08001121 	.word	0x08001121
 8001040:	08001121 	.word	0x08001121
 8001044:	08001121 	.word	0x08001121
 8001048:	08001121 	.word	0x08001121
 800104c:	08001121 	.word	0x08001121
 8001050:	080010cd 	.word	0x080010cd
 8001054:	08001121 	.word	0x08001121
 8001058:	08001121 	.word	0x08001121
 800105c:	08001121 	.word	0x08001121
 8001060:	08001121 	.word	0x08001121
 8001064:	08001121 	.word	0x08001121
 8001068:	08001121 	.word	0x08001121
 800106c:	08001121 	.word	0x08001121
 8001070:	080010e9 	.word	0x080010e9
 8001074:	08001121 	.word	0x08001121
 8001078:	08001121 	.word	0x08001121
 800107c:	08001121 	.word	0x08001121
 8001080:	08001121 	.word	0x08001121
 8001084:	08001121 	.word	0x08001121
 8001088:	08001121 	.word	0x08001121
 800108c:	08001121 	.word	0x08001121
 8001090:	08001105 	.word	0x08001105

				case 7:
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001094:	7abb      	ldrb	r3, [r7, #10]
 8001096:	b29b      	uxth	r3, r3
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b29d      	uxth	r5, r3
 800109c:	7a3b      	ldrb	r3, [r7, #8]
 800109e:	b29c      	uxth	r4, r3
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fed3 	bl	8000e4c <getPuntajes>
 80010a6:	4603      	mov	r3, r0
 80010a8:	192a      	adds	r2, r5, r4
 80010aa:	b292      	uxth	r2, r2
 80010ac:	80da      	strh	r2, [r3, #6]
					break;
 80010ae:	e037      	b.n	8001120 <memoriaInit+0x1c4>
				case 15:
					getPuntajes(1)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b29d      	uxth	r5, r3
 80010b8:	7a3b      	ldrb	r3, [r7, #8]
 80010ba:	b29c      	uxth	r4, r3
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff fec5 	bl	8000e4c <getPuntajes>
 80010c2:	4603      	mov	r3, r0
 80010c4:	192a      	adds	r2, r5, r4
 80010c6:	b292      	uxth	r2, r2
 80010c8:	80da      	strh	r2, [r3, #6]
					break;
 80010ca:	e029      	b.n	8001120 <memoriaInit+0x1c4>
				case 23:
					getPuntajes(2)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010cc:	7abb      	ldrb	r3, [r7, #10]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b29d      	uxth	r5, r3
 80010d4:	7a3b      	ldrb	r3, [r7, #8]
 80010d6:	b29c      	uxth	r4, r3
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff feb7 	bl	8000e4c <getPuntajes>
 80010de:	4603      	mov	r3, r0
 80010e0:	192a      	adds	r2, r5, r4
 80010e2:	b292      	uxth	r2, r2
 80010e4:	80da      	strh	r2, [r3, #6]
					break;
 80010e6:	e01b      	b.n	8001120 <memoriaInit+0x1c4>
				case 31:
					getPuntajes(3)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010e8:	7abb      	ldrb	r3, [r7, #10]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b29d      	uxth	r5, r3
 80010f0:	7a3b      	ldrb	r3, [r7, #8]
 80010f2:	b29c      	uxth	r4, r3
 80010f4:	2003      	movs	r0, #3
 80010f6:	f7ff fea9 	bl	8000e4c <getPuntajes>
 80010fa:	4603      	mov	r3, r0
 80010fc:	192a      	adds	r2, r5, r4
 80010fe:	b292      	uxth	r2, r2
 8001100:	80da      	strh	r2, [r3, #6]
					break;
 8001102:	e00d      	b.n	8001120 <memoriaInit+0x1c4>
				case 39:
					getPuntajes(4)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001104:	7abb      	ldrb	r3, [r7, #10]
 8001106:	b29b      	uxth	r3, r3
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b29d      	uxth	r5, r3
 800110c:	7a3b      	ldrb	r3, [r7, #8]
 800110e:	b29c      	uxth	r4, r3
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff fe9b 	bl	8000e4c <getPuntajes>
 8001116:	4603      	mov	r3, r0
 8001118:	192a      	adds	r2, r5, r4
 800111a:	b292      	uxth	r2, r2
 800111c:	80da      	strh	r2, [r3, #6]
					break;
 800111e:	bf00      	nop

				}

				puntaje_msb = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	72bb      	strb	r3, [r7, #10]
				puntaje_lsb = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	723b      	strb	r3, [r7, #8]
				permiso = true;
 8001128:	2301      	movs	r3, #1
 800112a:	733b      	strb	r3, [r7, #12]
 800112c:	e08c      	b.n	8001248 <memoriaInit+0x2ec>

			}
			else{

				if( (buff_nombre[j] != '\0') && permiso==true){
 800112e:	7b7b      	ldrb	r3, [r7, #13]
 8001130:	3310      	adds	r3, #16
 8001132:	443b      	add	r3, r7
 8001134:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d07c      	beq.n	8001236 <memoriaInit+0x2da>
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d179      	bne.n	8001236 <memoriaInit+0x2da>
					buff_nombre[j]  = Read_memoria(address);
 8001142:	7b7c      	ldrb	r4, [r7, #13]
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fed8 	bl	8000efc <Read_memoria>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	f104 0310 	add.w	r3, r4, #16
 8001154:	443b      	add	r3, r7
 8001156:	f803 2c10 	strb.w	r2, [r3, #-16]
					HAL_Delay(3);
 800115a:	2003      	movs	r0, #3
 800115c:	f001 fcbc 	bl	8002ad8 <HAL_Delay>

					if(buff_nombre[j] == '\0'){
 8001160:	7b7b      	ldrb	r3, [r7, #13]
 8001162:	3310      	adds	r3, #16
 8001164:	443b      	add	r3, r7
 8001166:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d15f      	bne.n	800122e <memoriaInit+0x2d2>

						if((i>=0 && i<6)){
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	2b05      	cmp	r3, #5
 8001172:	d80a      	bhi.n	800118a <memoriaInit+0x22e>
							strcpy(getPuntajes(0)->nombre, buff_nombre);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff fe69 	bl	8000e4c <getPuntajes>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f008 fb42 	bl	800980c <strcpy>
 8001188:	e042      	b.n	8001210 <memoriaInit+0x2b4>
						}
						else if((i>=8 && i<14)){
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	2b07      	cmp	r3, #7
 800118e:	d90d      	bls.n	80011ac <memoriaInit+0x250>
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	2b0d      	cmp	r3, #13
 8001194:	d80a      	bhi.n	80011ac <memoriaInit+0x250>
							strcpy(getPuntajes(1)->nombre, buff_nombre);
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff fe58 	bl	8000e4c <getPuntajes>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4610      	mov	r0, r2
 80011a6:	f008 fb31 	bl	800980c <strcpy>
 80011aa:	e031      	b.n	8001210 <memoriaInit+0x2b4>
						}
						else if((i>=16 && i<22)){
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	d90d      	bls.n	80011ce <memoriaInit+0x272>
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	2b15      	cmp	r3, #21
 80011b6:	d80a      	bhi.n	80011ce <memoriaInit+0x272>
							strcpy(getPuntajes(2)->nombre, buff_nombre);
 80011b8:	2002      	movs	r0, #2
 80011ba:	f7ff fe47 	bl	8000e4c <getPuntajes>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	463b      	mov	r3, r7
 80011c4:	4619      	mov	r1, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f008 fb20 	bl	800980c <strcpy>
 80011cc:	e020      	b.n	8001210 <memoriaInit+0x2b4>
						}
						else if((i>=24 && i<30)){
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	2b17      	cmp	r3, #23
 80011d2:	d90d      	bls.n	80011f0 <memoriaInit+0x294>
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	2b1d      	cmp	r3, #29
 80011d8:	d80a      	bhi.n	80011f0 <memoriaInit+0x294>
							strcpy(getPuntajes(3)->nombre, buff_nombre);
 80011da:	2003      	movs	r0, #3
 80011dc:	f7ff fe36 	bl	8000e4c <getPuntajes>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4610      	mov	r0, r2
 80011ea:	f008 fb0f 	bl	800980c <strcpy>
 80011ee:	e00f      	b.n	8001210 <memoriaInit+0x2b4>
						}
						else if((i>=32 && i<38)){
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	2b1f      	cmp	r3, #31
 80011f4:	d90c      	bls.n	8001210 <memoriaInit+0x2b4>
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	2b25      	cmp	r3, #37	; 0x25
 80011fa:	d809      	bhi.n	8001210 <memoriaInit+0x2b4>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 80011fc:	2004      	movs	r0, #4
 80011fe:	f7ff fe25 	bl	8000e4c <getPuntajes>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	463b      	mov	r3, r7
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f008 fafe 	bl	800980c <strcpy>
						}

						j = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	737b      	strb	r3, [r7, #13]
						strcpy(buff_nombre, "      ");
 8001214:	4a14      	ldr	r2, [pc, #80]	; (8001268 <memoriaInit+0x30c>)
 8001216:	463b      	mov	r3, r7
 8001218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121c:	6018      	str	r0, [r3, #0]
 800121e:	3304      	adds	r3, #4
 8001220:	8019      	strh	r1, [r3, #0]
 8001222:	3302      	adds	r3, #2
 8001224:	0c0a      	lsrs	r2, r1, #16
 8001226:	701a      	strb	r2, [r3, #0]
						permiso = false;
 8001228:	2300      	movs	r3, #0
 800122a:	733b      	strb	r3, [r7, #12]
					if(buff_nombre[j] == '\0'){
 800122c:	e00c      	b.n	8001248 <memoriaInit+0x2ec>
					}
					else{
						j++;
 800122e:	7b7b      	ldrb	r3, [r7, #13]
 8001230:	3301      	adds	r3, #1
 8001232:	737b      	strb	r3, [r7, #13]
					if(buff_nombre[j] == '\0'){
 8001234:	e008      	b.n	8001248 <memoriaInit+0x2ec>
					}
				}

				else{
					byte_dumb = Read_memoria(address);
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fe5f 	bl	8000efc <Read_memoria>
 800123e:	4603      	mov	r3, r0
 8001240:	727b      	strb	r3, [r7, #9]
					HAL_Delay(3);
 8001242:	2003      	movs	r0, #3
 8001244:	f001 fc48 	bl	8002ad8 <HAL_Delay>
				}

			}
			i++;
 8001248:	7afb      	ldrb	r3, [r7, #11]
 800124a:	3301      	adds	r3, #1
 800124c:	72fb      	strb	r3, [r7, #11]
			address++;
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	3301      	adds	r3, #1
 8001252:	81fb      	strh	r3, [r7, #14]
			//HAL_Delay(3);

		}while(i != 40);
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	2b28      	cmp	r3, #40	; 0x28
 8001258:	f47f aea0 	bne.w	8000f9c <memoriaInit+0x40>



}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bdb0      	pop	{r4, r5, r7, pc}
 8001266:	bf00      	nop
 8001268:	0800989c 	.word	0x0800989c

0800126c <puntajesActualizar>:


void puntajesActualizar(){		//Actualizar los puntajes y guardarlos en memoria
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0


	uint16_t address = MEMORIA_ADDRESS+24;
 8001272:	2318      	movs	r3, #24
 8001274:	81fb      	strh	r3, [r7, #14]

	char buffer[6];


	strcpy(buffer, "boris");
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <puntajesActualizar+0x98>)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800127e:	6018      	str	r0, [r3, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	8019      	strh	r1, [r3, #0]


	uint16_t puntaje1 = 121;
 8001284:	2379      	movs	r3, #121	; 0x79
 8001286:	817b      	strh	r3, [r7, #10]

	uint8_t i=0;
 8001288:	2300      	movs	r3, #0
 800128a:	737b      	strb	r3, [r7, #13]

	Write_Memoria(address, buffer[i]);
 800128c:	7b7b      	ldrb	r3, [r7, #13]
 800128e:	3310      	adds	r3, #16
 8001290:	443b      	add	r3, r7
 8001292:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fde6 	bl	8000e6c <Write_Memoria>

	do{

		if(i== 6){
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d108      	bne.n	80012b8 <puntajesActualizar+0x4c>
			Write_Memoria(address, puntaje1>>8);
 80012a6:	897b      	ldrh	r3, [r7, #10]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fdda 	bl	8000e6c <Write_Memoria>
		}
		if(i==7){
 80012b8:	7b7b      	ldrb	r3, [r7, #13]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	d107      	bne.n	80012ce <puntajesActualizar+0x62>
			Write_Memoria(address, puntaje1);
 80012be:	897b      	ldrh	r3, [r7, #10]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fdd0 	bl	8000e6c <Write_Memoria>
 80012cc:	e009      	b.n	80012e2 <puntajesActualizar+0x76>
		}
		else{
			Write_Memoria(address, buffer[i]);
 80012ce:	7b7b      	ldrb	r3, [r7, #13]
 80012d0:	3310      	adds	r3, #16
 80012d2:	443b      	add	r3, r7
 80012d4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fdc5 	bl	8000e6c <Write_Memoria>
		}

		i++;
 80012e2:	7b7b      	ldrb	r3, [r7, #13]
 80012e4:	3301      	adds	r3, #1
 80012e6:	737b      	strb	r3, [r7, #13]
		address++;
 80012e8:	89fb      	ldrh	r3, [r7, #14]
 80012ea:	3301      	adds	r3, #1
 80012ec:	81fb      	strh	r3, [r7, #14]
		HAL_Delay(10);
 80012ee:	200a      	movs	r0, #10
 80012f0:	f001 fbf2 	bl	8002ad8 <HAL_Delay>

	}while(i != 9);
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	2b09      	cmp	r3, #9
 80012f8:	d1d2      	bne.n	80012a0 <puntajesActualizar+0x34>

}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	080098a4 	.word	0x080098a4

08001308 <getMenu>:
#include "menu.h"

menu_t menu;


menu_t *getMenu(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

	return &menu;
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <getMenu+0x10>)
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200001f8 	.word	0x200001f8

0800131c <menuInit>:


void menuInit(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8001320:	f7fe ff50 	bl	80001c4 <playerInit>
	InvaderInit();
 8001324:	f7fe ff96 	bl	8000254 <InvaderInit>
	disparoInit();
 8001328:	f7ff f946 	bl	80005b8 <disparoInit>

	//Se inicializa el cursor de la pantalla principal.
	getMenu()->menuActual = guardar_nombre;
 800132c:	f7ff ffec 	bl	8001308 <getMenu>
 8001330:	4603      	mov	r3, r0
 8001332:	2203      	movs	r2, #3
 8001334:	701a      	strb	r2, [r3, #0]
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001336:	f7ff ffe7 	bl	8001308 <getMenu>
 800133a:	4603      	mov	r3, r0
 800133c:	2226      	movs	r2, #38	; 0x26
 800133e:	705a      	strb	r2, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 8001340:	f7ff ffe2 	bl	8001308 <getMenu>
 8001344:	4603      	mov	r3, r0
 8001346:	221c      	movs	r2, #28
 8001348:	711a      	strb	r2, [r3, #4]
	getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 800134a:	f7ff ffdd 	bl	8001308 <getMenu>
 800134e:	4603      	mov	r3, r0
 8001350:	2239      	movs	r2, #57	; 0x39
 8001352:	715a      	strb	r2, [r3, #5]


}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <menuActualizar>:

void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b093      	sub	sp, #76	; 0x4c
 800135c:	af02      	add	r7, sp, #8
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	460b      	mov	r3, r1
 8001364:	71bb      	strb	r3, [r7, #6]
 8001366:	4613      	mov	r3, r2
 8001368:	717b      	strb	r3, [r7, #5]


	switch(getMenu()->menuActual){
 800136a:	f7ff ffcd 	bl	8001308 <getMenu>
 800136e:	4603      	mov	r3, r0
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b04      	cmp	r3, #4
 8001374:	f200 8345 	bhi.w	8001a02 <menuActualizar+0x6aa>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <menuActualizar+0x28>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	08001395 	.word	0x08001395
 8001384:	08001449 	.word	0x08001449
 8001388:	08001497 	.word	0x08001497
 800138c:	08001577 	.word	0x08001577
 8001390:	080019ef 	.word	0x080019ef

//--------------------------------------------------------------MENU PRINCIPAL-----------------------------------------------------------------------------
	case menu_principal:

		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 8001394:	2301      	movs	r3, #1
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2320      	movs	r3, #32
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2340      	movs	r3, #64	; 0x40
 800139e:	4aa9      	ldr	r2, [pc, #676]	; (8001644 <menuActualizar+0x2ec>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	2023      	movs	r0, #35	; 0x23
 80013a4:	f000 fb36 	bl	8001a14 <SSD1306_DrawBitmap>

		SSD1306_GotoXY(45, 35);
 80013a8:	2123      	movs	r1, #35	; 0x23
 80013aa:	202d      	movs	r0, #45	; 0x2d
 80013ac:	f000 fd02 	bl	8001db4 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	49a5      	ldr	r1, [pc, #660]	; (8001648 <menuActualizar+0x2f0>)
 80013b4:	48a5      	ldr	r0, [pc, #660]	; (800164c <menuActualizar+0x2f4>)
 80013b6:	f000 fd93 	bl	8001ee0 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 80013ba:	212d      	movs	r1, #45	; 0x2d
 80013bc:	202d      	movs	r0, #45	; 0x2d
 80013be:	f000 fcf9 	bl	8001db4 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	49a0      	ldr	r1, [pc, #640]	; (8001648 <menuActualizar+0x2f0>)
 80013c6:	48a2      	ldr	r0, [pc, #648]	; (8001650 <menuActualizar+0x2f8>)
 80013c8:	f000 fd8a 	bl	8001ee0 <SSD1306_Puts>


		if(y == arriba){
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d105      	bne.n	80013de <menuActualizar+0x86>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80013d2:	f7ff ff99 	bl	8001308 <getMenu>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2226      	movs	r2, #38	; 0x26
 80013da:	705a      	strb	r2, [r3, #1]
 80013dc:	e007      	b.n	80013ee <menuActualizar+0x96>
		}
		else if(y == abajo){
 80013de:	79bb      	ldrb	r3, [r7, #6]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d104      	bne.n	80013ee <menuActualizar+0x96>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 80013e4:	f7ff ff90 	bl	8001308 <getMenu>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2230      	movs	r2, #48	; 0x30
 80013ec:	705a      	strb	r2, [r3, #1]
		}

		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 80013ee:	f7ff ff8b 	bl	8001308 <getMenu>
 80013f2:	4603      	mov	r3, r0
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	b219      	sxth	r1, r3
 80013f8:	2301      	movs	r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	2027      	movs	r0, #39	; 0x27
 80013fe:	f000 fef9 	bl	80021f4 <SSD1306_DrawCircle>


		switch(boton){
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d019      	beq.n	800143c <menuActualizar+0xe4>
 8001408:	2b01      	cmp	r3, #1
 800140a:	d119      	bne.n	8001440 <menuActualizar+0xe8>
		case true:
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 800140c:	f7ff ff7c 	bl	8001308 <getMenu>
 8001410:	4603      	mov	r3, r0
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	2b26      	cmp	r3, #38	; 0x26
 8001416:	d105      	bne.n	8001424 <menuActualizar+0xcc>
				getMenu()->menuActual = juego;
 8001418:	f7ff ff76 	bl	8001308 <getMenu>
 800141c:	4603      	mov	r3, r0
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
			}
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
				getMenu()->menuActual = puntajes;
			}
			break;
 8001422:	e00f      	b.n	8001444 <menuActualizar+0xec>
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8001424:	f7ff ff70 	bl	8001308 <getMenu>
 8001428:	4603      	mov	r3, r0
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	2b30      	cmp	r3, #48	; 0x30
 800142e:	d109      	bne.n	8001444 <menuActualizar+0xec>
				getMenu()->menuActual = puntajes;
 8001430:	f7ff ff6a 	bl	8001308 <getMenu>
 8001434:	4603      	mov	r3, r0
 8001436:	2202      	movs	r2, #2
 8001438:	701a      	strb	r2, [r3, #0]
			break;
 800143a:	e003      	b.n	8001444 <menuActualizar+0xec>
		case false:
			break;
 800143c:	bf00      	nop
 800143e:	e2e1      	b.n	8001a04 <menuActualizar+0x6ac>
		default:
			break;
 8001440:	bf00      	nop
 8001442:	e2df      	b.n	8001a04 <menuActualizar+0x6ac>
			break;
 8001444:	bf00      	nop
		}

		break;
 8001446:	e2dd      	b.n	8001a04 <menuActualizar+0x6ac>
//--------------------------------------------------------------  JUEGO -----------------------------------------------------------------------------

	case juego:

		//Se grafican el player, aliens y disparo.
		plotPlayer(x, getPlayer());
 8001448:	f7fe fe82 	bl	8000150 <getPlayer>
 800144c:	4602      	mov	r2, r0
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe fec2 	bl	80001dc <plotPlayer>
		plotAliens();
 8001458:	f7fe ff4e 	bl	80002f8 <plotAliens>

		disparar();
 800145c:	f7ff f8be 	bl	80005dc <disparar>


		//Prender led si se apretó el boton
		if(boton == true){
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d110      	bne.n	8001488 <menuActualizar+0x130>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146c:	4879      	ldr	r0, [pc, #484]	; (8001654 <menuActualizar+0x2fc>)
 800146e:	f002 fa2a 	bl	80038c6 <HAL_GPIO_WritePin>
			//boton_apretado = 1;
			getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 8001472:	f7fe fe9d 	bl	80001b0 <getDisparo>
 8001476:	4603      	mov	r3, r0
 8001478:	78dc      	ldrb	r4, [r3, #3]
 800147a:	f7fe fe99 	bl	80001b0 <getDisparo>
 800147e:	4603      	mov	r3, r0
 8001480:	1c62      	adds	r2, r4, #1
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	70da      	strb	r2, [r3, #3]
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		}

		break;
 8001486:	e2bd      	b.n	8001a04 <menuActualizar+0x6ac>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800148e:	4871      	ldr	r0, [pc, #452]	; (8001654 <menuActualizar+0x2fc>)
 8001490:	f002 fa19 	bl	80038c6 <HAL_GPIO_WritePin>
		break;
 8001494:	e2b6      	b.n	8001a04 <menuActualizar+0x6ac>

//-------------------------------------------------------------- PUNTAJES-----------------------------------------------------------------------------
	case puntajes:

		//Titulo 'Puntajes'
		SSD1306_GotoXY(35, 0);
 8001496:	2100      	movs	r1, #0
 8001498:	2023      	movs	r0, #35	; 0x23
 800149a:	f000 fc8b 	bl	8001db4 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 800149e:	2201      	movs	r2, #1
 80014a0:	4969      	ldr	r1, [pc, #420]	; (8001648 <menuActualizar+0x2f0>)
 80014a2:	486b      	ldr	r0, [pc, #428]	; (8001650 <menuActualizar+0x2f8>)
 80014a4:	f000 fd1c 	bl	8001ee0 <SSD1306_Puts>

		//char buff_retorno[5][6];

		//Nombres

		for(uint8_t j=0; j<5;j++){
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80014ae:	e020      	b.n	80014f2 <menuActualizar+0x19a>

			posicion = j*10 + 13;
 80014b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014b4:	461a      	mov	r2, r3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	330d      	adds	r3, #13
 80014c0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

			SSD1306_GotoXY(15, posicion);
 80014c4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	200f      	movs	r0, #15
 80014ce:	f000 fc71 	bl	8001db4 <SSD1306_GotoXY>
			//strcpy(buff_retorno[j], "jdsa");
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 80014d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fcb8 	bl	8000e4c <getPuntajes>
 80014dc:	4603      	mov	r3, r0
 80014de:	2201      	movs	r2, #1
 80014e0:	4959      	ldr	r1, [pc, #356]	; (8001648 <menuActualizar+0x2f0>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fcfc 	bl	8001ee0 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 80014e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014ec:	3301      	adds	r3, #1
 80014ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80014f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d9da      	bls.n	80014b0 <menuActualizar+0x158>
		}


		//Puntuaciones
		for(uint8_t j=0; j<5;j++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001500:	e02a      	b.n	8001558 <menuActualizar+0x200>

			posicion = j*10 + 13;
 8001502:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001506:	461a      	mov	r2, r3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	b2db      	uxtb	r3, r3
 8001510:	330d      	adds	r3, #13
 8001512:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

			SSD1306_GotoXY(90, posicion);
 8001516:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800151a:	b29b      	uxth	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	205a      	movs	r0, #90	; 0x5a
 8001520:	f000 fc48 	bl	8001db4 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 8001524:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fc8f 	bl	8000e4c <getPuntajes>
 800152e:	4603      	mov	r3, r0
 8001530:	88db      	ldrh	r3, [r3, #6]
 8001532:	4618      	mov	r0, r3
 8001534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001538:	220a      	movs	r2, #10
 800153a:	4619      	mov	r1, r3
 800153c:	f008 f8f6 	bl	800972c <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 8001540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001544:	2201      	movs	r2, #1
 8001546:	4940      	ldr	r1, [pc, #256]	; (8001648 <menuActualizar+0x2f0>)
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fcc9 	bl	8001ee0 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 800154e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001552:	3301      	adds	r3, #1
 8001554:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001558:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800155c:	2b04      	cmp	r3, #4
 800155e:	d9d0      	bls.n	8001502 <menuActualizar+0x1aa>
		}


		switch(y){
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <menuActualizar+0x21a>
		case arriba:
				getMenu()->menuActual = menu_principal;
 8001566:	f7ff fecf 	bl	8001308 <getMenu>
 800156a:	4603      	mov	r3, r0
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
			break;
 8001570:	e000      	b.n	8001574 <menuActualizar+0x21c>
		default:
			break;
 8001572:	bf00      	nop
		}
		break;
 8001574:	e246      	b.n	8001a04 <menuActualizar+0x6ac>


//-------------------------------------------------------------- GUARDADO DEL NOMBRE-----------------------------------------------------------------------------
	case guardar_nombre:

		char buff_qwerty[] = "qwertyuiop";
 8001576:	4a38      	ldr	r2, [pc, #224]	; (8001658 <menuActualizar+0x300>)
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	ca07      	ldmia	r2, {r0, r1, r2}
 800157e:	c303      	stmia	r3!, {r0, r1}
 8001580:	801a      	strh	r2, [r3, #0]
 8001582:	3302      	adds	r3, #2
 8001584:	0c12      	lsrs	r2, r2, #16
 8001586:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 8001588:	4a34      	ldr	r2, [pc, #208]	; (800165c <menuActualizar+0x304>)
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001590:	c303      	stmia	r3!, {r0, r1}
 8001592:	801a      	strh	r2, [r3, #0]
 8001594:	3302      	adds	r3, #2
 8001596:	0c12      	lsrs	r2, r2, #16
 8001598:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 800159a:	4a31      	ldr	r2, [pc, #196]	; (8001660 <menuActualizar+0x308>)
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a4:	e883 0003 	stmia.w	r3, {r0, r1}
		char enter = '<';
 80015a8:	233c      	movs	r3, #60	; 0x3c
 80015aa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		char borrar = 'x';
 80015ae:	2378      	movs	r3, #120	; 0x78
 80015b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

		uint8_t posicion_x;

		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 80015b4:	2301      	movs	r3, #1
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	230f      	movs	r3, #15
 80015ba:	223c      	movs	r2, #60	; 0x3c
 80015bc:	2100      	movs	r1, #0
 80015be:	201e      	movs	r0, #30
 80015c0:	f000 fdae 	bl	8002120 <SSD1306_DrawRectangle>
		//SSD1306_GotoXY(43, 5);
		//SSD1306_Puts("capaz", &Font_7x10, 1);


			for(uint8_t i=0;i<10;i++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80015ca:	e032      	b.n	8001632 <menuActualizar+0x2da>

				posicion_x = i*(12) + 6;
 80015cc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015d0:	461a      	mov	r2, r3
 80015d2:	0052      	lsls	r2, r2, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3306      	adds	r3, #6
 80015dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

				SSD1306_GotoXY(posicion_x, 23);
 80015e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2117      	movs	r1, #23
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fbe3 	bl	8001db4 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 80015ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015f2:	3340      	adds	r3, #64	; 0x40
 80015f4:	443b      	add	r3, r7
 80015f6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80015fa:	2201      	movs	r2, #1
 80015fc:	4912      	ldr	r1, [pc, #72]	; (8001648 <menuActualizar+0x2f0>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fbee 	bl	8001de0 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 8001604:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001608:	b29b      	uxth	r3, r3
 800160a:	2126      	movs	r1, #38	; 0x26
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fbd1 	bl	8001db4 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 8001612:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001616:	3340      	adds	r3, #64	; 0x40
 8001618:	443b      	add	r3, r7
 800161a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800161e:	2201      	movs	r2, #1
 8001620:	4909      	ldr	r1, [pc, #36]	; (8001648 <menuActualizar+0x2f0>)
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fbdc 	bl	8001de0 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 8001628:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800162c:	3301      	adds	r3, #1
 800162e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001632:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001636:	2b09      	cmp	r3, #9
 8001638:	d9c8      	bls.n	80015cc <menuActualizar+0x274>

			}


			for(uint8_t i=0;i<7;i++){
 800163a:	2300      	movs	r3, #0
 800163c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001640:	e031      	b.n	80016a6 <menuActualizar+0x34e>
 8001642:	bf00      	nop
 8001644:	0800a13c 	.word	0x0800a13c
 8001648:	20000000 	.word	0x20000000
 800164c:	080098ac 	.word	0x080098ac
 8001650:	080098b4 	.word	0x080098b4
 8001654:	40010800 	.word	0x40010800
 8001658:	080098cc 	.word	0x080098cc
 800165c:	080098d8 	.word	0x080098d8
 8001660:	080098e4 	.word	0x080098e4

				posicion_x = i*(12) + 26;
 8001664:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001668:	461a      	mov	r2, r3
 800166a:	0052      	lsls	r2, r2, #1
 800166c:	4413      	add	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	331a      	adds	r3, #26
 8001674:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

				SSD1306_GotoXY(posicion_x, 53);
 8001678:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800167c:	b29b      	uxth	r3, r3
 800167e:	2135      	movs	r1, #53	; 0x35
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fb97 	bl	8001db4 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 8001686:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800168a:	3340      	adds	r3, #64	; 0x40
 800168c:	443b      	add	r3, r7
 800168e:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001692:	2201      	movs	r2, #1
 8001694:	49c3      	ldr	r1, [pc, #780]	; (80019a4 <menuActualizar+0x64c>)
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fba2 	bl	8001de0 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 800169c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80016a0:	3301      	adds	r3, #1
 80016a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80016a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d9da      	bls.n	8001664 <menuActualizar+0x30c>
			}

			//BOTON BORRAR
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 80016ae:	2301      	movs	r3, #1
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2310      	movs	r3, #16
 80016b4:	2210      	movs	r2, #16
 80016b6:	2132      	movs	r1, #50	; 0x32
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 fd31 	bl	8002120 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 80016be:	2135      	movs	r1, #53	; 0x35
 80016c0:	2008      	movs	r0, #8
 80016c2:	f000 fb77 	bl	8001db4 <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 80016c6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80016ca:	2201      	movs	r2, #1
 80016cc:	49b5      	ldr	r1, [pc, #724]	; (80019a4 <menuActualizar+0x64c>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fb86 	bl	8001de0 <SSD1306_Putc>

			//BOTON ENTER
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 80016d4:	2301      	movs	r3, #1
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2310      	movs	r3, #16
 80016da:	2210      	movs	r2, #16
 80016dc:	2132      	movs	r1, #50	; 0x32
 80016de:	206c      	movs	r0, #108	; 0x6c
 80016e0:	f000 fd1e 	bl	8002120 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 80016e4:	2135      	movs	r1, #53	; 0x35
 80016e6:	2071      	movs	r0, #113	; 0x71
 80016e8:	f000 fb64 	bl	8001db4 <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 80016ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80016f0:	2201      	movs	r2, #1
 80016f2:	49ac      	ldr	r1, [pc, #688]	; (80019a4 <menuActualizar+0x64c>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fb73 	bl	8001de0 <SSD1306_Putc>

			uint8_t mov;

			switch(y){
 80016fa:	79bb      	ldrb	r3, [r7, #6]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d00e      	beq.n	800171e <menuActualizar+0x3c6>
 8001700:	2b04      	cmp	r3, #4
 8001702:	dc10      	bgt.n	8001726 <menuActualizar+0x3ce>
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <menuActualizar+0x3b6>
 8001708:	2b01      	cmp	r3, #1
 800170a:	d004      	beq.n	8001716 <menuActualizar+0x3be>
 800170c:	e00b      	b.n	8001726 <menuActualizar+0x3ce>

			case arriba:
				mov = arriba;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				break;
 8001714:	e007      	b.n	8001726 <menuActualizar+0x3ce>
			case abajo:
				mov = abajo;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				break;
 800171c:	e003      	b.n	8001726 <menuActualizar+0x3ce>
			case nulo:
				mov = x;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				break;
 8001724:	bf00      	nop
			int8_t div;

			uint8_t posicion_debug;

			TickType_t Timenow;
			Timenow = xTaskGetTickCount();
 8001726:	f006 fbdd 	bl	8007ee4 <xTaskGetTickCount>
 800172a:	6378      	str	r0, [r7, #52]	; 0x34

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150)){
 800172c:	f7ff fdec 	bl	8001308 <getMenu>
 8001730:	4603      	mov	r3, r0
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b96      	cmp	r3, #150	; 0x96
 800173a:	f240 80a6 	bls.w	800188a <menuActualizar+0x532>

				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 800173e:	f7ff fde3 	bl	8001308 <getMenu>
 8001742:	4604      	mov	r4, r0
 8001744:	f006 fbce 	bl	8007ee4 <xTaskGetTickCount>
 8001748:	4603      	mov	r3, r0
 800174a:	60e3      	str	r3, [r4, #12]

			switch(mov){
 800174c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <menuActualizar+0x402>
 8001754:	2b01      	cmp	r3, #1
 8001756:	d048      	beq.n	80017ea <menuActualizar+0x492>
							break;
						}

					break;
				default:
					break;
 8001758:	e097      	b.n	800188a <menuActualizar+0x532>
					switch(getMenu()->GuardarNombre.posicion_y){
 800175a:	f7ff fdd5 	bl	8001308 <getMenu>
 800175e:	4603      	mov	r3, r0
 8001760:	795b      	ldrb	r3, [r3, #5]
 8001762:	2b2a      	cmp	r3, #42	; 0x2a
 8001764:	d002      	beq.n	800176c <menuActualizar+0x414>
 8001766:	2b39      	cmp	r3, #57	; 0x39
 8001768:	d006      	beq.n	8001778 <menuActualizar+0x420>
					break;
 800176a:	e08e      	b.n	800188a <menuActualizar+0x532>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 800176c:	f7ff fdcc 	bl	8001308 <getMenu>
 8001770:	4603      	mov	r3, r0
 8001772:	221b      	movs	r2, #27
 8001774:	715a      	strb	r2, [r3, #5]
							break;
 8001776:	e037      	b.n	80017e8 <menuActualizar+0x490>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001778:	f7ff fdc6 	bl	8001308 <getMenu>
 800177c:	4603      	mov	r3, r0
 800177e:	222a      	movs	r2, #42	; 0x2a
 8001780:	715a      	strb	r2, [r3, #5]
							if(getMenu()->GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 8001782:	f7ff fdc1 	bl	8001308 <getMenu>
 8001786:	4603      	mov	r3, r0
 8001788:	791b      	ldrb	r3, [r3, #4]
 800178a:	2b1b      	cmp	r3, #27
 800178c:	d92b      	bls.n	80017e6 <menuActualizar+0x48e>
								div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 800178e:	f7ff fdbb 	bl	8001308 <getMenu>
 8001792:	4603      	mov	r3, r0
 8001794:	791b      	ldrb	r3, [r3, #4]
 8001796:	3b1c      	subs	r3, #28
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800179e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da05      	bge.n	80017b2 <menuActualizar+0x45a>
 80017a6:	f7ff fdaf 	bl	8001308 <getMenu>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2209      	movs	r2, #9
 80017ae:	711a      	strb	r2, [r3, #4]
							break;
 80017b0:	e019      	b.n	80017e6 <menuActualizar+0x48e>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 80017b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80017b6:	4a7c      	ldr	r2, [pc, #496]	; (80019a8 <menuActualizar+0x650>)
 80017b8:	fb82 1203 	smull	r1, r2, r2, r3
 80017bc:	1052      	asrs	r2, r2, #1
 80017be:	17db      	asrs	r3, r3, #31
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
									 getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 80017c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80017ca:	3301      	adds	r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	0052      	lsls	r2, r2, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	b2dc      	uxtb	r4, r3
 80017d8:	f7ff fd96 	bl	8001308 <getMenu>
 80017dc:	4603      	mov	r3, r0
 80017de:	f104 0209 	add.w	r2, r4, #9
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	711a      	strb	r2, [r3, #4]
							break;
 80017e6:	bf00      	nop
					break;
 80017e8:	e04f      	b.n	800188a <menuActualizar+0x532>
					switch(getMenu()->GuardarNombre.posicion_y){
 80017ea:	f7ff fd8d 	bl	8001308 <getMenu>
 80017ee:	4603      	mov	r3, r0
 80017f0:	795b      	ldrb	r3, [r3, #5]
 80017f2:	2b1b      	cmp	r3, #27
 80017f4:	d002      	beq.n	80017fc <menuActualizar+0x4a4>
 80017f6:	2b2a      	cmp	r3, #42	; 0x2a
 80017f8:	d006      	beq.n	8001808 <menuActualizar+0x4b0>
							break;
 80017fa:	e045      	b.n	8001888 <menuActualizar+0x530>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 80017fc:	f7ff fd84 	bl	8001308 <getMenu>
 8001800:	4603      	mov	r3, r0
 8001802:	222a      	movs	r2, #42	; 0x2a
 8001804:	715a      	strb	r2, [r3, #5]
							break;
 8001806:	e03f      	b.n	8001888 <menuActualizar+0x530>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 8001808:	f7ff fd7e 	bl	8001308 <getMenu>
 800180c:	4603      	mov	r3, r0
 800180e:	2239      	movs	r2, #57	; 0x39
 8001810:	715a      	strb	r2, [r3, #5]
							div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 8001812:	f7ff fd79 	bl	8001308 <getMenu>
 8001816:	4603      	mov	r3, r0
 8001818:	791b      	ldrb	r3, [r3, #4]
 800181a:	3b09      	subs	r3, #9
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							div = div/GUARDADO_OFFSET_X_CURSOR;
 8001822:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001826:	4a60      	ldr	r2, [pc, #384]	; (80019a8 <menuActualizar+0x650>)
 8001828:	fb82 1203 	smull	r1, r2, r2, r3
 800182c:	1052      	asrs	r2, r2, #1
 800182e:	17db      	asrs	r3, r3, #31
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							if(div == 0){
 8001836:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <menuActualizar+0x4f2>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 800183e:	f7ff fd63 	bl	8001308 <getMenu>
 8001842:	4603      	mov	r3, r0
 8001844:	220b      	movs	r2, #11
 8001846:	711a      	strb	r2, [r3, #4]
							break;
 8001848:	e01d      	b.n	8001886 <menuActualizar+0x52e>
							else if(div == 8 || div == 9){
 800184a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800184e:	2b08      	cmp	r3, #8
 8001850:	d003      	beq.n	800185a <menuActualizar+0x502>
 8001852:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001856:	2b09      	cmp	r3, #9
 8001858:	d105      	bne.n	8001866 <menuActualizar+0x50e>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 800185a:	f7ff fd55 	bl	8001308 <getMenu>
 800185e:	4603      	mov	r3, r0
 8001860:	2274      	movs	r2, #116	; 0x74
 8001862:	711a      	strb	r2, [r3, #4]
							break;
 8001864:	e00f      	b.n	8001886 <menuActualizar+0x52e>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 8001866:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800186a:	3b01      	subs	r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	0052      	lsls	r2, r2, #1
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	b2dc      	uxtb	r4, r3
 8001878:	f7ff fd46 	bl	8001308 <getMenu>
 800187c:	4603      	mov	r3, r0
 800187e:	f104 021c 	add.w	r2, r4, #28
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	711a      	strb	r2, [r3, #4]
							break;
 8001886:	bf00      	nop
					break;
 8001888:	bf00      	nop
				}

			}

			//Este if es para generar un retraso al mover el cursor en el eje x como en el ya que sino se mueve demasiado rapido.
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100)){
 800188a:	f7ff fd3d 	bl	8001308 <getMenu>
 800188e:	4603      	mov	r3, r0
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	f240 8099 	bls.w	80019ce <menuActualizar+0x676>

			getMenu()->GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 800189c:	f7ff fd34 	bl	8001308 <getMenu>
 80018a0:	4604      	mov	r4, r0
 80018a2:	f006 fb1f 	bl	8007ee4 <xTaskGetTickCount>
 80018a6:	4603      	mov	r3, r0
 80018a8:	60a3      	str	r3, [r4, #8]

			switch(mov){
 80018aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d043      	beq.n	800193a <menuActualizar+0x5e2>
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	f040 8086 	bne.w	80019c4 <menuActualizar+0x66c>
				case izquierda:

					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 80018b8:	f7ff fd26 	bl	8001308 <getMenu>
 80018bc:	4603      	mov	r3, r0
 80018be:	791c      	ldrb	r4, [r3, #4]
 80018c0:	f7ff fd22 	bl	8001308 <getMenu>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f1a4 020c 	sub.w	r2, r4, #12
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	711a      	strb	r2, [r3, #4]

					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 80018ce:	f7ff fd1b 	bl	8001308 <getMenu>
 80018d2:	4603      	mov	r3, r0
 80018d4:	795b      	ldrb	r3, [r3, #5]
 80018d6:	2b39      	cmp	r3, #57	; 0x39
 80018d8:	d00b      	beq.n	80018f2 <menuActualizar+0x59a>

						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 80018da:	f7ff fd15 	bl	8001308 <getMenu>
 80018de:	4603      	mov	r3, r0
 80018e0:	791b      	ldrb	r3, [r3, #4]
 80018e2:	2bfd      	cmp	r3, #253	; 0xfd
 80018e4:	d170      	bne.n	80019c8 <menuActualizar+0x670>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 80018e6:	f7ff fd0f 	bl	8001308 <getMenu>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2275      	movs	r2, #117	; 0x75
 80018ee:	711a      	strb	r2, [r3, #4]

							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
						}
					}

					break;
 80018f0:	e06a      	b.n	80019c8 <menuActualizar+0x670>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR) ){
 80018f2:	f7ff fd09 	bl	8001308 <getMenu>
 80018f6:	4603      	mov	r3, r0
 80018f8:	791b      	ldrb	r3, [r3, #4]
 80018fa:	2b10      	cmp	r3, #16
 80018fc:	d105      	bne.n	800190a <menuActualizar+0x5b2>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 80018fe:	f7ff fd03 	bl	8001308 <getMenu>
 8001902:	4603      	mov	r3, r0
 8001904:	220b      	movs	r2, #11
 8001906:	711a      	strb	r2, [r3, #4]
					break;
 8001908:	e05e      	b.n	80019c8 <menuActualizar+0x670>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 800190a:	f7ff fcfd 	bl	8001308 <getMenu>
 800190e:	4603      	mov	r3, r0
 8001910:	791b      	ldrb	r3, [r3, #4]
 8001912:	2b68      	cmp	r3, #104	; 0x68
 8001914:	d105      	bne.n	8001922 <menuActualizar+0x5ca>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 8001916:	f7ff fcf7 	bl	8001308 <getMenu>
 800191a:	4603      	mov	r3, r0
 800191c:	2264      	movs	r2, #100	; 0x64
 800191e:	711a      	strb	r2, [r3, #4]
					break;
 8001920:	e052      	b.n	80019c8 <menuActualizar+0x670>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 8001922:	f7ff fcf1 	bl	8001308 <getMenu>
 8001926:	4603      	mov	r3, r0
 8001928:	791b      	ldrb	r3, [r3, #4]
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d14c      	bne.n	80019c8 <menuActualizar+0x670>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 800192e:	f7ff fceb 	bl	8001308 <getMenu>
 8001932:	4603      	mov	r3, r0
 8001934:	2274      	movs	r2, #116	; 0x74
 8001936:	711a      	strb	r2, [r3, #4]
					break;
 8001938:	e046      	b.n	80019c8 <menuActualizar+0x670>
				case derecha:

					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 800193a:	f7ff fce5 	bl	8001308 <getMenu>
 800193e:	4603      	mov	r3, r0
 8001940:	791c      	ldrb	r4, [r3, #4]
 8001942:	f7ff fce1 	bl	8001308 <getMenu>
 8001946:	4603      	mov	r3, r0
 8001948:	f104 020c 	add.w	r2, r4, #12
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	711a      	strb	r2, [r3, #4]

					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8001950:	f7ff fcda 	bl	8001308 <getMenu>
 8001954:	4603      	mov	r3, r0
 8001956:	795b      	ldrb	r3, [r3, #5]
 8001958:	2b39      	cmp	r3, #57	; 0x39
 800195a:	d00b      	beq.n	8001974 <menuActualizar+0x61c>

						if(getMenu()->GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 800195c:	f7ff fcd4 	bl	8001308 <getMenu>
 8001960:	4603      	mov	r3, r0
 8001962:	791b      	ldrb	r3, [r3, #4]
 8001964:	2b75      	cmp	r3, #117	; 0x75
 8001966:	d931      	bls.n	80019cc <menuActualizar+0x674>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001968:	f7ff fcce 	bl	8001308 <getMenu>
 800196c:	4603      	mov	r3, r0
 800196e:	2209      	movs	r2, #9
 8001970:	711a      	strb	r2, [r3, #4]
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
						}
					}

					break;
 8001972:	e02b      	b.n	80019cc <menuActualizar+0x674>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 8001974:	f7ff fcc8 	bl	8001308 <getMenu>
 8001978:	4603      	mov	r3, r0
 800197a:	791b      	ldrb	r3, [r3, #4]
 800197c:	2b70      	cmp	r3, #112	; 0x70
 800197e:	d105      	bne.n	800198c <menuActualizar+0x634>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001980:	f7ff fcc2 	bl	8001308 <getMenu>
 8001984:	4603      	mov	r3, r0
 8001986:	2274      	movs	r2, #116	; 0x74
 8001988:	711a      	strb	r2, [r3, #4]
					break;
 800198a:	e01f      	b.n	80019cc <menuActualizar+0x674>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 800198c:	f7ff fcbc 	bl	8001308 <getMenu>
 8001990:	4603      	mov	r3, r0
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	2b80      	cmp	r3, #128	; 0x80
 8001996:	d109      	bne.n	80019ac <menuActualizar+0x654>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001998:	f7ff fcb6 	bl	8001308 <getMenu>
 800199c:	4603      	mov	r3, r0
 800199e:	220b      	movs	r2, #11
 80019a0:	711a      	strb	r2, [r3, #4]
					break;
 80019a2:	e013      	b.n	80019cc <menuActualizar+0x674>
 80019a4:	20000000 	.word	0x20000000
 80019a8:	2aaaaaab 	.word	0x2aaaaaab
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 80019ac:	f7ff fcac 	bl	8001308 <getMenu>
 80019b0:	4603      	mov	r3, r0
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	2b17      	cmp	r3, #23
 80019b6:	d109      	bne.n	80019cc <menuActualizar+0x674>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 80019b8:	f7ff fca6 	bl	8001308 <getMenu>
 80019bc:	4603      	mov	r3, r0
 80019be:	221c      	movs	r2, #28
 80019c0:	711a      	strb	r2, [r3, #4]
					break;
 80019c2:	e003      	b.n	80019cc <menuActualizar+0x674>
				default:
					break;
 80019c4:	bf00      	nop
 80019c6:	e002      	b.n	80019ce <menuActualizar+0x676>
					break;
 80019c8:	bf00      	nop
 80019ca:	e000      	b.n	80019ce <menuActualizar+0x676>
					break;
 80019cc:	bf00      	nop

				}

			}
				//Se actualiza el cursor
				SSD1306_DrawFilledCircle(getMenu()->GuardarNombre.posicion_x,  getMenu()->GuardarNombre.posicion_y, 5, 1);
 80019ce:	f7ff fc9b 	bl	8001308 <getMenu>
 80019d2:	4603      	mov	r3, r0
 80019d4:	791b      	ldrb	r3, [r3, #4]
 80019d6:	b21c      	sxth	r4, r3
 80019d8:	f7ff fc96 	bl	8001308 <getMenu>
 80019dc:	4603      	mov	r3, r0
 80019de:	795b      	ldrb	r3, [r3, #5]
 80019e0:	b219      	sxth	r1, r3
 80019e2:	2301      	movs	r3, #1
 80019e4:	2205      	movs	r2, #5
 80019e6:	4620      	mov	r0, r4
 80019e8:	f000 fcd8 	bl	800239c <SSD1306_DrawFilledCircle>


		break;
 80019ec:	e00a      	b.n	8001a04 <menuActualizar+0x6ac>


//-------------------------------------------------------------- GAME OVER -----------------------------------------------------------------------------
	case game_over:

		SSD1306_GotoXY(35, 25);
 80019ee:	2119      	movs	r1, #25
 80019f0:	2023      	movs	r0, #35	; 0x23
 80019f2:	f000 f9df 	bl	8001db4 <SSD1306_GotoXY>
		SSD1306_Puts("GAME OVER", &Font_7x10, 1);
 80019f6:	2201      	movs	r2, #1
 80019f8:	4904      	ldr	r1, [pc, #16]	; (8001a0c <menuActualizar+0x6b4>)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <menuActualizar+0x6b8>)
 80019fc:	f000 fa70 	bl	8001ee0 <SSD1306_Puts>


		break;
 8001a00:	e000      	b.n	8001a04 <menuActualizar+0x6ac>
	default:
		break;
 8001a02:	bf00      	nop
	}

}
 8001a04:	bf00      	nop
 8001a06:	3744      	adds	r7, #68	; 0x44
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	080098c0 	.word	0x080098c0

08001a14 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60ba      	str	r2, [r7, #8]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	81fb      	strh	r3, [r7, #14]
 8001a22:	460b      	mov	r3, r1
 8001a24:	81bb      	strh	r3, [r7, #12]
 8001a26:	4613      	mov	r3, r2
 8001a28:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2e:	3307      	adds	r3, #7
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da00      	bge.n	8001a36 <SSD1306_DrawBitmap+0x22>
 8001a34:	3307      	adds	r3, #7
 8001a36:	10db      	asrs	r3, r3, #3
 8001a38:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	82bb      	strh	r3, [r7, #20]
 8001a42:	e044      	b.n	8001ace <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	827b      	strh	r3, [r7, #18]
 8001a48:	e02f      	b.n	8001aaa <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001a4a:	8a7b      	ldrh	r3, [r7, #18]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
 8001a5a:	e012      	b.n	8001a82 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001a5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a60:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a64:	fb03 f202 	mul.w	r2, r3, r2
 8001a68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	da00      	bge.n	8001a72 <SSD1306_DrawBitmap+0x5e>
 8001a70:	3307      	adds	r3, #7
 8001a72:	10db      	asrs	r3, r3, #3
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da09      	bge.n	8001a9e <SSD1306_DrawBitmap+0x8a>
 8001a8a:	89fa      	ldrh	r2, [r7, #14]
 8001a8c:	8a7b      	ldrh	r3, [r7, #18]
 8001a8e:	4413      	add	r3, r2
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	89b9      	ldrh	r1, [r7, #12]
 8001a94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f92d 	bl	8001cf8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001a9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	827b      	strh	r3, [r7, #18]
 8001aaa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbc9      	blt.n	8001a4a <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001ab6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	82bb      	strh	r3, [r7, #20]
 8001ac2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	81bb      	strh	r3, [r7, #12]
 8001ace:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ad2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbb4      	blt.n	8001a44 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001aea:	f000 fd3b 	bl	8002564 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001aee:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001af2:	2201      	movs	r2, #1
 8001af4:	2178      	movs	r1, #120	; 0x78
 8001af6:	485b      	ldr	r0, [pc, #364]	; (8001c64 <SSD1306_Init+0x180>)
 8001af8:	f002 f940 	bl	8003d7c <HAL_I2C_IsDeviceReady>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e0a9      	b.n	8001c5a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001b06:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001b0a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b0c:	e002      	b.n	8001b14 <SSD1306_Init+0x30>
		p--;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f9      	bne.n	8001b0e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001b1a:	22ae      	movs	r2, #174	; 0xae
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2078      	movs	r0, #120	; 0x78
 8001b20:	f000 fd9a 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001b24:	2220      	movs	r2, #32
 8001b26:	2100      	movs	r1, #0
 8001b28:	2078      	movs	r0, #120	; 0x78
 8001b2a:	f000 fd95 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001b2e:	2210      	movs	r2, #16
 8001b30:	2100      	movs	r1, #0
 8001b32:	2078      	movs	r0, #120	; 0x78
 8001b34:	f000 fd90 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b38:	22b0      	movs	r2, #176	; 0xb0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2078      	movs	r0, #120	; 0x78
 8001b3e:	f000 fd8b 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001b42:	22c8      	movs	r2, #200	; 0xc8
 8001b44:	2100      	movs	r1, #0
 8001b46:	2078      	movs	r0, #120	; 0x78
 8001b48:	f000 fd86 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2078      	movs	r0, #120	; 0x78
 8001b52:	f000 fd81 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001b56:	2210      	movs	r2, #16
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2078      	movs	r0, #120	; 0x78
 8001b5c:	f000 fd7c 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001b60:	2240      	movs	r2, #64	; 0x40
 8001b62:	2100      	movs	r1, #0
 8001b64:	2078      	movs	r0, #120	; 0x78
 8001b66:	f000 fd77 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001b6a:	2281      	movs	r2, #129	; 0x81
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2078      	movs	r0, #120	; 0x78
 8001b70:	f000 fd72 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001b74:	22ff      	movs	r2, #255	; 0xff
 8001b76:	2100      	movs	r1, #0
 8001b78:	2078      	movs	r0, #120	; 0x78
 8001b7a:	f000 fd6d 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001b7e:	22a1      	movs	r2, #161	; 0xa1
 8001b80:	2100      	movs	r1, #0
 8001b82:	2078      	movs	r0, #120	; 0x78
 8001b84:	f000 fd68 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001b88:	22a6      	movs	r2, #166	; 0xa6
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2078      	movs	r0, #120	; 0x78
 8001b8e:	f000 fd63 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001b92:	22a8      	movs	r2, #168	; 0xa8
 8001b94:	2100      	movs	r1, #0
 8001b96:	2078      	movs	r0, #120	; 0x78
 8001b98:	f000 fd5e 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001b9c:	223f      	movs	r2, #63	; 0x3f
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2078      	movs	r0, #120	; 0x78
 8001ba2:	f000 fd59 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ba6:	22a4      	movs	r2, #164	; 0xa4
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2078      	movs	r0, #120	; 0x78
 8001bac:	f000 fd54 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001bb0:	22d3      	movs	r2, #211	; 0xd3
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2078      	movs	r0, #120	; 0x78
 8001bb6:	f000 fd4f 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2078      	movs	r0, #120	; 0x78
 8001bc0:	f000 fd4a 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001bc4:	22d5      	movs	r2, #213	; 0xd5
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2078      	movs	r0, #120	; 0x78
 8001bca:	f000 fd45 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001bce:	22f0      	movs	r2, #240	; 0xf0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2078      	movs	r0, #120	; 0x78
 8001bd4:	f000 fd40 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001bd8:	22d9      	movs	r2, #217	; 0xd9
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2078      	movs	r0, #120	; 0x78
 8001bde:	f000 fd3b 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001be2:	2222      	movs	r2, #34	; 0x22
 8001be4:	2100      	movs	r1, #0
 8001be6:	2078      	movs	r0, #120	; 0x78
 8001be8:	f000 fd36 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001bec:	22da      	movs	r2, #218	; 0xda
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2078      	movs	r0, #120	; 0x78
 8001bf2:	f000 fd31 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001bf6:	2212      	movs	r2, #18
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2078      	movs	r0, #120	; 0x78
 8001bfc:	f000 fd2c 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001c00:	22db      	movs	r2, #219	; 0xdb
 8001c02:	2100      	movs	r1, #0
 8001c04:	2078      	movs	r0, #120	; 0x78
 8001c06:	f000 fd27 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2078      	movs	r0, #120	; 0x78
 8001c10:	f000 fd22 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001c14:	228d      	movs	r2, #141	; 0x8d
 8001c16:	2100      	movs	r1, #0
 8001c18:	2078      	movs	r0, #120	; 0x78
 8001c1a:	f000 fd1d 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001c1e:	2214      	movs	r2, #20
 8001c20:	2100      	movs	r1, #0
 8001c22:	2078      	movs	r0, #120	; 0x78
 8001c24:	f000 fd18 	bl	8002658 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001c28:	22af      	movs	r2, #175	; 0xaf
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2078      	movs	r0, #120	; 0x78
 8001c2e:	f000 fd13 	bl	8002658 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001c32:	222e      	movs	r2, #46	; 0x2e
 8001c34:	2100      	movs	r1, #0
 8001c36:	2078      	movs	r0, #120	; 0x78
 8001c38:	f000 fd0e 	bl	8002658 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f000 f843 	bl	8001cc8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001c42:	f000 f813 	bl	8001c6c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <SSD1306_Init+0x184>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <SSD1306_Init+0x184>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SSD1306_Init+0x184>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000110 	.word	0x20000110
 8001c68:	20000608 	.word	0x20000608

08001c6c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	e01d      	b.n	8001cb4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	3b50      	subs	r3, #80	; 0x50
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	2100      	movs	r1, #0
 8001c82:	2078      	movs	r0, #120	; 0x78
 8001c84:	f000 fce8 	bl	8002658 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2078      	movs	r0, #120	; 0x78
 8001c8e:	f000 fce3 	bl	8002658 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001c92:	2210      	movs	r2, #16
 8001c94:	2100      	movs	r1, #0
 8001c96:	2078      	movs	r0, #120	; 0x78
 8001c98:	f000 fcde 	bl	8002658 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	01db      	lsls	r3, r3, #7
 8001ca0:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <SSD1306_UpdateScreen+0x58>)
 8001ca2:	441a      	add	r2, r3
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	2078      	movs	r0, #120	; 0x78
 8001caa:	f000 fc6f 	bl	800258c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	71fb      	strb	r3, [r7, #7]
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	2b07      	cmp	r3, #7
 8001cb8:	d9de      	bls.n	8001c78 <SSD1306_UpdateScreen+0xc>
	}
}
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000208 	.word	0x20000208

08001cc8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <SSD1306_Fill+0x14>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <SSD1306_Fill+0x16>
 8001cdc:	23ff      	movs	r3, #255	; 0xff
 8001cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <SSD1306_Fill+0x2c>)
 8001ce6:	f007 fd65 	bl	80097b4 <memset>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000208 	.word	0x20000208

08001cf8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	80fb      	strh	r3, [r7, #6]
 8001d02:	460b      	mov	r3, r1
 8001d04:	80bb      	strh	r3, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	70fb      	strb	r3, [r7, #3]
	if (
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d0e:	d848      	bhi.n	8001da2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001d10:	88bb      	ldrh	r3, [r7, #4]
 8001d12:	2b3f      	cmp	r3, #63	; 0x3f
 8001d14:	d845      	bhi.n	8001da2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <SSD1306_DrawPixel+0xb4>)
 8001d18:	791b      	ldrb	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d11a      	bne.n	8001d68 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	88bb      	ldrh	r3, [r7, #4]
 8001d36:	08db      	lsrs	r3, r3, #3
 8001d38:	b298      	uxth	r0, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	01db      	lsls	r3, r3, #7
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <SSD1306_DrawPixel+0xb8>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	b25a      	sxtb	r2, r3
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b259      	sxtb	r1, r3
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	01db      	lsls	r3, r3, #7
 8001d5e:	4413      	add	r3, r2
 8001d60:	b2c9      	uxtb	r1, r1
 8001d62:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <SSD1306_DrawPixel+0xb8>)
 8001d64:	54d1      	strb	r1, [r2, r3]
 8001d66:	e01d      	b.n	8001da4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d68:	88fa      	ldrh	r2, [r7, #6]
 8001d6a:	88bb      	ldrh	r3, [r7, #4]
 8001d6c:	08db      	lsrs	r3, r3, #3
 8001d6e:	b298      	uxth	r0, r3
 8001d70:	4603      	mov	r3, r0
 8001d72:	01db      	lsls	r3, r3, #7
 8001d74:	4413      	add	r3, r2
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <SSD1306_DrawPixel+0xb8>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	b25a      	sxtb	r2, r3
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	b25b      	sxtb	r3, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	4013      	ands	r3, r2
 8001d90:	b259      	sxtb	r1, r3
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	4603      	mov	r3, r0
 8001d96:	01db      	lsls	r3, r3, #7
 8001d98:	4413      	add	r3, r2
 8001d9a:	b2c9      	uxtb	r1, r1
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <SSD1306_DrawPixel+0xb8>)
 8001d9e:	54d1      	strb	r1, [r2, r3]
 8001da0:	e000      	b.n	8001da4 <SSD1306_DrawPixel+0xac>
		return;
 8001da2:	bf00      	nop
	}
}
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	20000608 	.word	0x20000608
 8001db0:	20000208 	.word	0x20000208

08001db4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	80fb      	strh	r3, [r7, #6]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <SSD1306_GotoXY+0x28>)
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <SSD1306_GotoXY+0x28>)
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	8053      	strh	r3, [r2, #2]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000608 	.word	0x20000608

08001de0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	4613      	mov	r3, r2
 8001dee:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001df0:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <SSD1306_Putc+0xfc>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
	if (
 8001dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8001dfe:	dc07      	bgt.n	8001e10 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001e00:	4b36      	ldr	r3, [pc, #216]	; (8001edc <SSD1306_Putc+0xfc>)
 8001e02:	885b      	ldrh	r3, [r3, #2]
 8001e04:	461a      	mov	r2, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	785b      	ldrb	r3, [r3, #1]
 8001e0a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e0c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e0e:	dd01      	ble.n	8001e14 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e05e      	b.n	8001ed2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e04b      	b.n	8001eb2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	3b20      	subs	r3, #32
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	7849      	ldrb	r1, [r1, #1]
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	440b      	add	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e030      	b.n	8001ea0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d010      	beq.n	8001e70 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <SSD1306_Putc+0xfc>)
 8001e50:	881a      	ldrh	r2, [r3, #0]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	b298      	uxth	r0, r3
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <SSD1306_Putc+0xfc>)
 8001e5c:	885a      	ldrh	r2, [r3, #2]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	79ba      	ldrb	r2, [r7, #6]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7ff ff45 	bl	8001cf8 <SSD1306_DrawPixel>
 8001e6e:	e014      	b.n	8001e9a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <SSD1306_Putc+0xfc>)
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	b298      	uxth	r0, r3
 8001e7c:	4b17      	ldr	r3, [pc, #92]	; (8001edc <SSD1306_Putc+0xfc>)
 8001e7e:	885a      	ldrh	r2, [r3, #2]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	b299      	uxth	r1, r3
 8001e88:	79bb      	ldrb	r3, [r7, #6]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	2300      	movne	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	f7ff ff2f 	bl	8001cf8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d3c8      	bcc.n	8001e3e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d3ad      	bcc.n	8001e1a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <SSD1306_Putc+0xfc>)
 8001ec0:	881a      	ldrh	r2, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <SSD1306_Putc+0xfc>)
 8001ece:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000608 	.word	0x20000608

08001ee0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001eee:	e012      	b.n	8001f16 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff71 	bl	8001de0 <SSD1306_Putc>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d002      	beq.n	8001f10 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	e008      	b.n	8001f22 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3301      	adds	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1e8      	bne.n	8001ef0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	781b      	ldrb	r3, [r3, #0]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001f2a:	b590      	push	{r4, r7, lr}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4604      	mov	r4, r0
 8001f32:	4608      	mov	r0, r1
 8001f34:	4611      	mov	r1, r2
 8001f36:	461a      	mov	r2, r3
 8001f38:	4623      	mov	r3, r4
 8001f3a:	80fb      	strh	r3, [r7, #6]
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	80bb      	strh	r3, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001f4c:	d901      	bls.n	8001f52 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001f4e:	237f      	movs	r3, #127	; 0x7f
 8001f50:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	2b7f      	cmp	r3, #127	; 0x7f
 8001f56:	d901      	bls.n	8001f5c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001f58:	237f      	movs	r3, #127	; 0x7f
 8001f5a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001f5c:	88bb      	ldrh	r3, [r7, #4]
 8001f5e:	2b3f      	cmp	r3, #63	; 0x3f
 8001f60:	d901      	bls.n	8001f66 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001f62:	233f      	movs	r3, #63	; 0x3f
 8001f64:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001f66:	883b      	ldrh	r3, [r7, #0]
 8001f68:	2b3f      	cmp	r3, #63	; 0x3f
 8001f6a:	d901      	bls.n	8001f70 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001f6c:	233f      	movs	r3, #63	; 0x3f
 8001f6e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001f70:	88fa      	ldrh	r2, [r7, #6]
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d205      	bcs.n	8001f84 <SSD1306_DrawLine+0x5a>
 8001f78:	887a      	ldrh	r2, [r7, #2]
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	e004      	b.n	8001f8e <SSD1306_DrawLine+0x64>
 8001f84:	88fa      	ldrh	r2, [r7, #6]
 8001f86:	887b      	ldrh	r3, [r7, #2]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001f90:	88ba      	ldrh	r2, [r7, #4]
 8001f92:	883b      	ldrh	r3, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d205      	bcs.n	8001fa4 <SSD1306_DrawLine+0x7a>
 8001f98:	883a      	ldrh	r2, [r7, #0]
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	e004      	b.n	8001fae <SSD1306_DrawLine+0x84>
 8001fa4:	88ba      	ldrh	r2, [r7, #4]
 8001fa6:	883b      	ldrh	r3, [r7, #0]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d201      	bcs.n	8001fbc <SSD1306_DrawLine+0x92>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e001      	b.n	8001fc0 <SSD1306_DrawLine+0x96>
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001fc2:	88ba      	ldrh	r2, [r7, #4]
 8001fc4:	883b      	ldrh	r3, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d201      	bcs.n	8001fce <SSD1306_DrawLine+0xa4>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e001      	b.n	8001fd2 <SSD1306_DrawLine+0xa8>
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001fd4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001fd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dd06      	ble.n	8001fee <SSD1306_DrawLine+0xc4>
 8001fe0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fe4:	0fda      	lsrs	r2, r3, #31
 8001fe6:	4413      	add	r3, r2
 8001fe8:	105b      	asrs	r3, r3, #1
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	e006      	b.n	8001ffc <SSD1306_DrawLine+0xd2>
 8001fee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ff2:	0fda      	lsrs	r2, r3, #31
 8001ff4:	4413      	add	r3, r2
 8001ff6:	105b      	asrs	r3, r3, #1
 8001ff8:	425b      	negs	r3, r3
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001ffe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d129      	bne.n	800205a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002006:	883a      	ldrh	r2, [r7, #0]
 8002008:	88bb      	ldrh	r3, [r7, #4]
 800200a:	429a      	cmp	r2, r3
 800200c:	d205      	bcs.n	800201a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800200e:	883b      	ldrh	r3, [r7, #0]
 8002010:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002012:	88bb      	ldrh	r3, [r7, #4]
 8002014:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002016:	893b      	ldrh	r3, [r7, #8]
 8002018:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	429a      	cmp	r2, r3
 8002020:	d205      	bcs.n	800202e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800202a:	893b      	ldrh	r3, [r7, #8]
 800202c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800202e:	88bb      	ldrh	r3, [r7, #4]
 8002030:	82bb      	strh	r3, [r7, #20]
 8002032:	e00c      	b.n	800204e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002034:	8ab9      	ldrh	r1, [r7, #20]
 8002036:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fe5b 	bl	8001cf8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002042:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002046:	b29b      	uxth	r3, r3
 8002048:	3301      	adds	r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	82bb      	strh	r3, [r7, #20]
 800204e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002052:	883b      	ldrh	r3, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	dded      	ble.n	8002034 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8002058:	e05f      	b.n	800211a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800205a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d129      	bne.n	80020b6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002062:	883a      	ldrh	r2, [r7, #0]
 8002064:	88bb      	ldrh	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	d205      	bcs.n	8002076 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800206a:	883b      	ldrh	r3, [r7, #0]
 800206c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800206e:	88bb      	ldrh	r3, [r7, #4]
 8002070:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002072:	893b      	ldrh	r3, [r7, #8]
 8002074:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	429a      	cmp	r2, r3
 800207c:	d205      	bcs.n	800208a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002086:	893b      	ldrh	r3, [r7, #8]
 8002088:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800208a:	88fb      	ldrh	r3, [r7, #6]
 800208c:	82bb      	strh	r3, [r7, #20]
 800208e:	e00c      	b.n	80020aa <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002090:	8abb      	ldrh	r3, [r7, #20]
 8002092:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002096:	88b9      	ldrh	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fe2d 	bl	8001cf8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800209e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	82bb      	strh	r3, [r7, #20]
 80020aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	dded      	ble.n	8002090 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80020b4:	e031      	b.n	800211a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80020b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80020ba:	88b9      	ldrh	r1, [r7, #4]
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fe1a 	bl	8001cf8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80020c4:	88fa      	ldrh	r2, [r7, #6]
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d103      	bne.n	80020d4 <SSD1306_DrawLine+0x1aa>
 80020cc:	88ba      	ldrh	r2, [r7, #4]
 80020ce:	883b      	ldrh	r3, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d021      	beq.n	8002118 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80020d4:	8afb      	ldrh	r3, [r7, #22]
 80020d6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80020d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020e0:	425b      	negs	r3, r3
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dd08      	ble.n	80020f8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80020e6:	8afa      	ldrh	r2, [r7, #22]
 80020e8:	8a3b      	ldrh	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80020f0:	89fa      	ldrh	r2, [r7, #14]
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	4413      	add	r3, r2
 80020f6:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80020f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	dad8      	bge.n	80020b6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002104:	8afa      	ldrh	r2, [r7, #22]
 8002106:	8a7b      	ldrh	r3, [r7, #18]
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800210e:	89ba      	ldrh	r2, [r7, #12]
 8002110:	88bb      	ldrh	r3, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002116:	e7ce      	b.n	80020b6 <SSD1306_DrawLine+0x18c>
			break;
 8002118:	bf00      	nop
		} 
	}
}
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}

08002120 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002120:	b590      	push	{r4, r7, lr}
 8002122:	b085      	sub	sp, #20
 8002124:	af02      	add	r7, sp, #8
 8002126:	4604      	mov	r4, r0
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4623      	mov	r3, r4
 8002130:	80fb      	strh	r3, [r7, #6]
 8002132:	4603      	mov	r3, r0
 8002134:	80bb      	strh	r3, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	807b      	strh	r3, [r7, #2]
 800213a:	4613      	mov	r3, r2
 800213c:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	2b7f      	cmp	r3, #127	; 0x7f
 8002142:	d853      	bhi.n	80021ec <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8002144:	88bb      	ldrh	r3, [r7, #4]
 8002146:	2b3f      	cmp	r3, #63	; 0x3f
 8002148:	d850      	bhi.n	80021ec <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800214a:	88fa      	ldrh	r2, [r7, #6]
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	4413      	add	r3, r2
 8002150:	2b7f      	cmp	r3, #127	; 0x7f
 8002152:	dd03      	ble.n	800215c <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800215a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800215c:	88ba      	ldrh	r2, [r7, #4]
 800215e:	883b      	ldrh	r3, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	2b3f      	cmp	r3, #63	; 0x3f
 8002164:	dd03      	ble.n	800216e <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800216c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 800216e:	88fa      	ldrh	r2, [r7, #6]
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	4413      	add	r3, r2
 8002174:	b29a      	uxth	r2, r3
 8002176:	88bc      	ldrh	r4, [r7, #4]
 8002178:	88b9      	ldrh	r1, [r7, #4]
 800217a:	88f8      	ldrh	r0, [r7, #6]
 800217c:	7e3b      	ldrb	r3, [r7, #24]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4623      	mov	r3, r4
 8002182:	f7ff fed2 	bl	8001f2a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8002186:	88ba      	ldrh	r2, [r7, #4]
 8002188:	883b      	ldrh	r3, [r7, #0]
 800218a:	4413      	add	r3, r2
 800218c:	b299      	uxth	r1, r3
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	887b      	ldrh	r3, [r7, #2]
 8002192:	4413      	add	r3, r2
 8002194:	b29c      	uxth	r4, r3
 8002196:	88ba      	ldrh	r2, [r7, #4]
 8002198:	883b      	ldrh	r3, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	b29a      	uxth	r2, r3
 800219e:	88f8      	ldrh	r0, [r7, #6]
 80021a0:	7e3b      	ldrb	r3, [r7, #24]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	4622      	mov	r2, r4
 80021a8:	f7ff febf 	bl	8001f2a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 80021ac:	88ba      	ldrh	r2, [r7, #4]
 80021ae:	883b      	ldrh	r3, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	b29c      	uxth	r4, r3
 80021b4:	88fa      	ldrh	r2, [r7, #6]
 80021b6:	88b9      	ldrh	r1, [r7, #4]
 80021b8:	88f8      	ldrh	r0, [r7, #6]
 80021ba:	7e3b      	ldrb	r3, [r7, #24]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4623      	mov	r3, r4
 80021c0:	f7ff feb3 	bl	8001f2a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	4413      	add	r3, r2
 80021ca:	b298      	uxth	r0, r3
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	4413      	add	r3, r2
 80021d2:	b29c      	uxth	r4, r3
 80021d4:	88ba      	ldrh	r2, [r7, #4]
 80021d6:	883b      	ldrh	r3, [r7, #0]
 80021d8:	4413      	add	r3, r2
 80021da:	b29a      	uxth	r2, r3
 80021dc:	88b9      	ldrh	r1, [r7, #4]
 80021de:	7e3b      	ldrb	r3, [r7, #24]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	4613      	mov	r3, r2
 80021e4:	4622      	mov	r2, r4
 80021e6:	f7ff fea0 	bl	8001f2a <SSD1306_DrawLine>
 80021ea:	e000      	b.n	80021ee <SSD1306_DrawRectangle+0xce>
		return;
 80021ec:	bf00      	nop
}
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}

080021f4 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4604      	mov	r4, r0
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4623      	mov	r3, r4
 8002204:	80fb      	strh	r3, [r7, #6]
 8002206:	4603      	mov	r3, r0
 8002208:	80bb      	strh	r3, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	807b      	strh	r3, [r7, #2]
 800220e:	4613      	mov	r3, r2
 8002210:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	f1c3 0301 	rsb	r3, r3, #1
 8002218:	b29b      	uxth	r3, r3
 800221a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800221c:	2301      	movs	r3, #1
 800221e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	461a      	mov	r2, r3
 8002224:	03d2      	lsls	r2, r2, #15
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002236:	88f8      	ldrh	r0, [r7, #6]
 8002238:	88ba      	ldrh	r2, [r7, #4]
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	4413      	add	r3, r2
 800223e:	b29b      	uxth	r3, r3
 8002240:	787a      	ldrb	r2, [r7, #1]
 8002242:	4619      	mov	r1, r3
 8002244:	f7ff fd58 	bl	8001cf8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002248:	88f8      	ldrh	r0, [r7, #6]
 800224a:	88ba      	ldrh	r2, [r7, #4]
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	b29b      	uxth	r3, r3
 8002252:	787a      	ldrb	r2, [r7, #1]
 8002254:	4619      	mov	r1, r3
 8002256:	f7ff fd4f 	bl	8001cf8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	4413      	add	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	88b9      	ldrh	r1, [r7, #4]
 8002264:	787a      	ldrb	r2, [r7, #1]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fd46 	bl	8001cf8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	88b9      	ldrh	r1, [r7, #4]
 8002276:	787a      	ldrb	r2, [r7, #1]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fd3d 	bl	8001cf8 <SSD1306_DrawPixel>

    while (x < y) {
 800227e:	e081      	b.n	8002384 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8002280:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0e      	blt.n	80022a6 <SSD1306_DrawCircle+0xb2>
            y--;
 8002288:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002294:	8a7b      	ldrh	r3, [r7, #18]
 8002296:	3302      	adds	r3, #2
 8002298:	b29b      	uxth	r3, r3
 800229a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800229c:	8afa      	ldrh	r2, [r7, #22]
 800229e:	8a7b      	ldrh	r3, [r7, #18]
 80022a0:	4413      	add	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80022a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3301      	adds	r3, #1
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80022b2:	8abb      	ldrh	r3, [r7, #20]
 80022b4:	3302      	adds	r3, #2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80022ba:	8afa      	ldrh	r2, [r7, #22]
 80022bc:	8abb      	ldrh	r3, [r7, #20]
 80022be:	4413      	add	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	8a3b      	ldrh	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	b298      	uxth	r0, r3
 80022cc:	88ba      	ldrh	r2, [r7, #4]
 80022ce:	89fb      	ldrh	r3, [r7, #14]
 80022d0:	4413      	add	r3, r2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	787a      	ldrb	r2, [r7, #1]
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7ff fd0e 	bl	8001cf8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80022dc:	88fa      	ldrh	r2, [r7, #6]
 80022de:	8a3b      	ldrh	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	b298      	uxth	r0, r3
 80022e4:	88ba      	ldrh	r2, [r7, #4]
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	4413      	add	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	787a      	ldrb	r2, [r7, #1]
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7ff fd02 	bl	8001cf8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 80022f4:	88fa      	ldrh	r2, [r7, #6]
 80022f6:	8a3b      	ldrh	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	b298      	uxth	r0, r3
 80022fc:	88ba      	ldrh	r2, [r7, #4]
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	b29b      	uxth	r3, r3
 8002304:	787a      	ldrb	r2, [r7, #1]
 8002306:	4619      	mov	r1, r3
 8002308:	f7ff fcf6 	bl	8001cf8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800230c:	88fa      	ldrh	r2, [r7, #6]
 800230e:	8a3b      	ldrh	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	b298      	uxth	r0, r3
 8002314:	88ba      	ldrh	r2, [r7, #4]
 8002316:	89fb      	ldrh	r3, [r7, #14]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	b29b      	uxth	r3, r3
 800231c:	787a      	ldrb	r2, [r7, #1]
 800231e:	4619      	mov	r1, r3
 8002320:	f7ff fcea 	bl	8001cf8 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	4413      	add	r3, r2
 800232a:	b298      	uxth	r0, r3
 800232c:	88ba      	ldrh	r2, [r7, #4]
 800232e:	8a3b      	ldrh	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	787a      	ldrb	r2, [r7, #1]
 8002336:	4619      	mov	r1, r3
 8002338:	f7ff fcde 	bl	8001cf8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	89fb      	ldrh	r3, [r7, #14]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	b298      	uxth	r0, r3
 8002344:	88ba      	ldrh	r2, [r7, #4]
 8002346:	8a3b      	ldrh	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	b29b      	uxth	r3, r3
 800234c:	787a      	ldrb	r2, [r7, #1]
 800234e:	4619      	mov	r1, r3
 8002350:	f7ff fcd2 	bl	8001cf8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	4413      	add	r3, r2
 800235a:	b298      	uxth	r0, r3
 800235c:	88ba      	ldrh	r2, [r7, #4]
 800235e:	8a3b      	ldrh	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	b29b      	uxth	r3, r3
 8002364:	787a      	ldrb	r2, [r7, #1]
 8002366:	4619      	mov	r1, r3
 8002368:	f7ff fcc6 	bl	8001cf8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	89fb      	ldrh	r3, [r7, #14]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	b298      	uxth	r0, r3
 8002374:	88ba      	ldrh	r2, [r7, #4]
 8002376:	8a3b      	ldrh	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	b29b      	uxth	r3, r3
 800237c:	787a      	ldrb	r2, [r7, #1]
 800237e:	4619      	mov	r1, r3
 8002380:	f7ff fcba 	bl	8001cf8 <SSD1306_DrawPixel>
    while (x < y) {
 8002384:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800238c:	429a      	cmp	r2, r3
 800238e:	f6ff af77 	blt.w	8002280 <SSD1306_DrawCircle+0x8c>
    }
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	371c      	adds	r7, #28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}

0800239c <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	4604      	mov	r4, r0
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	80fb      	strh	r3, [r7, #6]
 80023ae:	4603      	mov	r3, r0
 80023b0:	80bb      	strh	r3, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]
 80023b6:	4613      	mov	r3, r2
 80023b8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	f1c3 0301 	rsb	r3, r3, #1
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	461a      	mov	r2, r3
 80023cc:	03d2      	lsls	r2, r2, #15
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 80023de:	88f8      	ldrh	r0, [r7, #6]
 80023e0:	88ba      	ldrh	r2, [r7, #4]
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	4413      	add	r3, r2
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	787a      	ldrb	r2, [r7, #1]
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7ff fc84 	bl	8001cf8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80023f0:	88f8      	ldrh	r0, [r7, #6]
 80023f2:	88ba      	ldrh	r2, [r7, #4]
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	787a      	ldrb	r2, [r7, #1]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7ff fc7b 	bl	8001cf8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002402:	88fa      	ldrh	r2, [r7, #6]
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	4413      	add	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	88b9      	ldrh	r1, [r7, #4]
 800240c:	787a      	ldrb	r2, [r7, #1]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fc72 	bl	8001cf8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	b29b      	uxth	r3, r3
 800241c:	88b9      	ldrh	r1, [r7, #4]
 800241e:	787a      	ldrb	r2, [r7, #1]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fc69 	bl	8001cf8 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b298      	uxth	r0, r3
 800242e:	88b9      	ldrh	r1, [r7, #4]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	4413      	add	r3, r2
 8002436:	b29a      	uxth	r2, r3
 8002438:	88bc      	ldrh	r4, [r7, #4]
 800243a:	787b      	ldrb	r3, [r7, #1]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	4623      	mov	r3, r4
 8002440:	f7ff fd73 	bl	8001f2a <SSD1306_DrawLine>

    while (x < y) {
 8002444:	e079      	b.n	800253a <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8002446:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0e      	blt.n	800246c <SSD1306_DrawFilledCircle+0xd0>
            y--;
 800244e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800245a:	8a7b      	ldrh	r3, [r7, #18]
 800245c:	3302      	adds	r3, #2
 800245e:	b29b      	uxth	r3, r3
 8002460:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002462:	8afa      	ldrh	r2, [r7, #22]
 8002464:	8a7b      	ldrh	r3, [r7, #18]
 8002466:	4413      	add	r3, r2
 8002468:	b29b      	uxth	r3, r3
 800246a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800246c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002470:	b29b      	uxth	r3, r3
 8002472:	3301      	adds	r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8002478:	8abb      	ldrh	r3, [r7, #20]
 800247a:	3302      	adds	r3, #2
 800247c:	b29b      	uxth	r3, r3
 800247e:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002480:	8afa      	ldrh	r2, [r7, #22]
 8002482:	8abb      	ldrh	r3, [r7, #20]
 8002484:	4413      	add	r3, r2
 8002486:	b29b      	uxth	r3, r3
 8002488:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	8a3b      	ldrh	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	b298      	uxth	r0, r3
 8002492:	88ba      	ldrh	r2, [r7, #4]
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	4413      	add	r3, r2
 8002498:	b299      	uxth	r1, r3
 800249a:	88fa      	ldrh	r2, [r7, #6]
 800249c:	8a3b      	ldrh	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	b29c      	uxth	r4, r3
 80024a2:	88ba      	ldrh	r2, [r7, #4]
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	4413      	add	r3, r2
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	787b      	ldrb	r3, [r7, #1]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	4622      	mov	r2, r4
 80024b2:	f7ff fd3a 	bl	8001f2a <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	8a3b      	ldrh	r3, [r7, #16]
 80024ba:	4413      	add	r3, r2
 80024bc:	b298      	uxth	r0, r3
 80024be:	88ba      	ldrh	r2, [r7, #4]
 80024c0:	89fb      	ldrh	r3, [r7, #14]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	b299      	uxth	r1, r3
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	8a3b      	ldrh	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	b29c      	uxth	r4, r3
 80024ce:	88ba      	ldrh	r2, [r7, #4]
 80024d0:	89fb      	ldrh	r3, [r7, #14]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	787b      	ldrb	r3, [r7, #1]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	4622      	mov	r2, r4
 80024de:	f7ff fd24 	bl	8001f2a <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	89fb      	ldrh	r3, [r7, #14]
 80024e6:	4413      	add	r3, r2
 80024e8:	b298      	uxth	r0, r3
 80024ea:	88ba      	ldrh	r2, [r7, #4]
 80024ec:	8a3b      	ldrh	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	b299      	uxth	r1, r3
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	89fb      	ldrh	r3, [r7, #14]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	b29c      	uxth	r4, r3
 80024fa:	88ba      	ldrh	r2, [r7, #4]
 80024fc:	8a3b      	ldrh	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	b29a      	uxth	r2, r3
 8002502:	787b      	ldrb	r3, [r7, #1]
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	4613      	mov	r3, r2
 8002508:	4622      	mov	r2, r4
 800250a:	f7ff fd0e 	bl	8001f2a <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	89fb      	ldrh	r3, [r7, #14]
 8002512:	4413      	add	r3, r2
 8002514:	b298      	uxth	r0, r3
 8002516:	88ba      	ldrh	r2, [r7, #4]
 8002518:	8a3b      	ldrh	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b299      	uxth	r1, r3
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	89fb      	ldrh	r3, [r7, #14]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b29c      	uxth	r4, r3
 8002526:	88ba      	ldrh	r2, [r7, #4]
 8002528:	8a3b      	ldrh	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	b29a      	uxth	r2, r3
 800252e:	787b      	ldrb	r3, [r7, #1]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	4622      	mov	r2, r4
 8002536:	f7ff fcf8 	bl	8001f2a <SSD1306_DrawLine>
    while (x < y) {
 800253a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800253e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002542:	429a      	cmp	r2, r3
 8002544:	f6ff af7f 	blt.w	8002446 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}

08002552 <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002556:	2000      	movs	r0, #0
 8002558:	f7ff fbb6 	bl	8001cc8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800255c:	f7ff fb86 	bl	8001c6c <SSD1306_UpdateScreen>
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <ssd1306_I2C_Init+0x24>)
 800256c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800256e:	e002      	b.n	8002576 <ssd1306_I2C_Init+0x12>
		p--;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f9      	bne.n	8002570 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	0003d090 	.word	0x0003d090

0800258c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b0c7      	sub	sp, #284	; 0x11c
 8002590:	af02      	add	r7, sp, #8
 8002592:	4604      	mov	r4, r0
 8002594:	4608      	mov	r0, r1
 8002596:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800259a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800259e:	600a      	str	r2, [r1, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80025aa:	4622      	mov	r2, r4
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025b2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80025b6:	4602      	mov	r2, r0
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025c2:	460a      	mov	r2, r1
 80025c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80025c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025d2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80025e0:	e015      	b.n	800260e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80025e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80025e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025ea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	441a      	add	r2, r3
 80025f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80025f6:	3301      	adds	r3, #1
 80025f8:	7811      	ldrb	r1, [r2, #0]
 80025fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80025fe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002602:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002604:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002608:	3301      	adds	r3, #1
 800260a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800260e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002612:	b29b      	uxth	r3, r3
 8002614:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002618:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800261c:	8812      	ldrh	r2, [r2, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d8df      	bhi.n	80025e2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002622:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002626:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b299      	uxth	r1, r3
 800262e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002632:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	b29b      	uxth	r3, r3
 800263c:	f107 020c 	add.w	r2, r7, #12
 8002640:	200a      	movs	r0, #10
 8002642:	9000      	str	r0, [sp, #0]
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <ssd1306_I2C_WriteMulti+0xc8>)
 8002646:	f001 fa9b 	bl	8003b80 <HAL_I2C_Master_Transmit>
}
 800264a:	bf00      	nop
 800264c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	20000110 	.word	0x20000110

08002658 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
 8002662:	460b      	mov	r3, r1
 8002664:	71bb      	strb	r3, [r7, #6]
 8002666:	4613      	mov	r3, r2
 8002668:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800266e:	797b      	ldrb	r3, [r7, #5]
 8002670:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	b299      	uxth	r1, r3
 8002676:	f107 020c 	add.w	r2, r7, #12
 800267a:	230a      	movs	r3, #10
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2302      	movs	r3, #2
 8002680:	4803      	ldr	r0, [pc, #12]	; (8002690 <ssd1306_I2C_Write+0x38>)
 8002682:	f001 fa7d 	bl	8003b80 <HAL_I2C_Master_Transmit>
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000110 	.word	0x20000110

08002694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_MspInit+0x68>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_MspInit+0x68>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6193      	str	r3, [r2, #24]
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_MspInit+0x68>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_MspInit+0x68>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_MspInit+0x68>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <HAL_MspInit+0x68>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	210f      	movs	r1, #15
 80026ce:	f06f 0001 	mvn.w	r0, #1
 80026d2:	f000 ff32 	bl	800353a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_MspInit+0x6c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_MspInit+0x6c>)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	40010000 	.word	0x40010000

08002704 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0318 	add.w	r3, r7, #24
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_ADC_MspInit+0xbc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d122      	bne.n	800276a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4a26      	ldr	r2, [pc, #152]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6193      	str	r3, [r2, #24]
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	6193      	str	r3, [r2, #24]
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002754:	2309      	movs	r3, #9
 8002756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002758:	2303      	movs	r3, #3
 800275a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 0318 	add.w	r3, r7, #24
 8002760:	4619      	mov	r1, r3
 8002762:	4819      	ldr	r0, [pc, #100]	; (80027c8 <HAL_ADC_MspInit+0xc4>)
 8002764:	f000 ff14 	bl	8003590 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002768:	e026      	b.n	80027b8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_ADC_MspInit+0xc8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d121      	bne.n	80027b8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800277a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277e:	6193      	str	r3, [r2, #24]
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6193      	str	r3, [r2, #24]
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_ADC_MspInit+0xc0>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027a4:	2302      	movs	r3, #2
 80027a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a8:	2303      	movs	r3, #3
 80027aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	f107 0318 	add.w	r3, r7, #24
 80027b0:	4619      	mov	r1, r3
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <HAL_ADC_MspInit+0xc4>)
 80027b4:	f000 feec 	bl	8003590 <HAL_GPIO_Init>
}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40012400 	.word	0x40012400
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010800 	.word	0x40010800
 80027cc:	40012800 	.word	0x40012800

080027d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0310 	add.w	r3, r7, #16
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <HAL_I2C_MspInit+0x70>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d123      	bne.n	8002838 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_I2C_MspInit+0x74>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a13      	ldr	r2, [pc, #76]	; (8002844 <HAL_I2C_MspInit+0x74>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_I2C_MspInit+0x74>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280c:	2312      	movs	r3, #18
 800280e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 0310 	add.w	r3, r7, #16
 8002818:	4619      	mov	r1, r3
 800281a:	480b      	ldr	r0, [pc, #44]	; (8002848 <HAL_I2C_MspInit+0x78>)
 800281c:	f000 feb8 	bl	8003590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <HAL_I2C_MspInit+0x74>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4a07      	ldr	r2, [pc, #28]	; (8002844 <HAL_I2C_MspInit+0x74>)
 8002826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800282a:	61d3      	str	r3, [r2, #28]
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_I2C_MspInit+0x74>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002838:	bf00      	nop
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40005400 	.word	0x40005400
 8002844:	40021000 	.word	0x40021000
 8002848:	40010c00 	.word	0x40010c00

0800284c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <HAL_SPI_MspInit+0x88>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d12f      	bne.n	80028cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 8002872:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_SPI_MspInit+0x8c>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800289c:	23a0      	movs	r3, #160	; 0xa0
 800289e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4619      	mov	r1, r3
 80028ae:	480b      	ldr	r0, [pc, #44]	; (80028dc <HAL_SPI_MspInit+0x90>)
 80028b0:	f000 fe6e 	bl	8003590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028b4:	2340      	movs	r3, #64	; 0x40
 80028b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4619      	mov	r1, r3
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_SPI_MspInit+0x90>)
 80028c8:	f000 fe62 	bl	8003590 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013000 	.word	0x40013000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010800 	.word	0x40010800

080028e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80028f6:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_InitTick+0xe8>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4a33      	ldr	r2, [pc, #204]	; (80029c8 <HAL_InitTick+0xe8>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	61d3      	str	r3, [r2, #28]
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <HAL_InitTick+0xe8>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800290e:	f107 0210 	add.w	r2, r7, #16
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f002 f9a9 	bl	8004c70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d103      	bne.n	8002930 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002928:	f002 f97a 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 800292c:	6378      	str	r0, [r7, #52]	; 0x34
 800292e:	e004      	b.n	800293a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002930:	f002 f976 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 8002934:	4603      	mov	r3, r0
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293c:	4a23      	ldr	r2, [pc, #140]	; (80029cc <HAL_InitTick+0xec>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0c9b      	lsrs	r3, r3, #18
 8002944:	3b01      	subs	r3, #1
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_InitTick+0xf0>)
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_InitTick+0xf4>)
 800294c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_InitTick+0xf0>)
 8002950:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002954:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <HAL_InitTick+0xf0>)
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_InitTick+0xf0>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002962:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_InitTick+0xf0>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002968:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_InitTick+0xf0>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800296e:	4818      	ldr	r0, [pc, #96]	; (80029d0 <HAL_InitTick+0xf0>)
 8002970:	f003 f8c0 	bl	8005af4 <HAL_TIM_Base_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800297a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11b      	bne.n	80029ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002982:	4813      	ldr	r0, [pc, #76]	; (80029d0 <HAL_InitTick+0xf0>)
 8002984:	f003 f90e 	bl	8005ba4 <HAL_TIM_Base_Start_IT>
 8002988:	4603      	mov	r3, r0
 800298a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800298e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002992:	2b00      	cmp	r3, #0
 8002994:	d111      	bne.n	80029ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002996:	201e      	movs	r0, #30
 8002998:	f000 fdeb 	bl	8003572 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d808      	bhi.n	80029b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80029a2:	2200      	movs	r2, #0
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	201e      	movs	r0, #30
 80029a8:	f000 fdc7 	bl	800353a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ac:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <HAL_InitTick+0xf8>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e002      	b.n	80029ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80029ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3738      	adds	r7, #56	; 0x38
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	431bde83 	.word	0x431bde83
 80029d0:	20000610 	.word	0x20000610
 80029d4:	40000800 	.word	0x40000800
 80029d8:	2000000c 	.word	0x2000000c

080029dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <NMI_Handler+0x4>

080029e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e6:	e7fe      	b.n	80029e6 <HardFault_Handler+0x4>

080029e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <MemManage_Handler+0x4>

080029ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <BusFault_Handler+0x4>

080029f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <UsageFault_Handler+0x4>

080029fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
	...

08002a08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <TIM4_IRQHandler+0x10>)
 8002a0e:	f003 f91b 	bl	8005c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000610 	.word	0x20000610

08002a1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8002a28:	f7ff fff8 	bl	8002a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a2c:	480b      	ldr	r0, [pc, #44]	; (8002a5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a2e:	490c      	ldr	r1, [pc, #48]	; (8002a60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a30:	4a0c      	ldr	r2, [pc, #48]	; (8002a64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a34:	e002      	b.n	8002a3c <LoopCopyDataInit>

08002a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3a:	3304      	adds	r3, #4

08002a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a40:	d3f9      	bcc.n	8002a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a44:	4c09      	ldr	r4, [pc, #36]	; (8002a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a48:	e001      	b.n	8002a4e <LoopFillZerobss>

08002a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a4c:	3204      	adds	r2, #4

08002a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a50:	d3fb      	bcc.n	8002a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a52:	f006 feb7 	bl	80097c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a56:	f7fd fef3 	bl	8000840 <main>
  bx lr
 8002a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a60:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002a64:	0800a2a8 	.word	0x0800a2a8
  ldr r2, =_sbss
 8002a68:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002a6c:	20002344 	.word	0x20002344

08002a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <ADC1_2_IRQHandler>
	...

08002a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_Init+0x28>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <HAL_Init+0x28>)
 8002a7e:	f043 0310 	orr.w	r3, r3, #16
 8002a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f000 fd4d 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a8a:	200f      	movs	r0, #15
 8002a8c:	f7ff ff28 	bl	80028e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a90:	f7ff fe00 	bl	8002694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_IncTick+0x1c>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_IncTick+0x20>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	4a03      	ldr	r2, [pc, #12]	; (8002ac0 <HAL_IncTick+0x20>)
 8002ab2:	6013      	str	r3, [r2, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	20000010 	.word	0x20000010
 8002ac0:	20000658 	.word	0x20000658

08002ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <HAL_GetTick+0x10>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	20000658 	.word	0x20000658

08002ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7ff fff0 	bl	8002ac4 <HAL_GetTick>
 8002ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d005      	beq.n	8002afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_Delay+0x44>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002afe:	bf00      	nop
 8002b00:	f7ff ffe0 	bl	8002ac4 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d8f7      	bhi.n	8002b00 <HAL_Delay+0x28>
  {
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000010 	.word	0x20000010

08002b20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0be      	b.n	8002cc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fdd0 	bl	8002704 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fbf1 	bl	800334c <ADC_ConversionStop_Disable>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8099 	bne.w	8002cae <HAL_ADC_Init+0x18e>
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8095 	bne.w	8002cae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b8c:	f023 0302 	bic.w	r3, r3, #2
 8002b90:	f043 0202 	orr.w	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ba0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	7b1b      	ldrb	r3, [r3, #12]
 8002ba6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ba8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb8:	d003      	beq.n	8002bc2 <HAL_ADC_Init+0xa2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d102      	bne.n	8002bc8 <HAL_ADC_Init+0xa8>
 8002bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc6:	e000      	b.n	8002bca <HAL_ADC_Init+0xaa>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7d1b      	ldrb	r3, [r3, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d119      	bne.n	8002c0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7b1b      	ldrb	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d109      	bne.n	8002bf4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	035a      	lsls	r2, r3, #13
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	e00b      	b.n	8002c0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_ADC_Init+0x1a8>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3c:	d003      	beq.n	8002c46 <HAL_ADC_Init+0x126>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d104      	bne.n	8002c50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	051b      	lsls	r3, r3, #20
 8002c4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_ADC_Init+0x1ac>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d10b      	bne.n	8002c8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c8a:	e018      	b.n	8002cbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	f023 0312 	bic.w	r3, r3, #18
 8002c94:	f043 0210 	orr.w	r2, r3, #16
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cac:	e007      	b.n	8002cbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f043 0210 	orr.w	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	ffe1f7fd 	.word	0xffe1f7fd
 8002ccc:	ff1f0efe 	.word	0xff1f0efe

08002cd0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_Start+0x1a>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e098      	b.n	8002e1c <HAL_ADC_Start+0x14c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fad0 	bl	8003298 <ADC_Enable>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 8087 	bne.w	8002e12 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a41      	ldr	r2, [pc, #260]	; (8002e24 <HAL_ADC_Start+0x154>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d105      	bne.n	8002d2e <HAL_ADC_Start+0x5e>
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_ADC_Start+0x158>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d115      	bne.n	8002d5a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d026      	beq.n	8002d96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d58:	e01d      	b.n	8002d96 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <HAL_ADC_Start+0x158>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_ADC_Start+0xaa>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2b      	ldr	r2, [pc, #172]	; (8002e24 <HAL_ADC_Start+0x154>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10d      	bne.n	8002d96 <HAL_ADC_Start+0xc6>
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_ADC_Start+0x158>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f023 0206 	bic.w	r2, r3, #6
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dae:	e002      	b.n	8002db6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0202 	mvn.w	r2, #2
 8002dc6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002dd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002dd6:	d113      	bne.n	8002e00 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <HAL_ADC_Start+0x154>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d105      	bne.n	8002dee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_ADC_Start+0x158>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d108      	bne.n	8002e00 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002dfc:	609a      	str	r2, [r3, #8]
 8002dfe:	e00c      	b.n	8002e1a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	e003      	b.n	8002e1a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40012800 	.word	0x40012800
 8002e28:	40012400 	.word	0x40012400

08002e2c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_Stop+0x1a>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e01a      	b.n	8002e7c <HAL_ADC_Stop+0x50>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa7c 	bl	800334c <ADC_ConversionStop_Disable>
 8002e54:	4603      	mov	r3, r0
 8002e56:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d109      	bne.n	8002e72 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e9a:	f7ff fe13 	bl	8002ac4 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0d3      	b.n	800306e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d131      	bne.n	8002f38 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d12a      	bne.n	8002f38 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ee2:	e021      	b.n	8002f28 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d01d      	beq.n	8002f28 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_ADC_PollForConversion+0x7e>
 8002ef2:	f7ff fde7 	bl	8002ac4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d212      	bcs.n	8002f28 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	f043 0204 	orr.w	r2, r3, #4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0a2      	b.n	800306e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0d6      	beq.n	8002ee4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f36:	e070      	b.n	800301a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f38:	4b4f      	ldr	r3, [pc, #316]	; (8003078 <HAL_ADC_PollForConversion+0x1f4>)
 8002f3a:	681c      	ldr	r4, [r3, #0]
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f001 ff9b 	bl	8004e78 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f42:	4603      	mov	r3, r0
 8002f44:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6919      	ldr	r1, [r3, #16]
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <HAL_ADC_PollForConversion+0x1f8>)
 8002f50:	400b      	ands	r3, r1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d118      	bne.n	8002f88 <HAL_ADC_PollForConversion+0x104>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68d9      	ldr	r1, [r3, #12]
 8002f5c:	4b48      	ldr	r3, [pc, #288]	; (8003080 <HAL_ADC_PollForConversion+0x1fc>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d111      	bne.n	8002f88 <HAL_ADC_PollForConversion+0x104>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6919      	ldr	r1, [r3, #16]
 8002f6a:	4b46      	ldr	r3, [pc, #280]	; (8003084 <HAL_ADC_PollForConversion+0x200>)
 8002f6c:	400b      	ands	r3, r1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <HAL_ADC_PollForConversion+0x100>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68d9      	ldr	r1, [r3, #12]
 8002f78:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_ADC_PollForConversion+0x204>)
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_PollForConversion+0x100>
 8002f80:	2314      	movs	r3, #20
 8002f82:	e020      	b.n	8002fc6 <HAL_ADC_PollForConversion+0x142>
 8002f84:	2329      	movs	r3, #41	; 0x29
 8002f86:	e01e      	b.n	8002fc6 <HAL_ADC_PollForConversion+0x142>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6919      	ldr	r1, [r3, #16]
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_ADC_PollForConversion+0x200>)
 8002f90:	400b      	ands	r3, r1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_ADC_PollForConversion+0x120>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68d9      	ldr	r1, [r3, #12]
 8002f9c:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <HAL_ADC_PollForConversion+0x204>)
 8002f9e:	400b      	ands	r3, r1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <HAL_ADC_PollForConversion+0x13c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6919      	ldr	r1, [r3, #16]
 8002faa:	4b38      	ldr	r3, [pc, #224]	; (800308c <HAL_ADC_PollForConversion+0x208>)
 8002fac:	400b      	ands	r3, r1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <HAL_ADC_PollForConversion+0x140>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68d9      	ldr	r1, [r3, #12]
 8002fb8:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_ADC_PollForConversion+0x208>)
 8002fba:	400b      	ands	r3, r1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADC_PollForConversion+0x140>
 8002fc0:	2354      	movs	r3, #84	; 0x54
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_PollForConversion+0x142>
 8002fc4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fcc:	e021      	b.n	8003012 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d01a      	beq.n	800300c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d007      	beq.n	8002fec <HAL_ADC_PollForConversion+0x168>
 8002fdc:	f7ff fd72 	bl	8002ac4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d20f      	bcs.n	800300c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d90b      	bls.n	800300c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	f043 0204 	orr.w	r2, r3, #4
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e030      	b.n	800306e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	429a      	cmp	r2, r3
 8003018:	d8d9      	bhi.n	8002fce <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f06f 0212 	mvn.w	r2, #18
 8003022:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800303a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800303e:	d115      	bne.n	800306c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003044:	2b00      	cmp	r3, #0
 8003046:	d111      	bne.n	800306c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	f043 0201 	orr.w	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd90      	pop	{r4, r7, pc}
 8003076:	bf00      	nop
 8003078:	20000008 	.word	0x20000008
 800307c:	24924924 	.word	0x24924924
 8003080:	00924924 	.word	0x00924924
 8003084:	12492492 	.word	0x12492492
 8003088:	00492492 	.word	0x00492492
 800308c:	00249249 	.word	0x00249249

08003090 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x20>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0dc      	b.n	8003282 <HAL_ADC_ConfigChannel+0x1da>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d81c      	bhi.n	8003112 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	3b05      	subs	r3, #5
 80030ea:	221f      	movs	r2, #31
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	4019      	ands	r1, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	3b05      	subs	r3, #5
 8003104:	fa00 f203 	lsl.w	r2, r0, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	635a      	str	r2, [r3, #52]	; 0x34
 8003110:	e03c      	b.n	800318c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d81c      	bhi.n	8003154 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b23      	subs	r3, #35	; 0x23
 800312c:	221f      	movs	r2, #31
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	4019      	ands	r1, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	3b23      	subs	r3, #35	; 0x23
 8003146:	fa00 f203 	lsl.w	r2, r0, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
 8003152:	e01b      	b.n	800318c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	3b41      	subs	r3, #65	; 0x41
 8003166:	221f      	movs	r2, #31
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	4019      	ands	r1, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	3b41      	subs	r3, #65	; 0x41
 8003180:	fa00 f203 	lsl.w	r2, r0, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b09      	cmp	r3, #9
 8003192:	d91c      	bls.n	80031ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68d9      	ldr	r1, [r3, #12]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	3b1e      	subs	r3, #30
 80031a6:	2207      	movs	r2, #7
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	4019      	ands	r1, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6898      	ldr	r0, [r3, #8]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	3b1e      	subs	r3, #30
 80031c0:	fa00 f203 	lsl.w	r2, r0, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	60da      	str	r2, [r3, #12]
 80031cc:	e019      	b.n	8003202 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6919      	ldr	r1, [r3, #16]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	2207      	movs	r2, #7
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	4019      	ands	r1, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6898      	ldr	r0, [r3, #8]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	fa00 f203 	lsl.w	r2, r0, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b10      	cmp	r3, #16
 8003208:	d003      	beq.n	8003212 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800320e:	2b11      	cmp	r3, #17
 8003210:	d132      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1d      	ldr	r2, [pc, #116]	; (800328c <HAL_ADC_ConfigChannel+0x1e4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d125      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d126      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003238:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b10      	cmp	r3, #16
 8003240:	d11a      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_ADC_ConfigChannel+0x1e8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <HAL_ADC_ConfigChannel+0x1ec>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	0c9a      	lsrs	r2, r3, #18
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003258:	e002      	b.n	8003260 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3b01      	subs	r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f9      	bne.n	800325a <HAL_ADC_ConfigChannel+0x1b2>
 8003266:	e007      	b.n	8003278 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	40012400 	.word	0x40012400
 8003290:	20000008 	.word	0x20000008
 8003294:	431bde83 	.word	0x431bde83

08003298 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d040      	beq.n	8003338 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032c6:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <ADC_Enable+0xac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <ADC_Enable+0xb0>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	0c9b      	lsrs	r3, r3, #18
 80032d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032d4:	e002      	b.n	80032dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f9      	bne.n	80032d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032e2:	f7ff fbef 	bl	8002ac4 <HAL_GetTick>
 80032e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032e8:	e01f      	b.n	800332a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ea:	f7ff fbeb 	bl	8002ac4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d918      	bls.n	800332a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d011      	beq.n	800332a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e007      	b.n	800333a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d1d8      	bne.n	80032ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000008 	.word	0x20000008
 8003348:	431bde83 	.word	0x431bde83

0800334c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d12e      	bne.n	80033c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003376:	f7ff fba5 	bl	8002ac4 <HAL_GetTick>
 800337a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800337c:	e01b      	b.n	80033b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800337e:	f7ff fba1 	bl	8002ac4 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d914      	bls.n	80033b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10d      	bne.n	80033b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	f043 0210 	orr.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d0dc      	beq.n	800337e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60d3      	str	r3, [r2, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4906      	ldr	r1, [pc, #24]	; (8003468 <__NVIC_EnableIRQ+0x34>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	e000e100 	.word	0xe000e100

0800346c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	6039      	str	r1, [r7, #0]
 8003476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	2b00      	cmp	r3, #0
 800347e:	db0a      	blt.n	8003496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	490c      	ldr	r1, [pc, #48]	; (80034b8 <__NVIC_SetPriority+0x4c>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	440b      	add	r3, r1
 8003490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003494:	e00a      	b.n	80034ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4908      	ldr	r1, [pc, #32]	; (80034bc <__NVIC_SetPriority+0x50>)
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	3b04      	subs	r3, #4
 80034a4:	0112      	lsls	r2, r2, #4
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	440b      	add	r3, r1
 80034aa:	761a      	strb	r2, [r3, #24]
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f1c3 0307 	rsb	r3, r3, #7
 80034da:	2b04      	cmp	r3, #4
 80034dc:	bf28      	it	cs
 80034de:	2304      	movcs	r3, #4
 80034e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d902      	bls.n	80034f0 <NVIC_EncodePriority+0x30>
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3b03      	subs	r3, #3
 80034ee:	e000      	b.n	80034f2 <NVIC_EncodePriority+0x32>
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	f04f 32ff 	mov.w	r2, #4294967295
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	401a      	ands	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003508:	f04f 31ff 	mov.w	r1, #4294967295
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	43d9      	mvns	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	4313      	orrs	r3, r2
         );
}
 800351a:	4618      	mov	r0, r3
 800351c:	3724      	adds	r7, #36	; 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff4f 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff ff64 	bl	8003418 <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ffb2 	bl	80034c0 <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff81 	bl	800346c <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff57 	bl	8003434 <__NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b08b      	sub	sp, #44	; 0x2c
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a2:	e169      	b.n	8003878 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035a4:	2201      	movs	r2, #1
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	429a      	cmp	r2, r3
 80035be:	f040 8158 	bne.w	8003872 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a9a      	ldr	r2, [pc, #616]	; (8003830 <HAL_GPIO_Init+0x2a0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d05e      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035cc:	4a98      	ldr	r2, [pc, #608]	; (8003830 <HAL_GPIO_Init+0x2a0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d875      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 80035d2:	4a98      	ldr	r2, [pc, #608]	; (8003834 <HAL_GPIO_Init+0x2a4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d058      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035d8:	4a96      	ldr	r2, [pc, #600]	; (8003834 <HAL_GPIO_Init+0x2a4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d86f      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 80035de:	4a96      	ldr	r2, [pc, #600]	; (8003838 <HAL_GPIO_Init+0x2a8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d052      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035e4:	4a94      	ldr	r2, [pc, #592]	; (8003838 <HAL_GPIO_Init+0x2a8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d869      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 80035ea:	4a94      	ldr	r2, [pc, #592]	; (800383c <HAL_GPIO_Init+0x2ac>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d04c      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035f0:	4a92      	ldr	r2, [pc, #584]	; (800383c <HAL_GPIO_Init+0x2ac>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d863      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 80035f6:	4a92      	ldr	r2, [pc, #584]	; (8003840 <HAL_GPIO_Init+0x2b0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d046      	beq.n	800368a <HAL_GPIO_Init+0xfa>
 80035fc:	4a90      	ldr	r2, [pc, #576]	; (8003840 <HAL_GPIO_Init+0x2b0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d85d      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 8003602:	2b12      	cmp	r3, #18
 8003604:	d82a      	bhi.n	800365c <HAL_GPIO_Init+0xcc>
 8003606:	2b12      	cmp	r3, #18
 8003608:	d859      	bhi.n	80036be <HAL_GPIO_Init+0x12e>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <HAL_GPIO_Init+0x80>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	0800368b 	.word	0x0800368b
 8003614:	08003665 	.word	0x08003665
 8003618:	08003677 	.word	0x08003677
 800361c:	080036b9 	.word	0x080036b9
 8003620:	080036bf 	.word	0x080036bf
 8003624:	080036bf 	.word	0x080036bf
 8003628:	080036bf 	.word	0x080036bf
 800362c:	080036bf 	.word	0x080036bf
 8003630:	080036bf 	.word	0x080036bf
 8003634:	080036bf 	.word	0x080036bf
 8003638:	080036bf 	.word	0x080036bf
 800363c:	080036bf 	.word	0x080036bf
 8003640:	080036bf 	.word	0x080036bf
 8003644:	080036bf 	.word	0x080036bf
 8003648:	080036bf 	.word	0x080036bf
 800364c:	080036bf 	.word	0x080036bf
 8003650:	080036bf 	.word	0x080036bf
 8003654:	0800366d 	.word	0x0800366d
 8003658:	08003681 	.word	0x08003681
 800365c:	4a79      	ldr	r2, [pc, #484]	; (8003844 <HAL_GPIO_Init+0x2b4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003662:	e02c      	b.n	80036be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	623b      	str	r3, [r7, #32]
          break;
 800366a:	e029      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	3304      	adds	r3, #4
 8003672:	623b      	str	r3, [r7, #32]
          break;
 8003674:	e024      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	3308      	adds	r3, #8
 800367c:	623b      	str	r3, [r7, #32]
          break;
 800367e:	e01f      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	330c      	adds	r3, #12
 8003686:	623b      	str	r3, [r7, #32]
          break;
 8003688:	e01a      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003692:	2304      	movs	r3, #4
 8003694:	623b      	str	r3, [r7, #32]
          break;
 8003696:	e013      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036a0:	2308      	movs	r3, #8
 80036a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	611a      	str	r2, [r3, #16]
          break;
 80036aa:	e009      	b.n	80036c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036ac:	2308      	movs	r3, #8
 80036ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	615a      	str	r2, [r3, #20]
          break;
 80036b6:	e003      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
          break;
 80036bc:	e000      	b.n	80036c0 <HAL_GPIO_Init+0x130>
          break;
 80036be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2bff      	cmp	r3, #255	; 0xff
 80036c4:	d801      	bhi.n	80036ca <HAL_GPIO_Init+0x13a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	e001      	b.n	80036ce <HAL_GPIO_Init+0x13e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2bff      	cmp	r3, #255	; 0xff
 80036d4:	d802      	bhi.n	80036dc <HAL_GPIO_Init+0x14c>
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_Init+0x152>
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	3b08      	subs	r3, #8
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	210f      	movs	r1, #15
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	401a      	ands	r2, r3
 80036f4:	6a39      	ldr	r1, [r7, #32]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	431a      	orrs	r2, r3
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80b1 	beq.w	8003872 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003710:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_GPIO_Init+0x2b8>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4a4c      	ldr	r2, [pc, #304]	; (8003848 <HAL_GPIO_Init+0x2b8>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	6193      	str	r3, [r2, #24]
 800371c:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <HAL_GPIO_Init+0x2b8>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003728:	4a48      	ldr	r2, [pc, #288]	; (800384c <HAL_GPIO_Init+0x2bc>)
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003734:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	220f      	movs	r2, #15
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a40      	ldr	r2, [pc, #256]	; (8003850 <HAL_GPIO_Init+0x2c0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_GPIO_Init+0x1ec>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <HAL_GPIO_Init+0x2c4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00d      	beq.n	8003778 <HAL_GPIO_Init+0x1e8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3e      	ldr	r2, [pc, #248]	; (8003858 <HAL_GPIO_Init+0x2c8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <HAL_GPIO_Init+0x1e4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3d      	ldr	r2, [pc, #244]	; (800385c <HAL_GPIO_Init+0x2cc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d101      	bne.n	8003770 <HAL_GPIO_Init+0x1e0>
 800376c:	2303      	movs	r3, #3
 800376e:	e006      	b.n	800377e <HAL_GPIO_Init+0x1ee>
 8003770:	2304      	movs	r3, #4
 8003772:	e004      	b.n	800377e <HAL_GPIO_Init+0x1ee>
 8003774:	2302      	movs	r3, #2
 8003776:	e002      	b.n	800377e <HAL_GPIO_Init+0x1ee>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_GPIO_Init+0x1ee>
 800377c:	2300      	movs	r3, #0
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	f002 0203 	and.w	r2, r2, #3
 8003784:	0092      	lsls	r2, r2, #2
 8003786:	4093      	lsls	r3, r2
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800378e:	492f      	ldr	r1, [pc, #188]	; (800384c <HAL_GPIO_Init+0x2bc>)
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	089b      	lsrs	r3, r3, #2
 8003794:	3302      	adds	r3, #2
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d006      	beq.n	80037b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	492c      	ldr	r1, [pc, #176]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
 80037b4:	e006      	b.n	80037c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037b6:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	43db      	mvns	r3, r3
 80037be:	4928      	ldr	r1, [pc, #160]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	4922      	ldr	r1, [pc, #136]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60cb      	str	r3, [r1, #12]
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	491e      	ldr	r1, [pc, #120]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	4918      	ldr	r1, [pc, #96]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	43db      	mvns	r3, r3
 800380e:	4914      	ldr	r1, [pc, #80]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 8003810:	4013      	ands	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d021      	beq.n	8003864 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_GPIO_Init+0x2d0>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e021      	b.n	8003872 <HAL_GPIO_Init+0x2e2>
 800382e:	bf00      	nop
 8003830:	10320000 	.word	0x10320000
 8003834:	10310000 	.word	0x10310000
 8003838:	10220000 	.word	0x10220000
 800383c:	10210000 	.word	0x10210000
 8003840:	10120000 	.word	0x10120000
 8003844:	10110000 	.word	0x10110000
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000
 8003850:	40010800 	.word	0x40010800
 8003854:	40010c00 	.word	0x40010c00
 8003858:	40011000 	.word	0x40011000
 800385c:	40011400 	.word	0x40011400
 8003860:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_GPIO_Init+0x304>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	43db      	mvns	r3, r3
 800386c:	4909      	ldr	r1, [pc, #36]	; (8003894 <HAL_GPIO_Init+0x304>)
 800386e:	4013      	ands	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	3301      	adds	r3, #1
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	f47f ae8e 	bne.w	80035a4 <HAL_GPIO_Init+0x14>
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	372c      	adds	r7, #44	; 0x2c
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	40010400 	.word	0x40010400

08003898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e001      	b.n	80038ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	807b      	strh	r3, [r7, #2]
 80038d2:	4613      	mov	r3, r2
 80038d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038d6:	787b      	ldrb	r3, [r7, #1]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038dc:	887a      	ldrh	r2, [r7, #2]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038e2:	e003      	b.n	80038ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038e4:	887b      	ldrh	r3, [r7, #2]
 80038e6:	041a      	lsls	r2, r3, #16
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	611a      	str	r2, [r3, #16]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e12b      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe ff56 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800395a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800395c:	f001 f960 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 8003960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a81      	ldr	r2, [pc, #516]	; (8003b6c <HAL_I2C_Init+0x274>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d807      	bhi.n	800397c <HAL_I2C_Init+0x84>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <HAL_I2C_Init+0x278>)
 8003970:	4293      	cmp	r3, r2
 8003972:	bf94      	ite	ls
 8003974:	2301      	movls	r3, #1
 8003976:	2300      	movhi	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	e006      	b.n	800398a <HAL_I2C_Init+0x92>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a7d      	ldr	r2, [pc, #500]	; (8003b74 <HAL_I2C_Init+0x27c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	bf94      	ite	ls
 8003984:	2301      	movls	r3, #1
 8003986:	2300      	movhi	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0e7      	b.n	8003b62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a78      	ldr	r2, [pc, #480]	; (8003b78 <HAL_I2C_Init+0x280>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a6a      	ldr	r2, [pc, #424]	; (8003b6c <HAL_I2C_Init+0x274>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d802      	bhi.n	80039cc <HAL_I2C_Init+0xd4>
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3301      	adds	r3, #1
 80039ca:	e009      	b.n	80039e0 <HAL_I2C_Init+0xe8>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	4a69      	ldr	r2, [pc, #420]	; (8003b7c <HAL_I2C_Init+0x284>)
 80039d8:	fba2 2303 	umull	r2, r3, r2, r3
 80039dc:	099b      	lsrs	r3, r3, #6
 80039de:	3301      	adds	r3, #1
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	495c      	ldr	r1, [pc, #368]	; (8003b6c <HAL_I2C_Init+0x274>)
 80039fc:	428b      	cmp	r3, r1
 80039fe:	d819      	bhi.n	8003a34 <HAL_I2C_Init+0x13c>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e59      	subs	r1, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a14:	400b      	ands	r3, r1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_I2C_Init+0x138>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e59      	subs	r1, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a2e:	e051      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a30:	2304      	movs	r3, #4
 8003a32:	e04f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d111      	bne.n	8003a60 <HAL_I2C_Init+0x168>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e012      	b.n	8003a86 <HAL_I2C_Init+0x18e>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Init+0x196>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e022      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10e      	bne.n	8003ab4 <HAL_I2C_Init+0x1bc>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e58      	subs	r0, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	440b      	add	r3, r1
 8003aa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab2:	e00f      	b.n	8003ad4 <HAL_I2C_Init+0x1dc>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6809      	ldr	r1, [r1, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6911      	ldr	r1, [r2, #16]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	000186a0 	.word	0x000186a0
 8003b70:	001e847f 	.word	0x001e847f
 8003b74:	003d08ff 	.word	0x003d08ff
 8003b78:	431bde83 	.word	0x431bde83
 8003b7c:	10624dd3 	.word	0x10624dd3

08003b80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
 8003b90:	4613      	mov	r3, r2
 8003b92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7fe ff96 	bl	8002ac4 <HAL_GetTick>
 8003b98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	f040 80e0 	bne.w	8003d68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2319      	movs	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4970      	ldr	r1, [pc, #448]	; (8003d74 <HAL_I2C_Master_Transmit+0x1f4>)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fa92 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0d3      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_I2C_Master_Transmit+0x50>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0cc      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d007      	beq.n	8003bf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2221      	movs	r2, #33	; 0x21
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2210      	movs	r2, #16
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	893a      	ldrh	r2, [r7, #8]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a50      	ldr	r2, [pc, #320]	; (8003d78 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c38:	8979      	ldrh	r1, [r7, #10]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f9ca 	bl	8003fd8 <I2C_MasterRequestWrite>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e08d      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c64:	e066      	b.n	8003d34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6a39      	ldr	r1, [r7, #32]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fb50 	bl	8004310 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06b      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11b      	bne.n	8003d08 <HAL_I2C_Master_Transmit+0x188>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	6a39      	ldr	r1, [r7, #32]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fb47 	bl	80043a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d107      	bne.n	8003d30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e01a      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d194      	bne.n	8003c66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	00100002 	.word	0x00100002
 8003d78:	ffff0000 	.word	0xffff0000

08003d7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d8c:	f7fe fe9a 	bl	8002ac4 <HAL_GetTick>
 8003d90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	f040 8111 	bne.w	8003fc6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2319      	movs	r3, #25
 8003daa:	2201      	movs	r2, #1
 8003dac:	4988      	ldr	r1, [pc, #544]	; (8003fd0 <HAL_I2C_IsDeviceReady+0x254>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f994 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e104      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2C_IsDeviceReady+0x50>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0fd      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d007      	beq.n	8003df2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2224      	movs	r2, #36	; 0x24
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a70      	ldr	r2, [pc, #448]	; (8003fd4 <HAL_I2C_IsDeviceReady+0x258>)
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f952 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4c:	d103      	bne.n	8003e56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0b6      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e5a:	897b      	ldrh	r3, [r7, #10]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fe2b 	bl	8002ac4 <HAL_GetTick>
 8003e6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e9e:	e025      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ea0:	f7fe fe10 	bl	8002ac4 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <HAL_I2C_IsDeviceReady+0x13a>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	22a0      	movs	r2, #160	; 0xa0
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2ba0      	cmp	r3, #160	; 0xa0
 8003ef6:	d005      	beq.n	8003f04 <HAL_I2C_IsDeviceReady+0x188>
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_I2C_IsDeviceReady+0x188>
 8003efe:	7dbb      	ldrb	r3, [r7, #22]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0cd      	beq.n	8003ea0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d129      	bne.n	8003f6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2319      	movs	r3, #25
 8003f46:	2201      	movs	r2, #1
 8003f48:	4921      	ldr	r1, [pc, #132]	; (8003fd0 <HAL_I2C_IsDeviceReady+0x254>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f8c6 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e036      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e02c      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2319      	movs	r3, #25
 8003f8e:	2201      	movs	r2, #1
 8003f90:	490f      	ldr	r1, [pc, #60]	; (8003fd0 <HAL_I2C_IsDeviceReady+0x254>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f8a2 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e012      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	f4ff af32 	bcc.w	8003e16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	00100002 	.word	0x00100002
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d006      	beq.n	8004002 <I2C_MasterRequestWrite+0x2a>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d003      	beq.n	8004002 <I2C_MasterRequestWrite+0x2a>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004000:	d108      	bne.n	8004014 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e00b      	b.n	800402c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	2b12      	cmp	r3, #18
 800401a:	d107      	bne.n	800402c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f84f 	bl	80040dc <I2C_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004052:	d103      	bne.n	800405c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e035      	b.n	80040cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004068:	d108      	bne.n	800407c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800406a:	897b      	ldrh	r3, [r7, #10]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	461a      	mov	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004078:	611a      	str	r2, [r3, #16]
 800407a:	e01b      	b.n	80040b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800407c:	897b      	ldrh	r3, [r7, #10]
 800407e:	11db      	asrs	r3, r3, #7
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f003 0306 	and.w	r3, r3, #6
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f063 030f 	orn	r3, r3, #15
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	490e      	ldr	r1, [pc, #56]	; (80040d4 <I2C_MasterRequestWrite+0xfc>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f898 	bl	80041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e010      	b.n	80040cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040aa:	897b      	ldrh	r3, [r7, #10]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <I2C_MasterRequestWrite+0x100>)
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f888 	bl	80041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	00010008 	.word	0x00010008
 80040d8:	00010002 	.word	0x00010002

080040dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	4613      	mov	r3, r2
 80040ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ec:	e048      	b.n	8004180 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d044      	beq.n	8004180 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f6:	f7fe fce5 	bl	8002ac4 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d302      	bcc.n	800410c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d139      	bne.n	8004180 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10d      	bne.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	43da      	mvns	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	e00c      	b.n	800414c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	43da      	mvns	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	429a      	cmp	r2, r3
 8004150:	d116      	bne.n	8004180 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e023      	b.n	80041c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	0c1b      	lsrs	r3, r3, #16
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d10d      	bne.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	43da      	mvns	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	e00c      	b.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	43da      	mvns	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d093      	beq.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041de:	e071      	b.n	80042c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ee:	d123      	bne.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f043 0204 	orr.w	r2, r3, #4
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e067      	b.n	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d041      	beq.n	80042c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004240:	f7fe fc40 	bl	8002ac4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d302      	bcc.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d136      	bne.n	80042c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10c      	bne.n	800427a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4013      	ands	r3, r2
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	e00b      	b.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	43da      	mvns	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e021      	b.n	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	0c1b      	lsrs	r3, r3, #16
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10c      	bne.n	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e00b      	b.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	43da      	mvns	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f af6d 	bne.w	80041e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800431c:	e034      	b.n	8004388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f886 	bl	8004430 <I2C_IsAcknowledgeFailed>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e034      	b.n	8004398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d028      	beq.n	8004388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fe fbc5 	bl	8002ac4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11d      	bne.n	8004388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b80      	cmp	r3, #128	; 0x80
 8004358:	d016      	beq.n	8004388 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e007      	b.n	8004398 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d1c3      	bne.n	800431e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ac:	e034      	b.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f83e 	bl	8004430 <I2C_IsAcknowledgeFailed>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e034      	b.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d028      	beq.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fb7d 	bl	8002ac4 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d11d      	bne.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d016      	beq.n	8004418 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e007      	b.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b04      	cmp	r3, #4
 8004424:	d1c3      	bne.n	80043ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d11b      	bne.n	8004480 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004450:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f043 0204 	orr.w	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e272      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8087 	beq.w	80045ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ac:	4b92      	ldr	r3, [pc, #584]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d00c      	beq.n	80044d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044b8:	4b8f      	ldr	r3, [pc, #572]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d112      	bne.n	80044ea <HAL_RCC_OscConfig+0x5e>
 80044c4:	4b8c      	ldr	r3, [pc, #560]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d10b      	bne.n	80044ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d2:	4b89      	ldr	r3, [pc, #548]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d06c      	beq.n	80045b8 <HAL_RCC_OscConfig+0x12c>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d168      	bne.n	80045b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e24c      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x76>
 80044f4:	4b80      	ldr	r3, [pc, #512]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a7f      	ldr	r2, [pc, #508]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e02e      	b.n	8004560 <HAL_RCC_OscConfig+0xd4>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x98>
 800450a:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a7a      	ldr	r2, [pc, #488]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b78      	ldr	r3, [pc, #480]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a77      	ldr	r2, [pc, #476]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800451c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xd4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0xbc>
 800452e:	4b72      	ldr	r3, [pc, #456]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a71      	ldr	r2, [pc, #452]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b6f      	ldr	r3, [pc, #444]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a6e      	ldr	r2, [pc, #440]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xd4>
 8004548:	4b6b      	ldr	r3, [pc, #428]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a6a      	ldr	r2, [pc, #424]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b68      	ldr	r3, [pc, #416]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a67      	ldr	r2, [pc, #412]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800455e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fe faac 	bl	8002ac4 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fe faa8 	bl	8002ac4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e200      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	4b5d      	ldr	r3, [pc, #372]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xe4>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fe fa98 	bl	8002ac4 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fe fa94 	bl	8002ac4 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e1ec      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	4b53      	ldr	r3, [pc, #332]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x10c>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d063      	beq.n	800468e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c6:	4b4c      	ldr	r3, [pc, #304]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045d2:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b08      	cmp	r3, #8
 80045dc:	d11c      	bne.n	8004618 <HAL_RCC_OscConfig+0x18c>
 80045de:	4b46      	ldr	r3, [pc, #280]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x176>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e1c0      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4939      	ldr	r1, [pc, #228]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004616:	e03a      	b.n	800468e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004620:	4b36      	ldr	r3, [pc, #216]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7fe fa4d 	bl	8002ac4 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462e:	f7fe fa49 	bl	8002ac4 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1a1      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4927      	ldr	r1, [pc, #156]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
 8004660:	e015      	b.n	800468e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fe fa2c 	bl	8002ac4 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004670:	f7fe fa28 	bl	8002ac4 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e180      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d03a      	beq.n	8004710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d019      	beq.n	80046d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a2:	4b17      	ldr	r3, [pc, #92]	; (8004700 <HAL_RCC_OscConfig+0x274>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a8:	f7fe fa0c 	bl	8002ac4 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fe fa08 	bl	8002ac4 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e160      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046ce:	2001      	movs	r0, #1
 80046d0:	f000 fafe 	bl	8004cd0 <RCC_Delay>
 80046d4:	e01c      	b.n	8004710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_RCC_OscConfig+0x274>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046dc:	f7fe f9f2 	bl	8002ac4 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e2:	e00f      	b.n	8004704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fe f9ee 	bl	8002ac4 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d908      	bls.n	8004704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e146      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	42420000 	.word	0x42420000
 8004700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	4b92      	ldr	r3, [pc, #584]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e9      	bne.n	80046e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80a6 	beq.w	800486a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004722:	4b8b      	ldr	r3, [pc, #556]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10d      	bne.n	800474a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	4b88      	ldr	r3, [pc, #544]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4a87      	ldr	r2, [pc, #540]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	61d3      	str	r3, [r2, #28]
 800473a:	4b85      	ldr	r3, [pc, #532]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	4b82      	ldr	r3, [pc, #520]	; (8004954 <HAL_RCC_OscConfig+0x4c8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d118      	bne.n	8004788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004756:	4b7f      	ldr	r3, [pc, #508]	; (8004954 <HAL_RCC_OscConfig+0x4c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a7e      	ldr	r2, [pc, #504]	; (8004954 <HAL_RCC_OscConfig+0x4c8>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004762:	f7fe f9af 	bl	8002ac4 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fe f9ab 	bl	8002ac4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b64      	cmp	r3, #100	; 0x64
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e103      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	4b75      	ldr	r3, [pc, #468]	; (8004954 <HAL_RCC_OscConfig+0x4c8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x312>
 8004790:	4b6f      	ldr	r3, [pc, #444]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	4a6e      	ldr	r2, [pc, #440]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6213      	str	r3, [r2, #32]
 800479c:	e02d      	b.n	80047fa <HAL_RCC_OscConfig+0x36e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x334>
 80047a6:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	4a69      	ldr	r2, [pc, #420]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	6213      	str	r3, [r2, #32]
 80047b2:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4a66      	ldr	r2, [pc, #408]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	6213      	str	r3, [r2, #32]
 80047be:	e01c      	b.n	80047fa <HAL_RCC_OscConfig+0x36e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d10c      	bne.n	80047e2 <HAL_RCC_OscConfig+0x356>
 80047c8:	4b61      	ldr	r3, [pc, #388]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4a60      	ldr	r2, [pc, #384]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047ce:	f043 0304 	orr.w	r3, r3, #4
 80047d2:	6213      	str	r3, [r2, #32]
 80047d4:	4b5e      	ldr	r3, [pc, #376]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	4a5d      	ldr	r2, [pc, #372]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	6213      	str	r3, [r2, #32]
 80047e0:	e00b      	b.n	80047fa <HAL_RCC_OscConfig+0x36e>
 80047e2:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	4a5a      	ldr	r2, [pc, #360]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	6213      	str	r3, [r2, #32]
 80047ee:	4b58      	ldr	r3, [pc, #352]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	4a57      	ldr	r2, [pc, #348]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d015      	beq.n	800482e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004802:	f7fe f95f 	bl	8002ac4 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fe f95b 	bl	8002ac4 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0b1      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCC_OscConfig+0x37e>
 800482c:	e014      	b.n	8004858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482e:	f7fe f949 	bl	8002ac4 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fe f945 	bl	8002ac4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e09b      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484c:	4b40      	ldr	r3, [pc, #256]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ee      	bne.n	8004836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004858:	7dfb      	ldrb	r3, [r7, #23]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4a3b      	ldr	r2, [pc, #236]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8087 	beq.w	8004982 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004874:	4b36      	ldr	r3, [pc, #216]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d061      	beq.n	8004944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d146      	bne.n	8004916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004888:	4b33      	ldr	r3, [pc, #204]	; (8004958 <HAL_RCC_OscConfig+0x4cc>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7fe f919 	bl	8002ac4 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004896:	f7fe f915 	bl	8002ac4 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e06d      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a8:	4b29      	ldr	r3, [pc, #164]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048bc:	d108      	bne.n	80048d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4921      	ldr	r1, [pc, #132]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d0:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a19      	ldr	r1, [r3, #32]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	430b      	orrs	r3, r1
 80048e2:	491b      	ldr	r1, [pc, #108]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x4cc>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7fe f8e9 	bl	8002ac4 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fe f8e5 	bl	8002ac4 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e03d      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x46a>
 8004914:	e035      	b.n	8004982 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <HAL_RCC_OscConfig+0x4cc>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fe f8d2 	bl	8002ac4 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fe f8ce 	bl	8002ac4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e026      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004936:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x498>
 8004942:	e01e      	b.n	8004982 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e019      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
 8004950:	40021000 	.word	0x40021000
 8004954:	40007000 	.word	0x40007000
 8004958:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_OscConfig+0x500>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	429a      	cmp	r2, r3
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000

08004990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0d0      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a4:	4b6a      	ldr	r3, [pc, #424]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d910      	bls.n	80049d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b67      	ldr	r3, [pc, #412]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 0207 	bic.w	r2, r3, #7
 80049ba:	4965      	ldr	r1, [pc, #404]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b63      	ldr	r3, [pc, #396]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0b8      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ec:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a58      	ldr	r2, [pc, #352]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a04:	4b53      	ldr	r3, [pc, #332]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a52      	ldr	r2, [pc, #328]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	494d      	ldr	r1, [pc, #308]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d040      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d115      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e07f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e073      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5e:	4b3d      	ldr	r3, [pc, #244]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e06b      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6e:	4b39      	ldr	r3, [pc, #228]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4936      	ldr	r1, [pc, #216]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a80:	f7fe f820 	bl	8002ac4 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fe f81c 	bl	8002ac4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e053      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 020c 	and.w	r2, r3, #12
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1eb      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d210      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 0207 	bic.w	r2, r3, #7
 8004ac6:	4922      	ldr	r1, [pc, #136]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e032      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aec:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4916      	ldr	r1, [pc, #88]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	490e      	ldr	r1, [pc, #56]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b1e:	f000 f821 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	490a      	ldr	r1, [pc, #40]	; (8004b58 <HAL_RCC_ClockConfig+0x1c8>)
 8004b30:	5ccb      	ldrb	r3, [r1, r3]
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1cc>)
 8004b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_RCC_ClockConfig+0x1d0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fd fece 	bl	80028e0 <HAL_InitTick>

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40022000 	.word	0x40022000
 8004b54:	40021000 	.word	0x40021000
 8004b58:	0800a23c 	.word	0x0800a23c
 8004b5c:	20000008 	.word	0x20000008
 8004b60:	2000000c 	.word	0x2000000c

08004b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x30>
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0x36>
 8004b92:	e027      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b96:	613b      	str	r3, [r7, #16]
      break;
 8004b98:	e027      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	0c9b      	lsrs	r3, r3, #18
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ba4:	5cd3      	ldrb	r3, [r2, r3]
 8004ba6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	0c5b      	lsrs	r3, r3, #17
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	4a11      	ldr	r2, [pc, #68]	; (8004c04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bbe:	5cd3      	ldrb	r3, [r2, r3]
 8004bc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a0d      	ldr	r2, [pc, #52]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8004bc6:	fb03 f202 	mul.w	r2, r3, r2
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	e004      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a0c      	ldr	r2, [pc, #48]	; (8004c08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	613b      	str	r3, [r7, #16]
      break;
 8004be2:	e002      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8004be6:	613b      	str	r3, [r7, #16]
      break;
 8004be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bea:	693b      	ldr	r3, [r7, #16]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	007a1200 	.word	0x007a1200
 8004c00:	0800a254 	.word	0x0800a254
 8004c04:	0800a264 	.word	0x0800a264
 8004c08:	003d0900 	.word	0x003d0900

08004c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c10:	4b02      	ldr	r3, [pc, #8]	; (8004c1c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c12:	681b      	ldr	r3, [r3, #0]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	20000008 	.word	0x20000008

08004c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c24:	f7ff fff2 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4903      	ldr	r1, [pc, #12]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	0800a24c 	.word	0x0800a24c

08004c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c4c:	f7ff ffde 	bl	8004c0c <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	0adb      	lsrs	r3, r3, #11
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4903      	ldr	r1, [pc, #12]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	0800a24c 	.word	0x0800a24c

08004c70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	220f      	movs	r2, #15
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c80:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <HAL_RCC_GetClockConfig+0x58>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 0203 	and.w	r2, r3, #3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <HAL_RCC_GetClockConfig+0x58>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCC_GetClockConfig+0x58>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ca4:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <HAL_RCC_GetClockConfig+0x58>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCC_GetClockConfig+0x5c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0207 	and.w	r2, r3, #7
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40022000 	.word	0x40022000

08004cd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <RCC_Delay+0x34>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <RCC_Delay+0x38>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	0a5b      	lsrs	r3, r3, #9
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cec:	bf00      	nop
  }
  while (Delay --);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1e5a      	subs	r2, r3, #1
 8004cf2:	60fa      	str	r2, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f9      	bne.n	8004cec <RCC_Delay+0x1c>
}
 8004cf8:	bf00      	nop
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	20000008 	.word	0x20000008
 8004d08:	10624dd3 	.word	0x10624dd3

08004d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d07d      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d2c:	4b4f      	ldr	r3, [pc, #316]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10d      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d38:	4b4c      	ldr	r3, [pc, #304]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	4a4b      	ldr	r2, [pc, #300]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	61d3      	str	r3, [r2, #28]
 8004d44:	4b49      	ldr	r3, [pc, #292]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	4b46      	ldr	r3, [pc, #280]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d118      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d60:	4b43      	ldr	r3, [pc, #268]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a42      	ldr	r2, [pc, #264]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6c:	f7fd feaa 	bl	8002ac4 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d72:	e008      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d74:	f7fd fea6 	bl	8002ac4 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e06d      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d86:	4b3a      	ldr	r3, [pc, #232]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d02e      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d027      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004db0:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dba:	4b2e      	ldr	r3, [pc, #184]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc0:	4b2c      	ldr	r3, [pc, #176]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dc6:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d014      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fd fe75 	bl	8002ac4 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fd fe71 	bl	8002ac4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e036      	b.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df4:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ee      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4917      	ldr	r1, [pc, #92]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d105      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	4a13      	ldr	r2, [pc, #76]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e30:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	490b      	ldr	r1, [pc, #44]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d008      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e4e:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	4904      	ldr	r1, [pc, #16]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40007000 	.word	0x40007000
 8004e74:	42420440 	.word	0x42420440

08004e78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	2300      	movs	r3, #0
 8004e92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d00a      	beq.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	f200 808a 	bhi.w	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d045      	beq.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d075      	beq.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004eae:	e082      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004eb0:	4b46      	ldr	r3, [pc, #280]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004eb6:	4b45      	ldr	r3, [pc, #276]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d07b      	beq.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	0c9b      	lsrs	r3, r3, #18
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	4a41      	ldr	r2, [pc, #260]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004ecc:	5cd3      	ldrb	r3, [r2, r3]
 8004ece:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d015      	beq.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004eda:	4b3c      	ldr	r3, [pc, #240]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	0c5b      	lsrs	r3, r3, #17
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	4a3b      	ldr	r2, [pc, #236]	; (8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
 8004ee8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ef4:	4a38      	ldr	r2, [pc, #224]	; (8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	fb02 f303 	mul.w	r3, r2, r3
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	e004      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4a34      	ldr	r2, [pc, #208]	; (8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	61bb      	str	r3, [r7, #24]
      break;
 8004f22:	e04a      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	4a2d      	ldr	r2, [pc, #180]	; (8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2e:	085b      	lsrs	r3, r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
      break;
 8004f32:	e042      	b.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004f34:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d108      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	e01f      	b.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f62:	d109      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004f70:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e00f      	b.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f82:	d11c      	bne.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d016      	beq.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004f90:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004f94:	61bb      	str	r3, [r7, #24]
      break;
 8004f96:	e012      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004f98:	e011      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004f9a:	f7ff fe55 	bl	8004c48 <HAL_RCC_GetPCLK2Freq>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	0b9b      	lsrs	r3, r3, #14
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb2:	61bb      	str	r3, [r7, #24]
      break;
 8004fb4:	e004      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004fbe:	bf00      	nop
    }
  }
  return (frequency);
 8004fc0:	69bb      	ldr	r3, [r7, #24]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	0800a268 	.word	0x0800a268
 8004fd4:	0800a278 	.word	0x0800a278
 8004fd8:	007a1200 	.word	0x007a1200
 8004fdc:	003d0900 	.word	0x003d0900
 8004fe0:	aaaaaaab 	.word	0xaaaaaaab

08004fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e076      	b.n	80050e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d108      	bne.n	8005010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005006:	d009      	beq.n	800501c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	61da      	str	r2, [r3, #28]
 800500e:	e005      	b.n	800501c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd fc08 	bl	800284c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a0:	ea42 0103 	orr.w	r1, r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	0c1a      	lsrs	r2, r3, #16
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f002 0204 	and.w	r2, r2, #4
 80050c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69da      	ldr	r2, [r3, #28]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	4613      	mov	r3, r2
 80050fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_SPI_Transmit+0x22>
 800510a:	2302      	movs	r3, #2
 800510c:	e12d      	b.n	800536a <HAL_SPI_Transmit+0x27e>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005116:	f7fd fcd5 	bl	8002ac4 <HAL_GetTick>
 800511a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d002      	beq.n	8005132 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800512c:	2302      	movs	r3, #2
 800512e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005130:	e116      	b.n	8005360 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_Transmit+0x52>
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005142:	e10d      	b.n	8005360 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2203      	movs	r2, #3
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d10f      	bne.n	80051ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800519a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d007      	beq.n	80051ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d2:	d14f      	bne.n	8005274 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_SPI_Transmit+0xf6>
 80051dc:	8afb      	ldrh	r3, [r7, #22]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d142      	bne.n	8005268 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	881a      	ldrh	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005206:	e02f      	b.n	8005268 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d112      	bne.n	800523c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	1c9a      	adds	r2, r3, #2
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36
 800523a:	e015      	b.n	8005268 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523c:	f7fd fc42 	bl	8002ac4 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d803      	bhi.n	8005254 <HAL_SPI_Transmit+0x168>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005252:	d102      	bne.n	800525a <HAL_SPI_Transmit+0x16e>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005266:	e07b      	b.n	8005360 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1ca      	bne.n	8005208 <HAL_SPI_Transmit+0x11c>
 8005272:	e050      	b.n	8005316 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_SPI_Transmit+0x196>
 800527c:	8afb      	ldrh	r3, [r7, #22]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d144      	bne.n	800530c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	330c      	adds	r3, #12
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052a8:	e030      	b.n	800530c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d113      	bne.n	80052e0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	330c      	adds	r3, #12
 80052c2:	7812      	ldrb	r2, [r2, #0]
 80052c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80052de:	e015      	b.n	800530c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e0:	f7fd fbf0 	bl	8002ac4 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d803      	bhi.n	80052f8 <HAL_SPI_Transmit+0x20c>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d102      	bne.n	80052fe <HAL_SPI_Transmit+0x212>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800530a:	e029      	b.n	8005360 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1c9      	bne.n	80052aa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fbcc 	bl	8005ab8 <SPI_EndRxTxTransaction>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10a      	bne.n	800534a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e003      	b.n	8005360 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005368:	7ffb      	ldrb	r3, [r7, #31]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af02      	add	r7, sp, #8
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005396:	e0fb      	b.n	8005590 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a0:	d112      	bne.n	80053c8 <HAL_SPI_Receive+0x56>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10e      	bne.n	80053c8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2204      	movs	r2, #4
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	4613      	mov	r3, r2
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f8ef 	bl	80055a2 <HAL_SPI_TransmitReceive>
 80053c4:	4603      	mov	r3, r0
 80053c6:	e0e8      	b.n	800559a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_SPI_Receive+0x64>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0e1      	b.n	800559a <HAL_SPI_Receive+0x228>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053de:	f7fd fb71 	bl	8002ac4 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <HAL_SPI_Receive+0x7e>
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053f4:	e0cc      	b.n	8005590 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2204      	movs	r2, #4
 80053fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	88fa      	ldrh	r2, [r7, #6]
 8005414:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543c:	d10f      	bne.n	800545e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d007      	beq.n	800547c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d16a      	bne.n	800555a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005484:	e032      	b.n	80054ec <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d115      	bne.n	80054c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f103 020c 	add.w	r2, r3, #12
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054be:	e015      	b.n	80054ec <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054c0:	f7fd fb00 	bl	8002ac4 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d803      	bhi.n	80054d8 <HAL_SPI_Receive+0x166>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d102      	bne.n	80054de <HAL_SPI_Receive+0x16c>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80054ea:	e051      	b.n	8005590 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1c7      	bne.n	8005486 <HAL_SPI_Receive+0x114>
 80054f6:	e035      	b.n	8005564 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d113      	bne.n	800552e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	b292      	uxth	r2, r2
 8005512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	1c9a      	adds	r2, r3, #2
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800552c:	e015      	b.n	800555a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800552e:	f7fd fac9 	bl	8002ac4 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d803      	bhi.n	8005546 <HAL_SPI_Receive+0x1d4>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005544:	d102      	bne.n	800554c <HAL_SPI_Receive+0x1da>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005558:	e01a      	b.n	8005590 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1c9      	bne.n	80054f8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fa53 	bl	8005a14 <SPI_EndRxTransaction>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
 8005586:	e003      	b.n	8005590 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005598:	7dfb      	ldrb	r3, [r7, #23]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b08c      	sub	sp, #48	; 0x30
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055b0:	2301      	movs	r3, #1
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x26>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e198      	b.n	80058fa <HAL_SPI_TransmitReceive+0x358>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d0:	f7fd fa78 	bl	8002ac4 <HAL_GetTick>
 80055d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055e6:	887b      	ldrh	r3, [r7, #2]
 80055e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d00f      	beq.n	8005612 <HAL_SPI_TransmitReceive+0x70>
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f8:	d107      	bne.n	800560a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <HAL_SPI_TransmitReceive+0x68>
 8005602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005606:	2b04      	cmp	r3, #4
 8005608:	d003      	beq.n	8005612 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800560a:	2302      	movs	r3, #2
 800560c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005610:	e16d      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x82>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x82>
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d103      	bne.n	800562c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800562a:	e160      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b04      	cmp	r3, #4
 8005636:	d003      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2205      	movs	r2, #5
 800563c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	887a      	ldrh	r2, [r7, #2]
 8005650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	887a      	ldrh	r2, [r7, #2]
 8005656:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	887a      	ldrh	r2, [r7, #2]
 8005662:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	887a      	ldrh	r2, [r7, #2]
 8005668:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d007      	beq.n	8005694 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569c:	d17c      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x10a>
 80056a6:	8b7b      	ldrh	r3, [r7, #26]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d16a      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d0:	e057      	b.n	8005782 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d11b      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x176>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <HAL_SPI_TransmitReceive+0x176>
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d113      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	1c9a      	adds	r2, r3, #2
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d119      	bne.n	800575a <HAL_SPI_TransmitReceive+0x1b8>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d014      	beq.n	800575a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	b292      	uxth	r2, r2
 800573c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	1c9a      	adds	r2, r3, #2
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005756:	2301      	movs	r3, #1
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800575a:	f7fd f9b3 	bl	8002ac4 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005766:	429a      	cmp	r2, r3
 8005768:	d80b      	bhi.n	8005782 <HAL_SPI_TransmitReceive+0x1e0>
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d007      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005780:	e0b5      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1a2      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x130>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d19d      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x130>
 8005796:	e080      	b.n	800589a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x204>
 80057a0:	8b7b      	ldrh	r3, [r7, #26]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d16f      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	7812      	ldrb	r2, [r2, #0]
 80057b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057cc:	e05b      	b.n	8005886 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d11c      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x274>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d017      	beq.n	8005816 <HAL_SPI_TransmitReceive+0x274>
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d114      	bne.n	8005816 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	7812      	ldrb	r2, [r2, #0]
 80057f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005808:	b29b      	uxth	r3, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d119      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x2b6>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d014      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005854:	2301      	movs	r3, #1
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005858:	f7fd f934 	bl	8002ac4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005864:	429a      	cmp	r2, r3
 8005866:	d803      	bhi.n	8005870 <HAL_SPI_TransmitReceive+0x2ce>
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d102      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x2d4>
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005884:	e033      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d19e      	bne.n	80057ce <HAL_SPI_TransmitReceive+0x22c>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d199      	bne.n	80057ce <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f90a 	bl	8005ab8 <SPI_EndRxTxTransaction>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d006      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058b6:	e01a      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e4:	e003      	b.n	80058ee <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3730      	adds	r7, #48	; 0x30
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005914:	f7fd f8d6 	bl	8002ac4 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	4413      	add	r3, r2
 8005922:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005924:	f7fd f8ce 	bl	8002ac4 <HAL_GetTick>
 8005928:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800592a:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	015b      	lsls	r3, r3, #5
 8005930:	0d1b      	lsrs	r3, r3, #20
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593a:	e054      	b.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005942:	d050      	beq.n	80059e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005944:	f7fd f8be 	bl	8002ac4 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	d902      	bls.n	800595a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d13d      	bne.n	80059d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005968:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005972:	d111      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597c:	d004      	beq.n	8005988 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005986:	d107      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005996:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a0:	d10f      	bne.n	80059c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e017      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d19b      	bne.n	800593c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000008 	.word	0x20000008

08005a14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a28:	d111      	bne.n	8005a4e <SPI_EndRxTransaction+0x3a>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	d004      	beq.n	8005a3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3c:	d107      	bne.n	8005a4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a56:	d117      	bne.n	8005a88 <SPI_EndRxTransaction+0x74>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a60:	d112      	bne.n	8005a88 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff ff49 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01a      	beq.n	8005aae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e013      	b.n	8005ab0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff ff36 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e000      	b.n	8005ab0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	2180      	movs	r1, #128	; 0x80
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff ff18 	bl	8005904 <SPI_WaitFlagStateUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e000      	b.n	8005aec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e041      	b.n	8005b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f839 	bl	8005b92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3304      	adds	r3, #4
 8005b30:	4619      	mov	r1, r3
 8005b32:	4610      	mov	r0, r2
 8005b34:	f000 f9b4 	bl	8005ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d001      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e03a      	b.n	8005c32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a18      	ldr	r2, [pc, #96]	; (8005c3c <HAL_TIM_Base_Start_IT+0x98>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00e      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x58>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be6:	d009      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x58>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a14      	ldr	r2, [pc, #80]	; (8005c40 <HAL_TIM_Base_Start_IT+0x9c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x58>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a13      	ldr	r2, [pc, #76]	; (8005c44 <HAL_TIM_Base_Start_IT+0xa0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d111      	bne.n	8005c20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b06      	cmp	r3, #6
 8005c0c:	d010      	beq.n	8005c30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1e:	e007      	b.n	8005c30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800

08005c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d122      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0202 	mvn.w	r2, #2
 8005c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8ed 	bl	8005e6a <HAL_TIM_IC_CaptureCallback>
 8005c90:	e005      	b.n	8005c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f8e0 	bl	8005e58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f8ef 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d122      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d11b      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0204 	mvn.w	r2, #4
 8005cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8c3 	bl	8005e6a <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8b6 	bl	8005e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8c5 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d122      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d11b      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0208 	mvn.w	r2, #8
 8005d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2204      	movs	r2, #4
 8005d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f899 	bl	8005e6a <HAL_TIM_IC_CaptureCallback>
 8005d38:	e005      	b.n	8005d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f88c 	bl	8005e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f89b 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d122      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d11b      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f06f 0210 	mvn.w	r2, #16
 8005d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2208      	movs	r2, #8
 8005d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f86f 	bl	8005e6a <HAL_TIM_IC_CaptureCallback>
 8005d8c:	e005      	b.n	8005d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f862 	bl	8005e58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f871 	bl	8005e7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10e      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d107      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0201 	mvn.w	r2, #1
 8005dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb f828 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d10e      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d107      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8bf 	bl	8005f76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d10e      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d107      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f835 	bl	8005e8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d10e      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d107      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0220 	mvn.w	r2, #32
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f88a 	bl	8005f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e50:	bf00      	nop
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr

08005e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a29      	ldr	r2, [pc, #164]	; (8005f58 <TIM_Base_SetConfig+0xb8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00b      	beq.n	8005ed0 <TIM_Base_SetConfig+0x30>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ebe:	d007      	beq.n	8005ed0 <TIM_Base_SetConfig+0x30>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a26      	ldr	r2, [pc, #152]	; (8005f5c <TIM_Base_SetConfig+0xbc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0x30>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a25      	ldr	r2, [pc, #148]	; (8005f60 <TIM_Base_SetConfig+0xc0>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d108      	bne.n	8005ee2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a1c      	ldr	r2, [pc, #112]	; (8005f58 <TIM_Base_SetConfig+0xb8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00b      	beq.n	8005f02 <TIM_Base_SetConfig+0x62>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef0:	d007      	beq.n	8005f02 <TIM_Base_SetConfig+0x62>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <TIM_Base_SetConfig+0xbc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <TIM_Base_SetConfig+0x62>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <TIM_Base_SetConfig+0xc0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d108      	bne.n	8005f14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a07      	ldr	r2, [pc, #28]	; (8005f58 <TIM_Base_SetConfig+0xb8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d103      	bne.n	8005f48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	615a      	str	r2, [r3, #20]
}
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800

08005f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr

08005f76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr

08005f88 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8e:	f3ef 8305 	mrs	r3, IPSR
 8005f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f94:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10f      	bne.n	8005fba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9e:	607b      	str	r3, [r7, #4]
  return(result);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <osKernelInitialize+0x32>
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <osKernelInitialize+0x60>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d109      	bne.n	8005fc2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fae:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb2:	603b      	str	r3, [r7, #0]
  return(result);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005fba:	f06f 0305 	mvn.w	r3, #5
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e00c      	b.n	8005fdc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <osKernelInitialize+0x60>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005fca:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <osKernelInitialize+0x60>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e002      	b.n	8005fdc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	2000065c 	.word	0x2000065c

08005fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ff2:	f3ef 8305 	mrs	r3, IPSR
 8005ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10f      	bne.n	800601e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8006002:	607b      	str	r3, [r7, #4]
  return(result);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <osKernelStart+0x32>
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <osKernelStart+0x64>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d109      	bne.n	8006026 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006012:	f3ef 8311 	mrs	r3, BASEPRI
 8006016:	603b      	str	r3, [r7, #0]
  return(result);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <osKernelStart+0x3a>
    stat = osErrorISR;
 800601e:	f06f 0305 	mvn.w	r3, #5
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e00e      	b.n	8006044 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <osKernelStart+0x64>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d107      	bne.n	800603e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800602e:	4b08      	ldr	r3, [pc, #32]	; (8006050 <osKernelStart+0x64>)
 8006030:	2202      	movs	r2, #2
 8006032:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006034:	f001 fe44 	bl	8007cc0 <vTaskStartScheduler>
      stat = osOK;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	e002      	b.n	8006044 <osKernelStart+0x58>
    } else {
      stat = osError;
 800603e:	f04f 33ff 	mov.w	r3, #4294967295
 8006042:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	2000065c 	.word	0x2000065c

08006054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b092      	sub	sp, #72	; 0x48
 8006058:	af04      	add	r7, sp, #16
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006064:	f3ef 8305 	mrs	r3, IPSR
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800606c:	2b00      	cmp	r3, #0
 800606e:	f040 8094 	bne.w	800619a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006072:	f3ef 8310 	mrs	r3, PRIMASK
 8006076:	623b      	str	r3, [r7, #32]
  return(result);
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f040 808d 	bne.w	800619a <osThreadNew+0x146>
 8006080:	4b48      	ldr	r3, [pc, #288]	; (80061a4 <osThreadNew+0x150>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d106      	bne.n	8006096 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006088:	f3ef 8311 	mrs	r3, BASEPRI
 800608c:	61fb      	str	r3, [r7, #28]
  return(result);
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 8082 	bne.w	800619a <osThreadNew+0x146>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d07e      	beq.n	800619a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80060a0:	2318      	movs	r3, #24
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80060a4:	2300      	movs	r3, #0
 80060a6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80060a8:	f107 031b 	add.w	r3, r7, #27
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d045      	beq.n	8006146 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <osThreadNew+0x74>
        name = attr->name;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <osThreadNew+0x9a>
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	2b38      	cmp	r3, #56	; 0x38
 80060e0:	d805      	bhi.n	80060ee <osThreadNew+0x9a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <osThreadNew+0x9e>
        return (NULL);
 80060ee:	2300      	movs	r3, #0
 80060f0:	e054      	b.n	800619c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	089b      	lsrs	r3, r3, #2
 8006100:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00e      	beq.n	8006128 <osThreadNew+0xd4>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b5b      	cmp	r3, #91	; 0x5b
 8006110:	d90a      	bls.n	8006128 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006116:	2b00      	cmp	r3, #0
 8006118:	d006      	beq.n	8006128 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <osThreadNew+0xd4>
        mem = 1;
 8006122:	2301      	movs	r3, #1
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28
 8006126:	e010      	b.n	800614a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10c      	bne.n	800614a <osThreadNew+0xf6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d108      	bne.n	800614a <osThreadNew+0xf6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <osThreadNew+0xf6>
          mem = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
 8006144:	e001      	b.n	800614a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	2b01      	cmp	r3, #1
 800614e:	d110      	bne.n	8006172 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006158:	9202      	str	r2, [sp, #8]
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f001 fb60 	bl	800782c <xTaskCreateStatic>
 800616c:	4603      	mov	r3, r0
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e013      	b.n	800619a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	b29a      	uxth	r2, r3
 800617c:	f107 0314 	add.w	r3, r7, #20
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f001 fbaa 	bl	80078e4 <xTaskCreate>
 8006190:	4603      	mov	r3, r0
 8006192:	2b01      	cmp	r3, #1
 8006194:	d001      	beq.n	800619a <osThreadNew+0x146>
          hTask = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800619a:	697b      	ldr	r3, [r7, #20]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3738      	adds	r7, #56	; 0x38
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	2000065c 	.word	0x2000065c

080061a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b0:	f3ef 8305 	mrs	r3, IPSR
 80061b4:	613b      	str	r3, [r7, #16]
  return(result);
 80061b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10f      	bne.n	80061dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061bc:	f3ef 8310 	mrs	r3, PRIMASK
 80061c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <osDelay+0x34>
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <osDelay+0x58>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d109      	bne.n	80061e4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061d0:	f3ef 8311 	mrs	r3, BASEPRI
 80061d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <osDelay+0x3c>
    stat = osErrorISR;
 80061dc:	f06f 0305 	mvn.w	r3, #5
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e007      	b.n	80061f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fd32 	bl	8007c58 <vTaskDelay>
    }
  }

  return (stat);
 80061f4:	697b      	ldr	r3, [r7, #20]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	2000065c 	.word	0x2000065c

08006204 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006210:	f3ef 8305 	mrs	r3, IPSR
 8006214:	613b      	str	r3, [r7, #16]
  return(result);
 8006216:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006218:	2b00      	cmp	r3, #0
 800621a:	f040 8085 	bne.w	8006328 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621e:	f3ef 8310 	mrs	r3, PRIMASK
 8006222:	60fb      	str	r3, [r7, #12]
  return(result);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d17e      	bne.n	8006328 <osMutexNew+0x124>
 800622a:	4b42      	ldr	r3, [pc, #264]	; (8006334 <osMutexNew+0x130>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d105      	bne.n	800623e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006232:	f3ef 8311 	mrs	r3, BASEPRI
 8006236:	60bb      	str	r3, [r7, #8]
  return(result);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d174      	bne.n	8006328 <osMutexNew+0x124>
    if (attr != NULL) {
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d003      	beq.n	800624c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	623b      	str	r3, [r7, #32]
 800624a:	e001      	b.n	8006250 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <osMutexNew+0x5c>
      rmtx = 1U;
 800625a:	2301      	movs	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]
 800625e:	e001      	b.n	8006264 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d15c      	bne.n	8006328 <osMutexNew+0x124>
      mem = -1;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295
 8006272:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d015      	beq.n	80062a6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <osMutexNew+0x8c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	2b4f      	cmp	r3, #79	; 0x4f
 8006288:	d902      	bls.n	8006290 <osMutexNew+0x8c>
          mem = 1;
 800628a:	2301      	movs	r3, #1
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	e00c      	b.n	80062aa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d108      	bne.n	80062aa <osMutexNew+0xa6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <osMutexNew+0xa6>
            mem = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	e001      	b.n	80062aa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d112      	bne.n	80062d6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	4619      	mov	r1, r3
 80062bc:	2004      	movs	r0, #4
 80062be:	f000 fca9 	bl	8006c14 <xQueueCreateMutexStatic>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24
 80062c4:	e016      	b.n	80062f4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4619      	mov	r1, r3
 80062cc:	2001      	movs	r0, #1
 80062ce:	f000 fca1 	bl	8006c14 <xQueueCreateMutexStatic>
 80062d2:	6278      	str	r0, [r7, #36]	; 0x24
 80062d4:	e00e      	b.n	80062f4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80062e2:	2004      	movs	r0, #4
 80062e4:	f000 fc7e 	bl	8006be4 <xQueueCreateMutex>
 80062e8:	6278      	str	r0, [r7, #36]	; 0x24
 80062ea:	e003      	b.n	80062f4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80062ec:	2001      	movs	r0, #1
 80062ee:	f000 fc79 	bl	8006be4 <xQueueCreateMutex>
 80062f2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <osMutexNew+0x110>
        if (attr != NULL) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <osMutexNew+0x104>
          name = attr->name;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	e001      	b.n	800630c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800630c:	6979      	ldr	r1, [r7, #20]
 800630e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006310:	f001 fa30 	bl	8007774 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <osMutexNew+0x124>
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800632a:	4618      	mov	r0, r3
 800632c:	3728      	adds	r7, #40	; 0x28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2000065c 	.word	0x2000065c

08006338 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006356:	f3ef 8305 	mrs	r3, IPSR
 800635a:	613b      	str	r3, [r7, #16]
  return(result);
 800635c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10f      	bne.n	8006382 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006362:	f3ef 8310 	mrs	r3, PRIMASK
 8006366:	60fb      	str	r3, [r7, #12]
  return(result);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <osMutexAcquire+0x4a>
 800636e:	4b20      	ldr	r3, [pc, #128]	; (80063f0 <osMutexAcquire+0xb8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d109      	bne.n	800638a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006376:	f3ef 8311 	mrs	r3, BASEPRI
 800637a:	60bb      	str	r3, [r7, #8]
  return(result);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006382:	f06f 0305 	mvn.w	r3, #5
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	e02c      	b.n	80063e4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d103      	bne.n	8006398 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006390:	f06f 0303 	mvn.w	r3, #3
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	e025      	b.n	80063e4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d011      	beq.n	80063c2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	69b8      	ldr	r0, [r7, #24]
 80063a2:	f000 fc86 	bl	8006cb2 <xQueueTakeMutexRecursive>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d01b      	beq.n	80063e4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80063b2:	f06f 0301 	mvn.w	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	e014      	b.n	80063e4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80063ba:	f06f 0302 	mvn.w	r3, #2
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e010      	b.n	80063e4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	69b8      	ldr	r0, [r7, #24]
 80063c6:	f000 ff21 	bl	800720c <xQueueSemaphoreTake>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d009      	beq.n	80063e4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80063d6:	f06f 0301 	mvn.w	r3, #1
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e002      	b.n	80063e4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80063de:	f06f 0302 	mvn.w	r3, #2
 80063e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80063e4:	69fb      	ldr	r3, [r7, #28]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3720      	adds	r7, #32
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	2000065c 	.word	0x2000065c

080063f4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800640c:	2300      	movs	r3, #0
 800640e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006410:	f3ef 8305 	mrs	r3, IPSR
 8006414:	613b      	str	r3, [r7, #16]
  return(result);
 8006416:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10f      	bne.n	800643c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800641c:	f3ef 8310 	mrs	r3, PRIMASK
 8006420:	60fb      	str	r3, [r7, #12]
  return(result);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <osMutexRelease+0x48>
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <osMutexRelease+0x9c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d109      	bne.n	8006444 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006430:	f3ef 8311 	mrs	r3, BASEPRI
 8006434:	60bb      	str	r3, [r7, #8]
  return(result);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <osMutexRelease+0x50>
    stat = osErrorISR;
 800643c:	f06f 0305 	mvn.w	r3, #5
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	e01f      	b.n	8006484 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800644a:	f06f 0303 	mvn.w	r3, #3
 800644e:	61fb      	str	r3, [r7, #28]
 8006450:	e018      	b.n	8006484 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d009      	beq.n	800646c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006458:	69b8      	ldr	r0, [r7, #24]
 800645a:	f000 fbf6 	bl	8006c4a <xQueueGiveMutexRecursive>
 800645e:	4603      	mov	r3, r0
 8006460:	2b01      	cmp	r3, #1
 8006462:	d00f      	beq.n	8006484 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006464:	f06f 0302 	mvn.w	r3, #2
 8006468:	61fb      	str	r3, [r7, #28]
 800646a:	e00b      	b.n	8006484 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800646c:	2300      	movs	r3, #0
 800646e:	2200      	movs	r2, #0
 8006470:	2100      	movs	r1, #0
 8006472:	69b8      	ldr	r0, [r7, #24]
 8006474:	f000 fc54 	bl	8006d20 <xQueueGenericSend>
 8006478:	4603      	mov	r3, r0
 800647a:	2b01      	cmp	r3, #1
 800647c:	d002      	beq.n	8006484 <osMutexRelease+0x90>
        stat = osErrorResource;
 800647e:	f06f 0302 	mvn.w	r3, #2
 8006482:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006484:	69fb      	ldr	r3, [r7, #28]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	2000065c 	.word	0x2000065c

08006494 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	; 0x30
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a4:	f3ef 8305 	mrs	r3, IPSR
 80064a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80064aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d16f      	bne.n	8006590 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b0:	f3ef 8310 	mrs	r3, PRIMASK
 80064b4:	617b      	str	r3, [r7, #20]
  return(result);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d169      	bne.n	8006590 <osMessageQueueNew+0xfc>
 80064bc:	4b37      	ldr	r3, [pc, #220]	; (800659c <osMessageQueueNew+0x108>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d105      	bne.n	80064d0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064c4:	f3ef 8311 	mrs	r3, BASEPRI
 80064c8:	613b      	str	r3, [r7, #16]
  return(result);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d15f      	bne.n	8006590 <osMessageQueueNew+0xfc>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d05c      	beq.n	8006590 <osMessageQueueNew+0xfc>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d059      	beq.n	8006590 <osMessageQueueNew+0xfc>
    mem = -1;
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295
 80064e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d029      	beq.n	800653c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d012      	beq.n	8006516 <osMessageQueueNew+0x82>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b4f      	cmp	r3, #79	; 0x4f
 80064f6:	d90e      	bls.n	8006516 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	429a      	cmp	r2, r3
 800650e:	d302      	bcc.n	8006516 <osMessageQueueNew+0x82>
        mem = 1;
 8006510:	2301      	movs	r3, #1
 8006512:	623b      	str	r3, [r7, #32]
 8006514:	e014      	b.n	8006540 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d110      	bne.n	8006540 <osMessageQueueNew+0xac>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10c      	bne.n	8006540 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800652a:	2b00      	cmp	r3, #0
 800652c:	d108      	bne.n	8006540 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <osMessageQueueNew+0xac>
          mem = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	e001      	b.n	8006540 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d10b      	bne.n	800655e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2100      	movs	r1, #0
 8006550:	9100      	str	r1, [sp, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fa53 	bl	8006a00 <xQueueGenericCreateStatic>
 800655a:	6278      	str	r0, [r7, #36]	; 0x24
 800655c:	e008      	b.n	8006570 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d105      	bne.n	8006570 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006564:	2200      	movs	r2, #0
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fac0 	bl	8006aee <xQueueGenericCreate>
 800656e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00c      	beq.n	8006590 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <osMessageQueueNew+0xf0>
        name = attr->name;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	e001      	b.n	8006588 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006588:	69f9      	ldr	r1, [r7, #28]
 800658a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800658c:	f001 f8f2 	bl	8007774 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006592:	4618      	mov	r0, r3
 8006594:	3728      	adds	r7, #40	; 0x28
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	2000065c 	.word	0x2000065c

080065a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b8:	f3ef 8305 	mrs	r3, IPSR
 80065bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80065be:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10f      	bne.n	80065e4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c4:	f3ef 8310 	mrs	r3, PRIMASK
 80065c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d109      	bne.n	80065e4 <osMessageQueuePut+0x44>
 80065d0:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <osMessageQueuePut+0xe0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d12e      	bne.n	8006636 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065d8:	f3ef 8311 	mrs	r3, BASEPRI
 80065dc:	617b      	str	r3, [r7, #20]
  return(result);
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d028      	beq.n	8006636 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <osMessageQueuePut+0x56>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <osMessageQueuePut+0x56>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80065f6:	f06f 0303 	mvn.w	r3, #3
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065fc:	e039      	b.n	8006672 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80065fe:	2300      	movs	r3, #0
 8006600:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006602:	f107 0210 	add.w	r2, r7, #16
 8006606:	2300      	movs	r3, #0
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	6a38      	ldr	r0, [r7, #32]
 800660c:	f000 fc86 	bl	8006f1c <xQueueGenericSendFromISR>
 8006610:	4603      	mov	r3, r0
 8006612:	2b01      	cmp	r3, #1
 8006614:	d003      	beq.n	800661e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006616:	f06f 0302 	mvn.w	r3, #2
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800661c:	e029      	b.n	8006672 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d026      	beq.n	8006672 <osMessageQueuePut+0xd2>
 8006624:	4b17      	ldr	r3, [pc, #92]	; (8006684 <osMessageQueuePut+0xe4>)
 8006626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006634:	e01d      	b.n	8006672 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <osMessageQueuePut+0xa2>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d103      	bne.n	800664a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006642:	f06f 0303 	mvn.w	r3, #3
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
 8006648:	e014      	b.n	8006674 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800664a:	2300      	movs	r3, #0
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	6a38      	ldr	r0, [r7, #32]
 8006652:	f000 fb65 	bl	8006d20 <xQueueGenericSend>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d00b      	beq.n	8006674 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006662:	f06f 0301 	mvn.w	r3, #1
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
 8006668:	e004      	b.n	8006674 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800666a:	f06f 0302 	mvn.w	r3, #2
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
 8006670:	e000      	b.n	8006674 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006672:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006676:	4618      	mov	r0, r3
 8006678:	3728      	adds	r7, #40	; 0x28
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	2000065c 	.word	0x2000065c
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800669e:	f3ef 8305 	mrs	r3, IPSR
 80066a2:	61fb      	str	r3, [r7, #28]
  return(result);
 80066a4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10f      	bne.n	80066ca <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066aa:	f3ef 8310 	mrs	r3, PRIMASK
 80066ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <osMessageQueueGet+0x42>
 80066b6:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <osMessageQueueGet+0xdc>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d12e      	bne.n	800671c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066be:	f3ef 8311 	mrs	r3, BASEPRI
 80066c2:	617b      	str	r3, [r7, #20]
  return(result);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d028      	beq.n	800671c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <osMessageQueueGet+0x54>
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <osMessageQueueGet+0x54>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80066dc:	f06f 0303 	mvn.w	r3, #3
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066e2:	e038      	b.n	8006756 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80066e8:	f107 0310 	add.w	r3, r7, #16
 80066ec:	461a      	mov	r2, r3
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	6a38      	ldr	r0, [r7, #32]
 80066f2:	f000 fe97 	bl	8007424 <xQueueReceiveFromISR>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d003      	beq.n	8006704 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80066fc:	f06f 0302 	mvn.w	r3, #2
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006702:	e028      	b.n	8006756 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d025      	beq.n	8006756 <osMessageQueueGet+0xce>
 800670a:	4b17      	ldr	r3, [pc, #92]	; (8006768 <osMessageQueueGet+0xe0>)
 800670c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800671a:	e01c      	b.n	8006756 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <osMessageQueueGet+0xa0>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006728:	f06f 0303 	mvn.w	r3, #3
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
 800672e:	e013      	b.n	8006758 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	6a38      	ldr	r0, [r7, #32]
 8006736:	f000 fc89 	bl	800704c <xQueueReceive>
 800673a:	4603      	mov	r3, r0
 800673c:	2b01      	cmp	r3, #1
 800673e:	d00b      	beq.n	8006758 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006746:	f06f 0301 	mvn.w	r3, #1
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
 800674c:	e004      	b.n	8006758 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800674e:	f06f 0302 	mvn.w	r3, #2
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
 8006754:	e000      	b.n	8006758 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006756:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800675a:	4618      	mov	r0, r3
 800675c:	3728      	adds	r7, #40	; 0x28
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	2000065c 	.word	0x2000065c
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a06      	ldr	r2, [pc, #24]	; (8006794 <vApplicationGetIdleTaskMemory+0x28>)
 800677c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4a05      	ldr	r2, [pc, #20]	; (8006798 <vApplicationGetIdleTaskMemory+0x2c>)
 8006782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2280      	movs	r2, #128	; 0x80
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr
 8006794:	20000660 	.word	0x20000660
 8006798:	200006bc 	.word	0x200006bc

0800679c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a07      	ldr	r2, [pc, #28]	; (80067c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80067ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4a06      	ldr	r2, [pc, #24]	; (80067cc <vApplicationGetTimerTaskMemory+0x30>)
 80067b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ba:	601a      	str	r2, [r3, #0]
}
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	200008bc 	.word	0x200008bc
 80067cc:	20000918 	.word	0x20000918

080067d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f103 0208 	add.w	r2, r3, #8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f04f 32ff 	mov.w	r2, #4294967295
 80067e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f103 0208 	add.w	r2, r3, #8
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f103 0208 	add.w	r2, r3, #8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr

0800680e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr

08006826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
}
 8006862:	bf00      	nop
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d103      	bne.n	800688c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e00c      	b.n	80068a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3308      	adds	r3, #8
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e002      	b.n	800689a <vListInsert+0x2e>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d2f6      	bcs.n	8006894 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	601a      	str	r2, [r3, #0]
}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6892      	ldr	r2, [r2, #8]
 80068f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6852      	ldr	r2, [r2, #4]
 80068fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d103      	bne.n	8006910 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1e5a      	subs	r2, r3, #1
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
	...

08006930 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800695a:	f002 fbf7 	bl	800914c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	441a      	add	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698a:	3b01      	subs	r3, #1
 800698c:	68f9      	ldr	r1, [r7, #12]
 800698e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	22ff      	movs	r2, #255	; 0xff
 800699e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	22ff      	movs	r2, #255	; 0xff
 80069a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d114      	bne.n	80069da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01a      	beq.n	80069ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3310      	adds	r3, #16
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 fc09 	bl	80081d4 <xTaskRemoveFromEventList>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d012      	beq.n	80069ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <xQueueGenericReset+0xcc>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	e009      	b.n	80069ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3310      	adds	r3, #16
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fef6 	bl	80067d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3324      	adds	r3, #36	; 0x24
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fef1 	bl	80067d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069ee:	f002 fbdd 	bl	80091ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069f2:	2301      	movs	r3, #1
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	e000ed04 	.word	0xe000ed04

08006a00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	; 0x38
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10a      	bne.n	8006a2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a26:	bf00      	nop
 8006a28:	e7fe      	b.n	8006a28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <xQueueGenericCreateStatic+0x52>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <xQueueGenericCreateStatic+0x56>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <xQueueGenericCreateStatic+0x58>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	623b      	str	r3, [r7, #32]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d102      	bne.n	8006a7e <xQueueGenericCreateStatic+0x7e>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <xQueueGenericCreateStatic+0x82>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <xQueueGenericCreateStatic+0x84>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	61fb      	str	r3, [r7, #28]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a9e:	2350      	movs	r3, #80	; 0x50
 8006aa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b50      	cmp	r3, #80	; 0x50
 8006aa6:	d00a      	beq.n	8006abe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	61bb      	str	r3, [r7, #24]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00d      	beq.n	8006ae4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ad0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f843 	bl	8006b6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3730      	adds	r7, #48	; 0x30
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b08a      	sub	sp, #40	; 0x28
 8006af2:	af02      	add	r7, sp, #8
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	4613      	mov	r3, r2
 8006afa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	613b      	str	r3, [r7, #16]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	e004      	b.n	8006b2e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	3350      	adds	r3, #80	; 0x50
 8006b32:	4618      	mov	r0, r3
 8006b34:	f002 fc0a 	bl	800934c <pvPortMalloc>
 8006b38:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00f      	beq.n	8006b60 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	3350      	adds	r3, #80	; 0x50
 8006b44:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b4e:	79fa      	ldrb	r2, [r7, #7]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	4613      	mov	r3, r2
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 f805 	bl	8006b6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b60:	69bb      	ldr	r3, [r7, #24]
	}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	e002      	b.n	8006b8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b98:	2101      	movs	r1, #1
 8006b9a:	69b8      	ldr	r0, [r7, #24]
 8006b9c:	f7ff fec8 	bl	8006930 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	78fa      	ldrb	r2, [r7, #3]
 8006ba4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00e      	beq.n	8006bdc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f8a2 	bl	8006d20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6939      	ldr	r1, [r7, #16]
 8006bfc:	6978      	ldr	r0, [r7, #20]
 8006bfe:	f7ff ff76 	bl	8006aee <xQueueGenericCreate>
 8006c02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff ffd3 	bl	8006bb0 <prvInitialiseMutex>

		return pxNewQueue;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
	}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	6039      	str	r1, [r7, #0]
 8006c1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	2300      	movs	r3, #0
 8006c26:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	6939      	ldr	r1, [r7, #16]
 8006c32:	6978      	ldr	r0, [r7, #20]
 8006c34:	f7ff fee4 	bl	8006a00 <xQueueGenericCreateStatic>
 8006c38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff ffb8 	bl	8006bb0 <prvInitialiseMutex>

		return pxNewQueue;
 8006c40:	68fb      	ldr	r3, [r7, #12]
	}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006c4a:	b590      	push	{r4, r7, lr}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	60fb      	str	r3, [r7, #12]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	685c      	ldr	r4, [r3, #4]
 8006c76:	f001 fc6f 	bl	8008558 <xTaskGetCurrentTaskHandle>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	d111      	bne.n	8006ca4 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	1e5a      	subs	r2, r3, #1
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006c92:	2300      	movs	r3, #0
 8006c94:	2200      	movs	r2, #0
 8006c96:	2100      	movs	r1, #0
 8006c98:	6938      	ldr	r0, [r7, #16]
 8006c9a:	f000 f841 	bl	8006d20 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e001      	b.n	8006ca8 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006ca8:	697b      	ldr	r3, [r7, #20]
	}
 8006caa:	4618      	mov	r0, r3
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd90      	pop	{r4, r7, pc}

08006cb2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006cb2:	b590      	push	{r4, r7, lr}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	60fb      	str	r3, [r7, #12]
}
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	685c      	ldr	r4, [r3, #4]
 8006ce0:	f001 fc3a 	bl	8008558 <xTaskGetCurrentTaskHandle>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	429c      	cmp	r4, r3
 8006ce8:	d107      	bne.n	8006cfa <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	e00c      	b.n	8006d14 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6938      	ldr	r0, [r7, #16]
 8006cfe:	f000 fa85 	bl	800720c <xQueueSemaphoreTake>
 8006d02:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006d14:	697b      	ldr	r3, [r7, #20]
	}
 8006d16:	4618      	mov	r0, r3
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd90      	pop	{r4, r7, pc}
	...

08006d20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08e      	sub	sp, #56	; 0x38
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xQueueGenericSend+0x32>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d103      	bne.n	8006d60 <xQueueGenericSend+0x40>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <xQueueGenericSend+0x44>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <xQueueGenericSend+0x46>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <xQueueGenericSend+0x60>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d7c:	bf00      	nop
 8006d7e:	e7fe      	b.n	8006d7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSend+0x6e>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <xQueueGenericSend+0x72>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueGenericSend+0x74>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <xQueueGenericSend+0x8e>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	623b      	str	r3, [r7, #32]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dae:	f001 fbe1 	bl	8008574 <xTaskGetSchedulerState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <xQueueGenericSend+0x9e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <xQueueGenericSend+0xa2>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xQueueGenericSend+0xa4>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xQueueGenericSend+0xbe>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	61fb      	str	r3, [r7, #28]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dde:	f002 f9b5 	bl	800914c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <xQueueGenericSend+0xd4>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d129      	bne.n	8006e48 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dfa:	f000 fbaa 	bl	8007552 <prvCopyDataToQueue>
 8006dfe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	3324      	adds	r3, #36	; 0x24
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 f9e1 	bl	80081d4 <xTaskRemoveFromEventList>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d013      	beq.n	8006e40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e18:	4b3f      	ldr	r3, [pc, #252]	; (8006f18 <xQueueGenericSend+0x1f8>)
 8006e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	e00a      	b.n	8006e40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e30:	4b39      	ldr	r3, [pc, #228]	; (8006f18 <xQueueGenericSend+0x1f8>)
 8006e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e40:	f002 f9b4 	bl	80091ac <vPortExitCritical>
				return pdPASS;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e063      	b.n	8006f10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e4e:	f002 f9ad 	bl	80091ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e05c      	b.n	8006f10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e5c:	f107 0314 	add.w	r3, r7, #20
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 fa1b 	bl	800829c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e66:	2301      	movs	r3, #1
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e6a:	f002 f99f 	bl	80091ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e6e:	f000 ff8d 	bl	8007d8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e72:	f002 f96b 	bl	800914c <vPortEnterCritical>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e7c:	b25b      	sxtb	r3, r3
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d103      	bne.n	8006e8c <xQueueGenericSend+0x16c>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e92:	b25b      	sxtb	r3, r3
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e98:	d103      	bne.n	8006ea2 <xQueueGenericSend+0x182>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea2:	f002 f983 	bl	80091ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ea6:	1d3a      	adds	r2, r7, #4
 8006ea8:	f107 0314 	add.w	r3, r7, #20
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 fa0a 	bl	80082c8 <xTaskCheckForTimeOut>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d124      	bne.n	8006f04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ebc:	f000 fc41 	bl	8007742 <prvIsQueueFull>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d018      	beq.n	8006ef8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	3310      	adds	r3, #16
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 f930 	bl	8008134 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ed6:	f000 fbcc 	bl	8007672 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006eda:	f000 ff65 	bl	8007da8 <xTaskResumeAll>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f47f af7c 	bne.w	8006dde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <xQueueGenericSend+0x1f8>)
 8006ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	e772      	b.n	8006dde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006efa:	f000 fbba 	bl	8007672 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006efe:	f000 ff53 	bl	8007da8 <xTaskResumeAll>
 8006f02:	e76c      	b.n	8006dde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f06:	f000 fbb4 	bl	8007672 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f0a:	f000 ff4d 	bl	8007da8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f0e:	2300      	movs	r3, #0
		}
	}
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3738      	adds	r7, #56	; 0x38
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08e      	sub	sp, #56	; 0x38
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d103      	bne.n	8006f58 <xQueueGenericSendFromISR+0x3c>
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <xQueueGenericSendFromISR+0x40>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <xQueueGenericSendFromISR+0x42>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	623b      	str	r3, [r7, #32]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d103      	bne.n	8006f86 <xQueueGenericSendFromISR+0x6a>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <xQueueGenericSendFromISR+0x6e>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <xQueueGenericSendFromISR+0x70>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	61fb      	str	r3, [r7, #28]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fa6:	f002 f993 	bl	80092d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006faa:	f3ef 8211 	mrs	r2, BASEPRI
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	61ba      	str	r2, [r7, #24]
 8006fc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <xQueueGenericSendFromISR+0xbc>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d12c      	bne.n	8007032 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe8:	f000 fab3 	bl	8007552 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d112      	bne.n	800701c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	3324      	adds	r3, #36	; 0x24
 8007002:	4618      	mov	r0, r3
 8007004:	f001 f8e6 	bl	80081d4 <xTaskRemoveFromEventList>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00e      	beq.n	800702c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	e007      	b.n	800702c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800701c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007020:	3301      	adds	r3, #1
 8007022:	b2db      	uxtb	r3, r3
 8007024:	b25a      	sxtb	r2, r3
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800702c:	2301      	movs	r3, #1
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007030:	e001      	b.n	8007036 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007032:	2300      	movs	r3, #0
 8007034:	637b      	str	r3, [r7, #52]	; 0x34
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007040:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007044:	4618      	mov	r0, r3
 8007046:	3738      	adds	r7, #56	; 0x38
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08c      	sub	sp, #48	; 0x30
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007058:	2300      	movs	r3, #0
 800705a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <xQueueReceive+0x30>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	623b      	str	r3, [r7, #32]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <xQueueReceive+0x3e>
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <xQueueReceive+0x42>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <xQueueReceive+0x44>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <xQueueReceive+0x5e>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	61fb      	str	r3, [r7, #28]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070aa:	f001 fa63 	bl	8008574 <xTaskGetSchedulerState>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <xQueueReceive+0x6e>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <xQueueReceive+0x72>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <xQueueReceive+0x74>
 80070be:	2300      	movs	r3, #0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10a      	bne.n	80070da <xQueueReceive+0x8e>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	61bb      	str	r3, [r7, #24]
}
 80070d6:	bf00      	nop
 80070d8:	e7fe      	b.n	80070d8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80070da:	f002 f837 	bl	800914c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01f      	beq.n	800712a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ee:	f000 fa9a 	bl	8007626 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	1e5a      	subs	r2, r3, #1
 80070f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00f      	beq.n	8007122 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	3310      	adds	r3, #16
 8007106:	4618      	mov	r0, r3
 8007108:	f001 f864 	bl	80081d4 <xTaskRemoveFromEventList>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d007      	beq.n	8007122 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007112:	4b3d      	ldr	r3, [pc, #244]	; (8007208 <xQueueReceive+0x1bc>)
 8007114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007122:	f002 f843 	bl	80091ac <vPortExitCritical>
				return pdPASS;
 8007126:	2301      	movs	r3, #1
 8007128:	e069      	b.n	80071fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d103      	bne.n	8007138 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007130:	f002 f83c 	bl	80091ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007134:	2300      	movs	r3, #0
 8007136:	e062      	b.n	80071fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800713e:	f107 0310 	add.w	r3, r7, #16
 8007142:	4618      	mov	r0, r3
 8007144:	f001 f8aa 	bl	800829c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007148:	2301      	movs	r3, #1
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800714c:	f002 f82e 	bl	80091ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007150:	f000 fe1c 	bl	8007d8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007154:	f001 fffa 	bl	800914c <vPortEnterCritical>
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800715e:	b25b      	sxtb	r3, r3
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007164:	d103      	bne.n	800716e <xQueueReceive+0x122>
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007174:	b25b      	sxtb	r3, r3
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717a:	d103      	bne.n	8007184 <xQueueReceive+0x138>
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007184:	f002 f812 	bl	80091ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007188:	1d3a      	adds	r2, r7, #4
 800718a:	f107 0310 	add.w	r3, r7, #16
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f001 f899 	bl	80082c8 <xTaskCheckForTimeOut>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d123      	bne.n	80071e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800719c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719e:	f000 faba 	bl	8007716 <prvIsQueueEmpty>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d017      	beq.n	80071d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	3324      	adds	r3, #36	; 0x24
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4611      	mov	r1, r2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 ffbf 	bl	8008134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071b8:	f000 fa5b 	bl	8007672 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071bc:	f000 fdf4 	bl	8007da8 <xTaskResumeAll>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d189      	bne.n	80070da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <xQueueReceive+0x1bc>)
 80071c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	e780      	b.n	80070da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071da:	f000 fa4a 	bl	8007672 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071de:	f000 fde3 	bl	8007da8 <xTaskResumeAll>
 80071e2:	e77a      	b.n	80070da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e6:	f000 fa44 	bl	8007672 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071ea:	f000 fddd 	bl	8007da8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f0:	f000 fa91 	bl	8007716 <prvIsQueueEmpty>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f43f af6f 	beq.w	80070da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3730      	adds	r7, #48	; 0x30
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08e      	sub	sp, #56	; 0x38
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800721e:	2300      	movs	r3, #0
 8007220:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	623b      	str	r3, [r7, #32]
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	61fb      	str	r3, [r7, #28]
}
 8007258:	bf00      	nop
 800725a:	e7fe      	b.n	800725a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800725c:	f001 f98a 	bl	8008574 <xTaskGetSchedulerState>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d102      	bne.n	800726c <xQueueSemaphoreTake+0x60>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <xQueueSemaphoreTake+0x64>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <xQueueSemaphoreTake+0x66>
 8007270:	2300      	movs	r3, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	61bb      	str	r3, [r7, #24]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800728c:	f001 ff5e 	bl	800914c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d024      	beq.n	80072e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	1e5a      	subs	r2, r3, #1
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80072ac:	f001 fae2 	bl	8008874 <pvTaskIncrementMutexHeldCount>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00f      	beq.n	80072de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	3310      	adds	r3, #16
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 ff86 	bl	80081d4 <xTaskRemoveFromEventList>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072ce:	4b54      	ldr	r3, [pc, #336]	; (8007420 <xQueueSemaphoreTake+0x214>)
 80072d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072de:	f001 ff65 	bl	80091ac <vPortExitCritical>
				return pdPASS;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e097      	b.n	8007416 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d111      	bne.n	8007310 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	617b      	str	r3, [r7, #20]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007308:	f001 ff50 	bl	80091ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800730c:	2300      	movs	r3, #0
 800730e:	e082      	b.n	8007416 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007316:	f107 030c 	add.w	r3, r7, #12
 800731a:	4618      	mov	r0, r3
 800731c:	f000 ffbe 	bl	800829c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007320:	2301      	movs	r3, #1
 8007322:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007324:	f001 ff42 	bl	80091ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007328:	f000 fd30 	bl	8007d8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800732c:	f001 ff0e 	bl	800914c <vPortEnterCritical>
 8007330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007336:	b25b      	sxtb	r3, r3
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733c:	d103      	bne.n	8007346 <xQueueSemaphoreTake+0x13a>
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800734c:	b25b      	sxtb	r3, r3
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007352:	d103      	bne.n	800735c <xQueueSemaphoreTake+0x150>
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800735c:	f001 ff26 	bl	80091ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007360:	463a      	mov	r2, r7
 8007362:	f107 030c 	add.w	r3, r7, #12
 8007366:	4611      	mov	r1, r2
 8007368:	4618      	mov	r0, r3
 800736a:	f000 ffad 	bl	80082c8 <xTaskCheckForTimeOut>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d132      	bne.n	80073da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007376:	f000 f9ce 	bl	8007716 <prvIsQueueEmpty>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d026      	beq.n	80073ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d109      	bne.n	800739c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007388:	f001 fee0 	bl	800914c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4618      	mov	r0, r3
 8007392:	f001 f90d 	bl	80085b0 <xTaskPriorityInherit>
 8007396:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007398:	f001 ff08 	bl	80091ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	3324      	adds	r3, #36	; 0x24
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	4611      	mov	r1, r2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fec5 	bl	8008134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ac:	f000 f961 	bl	8007672 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073b0:	f000 fcfa 	bl	8007da8 <xTaskResumeAll>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f47f af68 	bne.w	800728c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80073bc:	4b18      	ldr	r3, [pc, #96]	; (8007420 <xQueueSemaphoreTake+0x214>)
 80073be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	e75e      	b.n	800728c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80073ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d0:	f000 f94f 	bl	8007672 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073d4:	f000 fce8 	bl	8007da8 <xTaskResumeAll>
 80073d8:	e758      	b.n	800728c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80073da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073dc:	f000 f949 	bl	8007672 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073e0:	f000 fce2 	bl	8007da8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073e6:	f000 f996 	bl	8007716 <prvIsQueueEmpty>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f43f af4d 	beq.w	800728c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00d      	beq.n	8007414 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80073f8:	f001 fea8 	bl	800914c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80073fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073fe:	f000 f891 	bl	8007524 <prvGetDisinheritPriorityAfterTimeout>
 8007402:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800740a:	4618      	mov	r0, r3
 800740c:	f001 f9ac 	bl	8008768 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007410:	f001 fecc 	bl	80091ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007414:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007416:	4618      	mov	r0, r3
 8007418:	3738      	adds	r7, #56	; 0x38
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08e      	sub	sp, #56	; 0x38
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	623b      	str	r3, [r7, #32]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d103      	bne.n	800745e <xQueueReceiveFromISR+0x3a>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <xQueueReceiveFromISR+0x3e>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <xQueueReceiveFromISR+0x40>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	61fb      	str	r3, [r7, #28]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800747e:	f001 ff27 	bl	80092d0 <vPortValidateInterruptPriority>
	__asm volatile
 8007482:	f3ef 8211 	mrs	r2, BASEPRI
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	61ba      	str	r2, [r7, #24]
 8007498:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800749a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800749c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d02f      	beq.n	800750a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074b8:	f000 f8b5 	bl	8007626 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	1e5a      	subs	r2, r3, #1
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80074c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d112      	bne.n	80074f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d016      	beq.n	8007504 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	3310      	adds	r3, #16
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fe7a 	bl	80081d4 <xTaskRemoveFromEventList>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00e      	beq.n	8007504 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e007      	b.n	8007504 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80074f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f8:	3301      	adds	r3, #1
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	b25a      	sxtb	r2, r3
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007504:	2301      	movs	r3, #1
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
 8007508:	e001      	b.n	800750e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800750a:	2300      	movs	r3, #0
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f383 8811 	msr	BASEPRI, r3
}
 8007518:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800751c:	4618      	mov	r0, r3
 800751e:	3738      	adds	r7, #56	; 0x38
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d006      	beq.n	8007542 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	e001      	b.n	8007546 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007546:	68fb      	ldr	r3, [r7, #12]
	}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b086      	sub	sp, #24
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10d      	bne.n	800758c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d14d      	bne.n	8007614 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4618      	mov	r0, r3
 800757e:	f001 f885 	bl	800868c <xTaskPriorityDisinherit>
 8007582:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	605a      	str	r2, [r3, #4]
 800758a:	e043      	b.n	8007614 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d119      	bne.n	80075c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6898      	ldr	r0, [r3, #8]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	461a      	mov	r2, r3
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	f002 f93d 	bl	800981c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	441a      	add	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d32b      	bcc.n	8007614 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	609a      	str	r2, [r3, #8]
 80075c4:	e026      	b.n	8007614 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	68d8      	ldr	r0, [r3, #12]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	461a      	mov	r2, r3
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	f002 f923 	bl	800981c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	425b      	negs	r3, r3
 80075e0:	441a      	add	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d207      	bcs.n	8007602 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	425b      	negs	r3, r3
 80075fc:	441a      	add	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d105      	bne.n	8007614 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	3b01      	subs	r3, #1
 8007612:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800761c:	697b      	ldr	r3, [r7, #20]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d018      	beq.n	800766a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68da      	ldr	r2, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	441a      	add	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	429a      	cmp	r2, r3
 8007650:	d303      	bcc.n	800765a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68d9      	ldr	r1, [r3, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	461a      	mov	r2, r3
 8007664:	6838      	ldr	r0, [r7, #0]
 8007666:	f002 f8d9 	bl	800981c <memcpy>
	}
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800767a:	f001 fd67 	bl	800914c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007684:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007686:	e011      	b.n	80076ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d012      	beq.n	80076b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3324      	adds	r3, #36	; 0x24
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fd9d 	bl	80081d4 <xTaskRemoveFromEventList>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076a0:	f000 fe74 	bl	800838c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dce9      	bgt.n	8007688 <prvUnlockQueue+0x16>
 80076b4:	e000      	b.n	80076b8 <prvUnlockQueue+0x46>
					break;
 80076b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	22ff      	movs	r2, #255	; 0xff
 80076bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80076c0:	f001 fd74 	bl	80091ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076c4:	f001 fd42 	bl	800914c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076d0:	e011      	b.n	80076f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d012      	beq.n	8007700 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3310      	adds	r3, #16
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fd78 	bl	80081d4 <xTaskRemoveFromEventList>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076ea:	f000 fe4f 	bl	800838c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dce9      	bgt.n	80076d2 <prvUnlockQueue+0x60>
 80076fe:	e000      	b.n	8007702 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007700:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800770a:	f001 fd4f 	bl	80091ac <vPortExitCritical>
}
 800770e:	bf00      	nop
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800771e:	f001 fd15 	bl	800914c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	2b00      	cmp	r3, #0
 8007728:	d102      	bne.n	8007730 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800772a:	2301      	movs	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]
 800772e:	e001      	b.n	8007734 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007734:	f001 fd3a 	bl	80091ac <vPortExitCritical>

	return xReturn;
 8007738:	68fb      	ldr	r3, [r7, #12]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800774a:	f001 fcff 	bl	800914c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007756:	429a      	cmp	r2, r3
 8007758:	d102      	bne.n	8007760 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800775a:	2301      	movs	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e001      	b.n	8007764 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007764:	f001 fd22 	bl	80091ac <vPortExitCritical>

	return xReturn;
 8007768:	68fb      	ldr	r3, [r7, #12]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	e014      	b.n	80077ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007784:	4a0e      	ldr	r2, [pc, #56]	; (80077c0 <vQueueAddToRegistry+0x4c>)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007790:	490b      	ldr	r1, [pc, #44]	; (80077c0 <vQueueAddToRegistry+0x4c>)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800779a:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <vQueueAddToRegistry+0x4c>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4413      	add	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077a6:	e006      	b.n	80077b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	d9e7      	bls.n	8007784 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr
 80077c0:	20000d18 	.word	0x20000d18

080077c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077d4:	f001 fcba 	bl	800914c <vPortEnterCritical>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077de:	b25b      	sxtb	r3, r3
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d103      	bne.n	80077ee <vQueueWaitForMessageRestricted+0x2a>
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077f4:	b25b      	sxtb	r3, r3
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	d103      	bne.n	8007804 <vQueueWaitForMessageRestricted+0x40>
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007804:	f001 fcd2 	bl	80091ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	3324      	adds	r3, #36	; 0x24
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 fcaf 	bl	800817c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800781e:	6978      	ldr	r0, [r7, #20]
 8007820:	f7ff ff27 	bl	8007672 <prvUnlockQueue>
	}
 8007824:	bf00      	nop
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08e      	sub	sp, #56	; 0x38
 8007830:	af04      	add	r7, sp, #16
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800783a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	623b      	str	r3, [r7, #32]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <xTaskCreateStatic+0x46>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	61fb      	str	r3, [r7, #28]
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007872:	235c      	movs	r3, #92	; 0x5c
 8007874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b5c      	cmp	r3, #92	; 0x5c
 800787a:	d00a      	beq.n	8007892 <xTaskCreateStatic+0x66>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	61bb      	str	r3, [r7, #24]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01e      	beq.n	80078d6 <xTaskCreateStatic+0xaa>
 8007898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01b      	beq.n	80078d6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078b0:	2300      	movs	r3, #0
 80078b2:	9303      	str	r3, [sp, #12]
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	9302      	str	r3, [sp, #8]
 80078b8:	f107 0314 	add.w	r3, r7, #20
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f850 	bl	800796e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078d0:	f000 f8d4 	bl	8007a7c <prvAddNewTaskToReadyList>
 80078d4:	e001      	b.n	80078da <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078da:	697b      	ldr	r3, [r7, #20]
	}
 80078dc:	4618      	mov	r0, r3
 80078de:	3728      	adds	r7, #40	; 0x28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08c      	sub	sp, #48	; 0x30
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 fd27 	bl	800934c <pvPortMalloc>
 80078fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00e      	beq.n	8007924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007906:	205c      	movs	r0, #92	; 0x5c
 8007908:	f001 fd20 	bl	800934c <pvPortMalloc>
 800790c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
 800791a:	e005      	b.n	8007928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800791c:	6978      	ldr	r0, [r7, #20]
 800791e:	f001 fdd9 	bl	80094d4 <vPortFree>
 8007922:	e001      	b.n	8007928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007924:	2300      	movs	r3, #0
 8007926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d017      	beq.n	800795e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007936:	88fa      	ldrh	r2, [r7, #6]
 8007938:	2300      	movs	r3, #0
 800793a:	9303      	str	r3, [sp, #12]
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	9302      	str	r3, [sp, #8]
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 f80e 	bl	800796e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007952:	69f8      	ldr	r0, [r7, #28]
 8007954:	f000 f892 	bl	8007a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007958:	2301      	movs	r3, #1
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	e002      	b.n	8007964 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800795e:	f04f 33ff 	mov.w	r3, #4294967295
 8007962:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007964:	69bb      	ldr	r3, [r7, #24]
	}
 8007966:	4618      	mov	r0, r3
 8007968:	3720      	adds	r7, #32
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b088      	sub	sp, #32
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	607a      	str	r2, [r7, #4]
 800797a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	461a      	mov	r2, r3
 8007986:	21a5      	movs	r1, #165	; 0xa5
 8007988:	f001 ff14 	bl	80097b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007996:	3b01      	subs	r3, #1
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	f023 0307 	bic.w	r3, r3, #7
 80079a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	617b      	str	r3, [r7, #20]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079c6:	2300      	movs	r3, #0
 80079c8:	61fb      	str	r3, [r7, #28]
 80079ca:	e012      	b.n	80079f2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	4413      	add	r3, r2
 80079d2:	7819      	ldrb	r1, [r3, #0]
 80079d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	3334      	adds	r3, #52	; 0x34
 80079dc:	460a      	mov	r2, r1
 80079de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	4413      	add	r3, r2
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d006      	beq.n	80079fa <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	3301      	adds	r3, #1
 80079f0:	61fb      	str	r3, [r7, #28]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	2b0f      	cmp	r3, #15
 80079f6:	d9e9      	bls.n	80079cc <prvInitialiseNewTask+0x5e>
 80079f8:	e000      	b.n	80079fc <prvInitialiseNewTask+0x8e>
		{
			break;
 80079fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a06:	2b37      	cmp	r3, #55	; 0x37
 8007a08:	d901      	bls.n	8007a0e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a0a:	2337      	movs	r3, #55	; 0x37
 8007a0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a18:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	3304      	adds	r3, #4
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe fef2 	bl	800680e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	3318      	adds	r3, #24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe feed 	bl	800680e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	69b8      	ldr	r0, [r7, #24]
 8007a5e:	f001 fa83 	bl	8008f68 <pxPortInitialiseStack>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a74:	bf00      	nop
 8007a76:	3720      	adds	r7, #32
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a84:	f001 fb62 	bl	800914c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a88:	4b2d      	ldr	r3, [pc, #180]	; (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	; (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a92:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a9a:	4a2a      	ldr	r2, [pc, #168]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007aa0:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <prvAddNewTaskToReadyList+0xc4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d110      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007aa8:	f000 fc94 	bl	80083d4 <prvInitialiseTaskLists>
 8007aac:	e00d      	b.n	8007aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aae:	4b26      	ldr	r3, [pc, #152]	; (8007b48 <prvAddNewTaskToReadyList+0xcc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ab6:	4b23      	ldr	r3, [pc, #140]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d802      	bhi.n	8007aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aca:	4b20      	ldr	r3, [pc, #128]	; (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007ad2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	; (8007b4c <prvAddNewTaskToReadyList+0xd0>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae0:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <prvAddNewTaskToReadyList+0xd4>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d903      	bls.n	8007af0 <prvAddNewTaskToReadyList+0x74>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4a18      	ldr	r2, [pc, #96]	; (8007b50 <prvAddNewTaskToReadyList+0xd4>)
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4a15      	ldr	r2, [pc, #84]	; (8007b54 <prvAddNewTaskToReadyList+0xd8>)
 8007afe:	441a      	add	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7fe fe8d 	bl	8006826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b0c:	f001 fb4e 	bl	80091ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <prvAddNewTaskToReadyList+0xcc>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b18:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <prvAddNewTaskToReadyList+0xc8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d207      	bcs.n	8007b36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <prvAddNewTaskToReadyList+0xdc>)
 8007b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	2000122c 	.word	0x2000122c
 8007b44:	20000d58 	.word	0x20000d58
 8007b48:	20001238 	.word	0x20001238
 8007b4c:	20001248 	.word	0x20001248
 8007b50:	20001234 	.word	0x20001234
 8007b54:	20000d5c 	.word	0x20000d5c
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	; 0x28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	617b      	str	r3, [r7, #20]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <vTaskDelayUntil+0x46>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	613b      	str	r3, [r7, #16]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007ba2:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <vTaskDelayUntil+0xf0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <vTaskDelayUntil+0x64>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	60fb      	str	r3, [r7, #12]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007bc0:	f000 f8e4 	bl	8007d8c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007bc4:	4b22      	ldr	r3, [pc, #136]	; (8007c50 <vTaskDelayUntil+0xf4>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6a3a      	ldr	r2, [r7, #32]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d20b      	bcs.n	8007bf6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d211      	bcs.n	8007c0c <vTaskDelayUntil+0xb0>
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d90d      	bls.n	8007c0c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf4:	e00a      	b.n	8007c0c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d303      	bcc.n	8007c08 <vTaskDelayUntil+0xac>
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d901      	bls.n	8007c0c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d006      	beq.n	8007c26 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fe3b 	bl	800889c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007c26:	f000 f8bf 	bl	8007da8 <xTaskResumeAll>
 8007c2a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d107      	bne.n	8007c42 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <vTaskDelayUntil+0xf8>)
 8007c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c42:	bf00      	nop
 8007c44:	3728      	adds	r7, #40	; 0x28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20001254 	.word	0x20001254
 8007c50:	20001230 	.word	0x20001230
 8007c54:	e000ed04 	.word	0xe000ed04

08007c58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d017      	beq.n	8007c9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <vTaskDelay+0x60>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <vTaskDelay+0x30>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60bb      	str	r3, [r7, #8]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c88:	f000 f880 	bl	8007d8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fe04 	bl	800889c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c94:	f000 f888 	bl	8007da8 <xTaskResumeAll>
 8007c98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d107      	bne.n	8007cb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <vTaskDelay+0x64>)
 8007ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cb0:	bf00      	nop
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20001254 	.word	0x20001254
 8007cbc:	e000ed04 	.word	0xe000ed04

08007cc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cce:	463a      	mov	r2, r7
 8007cd0:	1d39      	adds	r1, r7, #4
 8007cd2:	f107 0308 	add.w	r3, r7, #8
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fd48 	bl	800676c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	9202      	str	r2, [sp, #8]
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	2300      	movs	r3, #0
 8007cec:	460a      	mov	r2, r1
 8007cee:	4921      	ldr	r1, [pc, #132]	; (8007d74 <vTaskStartScheduler+0xb4>)
 8007cf0:	4821      	ldr	r0, [pc, #132]	; (8007d78 <vTaskStartScheduler+0xb8>)
 8007cf2:	f7ff fd9b 	bl	800782c <xTaskCreateStatic>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4a20      	ldr	r2, [pc, #128]	; (8007d7c <vTaskStartScheduler+0xbc>)
 8007cfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007cfc:	4b1f      	ldr	r3, [pc, #124]	; (8007d7c <vTaskStartScheduler+0xbc>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d04:	2301      	movs	r3, #1
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	e001      	b.n	8007d0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d102      	bne.n	8007d1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d14:	f000 fe16 	bl	8008944 <xTimerCreateTimerTask>
 8007d18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d116      	bne.n	8007d4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	613b      	str	r3, [r7, #16]
}
 8007d32:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d34:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <vTaskStartScheduler+0xc0>)
 8007d36:	f04f 32ff 	mov.w	r2, #4294967295
 8007d3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <vTaskStartScheduler+0xc4>)
 8007d3e:	2201      	movs	r2, #1
 8007d40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d42:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <vTaskStartScheduler+0xc8>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d48:	f001 f98e 	bl	8009068 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d4c:	e00e      	b.n	8007d6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d54:	d10a      	bne.n	8007d6c <vTaskStartScheduler+0xac>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60fb      	str	r3, [r7, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	e7fe      	b.n	8007d6a <vTaskStartScheduler+0xaa>
}
 8007d6c:	bf00      	nop
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	080098ec 	.word	0x080098ec
 8007d78:	080083a5 	.word	0x080083a5
 8007d7c:	20001250 	.word	0x20001250
 8007d80:	2000124c 	.word	0x2000124c
 8007d84:	20001238 	.word	0x20001238
 8007d88:	20001230 	.word	0x20001230

08007d8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <vTaskSuspendAll+0x18>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	4a03      	ldr	r2, [pc, #12]	; (8007da4 <vTaskSuspendAll+0x18>)
 8007d98:	6013      	str	r3, [r2, #0]
}
 8007d9a:	bf00      	nop
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20001254 	.word	0x20001254

08007da8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007db2:	2300      	movs	r3, #0
 8007db4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007db6:	4b42      	ldr	r3, [pc, #264]	; (8007ec0 <xTaskResumeAll+0x118>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	603b      	str	r3, [r7, #0]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dd4:	f001 f9ba 	bl	800914c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dd8:	4b39      	ldr	r3, [pc, #228]	; (8007ec0 <xTaskResumeAll+0x118>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	4a38      	ldr	r2, [pc, #224]	; (8007ec0 <xTaskResumeAll+0x118>)
 8007de0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007de2:	4b37      	ldr	r3, [pc, #220]	; (8007ec0 <xTaskResumeAll+0x118>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d162      	bne.n	8007eb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dea:	4b36      	ldr	r3, [pc, #216]	; (8007ec4 <xTaskResumeAll+0x11c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d05e      	beq.n	8007eb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007df2:	e02f      	b.n	8007e54 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007df4:	4b34      	ldr	r3, [pc, #208]	; (8007ec8 <xTaskResumeAll+0x120>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3318      	adds	r3, #24
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fd6b 	bl	80068dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fd66 	bl	80068dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4b2d      	ldr	r3, [pc, #180]	; (8007ecc <xTaskResumeAll+0x124>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d903      	bls.n	8007e24 <xTaskResumeAll+0x7c>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	4a2a      	ldr	r2, [pc, #168]	; (8007ecc <xTaskResumeAll+0x124>)
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4a27      	ldr	r2, [pc, #156]	; (8007ed0 <xTaskResumeAll+0x128>)
 8007e32:	441a      	add	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3304      	adds	r3, #4
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	f7fe fcf3 	bl	8006826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e44:	4b23      	ldr	r3, [pc, #140]	; (8007ed4 <xTaskResumeAll+0x12c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d302      	bcc.n	8007e54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e4e:	4b22      	ldr	r3, [pc, #136]	; (8007ed8 <xTaskResumeAll+0x130>)
 8007e50:	2201      	movs	r2, #1
 8007e52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e54:	4b1c      	ldr	r3, [pc, #112]	; (8007ec8 <xTaskResumeAll+0x120>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1cb      	bne.n	8007df4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e62:	f000 fb55 	bl	8008510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e66:	4b1d      	ldr	r3, [pc, #116]	; (8007edc <xTaskResumeAll+0x134>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d010      	beq.n	8007e94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e72:	f000 f845 	bl	8007f00 <xTaskIncrementTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e7c:	4b16      	ldr	r3, [pc, #88]	; (8007ed8 <xTaskResumeAll+0x130>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f1      	bne.n	8007e72 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <xTaskResumeAll+0x134>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e94:	4b10      	ldr	r3, [pc, #64]	; (8007ed8 <xTaskResumeAll+0x130>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d009      	beq.n	8007eb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ea0:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <xTaskResumeAll+0x138>)
 8007ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007eb0:	f001 f97c 	bl	80091ac <vPortExitCritical>

	return xAlreadyYielded;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20001254 	.word	0x20001254
 8007ec4:	2000122c 	.word	0x2000122c
 8007ec8:	200011ec 	.word	0x200011ec
 8007ecc:	20001234 	.word	0x20001234
 8007ed0:	20000d5c 	.word	0x20000d5c
 8007ed4:	20000d58 	.word	0x20000d58
 8007ed8:	20001240 	.word	0x20001240
 8007edc:	2000123c 	.word	0x2000123c
 8007ee0:	e000ed04 	.word	0xe000ed04

08007ee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007eea:	4b04      	ldr	r3, [pc, #16]	; (8007efc <xTaskGetTickCount+0x18>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ef0:	687b      	ldr	r3, [r7, #4]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr
 8007efc:	20001230 	.word	0x20001230

08007f00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f06:	2300      	movs	r3, #0
 8007f08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f0a:	4b51      	ldr	r3, [pc, #324]	; (8008050 <xTaskIncrementTick+0x150>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f040 808e 	bne.w	8008030 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f14:	4b4f      	ldr	r3, [pc, #316]	; (8008054 <xTaskIncrementTick+0x154>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f1c:	4a4d      	ldr	r2, [pc, #308]	; (8008054 <xTaskIncrementTick+0x154>)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d120      	bne.n	8007f6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f28:	4b4b      	ldr	r3, [pc, #300]	; (8008058 <xTaskIncrementTick+0x158>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00a      	beq.n	8007f48 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	603b      	str	r3, [r7, #0]
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <xTaskIncrementTick+0x46>
 8007f48:	4b43      	ldr	r3, [pc, #268]	; (8008058 <xTaskIncrementTick+0x158>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	4b43      	ldr	r3, [pc, #268]	; (800805c <xTaskIncrementTick+0x15c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a41      	ldr	r2, [pc, #260]	; (8008058 <xTaskIncrementTick+0x158>)
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	4a41      	ldr	r2, [pc, #260]	; (800805c <xTaskIncrementTick+0x15c>)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	4b40      	ldr	r3, [pc, #256]	; (8008060 <xTaskIncrementTick+0x160>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	4a3f      	ldr	r2, [pc, #252]	; (8008060 <xTaskIncrementTick+0x160>)
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	f000 fad3 	bl	8008510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f6a:	4b3e      	ldr	r3, [pc, #248]	; (8008064 <xTaskIncrementTick+0x164>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d34e      	bcc.n	8008012 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f74:	4b38      	ldr	r3, [pc, #224]	; (8008058 <xTaskIncrementTick+0x158>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <xTaskIncrementTick+0x82>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e000      	b.n	8007f84 <xTaskIncrementTick+0x84>
 8007f82:	2300      	movs	r3, #0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d004      	beq.n	8007f92 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f88:	4b36      	ldr	r3, [pc, #216]	; (8008064 <xTaskIncrementTick+0x164>)
 8007f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8e:	601a      	str	r2, [r3, #0]
					break;
 8007f90:	e03f      	b.n	8008012 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f92:	4b31      	ldr	r3, [pc, #196]	; (8008058 <xTaskIncrementTick+0x158>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d203      	bcs.n	8007fb2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007faa:	4a2e      	ldr	r2, [pc, #184]	; (8008064 <xTaskIncrementTick+0x164>)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6013      	str	r3, [r2, #0]
						break;
 8007fb0:	e02f      	b.n	8008012 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fe fc90 	bl	80068dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d004      	beq.n	8007fce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	3318      	adds	r3, #24
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fe fc87 	bl	80068dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd2:	4b25      	ldr	r3, [pc, #148]	; (8008068 <xTaskIncrementTick+0x168>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d903      	bls.n	8007fe2 <xTaskIncrementTick+0xe2>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	4a22      	ldr	r2, [pc, #136]	; (8008068 <xTaskIncrementTick+0x168>)
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4a1f      	ldr	r2, [pc, #124]	; (800806c <xTaskIncrementTick+0x16c>)
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7fe fc14 	bl	8006826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008002:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <xTaskIncrementTick+0x170>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	429a      	cmp	r2, r3
 800800a:	d3b3      	bcc.n	8007f74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008010:	e7b0      	b.n	8007f74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008012:	4b17      	ldr	r3, [pc, #92]	; (8008070 <xTaskIncrementTick+0x170>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008018:	4914      	ldr	r1, [pc, #80]	; (800806c <xTaskIncrementTick+0x16c>)
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d907      	bls.n	800803a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800802a:	2301      	movs	r3, #1
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	e004      	b.n	800803a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008030:	4b10      	ldr	r3, [pc, #64]	; (8008074 <xTaskIncrementTick+0x174>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3301      	adds	r3, #1
 8008036:	4a0f      	ldr	r2, [pc, #60]	; (8008074 <xTaskIncrementTick+0x174>)
 8008038:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800803a:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <xTaskIncrementTick+0x178>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008042:	2301      	movs	r3, #1
 8008044:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008046:	697b      	ldr	r3, [r7, #20]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20001254 	.word	0x20001254
 8008054:	20001230 	.word	0x20001230
 8008058:	200011e4 	.word	0x200011e4
 800805c:	200011e8 	.word	0x200011e8
 8008060:	20001244 	.word	0x20001244
 8008064:	2000124c 	.word	0x2000124c
 8008068:	20001234 	.word	0x20001234
 800806c:	20000d5c 	.word	0x20000d5c
 8008070:	20000d58 	.word	0x20000d58
 8008074:	2000123c 	.word	0x2000123c
 8008078:	20001240 	.word	0x20001240

0800807c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008082:	4b27      	ldr	r3, [pc, #156]	; (8008120 <vTaskSwitchContext+0xa4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800808a:	4b26      	ldr	r3, [pc, #152]	; (8008124 <vTaskSwitchContext+0xa8>)
 800808c:	2201      	movs	r2, #1
 800808e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008090:	e041      	b.n	8008116 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008092:	4b24      	ldr	r3, [pc, #144]	; (8008124 <vTaskSwitchContext+0xa8>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008098:	4b23      	ldr	r3, [pc, #140]	; (8008128 <vTaskSwitchContext+0xac>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	e010      	b.n	80080c2 <vTaskSwitchContext+0x46>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <vTaskSwitchContext+0x40>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	607b      	str	r3, [r7, #4]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <vTaskSwitchContext+0x3e>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3b01      	subs	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	491a      	ldr	r1, [pc, #104]	; (800812c <vTaskSwitchContext+0xb0>)
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0e4      	beq.n	80080a0 <vTaskSwitchContext+0x24>
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4a12      	ldr	r2, [pc, #72]	; (800812c <vTaskSwitchContext+0xb0>)
 80080e2:	4413      	add	r3, r2
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	605a      	str	r2, [r3, #4]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	3308      	adds	r3, #8
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d104      	bne.n	8008106 <vTaskSwitchContext+0x8a>
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	605a      	str	r2, [r3, #4]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	4a08      	ldr	r2, [pc, #32]	; (8008130 <vTaskSwitchContext+0xb4>)
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	4a05      	ldr	r2, [pc, #20]	; (8008128 <vTaskSwitchContext+0xac>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6013      	str	r3, [r2, #0]
}
 8008116:	bf00      	nop
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	bc80      	pop	{r7}
 800811e:	4770      	bx	lr
 8008120:	20001254 	.word	0x20001254
 8008124:	20001240 	.word	0x20001240
 8008128:	20001234 	.word	0x20001234
 800812c:	20000d5c 	.word	0x20000d5c
 8008130:	20000d58 	.word	0x20000d58

08008134 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	60fb      	str	r3, [r7, #12]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800815a:	4b07      	ldr	r3, [pc, #28]	; (8008178 <vTaskPlaceOnEventList+0x44>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3318      	adds	r3, #24
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fe fb82 	bl	800686c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008168:	2101      	movs	r1, #1
 800816a:	6838      	ldr	r0, [r7, #0]
 800816c:	f000 fb96 	bl	800889c <prvAddCurrentTaskToDelayedList>
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000d58 	.word	0x20000d58

0800817c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	617b      	str	r3, [r7, #20]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3318      	adds	r3, #24
 80081aa:	4619      	mov	r1, r3
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f7fe fb3a 	bl	8006826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80081b8:	f04f 33ff 	mov.w	r3, #4294967295
 80081bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	68b8      	ldr	r0, [r7, #8]
 80081c2:	f000 fb6b 	bl	800889c <prvAddCurrentTaskToDelayedList>
	}
 80081c6:	bf00      	nop
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000d58 	.word	0x20000d58

080081d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	60fb      	str	r3, [r7, #12]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3318      	adds	r3, #24
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fb69 	bl	80068dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800820a:	4b1e      	ldr	r3, [pc, #120]	; (8008284 <xTaskRemoveFromEventList+0xb0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d11d      	bne.n	800824e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	3304      	adds	r3, #4
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fb60 	bl	80068dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008220:	4b19      	ldr	r3, [pc, #100]	; (8008288 <xTaskRemoveFromEventList+0xb4>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d903      	bls.n	8008230 <xTaskRemoveFromEventList+0x5c>
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	4a16      	ldr	r2, [pc, #88]	; (8008288 <xTaskRemoveFromEventList+0xb4>)
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008234:	4613      	mov	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4a13      	ldr	r2, [pc, #76]	; (800828c <xTaskRemoveFromEventList+0xb8>)
 800823e:	441a      	add	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	3304      	adds	r3, #4
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f7fe faed 	bl	8006826 <vListInsertEnd>
 800824c:	e005      	b.n	800825a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	3318      	adds	r3, #24
 8008252:	4619      	mov	r1, r3
 8008254:	480e      	ldr	r0, [pc, #56]	; (8008290 <xTaskRemoveFromEventList+0xbc>)
 8008256:	f7fe fae6 	bl	8006826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825e:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <xTaskRemoveFromEventList+0xc0>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	429a      	cmp	r2, r3
 8008266:	d905      	bls.n	8008274 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008268:	2301      	movs	r3, #1
 800826a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <xTaskRemoveFromEventList+0xc4>)
 800826e:	2201      	movs	r2, #1
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	e001      	b.n	8008278 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008278:	697b      	ldr	r3, [r7, #20]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20001254 	.word	0x20001254
 8008288:	20001234 	.word	0x20001234
 800828c:	20000d5c 	.word	0x20000d5c
 8008290:	200011ec 	.word	0x200011ec
 8008294:	20000d58 	.word	0x20000d58
 8008298:	20001240 	.word	0x20001240

0800829c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80082a4:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <vTaskInternalSetTimeOutState+0x24>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <vTaskInternalSetTimeOutState+0x28>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	605a      	str	r2, [r3, #4]
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20001244 	.word	0x20001244
 80082c4:	20001230 	.word	0x20001230

080082c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10a      	bne.n	80082ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	613b      	str	r3, [r7, #16]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	60fb      	str	r3, [r7, #12]
}
 8008306:	bf00      	nop
 8008308:	e7fe      	b.n	8008308 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800830a:	f000 ff1f 	bl	800914c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800830e:	4b1d      	ldr	r3, [pc, #116]	; (8008384 <xTaskCheckForTimeOut+0xbc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	69ba      	ldr	r2, [r7, #24]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008326:	d102      	bne.n	800832e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	e023      	b.n	8008376 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b15      	ldr	r3, [pc, #84]	; (8008388 <xTaskCheckForTimeOut+0xc0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d007      	beq.n	800834a <xTaskCheckForTimeOut+0x82>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	429a      	cmp	r2, r3
 8008342:	d302      	bcc.n	800834a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008344:	2301      	movs	r3, #1
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	e015      	b.n	8008376 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	429a      	cmp	r2, r3
 8008352:	d20b      	bcs.n	800836c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	1ad2      	subs	r2, r2, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff ff9b 	bl	800829c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	61fb      	str	r3, [r7, #28]
 800836a:	e004      	b.n	8008376 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008372:	2301      	movs	r3, #1
 8008374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008376:	f000 ff19 	bl	80091ac <vPortExitCritical>

	return xReturn;
 800837a:	69fb      	ldr	r3, [r7, #28]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3720      	adds	r7, #32
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20001230 	.word	0x20001230
 8008388:	20001244 	.word	0x20001244

0800838c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008390:	4b03      	ldr	r3, [pc, #12]	; (80083a0 <vTaskMissedYield+0x14>)
 8008392:	2201      	movs	r2, #1
 8008394:	601a      	str	r2, [r3, #0]
}
 8008396:	bf00      	nop
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20001240 	.word	0x20001240

080083a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80083ac:	f000 f852 	bl	8008454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80083b0:	4b06      	ldr	r3, [pc, #24]	; (80083cc <prvIdleTask+0x28>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d9f9      	bls.n	80083ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80083b8:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <prvIdleTask+0x2c>)
 80083ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083c8:	e7f0      	b.n	80083ac <prvIdleTask+0x8>
 80083ca:	bf00      	nop
 80083cc:	20000d5c 	.word	0x20000d5c
 80083d0:	e000ed04 	.word	0xe000ed04

080083d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083da:	2300      	movs	r3, #0
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	e00c      	b.n	80083fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4a12      	ldr	r2, [pc, #72]	; (8008434 <prvInitialiseTaskLists+0x60>)
 80083ec:	4413      	add	r3, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fe f9ee 	bl	80067d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3301      	adds	r3, #1
 80083f8:	607b      	str	r3, [r7, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b37      	cmp	r3, #55	; 0x37
 80083fe:	d9ef      	bls.n	80083e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008400:	480d      	ldr	r0, [pc, #52]	; (8008438 <prvInitialiseTaskLists+0x64>)
 8008402:	f7fe f9e5 	bl	80067d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008406:	480d      	ldr	r0, [pc, #52]	; (800843c <prvInitialiseTaskLists+0x68>)
 8008408:	f7fe f9e2 	bl	80067d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800840c:	480c      	ldr	r0, [pc, #48]	; (8008440 <prvInitialiseTaskLists+0x6c>)
 800840e:	f7fe f9df 	bl	80067d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008412:	480c      	ldr	r0, [pc, #48]	; (8008444 <prvInitialiseTaskLists+0x70>)
 8008414:	f7fe f9dc 	bl	80067d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008418:	480b      	ldr	r0, [pc, #44]	; (8008448 <prvInitialiseTaskLists+0x74>)
 800841a:	f7fe f9d9 	bl	80067d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800841e:	4b0b      	ldr	r3, [pc, #44]	; (800844c <prvInitialiseTaskLists+0x78>)
 8008420:	4a05      	ldr	r2, [pc, #20]	; (8008438 <prvInitialiseTaskLists+0x64>)
 8008422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <prvInitialiseTaskLists+0x7c>)
 8008426:	4a05      	ldr	r2, [pc, #20]	; (800843c <prvInitialiseTaskLists+0x68>)
 8008428:	601a      	str	r2, [r3, #0]
}
 800842a:	bf00      	nop
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000d5c 	.word	0x20000d5c
 8008438:	200011bc 	.word	0x200011bc
 800843c:	200011d0 	.word	0x200011d0
 8008440:	200011ec 	.word	0x200011ec
 8008444:	20001200 	.word	0x20001200
 8008448:	20001218 	.word	0x20001218
 800844c:	200011e4 	.word	0x200011e4
 8008450:	200011e8 	.word	0x200011e8

08008454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800845a:	e019      	b.n	8008490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800845c:	f000 fe76 	bl	800914c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008460:	4b10      	ldr	r3, [pc, #64]	; (80084a4 <prvCheckTasksWaitingTermination+0x50>)
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe fa35 	bl	80068dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <prvCheckTasksWaitingTermination+0x54>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3b01      	subs	r3, #1
 8008478:	4a0b      	ldr	r2, [pc, #44]	; (80084a8 <prvCheckTasksWaitingTermination+0x54>)
 800847a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800847c:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <prvCheckTasksWaitingTermination+0x58>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3b01      	subs	r3, #1
 8008482:	4a0a      	ldr	r2, [pc, #40]	; (80084ac <prvCheckTasksWaitingTermination+0x58>)
 8008484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008486:	f000 fe91 	bl	80091ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f810 	bl	80084b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008490:	4b06      	ldr	r3, [pc, #24]	; (80084ac <prvCheckTasksWaitingTermination+0x58>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e1      	bne.n	800845c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20001200 	.word	0x20001200
 80084a8:	2000122c 	.word	0x2000122c
 80084ac:	20001214 	.word	0x20001214

080084b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d108      	bne.n	80084d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 f804 	bl	80094d4 <vPortFree>
				vPortFree( pxTCB );
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 f801 	bl	80094d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084d2:	e018      	b.n	8008506 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d103      	bne.n	80084e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fff8 	bl	80094d4 <vPortFree>
	}
 80084e4:	e00f      	b.n	8008506 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d00a      	beq.n	8008506 <prvDeleteTCB+0x56>
	__asm volatile
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	60fb      	str	r3, [r7, #12]
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <prvDeleteTCB+0x54>
	}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
	...

08008510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008516:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <prvResetNextTaskUnblockTime+0x40>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <prvResetNextTaskUnblockTime+0x14>
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <prvResetNextTaskUnblockTime+0x16>
 8008524:	2300      	movs	r3, #0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800852a:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <prvResetNextTaskUnblockTime+0x44>)
 800852c:	f04f 32ff 	mov.w	r2, #4294967295
 8008530:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008532:	e008      	b.n	8008546 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008534:	4b06      	ldr	r3, [pc, #24]	; (8008550 <prvResetNextTaskUnblockTime+0x40>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	4a04      	ldr	r2, [pc, #16]	; (8008554 <prvResetNextTaskUnblockTime+0x44>)
 8008544:	6013      	str	r3, [r2, #0]
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr
 8008550:	200011e4 	.word	0x200011e4
 8008554:	2000124c 	.word	0x2000124c

08008558 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800855e:	4b04      	ldr	r3, [pc, #16]	; (8008570 <xTaskGetCurrentTaskHandle+0x18>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008564:	687b      	ldr	r3, [r7, #4]
	}
 8008566:	4618      	mov	r0, r3
 8008568:	370c      	adds	r7, #12
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr
 8008570:	20000d58 	.word	0x20000d58

08008574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800857a:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <xTaskGetSchedulerState+0x34>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008582:	2301      	movs	r3, #1
 8008584:	607b      	str	r3, [r7, #4]
 8008586:	e008      	b.n	800859a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008588:	4b08      	ldr	r3, [pc, #32]	; (80085ac <xTaskGetSchedulerState+0x38>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008590:	2302      	movs	r3, #2
 8008592:	607b      	str	r3, [r7, #4]
 8008594:	e001      	b.n	800859a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008596:	2300      	movs	r3, #0
 8008598:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800859a:	687b      	ldr	r3, [r7, #4]
	}
 800859c:	4618      	mov	r0, r3
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	20001238 	.word	0x20001238
 80085ac:	20001254 	.word	0x20001254

080085b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d056      	beq.n	8008674 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ca:	4b2d      	ldr	r3, [pc, #180]	; (8008680 <xTaskPriorityInherit+0xd0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d246      	bcs.n	8008662 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	db06      	blt.n	80085ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085dc:	4b28      	ldr	r3, [pc, #160]	; (8008680 <xTaskPriorityInherit+0xd0>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6959      	ldr	r1, [r3, #20]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4a22      	ldr	r2, [pc, #136]	; (8008684 <xTaskPriorityInherit+0xd4>)
 80085fc:	4413      	add	r3, r2
 80085fe:	4299      	cmp	r1, r3
 8008600:	d101      	bne.n	8008606 <xTaskPriorityInherit+0x56>
 8008602:	2301      	movs	r3, #1
 8008604:	e000      	b.n	8008608 <xTaskPriorityInherit+0x58>
 8008606:	2300      	movs	r3, #0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d022      	beq.n	8008652 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3304      	adds	r3, #4
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe f963 	bl	80068dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008616:	4b1a      	ldr	r3, [pc, #104]	; (8008680 <xTaskPriorityInherit+0xd0>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008624:	4b18      	ldr	r3, [pc, #96]	; (8008688 <xTaskPriorityInherit+0xd8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d903      	bls.n	8008634 <xTaskPriorityInherit+0x84>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	4a15      	ldr	r2, [pc, #84]	; (8008688 <xTaskPriorityInherit+0xd8>)
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4a10      	ldr	r2, [pc, #64]	; (8008684 <xTaskPriorityInherit+0xd4>)
 8008642:	441a      	add	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f7fe f8eb 	bl	8006826 <vListInsertEnd>
 8008650:	e004      	b.n	800865c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008652:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <xTaskPriorityInherit+0xd0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800865c:	2301      	movs	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	e008      	b.n	8008674 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <xTaskPriorityInherit+0xd0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	429a      	cmp	r2, r3
 800866e:	d201      	bcs.n	8008674 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008670:	2301      	movs	r3, #1
 8008672:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008674:	68fb      	ldr	r3, [r7, #12]
	}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000d58 	.word	0x20000d58
 8008684:	20000d5c 	.word	0x20000d5c
 8008688:	20001234 	.word	0x20001234

0800868c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d056      	beq.n	8008750 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086a2:	4b2e      	ldr	r3, [pc, #184]	; (800875c <xTaskPriorityDisinherit+0xd0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d00a      	beq.n	80086c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60fb      	str	r3, [r7, #12]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	60bb      	str	r3, [r7, #8]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e4:	1e5a      	subs	r2, r3, #1
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d02c      	beq.n	8008750 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d128      	bne.n	8008750 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	3304      	adds	r3, #4
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe f8ea 	bl	80068dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008720:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <xTaskPriorityDisinherit+0xd4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d903      	bls.n	8008730 <xTaskPriorityDisinherit+0xa4>
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	4a0c      	ldr	r2, [pc, #48]	; (8008760 <xTaskPriorityDisinherit+0xd4>)
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4a09      	ldr	r2, [pc, #36]	; (8008764 <xTaskPriorityDisinherit+0xd8>)
 800873e:	441a      	add	r2, r3
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	3304      	adds	r3, #4
 8008744:	4619      	mov	r1, r3
 8008746:	4610      	mov	r0, r2
 8008748:	f7fe f86d 	bl	8006826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800874c:	2301      	movs	r3, #1
 800874e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008750:	697b      	ldr	r3, [r7, #20]
	}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	20000d58 	.word	0x20000d58
 8008760:	20001234 	.word	0x20001234
 8008764:	20000d5c 	.word	0x20000d5c

08008768 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008776:	2301      	movs	r3, #1
 8008778:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d06f      	beq.n	8008860 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	60fb      	str	r3, [r7, #12]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d902      	bls.n	80087ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	61fb      	str	r3, [r7, #28]
 80087ac:	e002      	b.n	80087b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d050      	beq.n	8008860 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d14b      	bne.n	8008860 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80087c8:	4b27      	ldr	r3, [pc, #156]	; (8008868 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d10a      	bne.n	80087e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	60bb      	str	r3, [r7, #8]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	db04      	blt.n	8008806 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	6959      	ldr	r1, [r3, #20]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4a15      	ldr	r2, [pc, #84]	; (800886c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008816:	4413      	add	r3, r2
 8008818:	4299      	cmp	r1, r3
 800881a:	d101      	bne.n	8008820 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800881c:	2301      	movs	r3, #1
 800881e:	e000      	b.n	8008822 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008820:	2300      	movs	r3, #0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d01c      	beq.n	8008860 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	3304      	adds	r3, #4
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe f856 	bl	80068dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008834:	4b0e      	ldr	r3, [pc, #56]	; (8008870 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	429a      	cmp	r2, r3
 800883a:	d903      	bls.n	8008844 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4a0b      	ldr	r2, [pc, #44]	; (8008870 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008848:	4613      	mov	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4a06      	ldr	r2, [pc, #24]	; (800886c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008852:	441a      	add	r2, r3
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	3304      	adds	r3, #4
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f7fd ffe3 	bl	8006826 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008860:	bf00      	nop
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000d58 	.word	0x20000d58
 800886c:	20000d5c 	.word	0x20000d5c
 8008870:	20001234 	.word	0x20001234

08008874 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008878:	4b07      	ldr	r3, [pc, #28]	; (8008898 <pvTaskIncrementMutexHeldCount+0x24>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008880:	4b05      	ldr	r3, [pc, #20]	; (8008898 <pvTaskIncrementMutexHeldCount+0x24>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008886:	3201      	adds	r2, #1
 8008888:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800888a:	4b03      	ldr	r3, [pc, #12]	; (8008898 <pvTaskIncrementMutexHeldCount+0x24>)
 800888c:	681b      	ldr	r3, [r3, #0]
	}
 800888e:	4618      	mov	r0, r3
 8008890:	46bd      	mov	sp, r7
 8008892:	bc80      	pop	{r7}
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	20000d58 	.word	0x20000d58

0800889c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088a6:	4b21      	ldr	r3, [pc, #132]	; (800892c <prvAddCurrentTaskToDelayedList+0x90>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088ac:	4b20      	ldr	r3, [pc, #128]	; (8008930 <prvAddCurrentTaskToDelayedList+0x94>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe f812 	bl	80068dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d10a      	bne.n	80088d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <prvAddCurrentTaskToDelayedList+0x94>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3304      	adds	r3, #4
 80088cc:	4619      	mov	r1, r3
 80088ce:	4819      	ldr	r0, [pc, #100]	; (8008934 <prvAddCurrentTaskToDelayedList+0x98>)
 80088d0:	f7fd ffa9 	bl	8006826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088d4:	e026      	b.n	8008924 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088de:	4b14      	ldr	r3, [pc, #80]	; (8008930 <prvAddCurrentTaskToDelayedList+0x94>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d209      	bcs.n	8008902 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ee:	4b12      	ldr	r3, [pc, #72]	; (8008938 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <prvAddCurrentTaskToDelayedList+0x94>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3304      	adds	r3, #4
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f7fd ffb6 	bl	800686c <vListInsert>
}
 8008900:	e010      	b.n	8008924 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008902:	4b0e      	ldr	r3, [pc, #56]	; (800893c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <prvAddCurrentTaskToDelayedList+0x94>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3304      	adds	r3, #4
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f7fd ffac 	bl	800686c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008914:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	429a      	cmp	r2, r3
 800891c:	d202      	bcs.n	8008924 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800891e:	4a08      	ldr	r2, [pc, #32]	; (8008940 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6013      	str	r3, [r2, #0]
}
 8008924:	bf00      	nop
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20001230 	.word	0x20001230
 8008930:	20000d58 	.word	0x20000d58
 8008934:	20001218 	.word	0x20001218
 8008938:	200011e8 	.word	0x200011e8
 800893c:	200011e4 	.word	0x200011e4
 8008940:	2000124c 	.word	0x2000124c

08008944 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800894a:	2300      	movs	r3, #0
 800894c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800894e:	f000 facb 	bl	8008ee8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008952:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <xTimerCreateTimerTask+0x80>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d021      	beq.n	800899e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008962:	1d3a      	adds	r2, r7, #4
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	f107 030c 	add.w	r3, r7, #12
 800896c:	4618      	mov	r0, r3
 800896e:	f7fd ff15 	bl	800679c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	9202      	str	r2, [sp, #8]
 800897a:	9301      	str	r3, [sp, #4]
 800897c:	2302      	movs	r3, #2
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	2300      	movs	r3, #0
 8008982:	460a      	mov	r2, r1
 8008984:	4910      	ldr	r1, [pc, #64]	; (80089c8 <xTimerCreateTimerTask+0x84>)
 8008986:	4811      	ldr	r0, [pc, #68]	; (80089cc <xTimerCreateTimerTask+0x88>)
 8008988:	f7fe ff50 	bl	800782c <xTaskCreateStatic>
 800898c:	4603      	mov	r3, r0
 800898e:	4a10      	ldr	r2, [pc, #64]	; (80089d0 <xTimerCreateTimerTask+0x8c>)
 8008990:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008992:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <xTimerCreateTimerTask+0x8c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800899a:	2301      	movs	r3, #1
 800899c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	613b      	str	r3, [r7, #16]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80089ba:	697b      	ldr	r3, [r7, #20]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20001288 	.word	0x20001288
 80089c8:	080098f4 	.word	0x080098f4
 80089cc:	08008af1 	.word	0x08008af1
 80089d0:	2000128c 	.word	0x2000128c

080089d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08a      	sub	sp, #40	; 0x28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <xTimerGenericCommand+0x2e>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	623b      	str	r3, [r7, #32]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a02:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <xTimerGenericCommand+0x98>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d02a      	beq.n	8008a60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b05      	cmp	r3, #5
 8008a1a:	dc18      	bgt.n	8008a4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a1c:	f7ff fdaa 	bl	8008574 <xTaskGetSchedulerState>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d109      	bne.n	8008a3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a26:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <xTimerGenericCommand+0x98>)
 8008a28:	6818      	ldr	r0, [r3, #0]
 8008a2a:	f107 0110 	add.w	r1, r7, #16
 8008a2e:	2300      	movs	r3, #0
 8008a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a32:	f7fe f975 	bl	8006d20 <xQueueGenericSend>
 8008a36:	6278      	str	r0, [r7, #36]	; 0x24
 8008a38:	e012      	b.n	8008a60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <xTimerGenericCommand+0x98>)
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f107 0110 	add.w	r1, r7, #16
 8008a42:	2300      	movs	r3, #0
 8008a44:	2200      	movs	r2, #0
 8008a46:	f7fe f96b 	bl	8006d20 <xQueueGenericSend>
 8008a4a:	6278      	str	r0, [r7, #36]	; 0x24
 8008a4c:	e008      	b.n	8008a60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a4e:	4b07      	ldr	r3, [pc, #28]	; (8008a6c <xTimerGenericCommand+0x98>)
 8008a50:	6818      	ldr	r0, [r3, #0]
 8008a52:	f107 0110 	add.w	r1, r7, #16
 8008a56:	2300      	movs	r3, #0
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	f7fe fa5f 	bl	8006f1c <xQueueGenericSendFromISR>
 8008a5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3728      	adds	r7, #40	; 0x28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20001288 	.word	0x20001288

08008a70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a7a:	4b1c      	ldr	r3, [pc, #112]	; (8008aec <prvProcessExpiredTimer+0x7c>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fd ff27 	bl	80068dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d122      	bne.n	8008adc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	18d1      	adds	r1, r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	6978      	ldr	r0, [r7, #20]
 8008aa4:	f000 f8c8 	bl	8008c38 <prvInsertTimerInActiveList>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d016      	beq.n	8008adc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	6978      	ldr	r0, [r7, #20]
 8008aba:	f7ff ff8b 	bl	80089d4 <xTimerGenericCommand>
 8008abe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60fb      	str	r3, [r7, #12]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae0:	6978      	ldr	r0, [r7, #20]
 8008ae2:	4798      	blx	r3
}
 8008ae4:	bf00      	nop
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20001280 	.word	0x20001280

08008af0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008af8:	f107 0308 	add.w	r3, r7, #8
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f857 	bl	8008bb0 <prvGetNextExpireTime>
 8008b02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4619      	mov	r1, r3
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f803 	bl	8008b14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b0e:	f000 f8d5 	bl	8008cbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b12:	e7f1      	b.n	8008af8 <prvTimerTask+0x8>

08008b14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b1e:	f7ff f935 	bl	8007d8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b22:	f107 0308 	add.w	r3, r7, #8
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 f866 	bl	8008bf8 <prvSampleTimeNow>
 8008b2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d130      	bne.n	8008b96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10a      	bne.n	8008b50 <prvProcessTimerOrBlockTask+0x3c>
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d806      	bhi.n	8008b50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b42:	f7ff f931 	bl	8007da8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ff91 	bl	8008a70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b4e:	e024      	b.n	8008b9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d008      	beq.n	8008b68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b56:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <prvProcessTimerOrBlockTask+0x90>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bf0c      	ite	eq
 8008b60:	2301      	moveq	r3, #1
 8008b62:	2300      	movne	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b68:	4b0f      	ldr	r3, [pc, #60]	; (8008ba8 <prvProcessTimerOrBlockTask+0x94>)
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	f7fe fe25 	bl	80077c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b7a:	f7ff f915 	bl	8007da8 <xTaskResumeAll>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b84:	4b09      	ldr	r3, [pc, #36]	; (8008bac <prvProcessTimerOrBlockTask+0x98>)
 8008b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	f3bf 8f6f 	isb	sy
}
 8008b94:	e001      	b.n	8008b9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b96:	f7ff f907 	bl	8007da8 <xTaskResumeAll>
}
 8008b9a:	bf00      	nop
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20001284 	.word	0x20001284
 8008ba8:	20001288 	.word	0x20001288
 8008bac:	e000ed04 	.word	0xe000ed04

08008bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bb8:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <prvGetNextExpireTime+0x44>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bf0c      	ite	eq
 8008bc2:	2301      	moveq	r3, #1
 8008bc4:	2300      	movne	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d105      	bne.n	8008be2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bd6:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <prvGetNextExpireTime+0x44>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	e001      	b.n	8008be6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008be6:	68fb      	ldr	r3, [r7, #12]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	20001280 	.word	0x20001280

08008bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c00:	f7ff f970 	bl	8007ee4 <xTaskGetTickCount>
 8008c04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <prvSampleTimeNow+0x3c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d205      	bcs.n	8008c1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c10:	f000 f908 	bl	8008e24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	e002      	b.n	8008c22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c22:	4a04      	ldr	r2, [pc, #16]	; (8008c34 <prvSampleTimeNow+0x3c>)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c28:	68fb      	ldr	r3, [r7, #12]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20001290 	.word	0x20001290

08008c38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d812      	bhi.n	8008c84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	1ad2      	subs	r2, r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d302      	bcc.n	8008c72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	e01b      	b.n	8008caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c72:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <prvInsertTimerInActiveList+0x7c>)
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f7fd fdf5 	bl	800686c <vListInsert>
 8008c82:	e012      	b.n	8008caa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d206      	bcs.n	8008c9a <prvInsertTimerInActiveList+0x62>
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d302      	bcc.n	8008c9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c94:	2301      	movs	r3, #1
 8008c96:	617b      	str	r3, [r7, #20]
 8008c98:	e007      	b.n	8008caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c9a:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <prvInsertTimerInActiveList+0x80>)
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f7fd fde1 	bl	800686c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008caa:	697b      	ldr	r3, [r7, #20]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20001284 	.word	0x20001284
 8008cb8:	20001280 	.word	0x20001280

08008cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08e      	sub	sp, #56	; 0x38
 8008cc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cc2:	e09d      	b.n	8008e00 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	da18      	bge.n	8008cfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008cca:	1d3b      	adds	r3, r7, #4
 8008ccc:	3304      	adds	r3, #4
 8008cce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	61fb      	str	r3, [r7, #28]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf2:	6850      	ldr	r0, [r2, #4]
 8008cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf6:	6892      	ldr	r2, [r2, #8]
 8008cf8:	4611      	mov	r1, r2
 8008cfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	db7e      	blt.n	8008e00 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d004      	beq.n	8008d18 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	3304      	adds	r3, #4
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd fde2 	bl	80068dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d18:	463b      	mov	r3, r7
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff ff6c 	bl	8008bf8 <prvSampleTimeNow>
 8008d20:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	d86a      	bhi.n	8008dfe <prvProcessReceivedCommands+0x142>
 8008d28:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <prvProcessReceivedCommands+0x74>)
 8008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2e:	bf00      	nop
 8008d30:	08008d59 	.word	0x08008d59
 8008d34:	08008d59 	.word	0x08008d59
 8008d38:	08008d59 	.word	0x08008d59
 8008d3c:	08008e01 	.word	0x08008e01
 8008d40:	08008db5 	.word	0x08008db5
 8008d44:	08008ded 	.word	0x08008ded
 8008d48:	08008d59 	.word	0x08008d59
 8008d4c:	08008d59 	.word	0x08008d59
 8008d50:	08008e01 	.word	0x08008e01
 8008d54:	08008db5 	.word	0x08008db5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	18d1      	adds	r1, r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d66:	f7ff ff67 	bl	8008c38 <prvInsertTimerInActiveList>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d047      	beq.n	8008e00 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d76:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d13f      	bne.n	8008e00 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	441a      	add	r2, r3
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	2100      	movs	r1, #0
 8008d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d92:	f7ff fe1f 	bl	80089d4 <xTimerGenericCommand>
 8008d96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d130      	bne.n	8008e00 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	61bb      	str	r3, [r7, #24]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	617b      	str	r3, [r7, #20]
}
 8008dd4:	bf00      	nop
 8008dd6:	e7fe      	b.n	8008dd6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dda:	699a      	ldr	r2, [r3, #24]
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	18d1      	adds	r1, r2, r3
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de6:	f7ff ff27 	bl	8008c38 <prvInsertTimerInActiveList>
					break;
 8008dea:	e009      	b.n	8008e00 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df8:	f000 fb6c 	bl	80094d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008dfc:	e000      	b.n	8008e00 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008dfe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <prvProcessReceivedCommands+0x164>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	1d39      	adds	r1, r7, #4
 8008e06:	2200      	movs	r2, #0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fe f91f 	bl	800704c <xQueueReceive>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f47f af57 	bne.w	8008cc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	3730      	adds	r7, #48	; 0x30
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20001288 	.word	0x20001288

08008e24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e2a:	e045      	b.n	8008eb8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e2c:	4b2c      	ldr	r3, [pc, #176]	; (8008ee0 <prvSwitchTimerLists+0xbc>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e36:	4b2a      	ldr	r3, [pc, #168]	; (8008ee0 <prvSwitchTimerLists+0xbc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fd fd49 	bl	80068dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d12e      	bne.n	8008eb8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	4413      	add	r3, r2
 8008e62:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d90e      	bls.n	8008e8a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e78:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <prvSwitchTimerLists+0xbc>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	4619      	mov	r1, r3
 8008e82:	4610      	mov	r0, r2
 8008e84:	f7fd fcf2 	bl	800686c <vListInsert>
 8008e88:	e016      	b.n	8008eb8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	2100      	movs	r1, #0
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f7ff fd9d 	bl	80089d4 <xTimerGenericCommand>
 8008e9a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	603b      	str	r3, [r7, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	e7fe      	b.n	8008eb6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eb8:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <prvSwitchTimerLists+0xbc>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1b4      	bne.n	8008e2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ec2:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <prvSwitchTimerLists+0xbc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ec8:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <prvSwitchTimerLists+0xc0>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a04      	ldr	r2, [pc, #16]	; (8008ee0 <prvSwitchTimerLists+0xbc>)
 8008ece:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ed0:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <prvSwitchTimerLists+0xc0>)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	6013      	str	r3, [r2, #0]
}
 8008ed6:	bf00      	nop
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20001280 	.word	0x20001280
 8008ee4:	20001284 	.word	0x20001284

08008ee8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008eee:	f000 f92d 	bl	800914c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ef2:	4b15      	ldr	r3, [pc, #84]	; (8008f48 <prvCheckForValidListAndQueue+0x60>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d120      	bne.n	8008f3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008efa:	4814      	ldr	r0, [pc, #80]	; (8008f4c <prvCheckForValidListAndQueue+0x64>)
 8008efc:	f7fd fc68 	bl	80067d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f00:	4813      	ldr	r0, [pc, #76]	; (8008f50 <prvCheckForValidListAndQueue+0x68>)
 8008f02:	f7fd fc65 	bl	80067d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f06:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <prvCheckForValidListAndQueue+0x6c>)
 8008f08:	4a10      	ldr	r2, [pc, #64]	; (8008f4c <prvCheckForValidListAndQueue+0x64>)
 8008f0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f0c:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <prvCheckForValidListAndQueue+0x70>)
 8008f0e:	4a10      	ldr	r2, [pc, #64]	; (8008f50 <prvCheckForValidListAndQueue+0x68>)
 8008f10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f12:	2300      	movs	r3, #0
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	4b11      	ldr	r3, [pc, #68]	; (8008f5c <prvCheckForValidListAndQueue+0x74>)
 8008f18:	4a11      	ldr	r2, [pc, #68]	; (8008f60 <prvCheckForValidListAndQueue+0x78>)
 8008f1a:	2110      	movs	r1, #16
 8008f1c:	200a      	movs	r0, #10
 8008f1e:	f7fd fd6f 	bl	8006a00 <xQueueGenericCreateStatic>
 8008f22:	4603      	mov	r3, r0
 8008f24:	4a08      	ldr	r2, [pc, #32]	; (8008f48 <prvCheckForValidListAndQueue+0x60>)
 8008f26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <prvCheckForValidListAndQueue+0x60>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d005      	beq.n	8008f3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <prvCheckForValidListAndQueue+0x60>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	490b      	ldr	r1, [pc, #44]	; (8008f64 <prvCheckForValidListAndQueue+0x7c>)
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fc1c 	bl	8007774 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f3c:	f000 f936 	bl	80091ac <vPortExitCritical>
}
 8008f40:	bf00      	nop
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20001288 	.word	0x20001288
 8008f4c:	20001258 	.word	0x20001258
 8008f50:	2000126c 	.word	0x2000126c
 8008f54:	20001280 	.word	0x20001280
 8008f58:	20001284 	.word	0x20001284
 8008f5c:	20001334 	.word	0x20001334
 8008f60:	20001294 	.word	0x20001294
 8008f64:	080098fc 	.word	0x080098fc

08008f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3b04      	subs	r3, #4
 8008f78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3b04      	subs	r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f023 0201 	bic.w	r2, r3, #1
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3b04      	subs	r3, #4
 8008f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f98:	4a08      	ldr	r2, [pc, #32]	; (8008fbc <pxPortInitialiseStack+0x54>)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3b14      	subs	r3, #20
 8008fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3b20      	subs	r3, #32
 8008fae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr
 8008fbc:	08008fc1 	.word	0x08008fc1

08008fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fca:	4b12      	ldr	r3, [pc, #72]	; (8009014 <prvTaskExitError+0x54>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd2:	d00a      	beq.n	8008fea <prvTaskExitError+0x2a>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	60fb      	str	r3, [r7, #12]
}
 8008fe6:	bf00      	nop
 8008fe8:	e7fe      	b.n	8008fe8 <prvTaskExitError+0x28>
	__asm volatile
 8008fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	60bb      	str	r3, [r7, #8]
}
 8008ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ffe:	bf00      	nop
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0fc      	beq.n	8009000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009006:	bf00      	nop
 8009008:	bf00      	nop
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20000014 	.word	0x20000014
	...

08009020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009020:	4b07      	ldr	r3, [pc, #28]	; (8009040 <pxCurrentTCBConst2>)
 8009022:	6819      	ldr	r1, [r3, #0]
 8009024:	6808      	ldr	r0, [r1, #0]
 8009026:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800902a:	f380 8809 	msr	PSP, r0
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f04f 0000 	mov.w	r0, #0
 8009036:	f380 8811 	msr	BASEPRI, r0
 800903a:	f04e 0e0d 	orr.w	lr, lr, #13
 800903e:	4770      	bx	lr

08009040 <pxCurrentTCBConst2>:
 8009040:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009048:	4806      	ldr	r0, [pc, #24]	; (8009064 <prvPortStartFirstTask+0x1c>)
 800904a:	6800      	ldr	r0, [r0, #0]
 800904c:	6800      	ldr	r0, [r0, #0]
 800904e:	f380 8808 	msr	MSP, r0
 8009052:	b662      	cpsie	i
 8009054:	b661      	cpsie	f
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	df00      	svc	0
 8009060:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009062:	bf00      	nop
 8009064:	e000ed08 	.word	0xe000ed08

08009068 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800906e:	4b32      	ldr	r3, [pc, #200]	; (8009138 <xPortStartScheduler+0xd0>)
 8009070:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	22ff      	movs	r2, #255	; 0xff
 800907e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009090:	b2da      	uxtb	r2, r3
 8009092:	4b2a      	ldr	r3, [pc, #168]	; (800913c <xPortStartScheduler+0xd4>)
 8009094:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009096:	4b2a      	ldr	r3, [pc, #168]	; (8009140 <xPortStartScheduler+0xd8>)
 8009098:	2207      	movs	r2, #7
 800909a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800909c:	e009      	b.n	80090b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800909e:	4b28      	ldr	r3, [pc, #160]	; (8009140 <xPortStartScheduler+0xd8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	4a26      	ldr	r2, [pc, #152]	; (8009140 <xPortStartScheduler+0xd8>)
 80090a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ba:	2b80      	cmp	r3, #128	; 0x80
 80090bc:	d0ef      	beq.n	800909e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090be:	4b20      	ldr	r3, [pc, #128]	; (8009140 <xPortStartScheduler+0xd8>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f1c3 0307 	rsb	r3, r3, #7
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d00a      	beq.n	80090e0 <xPortStartScheduler+0x78>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	60bb      	str	r3, [r7, #8]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090e0:	4b17      	ldr	r3, [pc, #92]	; (8009140 <xPortStartScheduler+0xd8>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	021b      	lsls	r3, r3, #8
 80090e6:	4a16      	ldr	r2, [pc, #88]	; (8009140 <xPortStartScheduler+0xd8>)
 80090e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090ea:	4b15      	ldr	r3, [pc, #84]	; (8009140 <xPortStartScheduler+0xd8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80090f2:	4a13      	ldr	r2, [pc, #76]	; (8009140 <xPortStartScheduler+0xd8>)
 80090f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80090fe:	4b11      	ldr	r3, [pc, #68]	; (8009144 <xPortStartScheduler+0xdc>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a10      	ldr	r2, [pc, #64]	; (8009144 <xPortStartScheduler+0xdc>)
 8009104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009108:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800910a:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <xPortStartScheduler+0xdc>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a0d      	ldr	r2, [pc, #52]	; (8009144 <xPortStartScheduler+0xdc>)
 8009110:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009114:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009116:	f000 f8b9 	bl	800928c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800911a:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <xPortStartScheduler+0xe0>)
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009120:	f7ff ff92 	bl	8009048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009124:	f7fe ffaa 	bl	800807c <vTaskSwitchContext>
	prvTaskExitError();
 8009128:	f7ff ff4a 	bl	8008fc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	e000e400 	.word	0xe000e400
 800913c:	20001384 	.word	0x20001384
 8009140:	20001388 	.word	0x20001388
 8009144:	e000ed20 	.word	0xe000ed20
 8009148:	20000014 	.word	0x20000014

0800914c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	607b      	str	r3, [r7, #4]
}
 8009164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <vPortEnterCritical+0x58>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3301      	adds	r3, #1
 800916c:	4a0d      	ldr	r2, [pc, #52]	; (80091a4 <vPortEnterCritical+0x58>)
 800916e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009170:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <vPortEnterCritical+0x58>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d10f      	bne.n	8009198 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009178:	4b0b      	ldr	r3, [pc, #44]	; (80091a8 <vPortEnterCritical+0x5c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <vPortEnterCritical+0x4c>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	603b      	str	r3, [r7, #0]
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <vPortEnterCritical+0x4a>
	}
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	bc80      	pop	{r7}
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000014 	.word	0x20000014
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091b2:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <vPortExitCritical+0x4c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10a      	bne.n	80091d0 <vPortExitCritical+0x24>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	607b      	str	r3, [r7, #4]
}
 80091cc:	bf00      	nop
 80091ce:	e7fe      	b.n	80091ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80091d0:	4b09      	ldr	r3, [pc, #36]	; (80091f8 <vPortExitCritical+0x4c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	4a08      	ldr	r2, [pc, #32]	; (80091f8 <vPortExitCritical+0x4c>)
 80091d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <vPortExitCritical+0x4c>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d105      	bne.n	80091ee <vPortExitCritical+0x42>
 80091e2:	2300      	movs	r3, #0
 80091e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	f383 8811 	msr	BASEPRI, r3
}
 80091ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr
 80091f8:	20000014 	.word	0x20000014
 80091fc:	00000000 	.word	0x00000000

08009200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009200:	f3ef 8009 	mrs	r0, PSP
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	4b0d      	ldr	r3, [pc, #52]	; (8009240 <pxCurrentTCBConst>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009210:	6010      	str	r0, [r2, #0]
 8009212:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009216:	f04f 0050 	mov.w	r0, #80	; 0x50
 800921a:	f380 8811 	msr	BASEPRI, r0
 800921e:	f7fe ff2d 	bl	800807c <vTaskSwitchContext>
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f380 8811 	msr	BASEPRI, r0
 800922a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800922e:	6819      	ldr	r1, [r3, #0]
 8009230:	6808      	ldr	r0, [r1, #0]
 8009232:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009236:	f380 8809 	msr	PSP, r0
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	4770      	bx	lr

08009240 <pxCurrentTCBConst>:
 8009240:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009244:	bf00      	nop
 8009246:	bf00      	nop

08009248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	607b      	str	r3, [r7, #4]
}
 8009260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009262:	f7fe fe4d 	bl	8007f00 <xTaskIncrementTick>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800926c:	4b06      	ldr	r3, [pc, #24]	; (8009288 <SysTick_Handler+0x40>)
 800926e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	2300      	movs	r3, #0
 8009276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	f383 8811 	msr	BASEPRI, r3
}
 800927e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	e000ed04 	.word	0xe000ed04

0800928c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009290:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <vPortSetupTimerInterrupt+0x30>)
 8009292:	2200      	movs	r2, #0
 8009294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009296:	4b0a      	ldr	r3, [pc, #40]	; (80092c0 <vPortSetupTimerInterrupt+0x34>)
 8009298:	2200      	movs	r2, #0
 800929a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800929c:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <vPortSetupTimerInterrupt+0x38>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a09      	ldr	r2, [pc, #36]	; (80092c8 <vPortSetupTimerInterrupt+0x3c>)
 80092a2:	fba2 2303 	umull	r2, r3, r2, r3
 80092a6:	099b      	lsrs	r3, r3, #6
 80092a8:	4a08      	ldr	r2, [pc, #32]	; (80092cc <vPortSetupTimerInterrupt+0x40>)
 80092aa:	3b01      	subs	r3, #1
 80092ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092ae:	4b03      	ldr	r3, [pc, #12]	; (80092bc <vPortSetupTimerInterrupt+0x30>)
 80092b0:	2207      	movs	r2, #7
 80092b2:	601a      	str	r2, [r3, #0]
}
 80092b4:	bf00      	nop
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr
 80092bc:	e000e010 	.word	0xe000e010
 80092c0:	e000e018 	.word	0xe000e018
 80092c4:	20000008 	.word	0x20000008
 80092c8:	10624dd3 	.word	0x10624dd3
 80092cc:	e000e014 	.word	0xe000e014

080092d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092d6:	f3ef 8305 	mrs	r3, IPSR
 80092da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b0f      	cmp	r3, #15
 80092e0:	d914      	bls.n	800930c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092e2:	4a16      	ldr	r2, [pc, #88]	; (800933c <vPortValidateInterruptPriority+0x6c>)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	4413      	add	r3, r2
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092ec:	4b14      	ldr	r3, [pc, #80]	; (8009340 <vPortValidateInterruptPriority+0x70>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	7afa      	ldrb	r2, [r7, #11]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d20a      	bcs.n	800930c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	607b      	str	r3, [r7, #4]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800930c:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <vPortValidateInterruptPriority+0x74>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009314:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <vPortValidateInterruptPriority+0x78>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d90a      	bls.n	8009332 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	603b      	str	r3, [r7, #0]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <vPortValidateInterruptPriority+0x60>
	}
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	bc80      	pop	{r7}
 800933a:	4770      	bx	lr
 800933c:	e000e3f0 	.word	0xe000e3f0
 8009340:	20001384 	.word	0x20001384
 8009344:	e000ed0c 	.word	0xe000ed0c
 8009348:	20001388 	.word	0x20001388

0800934c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	; 0x28
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009354:	2300      	movs	r3, #0
 8009356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009358:	f7fe fd18 	bl	8007d8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800935c:	4b58      	ldr	r3, [pc, #352]	; (80094c0 <pvPortMalloc+0x174>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009364:	f000 f910 	bl	8009588 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009368:	4b56      	ldr	r3, [pc, #344]	; (80094c4 <pvPortMalloc+0x178>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4013      	ands	r3, r2
 8009370:	2b00      	cmp	r3, #0
 8009372:	f040 808e 	bne.w	8009492 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01d      	beq.n	80093b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800937c:	2208      	movs	r2, #8
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4413      	add	r3, r2
 8009382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	2b00      	cmp	r3, #0
 800938c:	d014      	beq.n	80093b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f023 0307 	bic.w	r3, r3, #7
 8009394:	3308      	adds	r3, #8
 8009396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <pvPortMalloc+0x6c>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	617b      	str	r3, [r7, #20]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d069      	beq.n	8009492 <pvPortMalloc+0x146>
 80093be:	4b42      	ldr	r3, [pc, #264]	; (80094c8 <pvPortMalloc+0x17c>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d864      	bhi.n	8009492 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093c8:	4b40      	ldr	r3, [pc, #256]	; (80094cc <pvPortMalloc+0x180>)
 80093ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093cc:	4b3f      	ldr	r3, [pc, #252]	; (80094cc <pvPortMalloc+0x180>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093d2:	e004      	b.n	80093de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d903      	bls.n	80093f0 <pvPortMalloc+0xa4>
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1f1      	bne.n	80093d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093f0:	4b33      	ldr	r3, [pc, #204]	; (80094c0 <pvPortMalloc+0x174>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d04b      	beq.n	8009492 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2208      	movs	r2, #8
 8009400:	4413      	add	r3, r2
 8009402:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	1ad2      	subs	r2, r2, r3
 8009414:	2308      	movs	r3, #8
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	429a      	cmp	r2, r3
 800941a:	d91f      	bls.n	800945c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800941c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4413      	add	r3, r2
 8009422:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <pvPortMalloc+0xf8>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	613b      	str	r3, [r7, #16]
}
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	1ad2      	subs	r2, r2, r3
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009456:	69b8      	ldr	r0, [r7, #24]
 8009458:	f000 f8f8 	bl	800964c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800945c:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <pvPortMalloc+0x17c>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	4a18      	ldr	r2, [pc, #96]	; (80094c8 <pvPortMalloc+0x17c>)
 8009468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800946a:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <pvPortMalloc+0x17c>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b18      	ldr	r3, [pc, #96]	; (80094d0 <pvPortMalloc+0x184>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	429a      	cmp	r2, r3
 8009474:	d203      	bcs.n	800947e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <pvPortMalloc+0x17c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a15      	ldr	r2, [pc, #84]	; (80094d0 <pvPortMalloc+0x184>)
 800947c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <pvPortMalloc+0x178>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	431a      	orrs	r2, r3
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800948c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009492:	f7fe fc89 	bl	8007da8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	f003 0307 	and.w	r3, r3, #7
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00a      	beq.n	80094b6 <pvPortMalloc+0x16a>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	60fb      	str	r3, [r7, #12]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <pvPortMalloc+0x168>
	return pvReturn;
 80094b6:	69fb      	ldr	r3, [r7, #28]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3728      	adds	r7, #40	; 0x28
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	20002334 	.word	0x20002334
 80094c4:	20002340 	.word	0x20002340
 80094c8:	20002338 	.word	0x20002338
 80094cc:	2000232c 	.word	0x2000232c
 80094d0:	2000233c 	.word	0x2000233c

080094d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d048      	beq.n	8009578 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094e6:	2308      	movs	r3, #8
 80094e8:	425b      	negs	r3, r3
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4413      	add	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	4b21      	ldr	r3, [pc, #132]	; (8009580 <vPortFree+0xac>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4013      	ands	r3, r2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <vPortFree+0x44>
	__asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	60fb      	str	r3, [r7, #12]
}
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00a      	beq.n	8009536 <vPortFree+0x62>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	60bb      	str	r3, [r7, #8]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	4b11      	ldr	r3, [pc, #68]	; (8009580 <vPortFree+0xac>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4013      	ands	r3, r2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d019      	beq.n	8009578 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d115      	bne.n	8009578 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <vPortFree+0xac>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	43db      	mvns	r3, r3
 8009556:	401a      	ands	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800955c:	f7fe fc16 	bl	8007d8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	4b07      	ldr	r3, [pc, #28]	; (8009584 <vPortFree+0xb0>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4413      	add	r3, r2
 800956a:	4a06      	ldr	r2, [pc, #24]	; (8009584 <vPortFree+0xb0>)
 800956c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800956e:	6938      	ldr	r0, [r7, #16]
 8009570:	f000 f86c 	bl	800964c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009574:	f7fe fc18 	bl	8007da8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009578:	bf00      	nop
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20002340 	.word	0x20002340
 8009584:	20002338 	.word	0x20002338

08009588 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800958e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009592:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009594:	4b27      	ldr	r3, [pc, #156]	; (8009634 <prvHeapInit+0xac>)
 8009596:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00c      	beq.n	80095bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3307      	adds	r3, #7
 80095a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 0307 	bic.w	r3, r3, #7
 80095ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	4a1f      	ldr	r2, [pc, #124]	; (8009634 <prvHeapInit+0xac>)
 80095b8:	4413      	add	r3, r2
 80095ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095c0:	4a1d      	ldr	r2, [pc, #116]	; (8009638 <prvHeapInit+0xb0>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095c6:	4b1c      	ldr	r3, [pc, #112]	; (8009638 <prvHeapInit+0xb0>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095d4:	2208      	movs	r2, #8
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 0307 	bic.w	r3, r3, #7
 80095e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4a15      	ldr	r2, [pc, #84]	; (800963c <prvHeapInit+0xb4>)
 80095e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095ea:	4b14      	ldr	r3, [pc, #80]	; (800963c <prvHeapInit+0xb4>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2200      	movs	r2, #0
 80095f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095f2:	4b12      	ldr	r3, [pc, #72]	; (800963c <prvHeapInit+0xb4>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	1ad2      	subs	r2, r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009608:	4b0c      	ldr	r3, [pc, #48]	; (800963c <prvHeapInit+0xb4>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	4a0a      	ldr	r2, [pc, #40]	; (8009640 <prvHeapInit+0xb8>)
 8009616:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	4a09      	ldr	r2, [pc, #36]	; (8009644 <prvHeapInit+0xbc>)
 800961e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009620:	4b09      	ldr	r3, [pc, #36]	; (8009648 <prvHeapInit+0xc0>)
 8009622:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009626:	601a      	str	r2, [r3, #0]
}
 8009628:	bf00      	nop
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	2000138c 	.word	0x2000138c
 8009638:	2000232c 	.word	0x2000232c
 800963c:	20002334 	.word	0x20002334
 8009640:	2000233c 	.word	0x2000233c
 8009644:	20002338 	.word	0x20002338
 8009648:	20002340 	.word	0x20002340

0800964c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009654:	4b27      	ldr	r3, [pc, #156]	; (80096f4 <prvInsertBlockIntoFreeList+0xa8>)
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e002      	b.n	8009660 <prvInsertBlockIntoFreeList+0x14>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d8f7      	bhi.n	800965a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4413      	add	r3, r2
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	429a      	cmp	r2, r3
 800967a:	d108      	bne.n	800968e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	441a      	add	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	441a      	add	r2, r3
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d118      	bne.n	80096d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4b14      	ldr	r3, [pc, #80]	; (80096f8 <prvInsertBlockIntoFreeList+0xac>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d00d      	beq.n	80096ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	441a      	add	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e008      	b.n	80096dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096ca:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <prvInsertBlockIntoFreeList+0xac>)
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	e003      	b.n	80096dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d002      	beq.n	80096ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr
 80096f4:	2000232c 	.word	0x2000232c
 80096f8:	20002334 	.word	0x20002334

080096fc <__itoa>:
 80096fc:	1e93      	subs	r3, r2, #2
 80096fe:	2b22      	cmp	r3, #34	; 0x22
 8009700:	b510      	push	{r4, lr}
 8009702:	460c      	mov	r4, r1
 8009704:	d904      	bls.n	8009710 <__itoa+0x14>
 8009706:	2300      	movs	r3, #0
 8009708:	461c      	mov	r4, r3
 800970a:	700b      	strb	r3, [r1, #0]
 800970c:	4620      	mov	r0, r4
 800970e:	bd10      	pop	{r4, pc}
 8009710:	2a0a      	cmp	r2, #10
 8009712:	d109      	bne.n	8009728 <__itoa+0x2c>
 8009714:	2800      	cmp	r0, #0
 8009716:	da07      	bge.n	8009728 <__itoa+0x2c>
 8009718:	232d      	movs	r3, #45	; 0x2d
 800971a:	700b      	strb	r3, [r1, #0]
 800971c:	2101      	movs	r1, #1
 800971e:	4240      	negs	r0, r0
 8009720:	4421      	add	r1, r4
 8009722:	f000 f805 	bl	8009730 <__utoa>
 8009726:	e7f1      	b.n	800970c <__itoa+0x10>
 8009728:	2100      	movs	r1, #0
 800972a:	e7f9      	b.n	8009720 <__itoa+0x24>

0800972c <itoa>:
 800972c:	f7ff bfe6 	b.w	80096fc <__itoa>

08009730 <__utoa>:
 8009730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009732:	b08b      	sub	sp, #44	; 0x2c
 8009734:	4605      	mov	r5, r0
 8009736:	460b      	mov	r3, r1
 8009738:	466e      	mov	r6, sp
 800973a:	4c1d      	ldr	r4, [pc, #116]	; (80097b0 <__utoa+0x80>)
 800973c:	f104 0c20 	add.w	ip, r4, #32
 8009740:	4637      	mov	r7, r6
 8009742:	6820      	ldr	r0, [r4, #0]
 8009744:	6861      	ldr	r1, [r4, #4]
 8009746:	3408      	adds	r4, #8
 8009748:	c703      	stmia	r7!, {r0, r1}
 800974a:	4564      	cmp	r4, ip
 800974c:	463e      	mov	r6, r7
 800974e:	d1f7      	bne.n	8009740 <__utoa+0x10>
 8009750:	7921      	ldrb	r1, [r4, #4]
 8009752:	6820      	ldr	r0, [r4, #0]
 8009754:	7139      	strb	r1, [r7, #4]
 8009756:	1e91      	subs	r1, r2, #2
 8009758:	2922      	cmp	r1, #34	; 0x22
 800975a:	6038      	str	r0, [r7, #0]
 800975c:	f04f 0100 	mov.w	r1, #0
 8009760:	d904      	bls.n	800976c <__utoa+0x3c>
 8009762:	7019      	strb	r1, [r3, #0]
 8009764:	460b      	mov	r3, r1
 8009766:	4618      	mov	r0, r3
 8009768:	b00b      	add	sp, #44	; 0x2c
 800976a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800976c:	1e58      	subs	r0, r3, #1
 800976e:	4684      	mov	ip, r0
 8009770:	fbb5 f7f2 	udiv	r7, r5, r2
 8009774:	fb02 5617 	mls	r6, r2, r7, r5
 8009778:	3628      	adds	r6, #40	; 0x28
 800977a:	446e      	add	r6, sp
 800977c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009780:	460c      	mov	r4, r1
 8009782:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009786:	462e      	mov	r6, r5
 8009788:	42b2      	cmp	r2, r6
 800978a:	463d      	mov	r5, r7
 800978c:	f101 0101 	add.w	r1, r1, #1
 8009790:	d9ee      	bls.n	8009770 <__utoa+0x40>
 8009792:	2200      	movs	r2, #0
 8009794:	545a      	strb	r2, [r3, r1]
 8009796:	1919      	adds	r1, r3, r4
 8009798:	1aa5      	subs	r5, r4, r2
 800979a:	42aa      	cmp	r2, r5
 800979c:	dae3      	bge.n	8009766 <__utoa+0x36>
 800979e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80097a2:	780e      	ldrb	r6, [r1, #0]
 80097a4:	3201      	adds	r2, #1
 80097a6:	7006      	strb	r6, [r0, #0]
 80097a8:	f801 5901 	strb.w	r5, [r1], #-1
 80097ac:	e7f4      	b.n	8009798 <__utoa+0x68>
 80097ae:	bf00      	nop
 80097b0:	0800a27a 	.word	0x0800a27a

080097b4 <memset>:
 80097b4:	4603      	mov	r3, r0
 80097b6:	4402      	add	r2, r0
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d100      	bne.n	80097be <memset+0xa>
 80097bc:	4770      	bx	lr
 80097be:	f803 1b01 	strb.w	r1, [r3], #1
 80097c2:	e7f9      	b.n	80097b8 <memset+0x4>

080097c4 <__libc_init_array>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	2600      	movs	r6, #0
 80097c8:	4d0c      	ldr	r5, [pc, #48]	; (80097fc <__libc_init_array+0x38>)
 80097ca:	4c0d      	ldr	r4, [pc, #52]	; (8009800 <__libc_init_array+0x3c>)
 80097cc:	1b64      	subs	r4, r4, r5
 80097ce:	10a4      	asrs	r4, r4, #2
 80097d0:	42a6      	cmp	r6, r4
 80097d2:	d109      	bne.n	80097e8 <__libc_init_array+0x24>
 80097d4:	f000 f830 	bl	8009838 <_init>
 80097d8:	2600      	movs	r6, #0
 80097da:	4d0a      	ldr	r5, [pc, #40]	; (8009804 <__libc_init_array+0x40>)
 80097dc:	4c0a      	ldr	r4, [pc, #40]	; (8009808 <__libc_init_array+0x44>)
 80097de:	1b64      	subs	r4, r4, r5
 80097e0:	10a4      	asrs	r4, r4, #2
 80097e2:	42a6      	cmp	r6, r4
 80097e4:	d105      	bne.n	80097f2 <__libc_init_array+0x2e>
 80097e6:	bd70      	pop	{r4, r5, r6, pc}
 80097e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ec:	4798      	blx	r3
 80097ee:	3601      	adds	r6, #1
 80097f0:	e7ee      	b.n	80097d0 <__libc_init_array+0xc>
 80097f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f6:	4798      	blx	r3
 80097f8:	3601      	adds	r6, #1
 80097fa:	e7f2      	b.n	80097e2 <__libc_init_array+0x1e>
 80097fc:	0800a2a0 	.word	0x0800a2a0
 8009800:	0800a2a0 	.word	0x0800a2a0
 8009804:	0800a2a0 	.word	0x0800a2a0
 8009808:	0800a2a4 	.word	0x0800a2a4

0800980c <strcpy>:
 800980c:	4603      	mov	r3, r0
 800980e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009812:	f803 2b01 	strb.w	r2, [r3], #1
 8009816:	2a00      	cmp	r2, #0
 8009818:	d1f9      	bne.n	800980e <strcpy+0x2>
 800981a:	4770      	bx	lr

0800981c <memcpy>:
 800981c:	440a      	add	r2, r1
 800981e:	4291      	cmp	r1, r2
 8009820:	f100 33ff 	add.w	r3, r0, #4294967295
 8009824:	d100      	bne.n	8009828 <memcpy+0xc>
 8009826:	4770      	bx	lr
 8009828:	b510      	push	{r4, lr}
 800982a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982e:	4291      	cmp	r1, r2
 8009830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009834:	d1f9      	bne.n	800982a <memcpy+0xe>
 8009836:	bd10      	pop	{r4, pc}

08009838 <_init>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	bf00      	nop
 800983c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983e:	bc08      	pop	{r3}
 8009840:	469e      	mov	lr, r3
 8009842:	4770      	bx	lr

08009844 <_fini>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	bf00      	nop
 8009848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984a:	bc08      	pop	{r3}
 800984c:	469e      	mov	lr, r3
 800984e:	4770      	bx	lr
